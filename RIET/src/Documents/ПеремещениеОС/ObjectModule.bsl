
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ДокументПринятияКУчетуБУ;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
//Процедура заполняет параметры ответственных лиц организации-получателя формы ОС2 
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	
	ПараметрыОрганизации = Новый структура("ГлавБух");	
		
	ПараметрыОрганизации.ГлавБух = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";

	Макет = ПолучитьОбщийМакет("М11");

	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок                = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Номер);
	Область.Параметры.КодОКПО                  = Организация.КодПоОКПО;
	Область.Параметры.ПредставлениеОрганизации = Организация;
	Область.Параметры.ДатаСоставления          = Формат( Дата, "ДФ=dd.MM.yy");
	Область.Параметры.Склад                    = Местонахождение.Наименование;
	//Область.Параметры.КоррСчет                 = СчетЗатрат.Код;
	Область.Параметры.ПредставлениеПодразделения = ПодразделениеОрганизации.Наименование;
	
	ТабДокумент.Вывести(Область);

	СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Счет",                         "СчетУчетаБУ");
	СтруктураПолей.Вставить("Материал",                     "ОсновноеСредство");
	СтруктураПолей.Вставить("МатериалНаименование",         "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("ПорядковыйНомер",          "ОсновноеСредство.Код");
	//СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	//СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	//СтруктураПолей.Вставить("Количество",                   "1");
	СтруктураПолей.Вставить("Цена",                   "СтоимостьНУ");
	СтруктураПолей.Вставить("Сумма",                   "СтоимостьНУ");


	Область = Макет.ПолучитьОбласть("Строка");
	
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей).Выгрузить();
    ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаМатериалов.Колонки.Добавить("Количество");
	ТаблицаМатериалов.ЗаполнитьЗначения(Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("ШТ"),"ЕдиницаИзмеренияНаименование");
	ТаблицаМатериалов.ЗаполнитьЗначения(1,"Количество");
	// Поиск сумм списания активов для заполнения Цены и Суммы
	//ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		
		//СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		//Если СтрокаСуммСписания = Неопределено Тогда
		//	 Область.Параметры.Цена = 0;
		//	 Область.Параметры.Сумма = 0;
		// Иначе
		//	 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
		//	 Область.Параметры.Цена  = Цена;
		//	 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		// КонецЕсли;
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	//ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();

	//Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

	//	Область.Параметры.Заполнить(СтрокаТЧ);
	//	СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
	//	Если СтрокаСуммСписания = Неопределено Тогда
	//		 Область.Параметры.Цена = 0;
	//		 Область.Параметры.Сумма = 0;
	//	 Иначе
	//		 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
	//		 Область.Параметры.Цена  = Цена;
	//		 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
	//	 КонецЕсли;
	//	ТабДокумент.Вывести(Область);

	//КонецЦикла;

	Область = Макет.ПолучитьОбласть("Подвал");

	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ11()
	
// Функция формирует табличный документ с печатной формой ОС-2,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС2()

	//Функция и макет были взяты из УПП и больше чем наполовину переписаны 
	//Трефиленков Дмитрий
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НазваниеСтоимости	= "СтоимостьБУ";	
	ВалютаПечати 	 	= Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокиСдатчикПолучатель = "		ПеремещениеОС.Организация	КАК Организация,
								|	ПеремещениеОС.ПодразделениеОрганизации КАК ПодрПолучатель,";

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеОС.Дата КАК ДатаДок,
	               |	ПеремещениеОС.Номер КАК НомерДок,
	               |	ПеремещениеОС.Ответственный КАК Ответственный,
	               |	ПеремещениеОС.Организация КАК Организация,
	               |	ПеремещениеОС.ПодразделениеОрганизации КАК КодПолучателя,
	               |	ПеремещениеОС.Дата КАК ДатаПередачи,
	               |	ПеремещениеОС.ПодразделениеОрганизации.Наименование КАК ПодрПолучатель,
	               |	ПеремещениеОС.Местонахождение КАК КодСдатчика,
	               |	ПеремещениеОС.Местонахождение.Наименование КАК ПодрСдатчик,
	               |	ПеремещениеОС.КостЦентр,
	               |	ПеремещениеОС.КостЦентрСдатчик
	               |ИЗ
	               |	Документ.ПеремещениеОС КАК ПеремещениеОС
	               |ГДЕ
	               |	ПеремещениеОС.Ссылка = &Ссылка";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	ШапкаДокумента.Следующий();
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТаблицаОС = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Дата);

	ТабДокумент   = Новый ТабличныйДокумент();
	Макет         = ПолучитьМакет("ОС2");
	ОбластьШапка1 = Макет.ПолучитьОбласть("Шапка1");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");

	ОбластьШапка1.Параметры.Заполнить(ШапкаДокумента);
	ОбластьШапка1.Параметры.Валюта = ВалютаПечати;
	ОбластьШапка1.Параметры.КодПолучателя = "" +ШапкаДокумента.КодПолучателя+"/"+ШапкаДокумента.КостЦентр;
	ОбластьШапка1.Параметры.КодСдатчика = "" + ШапкаДокумента.КодСдатчика+"/"+ШапкаДокумента.КостЦентрСдатчик;;
	
	ТабДокумент.Вывести(ОбластьШапка1);


	ИтогСумма = 0;

	Курс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Новый Структура("Валюта",Справочники.Валюты.НайтиПоНаименованию("USD"))).Курс;

	Для Каждого Строка Из ТаблицаОС Цикл
		СтрокаОС = ОС.Найти(Строка.ОС_БУ,"ОсновноеСредство");
		Если СтрокаОС.НомерСтроки = 10 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
			ТабДокумент.Вывести(ОбластьШапка2);
		КонецЕсли;
		ОбластьСтрока.Параметры.НС = СтрокаОС.НомерСтроки;
		ОбластьСтрока.Параметры.НаимОС = Лев(Строка.ОС_БУ,30);
		Если Строка.ОС_БУ.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
			ОбластьСтрока.Параметры.СуммаПеремещения = Строка.СтоимостьБУ - Строка.АмортизацияБУ;
		Иначе
			ОбластьСтрока.Параметры.СуммаПеремещения = (Строка.СтоимостьБУ - Строка.АмортизацияБУ)*Курс;
		КонецЕсли;			
		ОбластьСтрока.Параметры.ИнвНомер = СтрокаОС.ИнвентарныйНомер;
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Строка.ОС_БУ, Организация, Перечисления.СостоянияОС.ПринятоКУчету,ДокументПринятияКУчетуБУ,ОбластьСтрока.Параметры.ГодВыпуска);
		
		ТабДокумент.Вывести(ОбластьСтрока);
		ИтогСумма = ИтогСумма + ?(ОбластьСтрока.Параметры.СуммаПеремещения<>Null,ОбластьСтрока.Параметры.СуммаПеремещения,0);		
	КонецЦикла;
	

	Если ТаблицаОС.Количество() < 10 И ТаблицаОС.Количество() > 2 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		ТабДокумент.Вывести(ОбластьШапка2);
		ОбластьСтрОбр = Макет.ПолучитьОбласть("СтрОбр");
		ТабДокумент.Вывести(ОбластьСтрОбр);
	КонецЕсли;
	ОбластьПодвал.Параметры.ИтогСумма = ИтогСумма;
	ЗаполнитьДанныеОрганизацииПолучателя(ШапкаДокумента, ОбластьПодвал);
	
	ТабДокумент.Вывести(ОбластьПодвал);
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОС2()

// Функция формирует табличный документ с печатной формой ОС-2,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС2_KZ()

	//Функция и макет были взяты из УПП и больше чем наполовину переписаны 
	//Трефиленков Дмитрий
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НазваниеСтоимости	= "СтоимостьБУ";	
	ВалютаПечати 	 	= Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокиСдатчикПолучатель = "		ПеремещениеОС.Организация	КАК Организация,
								|	ПеремещениеОС.ПодразделениеОрганизации КАК ПодрПолучатель,";

	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПеремещениеОС.Дата КАК ДатаДок,
	//               |	ПеремещениеОС.Номер КАК НомерДок,
	//               |	ПеремещениеОС.Ответственный КАК Ответственный,
	//               |	ПеремещениеОС.Организация КАК Организация,
	//               |	ПеремещениеОС.ПодразделениеОрганизации КАК КодПолучателя,
	//               |	ПеремещениеОС.Дата КАК ДатаПередачи,
	//               |	ПеремещениеОС.ПодразделениеОрганизации.Наименование КАК ПодрПолучатель,
	//               |	ПеремещениеОС.Местонахождение КАК КодСдатчика,
	//               |	ПеремещениеОС.Местонахождение.Наименование КАК ПодрСдатчик,
	//               |	ПеремещениеОС.КостЦентр,
	//               |	ПеремещениеОС.КостЦентрСдатчик
	//               |ИЗ
	//               |	Документ.ПеремещениеОС КАК ПеремещениеОС
	//               |ГДЕ
	//               |	ПеремещениеОС.Ссылка = &Ссылка";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеОС.Дата КАК ДатаДок,
	               |	ПеремещениеОС.Номер КАК НомерДок,
	               |	ПеремещениеОС.Ответственный КАК Ответственный,
	               |	ПеремещениеОС.Организация КАК Организация,
	               |	ПеремещениеОС.ПодразделениеОрганизации КАК КодПолучателя,
	               |	ПеремещениеОС.Дата КАК ДатаПередачи,
	               |	ВЫБОР
	               |		КОГДА НаименованияНалоговыхРегистрацийДляПеремещенийОСвKZ.НалоговаяРегистрация ЕСТЬ NULL
	               |			ТОГДА ПеремещениеОС.ПодразделениеОрганизации.Наименование
	               |		ИНАЧЕ ""Филиал компании «Шлюмберже Лоджелко Инк.» в Республике Казахстан""
	               |	КОНЕЦ КАК ПодрПолучатель,
	               |	ПеремещениеОС.Местонахождение КАК КодСдатчика,
	               |	ЕСТЬNULL(НаименованияНалоговыхРегистрацийДляПеремещенийОСвKZ.Наименование, ПеремещениеОС.Местонахождение.Наименование) КАК ПодрСдатчик,
	               |	ПеремещениеОС.КостЦентр,
	               |	ПеремещениеОС.КостЦентрСдатчик КАК КостЦентрСдатчик
	               |ИЗ
	               |	Документ.ПеремещениеОС КАК ПеремещениеОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаименованияНалоговыхРегистрацийДляПеремещенийОСвKZ КАК НаименованияНалоговыхРегистрацийДляПеремещенийОСвKZ
	               |		ПО ПеремещениеОС.Местонахождение = НаименованияНалоговыхРегистрацийДляПеремещенийОСвKZ.НалоговаяРегистрация
	               |ГДЕ
	               |	ПеремещениеОС.Ссылка = &Ссылка";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	ШапкаДокумента.Следующий();
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТаблицаОС = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Дата);
	
	// { RGS LFedotova 02.08.2018 15:55:42 - вопрос SLI-0007634
	ТаблицаОС.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаОС.Колонки.Добавить("ИнвентарныйНомер", Новый ОписаниеТипов("Строка"));
	Для Каждого Строка Из ТаблицаОС Цикл
		СтрокаОС = ОС.Найти(Строка.ОС_БУ,"ОсновноеСредство");
		Строка.НомерСтроки = СтрокаОС.НомерСтроки;
		Строка.ИнвентарныйНомер = СтрокаОС.ИнвентарныйНомер;
	КонецЦикла;
	ТаблицаОС.Сортировать("НомерСтроки");
	// } RGS LFedotova 02.08.2018 15:56:06 - вопрос SLI-0007634 

	ТабДокумент   = Новый ТабличныйДокумент();
	Макет         = ПолучитьМакет("ОС2_KZ");
	ОбластьШапка1 = Макет.ПолучитьОбласть("Шапка1");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");

	ОбластьШапка1.Параметры.Заполнить(ШапкаДокумента);
	ОбластьШапка1.Параметры.Валюта = ВалютаПечати;
	ОбластьШапка1.Параметры.КодПолучателя = "" +ШапкаДокумента.КодПолучателя+"/"+ШапкаДокумента.КостЦентр;
	ОбластьШапка1.Параметры.КодСдатчика = "" + ШапкаДокумента.КодСдатчика+"/"+ШапкаДокумента.КостЦентрСдатчик;;
	
	ТабДокумент.Вывести(ОбластьШапка1);


	ИтогСумма = 0;

	Курс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Новый Структура("Валюта",Справочники.Валюты.НайтиПоНаименованию("USD"))).Курс;

	Для Каждого Строка Из ТаблицаОС Цикл
		// { RGS LFedotova 02.08.2018 16:12:54 - вопрос SLI-0007634
		//СтрокаОС = ОС.Найти(Строка.ОС_БУ,"ОсновноеСредство");
		//Если СтрокаОС.НомерСтроки = 10 Тогда
		Если Строка.НомерСтроки = 10 Тогда
		// } RGS LFedotova 02.08.2018 16:13:13 - вопрос SLI-0007634 
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
			ТабДокумент.Вывести(ОбластьШапка2);
		КонецЕсли;
		// { RGS LFedotova 02.08.2018 16:15:21 - вопрос SLI-0007634
		//ОбластьСтрока.Параметры.НС = СтрокаОС.НомерСтроки;
		ОбластьСтрока.Параметры.НС = Строка.НомерСтроки;
		// } RGS LFedotova 02.08.2018 16:15:25 - вопрос SLI-0007634 
		ОбластьСтрока.Параметры.НаимОС = Лев(Строка.ОС_БУ,30);
		Если Строка.ОС_БУ.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
			ОбластьСтрока.Параметры.СуммаПеремещения = Строка.СтоимостьБУ - Строка.АмортизацияБУ;
		Иначе
			ОбластьСтрока.Параметры.СуммаПеремещения = (Строка.СтоимостьБУ - Строка.АмортизацияБУ)*Курс;
		КонецЕсли;
		// { RGS LFedotova 02.08.2018 16:16:38 - вопрос SLI-0007634
		//ОбластьСтрока.Параметры.ИнвНомер = СтрокаОС.ИнвентарныйНомер;
		ОбластьСтрока.Параметры.ИнвНомер = Строка.ИнвентарныйНомер;
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведения.ПолучитьПоследнее(Дата, Новый Структура("ОсновноеСредство", Строка.ОС_БУ));
		ОбластьСтрока.Параметры.ПервоначальнаяСтоимость = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей.ПервоначальнаяСтоимостьБУ, 0);
		ВыборкаЗаписей = РегистрыСведений.НачислениеАмортизации.ПолучитьПоследнее(Дата, Новый Структура("ОсновноеСредство", Строка.ОС_БУ));
		ОбластьСтрока.Параметры.СрокПИ = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей.СрокПолезногоИспользованияБУ, 0);	
		// } RGS LFedotova 02.08.2018 16:17:02 - вопрос SLI-0007634 
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Строка.ОС_БУ, Организация, Перечисления.СостоянияОС.ПринятоКУчету,ДокументПринятияКУчетуБУ,ОбластьСтрока.Параметры.ГодВыпуска);
		
		ТабДокумент.Вывести(ОбластьСтрока);
		ИтогСумма = ИтогСумма + ?(ОбластьСтрока.Параметры.СуммаПеремещения<>Null,ОбластьСтрока.Параметры.СуммаПеремещения,0);		
	КонецЦикла;
	

	Если ТаблицаОС.Количество() < 10 И ТаблицаОС.Количество() > 2 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		ТабДокумент.Вывести(ОбластьШапка2);
		ОбластьСтрОбр = Макет.ПолучитьОбласть("СтрОбр");
		ТабДокумент.Вывести(ОбластьСтрОбр);
	КонецЕсли;
	ОбластьПодвал.Параметры.ИтогСумма = ИтогСумма;
	// { RGS LFedotova 02.08.2018 17:02:47 - вопрос SLI-0007634
	ОбластьПодвал.Параметры.Комментарий = Комментарий;
	// } RGS LFedotova 02.08.2018 17:03:15 - вопрос SLI-0007634 
	ЗаполнитьДанныеОрганизацииПолучателя(ШапкаДокумента, ОбластьПодвал);
	
	ТабДокумент.Вывести(ОбластьПодвал);
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОС2_KZ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС2" тогда
		ТабДокумент = ПечатьОС2();
	// { RGS LFedotova 03.08.2018 14:04:30 - вопрос SLI-0007634
	ИначеЕсли ИмяМакета = "ОС2_KZ" тогда
		ТабДокумент = ПечатьОС2_KZ();
	// } RGS LFedotova 03.08.2018 14:04:51 - вопрос SLI-0007634 
	ИначеЕсли ИмяМакета = "М11" тогда
		ТабДокумент = ПечатьМ11();

	КонецЕсли;

	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Накладная на перемещение ОС (форма ОС-2)"));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СоответствиеМакетов = Новый Соответствие();
	СоответствиеМакетов.Вставить("Форма ОС-2 ", "ОС2");
	// { RGS LFedotova 03.08.2018 14:05:56 - вопрос SLI-0007634
	СоответствиеМакетов.Вставить("Форма ОС-2 KZ ", "ОС2_KZ");
	// } RGS LFedotova 03.08.2018 14:06:10 - вопрос SLI-0007634 
    СоответствиеМакетов.Вставить("М-11 ", "М11");

	Возврат СоответствиеМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

// Возвращает доступные варианты печати справочника.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС2,ОС2_KZ,М11","Форма ОС-2","Форма ОС-2 KZ","M-11");

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации
								|";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура вызывается при выборе пункта подменю "Для списка ОС" из меню "Заполнить"
// командной панели формы. Процедура выполняет заполнение колонок с данными 
// в табличной части по каждому выбранному основному средству.
//
Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт 
	
	СписокОС = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОС_ИнвенНомер.ОсновноеСредство,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	АмортизацияЗаПериод.СуммаБУ КАК АмортизацияБУ,
	|	АмортизацияЗаПериод.СуммаНУ КАК АмортизацияНУ,
	|	ОС_ИнвенНомер.ИнвентарныйНомер,
	|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|		ПервоначальныеСведенияСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияСрезПоследних) КАК ОС_ИнвенНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.Дата));
	Запрос.УстановитьПараметр("МоментВремени", ДокОбъект.МоментВремени()); //добавила Федотова Л., РГ-Софт, так как бывают 
	//перемещения в месяц принятия к учету и надо считать остатки по регистру СтоимостьАмортизация ОС на момент перемещения,
	//а не на начало месяца. Изменила также и запрос. 20.10.09
	
	табСведенияОС = Запрос.Выполнить().Выгрузить();
	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого Строка Из ДокОбъект.ОС Цикл	
		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Если НЕ НайденноеОС = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	//ОбязательныеРеквизитыШапки = "Организация, ПодразделениеОрганизации, КостЦентр, КостЦентрСдатчик";//, МОЛОрганизации";
	ОбязательныеРеквизитыШапки = "Организация, ПодразделениеОрганизации, КостЦентр";//, МОЛОрганизации";

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации) И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) И СтруктураШапкиДокумента.ПодразделениеОрганизации.Владелец <> СтруктураШапкиДокумента.Организация Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Выбранное подразделение организации не соответствует указанной организации", Отказ,Заголовок);
	КонецЕсли;
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Проверим соответствие организайий ОС и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     , СтруктураШапкиДокумента.Дата);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчет.Организация КАК Организация,
	|	ОсновныеСредства.Код                           КАК Инв,
	|	ОсновныеСредства.Ссылка                        КАК ОсновноеСредство,
	|	Представление(ОсновныеСредства.Ссылка)         КАК ОсновноеСредствоПредставление
	|
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСреза, (ОсновноеСредство В(&СписокОС) И Организация = &ВыбОрганизация)) КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&СписокОС) И
	|	НЕ ОсновныеСредства.ЭтоГруппа И
	|	МестонахождениеОСБухгалтерскийУчет.Организация ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		Отказ = Истина;

		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(("Бух.учет: Несоответствие организаций ОС """ + СокрЛП(Выборка.ОсновноеСредствоПредставление) + """ инв.№ " + СокрЛП(Выборка.Инв) + " и организации указанной в документе."),, Заголовок);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

Процедура ПроверитьНаличиеВыбывшихОС(Отказ)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПеремещениеОСОС.НомерСтроки
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.НомерСтроки
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|	И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаПоОС Цикл
		Отказ = Истина;
		Сообщить("Основное средство " + Строка.ОсновноеСредство + ", строка " + Строка.НомерСтроки +
		" снято с учета.");
	КонецЦикла; 
	Если Отказ Тогда
		Сообщить("Документ не может быть проведен.");
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьНаличиеВыбывшихОС()


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)

	ДатаДока = Дата;

	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	ОперацииОС                   = Движения.СобытияОСОрганизаций;
	//Налоговый					 = Движения.Налоговый;
	//Хозрасчетный				 = Движения.Хозрасчетный;
	                             
	//Добавил Трефиленков Дмитрий для учета ОС в валюте
	Доллар = Справочники.Валюты.НайтиПоНаименованию("USD");
	КурсДоллара = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоНаименованию("USD"), Дата).Курс;
	//конец добавления
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		Движение = МестонахождениеОСОрганизаций.Добавить();
	
		Движение.Период           = ?(ДатаПроведения = '0001.01.01',ДатаДока,ДатаПроведения) + 3600;
		//изменил Трефиленков Дмитрий, РГ-Софт, 23.04.2012
		Если КонецДня(ДатаПроведения) = КонецГода(ДатаПроведения) Тогда
			Движение.Период       = Движение.Период + 22*3600 + 59*60; //23:59:00
		КонецЕсли;
		Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛОрганизации;
		Движение.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		//Добавил Трефиленков Дмитрий для учета по кост-центрам
		Движение.КостЦентр		  =	СтруктураШапкиДокумента.КостЦентр;
		//Добавил Трефиленков Дмитрий для разделения прав
		//Было закомментировано, раскомментировала Федотова Л., РГ-Софт, 10.09.10 ->
		Элем = СтрокаТЧ.ОсновноеСредство.ПолучитьОбъект();
		Элем.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Элем.Записать();
		//<-
		Привилегированный.ПереместитьОС(СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.ОсновноеСредство.Подразделение, СтруктураШапкиДокумента.ПодразделениеОрганизации);

		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период				= ?(ДатаПроведения = '0001.01.01',ДатаДока,ДатаПроведения);
		//изменил Трефиленков Дмитрий, РГ-Софт, 23.04.2012
		Если КонецДня(ДатаПроведения) = КонецГода(ДатаПроведения) Тогда
			Движение.Период       = Движение.Период + 22*3600 + 59*60; //23:59:00
		КонецЕсли;
		Движение.ОсновноеСредство	= СтрокаТЧ.ОсновноеСредство;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		//// Движения по регистрам бухгалтерии
		//Если Не СтрокаТЧ.СчетУчетаБУ = Неопределено И СтрокаТЧ.СтоимостьБУ <> 0 Тогда
		//	Если ПодразделениеОрганизации <> Местонахождение Тогда
		//		Проводка = Хозрасчетный.Добавить();
		//		
		//		Проводка.Период      = Дата;
		//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//		Проводка.Содержание  = "Перемещение ОС (баланс. стоимость)";
		//		Проводка.Сумма       = СтрокаТЧ.СтоимостьБУ;
		//		Проводка.СчетДт = СтрокаТЧ.СчетУчетаБУ;
		//		Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеОрганизации);
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Местонахождение);
		//		Если СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		//			Поставщик = "";
		//			Запрос = Новый Запрос;
		//			Запрос.Текст = "ВЫБРАТЬ
		//			|	ХозрасчетныйОстатки.Субконто3 КАК Поставщик
		//			|ИЗ
		//			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет = &Счет, , Субконто1 = &ОС) КАК ХозрасчетныйОстатки";
		//			
		//			Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		//			Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);
		//			Запрос.УстановитьПараметр("ОС", СтрокаТЧ.ОсновноеСредство);
		//			
		//			Результат = Запрос.Выполнить();
		//			Выборка = Результат.Выбрать();
		//			
		//			Если Выборка.Следующий() Тогда
		//				Поставщик = Выборка.Поставщик;
		//			КонецЕсли;
		//			
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Поставщик);
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Поставщик);
		//		КонецЕсли;	                                                               
		//		Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
		//		Проводка.ПодразделениеОрганизацииКт = Местонахождение;
		//		Если НЕ СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		//			Если СтрокаТЧ.ОсновноеСредство.Валюта = Доллар Тогда 
		//				Проводка.ВалютнаяСуммаДт= Проводка.Сумма*КурсДоллара;
		//				Проводка.ВалютнаяСуммаКт= Проводка.Сумма*КурсДоллара;
		//			Иначе
		//				Проводка.ВалютнаяСуммаДт= Проводка.Сумма;
		//				Проводка.ВалютнаяСуммаКт= Проводка.Сумма;
		//			КонецЕсли;
		//		КонецЕсли;	                                                               
		//	КонецЕсли;
		//	
		//	Если Не СтрокаТЧ.СчетУчетаНУ = Неопределено И СтрокаТЧ.СтоимостьНУ <> 0 Тогда
		//		Проводка = Налоговый.Добавить();
		//		Проводка.Период      = Дата;
		//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//		Проводка.Содержание  = "Перемещение ОС (баланс. стоимость)";
		//		Проводка.Сумма       = СтрокаТЧ.СтоимостьНУ;
		//		Проводка.СчетДт = СтрокаТЧ.СчетУчетаНУ;
		//		Проводка.СчетКт = СтрокаТЧ.СчетУчетаНУ;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеОрганизации);
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Местонахождение);
		//		Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
		//		Проводка.ПодразделениеОрганизацииКт = Местонахождение;
		//	КонецЕсли; 
		//КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ОсновноеСредство
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ОсновноеСредство В(&СписокОС)";
	
	Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	ИсходнаяТаблица.Свернуть("ОсновноеСредство,СтоимостьБУ,СтоимостьНУ,СуммаКВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СтоимостьБУОстаток,
	|	ВложенныйЗапрос.СтоимостьНУОстаток,
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.СуммаКВОстаток
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУОстаток,
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ПервоначальныеСведения.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МоментВремени, МЕСЯЦ)
	|				ТОГДА СтоимостьАмортизацияОСОстатки.СуммаКВОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаКВОстаток
	|	ИЗ
	|		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
	|			ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ИсходнаяТаблица.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУОстаток, ИсходнаяТаблица.СтоимостьБУ) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ИсходнаяТаблица.СтоимостьНУ) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ИсходнаяТаблица.СуммаКВ) КАК СуммаКВ
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|		ПО ИсходнаяТаблица.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("МоментВремени", Дата);
	Запрос.УстановитьПараметр("ПериодАмортизации", Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока					 = НоваяТаблица.Добавить();
		НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Активность		 = Истина;
		НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения)+ 3600;
		//изменил Трефиленков Дмитрий, РГ-Софт, 23.04.2012
		Если КонецДня(Документ.ДатаПроведения) = КонецГода(Документ.ДатаПроведения) Тогда
			НоваяСтрока.Период       = НоваяСтрока.Период + 22*3600 + 59*60; //23:59:00
		КонецЕсли;
		НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.Подразделение    = Документ.Местонахождение;
		НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ; 
		
		//Изменила Федотова Л., РГ-Софт, 29.10.14, вопрос SLI-0004948
		//НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ - Выборка.СуммаКВ;   
		НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;   
		
		НоваяСтрока.СуммаКВ		   	 = Выборка.СуммаКВ;   
		//НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
		//НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
		
		НоваяСтрока					 = НоваяТаблица.Добавить();
		НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Активность		 = Истина;
		НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения)+ 3600;
		//изменил Трефиленков Дмитрий, РГ-Софт, 23.04.2012
		Если КонецДня(Документ.ДатаПроведения) = КонецГода(Документ.ДатаПроведения) Тогда
			НоваяСтрока.Период       = НоваяСтрока.Период + 22*3600 + 59*60; //23:59:00
		КонецЕсли;
		НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.Подразделение    = Документ.ПодразделениеОрганизации;
		НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
		//Изменила Федотова Л., РГ-Софт, 29.10.14, вопрос SLI-0004948
		//НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ - Выборка.СуммаКВ;      
		НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;      
		НоваяСтрока.СуммаКВ		   	 = Выборка.СуммаКВ;   
		//НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
		//НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
	КонецЦикла;
	
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();
	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		//Хорошо бы здесь сравнить таблицы документа до заполнения и после, и если они совпадают, 
		//то ничего не записывать и не сообщать о перезаполнении
		Сообщить("Перезаполнена табличная часть документа " + Документ);
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

                                                                                                              
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаПроведения(Отказ)
	
	Если ПодразделениеОрганизации.Код = "Туруханск " и Дата >= '20120101' Тогда
		Сообщить("С 2012 года не используется подразделение ""Туруханск"", выберите ""Филиал Туруханск""");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	//отмена проведения требуется для случая, если изменена дата документа
	УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьНаличиеВыбывшихОС(Отказ);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("СтоимостьБУ", "СтоимостьБУ");
	СтруктураПолей.Вставить("СтоимостьНУ", "СтоимостьНУ");
	//СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	//СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	//Добавила Федотова Л., РГ-Софт, 19.02.16, вопрос SLI-0006221
	// Проверим местонахождение ОС
	ПроверитьМестонахождениеОС(ТаблицаПоОС, Отказ);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок);
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 19.02.16, вопрос SLI-0006221
Процедура ПроверитьМестонахождениеОС(ТаблицаПоОС, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабОС.ОсновноеСредство,
		|	ТабОС.НомерСтроки
		|ПОМЕСТИТЬ ОС
		|ИЗ
		|	&ТабОС КАК ТабОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	ОС.ОсновноеСредство,
		|	ОС.НомерСтроки
		|ИЗ
		|	ОС КАК ОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение <> &ПодразделениеОрганизации";

	Запрос.УстановитьПараметр("ТабОС", ТаблицаПоОС);
	Запрос.УстановитьПараметр("Дата", ДатаПроведения);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Местонахождение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщить("Местонахождение " + СокрЛП(ВыборкаДетальныеЗаписи.Местонахождение) + " основного средства " + 
		ВыборкаДетальныеЗаписи.ОсновноеСредство + ", строка " + ВыборкаДетальныеЗаписи.НомерСтроки + "
		|не соответствует подразделению " + СокрЛП(Местонахождение) + " документа.");
		Отказ = Истина;
	КонецЦикла;

	Если Отказ Тогда
		Сообщить("Документ не может быть проведен.");
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьМестонахождениеОС()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОСЗаполнитьДляСписка(ЭтотОбъект);
	КонецЕсли;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры
