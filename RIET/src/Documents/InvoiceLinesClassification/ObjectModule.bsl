
////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(
		ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching);
	
	ПроверитьВозможностьИзменения(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
						
	ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи, ДополнительныеСвойства.ТаблицаItems);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПровестиСопутствующиеДокументы(Отказ);						
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
	
	РГСофтКлиентСервер.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < Classification.Количество() Цикл
		
		СтрокаТЧ = Classification[ИндексСтроки];
		
		Если ЗначениеЗаполнено(СтрокаТЧ.InvoiceLine) Тогда
		
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Translation, СокрЛП(СтрокаТЧ.Translation));
			
			ИндексСтроки = ИндексСтроки + 1;
			
		Иначе
			
			Classification.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Classification.Свернуть("InvoiceLine, Type, Translation, DoNotVerifyWithCatalog", "");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи)
	
	// Invoice lines matching
	Если НЕ ЗначениеЗаполнено(InvoiceLinesMatching) Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Invoice lines matching"" is empty!",
			ЭтотОбъект, "InvoiceLinesMatching", , Отказ);			
	КонецЕсли;
	
	// Не должно быть двух строк с одинаковой строкой инвойса
	Если Classification.Количество() > 0 Тогда
			
		ТаблицаСтрокИнвойсов = Classification.Выгрузить(,"InvoiceLine");
		ТаблицаСтрокИнвойсов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаСтрокИнвойсов.ЗаполнитьЗначения(1, "Количество");
		ТаблицаСтрокИнвойсов.Свернуть("InvoiceLine", "Количество");	
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокИнвойсов Цикл
			
			Если СтрокаТаблицы.Количество > 1 Тогда
				
				СтрокаТЧ = Classification.Найти(СтрокаТаблицы.InvoiceLine, "InvoiceLine");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"""Item " + СокрЛП(СтрокаТаблицы.InvoiceLine) + """ listed multiple times!",
					ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
		
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли; 
	
	// Process elvel
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Process level is empty!",
			ЭтотОбъект, "ProcessLevel", , ЭтотОбъект);
	КонецЕсли;
	
	// Табличная часть должна быть заполнена
	Если НЕ Classification.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Classification"" is empty!",
			ЭтотОбъект, "Classification", , Отказ);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Classification Цикл
		
		// Заполнение колонки Type
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Type) Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""Type"" is empty!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки - 1) + "].Type", , Отказ);
		КонецЕсли;
		
		// Заполнение колонки Translation
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Translation) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""Translation"" is empty!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки - 1) + "].Translation", , Отказ);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	СтруктураПараметров.Вставить("Ссылка", Ссылка);	
	
	//Если Проведен Тогда
	//	
	//	СтруктураТекстов.Вставить("ПроведенныеРИЗПы",
	//		"ВЫБРАТЬ
	//		|	РаспределениеИмпортаПоЗакрытиюПоставки.Представление
	//		|ИЗ
	//		|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспределениеИмпортаПоЗакрытиюПоставки КАК РаспределениеИмпортаПоЗакрытиюПоставки
	//		|		ПО InvoiceLinesClassification.InvoiceLinesMatching = РаспределениеИмпортаПоЗакрытиюПоставки.ShipmentСlosing
	//		|			И (РаспределениеИмпортаПоЗакрытиюПоставки.Проведен)
	//		|ГДЕ
	//		|	InvoiceLinesClassification.Ссылка = &Ссылка");	
	//	
	//КонецЕсли;
		
	СтруктураПараметров.Вставить("InvoiceLinesMatching", InvoiceLinesMatching);
	
	СтруктураТекстов.Вставить("ПохожиеДокументы",
		"ВЫБРАТЬ
		|	InvoiceLinesClassification.Представление КАК Представление
		|ИЗ
		|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
		|ГДЕ
		|	InvoiceLinesClassification.InvoiceLinesMatching = &InvoiceLinesMatching
		|	И InvoiceLinesClassification.Ссылка <> &Ссылка");
		
	Если Classification.Количество() > 0 Тогда
		
		СтруктураПараметров.Вставить("InvoiceLines", Classification.ВыгрузитьКолонку("InvoiceLine"));
		СтруктураТекстов.Вставить("InvoiceLinesВПохожихДокументах",
			"ВЫБРАТЬ
			|	InvoiceLinesClassificationClassification.Ссылка.Представление КАК Представление,
			|	InvoiceLinesClassificationClassification.InvoiceLine
			|ИЗ
			|	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
			|ГДЕ
			|	InvoiceLinesClassificationClassification.Ссылка <> &Ссылка
			|	И InvoiceLinesClassificationClassification.InvoiceLine В(&InvoiceLines)");
			
	КонецЕсли;	
		
	Если ЭтоНовый() ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		СтруктураТекстов.Вставить("РеквизитыInvoiceLinesMatching",
			"ВЫБРАТЬ
			|	InvoiceLinesMatching.Номер,
			|	InvoiceLinesMatching.ПометкаУдаления,
			|	InvoiceLinesMatching.Проведен
			|ИЗ
			|	Документ.ЗакрытиеПоставки КАК InvoiceLinesMatching
			|ГДЕ
			|	InvoiceLinesMatching.Ссылка = &InvoiceLinesMatching");
			
	КонецЕсли;		
			
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтруктураТекстов.Вставить("РеквизитыItems",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК Item,
			|	Items.ПометкаУдаления,
			|	Items.КостЦентр КАК AU,
			|	Items.КостЦентр.OnlyMS КАК OnlyMS,
			|	Items.Классификатор КАК ERPTreatment
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|ГДЕ
			|	Items.Ссылка В(&InvoiceLines)");
		
		СтруктураТекстов.Вставить("Classification",
			CustomsСервер.ПолучитьТекстЗапросаЗаполненияInvoiceLinesClassification());
							
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	//ДополнительныеСвойства.Вставить("ВыборкаПроведенныхРИЗПов", Неопределено);
	//Если СтруктураРезультатов.Свойство("ПроведенныеРИЗПы") Тогда
	//	ДополнительныеСвойства.ВыборкаПроведенныхРИЗПов = СтруктураРезультатов.ПроведенныеРИЗПы.Выбрать();
	//КонецЕсли;

	ДополнительныеСвойства.Вставить("ВыборкаПохожихДокументов", Неопределено);
	Если СтруктураРезультатов.Свойство("ПохожиеДокументы") Тогда
		ДополнительныеСвойства.ВыборкаПохожихДокументов = СтруктураРезультатов.ПохожиеДокументы.Выбрать();
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовInvoiceLinesMatching", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыInvoiceLinesMatching") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching = СтруктураРезультатов.РеквизитыInvoiceLinesMatching.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching.Следующий();
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ВыборкаInvoiceLinesВПохожихДокументах", Неопределено);
	Если СтруктураРезультатов.Свойство("InvoiceLinesВПохожихДокументах") Тогда
		ДополнительныеСвойства.ВыборкаInvoiceLinesВПохожихДокументах = СтруктураРезультатов.InvoiceLinesВПохожихДокументах.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItems") Тогда
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
		ДополнительныеСвойства.ТаблицаItems.Индексы.Добавить("Item");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаClassification", Неопределено);
	Если СтруктураРезультатов.Свойство("Classification") Тогда
		ДополнительныеСвойства.ТаблицаClassification = СтруктураРезультатов.Classification.Выгрузить();
		ДополнительныеСвойства.ТаблицаClassification.Индексы.Добавить("InvoiceLine");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовInvoiceLinesMatching)
	
	Если ЭтоНовый() Тогда
		
		Номер = СтрЗаменить(ВыборкаРеквизитовInvoiceLinesMatching.Номер, "ILM", "ILC");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ)
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	//ВыборкаПроведенныхРИЗПов = ДополнительныеСвойства.ВыборкаПроведенныхРИЗПов;
	//Пока ВыборкаПроведенныхРИЗПов.Следующий() Цикл
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"You can not change """ + ЭтотОбъект + """, because """ + ВыборкаПроведенныхРИЗПов.Представление + """ is already posted!",
	//		ЭтотОбъект,,, Отказ);
	//КонецЦикла;
	
	ПредставлениеРИЗПа = CustomsСервер.ПолучитьПроведенныйРИЗП(Ссылка);
	
	Если Не ПустаяСтрока(ПредставлениеРИЗПа) Тогда 
		Если ПредставлениеРИЗПа <> "Error" Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change """ + ЭтотОбъект + """, because """ + СокрЛП(ПредставлениеРИЗПа) + """ is already posted!",
			ЭтотОбъект,,, Отказ);
		КонецЕсли;	
	КонецЕсли;
	           	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи, ТаблицаItems)
	
	// Дубли
	ВыборкаПохожихДокументов = ДополнительныеСвойства.ВыборкаПохожихДокументов;
	Пока ВыборкаПохожихДокументов.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is already """ + ВыборкаПохожихДокументов.Представление + """ for """ + InvoiceLinesMatching + """!",
			ЭтотОбъект, "InvoiceLinesMatching", , Отказ);
	КонецЦикла;
	
	// Invoice lines не должны быть классифицированы в других документах
	Если Classification.Количество() > 0 Тогда
		
		ВыборкаInvoiceLinesВПохожихДокументах = ДополнительныеСвойства.ВыборкаInvoiceLinesВПохожихДокументах;
		Пока ВыборкаInvoiceLinesВПохожихДокументах.Следующий() Цикл
			
			СтрокаТЧ = Classification.Найти(ВыборкаInvoiceLinesВПохожихДокументах.InvoiceLine, "InvoiceLine");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Invoice line """ + СокрЛП(ВыборкаInvoiceLinesВПохожихДокументах.InvoiceLine) + """ is already classified by """ + ВыборкаInvoiceLinesВПохожихДокументах.Представление + """!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Все остальные проверки происходят только при проведенном документе
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""" + InvoiceLinesMatching + """ is marked for deletion!",
			ЭтотОбъект, "InvoiceLinesMatching", , Отказ);
	КонецЕсли;
	
	ТаблицаClassification = ДополнительныеСвойства.ТаблицаClassification;
	
	// убрала проверку FA по просьбе Ekaterina Kostromina 27.01.2014
	//FiscalTypeFA = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA");
	//Если НЕ ЗначениеЗаполнено(FiscalTypeFA) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Failed to find fiscal type ""FA""!",
	//		ЭтотОбъект,,, Отказ);
	//КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Classification Цикл
		
		// Заполнение колонки Invoice line
		РеквизитыItem = ТаблицаItems.Найти(СтрокаТЧ.InvoiceLine, "Item");
		
		// Item не должен быть помечен на удаление
		Если РеквизитыItem.ПометкаУдаления Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": Item """ + СокрЛП(СтрокаТЧ.InvoiceLine) + """ is marked for deletion!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);
			
		КонецЕсли;
		
		СтрокаТаблицыClassification = ТаблицаClassification.Найти(СтрокаТЧ.InvoiceLine, "InvoiceLine");
		Если СтрокаТаблицыClassification = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Item " + СокрЛП(СтрокаТЧ.InvoiceLine) + """ does not belong to the current Invoice lines matching!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);
			
		КонецЕсли;
			
		// Проверка совпадения с каталогом
		Если НЕ СтрокаТЧ.DoNotVerifyWithCatalog
			И СтрокаТаблицыClassification <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицыClassification.Type)
			И СтрокаТЧ.Type <> СтрокаТаблицыClassification.Type Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""Type " + СокрЛП(СтрокаТЧ.Type) + """ does not match with ""Type " + СокрЛП(СтрокаТаблицыClassification.Type) + """ from Catalog!",
				ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].Type", , Отказ);
			
		КонецЕсли;
		
		// убрала проверку FA по просьбе Ekaterina Kostromina 27.01.2014
		//// Проверка использования FA
		//Если РеквизитыItem.OnlyMS = Истина
		//	И СтрокаТЧ.Type = FiscalTypeFA 
		//	И РеквизитыItem.ERPTreatment <> Перечисления.ТипыЗаказа.A Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"In line " + СтрокаТЧ.НомерСтроки + ": you can not use FA for AU """ + СокрЛП(РеквизитыItem.AU) + """ and ERP treatment """ + СокрЛП(РеквизитыItem.ERPTreatment) + """!",
		//		ЭтотОбъект, "Classification[" + (СтрокаТЧ.НомерСтроки-1) + "].Type", , Отказ);
		//	
		//КонецЕсли;
		
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаClassification Цикл
		
		Если Classification.Найти(СтрокаТаблицы.InvoiceLine, "InvoiceLine") = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Item " + СокрЛП(СтрокаТаблицы.InvoiceLine) + """ is not listed in table!",
				ЭтотОбъект, "Classification", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПровестиСопутствующиеДокументы(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(InvoiceLinesMatching)
		И НЕ ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching.Проведен Тогда
		РГСофт.ПровестиСсылку(InvoiceLinesMatching, Отказ);
	КонецЕсли;
					
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	     	
	ЗарегистрироватьДляTCS();
	      	
КонецПроцедуры

Процедура ЗарегистрироватьДляTCS()
		
	Если Не Проведен Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// пока исключаем экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Items", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекции(Classification, "InvoiceLine"));
	Запрос.УстановитьПараметр("ParentCompanies", CustomsСервер.ПолучитьМассивParentCompaniesДляВыгрузкиTCS());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтрокиИнвойса.SoldTo КАК ParentCompany
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |ГДЕ
	               |	СтрокиИнвойса.Ссылка В(&Items)
	               |	И СтрокиИнвойса.SoldTo В(&ParentCompanies)
	               |	И СтрокиИнвойса.ExportRequest = ЗНАЧЕНИЕ(Документ.ExportRequest.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  
		РегистрыСведений.TCSInvoiceLinesClassification.ЗарегистрироватьДляВыгрузкиПриНеобходимости(Ссылка, Выборка.ParentCompany);
	КонецЦикла;
	
КонецПроцедуры

