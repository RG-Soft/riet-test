Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;

#Если Клиент Тогда
	
	
// Настройка периода
Перем НП Экспорт;
	
	
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
Функция ПечатьАктаСверки(ИмяМакета)
		
		//Если ПоДаннымОрганизации.Количество() = 0 и ПоДаннымКонтрагента.Количество() = 0 Тогда
		//	Предупреждение("Нет данных для печати.
		//					|Используйте кнопку ""Заполнить.""");
		//	Возврат Ложь;
		//КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;
		Макет  = ПолучитьМакет(ИмяМакета);
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		НазваниеОрганизации = Организация.НаименованиеПолное;
		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = Организация;
		КонецЕсли;
		
		НаименованиеКонтрагента = Контрагент;
		
		//ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
		ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина");
		ИмяПредставителяОрганизации = ПредставительОрганизации;
		ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
		
		ТекстЗаголовка = "взаимных расчетов по состоянию с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy")+" по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
		+ "между Компанией " + ОсновнаяОрганизация + Символы.ПС + "и " + НаименованиеКонтрагента;
		
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДанныеПредставителяОрганизации = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
		ФИОПредставителя = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
		+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
		+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
		
		
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, представители Компании " + ОсновнаяОрганизация + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность) 
		+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + ", с одной стороны, "
		+ "и представители " + НаименованиеКонтрагента + " " + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность) + " " 
		+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента) + ", с другой стороны, "
		+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
		ОбластьЗаголовок.Параметры.ОсновнаяОрганизация = ОсновнаяОрганизация;
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = "в валюте "+ВалютаДокумента.НаименованиеПолное;
		ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = ВалютаДокумента.НаименованиеПолное;
		
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		ИтСуммаОборотДт      = 0;
		ИтСуммаОборотКт      = 0;
		ИтСуммаОборотДтКонтр = 0;
		ИтСуммаОборотКтКонтр = 0;
		
		ИтСуммаОборотДтВал      = 0;
		ИтСуммаОборотКтВал      = 0;
		ИтСуммаОборотДтКонтрВал = 0;
		ИтСуммаОборотКтКонтрВал = 0;
		
		
		НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
		НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
		
		//ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
		//закомментировала Федотова Л., РГ-Софт, 09.04.10
		//так как при печати не должен перезаписываться реквизит документа
		
		КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		Если СверкаСогласована тогда
			
			ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
			
			КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
			КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		конецЕсли;
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
		
		Если СверкаСогласована тогда
			ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДтК = НачОстДебет;
			ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКтК = НачОстКредит;
			
		КонецЕсли;	
		
		Если ИмяМакета = "АктСверки1" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаНачала",    ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),Неопределено, ДатаНачала));
			Запрос.УстановитьПараметр("ДатаОкончания", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончания),неопределено,новый граница(КонецДня(ДатаОкончания), ВидГраницы.Включая)));
			Запрос.УстановитьПараметр("Организация",   Организация);
			
			Контр = Новый СписокЗначений;
			
			Для каждого СтрокаКонтр из Контрагенты Цикл
				СтрокаК = Контр.Добавить();
				СтрокаК.Значение = СтрокаКонтр.Контрагент;
				
			КонецЦикла;	
			Запрос.УстановитьПараметр("Контрагент",    Контр);
			
			АналитикаРасчетов = новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
			
			Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
			
			Договоры = Новый СписокЗначений;
			
			Для каждого СтрокаКонтр из Контрагенты Цикл
				
				Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаКонтр.ДоговорКонтрагента) Тогда
					
					СтрокаДог = Договоры.Добавить();
					СтрокаДог.Значение = СтрокаКонтр.ДоговорКонтрагента;
				КонецЕсли;	
			КонецЦикла;	
			
			//Запрос.УстановитьПараметр("ДоговорКонтрагента", Договоры);
			Запрос.УстановитьПараметр("ДоговораКонтрагентов", Договоры);
			Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);
			
			Запрос.УстановитьПараметр("ДатаНачала", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),Неопределено, новый граница(НачалоДня(ДатаНачала), ВидГраницы.Исключая) ));
			
			УсловиеЗапроса = ?(ЗначениеЗаполнено(ИнвойсинговыйЦентр), "ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр","");
			Если ЗначениеЗаполнено(УсловиеЗапроса) Тогда
				УсловиеЗапроса = УсловиеЗапроса + " И ";
			КонецЕсли;
			//УсловиеЗапроса = УсловиеЗапроса + ?(НЕ Договоры.Количество() = 0, "ДоговорКонтрагента В (&ДоговораКонтрагентов)","");
			УсловиеЗапроса = УсловиеЗапроса + ?(НЕ Договоры.Количество() = 0, "ДоговорКонтрагента В (&ДоговораКонтрагентов)","Истина");
			
			Запрос.Текст = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),"ВЫБРАТЬ
			|	0 КАК ОстатокНаНачало"," 
			|ВЫБРАТЬ
			//|	ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток
			|	ЕСТЬNULL(ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток,0) КАК ОстатокНаНачало
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
			|			&ДатаНачала,
			|			 " + УсловиеЗапроса + ") КАК ВзаиморасчетыСПокупателямиОстатки") + "
			|ИТОГИ
			|	СУММА(ОстатокНаНачало)
			|ПО ОБЩИЕ";
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
			Выборка.Следующий();
			ОстатокНаНачалоВал = Выборка.ОстатокНаНачало;
			
			НачОстДебетВал  = ?(ОстатокНаНачалоВал > 0, ОстатокНаНачалоВал, 0);
			НачОстКредитВал = ?(ОстатокНаНачалоВал < 0, -ОстатокНаНачалоВал, 0);
			
			ОстатокНаКонецВал = ОстатокНаНачалоВал + ПоДаннымОрганизации.Итог("ДебетВал") -  ПоДаннымОрганизации.Итог("КредитВал");
			
			КонОстДебетВал  = ?(ОстатокНаКонецВал > 0, ОстатокНаКонецВал, 0);
			КонОстКредитВал = ?(ОстатокНаКонецВал < 0, -ОстатокНаКонецВал, 0);
			
			Если СверкаСогласована тогда
				
				ОстатокНаКонецКВал = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("ДебетВал") -  ПоДаннымКонтрагента.Итог("КредитВал");
				
				КонОстДебетКВал  = ?(ОстатокНаКонецКВал > 0, ОстатокНаКонецКВал, 0);
				КонОстКредитКВал = ?(ОстатокНаКонецКВал < 0, -ОстатокНаКонецКВал, 0);
			конецЕсли;
			
			ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДтВал = НачОстДебетВал;
			ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКтВал = НачОстКредитВал;
			
			Если СверкаСогласована тогда
				ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДтКВал = НачОстДебетВал;
				ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКтКВал = НачОстКредитВал;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//ОбластьНачОстатки.Параметры.ДатаСальдо = Формат(ДатаНачала,"ДФ=dd.MM.yyyy" );
		ТабДок.Вывести(ОбластьНачОстатки);
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ТабДоговоров = ПоДаннымОрганизации.Выгрузить();
		
		ТабПоДаннымОрганизации = ПоДаннымОрганизации.Выгрузить();
		
		//Добавила условие Федотова Л., РГ-Софт, 19.03.14, вопрос SLI-0004352
		Если НЕ ВыводитьКурсовыеРазницы Тогда
			
			//Добавила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
			//Добавим суммы по курсовым разницам, если они есть, к суммам документов
			ТабПоДаннымОрганизацииБезКурсовыхРазниц = ТабПоДаннымОрганизации.СкопироватьКолонки();
			ТабПоДаннымОрганизацииКурсовыеРазницы = ТабПоДаннымОрганизации.СкопироватьКолонки();
			Для каждого СтрокаТаблицы Из ТабПоДаннымОрганизации Цикл
				Если СтрНайти(СтрокаТаблицы.Представление, "курс") > 0 Тогда
					НоваяСтрока = ТабПоДаннымОрганизацииКурсовыеРазницы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				Иначе
					НоваяСтрока = ТабПоДаннымОрганизацииБезКурсовыхРазниц.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				КонецЕсли; 
			КонецЦикла;   
			
			КоличествоСтрок = ТабПоДаннымОрганизацииКурсовыеРазницы.Количество();
			Для  к = 1 По КоличествоСтрок Цикл
				СтрокаТаблицы = ТабПоДаннымОрганизацииКурсовыеРазницы[КоличествоСтрок - к];
				СтрокаСДаннымиДокумента = ТабПоДаннымОрганизацииБезКурсовыхРазниц.Найти(СтрокаТаблицы.Документ, "Документ");
				Если НЕ СтрокаСДаннымиДокумента = Неопределено Тогда
					СтрокаСДаннымиДокумента.Дебет = СтрокаСДаннымиДокумента.Дебет + СтрокаТаблицы.Дебет;
					СтрокаСДаннымиДокумента.Кредит = СтрокаСДаннымиДокумента.Кредит + СтрокаТаблицы.Кредит;
					ТабПоДаннымОрганизацииКурсовыеРазницы.Удалить(СтрокаТаблицы);
				КонецЕсли; 
			КонецЦикла;  
			
			КоличествоСтрок = ТабПоДаннымОрганизации.Количество();
			
			Для  к = 1 По КоличествоСтрок Цикл
				СтрокаТаблицы = ТабПоДаннымОрганизации[КоличествоСтрок - к];
				СтрокаНайдена = Ложь;
				//Добавила Федотова Л., РГ-Софт, 13.03.14, вопрос SLI-0004324
				Отбор = Новый Структура();
				Отбор.Вставить("Представление",СтрокаТаблицы.Представление);
				Отбор.Вставить("Договор",СтрокаТаблицы.Договор);
				
				//СтрокаВТаблицеБезКурсовыхРазниц = ТабПоДаннымОрганизацииБезКурсовыхРазниц.Найти(СтрокаТаблицы.Представление, "Представление");
				МассивСтрокаВТаблицеБезКурсовыхРазниц = ТабПоДаннымОрганизацииБезКурсовыхРазниц.НайтиСтроки(Отбор);
				//Если НЕ СтрокаВТаблицеБезКурсовыхРазниц = Неопределено Тогда
				Если НЕ МассивСтрокаВТаблицеБезКурсовыхРазниц.Количество() = 0 Тогда
					//ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаВТаблицеБезКурсовыхРазниц);
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы,МассивСтрокаВТаблицеБезКурсовыхРазниц[0]);
					СтрокаНайдена = Истина;
				Иначе
					//СтрокаВТаблицеКурсовыхРазниц = ТабПоДаннымОрганизацииКурсовыеРазницы.Найти(СтрокаТаблицы.Представление, "Представление");
					МассивСтрокаВТаблицеКурсовыхРазниц = ТабПоДаннымОрганизацииКурсовыеРазницы.НайтиСтроки(Отбор);
					//Если НЕ СтрокаВТаблицеКурсовыхРазниц = Неопределено Тогда
					Если НЕ МассивСтрокаВТаблицеКурсовыхРазниц.Количество() = 0 Тогда
						//ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаВТаблицеКурсовыхРазниц);
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы,МассивСтрокаВТаблицеКурсовыхРазниц[0]);
						СтрокаНайдена = Истина;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НЕ СтрокаНайдена Тогда
					ТабПоДаннымОрганизации.Удалить(СтрокаТаблицы);
				КонецЕсли; 
			КонецЦикла; 
			//Конец добавления
		КонецЕсли; 
		
		ТабДоговоров.Свернуть("Договор","Дебет,Кредит,ДебетВал,КредитВал");
		
		//Добавила Федотова Л., РГ-Софт, 10.11.14, вопрос SLI-0004966
		Если УбратьПереоценки Тогда
			ТабПоДаннымОрганизацииКопия = ТабПоДаннымОрганизации.Скопировать();
			ТабПоДаннымОрганизацииКопия.Очистить();
			Для каждого Строка Из ТабПоДаннымОрганизации Цикл
				Если СтрНайти(Строка.Представление, "курс") Тогда
					НоваяСтрока = ТабПоДаннымОрганизацииКопия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					Строка.Представление = "курс";
				КонецЕсли; 
			КонецЦикла; 
			ТабПоДаннымОрганизацииКопия.Свернуть("Договор", "Дебет,Кредит,ДебетВал,КредитВал");
			
			//Уберем из таблицы ТабДоговоров суммы курсовых разниц
			Для каждого Строка Из ТабПоДаннымОрганизацииКопия Цикл
				НоваяСтрока = ТабДоговоров.Добавить();
				НоваяСтрока.Договор = Строка.Договор;
				НоваяСтрока.Дебет = - Строка.Дебет;
				НоваяСтрока.Кредит = - Строка.Кредит;
				НоваяСтрока.ДебетВал = - Строка.ДебетВал;
				НоваяСтрока.КредитВал = - Строка.КредитВал;
			КонецЦикла; 
			ТабДоговоров.Свернуть("Договор","Дебет,Кредит,ДебетВал,КредитВал");
		КонецЕсли; 
		//
		
		СтарыйДоговор = Неопределено;
		//МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
		МаксИндекс = Макс(ТабПоДаннымОрганизации.Количество(), ТабПоДаннымОрганизации.Количество()) - 1;
		Для Инд = 0 По МаксИндекс Цикл
			
			//Добавила Федотова Л., РГ-Софт, 10.11.14, вопрос SLI-0004966
			Если УбратьПереоценки И СтрНайти(ТабПоДаннымОрганизации[Инд].Представление, "курс") Тогда
				Продолжить;
			КонецЕсли;
			//
			
			//Изменила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
			//Если Инд < ПоДаннымОрганизации.Количество() Тогда  //добавила проверку Федотова Л., РГ-Софт, 29.01.10
			Если Инд < ТабПоДаннымОрганизации.Количество() Тогда  
				//Изменила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
				//Если СтарыйДоговор <> ПоДаннымОрганизации[Инд].Договор Тогда
				Если СтарыйДоговор <> ТабПоДаннымОрганизации[Инд].Договор Тогда
					
					//Изменила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
					//СтарыйДоговор = ПоДаннымОрганизации[Инд].Договор;
					СтарыйДоговор = ТабПоДаннымОрганизации[Инд].Договор;
					
					ОбластьДоговор.Параметры.Договор = СтарыйДоговор;
					СтрокаДог = ТабДоговоров.Найти(СтарыйДоговор);
					ОбластьДоговор.Параметры.СуммаОборотДт = СтрокаДог.Дебет;
					ОбластьДоговор.Параметры.СуммаОборотКт = СтрокаДог.Кредит;
					
					Если ИмяМакета = "АктСверки1" Тогда
						ОбластьДоговор.Параметры.СуммаОборотДтВал = СтрокаДог.ДебетВал;
						ОбластьДоговор.Параметры.СуммаОборотКтВал = СтрокаДог.КредитВал;
					КонецЕсли;	
					
					ТабДок.Вывести(ОбластьДоговор);
				КонецЕсли;	
			КонецЕсли; 
			
			//Изменила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
			//Если Инд < ПоДаннымОрганизации.Количество() Тогда
			Если Инд < ТабПоДаннымОрганизации.Количество() Тогда
				//Изменила Федотова Л., РГ-Софт, 11.04.13, вопрос SLI-0003477
				//СтрокаОрганизации = ПоДаннымОрганизации[Инд];
				СтрокаОрганизации = ТабПоДаннымОрганизации[Инд];
				Регистратор = 	СтрокаОрганизации.Представление;
				СуммаОборотДт = СтрокаОрганизации.Дебет;
				СуммаОборотКт = СтрокаОрганизации.Кредит;
				ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
				ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
				ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
				ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
				
				//в валюте
				Если ИмяМакета = "АктСверки1" Тогда
					СуммаОборотДтВал = СтрокаОрганизации.ДебетВал;
					СуммаОборотКтВал = СтрокаОрганизации.КредитВал;
					ОбластьОбороты.Параметры.СуммаОборотДтВал = СуммаОборотДтВал;
					ОбластьОбороты.Параметры.СуммаОборотКтВал = СуммаОборотКтВал;
					ИтСуммаОборотДтВал = ИтСуммаОборотДтВал + СуммаОборотДтВал;
					ИтСуммаОборотКтВал = ИтСуммаОборотКтВал + СуммаОборотКтВал;
				КонецЕсли;
				ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
				ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.Документ;
				ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
				//Добавила Федотова Л., РГ-Софт, 27.11.13, вопрос SLI-0003729
				Если ТипЗнч(СтрокаОрганизации.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
					ИЛИ ТипЗнч(СтрокаОрганизации.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					СФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, "СчетФактураВыданный");
					//Изменила Федотова Л., РГ-Софт, 30.12.13, вопрос SLI-0004078
					//Если ОбщегоНазначения.ЗначениеНеЗаполнено(СФ) Тогда
					//Исправила Федотова Л., РГ-Софт, 07.02.14, вопрос SLI-0004193
					//Если НЕ ЗначениеЗаполнено(СФ) Тогда
					Если ЗначениеЗаполнено(СФ) Тогда
						ОбластьОбороты.Параметры.ДатаДокумента = Формат(СФ.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
					КонецЕсли;	
				КонецЕсли; 
				//Конец добавления
			Иначе
				ОбластьОбороты.Параметры.СуммаОборотДт = "";
				ОбластьОбороты.Параметры.СуммаОборотКт = "";
				ОбластьОбороты.Параметры.РегистраторПредставление = "";
				ОбластьОбороты.Параметры.Регистратор = "";
				ОбластьОбороты.Параметры.ДатаДокумента = "";
			КонецЕсли;
			Если Инд < ПоДаннымКонтрагента.Количество() Тогда
				СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
				Регистратор = 	СтрокаОрганизации.Представление;
				СуммаОборотДт = СтрокаОрганизации.Дебет;
				СуммаОборотКт = СтрокаОрганизации.Кредит;
				ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
				ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
				ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
				ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
				//в валюте
				Если ИмяМакета = "АктСверки1" Тогда
					СуммаОборотДтВал = СтрокаОрганизации.ДебетВал;
					СуммаОборотКтВал = СтрокаОрганизации.КредитВал;
					ОбластьОбороты.Параметры.СуммаОборотДтКонтрВал = СуммаОборотДтВал;
					ОбластьОбороты.Параметры.СуммаОборотКтКонтрВал = СуммаОборотКтВал;
					ИтСуммаОборотДтКонтрВал = ИтСуммаОборотДтКонтрВал + СуммаОборотДтВал;
					ИтСуммаОборотКтКонтрВал = ИтСуммаОборотКтКонтрВал + СуммаОборотКтВал;
				КонецЕсли;
				ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
				ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			Иначе
				ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
				ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
				ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
				ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
			КонецЕсли;
			ТабДок.Вывести(ОбластьОбороты);
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
		Если СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
		КонецЕсли;
		//в валюте
		Если ИмяМакета = "АктСверки1" Тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтВал      = ИтСуммаОборотДтВал;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтВал      = ИтСуммаОборотКтВал;
			Если СверкаСогласована тогда
				ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтрВал = ИтСуммаОборотДтКонтрВал;
				ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтрВал = ИтСуммаОборотКтКонтрВал;
			КонецЕсли;
		КонецЕсли;
		ТабДок.Вывести(ОбластьОборотыИтог);
		
		//Добавила условие Федотова Л., РГ-Софт, 10.11.14, вопрос SLI-0004966
		Если УбратьПереоценки Тогда
			КонОст = НачОстДебет + ИтСуммаОборотДт - ИтСуммаОборотКт;
			Если КонОст >= 0 Тогда
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОст;
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = 0;
			Иначе	
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = 0;
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = -КонОст;
			КонецЕсли; 
		Иначе
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
		КонецЕсли;
		
		Если СверкаСогласована тогда
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
		КонецЕсли;
		
		Если ИмяМакета = "АктСверки1" Тогда
			
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтВал = КонОстДебетВал;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтВал = КонОстКредитВал;
			
			Если СверкаСогласована тогда
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтрВал = КонОстДебетКВал;
				ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтрВал = КонОстКредитКВал;
			КонецЕсли;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		
		Если ПоДаннымОрганизации.Количество() = 0 Тогда
			РезультатыСверки = "<сверка не проведена>";
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончания) Тогда
			РезультатыСверки = "<не указана дата сверки>";
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда
			РезультатыСверки = "<не указан контрагент>";
		Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
				
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
				
			Иначе
				РезультатыСверки = РезультатыСверки + "отсутствует.";
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
			
			Если ПоДаннымКонтрагента.Количество() = 0 Тогда
				РезультатыСверки = "<сверка не проведена>";
			ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончания) Тогда
				РезультатыСверки = "<не указана дата сверки>";
			ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда
				РезультатыСверки = "<не указан контрагент>";
			Иначе
				РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
				Если ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
					
				ИначеЕсли ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
					
				Иначе
					РезультатыСверки = РезультатыСверки + "отсутствует.";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
				ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
			КонецЕсли; 
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ОсновнаяОрганизация = ОсновнаяОрганизация;
		
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
		
		ОбластьПодвал.Параметры.Должность = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность);
		ОбластьПодвал.Параметры.ДолжностьК = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "("+?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации),"_______________________",ДанныеПредставителяОрганизации.Представление)+")";
		ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента),"_______________________",ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ПредставительКонтрагента.Фамилия + " " + ПредставительКонтрагента.Имя + " " + ПредставительКонтрагента.Отчество))+")";
		
		ОбластьПодвал.Параметры.Ответственный = Ответственный.ФизЛицо.Наименование;
		Отбор = Новый Структура("Объект,Тип,Вид",Ответственный.ФизЛицо,Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
		Тел= РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Тел) Тогда
			ОбластьПодвал.Параметры.Телефон = Тел.Представление;
		КонецЕсли;
		ТабДок.Вывести(ОбластьПодвал);
		
		Возврат ТабДок;
		
	КонецФункции
	
Функция ПечатьДополненияАктаСверки()
		
		ТабДок = Новый ТабличныйДокумент;
		Макет  = ПолучитьМакет("Дополнение");
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		
		НазваниеОрганизации = Организация.НаименованиеПолное;
		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = Организация;
		КонецЕсли;
		
		НаименованиеКонтрагента = Контрагент;
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации = НаименованиеКонтрагента;
		//ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
		//ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина");
		//ИмяПредставителяОрганизации = ПредставительОрганизации;
		//ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
		
		ТекстЗаголовка = "расшифровка остатков по состоянию на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
		+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		//ДанныеПредставителяОрганизации = ОбщегоНазначения.ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
		//ФИОПредставителя = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
		//				+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
		//				+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
		//
		//СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, " + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность) + " " + НазваниеОрганизации 
		//			+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + ", с одной стороны, "
		//			+ "и " + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность) + " " + НаименованиеКонтрагента + " " 
		//			+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента) + ", с другой стороны, "
		//			+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
		//
		//ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		//ОбластьЗаголовок.Параметры.ВалютаДокумента = "В валюте взаиморасчетов";
		//ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = ВалютаДокумента;
		
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		Договора = Новый СписокЗначений();
		Для каждого строкаконт из Контрагенты цикл
			
			Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Строкаконт.ДоговорКонтрагента) Тогда
				
				Договора.Добавить(Строкаконт.ДоговорКонтрагента);
				
			Иначе
				
				ВсеДог = Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаКонт.Контрагент);
				Пока ВсеДог.Следующий() цикл
					
					Договора.Добавить(ВсеДог.Ссылка);
					
				КонецЦикла;	 
				
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток) КАК КонечныйОстаток,
		|	СУММА(ВзаиморасчетыСПокупателямиОбороты.СуммаВзаиморасчетовПриход) КАК Сумма,
		|	СУММА(ВзаиморасчетыСПокупателямиОбороты.СуммаВзаиморасчетовРасход) КАК Оплата,
		|	ВзаиморасчетыСПокупателямиОбороты.Сделка КАК Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты(
		|		,
		|		&ДатаКон,
		|		,
		|		ДоговорКонтрагента В (&Список)";
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
			Запрос.Текст = Запрос.Текст +"   И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";  
			Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);
		КонецЕсли;
		Запрос.Текст = Запрос.Текст+ " 	) КАК ВзаиморасчетыСПокупателямиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
		|		&ДатаКон,
		|		ДоговорКонтрагента В (&Список)";
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
			Запрос.Текст = Запрос.Текст +"   И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";  
			Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);
		КонецЕсли;					  
		
		Запрос.Текст = Запрос.Текст+ "  ) КАК ВзаиморасчетыСПокупателямиОстатки
		|		ПО ВзаиморасчетыСПокупателямиОстатки.Сделка = ВзаиморасчетыСПокупателямиОбороты.Сделка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСПокупателямиОбороты.Сделка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток) <> 0
		|ИТОГИ
		|	СУММА(КонечныйОстаток),
		|	СУММА(Оплата)
		|ПО
		|	ОБЩИЕ";
		
		
		Запрос.УстановитьПараметр("Список", Договора);
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
		
		
		ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтог.Следующий();
		
		ИтСуммаОплачено   = ВыборкаИтог.Оплата;
		ИтСуммаОстаток     = ВыборкаИтог.КонечныйОстаток;
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		Выборка = ВыборкаИтог.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Выборка.Сделка) Тогда
				СФ= ОбщегоНазначения.НайтиПодчиненныйДокумент(Выборка.Сделка, "СчетФактураВыданный");
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СФ) Тогда
					СФ = Выборка.Сделка;
				КонецЕсли;	
				ОбластьОбороты.Параметры.Дата = СФ.Дата;
				ОбластьОбороты.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СФ);
				ОбластьОбороты.Параметры.Сумма = Выборка.Сумма;
				ОбластьОбороты.Параметры.Оплачено = Выборка.Оплата;
				ОбластьОбороты.Параметры.Остаток = Выборка.КонечныйОстаток;
				//	ОбластьОбороты.Параметры.Регистратор = Выборка.Регистратор;
				
				ТабДок.Вывести(ОбластьОбороты);
			КонецЕсли;
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ОбластьОборотыИтог.Параметры.ИтогоОплачено      = ИтСуммаОплачено;
		ОбластьОборотыИтог.Параметры.ИтогоОстаток      = ИтСуммаОстаток;
		
		ТабДок.Вывести(ОбластьОборотыИтог);
		
		//ОбластьКонОстатки.Параметры.СуммаКонечныйОстаток = ИтСуммаОстаток-ИтСуммаОплачено;
		//	
		//ТабДок.Вывести(ОбластьКонОстатки);
		
		Возврат ТабДок;
		
	КонецФункции
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "АктСверки" Тогда
			
			ТабДокумент = ПечатьАктаСверки(ИмяМакета);
		ИначеЕсли ИмяМакета = "АктСверки1" Тогда
			
			ТабДокумент = ПечатьАктаСверки(ИмяМакета);
			
		ИначеЕсли ИмяМакета = "Дополнение" Тогда
			
			ТабДокумент = ПечатьДополненияАктаСверки();	
			
		КонецЕсли;
		
		Если ТабДокумент <> Ложь Тогда
			ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ВыводитьКредитНоты) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала",    ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),Неопределено, ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончания),неопределено,новый граница(КонецДня(ДатаОкончания), ВидГраницы.Включая)));
		Запрос.УстановитьПараметр("Организация",   Организация);
		
		Контр = Новый СписокЗначений;
		
		Для каждого СтрокаКонтр из Контрагенты Цикл
			СтрокаК = Контр.Добавить();
			СтрокаК.Значение = СтрокаКонтр.Контрагент;
			
		КонецЦикла;	
		Запрос.УстановитьПараметр("Контрагент",    Контр);
		Запрос.УстановитьПараметр("Валюта",        ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
		//Запрос.УстановитьПараметр("Валюта", Неопределено);
		
		АналитикаРасчетов = новый Массив();
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
		
		Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
		
		Договоры = Новый СписокЗначений;
		Владельцы = новый Массив;
		Для Каждого СтрокаКонтр Из Контрагенты Цикл
			Если ЗначениеЗаполнено(СтрокаКонтр.ДоговорКонтрагента) Тогда
				Договоры.Добавить(СтрокаКонтр.ДоговорКонтрагента);
			Иначе
				Владельцы.Добавить(СтрокаКонтр.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		Если не Владельцы.Количество() = 0 Тогда
			
			ЗапросД = Новый Запрос;
			ЗапросД.Текст = "ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец В (&Владелецы)
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
			
			ЗапросД.УстановитьПараметр("Владелецы", Владельцы);
			
			ВыборкаД = ЗапросД.Выполнить().Выбрать();
			
			Пока ВыборкаД.Следующий() Цикл
				Договоры.Добавить(ВыборкаД.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДоговораКонтрагентов", Договоры);
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);
		
		СписокКредит = Новый СписокЗначений();
		Если НЕ ВыводитьКредитНоты Тогда
			СписокКредит.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
			СписокКредит.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота);
		КонецЕсли; 
		Запрос.УстановитьПараметр("ВидОперации", СписокКредит);
		
		//Поиск кредит нот
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Документ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаКон
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
		|	И РеализацияТоваровУслуг.Контрагент В(&Контрагент)
		|	И РеализацияТоваровУслуг.Организация = &Организация
		|	И РеализацияТоваровУслуг.ВидОперации В(&ВидОперации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Сделка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаКон
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
		|	И РеализацияТоваровУслуг.Контрагент В(&Контрагент)
		|	И РеализацияТоваровУслуг.Организация = &Организация
		|	И РеализацияТоваровУслуг.ВидОперации В(&ВидОперации)";
		
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания) );			   
		
		ТаблицаКредитНот=Запрос.Выполнить().Выгрузить();
		СписокКредитНот = ТаблицаКредитНот.ВыгрузитьКолонку("Документ");
		
		Запрос.УстановитьПараметр("КредитНоты", СписокКредитНот);
		
		Запрос.УстановитьПараметр("ДатаНачала",    ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),Неопределено, ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончания),неопределено,КонецДня(ДатаОкончания)));
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА (НЕ ХозрасчетныйОбороты.Регистратор ЕСТЬ NULL )
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОбороты.Регистратор.ВидОперации В (&ВидОперации)
		|						ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Сделка.Дата
		|					ИНАЧЕ ХозрасчетныйОбороты.Регистратор.Дата
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Регистратор.ВидОперации В (&ВидОперации)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Сделка
		|		КОГДА ХозрасчетныйОбороты.Регистратор ССылка Документ.ПереоценкаВалютыВРегистре 
		|			ТОГДА ХозрасчетныйОбороты.Сделка
		|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор
		|	КОНЕЦ КАК Документ,
		|	ХозрасчетныйОбороты.ДоговорКонтрагента КАК Договор,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
		|	ХозрасчетныйОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Регистратор ССылка Документ.ПереоценкаВалютыВРегистре 
		|			ТОГДА ""Переоценка""
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
		|	СУММА(ВЫБОР
		|			КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|				ТОГДА ВЫБОР
		|						КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА ХозрасчетныйОбороты.СуммаРегл
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА ХозрасчетныйОбороты.СуммаУпр
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ) КАК Дебет,
		|	СУММА(ВЫБОР
		|			КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|				ТОГДА ВЫБОР
		|						КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА ХозрасчетныйОбороты.СуммаРегл
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						ТОГДА ХозрасчетныйОбороты.СуммаУпр
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ) КАК Кредит,
		|	СУММА(ХозрасчетныйОбороты.СуммаУпр) КАК ВалютнаяСуммаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ХозрасчетныйОбороты.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВалютнаяСуммаОборотДт,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ХозрасчетныйОбороты.СуммаУпр
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВалютнаяСуммаОборотКт
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания" +
		?(ЗначениеЗаполнено(ИнвойсинговыйЦентр), "  И ХозрасчетныйОбороты.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр","") +
		?(НЕ Договоры.Количество() = 0, "	И ХозрасчетныйОбороты.ДоговорКонтрагента В(&ДоговораКонтрагентов)","") + "
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА (НЕ ХозрасчетныйОбороты.Регистратор ЕСТЬ NULL )
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОбороты.Регистратор.ВидОперации В (&ВидОперации)
		|						ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Сделка.Дата
		|					ИНАЧЕ ХозрасчетныйОбороты.Регистратор.Дата
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Регистратор.ВидОперации В (&ВидОперации)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Сделка
		|		КОГДА ХозрасчетныйОбороты.Регистратор ССылка Документ.ПереоценкаВалютыВРегистре 
		|			ТОГДА ХозрасчетныйОбороты.Сделка
		|		ИНАЧЕ ХозрасчетныйОбороты.Регистратор
		|	КОНЕЦ,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
		|	ХозрасчетныйОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПереоценкаВалютыВРегистре
		|			ТОГДА ""Переоценка""
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборДвижений = ПоДаннымОрганизации.Выгрузить();
		НаборДвижений.Очистить();
		НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
		НаборДвижений.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НаборДвижений.Добавить();
			НоваяСтрока.Документ           = Выборка.Документ;
			НоваяСтрока.Дата               = Выборка.Дата;
			НоваяСтрока.Дебет              = Выборка.Дебет;
			НоваяСтрока.Кредит             = Выборка.Кредит;
			НоваяСтрока.ДебетВал           = Выборка.ВалютнаяСуммаОборотДт;
			НоваяСтрока.КредитВал          = Выборка.ВалютнаяСуммаОборотКт;
			НоваяСтрока.Валюта             = Выборка.Валюта;
			НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
			НоваяСтрока.Договор            = Выборка.Договор;
			
			//МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ);
			
			// Сформируем строку представления
			Представление = "";
			Если Выборка.ВидПрочихДоходовИРасходов = "Переоценка" Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = "Полож. курс. разн. (С/Ф ";
				Иначе
					Представление = "Отриц. курс. разн. (С/Ф ";
				КонецЕсли;			
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
				Аванс = Истина;
				Для Каждого Строка Из НоваяСтрока.Документ.РасшифровкаПлатежа Цикл
					Если Строка.Сделка <> НоваяСтрока.Документ Тогда
						Аванс = Ложь;										
					КонецЕсли;
				КонецЦикла;
				
				Если Аванс Тогда
					Представление = "Аванс (";
				Иначе
					Представление = "Оплата ("; 
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				Если НоваяСтрока.Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
					Представление = "Возврат средств (";
				КонецЕсли;
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
				Представление = "Корректировка (";			
				
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если НоваяСтрока.Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно
					ИЛИ НоваяСтрока.Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
					Представление = "Кредит-Нота (";
				Иначе
					Представление = "Продажа  (С/Ф ";
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда
				Представление = "Продажа (Передача ОС "
			ИначеЕсли ТипЗнч(НоваяСтрока.Документ) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
				Представление = "Продажа (Отчет агента по расходам "
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) Тогда
				//Добавила первую часть "если" Федотова Л., РГ-Софт, 31.08.15, вопрос SLI-0005720
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
					Представление = Представление + Строка(НоваяСтрока.Документ.Номер) + " от " + Формат(Выборка.Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ")";
				ИНАЧЕ
					Представление = Представление + Строка(НоваяСтрока.Документ.Номер) + " от " + Формат(Выборка.Документ.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			КонецЕсли;
			
			
			//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			//	
			//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
			//		
			//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			//		Представление = "Курсовые разницы";
			//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
			//		Представление = "Санкции";
			//	ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
			//		Представление = "Суммовые разницы";
			//	Иначе
			//		Представление = Строка(Выборка.КорСубконто1);
			//	КонецЕсли;
			//	
			//КонецЕсли;
			//
			//Если Выборка.КорСчет=ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД или Выборка.КорСчет=ПланыСчетов.Хозрасчетный.Вспомогательный Тогда
			//	
			//	Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда				
			//		Представление = "Суммовые разницы";
			//	КонецЕсли;
			//	
			//КонецЕсли;
			//
			//
			//Если не ПустаяСтрока(Представление) Тогда
			//	// Строка уже отработана
			//	
			//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
			//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
			//	Если (Выборка.Дебет >0) Тогда
			//		Представление = "Займ";
			//	ИначеЕсли (Выборка.Кредит >0)Тогда
			//		Представление = "Возврат займа";
			//	Иначе
			//		Представление = "Операции по займам";
			//	КонецЕсли;
			//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
			//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
			//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
			//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
			//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
			//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
			//	тогда
			//	Представление = "Претензия";
			//	
			//ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
			//	или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
			//	или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
			//	тогда
			//	
			//	Если (Выборка.Кредит >0) Тогда
			//		
			//		Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
			//			Представление = "Возврат средств";
			//			
			//		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			//			Представление = "Оплата";
			//			
			//		Иначе
			//			Представление = "Перевод средств";
			//		КонецЕсли;
			//		
			//	ИначеЕсли (Выборка.Дебет >0) Тогда
			//		Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
			//			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
			//			Тогда
			//			
			//			Представление = "Оплата";
			//			
			//		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			//			Представление = "Возврат средств";
			//			
			//		Иначе
			//			Представление = "Перевод средств";
			//		КонецЕсли;
			//	КонецЕсли;
			//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
			//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			//	тогда
			//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
			//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
			//		Если Выборка.Дебет <> 0 Тогда
			//			Представление = "Оплата";
			//		Иначе
			//			Представление = "Приход";
			//		КонецЕсли;
			//	ИначеЕсли (Выборка.Кредит <>0) Тогда
			//		Представление = "Приход";
			//	КонецЕсли;
			//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
			//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
			//		Если Выборка.Дебет <> 0 Тогда
			//			Представление = "Продажа";
			//		Иначе
			//			Представление = "Оплата";
			//		КонецЕсли;
			//	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
			//		Если Выборка.Кредит >0  Тогда
			//			Представление = "Продажа";
			//		Иначе
			//			Представление = "Кредит-Нота";
			//		Конецесли;	
			//	ИначеЕсли (Выборка.Кредит <>0) Тогда
			//		Представление = "Оплата";
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если ПустаяСтрока(Представление)Тогда
			//	Если Выборка.Дебет > 0 тогда
			//		Представление = "Принято";
			//	ИначеЕсли Выборка.Дебет < 0 тогда
			//		Представление = "Сторно: принято";
			//	ИначеЕсли Выборка.Кредит > 0 тогда
			//		Представление = "Передано";
			//	Иначе
			//		Представление = "Сторно: передано";
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			//	Если Представление = "Продажа" И ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
			//		Представление = Представление + " (С\Ф " + ОбщегоНазначения.ПолучитьНомерНаПечать(ОбщегоНазначения.НайтиПодчиненныйДокумент(Выборка.Документ, "СчетФактураВыданный")) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			//	Иначе
			//		Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			//	КонецЕсли;
			//Иначе
			//	Представление = Представление +" ("+ ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
			//	?(ОбщегоНазначения.ЗначениеНеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			//КонецЕсли;					  
			// Определение вида движения по корр. счету и корр аналитике.
			//
			//НоваяСтрока.Представление      = МетаданныеДокумента.Синоним + " № " + НомерДокумента
			//					  + " от " + Формат(ДатаДокумента, "ДФ='дд ММ гггг'");
			
			НоваяСтрока.Представление = Представление;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДатаНачала", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачала),Неопределено, новый граница(НачалоДня(ДатаНачала), ВидГраницы.Исключая) ));
		
		УсловиеЗапроса = ?(ЗначениеЗаполнено(ИнвойсинговыйЦентр), "ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр","");
		Если ЗначениеЗаполнено(УсловиеЗапроса) Тогда
			УсловиеЗапроса = УсловиеЗапроса + " И ";
		КонецЕсли;
		УсловиеЗапроса = УсловиеЗапроса + ?(НЕ Договоры.Количество() = 0, "ДоговорКонтрагента В (&ДоговораКонтрагентов)","");
		
		Запрос.Текст = 		?(НЕ ЗначениеЗаполнено(ДатаНачала),"ВЫБРАТЬ
		|	0 КАК ОстатокНаНачало, 
		|	0 КАК ОстатокНаКонец", 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток
		|		ИНАЧЕ ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток
		|	КОНЕЦ КАК ОстатокНаНачало,
		|	0 КАК ОстатокНаКонец
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
		|			&ДатаНачала,
		|			 " + УсловиеЗапроса + ") КАК ВзаиморасчетыСПокупателямиОстатки") + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|0,
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток
		|		ИНАЧЕ ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
		|			&ДатаОкончания,
		|			 " + УсловиеЗапроса + ") КАК ВзаиморасчетыСПокупателямиОстатки
		|ИТОГИ
		|	СУММА(ОстатокНаНачало),
		|	СУММА(ОстатокНаКонец)
		|ПО ОБЩИЕ";
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Выборка.Следующий();
		ОстатокНаНачало = ОстатокНаНачало+Выборка.ОстатокНаНачало;
		ОстатокНаКонец  = ОстатокНаКонец+Выборка.ОстатокНаКонец;
		
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			НаборДвижений.Свернуть("Договор,Дата,Документ,Представление,Валюта","Дебет, Кредит,ДебетВал, КредитВал, ВалютнаяСумма");
			Для каждого СтрокаДвижений Из НаборДвижений Цикл
				Если СтрокаДвижений.ВалютнаяСумма <>0 тогда
					
					СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+строка(СтрокаДвижений.Валюта) +")";
					//   	ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 тогда
					//   		Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
					//   		
					//   		СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
					
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
			НаборДвижений.Свернуть("Договор,Дата,Документ,Представление","Дебет, Кредит, ДебетВал, КредитВал");	
		КонецЕсли; 
		
		НаборДвижений.Сортировать("Договор,Дата,Документ,Представление");	
		
		ПоДаннымОрганизации.Загрузить(НаборДвижений);
		
	КонецПроцедуры
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки, Дополнение, АктСверки1", "Акт сверки","Дополнение","Акт сверки в 2 валютах");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	Если МетаданныеПоДокументам[ТипЗнч(ДокументСсылка)] = Неопределено Тогда
		МетаданныеПоДокументам.Вставить(ТипЗнч(ДокументСсылка),ДокументСсылка.Метаданные());
	КонецЕсли; 
	
	Возврат МетаданныеПоДокументам[ТипЗнч(ДокументСсылка)];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	ТабЗнач.Колонки.ДебетВал.Имя  = "КредитВалК";
	ТабЗнач.Колонки.КредитВал.Имя = "ДебетВал";
	ТабЗнач.Колонки.КредитВалК.Имя= "КредитВал";
	
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Контрагент = "";
	
	Для Каждого Контр из Контрагенты Цикл
		
		Контрагент = Контрагент+ Контр.Контрагент.НаименованиеПолное+" ";
		
	КонецЦикла;	
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
МетаданныеПоДокументам = Новый Соответствие();
