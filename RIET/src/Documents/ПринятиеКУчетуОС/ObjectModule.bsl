// Строки, хранят реквизиты имеющие смысл только для бух. учета и нал. соответственно
// в случае если документ НЕ отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем ПоставщикНаименование  Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления
//Перем мСписатьВсё Экспорт;

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента) Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента);
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента)
	
	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
	|ОС.ИнвентарныйНомер,
	|МОЛБУ,
	|ПодразделениеОрганизации,
	|СпособПоступления,
	|ПорядокПогашенияСтоимостиБУ,
	|СпособНачисленияАмортизацииБУ,
	|СрокПолезногоИспользованияБУ,
	|НачислятьАмортизациюБУ
	|";
	
	
	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
	|СпособНачисленияАмортизацииНУ,
	|ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|СрокПолезногоИспользованияНУ,
	|СпециальныйКоэффициентНУ,
	|НачислятьАмортизациюНУ
	|";
	
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

#Если Клиент Тогда
	
//Процедура заполняет параметры организации-получателя формы ОС1 
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	
	//Изменил - РГ-Софт - Иванов Антон - 2008.08.15
	//Чтобы печатался адрес и реквизиты получателя
	//ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,ДолжРукПолуч,РукПолучателя,ГлавБухПолучателя");	
	ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,ГлавБухПолучателя");
	
	ПараметрыОрганизации.ОрганизацияПолучатель = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СведенияОбОрганизации.ПолноеНаименование),СведенияОбОрганизации.Представление,СведенияОбОрганизации.ПолноеНаименование);
	ПараметрыОрганизации.АдресПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ПараметрыОрганизации.РеквПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
	
	ПараметрыОрганизации.РукПолучателя = ОтветственныеЛицаОрганизации.РуководительПредставление;
	ПараметрыОрганизации.ДолжРукПолуч = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ПараметрыОрганизации.ГлавБухПолучателя = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС1()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер КАК НомерАкта,
	|	ПринятиеКУчетуОС.Дата КАК ДатаДок,
	|	ПринятиеКУчетуОС.Дата КАК ДатаВвода,
	|	1 КАК КоэффициентУскоренияБУ,
	|	ПринятиеКУчетуОС.МОЛБУ,
	|	ВЫБОР
	|		КОГДА ПринятиеКУчетуОС.СрокПолезногоИспользованияБУ > 0
	|			ТОГДА ПринятиеКУчетуОС.СтоимостьБУ / ПринятиеКУчетуОС.СрокПолезногоИспользованияБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаАморт,
	|	ПринятиеКУчетуОС.Ответственный,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации,
	|	ПринятиеКУчетуОС.Склад,
	|	ПринятиеКУчетуОС.СпособПоступления,
	|	ПринятиеКУчетуОС.СрокПолезногоИспользованияБУ КАК СрокПолезнИспПриПост,
	|	ПринятиеКУчетуОС.СтоимостьБУ,
	|	ПринятиеКУчетуОС.СпособНачисленияАмортизацииБУ КАК СпособАмортизации,
	|	ПринятиеКУчетуОС.Организация КАК Организация,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации.Представление КАК ПодрПолучателя
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка";
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	
	//Заполнение реквизитов организации получателя
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сведения.ИнвентарныйНомер КАК ИнвНомер,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
	|	ЕСТЬNULL(Сведения.ПервоначальнаяСтоимостьБУ, 0) КАК НачСтоимость,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки КАК НомерСтроки,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения КАК Сведения
	|		ПО ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство = Сведения.ОсновноеСредство
	|			И ПринятиеКУчетуОСОсновныеСредства.Ссылка = Сведения.Регистратор
	|ГДЕ
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоОС.Количество() <= 1 Тогда
		
		ВыборкаПоОС.Следующий();
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
			
			ТабДокумент   = Новый ТабличныйДокумент();
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
			
			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		Иначе 
			
			ТабДокумент    = Новый ТабличныйДокумент();
			МакетОС1а      = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	Иначе // Объектов много - групповая печать.
		
		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();
		
		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");
		
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
		ОС1б_Страница1.Вывести(Шапка1ОС1б);
		
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);
		
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Шапка3ОС1б);
		
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);
		
		НомПП            = 0;
		ИтогНачСтоимость = 0;
		
		Пока ВыборкаПоОС.Следующий() Цикл
			
			ИтогНачСтоимость = ИтогНачСтоимость + ВыборкаПоОС.НачСтоимость;
			
			НомПП = НомПП + 1;
			Строка2ОС1б.Параметры.Нс = НомПП;
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			ОС1б_Страница2.Вывести(Строка2ОС1б);
			
			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ОС1б);
			
		КонецЦикла;
		
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);
		
		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);
		
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);
		
		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.ИтогНачСтоимость = ИтогНачСтоимость;
		ОС1б_Страница3.Вывести(Подвал3);
		
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПечатьОС15()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер КАК Номер,
	|	ПринятиеКУчетуОС.Дата КАК ДатаСоставления,
	//	|	ПринятиеКУчетуОС.НомерНакладной КАК НомерСопроводительногоДокумента,
	|	ПринятиеКУчетуОС.Организация,
	|	ПринятиеКУчетуОС.Организация КАК ЮрФизЛицо,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации.Наименование КАК МестоПриемки,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК СкладНаименование
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	//ЗапросПоТоварам.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	//ЗапросПоТоварам.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ПорядковыйНомерПоКартотеке,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК Номенклатура,
	|		СУММА(1) КАК КоличествоПринято,
	|		СУММА(ПринятиеКУчетуОСОсновныеСредства.Ссылка.СтоимостьНУ) КАК Стоимость,
	|		МИНИМУМ(ПринятиеКУчетуОСОсновныеСредства.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|	ГДЕ
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ЗапросТовары = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";
	
	Макет = ПолучитьОбщийМакет("М4");
	
	ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Выводим заголовок докмента
	ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
	ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	//ПредставлениеКонтрагента = ;
	ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование =ПоставщикНаименование;
	ОбластьМакетаЗаголовокДокумента.Параметры.НомерСопроводительногоДокумента = ОсновныеСредства[0].ОсновноеСредство.НомерНакладной;
	ОбластьМакетаЗаголовокДокумента.Параметры.НомерПлатежногоДокумента = ОсновныеСредства[0].ОсновноеСредство.НомерИДатаПлатежногоПоручения;
	
	
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
	
	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС       = 0;
	ИтогоСуммаНДС          = 0;
	ИтогоВсегоСНДС         = 0;
	Ном                    = 0;
	
	// Инициализация счетчиков страниц и строк
	НомерСтраницы   = 1;
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим многострочную часть докмента
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		//Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = ВыборкаСтрок.Стоимость/ЗапросТовары.Количество() ;
		КоличествоПринято = 1;
		//КоличествоПринято = ВыборкаСтрок.КоличествоПринято;
		//СуммаНДС          = ВыборкаСтрок.СуммаНДС;
		//Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;
		
		ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
		//	ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = ВсегоСНДС;
		//ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
		//	ОбластьМакетаСтрока.Параметры.Цена              = Цена;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		Иначе                                              // иначе - только подвал строк
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
		КонецЕсли;
		
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			ТабДокумент.Вывести(ОбластьМакетаПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
		//ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		//ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по документу
	ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
	//ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
	//ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим итоги по документу
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ4()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "ОС1" Тогда
		
		ТабДокумент = ПечатьОС1();
	ИначеЕсли ИмяМакета = "М4" Тогда
		
		ТабДокумент = ПечатьМ4();
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС1,М4","Форма ОС-1","М-4");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение НЕ заполнен или
// заполнен НЕ корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтоимостьБУ";
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтоимостьНУ";
		КонецЕсли;
	КонецЕсли;
	
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПорядокПогашенияСтоимостиБУ";
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособНачисленияАмортизацииБУ";
		
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			Если СтоимостьБУ <> 0 Тогда
				ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияБУ";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПорядокВключенияСтоимостиВСоставРасходовНУ";
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособНачисленияАмортизацииНУ, СрокПолезногоИспользованияНУ";
		КонецЕсли;
	КонецЕсли;
	
	//вопрос PA_-0000427
	//ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Добавил РГ-Софт - Иванов Антон - 2009-03-27
	//Несколько проверок на заполнение полей Декларация и Номер PO.
	//Вообще, необходимо сделать вид операции
	
	//Проверим, что заполнен или реквизит Декларация или Номер PO
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Декларация)
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.РО) 
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ПроводкаDSSДеталейСКП) Тогда
		
		ТекстОшибки = "Должен быть заполнен один из трех реквизитов: или ""Декларация"", или ""Номер PO"" или ""Проводка DSS деталей СКП""!";
		Если СтруктураШапкиДокумента.Дата < '20090501' Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Декларация)
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.РО) Тогда
		
		ТекстОшибки = "Должен быть заполнен только один из двух реквизитов: или ""Декларация"", или ""Номер PO""!";
		Если СтруктураШапкиДокумента.Дата < '20090501' Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	//<- Конец добавления	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Изменил алгоритм проверки РГ-Софт - Иванов Антон - 2009-06-02
Процедура ПроверитьОтносительноГТД(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	//Должна быть указана декларация
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Декларация) Тогда
		Возврат;
	КонецЕсли;
	
	//По декларации должен быть указан номер строки. Если это не так - дальнейшие проверки бессмысленны. Выходим.
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.НомерСтрокиГТД) Тогда
		
		ТекстОшибки = "Необходимо заполнить поле ""Номер строки ГТД""!";
		Если СтруктураШапкиДокумента.Дата < '20090501' Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтруктураШапкиДокумента.НомерСтрокиГТД > СтруктураШапкиДокумента.Декларация.Состав.Количество() Тогда
		
		ТекстОшибки = "Неверно заполнено поле ""Номер строки ГТД"": в декларации """ + СтруктураШапкиДокумента.Декларация + """ только " + СтруктураШапкиДокумента.Декларация.Состав.Количество() + " строк(и)!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат;
		
	КонецЕсли;	
	
	СтрокаДекларации = СтруктураШапкиДокумента.Декларация.Состав[НомерСтрокиГТД-1];
	
	//Проверим, что Номенклатура в Принятии к учету соответствует номенклатуре в Декларации
	Если СтруктураШапкиДокумента.Номенклатура <> СтрокаДекларации.Описание Тогда
		
		ТекстОшибки = "Номенклатура в документе Принятие к учету (" + СтруктураШапкиДокумента.Номенклатура + ") не совпадает с номенклатурой, указанной в декларации (" + СтрокаДекларации.Описание + ")!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат;
		
	КонецЕсли;
	
	//Проверим количество принимаемого оборудования
	
	//Найдем количество оборудования, оприходованного декларацией
	КоличествоПоДекларации = СтрокаДекларации.Количество;
	
	//Найдем количество основных средств, принятых другими принятиями к учету по этой строке декларации
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Декларация", СтруктураШапкиДокумента.Декларация);
	Запрос.УстановитьПараметр("НомерСтрокиГТД", СтруктураШапкиДокумента.НомерСтрокиГТД);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка,
	|	ПринятиеКУчетуОС.Количество
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.Проведен = ИСТИНА
	|	И ПринятиеКУчетуОС.Декларация = &Декларация
	|	И ПринятиеКУчетуОС.НомерСтрокиГТД = &НомерСтрокиГТД
	|	И ПринятиеКУчетуОС.Ссылка <> &Ссылка";
	Результат = Запрос.Выполнить();
	
	//Проверим количество принимаемого оборудования
	Если Не Результат.Пустой() Тогда
		
		ТаблицаПринятийКУчету = Результат.Выгрузить();
		КоличествоПринятогоОборудования = ТаблицаПринятийКУчету.Итог("Количество");
		Если (КоличествоПоДекларации - КоличествоПринятогоОборудования) < СтруктураШапкиДокумента.Количество Тогда
			
			ТекстОшибки = "Количество принимаемых основных средств (" + СтруктураШапкиДокумента.Количество + ") превышает остаток по декларации (" + (КоличествоПоДекларации - КоличествоПринятогоОборудования) + "): 
			|	в декларации указано " + КоличествоПоДекларации + " ед.;
			|	было принято " + КоличествоПринятогоОборудования + " ед. документами:";
			Для Каждого Строка Из ТаблицаПринятийКУчету Цикл
				ТекстОшибки = ТекстОшибки + Символы.ПС + "		" + Строка.Ссылка + " (" + Строка.Количество + " ед.);";	
			КонецЦикла;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Добавил РГ-Софт - Иванов Антон - 2009-04-21
Процедура ПроверитьОтносительноЗаказа(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.РО) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибкиОтносительноЗаказа = Ложь;
	
	//Проверим корректность номера PO, он должен иметь длину 10 или 4 символа
	ДлинаPO = СтрДлина(СтруктураШапкиДокумента.РО);
	Если ДлинаPO <> 10 И ДлинаPO <> 4 Тогда
		
		ТекстОшибки = "Номер PO должен иметь длину 10 символов!";
		Если СтруктураШапкиДокумента.Дата < '20090501' Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
		ЕстьОшибкиОтносительноЗаказа = Истина;
		
	КонецЕсли;
	
	//Проверим, что заполнен номер строки PO
	//Если НЕ ЗначениеЗаполнено(ПроводкаDSSДеталейСКП) Тогда
	//
	//	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.НомерСтрокиПО) Тогда
	//		
	//		ТекстОшибки = "Необходимо заполнить поле ""Номер строки PO""!";
	//		Если СтруктураШапкиДокумента.Дата < '20090501' Тогда
	//			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	//		Иначе
	//			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	//		КонецЕсли;
	//		
	//		ЕстьОшибкиОтносительноЗаказа = Истина;
	//		
	//	КонецЕсли;
	//
	//КонецЕсли; 
	//
	//
	////Если были ошибки на предыдущих этапах - дальнейшие проверки бессмысленны
	//Если ЕстьОшибкиОтносительноЗаказа Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//
	////Проверим остаток по заказу
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//Запрос.УстановитьПараметр("НомерПО", СтруктураШапкиДокумента.РО);
	//Запрос.УстановитьПараметр("НомерСтрокиДок", СтруктураШапкиДокумента.НомерСтрокиПО);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(СУММА(ОборотыПоЗаказамНесвернутые.КоличествоОборот),0) КАК КоличествоОборот
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ЕСТЬNULL(ЗаказыШвепсаОбороты.КоличествоОборот,0) КАК КоличествоОборот
	//|	ИЗ
	//|		РегистрНакопления.ЗаказыШвепса.Обороты(
	//|				,
	//|				,
	//|				,
	//|				НомерПО = &НомерПО
	//|					И НомерСтрокиДок = &НомерСтрокиДок) КАК ЗаказыШвепсаОбороты
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ЕСТЬNULL(-ЗакрытияЗаказовШвепсаОбороты.КоличествоОборот,0)
	//|	ИЗ
	//|		РегистрНакопления.ЗакрытияЗаказовШвепса.Обороты(
	//|				,
	//|				&МоментВремени,
	//|				,
	//|				НомерПО = &НомерПО
	//|					И НомерСтрокиДок = &НомерСтрокиДок) КАК ЗакрытияЗаказовШвепсаОбороты) КАК ОборотыПоЗаказамНесвернутые";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Выборка.Следующий();
	//Если СтруктураШапкиДокумента.Количество > Выборка.КоличествоОборот Тогда
	//	
	//	ТекстСообщения = "Количество принимаемых основных средств (" + СтруктураШапкиДокумента.Количество + ") превышает остаток по заказу (" + Выборка.КоличествоОборот + "). Остаток по заказу станет отрицательным! Возможно вы неправильно указали номер заказа или номер строки заказа. Возможно заказ еще не был подгружен.";
	//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок);
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт
	
	РеквизитыТабОС = "ОсновноеСредство, ИнвентарныйНомер"; //через запятую
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	//Добавил РГ-Софт - Иванов Антон - 2009-06-02
	//Проверка на то, что в реквизите Количество указано количество строк табличной части документа
	Если ТаблицаОС.Количество() <> СтруктураШапкиДокумента.Количество Тогда
		
		ТекстОшибки = "Количество строк табличной части (" + ТаблицаОС.Количество() + ") не соответствует количеству принимаемых основных средств (" + СтруктураШапкиДокумента.Количество + ")!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	//Удалил Трефиленков Дмитрий, РГ-Софт
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		СписаниеОборудования(Отказ);
	КонецЕсли;
	
	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	//Добавил РГ-Софт - Иванов Антон - 2009-03-27
	//Закрытие заказа из Швепса
	//Закрываем в том случае, если указан номер PO
	//Если он не указан - значит должна быть указана Декларация, которая уже все списала
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.РО) Тогда
		
		Движение = Движения.ЗакрытияЗаказовШвепса.Добавить();
		Движение.Период = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.НомерПО = СокрЛП(СтруктураШапкиДокумента.РО);
		Движение.НомерСтрокиДок = СтруктураШапкиДокумента.НомерСтрокиПО;
		Движение.Количество = СтруктураШапкиДокумента.Количество;
		
	КонецЕсли;
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = ДатаПроведения;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТЗДанныеОС.Колонки.Добавить("СуммаНУ",                    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаКапитальныхВложений", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		ОсталосьСписать = СтоимостьБУ;
		ОсталосьСписатьНУ = СтоимостьНУ;
		КоличествоСтрок = ОсновныеСредства.Количество();
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НомерСтроки = НомерСтроки + 1;
			
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			Если НомерСтроки = КоличествоСтрок Тогда
				НоваяСтрока.Сумма       = ОсталосьСписать;
				НоваяСтрока.СуммаНУ     = ОсталосьСписатьНУ;
			Иначе
				НоваяСтрока.Сумма       = СтоимостьБУ/ОсновныеСредства.Количество();
				НоваяСтрока.СуммаНУ       = СтоимостьНУ/ОсновныеСредства.Количество();
			КонецЕсли; 
			ОсталосьСписать = ОсталосьСписать - НоваяСтрока.Сумма;
			ОсталосьСписатьНУ = ОсталосьСписатьНУ - НоваяСтрока.СуммаНУ;
			НоваяСтрока.СуммаКапитальныхВложений = Окр(НоваяСтрока.СуммаНУ * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
		КонецЦикла;
		
	КонецЕсли;
	
	МестонахождениеОС        = Движения.МестонахождениеОСБухгалтерскийУчет;
	
	НаправлениеАмортизацииБУ = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	НаправлениеАмортизацииНУ = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	
	СостояниеОС              = Движения.СостоянияОСОрганизаций;
	ОперацииОС               = Движения.СобытияОСОрганизаций;
	СтоимостьАмортизацияОС   = Движения.СтоимостьАмортизацияОС;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21 - Начало
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(ДатаДока, Организация, масОС);
	
	// ++ КДС РГ-СОФТ 31.03.2016 Вопрос № RCA-0000138
	
	BaseAmount 	= 0;
	РИЗП 		= Неопределено;
	ИнвойсЛайн 	= Неопределено;
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии Тогда
		
		BaseAmount = 0;
		
		Если ЗначениеЗаполнено(ПроводкаDSSДеталейСКП) Тогда
			//Найдем остатки сумм по Проводке деталей СКП, чтобы их и списать
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ОборудованиеDSS.СуммаРуб * ВЫБОР
			|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) КАК СуммаРуб,
			|	СУММА(ОборудованиеDSS.Сумма * ВЫБОР
			|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ОборудованиеDSS.Количество) КАК Количество,
			|	ОборудованиеDSS.ПроводкаДеталейСКП
			|ИЗ
			|	РегистрНакопления.ОборудованиеDSS КАК ОборудованиеDSS
			|ГДЕ
			|	ОборудованиеDSS.ПроводкаДеталейСКП = &ПроводкаДеталейСКП
			|
			|СГРУППИРОВАТЬ ПО
			|	ОборудованиеDSS.ПроводкаДеталейСКП";
			
			Запрос.УстановитьПараметр("ПроводкаДеталейСКП", ПроводкаDSSДеталейСКП);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.СуммаРуб = СтоимостьБУ Тогда
					BaseAmount = ВыборкаДетальныеЗаписи.Сумма;
				Иначе
					BaseAmount = ВыборкаДетальныеЗаписи.Сумма * СтоимостьБУ/ВыборкаДетальныеЗаписи.СуммаРуб;
				КонецЕсли; 	
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Ссылка КАК РИЗП,
		|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine
		|ИЗ
		|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставлениеInvoiceLinesИDSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
		|		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП = ПринятиеКУчетуОС.ПроводкаDSSДеталейСКП
		|ГДЕ
		|	ПринятиеКУчетуОС.Ссылка = &Ссылка
		|	И РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП = &ПроводкаDSSСКП
		|	И РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Ссылка.Проведен";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ПроводкаDSSСКП", ПроводкаDSSДеталейСКП);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			РИЗП 		= Результат.РИЗП;
			ИнвойсЛайн 	= Результат.InvoiceLine;
		КонецЕсли;
		
	КонецЕсли;
	// -- КДС
	
	Для Каждого Строка Из ТЗДанныеОС Цикл
		
		ТекОС = Строка.ОбъектУчета;
		Если АрендованныеОС И НЕ ТекОС.АрендованноеОС Тогда
			ТекОСОбъект = ТекОС.ПолучитьОбъект();
			ТекОСОбъект.АрендованноеОС = Истина;
			ТекОСОбъект.Контрагент = Контрагент;
			ТекОСОбъект.Записать();
		ИначеЕсли НЕ АрендованныеОС И ТекОС.АрендованноеОС Тогда
			ТекОСОбъект = ТекОС.ПолучитьОбъект();
			ТекОСОбъект.АрендованноеОС = Ложь;
			ТекОСОбъект.Записать();
		КонецЕсли;
		// { RGS MYurkevich 08.04.2015 16:18:50 - SLI-0005340
		Если ПоставщикВзаимозависимый <> ТекОС.ПоставщикВзаимозависимый Тогда
			ТекОСОбъект = ТекОС.ПолучитьОбъект();
			ТекОСОбъект.ПоставщикВзаимозависимый = ПоставщикВзаимозависимый;
			ТекОСОбъект.Записать();
		КонецЕсли;	
		// } RGS MYurkevich 08.04.2015 16:19:07 - SLI-0005340
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(ТекОС, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеПервоначальныеСведения = Истина;
		ДвижениеВТаблице.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		ДвижениеВТаблице.ПервоначальнаяСтоимостьНУ                = Строка.Сумма;
		
		// Добавил Булавский - РГ-Софт - 31.08.2011
		//ДвижениеВТаблице.КурсНаДатуПринятияКУчету = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("999"),?(ЗначениеЗаполнено(ДатаПроведения), ДатаПроведения, Дата)).Курс;
		//// В последствии переделать по нужному алгоритму
		//ДвижениеВТаблице.КРПервоначальная = 0;
		//// Конец добавления
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		Движение.ДатаСостояния        = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Состояние            = Перечисления.СостоянияОС.ПринятоКУчету;
		
		Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
			
			Движение = СостояниеОС.Добавить();
			Движение.ДатаСостояния    = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			Движение.ОсновноеСредство = ТекОС;
			Движение.Организация      = ТекОрганизация;
			Движение.Состояние        = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице.ДатаВводаНУ = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			
		КонецЕсли;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период            = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.Событие           = СтруктураШапкиДокумента.ОперацияСОбъектамиОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		//Закомментировала Федотова Л., РГ-Софт, 09.10.14, вопрос SLI-0004891
		//Если НЕ (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ) Тогда
			
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице.ЕстьДвижениеПервоначальныеСведения = Истина;
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			ДвижениеВТаблице.ПервоначальнаяСтоимостьБУ   = Строка.Сумма;
			ДвижениеВТаблице.ПорядокПогашенияСтоимости   = СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ;
			//ДвижениеВТаблице.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
			ДвижениеВТаблице.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
			ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");
			ДвижениеВТаблице.ИнвентарныйНомер            = ?(ТекСтрокаОС = Неопределено, Неопределено, ТекСтрокаОС.ИнвентарныйНомер);
			ДвижениеВТаблице.НачислятьБУ = (СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
									ИЛИ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии 
									ИЛИ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) 
									И СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
									
			
			
			// Движения по регистру МестонахождениеОсновныхСредств
			Движение = МестонахождениеОС.Добавить();
			Движение.Период               = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Местонахождение      = СтруктураШапкиДокумента.ПодразделениеОрганизации;
			Движение.МОЛ                  = СтруктураШапкиДокумента.МОЛБУ;
			//Добавил Трефиленков Дмитрий для учета по кост-центрам
			Движение.КостЦентр			  = СтруктураШапкиДокумента.КостЦентр;
			
			
			Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
				ИЛИ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса 
				//добавила условие Федотова Л., РГ-Софт, 09.10.14, вопрос SLI-0004891
				ИЛИ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ 
				// ++ КДС РГ-СОФТ 31.03.2016 Вопрос № RCA-0000138
				ИЛИ	СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии 
				// -- КДС
				Тогда
				
				// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
				ДвижениеВТаблице.СрокБУ   			= СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
				ДвижениеВТаблице.СрокПолезногоИспользованияБУ = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
				ДвижениеВТаблице.ДатаИзмененияБУ 	= ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
				ДвижениеВТаблице.СтоимостьБУ 		= Строка.Сумма;
				
			КонецЕсли;
			
		//КонецЕсли;
		
		//Добавим движения по M&S для случая отражения ОС в составе МПЗ, вопрос SLI-0004891
		Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ Тогда
			
			Движение = Движения.FAtoMandS.Добавить();
			Движение.Период = ДатаПроведения;        
			Движение.ОсновноеСредство = ТекОС;
			Движение.ПроводкаДеталейСКП = ПроводкаDSSДеталейСКП;
			Движение.РО = РО;
			Движение.FiscalSum = СтоимостьБУ;	                         
			                                           
		КонецЕсли; 
		
		// ++ КДС РГ-СОФТ 31.03.2016 Вопрос № RCA-0000138
		Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии Тогда
						
			Движение = Движения.FAtoMandS.Добавить();
			Движение.Период 			= ДатаПроведения;        
			Движение.ОсновноеСредство 	= ТекОС;
			Движение.ПроводкаДеталейСКП = ПроводкаDSSДеталейСКП;
			Движение.РО 				= РО;
			// { RGS LFedotova 16.10.2018 11:41:32 - вопрос SLI-0007706
			//Движение.FiscalSum 			= СтоимостьНУ;	                         
			КоличествоОС = ОсновныеСредства.Количество();
			Движение.FiscalSum 			= СтоимостьНУ / КоличествоОС;	                         
			// } RGS LFedotova 16.10.2018 11:41:53 - вопрос SLI-0007706 
			
			Движение = Движения.MaterialsAndSupplies.Добавить();
			Движение.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			Движение.Период 			= ДатаПроведения;
			Движение.ПроводкаДеталейСКП = ?(ИнвойсЛайн = Неопределено, ПроводкаDSSДеталейСКП, ИнвойсЛайн);
			// нужно найти документ поступления. 
			// РИЗП или СКП
			// смотрим по проводке ДСС через ТЧ соответветствия в РИЗП. Если находим, то пишем РИЗП, иначе СКП
			Движение.ДокументПоступления= ?(РИЗП = Неопределено, ПроводкаDSSДеталейСКП.Документ, РИЗП);
			// { RGS LFedotova 16.10.2018 11:37:37 - вопрос SLI-0007706
			//Движение.ManagementSum 		= ?(BaseAmount = 0, ПроводкаDSSДеталейСКП.BaseAmount, BaseAmount);
			//Движение.FiscalSum 			= СтоимостьНУ;	
			Движение.ManagementSum 		= ?(BaseAmount = 0, ПроводкаDSSДеталейСКП.BaseAmount, BaseAmount) / КоличествоОС;
			Движение.FiscalSum 			= СтоимостьНУ / КоличествоОС;	
			// } RGS LFedotova 16.10.2018 11:37:41 - вопрос SLI-0007706 
			
		КонецЕсли;
		// -- КДС
	
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ
				// ++ КДС 31.03.2016 Вопрос № RCA-0000138
				ИЛИ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии 
				// -- КДС
				Тогда
				ДвижениеВТаблице.НачислятьНУ 			= Ложь;
			Иначе	
				ДвижениеВТаблице.НачислятьНУ 			= СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
			КонецЕсли; 
			ДвижениеВТаблице.СрокНУ 	 			= СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
			ДвижениеВТаблице.СпециальныйКоэффициент	= СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
			
		КонецЕсли;		
	КонецЦикла;
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, СостояниеОС, Отказ, Заголовок);

	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Если Движение.СпециальныйКоэффициент = 0 Тогда Движение.СпециальныйКоэффициент = 1; КонецЕсли;
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21 - Конец
	
	
	//Движения по регистру СтоимостьАмортизацияОС
	
	//Добавила условие Федотова Л., РГ-Софт, 09.10.14, вопрос SLI-0004891
	Если НЕ СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ Тогда
	
		Для Каждого Строка Из ТЗДанныеОС Цикл
			НоваяСтрока = СтоимостьАмортизацияОС.Добавить();
			НоваяСтрока.Период       	 = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,СтруктураШапкиДокумента.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(СтруктураШапкиДокумента.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,СтруктураШапкиДокумента.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = Строка.ОбъектУчета;
			НоваяСтрока.Подразделение    = СтруктураШапкиДокумента.ПодразделениеОрганизации;
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
				Если НЕ (СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ) Тогда
					Если (Строка.Сумма - Строка.СуммаХоз) > 0 Тогда
						НоваяСтрока.СтоимостьБУ  = Строка.Сумма - Строка.СуммаХоз;
					ИначеЕсли Строка.СуммаХоз > 0 Тогда
						НоваяСтрока.СтоимостьБУ  = Строка.СуммаХоз;
					КонецЕсли;
					
					Если (Строка.СуммаНУ - Строка.СуммаХозНУ) > 0 Тогда
						НоваяСтрока.СтоимостьНУ = Строка.СуммаНУ - Строка.СуммаХозНУ;
					ИначеЕсли Строка.СуммаХозНУ > 0 Тогда
						НоваяСтрока.СтоимостьНУ = Строка.СуммаХозНУ;
					КонецЕсли;
				КонецЕсли;               
			Иначе
				НоваяСтрока.СтоимостьБУ  = Строка.Сумма;      
				НоваяСтрока.СтоимостьНУ  = Строка.СуммаНУ;  
			КонецЕсли;	
			НоваяСтрока.СуммаКВ			 = Строка.СуммаКапитальныхВложений;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры // ФормированиеДвиженийРегл()

Процедура СписаниеОборудования(Отказ)
	
	Если НомерСтрокиГТД > 0 тогда
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(НомерСтрокиГТД) Тогда
			Сообщить("Выберите декларацию!");
			Отказ = Истина;
			Возврат;
		ИначеЕсли Декларация.Состав[НомерСтрокиГТД-1].Тип = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Rental FA") Тогда
			Движение = Движения.ОборудованиеАрендованное.Добавить();
			Движение.AU = КостЦентр;                               
			Движение.Декларация = Декларация;
			Движение.Номенклатура = Номенклатура;
			Движение.Контрагент = Декларация.Состав[НомерСтрокиГТД-1].Поставщик;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Сумма = ?(СтоимостьБУ=0, СтоимостьНУ, СтоимостьБУ);
			Движение.Количество = Количество;
			Движение.Период = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			Движение.НалоговыйПериод = ?(ДатаПроведения = '0001.01.01',Дата,НалоговыйПериод);
			Движение.НомерСтрокиГТД = НомерСтрокиГТД; 
			Движения.ОборудованиеАрендованное.Записать();                                  
			Если Декларация = Документы.Декларации.ПустаяСсылка() Тогда
				Сообщить("Выберите декларацию!");
				Отказ = Истина;                                                     
				Возврат;
			Иначе
				ЗаполнитьКарточкуОС(Декларация, НомерСтрокиГТД);
			КонецЕсли;	
		Иначе
			Движение = Движения.Оборудование.Добавить();
			Движение.AU = КостЦентр;                               
			Движение.Декларация = Декларация;
			Движение.Номенклатура = Номенклатура;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Сумма = ?(СтоимостьБУ=0, СтоимостьНУ, СтоимостьБУ);
			Движение.Количество = Количество;
			Движение.Период = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			Движение.НалоговыйПериод = ?(ДатаПроведения = '0001.01.01',Дата,НалоговыйПериод);
			Движение.НомерСтрокиГТД = НомерСтрокиГТД; 
			Движения.Оборудование.Записать();
			Если Декларация = Документы.Декларации.ПустаяСсылка() Тогда
				Сообщить("Выберите декларацию!");
				Отказ = Истина;
				Возврат;
			Иначе
				ЗаполнитьКарточкуОС(Декларация, НомерСтрокиГТД);
			КонецЕсли;	
			
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ПроводкаDSSДеталейСКП) Тогда
	    //Найдем остатки сумм по Проводке деталей СКП, чтобы их и списать
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ОборудованиеDSS.СуммаРуб * ВЫБОР
		|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 1
		|			ИНАЧЕ -1
		|		КОНЕЦ) КАК СуммаРуб,
		|	СУММА(ОборудованиеDSS.Сумма * ВЫБОР
		|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 1
		|			ИНАЧЕ -1
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ОборудованиеDSS.Количество) КАК Количество,
		|	ОборудованиеDSS.ПроводкаДеталейСКП
		|ИЗ
		|	РегистрНакопления.ОборудованиеDSS КАК ОборудованиеDSS
		|ГДЕ
		|	ОборудованиеDSS.ПроводкаДеталейСКП = &ПроводкаДеталейСКП
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборудованиеDSS.ПроводкаДеталейСКП";

		Запрос.УстановитьПараметр("ПроводкаДеталейСКП", ПроводкаDSSДеталейСКП);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.СуммаРуб = СтоимостьБУ Тогда
				BaseAmount = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				BaseAmount = ВыборкаДетальныеЗаписи.Сумма * СтоимостьБУ/ВыборкаДетальныеЗаписи.СуммаРуб;
			КонецЕсли; 	
			КоличествоОборудованиеDSS = ВыборкаДетальныеЗаписи.Количество;
		КонецЦикла;

		
		Движение = Движения.ОборудованиеDSS.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//Движение.Количество = Количество;
		Если СписатьВсё Тогда
			Движение.Количество = КоличествоОборудованиеDSS;
		Иначе
			Движение.Количество = Количество;
		КонецЕсли; 
		
		Движение.Номенклатура = Номенклатура;
		Движение.Период = ДатаПроведения;
		Движение.ПроводкаДеталейСКП = ПроводкаDSSДеталейСКП;
		//Движение.Сумма = ПроводкаDSSДеталейСКП.BaseAmount;
		Движение.Сумма = BaseAmount;
		Движение.СуммаРуб = СтоимостьБУ;	                         
		
		//Добавим движения по M&S для случая отражения ОС в составе МПЗ, вопрос SLI-0004891
		Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ОтражениеВСоставеМПЗ Тогда
		
			Движение = Движения.MaterialsAndSupplies.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = ДатаПроведения;
			Движение.ПроводкаДеталейСКП = ПроводкаDSSДеталейСКП;
			Движение.ManagementSum = BaseAmount;
			Движение.FiscalSum = СтоимостьБУ;	                         
		
		КонецЕсли; 
	ИначеЕсли НомерСтрокиПО > 0 тогда
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(РО) Тогда
			Сообщить("Выберите РО!");
			Отказ = Истина;
			Возврат;
		Иначе
			
			//Закомментировал - РГ-Софт - Иванов Антон - 2009-03-13
			//Делаем движения в другом месте
			//Движение = Движения.ЗакрытияЗаказовШвепса.Добавить();
			//Движение.Период = Дата;
			//Движение.НомерПО = СокрЛП(РО);
			//Движение.НомерСтрокиДок = НомерСтрокиПО;
			//Движение.Количество = Количество;
			
			Движение = Движения.ОборудованиеЛокальное.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период       	 = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			//Движение.НалоговыйПериод = ?(ДатаПроведения = '0001.01.01',Дата,НалоговыйПериод);
			Движение.РО = РО;
			Движение.AU = ?(КостЦентрКП.Пустая(),КостЦентр,КостЦентрКП);
			Движение.Поставщик = ДокументПоступленияОплаты.Контрагент;
			Движение.НомерНакладной = НомерНакладной;
			Движение.ДатаНакладной = ДатаНакладной;
			Движение.Подразделение = ПодразделениеОрганизации;
			Движение.Сумма = СтоимостьНУ;
			Движения.ОборудованиеЛокальное.Записать();
			ЗаполнитьКарточкуОСЛокальная();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКарточкуОСЛокальная()
	
	док = документы.ЗаказыИзШвепса.НайтиПоНомеру(РО);
	
	Если Док.Пустая() Тогда
		Сообщить("Не найден заказ по PO! Остаток по заказу будет списан неправильно!");
	КонецЕсли;	
	
	Для Каждого СтрокаОС Из ОсновныеСредства Цикл
		ОС = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
		попытка
			ОС.КостЦентр = док.Состав[НомерСтрокиПО-1].АУ;
			ОС.КодОС = док.Состав[НомерСтрокиПО-1].Артикул;
			//ОС.НомерКоммерческогоИнвойса = док.Состав[НомерСтрокиПО-1].НомерИнвойса;
			ОС.НаименованиеENG = док.Состав[НомерСтрокиПО-1].Наименование;
		исключение
		КонецПопытки;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ОС.КостЦентр) тогда
			ОС.КостЦентр = КостЦентрКП;
		КонецЕсли;
		
		Позиция = СтрНайти(ОС.НаименованиеENG, "FAR"); 
		Если Позиция тогда
			ПозицияФара = Позиция + 4;
			ФАР = Сред(ОС.НаименованиеENG, ПозицияФара);
			КонецФара = СтрНайти(ФАР, " ");
			Фар = Лев(Фар, КонецФара-1);
			ОС.FAR = Фар;
		КонецЕсли;				
		Ос.НомерЗаказаНаПриобретение = РО;
		//ОС.НаименованиеПолное = Номенклатура.НаименованиеРусское;
		ОС.НомерНакладной = НомерНакладной;
		ОС.ДатаНакладной = ДатаНакладной;
		//ОС.Поставщик = Декларация.Состав[НомерСтрокиГТД-1].Поставщик;
		Попытка
			ОС.КодПоставщика = ДокументПоступленияОплаты.Контрагент.КонтрагентLawson.Код;
		Исключение
		КонецПопытки;
		
		Если НЕ ТипЗнч(ДокументПоступленияОплаты) = Тип("ДокументСсылка.ЗакрытиеПредоплаты") Тогда
			
			ТЗ = ДокументПоступленияОплаты.Счета.Выгрузить();
			Для каждого строкаСчета из ТЗ цикл
				Если СтрНайти(строкаСчета.ШвепсПО,сокрЛП(РО)) тогда
					стр = строкаСчета;
					прервать;
				КонецЕсли;
			КонецЦикла;
			//стр = ТЗ.Найти(РО,);
			//стр = ДокументПоступленияОплаты.Счета[0];
			Если Не стр = Неопределено Тогда
				ОС.НомерКоммерческогоИнвойса = стр.НомерСчета;
				ОС.НомерВаучера = стр.НомерВаучера;
			КонецЕсли;	
			
			строкаСФ = ДокументПоступленияОплаты.СчетаФактуры.Найти(НомерНакладной, "АрхивНомерПрихода");
			Если не строкаСФ = неопределено тогда
				ОС.НомерСчетаФактуры = СтрокаСФ.АрхивНомерСФ;
			КонецЕсли;
			
			ОС.НомерИДатаПлатежногоПоручения = ДокументПоступленияОплаты.НомерПП;
			ОС.ДатаПлатежногоПоручения = ДокументПоступленияОплаты.АрхивДатаПП;
			
		КонецЕсли;
		
		//ОС.НомерСчетаФактуры = 
		ОС.ПоставщикENG = док.Поставщик;
		Попытка
			ОС.Поставщик = ДокументПоступленияОплаты.Контрагент.Наименование;
		Исключение
		КонецПопытки;
		ОС.Валюта = Справочники.Валюты.НайтиПоКоду("643");
		ОС.Подразделение = ПодразделениеОрганизации;
		ОС.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКарточкуОС(Декларация, НомерСтрокиГТД)
	
	Для Каждого СтрокаОС Из ОсновныеСредства Цикл
		ОС = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
		ОС.КостЦентр = Декларация.Состав[НомерСтрокиГТД-1].AU;
		ОС.КодОС = Декларация.Состав[НомерСтрокиГТД-1].КодОС;
		ОС.НомерКоммерческогоИнвойса = Декларация.Состав[НомерСтрокиГТД-1].НомерИнвойса;
		Ос.НомерЗаказаНаПриобретение = Декларация.Состав[НомерСтрокиГТД-1].МАТО;
		ОС.НаименованиеENG = Декларация.Состав[НомерСтрокиГТД-1].Описание.Наименование;
		Попытка
			ОС.НаименованиеПолное = Номенклатура.НаименованиеРусское;
		Исключение
			ОС.НаименованиеПолное = Номенклатура.НаименованиеПолное;
		КонецПопытки;
		ОС.НомерНакладной = Декларация.ГТД;
		Попытка
			ОС.ДатаНакладной = Декларация.ГТД.ДатаГТД;
		Исключение
			ОС.ДатаНакладной = ПолучитьДатуГТД(Декларация.ГТД);
		КонецПопытки;			
		ОС.Поставщик = Декларация.Состав[НомерСтрокиГТД-1].Поставщик;
		ОС.ЗаводскойНомер = Декларация.Состав[НомерСтрокиГТД-1].СерийныйНомер;
		ОС.КодПоставщика = Декларация.Состав[НомерСтрокиГТД-1].Поставщик.КонтрагентLawson.Код;
		ОС.ПоставщикENG = ?(Декларация.Состав[НомерСтрокиГТД-1].Поставщик.НаименованиеEnglish<>"",Декларация.Состав[НомерСтрокиГТД-1].Поставщик.НаименованиеEnglish,Декларация.Состав[НомерСтрокиГТД-1].Поставщик.DescriptionFull);
		ОС.Валюта = Справочники.Валюты.НайтиПоКоду("643");
		ОС.Подразделение = ПодразделениеОрганизации;
		//Добавил РГ-Софт - Иванов Антон - 2008-12-05
		ОС.СтранаПроисхождения = Декларация.Состав[НомерСтрокиГТД-1].Страна;
		ОС.СерийныйНомер = Декларация.Состав[НомерСтрокиГТД-1].СерийныйНомер;
		// { RGS MYurkevich 09.04.2015 15:00:04 - SLI-0005340
		НомерНакладнойПоиск = СокрП(СтрЗаменить(Декларация.ГТД, "/", "-"));
		ГТД = Документы.ГТД.НайтиПоНомеру(НомерНакладнойПоиск);
		Если ГТД <> Документы.ГТД.ПустаяСсылка() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиГТД.КодТНВЭД
			|ИЗ
			|	Справочник.СтрокиГТД КАК СтрокиГТД
			|ГДЕ
			|	СтрокиГТД.ГТД = &ГТД
			|	И СтрокиГТД.НомерСтрокиГТД = &НомерСтрокиГТД";
			
			Запрос.УстановитьПараметр("ГТД", ГТД);
			Запрос.УстановитьПараметр("НомерСтрокиГТД", НомерСтрокиГТД);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();  
				Выборка.Следующий();
				ОС.КодТНВЭД = Выборка.КодТНВЭД;
			КонецЕсли;
		КонецЕсли;	
		// } RGS MYurkevich 09.04.2015 15:06:06 - SLI-0005340

		ОС.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДатуГТД(НомерГТД)  Экспорт
	
	ф1 = СтрНайти(НомерГТД,"/");
	Если ф1 = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Дата = Сред(НомерГТД,ф1+1,6);
	Попытка
		Возврат ДобавитьМЕСЯЦ(Дата('20050101') + 24*60*60*(Число(Лев(Дата,2))-1),Число(Сред(Дата,3,2))-1);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя принять к учету группу основных средств", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();
		
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)
	
	Если ПодразделениеОрганизации.Код = "Туруханск " и Дата >= '20120101' Тогда
		Сообщить("С 2012 года не используется подразделение ""Туруханск"", выберите ""Филиал Туруханск""");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления                                                             
	
	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	Заголовок = "";
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		ПроверитьОтносительноГТД(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ИначеЕсли ЗначениеЗаполнено(РО) Тогда
		ПроверитьОтносительноЗаказа(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим, нет ли одинаковых инвентарных номеров основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверкаСрока(СтруктураШапкиДокумента,Отказ);
	Если НЕ Отказ Тогда
		
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
	// регистр ДопРасходыПоPO Расход
	Если СуммаДопРасходов <> 0 Тогда
		Движение = Движения.ДопРасходыПоPO.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.PO = РО;
		Движение.Сумма = СтоимостьБУ - СуммаДопРасходов;
		Движение.СуммаДопРасходы = СуммаДопРасходов;
	КонецЕсли; 
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	// Добавил Булавский - РГ-Софт - 26-08-2011
	ДвиженияПоРегиструОстаточнойСтоимостиПР();
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-
	// { RGS MYurkevich 09.04.2015 15:59:37 - SLI-0005340 
	 ЗаполнитьТНВЭД();
	// } RGS MYurkevich 09.04.2015 15:59:46 - SLI-0005340
	
КонецПроцедуры

// Добавлено Булавский - РГ-Софт - 26-08-2011
Процедура ДвиженияПоРегиструОстаточнойСтоимостиПР()
	Если Количество = 0 Тогда
		Сообщить("Количество основных средств установлено 0! Движение по регистру остаточной стоимости ПР не выполнено!");
		Возврат;
	КонецЕсли; 
	
	ТаблицаОС = ОсновныеСредства.Выгрузить( , "ОсновноеСредство");
	СтоимостьНУРуб = СтоимостьНУ/Количество;
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	ВалютаДолл = Справочники.Валюты.НайтиПоКоду("999");
	СтоимостьНУДолл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтоимостьНУРуб, ВалютаРуб, ВалютаДолл, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРуб, ДатаПроведения).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДолл, ДатаПроведения).Курс, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабличнаяЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредстваДокумента
	|ИЗ
	|	&ТаблицаОС КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.СтоимостьБУ - ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьПР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос1.ОсновноеСредство КАК ОсновноеСредство,
	|		ВложенныйЗапрос1.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос1.ОсновноеСредствоLawson = ЗНАЧЕНИЕ(Справочник.ОсновныеСредстваLawson.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос1.ОсновноеСредствоLawson.ПервоначальнаяСтоимость
	|		КОНЕЦ КАК СтоимостьБУ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|			ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|			ОсновныеСредства.ОсновноеСредствоLawson КАК ОсновноеСредствоLawson
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОсновныеСредстваДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|				&ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ
	|			ИЗ
	|				ОсновныеСредстваДокумента КАК ОсновныеСредстваДокумента) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|				ПО ВложенныйЗапрос.ОсновноеСредство = ОсновныеСредства.Ссылка) КАК ВложенныйЗапрос1) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.УстановитьПараметр("ПервоначальнаяСтоимостьНУ", СтоимостьНУДолл);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если НЕ Выборка.Количество() = 0 Тогда
		ДвиженияПР = Движения.ОстаточнаяСтоимостьПР;
		Пока Выборка.Следующий() Цикл
			ДвижениеПоПР = ДвиженияПР.Добавить();
			ДвижениеПоПР.Период = ДатаПроведения;
			ДвижениеПоПР.Активность = Истина;
			ДвижениеПоПР.ВидДвижения = ВидДвиженияНакопления.Приход;
			ДвижениеПоПР.ОсновноеСредство = Выборка.ОсновноеСредство;
			ДвижениеПоПР.Регистратор = Ссылка;
			ДвижениеПоПР.СтоимостьПР = Выборка.ПервоначальнаяСтоимостьПР;
		КонецЦикла;
		ДвиженияПР.Записать();
	КонецЕсли; 
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПроверкаСрока(СтруктураШапкиДокумента,Отказ)
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		Группа = ОсновныеСредства[0].ОсновноеСредство.АмортизационнаяГруппа;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Группа) Тогда
			Отказ = Истина;
			Сообщить("У основного средства не заполнена амортизационная группа!");
		Иначе
			
			Если Группа = Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда
				НачалоГр = 11; КонецГр = 24;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда
				НачалоГр = 24; КонецГр = 36;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда
				НачалоГр = 36; КонецГр = 60;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
				НачалоГр = 60; КонецГр = 84;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда
				НачалоГр = 84; КонецГр = 120;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда
				НачалоГр = 120; КонецГр = 180;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда
				НачалоГр = 180; КонецГр = 240;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда
				НачалоГр = 240; КонецГр = 300;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда
				НачалоГр = 300; КонецГр = 360;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда
				НачалоГр = 360; КонецГр = 99999999999999;
			ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа Тогда
				НачалоГр = -1; КонецГр = 99999999999999;
			КонецЕсли;
			
			Если не((СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ >НачалоГр) и (СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ <=КонецГр)) Тогда
				
				Отказ = Истина;
				Сообщить("Срок полезного использования не соответствует амортизационной группе!");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Заполним стандартные реквизиты
	ЗаполнитьСтандартныеРеквизиты();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Оплата.Количество() > 0 Тогда
		КоличествоСтрок = Оплата.Количество();
		Для Счетчик = 1 По (КоличествоСтрок) Цикл
			Строка = Оплата[КоличествоСтрок - Счетчик];
			Если ОсновныеСредства.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
				Оплата.Удалить(КоличествоСтрок - Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Добавила Федотова Л., РГ-Софт, 22.04.16, вопрос SLI-0006355
	ПоставщикВзаимозависимый = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПОДСТРОКА(ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ОсновноеСредствоLawson.SupplierNumberLawson.LawsonID, 1, 2) = ""OP""
		|			ИЛИ ПОДСТРОКА(ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ОсновноеСредствоLawson.SupplierNumberLawson.LawsonID, 1, 2) = ""OC""
		|			ИЛИ НЕ ДопКонтрагентыИнтеркомпани.Контрагент ЕСТЬ NULL ) КАК ЭтоКонтрагентИнтеркомпани
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопКонтрагентыИнтеркомпани КАК ДопКонтрагентыИнтеркомпани
		|		ПО ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ОсновноеСредствоLawson.SupplierNumberLawson.КонтрагентLawson = ДопКонтрагентыИнтеркомпани.Контрагент
		|ГДЕ
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КодПоставщика = "";
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если НЕ ВыборкаДетальныеЗаписи.ЭтоКонтрагентИнтеркомпани = NULL И ВыборкаДетальныеЗаписи.ЭтоКонтрагентИнтеркомпани Тогда
			ПоставщикВзаимозависимый = Истина;
		КонецЕсли;                                    
	КонецЕсли;
	
	Если НЕ ПоставщикВзаимозависимый Тогда
		
		Если ЗначениеЗаполнено(НомерСтрокиГТД) Тогда
			КодПоставщика = Декларация.Состав[НомерСтрокиГТД-1].Поставщик.КонтрагентLawson.Код;
		ИначеЕсли ЗначениеЗаполнено(НомерСтрокиПО) Тогда
			Если ЗначениеЗаполнено(ДокументПоступленияОплаты) Тогда
				КодПоставщика = ДокументПоступленияОплаты.Контрагент.КонтрагентLawson.Код;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ПроводкаDSSДеталейСКП) Тогда
			КодПоставщика = ПроводкаDSSДеталейСКП.Vendor;
		ИначеЕсли ОсновныеСредства.Количество() > 0 И ЗначениеЗаполнено(ОсновныеСредства[0].ОсновноеСредство) И
			ЗначениеЗаполнено(ОсновныеСредства[0].ОсновноеСредство.КодПоставщика) Тогда
			КодПоставщика = ОсновныеСредства[0].ОсновноеСредство.КодПоставщика;
		КонецЕсли;

		Если ЗначениеЗаполнено(КодПоставщика) Тогда
		    Если Лев(КодПоставщика, 2) = "OP" ИЛИ Лев(КодПоставщика, 2) = "OC" Тогда
			    ПоставщикВзаимозависимый = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	МАКСИМУМ(ДопКонтрагентыИнтеркомпани.Контрагент.Код = &КодПоставщика) КАК КонтрагентВзаимозависимый
					|ИЗ
					|	РегистрСведений.ДопКонтрагентыИнтеркомпани КАК ДопКонтрагентыИнтеркомпани";
				
				Запрос.УстановитьПараметр("КодПоставщика", КодПоставщика);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПоставщикВзаимозависимый = ВыборкаДетальныеЗаписи.КонтрагентВзаимозависимый;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Строка Из ОсновныеСредства Цикл
			Если ЗначениеЗаполнено(Строка.ОсновноеСредство) Тогда
				ОсновноеСредствоОбъект = Строка.ОсновноеСредство.ПолучитьОбъект();
				ОсновноеСредствоОбъект.ПоставщикВзаимозависимый = ПоставщикВзаимозависимый;
				ОсновноеСредствоОбъект.Записать();
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	// конец добавления

	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры // ПередЗаписью

Процедура ЗаполнитьСтандартныеРеквизиты() Экспорт
	
	ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
	МОЛБУ = Справочники.ФизическиеЛица.ПустаяСсылка();
	НачислятьАмортизациюБУ = (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
				ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ВключениеВРасходыНУПриПринятии);
	НачислятьАмортизациюНУ = (ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
	ОперацияСОбъектамиОС = Справочники.СобытияОС.НайтиПоНаименованию("Принятие к учету с вводом в экплуатацию");     
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
	ПринятиеКУчетуОдновременноСВводомВЭксплуатацию = Истина;	
	СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;	
	СпособНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
	СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоКоду("00001");
	//Закомментировала Федотова Л., РГ-Софт, Вопрос SLI-0004462, 21.04.14
	//ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 10;
	
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры

// { RGS MYurkevich 09.04.2015 15:59:37 - SLI-0005340 
Процедура ЗаполнитьТНВЭД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.КодТНВЭД КАК КодПоТНВЭД
		|ИЗ
		|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставлениеInvoiceLinesИDSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Ссылка.ShipmentСlosing = ЗакрытиеПоставкиСопоставление.Ссылка
		|			И РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine = ЗакрытиеПоставкиСопоставление.СтрокаИнвойса
		|ГДЕ
		|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП = &ПроводкаDSSСКП";
	
	Запрос.УстановитьПараметр("ПроводкаDSSСКП", ПроводкаDSSДеталейСКП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Для Каждого ОС Из ОсновныеСредства Цикл
			ОСОбъект = ОС.ОсновноеСредство.ПолучитьОбъект();
			ОСОбъект.КодТНВЭД = Выборка.КодПоТНВЭД;
			ОСОбъект.Записать();
		КонецЦикла;	
	КонецЕсли;	


КонецПроцедуры	
// } RGS MYurkevich 09.04.2015 15:59:46 - SLI-0005340

