
////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ      

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		Дата = ТекущаяДата();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;
		
	POLines.Свернуть("POLine, Rule, Status, Comment", "");
	ОбщегоНазначения.ОчиститьТаблицуОтСтрокСПустымиРеквизитами(POLines, "POLine,Rule,Status,Comment");
	
	РГСофтКлиентСервер.УстановитьЗначение(Status, ПолучитьStatus());
				
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовЗапросовПередЗаписью(РежимЗаписи);
	
	ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи, СтруктураРезультатов);
		
КонецПроцедуры

Функция ПолучитьStatus()
	
	Statuses = Перечисления.StatusesOfLineOfBlacklist;
	
	ТаблицаStatuses = POLines.Выгрузить(, "Status");
	ТаблицаStatuses.Свернуть("Status");
	Если ТаблицаStatuses.Найти(Statuses.InProcess, "Status") <> Неопределено Тогда
		Возврат Statuses.InProcess;
	КонецЕсли; 
	
	ЕстьNew = ТаблицаStatuses.Найти(Statuses.New, "Status") <> Неопределено;
	ЕстьClosed = ТаблицаStatuses.Найти(Statuses.Closed, "Status") <> Неопределено;
	
	Если ЕстьNew И ЕстьClosed Тогда
		Возврат Statuses.InProcess;
	ИначеЕсли ЕстьNew Тогда
		Возврат Statuses.New;
	ИначеЕсли ЕстьClosed Тогда
		Возврат Statuses.Closed;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтруктуруРезультатовЗапросовПередЗаписью(РежимЗаписи)
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
		
	Если НЕ ПометкаУдаления Тогда
			
		Если POLines.Количество() Тогда
			
			СтруктураПараметров.Вставить("POLines", POLines.ВыгрузитьКолонку("POLine"));
			
			СтруктураТекстов.Вставить("РеквизитыPOLines",
				"ВЫБРАТЬ
				|	СтрокиЗаявкиНаЗакупку.Ссылка КАК POLine,
				|	СтрокиЗаявкиНаЗакупку.ПометкаУдаления,
				|	СтрокиЗаявкиНаЗакупку.Владелец КАК PO,
				|	СтрокиЗаявкиНаЗакупку.Владелец.СтранаПоставщика КАК CountryOfOrigin
				|ИЗ
				|	Справочник.СтрокиЗаявкиНаЗакупку КАК СтрокиЗаявкиНаЗакупку
				|ГДЕ
				|	СтрокиЗаявкиНаЗакупку.Ссылка В(&POLines)");
				
			СтруктураПараметров.Вставить("Ссылка", Ссылка);
			СтруктураТекстов.Вставить("POLinesInOtherBlacklists",
				"ВЫБРАТЬ
				|	BlacklistPOLines.Ссылка.Представление КАК BlackListПредставление,
				|	BlacklistPOLines.POLine КАК POLine,
				|	BlacklistPOLines.POLine.Представление КАК POLineПредставление
				|ИЗ
				|	Документ.Blacklist.POLines КАК BlacklistPOLines
				|ГДЕ
				|	BlacklistPOLines.Ссылка <> &Ссылка
				|	И BlacklistPOLines.POLine В(&POLines)
				|	И (НЕ BlacklistPOLines.Ссылка.ПометкаУдаления)");
						
		КонецЕсли; 
						
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураРезультатов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи, СтруктураРезультатов)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Country) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Country"" is empty!",
			ЭтотОбъект, "Country", , Отказ);
	КонецЕсли;
	
	Если POLines.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из POLines Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.POLine) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""PO line"" is empty!",
				ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].POLine", , Отказ);
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Rule) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""Rule"" is empty!",
				ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].Rule", , Отказ);
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Status) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": ""Status"" is empty!",
				ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].Status", , Отказ);
			
		КонецЕсли;	
					
	КонецЦикла; 
				
	// Проверим PO lines
	ТаблицаPOLines = СтруктураРезультатов.РеквизитыPOLines.Выгрузить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаPOLines Цикл
		
		Если СтрокаТаблицы.ПометкаУдаления Тогда
			
			СтрокаТЧ = POLines.Найти(СтрокаТаблицы.POLine, "POLine");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": PO line """ + СокрЛП(СтрокаТаблицы.POLine) + """ is marked for deletion!",
				ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].POLine", , Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Проверим, что эти PO lines не включены в другие Blacklists
	Выборка = СтруктураРезультатов.POLinesInOtherBlacklists.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = POLines.Найти(Выборка.POLine, "POLine");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In line " + СтрокаТЧ.НомерСтроки + ": PO line """ + СокрЛП(Выборка.POLineПредставление) + """ is already in """ + Выборка.BlackListПредставление + """!",
			ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].POLine", , Отказ);
		
	КонецЦикла; 
	
	// Проверим, что в текущей таблицу PO line не встречается несколько раз
	ТаблицаПроверки = POLines.Выгрузить(, "POLine");
	ТаблицаПроверки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПроверки.ЗаполнитьЗначения(1, "Количество");
	ТаблицаПроверки.Свернуть("POLine", "Количество");
	СтруктураПоиска = Новый Структура("Количество", 1);
	ОдиночныеСтроки = ТаблицаПроверки.НайтиСтроки(СтруктураПоиска);
	Для Каждого ОдиночнаяСтрока Из ОдиночныеСтроки Цикл
		ТаблицаПроверки.Удалить(ОдиночнаяСтрока);			 
	КонецЦикла; 
	Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
		
		СтрокаТЧ = POLines.Найти(СтрокаТаблицы.POLine, "POLine");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In line " + СтрокаТЧ.НомерСтроки + ": PO line """ + СокрЛП(СтрокаТаблицы.POLine) + """ указана в этой таблице " + СтрокаТаблицы.Количество + " раз(а)!",
			ЭтотОбъект, "POLines[" + (СтрокаТЧ.НомерСтроки - 1) + "].POLine", , Отказ);
		
	КонецЦикла; 
		
КонецПроцедуры
 