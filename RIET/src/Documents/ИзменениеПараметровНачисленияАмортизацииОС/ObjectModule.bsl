// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета

Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета =  "
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
								//|ОС.ОбъемПродукцииРаботБУ,
								//|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
								|ОС.СтоимостьДляВычисленияАмортизацииБУ";
								//|ОС.КоэффициентАмортизацииБУ,
								//|ОС.КоэффициентУскоренияБУ";

	мСтрокаРеквизитыНалУчета =  "ОС.СрокПолезногоИспользованияНУ";
								//|ОС.ИзменятьПараметрыНачисленияПоБазовойСтоимостиНУ,
								//|ОС.НачислятьПоБазовойСтоимостиНУ,
								//|ОС.НакопленнаяАмортизацияНУ,
								//|ОС.НакопленныйФактическийСрокИспользованияНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента,Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);

	ДатаДок = СтруктураШапкиДокумента.Дата;

	//Движения по регистру СтоимостьАмортизацияОС Приход
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство,
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ДобавленнаяСтоимостьБУ,
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ДобавленнаяСуммаКВ,
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ДобавленнаяСтоимостьНУ,
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ДобавленнаяАморитзацияБУ,
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.ДобавленнаяАморитзацияНУ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
		|ИЗ
		|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ИзменениеПараметровНачисленияАмортизацииОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.СтоимостьАмортизацияОС.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		Движение.Подразделение = ВыборкаДетальныеЗаписи.Местонахождение;
		Движение.СтоимостьБУ = ВыборкаДетальныеЗаписи.ДобавленнаяСтоимостьБУ;
		Движение.СуммаКВ = ВыборкаДетальныеЗаписи.ДобавленнаяСуммаКВ;
		Движение.СтоимостьНУ = ВыборкаДетальныеЗаписи.ДобавленнаяСтоимостьНУ;
		Движение.АмортизацияБУ = ВыборкаДетальныеЗаписи.ДобавленнаяАморитзацияБУ;
		Движение.АмортизацияНУ = ВыборкаДетальныеЗаписи.ДобавленнаяАморитзацияНУ;
		Движение.НалоговыйПериод = Дата;
		//Добавила Федотова Л., РГ-Софт, 22.10.12, вопрос №SLI-0002928 ->
		Если ВыборкаДетальныеЗаписи.ДобавленнаяСуммаКВ > 0 Тогда
			Движение = Движения.СтоимостьАмортизацияОС.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
			Движение.Подразделение = ВыборкаДетальныеЗаписи.Местонахождение;
			Движение.СуммаКВ = ВыборкаДетальныеЗаписи.ДобавленнаяСуммаКВ;
		КонецЕсли;
		//<-
	КонецЦикла;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезапоследних по регистру НачислениеАмортизации
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
		табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(Дата, Организация, масОС);
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
			
			//Добавил РГ-Софт - Пронин Иван - 2009-09-21
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			
			ДвижениеВТаблице.СрокБУ   		= СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
			ДвижениеВТаблице.СтоимостьБУ 	= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
			//добавила Федотова Л., РГ-Софт
			ДвижениеВТаблице.ДатаИзмененияБУ   		= СтрокаТЧ.ДатаИзмененияБУ;
			
		КонецЦикла;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

		//АмортизацияПоБС        = Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
		
		Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
			
			//Добавил РГ-Софт - Пронин Иван - 2009-09-21
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			ДвижениеВТаблице.СрокНУ = СтрокаТЧ.СрокПолезногоИспользованияНУ;
			
			//Если СтрокаТЧ.ИзменятьПараметрыНачисленияПоБазовойСтоимостиНУ тогда
			//	
			//	СтрокаДвижений = АмортизацияПоБС.Добавить();

			//	СтрокаДвижений.Период           = ДатаДок;
			//	СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			//	СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;

			//	СтрокаДвижений.ПризнакНачисленияПоБазовойСтоимости   = СтрокаТЧ.НачислятьПоБазовойСтоимостиНУ;
			//	СтрокаДвижений.СуммаНакопленнойАмортизации           = СтрокаТЧ.НакопленнаяАмортизацияНУ;
			//	СтрокаДвижений.ФактическийСрокПолезногоИспользования = СтрокаТЧ.НакопленныйФактическийСрокИспользованияНУ;

			//КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
			Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
				Движение = Движения.НачислениеАмортизации.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Запись);
				Если Движение.СпециальныйКоэффициент = 0 Тогда Движение.СпециальныйКоэффициент = 1; КонецЕсли;
			КонецЕсли;
			Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
				Движение = Движения.ПервоначальныеСведения.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Запись);
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;

	ОперацииОС = Движения.СобытияОСОрганизаций;

	Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл

		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаДок;
		СтрокаДвижений.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = СтруктураШапкиДокумента.Номер;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда

		СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
		СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  , "СрокИспользованияДляВычисленияАмортизацииБУ");
		//СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        , "ОбъемПродукцииРаботБУ");
		//СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
		СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"           , "СтоимостьДляВычисленияАмортизацииБУ");
		//СтруктураПолей.Вставить("КоэффициентАмортизацииБУ"                     , "КоэффициентАмортизацииБУ");
		//СтруктураПолей.Вставить("КоэффициентУскоренияБУ"                       , "КоэффициентУскоренияБУ");
 		СтруктураПолей.Вставить("ДатаИзмененияБУ"       					    , "ДатаИзмененияБУ");

	Конецесли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                   , "СрокПолезногоИспользованияНУ");
		//СтруктураПолей.Вставить("ИзменятьПараметрыНачисленияПоБазовойСтоимостиНУ", "ИзменятьПараметрыНачисленияПоБазовойСтоимостиНУ");
		//СтруктураПолей.Вставить("НачислятьПоБазовойСтоимостиНУ"                  , "НачислятьПоБазовойСтоимостиНУ");
		//СтруктураПолей.Вставить("НакопленнаяАмортизацияНУ"                       , "НакопленнаяАмортизацияНУ");
		//СтруктураПолей.Вставить("НакопленныйФактическийСрокИспользованияНУ"      , "НакопленныйФактическийСрокИспользованияНУ");

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Заголовок = "";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок);

	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	Привилегированный.ПроизвестиРасчетАмортизации(Ссылка, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Дата;
	//<-

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры
