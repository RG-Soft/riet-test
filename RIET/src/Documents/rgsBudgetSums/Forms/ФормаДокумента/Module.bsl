
&НаСервере
Процедура ЗаполнитьПоИмеющимсяДаннымНаСервере()
	
	Объект.Budget.Очистить();
	Выборка = Справочники.rgsBudgetItem.Выбрать();	
	Пока Выборка.Следующий() цикл		
		Если Выборка.BudgetPercentType = Перечисления.rgsBudgetPercentTypes.RevenueProcent тогда
			СтрокаТЧ = Объект.Budget.Добавить();
			СтрокаТЧ.Geomarket = Выборка.GroupLevel;
			Процент = BudgetПриИзмененииНаСервере(Выборка.GroupLevel);
			СтрокаТЧ.RevenuePercent = Процент;
			СтрокаТЧ.RevenueSum = Процент / 100 * СтрокаТЧ.Summa;			
		КонецЕсли;
	КонецЦикла;
	  	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИмеющимсяДанным(Команда)
	
	ЗаполнитьПоИмеющимсяДаннымНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура BudgetПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Budget.ТекущиеДанные;
	Геомаркет = ТекущиеДанные.Geomarket;
	Если ЗначениеЗаполнено(Геомаркет) Тогда
		Процент = BudgetПриИзмененииНаСервере(Геомаркет);
		ТекущиеДанные.RevenuePercent = Процент;
		ТекущиеДанные.RevenueSum = Процент / 100 * ТекущиеДанные.Summa;
	КонецЕсли;
	
	ТекущиеДанные.ManualEntrySum = ТекущиеДанные.ManualEntryPercent /100 * ТекущиеДанные.RevenueSum;
	
КонецПроцедуры

&НаСервере
Функция BudgetПриИзмененииНаСервере(Геомаркет)
	         	
	ЗапросПроценты = новый Запрос;
	ЗапросПроценты.Текст = "ВЫБРАТЬ
	|	rgsBudgetPercentageСрезПоследних.BudgetItem,
	|	rgsBudgetPercentageСрезПоследних.Percent,
	|	rgsBudgetPercentageСрезПоследних.Период,
	|	rgsBudgetPercentageСрезПоследних.BudgetItem.GroupLevel КАК GroupLevel,
	|	rgsBudgetPercentageСрезПоследних.BudgetType,
	|	rgsBudgetPercentageСрезПоследних.BudgetItem.SubLevel КАК SubLevel,
	|	rgsBudgetPercentageСрезПоследних.BudgetItem.BudgetPercentType КАК BudgetPercentType
	|ИЗ
	|	РегистрСведений.rgsBudgetPercentage.СрезПоследних(
	|			&Дата,
	|			BudgetType = &BudgetType
	|				И BudgetItem.BudgetPercentType = &BudgetPercentType
	|				И BudgetItem.GroupLevel = &Geomarket) КАК rgsBudgetPercentageСрезПоследних";
	ЗапросПроценты.УстановитьПараметр("Дата",НачалоКвартала(Объект.Дата));
	ЗапросПроценты.УстановитьПараметр("BudgetType",Объект.BudgetType);
	ЗапросПроценты.УстановитьПараметр("Geomarket",Геомаркет);
	ЗапросПроценты.УстановитьПараметр("BudgetPercentType",Перечисления.rgsBudgetPercentTypes.RevenueProcent);
	Результат = ЗапросПроценты.Выполнить().Выгрузить();
	Если Результат.Количество()=1 тогда
		Возврат Результат[0].Percent;
	иначе возврат 100
	КонецЕсли;
	         	
КонецФункции

&НаКлиенте
Процедура BudgetManualEntryPercentПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Budget.ТекущиеДанные;
	ТекущиеДанные.ManualEntrySum = ТекущиеДанные.ManualEntryPercent /100 * ТекущиеДанные.RevenueSum;
	
КонецПроцедуры

&НаКлиенте
Процедура BudgetSummaПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Budget.ТекущиеДанные;
	ТекущиеДанные.ManualEntrySum = ТекущиеДанные.ManualEntryPercent /100 * ТекущиеДанные.RevenueSum;
	
КонецПроцедуры

&НаКлиенте
Процедура LoadFromExcel(Команда)
	
	Если Объект.Budget_MS.Количество() > 0 ИЛИ Объект.Mobillization.Количество() > 0 Тогда
		ТекстВопроса = "Вы хотите очистить таблицу и перезаполнить данные из Excel?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			НастройкиДиалога = Новый Структура;
			НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
			НастройкиДиалога.Вставить("Budgets", ЭтотОбъект);
			
			Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
			ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
			
		КонецЕсли;
	Иначе
		
		НастройкиДиалога = Новый Структура;
		НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
		НастройкиДиалога.Вставить("Budgets", ЭтотОбъект);
		
		Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
		ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура LoadFile(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, Budgets)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);

	ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, Budgets);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, Budgets)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, Budgets);
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	         		
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  

	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
		
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		Если Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization ИЛИ Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization Тогда
			СвойстваСтруктуры = "Period,MobilizationProject,AU,ServiceProvider,TypeOfTransport,Summa,TnKm,Weight,City,Region,Geomarket";
		Иначе
			СвойстваСтруктуры = "Geomarket,SubGeomarket,Segment,SubSegment,InternationalDomestic,Sum";
		КонецЕсли;
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				 				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				         						
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
			
		Если Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization ИЛИ Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization Тогда
			Если ТекстЯчейки = "Period" Тогда
				СтруктураКолонокИИндексов.Period = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Mobilization project" Тогда
				СтруктураКолонокИИндексов.MobilizationProject = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "AU" Тогда
				СтруктураКолонокИИндексов.AU = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Service provider" Тогда
				СтруктураКолонокИИндексов.ServiceProvider = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Type of transport" Тогда
				СтруктураКолонокИИндексов.TypeOfTransport = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Budget, rub" Тогда
				СтруктураКолонокИИндексов.Summa = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Tn/Km, rub" Тогда
				СтруктураКолонокИИндексов.TnKm = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Weight, t" Тогда
				СтруктураКолонокИИндексов.Weight = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "City" Тогда
				СтруктураКолонокИИндексов.City = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Region" Тогда
				СтруктураКолонокИИндексов.Region = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Geomarket" Тогда
				СтруктураКолонокИИндексов.Geomarket = НомерКолонки;
			КонецЕсли;
		ИначеЕсли Объект.BudgetType = Справочники.rgsBudgetType.MS Тогда
			Если ТекстЯчейки = "Geomarket" Тогда
				СтруктураКолонокИИндексов.Geomarket = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Sub geomarket" Тогда
				СтруктураКолонокИИндексов.SubGeomarket = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Segment" Тогда
				СтруктураКолонокИИндексов.Segment = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Sub segment" Тогда
				СтруктураКолонокИИндексов.SubSegment = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Type international domestic" Тогда
				СтруктураКолонокИИндексов.InternationalDomestic = НомерКолонки;
			ИначеЕсли ТекстЯчейки = "Sum" Тогда
				СтруктураКолонокИИндексов.Sum = НомерКолонки;
			КонецЕсли;
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции

&НаСервере	
Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, Budgets) 
		
	ЗаполнитьДокументДанными(ТаблицаExcel, Budgets);
	
	Сообщить("Данные загружены.", СтатусСообщения.Информация); 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументДанными(ТаблицаExcel, Budgets)
	
	Если Объект.BudgetType = Справочники.rgsBudgetType.MS Тогда
		Объект.Budget_MS.Очистить();
	ИначеЕсли Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization ИЛИ Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization Тогда
		Объект.Mobillization.Очистить();
	КонецЕсли;
	
	Для Каждого Элемент Из ТаблицаExcel Цикл
		
		Если Объект.BudgetType = Справочники.rgsBudgetType.MS Тогда
			
			Geomarket = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(Элемент.Geomarket));
			Если НЕ ЗначениеЗаполнено(Geomarket) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Geomarket' - " + СокрЛП(Элемент.Geomarket) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			SubGeomarket = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(Элемент.SubGeomarket));
			Если НЕ ЗначениеЗаполнено(SubGeomarket) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Sub geomarket' - " + СокрЛП(Элемент.SubGeomarket) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			Segment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Элемент.Segment));
			Если НЕ ЗначениеЗаполнено(Segment) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Segment' - " + СокрЛП(Элемент.Segment) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			SubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(Элемент.SubSegment));
			Если НЕ ЗначениеЗаполнено(SubSegment) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Sub segment' - " + СокрЛП(Элемент.SubSegment) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			Если СокрЛП(Элемент.InternationalDomestic) = "International" Тогда
				Int_Dom = Перечисления.DomesticInternational.International;
			ИначеЕсли СокрЛП(Элемент.InternationalDomestic) = "Domestic" Тогда
				Int_Dom = Перечисления.DomesticInternational.Domestic;
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Type international domestic' - " + СокрЛП(Элемент.InternationalDomestic) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			Если Элемент.Sum = "" ИЛИ Элемент.Sum = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Sum' - " + СокрЛП(Элемент.Sum) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
				Summa = 0;
			Иначе
				Summa = Число(Элемент.Sum);
			КонецЕсли;
			
			СтрокаТЧ = Объект.Budget_MS.Добавить();
			СтрокаТЧ.Geomarket = Geomarket;
			СтрокаТЧ.SubGeomarket = SubGeomarket;
			СтрокаТЧ.Segment = Segment;
			СтрокаТЧ.SubSegment = SubSegment;
			СтрокаТЧ.InternationalDomestic = Int_Dom;
			СтрокаТЧ.Summa = Summa;
			
		ИначеЕсли Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization ИЛИ Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization Тогда
			СвойстваСтруктуры = "Period,MobilizationProject,AU,ServiceProvider,TypeOfTransport,Summa,TnKm,Weight,City,Region,Geomarket";
			
			Period = Дата(Элемент.Period + " 00:00:00");
			Если НЕ ЗначениеЗаполнено(Period) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Period' - " + СокрЛП(Элемент.Geomarket) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			MobilizationProject = Справочники.КонтрагентыLawson.НайтиПоНаименованию(СокрЛП(Элемент.MobilizationProject));
			Если НЕ ЗначениеЗаполнено(MobilizationProject) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Mobilization project' - " + СокрЛП(Элемент.MobilizationProject) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			AU = Справочники.КостЦентры.НайтиПоКоду(СокрЛП(Элемент.AU));
			Если НЕ ЗначениеЗаполнено(AU) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'AU' - " + СокрЛП(Элемент.AU) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			ServiceProvider = Справочники.ServiceProviders.НайтиПоНаименованию(СокрЛП(Элемент.ServiceProvider));
			Если НЕ ЗначениеЗаполнено(ServiceProvider) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Service provider' - " + СокрЛП(Элемент.ServiceProvider) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			TypeOfTransport = Справочники.Equipments.НайтиПоКоду(СокрЛП(Элемент.TypeOfTransport));
			Если НЕ ЗначениеЗаполнено(TypeOfTransport) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Type of transport' - " + СокрЛП(Элемент.TypeOfTransport) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			City = Справочники.Cities.НайтиПоКоду(СокрЛП(Элемент.City));
			Если НЕ ЗначениеЗаполнено(City) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'City' - " + СокрЛП(Элемент.City) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			Если СокрЛП(Элемент.Region) = "USINSK" Тогда
				Region = Перечисления.Locations.USINSK;
			ИначеЕсли СокрЛП(Элемент.Region) = "KHMAO" Тогда
				Region = Перечисления.Locations.KHMAO;
			ИначеЕсли СокрЛП(Элемент.Region) = "YANAO" Тогда
				Region = Перечисления.Locations.YANAO;
			ИначеЕсли СокрЛП(Элемент.Region) = "RSB" Тогда
				Region = Перечисления.Locations.RSB;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Region) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Region' - " + СокрЛП(Элемент.Region) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			Geomarket = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(Элемент.GeoMarket));
			Если НЕ ЗначениеЗаполнено(Geomarket) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить 'Geomarket' - " + СокрЛП(Элемент.Geomarket) + " в строке файла №" + СокрЛП(Элемент.НомерСтрокиФайла),
				, , , );
			КонецЕсли;
			
			Если Элемент.Summa = "" ИЛИ Элемент.Summa = Неопределено Тогда
				Summa = 0;
			Иначе
				Summa = Число(Элемент.Summa);
			КонецЕсли;
			
			Если Элемент.TnKm = "" ИЛИ Элемент.TnKm = Неопределено Тогда
				TnKm = 0;
			Иначе
				TnKm = Число(Элемент.TnKm);
			КонецЕсли;
			
			Если Элемент.Weight = "" ИЛИ Элемент.Weight = Неопределено Тогда
				Weight = 0;
			Иначе
				Weight = Число(Элемент.Weight);
			КонецЕсли;
			
			СтрокаТЧ = Объект.Mobillization.Добавить();
			СтрокаТЧ.Period = Period;
			СтрокаТЧ.Project = MobilizationProject;
			СтрокаТЧ.ServiceProvider = ServiceProvider;
			СтрокаТЧ.TypeOfTransport = TypeOfTransport;
			СтрокаТЧ.AU = AU;
			СтрокаТЧ.Summa = Summa;
			СтрокаТЧ.TnKm = TnKm;
			СтрокаТЧ.Weight = Weight;
			СтрокаТЧ.City = City;
			СтрокаТЧ.Region = Region;
			СтрокаТЧ.Geomarket = Geomarket;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ШаблонExcelНаСервере()
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.rgsBudgetSums.ПолучитьМакет("ШаблонДляЗагрузкиБюджетов");
	Если Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization ИЛИ Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization Тогда
		Шаблон = Макет.ПолучитьОбласть("ШаблонMobillization");
	ИначеЕсли Объект.BudgetType = Справочники.rgsBudgetType.MS Тогда
		Шаблон = Макет.ПолучитьОбласть("Шаблон");
	КонецЕсли;
	ТабДок.Вывести(Шаблон);
	Имя = ПолучитьИмяВременногоФайла(".xlsx");
	ТабДок.Записать(Имя, ТипФайлаТабличногоДокумента.XLSX);
	Двоичное = Новый ДвоичныеДанные(Имя);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	Попытка
		УдалитьФайлы(Имя);
	Исключение
	КонецПопытки;
	Возврат Адрес
	
КонецФункции

&НаКлиенте
Процедура ШаблонExcel(Команда)
	
	Адрес = ШаблонExcelНаСервере();
	Если Адрес <> Неопределено Тогда
		ИмяФайла = "Budget_sums_template.xlsx";
		ПолучитьФайл(Адрес, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура BudgetTypeПриИзменении(Элемент)
	
	НастройкиОформления();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиОформления()
	
	Элементы.Budgets.Видимость = (Объект.BudgetType = Справочники.rgsBudgetType.TandM);
	Элементы.Budgets_MS.Видимость = (Объект.BudgetType = Справочники.rgsBudgetType.MS);
	Элементы.Mobillization.Видимость = (Объект.BudgetType = Справочники.rgsBudgetType.WinterMobillization) ИЛИ (Объект.BudgetType = Справочники.rgsBudgetType.SummerMobillization);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура MobillizationAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Mobillization.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", ТекСтрока.AU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура MobillizationAUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;

КонецПроцедуры
