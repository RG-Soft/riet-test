
перем ТаблицаItems Экспорт;

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("МассивParcels") Тогда 
		
		ТаблицаParcels = ПолучитьТаблицуДанныхParcels(ДанныеЗаполнения.МассивParcels);
		
		WarehouseFrom = ТаблицаParcels[0].WarehouseFrom;
				
		Для Каждого СтрокаТаб из ТаблицаParcels Цикл 
			НовСтрокаParcels = Parcels.Добавить();
			НовСтрокаParcels.Parcel = СтрокаТаб.Parcel;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Specialist) Тогда
		Specialist = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(ТаблицаParcels);
	
КонецПроцедуры

Функция ПолучитьТаблицуДанныхParcels(МассивParcels)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", МассивParcels);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Parcels.Ссылка КАК Parcel,
		|	Parcels.WarehouseFrom КАК WarehouseFrom,
		|	Parcels.WarehouseTo КАК WarehouseTo,
		|	Parcels.CubicMeters,
		|	Parcels.GrossWeightKG,
		|	Parcels.WarehouseTo.Наименование КАК WarehouseToName,
		|	Parcels.Ссылка
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Ссылка В(&Parcels)";
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления тогда 
		
		Если DomesticOBSentToTMS Тогда
			DomesticOBSentToTMS = Ложь;
			Сообщить("Trip will be marked for deletion only in 1C, nothing will be changed in TMS.");
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();	
	
	// { RGS AGorlenko 19.01.2015 16:15:56 - S-I-0000994 - для корректного заполнения DomesticOB, необходима синхронизация items с БД
	СинхронизироватьСтрокиТаблицыItemsСБазойДанных(Отказ);
	// } RGS AGorlenko 19.01.2015 16:17:24 - S-I-0000994 - для корректного заполнения DomesticOB, необходима синхронизация items с БД
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(ДополнительныеСвойства.ТаблицаParcels);
	
	ПроверитьЗаполнениеLegalEntity();
	
	// { RGS VShamin 05.08.2015 17:04:06 - S-I-0001168
	ПроверитьDomesticOBSentToTMS();
	// } RGS VShamin 05.08.2015 17:04:07 - S-I-0001168
	
	ПроверитьВозможностьИзменения(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеРеквизитов(Отказ);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 19.01.2015 16:15:56 - S-I-0000994 - для корректного заполнения DomesticOB, необходима синхронизация items с БД
	// поэтому вызов перенесен выше
	//СинхронизироватьСтрокиТаблицыItemsСБазойДанных(Отказ);
	// } RGS AGorlenko 19.01.2015 16:17:24 - S-I-0000994 - для корректного заполнения DomesticOB, необходима синхронизация items с БД
	
	// { RGS AGorlenko 05.04.2014 13:07:24 - S-I-0000655
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ТаблицаСтарыxДанныхDomesticOB, ДополнительныеСвойства.ТаблицаСтарыxДанныхFinalDestinations);
	// } RGS AGorlenko 05.04.2014 13:07:25 - S-I-0000655
	
	// { RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	ТЗParсels = AllocateCostsToTrips(Ссылка, BaseCostsSum);
	ДополнительныеСвойства.Вставить("ТЗParсels", AllocateCostsToTrips(Ссылка, BaseCostsSum));
	
	Если НЕ ТЗParсels = Неопределено Тогда
	
		ИтогRate = Окр(ТЗParсels.Итог("Rate"), 2);
		Если Rate <> ИтогRate Тогда
			Rate = ИтогRate;
		КонецЕсли;	
	
	КонецЕсли;

	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
		
	Если ЭтоНовый() Тогда 
		
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		Дата = ТекущаяДата();
		
		Если Не ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда 
			УстановитьНовыйНомер(Формат(Draft, "ДФ=""yyММ""")+"S-");
		КонецЕсли;
		
	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(Comment, СокрЛП(Comment));
			                  	
	Если Parcels.Количество() > 0 Тогда
				
		Parcels.Свернуть("Parcel", "");
		ОбщегоНазначения.ОчиститьТаблицуОтСтрокСПустымиРеквизитами(Parcels, "Parcel");
			
	КонецЕсли;
	
	МассивСтрокFD = FinalDestinations.НайтиСтроки(Новый Структура("ATA", Дата('00010101')));
	Если МассивСтрокFD.Количество() = 0 Тогда
		DaysETAWithoutATA = 0;	
	КонецЕсли;
	
	TotalAccessorialCostsSum = Costs.Итог("Sum");
	
	Если ЗначениеЗаполнено(TotalCostsSum) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
		TotalCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(TotalCostsSum, Currency, Дата);
	КонецЕсли;

	Если ЗначениеЗаполнено(TotalAccessorialCostsSum) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
		TotalAccessorialCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(TotalAccessorialCostsSum, Currency, Дата);
	КонецЕсли;

	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не ЭтоНовый() Тогда 
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			// { RGS AGorlenko 07.03.2014 15:41:06 - S-I-0000620
			|	Trip.ETD КАК ETD,
			|	Trip.ATD КАК ATD,
			// } RGS AGorlenko 07.03.2014 15:41:10 - S-I-0000620
			// { RGS KDS 17.01.2017 - S-I-0002321
			|	Trip.Currency КАК Currency,
			|	Trip.TotalCostsSum КАК TotalCostsSum,
			|	Trip.TotalAccessorialCostsSum КАК TotalAccessorialCostsSum,
			// } RGS KDS 17.01.2017 - S-I-0002321
			|	Trip.Представление КАК Представление,
			|	Trip.DomesticOBSentToTMSDate,
			// { RGS AArsentev 04.04.2018
			|	Trip.Rate,
			// } RGS AArsentev 04.04.2018
			|	Trip.DomesticOBSentToTMS
			|ИЗ
			|	Документ.Trip КАК Trip
			|ГДЕ
			|	Trip.Ссылка = &Ссылка");
			
		// { RGS AGorlenko 07.03.2014 15:43:20 - S-I-0000620
		СтруктураТекстов.Вставить("СтарыеДанныеFinalDestinations",
			"ВЫБРАТЬ
			|	TripFinalDestinations.WarehouseTo,
			|	TripFinalDestinations.LegalEntity,
			|	TripFinalDestinations.Waybill,
			|	TripFinalDestinations.ETA КАК ETA,
			|	TripFinalDestinations.ATA КАК ATA,
			|	TripFinalDestinations.Mileage
			|ИЗ
			|	Документ.Trip.FinalDestinations КАК TripFinalDestinations
			|ГДЕ
			|	TripFinalDestinations.Ссылка = &Ссылка");
		// } RGS AGorlenko 07.03.2014 15:43:30 - S-I-0000620
		
	КонецЕсли;
	
	// { RGS AGorlenko 03.04.2014 17:17:57 - S-I-0000660
	СтруктураТекстов.Вставить("СтарыеДанныеDomesticOB",
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	TripDomesticOB.OBNo КАК OBNo,
		|	TripDomesticOB.WarehouseTo,
		|	TripDomesticOB.Urgency,
		|	TripDomesticOB.Gold,
		|	TripDomesticOB.LegalEntity,
		|	TripDomesticOB.AU,
		|	TripDomesticOB.Activity
		|ИЗ
		|	Документ.Trip.DomesticOB КАК TripDomesticOB
		|ГДЕ
		|	TripDomesticOB.Ссылка = &Ссылка");
	// } RGS AGorlenko 03.04.2014 17:17:58 - S-I-0000660
	
	Если Parcels.Количество() > 0 Тогда
		
		СтруктураПараметров.Вставить("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));			
		СтруктураТекстов.Вставить("РеквизитыParcels",
			"ВЫБРАТЬ
			|	Parcels.WarehouseFrom КАК WarehouseFrom,
			|	Parcels.Проверен КАК Final,
			|	Parcels.Ссылка КАК Ссылка,
			|	Parcels.WarehouseTo КАК WarehouseTo,
			|	ВЫБОР
			|		КОГДА Parcels.GrossWeightKGCorrected = 0
			|			ТОГДА Parcels.GrossWeightKG
			|		ИНАЧЕ Parcels.GrossWeightKGCorrected
			|	КОНЕЦ КАК GrossWeightKG,
			|	ВЫБОР
			|		КОГДА Parcels.CubicMetersCorrected = 0
			|			ТОГДА Parcels.CubicMeters
			|		ИНАЧЕ Parcels.CubicMetersCorrected
			|	КОНЕЦ КАК CubicMeters,
			|	Parcels.Repacked КАК Repacked,
			|	ShipmentsDOCs.Ссылка.ATA КАК ShipmentATA,
			|	Parcels.LocalOnly КАК LocalOnly,
			|	Parcels.Отменен КАК Canceled,
			|	Parcels.DeliveredToWH КАК DeliveredToWH,
			|	Parcels.WarehouseTo.Наименование КАК WarehouseToName
			|ИЗ
			|	Справочник.Parcels КАК Parcels
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ShipmentsDOCs
			|			ПО DOCsParcels.Ссылка = ShipmentsDOCs.УпаковочныйЛист
			|				И (НЕ ShipmentsDOCs.Ссылка.Отменен)
			|		ПО (DOCsParcels.Parcel = Parcels.Ссылка)
			|			И (НЕ DOCsParcels.Ссылка.Отменен)
			|ГДЕ
			|	Parcels.Ссылка В(&Parcels)");
			
		СтруктураТекстов.Вставить("ParcelsВДругихДокументах",
			"ВЫБРАТЬ
			|	TripParcels.Ссылка.Представление КАК Представление,
			|	TripParcels.Parcel
			|ИЗ
			|	Документ.Trip.Parcels КАК TripParcels
			|ГДЕ
			|	TripParcels.Ссылка <> &Ссылка
			|	И TripParcels.Parcel В(&Parcels)
			|	И (НЕ TripParcels.Ссылка.ПометкаУдаления)");
				
	КонецЕсли;
			
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	 		
	ДополнительныеСвойства.Вставить("ТаблицаParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыParcels") Тогда
		ДополнительныеСвойства.ТаблицаParcels = СтруктураРезультатов.РеквизитыParcels.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаParcelsВДругихДокументах", Неопределено);
	Если СтруктураРезультатов.Свойство("ParcelsВДругихДокументах") Тогда
		ДополнительныеСвойства.ВыборкаParcelsВДругихДокументах = СтруктураРезультатов.ParcelsВДругихДокументах.Выбрать();
	КонецЕсли;
	
	// { RGS AGorlenko 07.03.2014 15:47:04 - S-I-0000620
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхFinalDestinations", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеFinalDestinations") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхFinalDestinations = СтруктураРезультатов.СтарыеДанныеFinalDestinations.Выгрузить();
	КонецЕсли;
	// } RGS AGorlenko 07.03.2014 15:47:09 - S-I-0000620
	
	// { RGS AGorlenko 03.04.2014 17:14:21 - S-I-0000660
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхDomesticOB", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеDomesticOB") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхDomesticOB = СтруктураРезультатов.СтарыеДанныеDomesticOB.Выгрузить();
	КонецЕсли;
	// } RGS AGorlenko 03.04.2014 17:16:35 - S-I-0000660
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ТаблицаParcels)
	
	Если Parcels.Количество() > 0 Тогда 
		
		GrossWeightKG = ТаблицаParcels.Итог("GrossWeightKG");
		CubicMeters = ТаблицаParcels.Итог("CubicMeters");
		
		ТаблицаWarehouseTo = ТаблицаParcels.Скопировать(,"WarehouseTo");
		ТаблицаWarehouseTo.Свернуть("WarehouseTo");
		МассивWarehouseTo = ТаблицаWarehouseTo.ВыгрузитьКолонку("WarehouseTo");
		
	Иначе
		
		МассивWarehouseTo = Новый Массив;
		
	КонецЕсли;
	
	// FINAL DESTINATIONS
	// { RGS AGorlenko 18.06.2014 12:12:24 - S-I-0000782
	ТЗ_FinalDestinationsДоИзменения = FinalDestinations.Выгрузить(, "WarehouseTo, LegalEntity");
	// } RGS AGorlenko 18.06.2014 12:12:26 - S-I-0000782
	// { RGS AGorlenko 22.04.2014 18:20:56 - S-I-0000686
	//LocalDistributionКлиентСервер.ОбновитьTripFinalDestinations(FinalDestinations, МассивWarehouseTo);
	МассивParcels = ?(ТаблицаParcels = Неопределено, Новый Массив, ТаблицаParcels.ВыгрузитьКолонку("Ссылка"));
	LocalDistributionСервер.ОбновитьTripFinalDestinations(FinalDestinations, МассивParcels, ?(ЗначениеЗаполнено(Final), Final, Draft));
	
	// ++ КДС 24.01.2017 
	// дозаполним mileage, если пусто
	Для каждого ТекСтрокаFD Из FinalDestinations Цикл
		Если Не ЗначениеЗаполнено(ТекСтрокаFD.Mileage) Тогда
			ТекСтрокаFD.Mileage = ргМодульКартографии.ВычислитьРасстояние(WarehouseFrom, ТекСтрокаFD.WarehouseTo);	
		КонецЕсли;
	КонецЦикла;		
	// -- КДС 24.01.2017
	
	// } RGS AGorlenko 22.04.2014 18:21:04 - S-I-0000686
	// { RGS AGorlenko 18.06.2014 12:12:24 - S-I-0000782
	ТЗ_FinalDestinationsПослеИзменения = FinalDestinations.Выгрузить(, "WarehouseTo, LegalEntity");     
	ДетализироватьОписаниеОшибокLE(ТЗ_FinalDestinationsДоИзменения, ТЗ_FinalDestinationsПослеИзменения, МассивParcels);
	// } RGS AGorlenko 18.06.2014 12:12:26 - S-I-0000782
	Если ТаблицаParcels <> Неопределено Тогда 
		МассивWarehouseToName = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаParcels, "WarehouseToName");
		WarehouseToList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивWarehouseToName, ", ");
	КонецЕсли;

	Если ИзменилисьТолькоНесущественныеРеквизиты() Тогда
		ДополнительныеСвойства.Вставить("ИзменилисьТолькоНесущественныеРеквизиты");  //добавила Петроченко НН для Costs
	КонецЕсли;

	// DOMESTIC OB
	// { RGS AGorlenko 18.12.2014 17:45:17 - обновляем domestic ob, только если не трип уже отравлен в TMS и не при существенном изменении
	//LocalDistributionСервер.ОбновитьTripDomesticOB(ЭтотОбъект);
	Если НЕ (DomesticOBSentToTMS И Ссылка.DomesticOBSentToTMS И ДополнительныеСвойства.Свойство("ИзменилисьТолькоНесущественныеРеквизиты")) Тогда		
		LocalDistributionСервер.ОбновитьTripDomesticOB(ЭтотОбъект);
	КонецЕсли;
	// } RGS AGorlenko 18.12.2014 17:46:17 - обновляем domestic ob, только если не трип уже отравлен в TMS и не при существенном изменении
	
	// { RGS AGorlenko 03.04.2014 18:31:31 - S-I-0000660
	LocalDistributionСервер.АктуализироватьОчередьTripDomesticOB(ЭтотОбъект);
	// } RGS AGorlenko 03.04.2014 18:31:32 - S-I-0000660
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеLegalEntity()

	Если FinalDestinations.Найти(Справочники.LegalEntities.ПустаяСсылка(), "LegalEntity") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокParcels", Parcels.ВыгрузитьКолонку("Parcel"));
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Final), Final, Draft));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.СтрокаИнвойса.Наименование КАК Item,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Код КАК AU,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК SoldToСсылка,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК КостЦентрСсылка,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining КАК Leg7LegalEntityDetermining,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.LegalEntityForLeg7 КАК LegalEntityForLeg7
	|ПОМЕСТИТЬ ВТ_ParcelsДетали
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.Ссылка В(&СписокParcels)
	|	И ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining <> ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	SoldToСсылка,
	|	КостЦентрСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ParcelsДетали.Item,
	|	ВТ_ParcelsДетали.ParentCompany,
	|	ВТ_ParcelsДетали.AU
	|ИЗ
	|	ВТ_ParcelsДетали КАК ВТ_ParcelsДетали
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ParcelsДетали.SoldToСсылка,
	|						ВТ_ParcelsДетали.КостЦентрСсылка
	|					ИЗ
	|						ВТ_ParcelsДетали КАК ВТ_ParcelsДетали)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ВТ_ParcelsДетали.SoldToСсылка = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ВТ_ParcelsДетали.КостЦентрСсылка = AUsAndLegalEntitiesСрезПоследних.AU
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ВТ_ParcelsДетали.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|					ТОГДА ВТ_ParcelsДетали.LegalEntityForLeg7
	|				ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|			КОНЕЦ ЕСТЬ NULL 
	|			ИЛИ ВЫБОР
	|				КОГДА ВТ_ParcelsДетали.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|					ТОГДА ВТ_ParcelsДетали.LegalEntityForLeg7
	|				ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.LegalEntities.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ТекстСообщения = "";
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + "For Item '" + СокрЛП(Выборка.Item) + "' LE is empty! Parent company = '" 
			+ СокрЛП(Выборка.ParentCompany) + "', AU = '" + СокрЛП(Выборка.AU) + "'." + Символы.ПС;
	КонецЦикла;

	ДополнительныеСвойства.Вставить("РезультатПроверкиLegalEntity", ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// { RGS VShamin 05.08.2015 17:04:54 - S-I-0001168
Процедура ПроверитьDomesticOBSentToTMS()

	Если DomesticOBSentToTMS И Parcels.Количество() = 0 Тогда
		
		ТекстСообщения = "";
		ТекстСообщения = ТекстСообщения + Символы.ПС + ЭтотОбъект 
		+ ": " + Символы.ПС + "The quantity of parcels on this Trip " + СокрЛП(Номер) 
		+ " is equal to zero, but it can't be marked on removal as it is already sent to TMS" + Символы.ПС;
			
		ДополнительныеСвойства.Вставить("РезультатПроверкиDomesticOBSentToTMS", ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры // } RGS VShamin 05.08.2015 17:04:54 - S-I-0001168

Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	   		
	Если ВыборкаСтарыхРеквизитовШапки.DomesticOBSentToTMS = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// { RGS AGorlenko 21.03.2014 18:39:35 - S-I-0000644
	Если ДополнительныеСвойства.Свойство("ИзменилисьТолькоНесущественныеРеквизиты") Тогда  //отредактировала Петроченко НН для Costs
		Возврат;
	КонецЕсли;
	// } RGS AGorlenko 21.03.2014 18:39:37 - S-I-0000644

	Если DomesticOBSentToTMS
		И ВыборкаСтарыхРеквизитовШапки.DomesticOBSentToTMS Тогда
		
		ТекстОшибки = "You can not modify the Trip, because it was already sent to TMS.
		|You can cancel the 'Domestic OB sent to TMS' field, modify the Trip and send to TMS again!";
		
		ТекстОшибки = ТекстОшибки + "
			|Description of changes: 
			|" + ДополнительныеСвойства.ОписаниеИзменений;
			
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		// { RGS AGorlenko 04.11.2014 16:20:05 - S-I-0000925
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		// } RGS AGorlenko 04.11.2014 16:20:07 - S-I-0000925
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, , , Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры 

// { RGS AGorlenko 21.03.2014 18:39:35 - S-I-0000644
Функция ИзменилисьТолькоНесущественныеРеквизиты()
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ЭтотОбъект);
	
	Результат = Истина;
	ОписаниеИзменений = "";
	
	НесущественныеДанныеТЧ = Новый Соответствие;
	НесущественныеДанныеТЧ.Вставить("FinalDestinations", Новый Массив);
	НесущественныеДанныеТЧ["FinalDestinations"].Добавить("Waybill");
	НесущественныеДанныеТЧ["FinalDestinations"].Добавить("ATA");
	НесущественныеДанныеТЧ["FinalDestinations"].Добавить("Mileage");
	
	НесущественныеДанныеТЧ.Вставить("Costs", Новый Массив);
	НесущественныеДанныеТЧ["Costs"].Добавить("CostType");
	НесущественныеДанныеТЧ["Costs"].Добавить("Description");
	НесущественныеДанныеТЧ["Costs"].Добавить("Sum");
	            	
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеДанныеТЧ") Тогда
		Для каждого ТекНесущественныеДанныеТЧ Из ДополнительныеСвойства["ДополнительныеНесущественныеДанныеТЧ"] Цикл
			Если НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ] = Неопределено Тогда
				НесущественныеДанныеТЧ.Вставить(ТекНесущественныеДанныеТЧ.Ключ, ТекНесущественныеДанныеТЧ.Значение);
			Иначе
				Для каждого ТекКолонка Из ТекНесущественныеДанныеТЧ.Значение Цикл
					НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ].Добавить(ТекКолонка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//проверяем неизменность всех ТЧ
	СписокТЧ = Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			НесущественныеКолонки = НесущественныеДанныеТЧ[ТекТЧ.Имя];
			ИзмененныеКолонки = ИзмененныеДанные[ТекТЧ.Имя];
			ИзмененияНесущественны = Истина;
			Если НесущественныеКолонки = Неопределено Тогда
				ИзмененияНесущественны = Ложь;
			Иначе
				Для каждого ИзмененнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) = Неопределено Тогда
						ИзмененияНесущественны = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ИзмененияНесущественны Тогда
				Продолжить;
			Иначе
				ОписаниеИзменений = ОписаниеИзменений + "Tabular section '" + ТекТЧ.Имя + "':" + Символы.ПС;
				Для каждого ИзменнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки <> Неопределено Тогда
						Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "column '" + ИзменнаяКолонка + "'" + Символы.ПС;
				КонецЦикла;
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//проверяем изменились ли только несущественные реквизиты
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	МассивНесущественныхРеквизитов = Новый Массив;
	МассивНесущественныхРеквизитов.Добавить("Comment");
	МассивНесущественныхРеквизитов.Добавить("ModifiedBy");
	МассивНесущественныхРеквизитов.Добавить("ModificationDate");
	МассивНесущественныхРеквизитов.Добавить("DaysETAWithoutATA");
	
	МассивНесущественныхРеквизитов.Добавить("Currency");
	МассивНесущественныхРеквизитов.Добавить("TotalCostsSum");
	МассивНесущественныхРеквизитов.Добавить("TotalAccessorialCostsSum");
	МассивНесущественныхРеквизитов.Добавить("BaseCostsSum");
	МассивНесущественныхРеквизитов.Добавить("ZeroBaseCostsSum");
	МассивНесущественныхРеквизитов.Добавить("BaseCostsSumSLBUSD");
	МассивНесущественныхРеквизитов.Добавить("TotalCostsSumUSD");
	МассивНесущественныхРеквизитов.Добавить("TotalAccessorialCostsSumUSD");
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеРеквизиты") Тогда
		Для каждого ТекНесущественныйРеквизит Из ДополнительныеСвойства["ДополнительныеНесущественныеРеквизиты"] Цикл
			Если МассивНесущественныхРеквизитов.Найти(ТекНесущественныйРеквизит) = Неопределено Тогда
				МассивНесущественныхРеквизитов.Добавить(ТекНесущественныйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НесущественныйРеквизит Из МассивНесущественныхРеквизитов Цикл
		Индекс = ИзмененныеРеквизиты.Найти(НесущественныйРеквизит);
		Если Индекс <> Неопределено Тогда
			ИзмененныеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		Результат = Ложь;
		ОписаниеИзменений = ОписаниеИзменений + "Attributes:" + Символы.ПС;
		Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
			ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "'" + ИзмененныйРеквизит + "'" + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеИзменений) Тогда
		ДополнительныеСвойства.Вставить("ОписаниеИзменений", ОписаниеИзменений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// } RGS AGorlenko 21.03.2014 18:39:37 - S-I-0000644

//////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеРеквизитов(Отказ)
	
	ПроверитьЗаполнениеРеквизитовШапки(Отказ);
	
	ПроверитьЗаполнениеТЧParcels(Отказ, ДополнительныеСвойства.ТаблицаParcels, ДополнительныеСвойства.ВыборкаParcelsВДругихДокументах);
	
	ПроверитьЗаполнениеТЧFinalDestinations(Отказ);
	
	ПроверитьЗаполнениеТЧDomesticOB(Отказ);
															
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Warehouse From
	Если ЗначениеЗаполнено(WarehouseFrom) Тогда
		 		
		Если WarehouseFrom = Справочники.Warehouses.Other Тогда
			ТекстОшибки = "You can not use 'Other' warehouse from!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "WarehouseFrom", , Отказ);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Warehouse from is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "WarehouseFrom", , Отказ);
	КонецЕсли;
	
	// Type of transport
	Если НЕ ЗначениеЗаполнено(TypeOfTransport) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Type of transport / Тип транспорта'!";
		Иначе 	
			ТекстОшибки = "'Type of transport' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "TypeOfTransport", , Отказ);
			
	иначе
			
		Если TypeOfTransport <> Перечисления.TypesOfTransport.Own 
			И ServiceProvider = Справочники.ServiceProviders.SLB Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Поставщиком услуг не может быть 'Шлюмберже' для типа транспортного средства'" + СокрЛП(TypeOfTransport) + "'!";
			Иначе 	
				ТекстОшибки = "Service provider can not be 'SLB' for type of transport'" + СокрЛП(TypeOfTransport) + "'!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "ServiceProvider", , Отказ);
			
		КонецЕсли;
		
		Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut 
			И Transport <> Справочники.Transport.CallOut Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Транспортным средством для типа '" + СокрЛП(TypeOfTransport) + "' может быть только 'Транспортное средство по заявке'!";
			Иначе 	
				ТекстОшибки = "Transport for type '" + СокрЛП(TypeOfTransport) + "' can be only 'Call-out'!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "TypesOfTransport", , Отказ);
			
		КонецЕсли;	
			
	КонецЕсли;

	// Transport
	Если Не ЗначениеЗаполнено(Transport) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Transport / Транспортное средство'!";
		Иначе 	
			ТекстОшибки = "'Transport' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Transport", , Отказ);
			
	иначе
		
		Если Transport <> Справочники.Transport.CallOut Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	TS.ServiceProvider,
			               |	TS.Equipment,
			               |	TS.TypeOfTransport,
			               |	TransportAvailabilityStatusСрезПоследних.Status
			               |ИЗ
			               |	Справочник.Transport КАК TS
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TransportAvailabilityStatus.СрезПоследних(
			               |				&Дата,
			               |				Transport = &Transport
			               |					И Trip <> &Trip) КАК TransportAvailabilityStatusСрезПоследних
			               |		ПО (TransportAvailabilityStatusСрезПоследних.Transport = TransportAvailabilityStatusСрезПоследних.Transport.Ссылка)
			               |ГДЕ
			               |	TS.Ссылка = &Transport";
			
			Запрос.УстановитьПараметр("Transport", Transport);
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Trip", Ссылка);
			
			Результат = Запрос.Выполнить();
			ВыборкаTransport = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаTransport.Следующий() Тогда 
				
				ДополнительныеСвойства.Вставить("CurrentStatus", ВыборкаTransport.Status);
				
				//временно закомментировано по согласованию с Татьяной Маковской
				//Если ЗначениеЗаполнено(ВыборкаTransport.Status) 
				//	И ВыборкаTransport.Status <> Перечисления.TransportAvailabilityStatuses.Available Тогда 
				//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				//		ТекстОшибки = "Транспортное средство недоступно!";
				//	Иначе 	
				//		ТекстОшибки = "Transport is not available!";
				//	КонецЕсли;
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				//	ЭтотОбъект, "Transport", , Отказ);	
				//КонецЕсли;

				Если ЗначениеЗаполнено(ServiceProvider) 
					И ВыборкаTransport.ServiceProvider <> ServiceProvider Тогда 
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Поставщик услуг для транспортного средства отличается от поставщика услуг в поставке!";
					Иначе 	
						ТекстОшибки = "Service provider in transport differs from Service provider in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "ServiceProvider", , Отказ);	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Equipment) 
					И ВыборкаTransport.Equipment <> Equipment Тогда 
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Тип транспортного средства отличается от типа в поставке!";
					Иначе 	
						ТекстОшибки = "Equipment in transport differs from Equipment in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "Equipment", , Отказ);	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(TypeOfTransport) 
					И ВыборкаTransport.TypeOfTransport <> TypeOfTransport Тогда 
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Тип транспорта отличается от типа в поставке!";
					Иначе 	
						ТекстОшибки = "Type of transport in transport differs from type of transport in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "TypeOfTransport", , Отказ);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;

	// Service provider
	Если Не ЗначениеЗаполнено(ServiceProvider) Тогда
		
		ТекстОшибки = "Service provider is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "ServiceProvider", , Отказ);
			
	КонецЕсли;

	// Draft
	Если ЗначениеЗаполнено(Draft) Тогда 
		
		Если ЗначениеЗаполнено(ETD) Тогда 
			
			Если ETD < Draft Тогда
				ТекстОшибки = "Draft can not be later than ETD!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ETD", , Отказ);
			КонецЕсли;
			
		иначе
			ТекстОшибки = "ETD is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ETD", , Отказ);
		КонецЕсли;	
							
	иначе
		ТекстОшибки = "Draft is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "ETD", , Отказ);
	КонецЕсли;
	
	// Final
	Если ЗначениеЗаполнено(Final) Тогда 
		
		Если ЗначениеЗаполнено(Draft) И Draft > Final Тогда
			ТекстОшибки = "Draft can not be later than Final!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Draft", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ATD) Тогда 
			
			Если Final > ATD Тогда
				ТекстОшибки = "Final can not be later than ATD!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ATD", , Отказ);
			КонецЕсли;
			
		иначе
			ТекстОшибки = "ATD is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ATD", , Отказ);
		КонецЕсли;	
		
		//в Final Trip должен быть определен сервис провайдер
		Если ServiceProvider = Справочники.ServiceProviders.RFQ Тогда 
			ТекстОшибки = "Service provider can not be 'RFQ' in Final Trip!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ServiceProvider", , Отказ);		
		КонецЕсли;
		
		// TODO RGS AGorlenko 13.05.2015: переделать на предопределенный элемент
		Если Equipment = Справочники.Equipments.НайтиПоКоду("UNKNOWN_EQUIPMENT") Тогда 
			ТекстОшибки = "Equipment can not be 'UNKNOWN_EQUIPMENT' in Final Trip!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Equipment", , Отказ);
		КонецЕсли;
		
	иначе
	    	
		Если DomesticOBSentToTMS Тогда
			ТекстОшибки = "Non-final Trip can not be sent to TMS!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Final", , Отказ);	
		КонецЕсли;
	
	КонецЕсли;
		
	// Equipment
	Если ЗначениеЗаполнено(Equipment) Тогда
		
		Если GrossWeightKG > РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(Equipment, "EffectiveWeight") Тогда
			ТекстОшибки = "Total Gross weight of pracels exceeds Effective weight of Equipment!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Equipment", , Отказ);
		КонецЕсли;
		
	Иначе 
		ТекстОшибки = "Equipment is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Equipment", , Отказ);
	КонецЕсли;
	
	// Specialist
	Если НЕ ЗначениеЗаполнено(Specialist) И НЕ ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Specialist' is empty!",
			ЭтотОбъект, "Specialist", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТЧParcels(Отказ, ТаблицаParcels, ВыборкаParcelsВДругихДокументах)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	Если Parcels.Количество() Тогда 
		
		Пока ВыборкаParcelsВДругихДокументах.Следующий() Цикл  
		
			СтрокаТЧ = Parcels.Найти(ВыборкаParcelsВДругихДокументах.Parcel, "Parcel");	
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: Parcel '" + СокрЛП(ВыборкаParcelsВДругихДокументах.Parcel) + "' is already in '" + ВыборкаParcelsВДругихДокументах.Представление + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
			
		КонецЦикла;
			
	КонецЕсли;	
	
	Если Parcels.Количество() = 0 Тогда
		ТекстОшибки = "Add at least one parcel!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Parcels", , Отказ);
		Возврат;
	КонецЕсли; 
		
	Для Каждого СтрокаТаблицы Из ТаблицаParcels Цикл
		    						
		Если Не СтрокаТаблицы.Final Тогда
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' is not Final!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.Repacked Тогда	
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' was repacked!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
		КонецЕсли; 
		
		Если СтрокаТаблицы.Canceled Тогда	
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' was canceled!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.WarehouseTo) Тогда	
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: in Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' Warehouse To is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.WarehouseFrom) Тогда
			
			Если СтрокаТаблицы.WarehouseFrom <> WarehouseFrom Тогда
				
				СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: Warehouse from '" + СокрЛП(СтрокаТаблицы.WarehouseFrom) + "' in Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' differs from Warehouse from '" + СокрЛП(WarehouseFrom) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				// { RGS AGorlenko 04.11.2014 16:23:45 - S-I-0000925
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS AGorlenko 04.11.2014 16:23:55 - S-I-0000925
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
					
	        КонецЕсли;

		Иначе
			
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Parcels: in Parcel '" + СокрЛП(СтрокаТЧ.Parcel) + "' Warehouse from is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Draft) И СтрокаТаблицы.DeliveredToWH > Draft Тогда
					
			СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " Delivered to WH of Parcel " + СокрЛП(СтрокаТЧ.Parcel) + " " + Формат(СтрокаТаблицы.DeliveredToWH, "ДЛФ=D") + " is later than Draft " + Формат(Draft, "ДЛФ=D") + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
					
		КонецЕсли;
					
		Если НЕ СтрокаТаблицы.LocalOnly Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ShipmentATA) Тогда
				
				Если ЗначениеЗаполнено(Draft) И СтрокаТаблицы.ShipmentATA > Draft Тогда
					
					СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
					ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " Shipment ATA of Parcel " + СокрЛП(СтрокаТЧ.Parcel) + " " + Формат(СтрокаТаблицы.ShipmentATA, "ДЛФ=D") + " is later than Draft " + Формат(Draft, "ДЛФ=D") + "!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
					
				КонецЕсли; 
								 							
			Иначе
				
				СтрокаТЧ = Parcels.Найти(СтрокаТаблицы.Ссылка, "Parcel");
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " Shipment ATA of Parcel " + СокрЛП(СтрокаТЧ.Parcel) + " is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].Parcel", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТЧFinalDestinations(Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
			
	Для Каждого СтрокаТЧ из FinalDestinations Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТЧ.WarehouseTo) Тогда
			
			Если СтрокаТЧ.WarehouseTo = Справочники.Warehouses.Other Тогда
				
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Final destinations: you can not use ""Other"" warehouse to!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].WarehouseTo", , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(WarehouseFrom)
				И WarehouseFrom = СтрокаТЧ.WarehouseTo Тогда
				
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Final destinations: Warehouse to can not coincide with the Warehouse from!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].WarehouseTo", , Отказ);
				
			КонецЕсли; 
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаТЧ.ETA) Тогда 
				
			Если СтрокаТЧ.ETA < ETD Тогда
				
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " (WarehouseTo = " + СокрЛП(СтрокаТЧ.WarehouseTo.Код) + ", LegalEntity = " + СокрЛП(СтрокаТЧ.LegalEntity.Наименование) + ") of Final destinations: ETA " + Формат(СтрокаТЧ.ETA, "ДЛФ=D") + " is erlier than ""ETD " + Формат(ETD, "ДЛФ=D") + """!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].ETA", , Отказ);
				
			КонецЕсли;
			
			Если СтрокаТЧ.ETA < ATD Тогда
				
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " (WarehouseTo = " + СокрЛП(СтрокаТЧ.WarehouseTo.Код) + ", LegalEntity = " + СокрЛП(СтрокаТЧ.LegalEntity.Наименование) + ") of Final destinations: ETA " + Формат(СтрокаТЧ.ETA, "ДЛФ=D") + " is erlier than ""ATD " + Формат(ATD, "ДЛФ=D") + """!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].ETA", , Отказ);
				
			КонецЕсли;

		Иначе
			
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " (WarehouseTo = " + СокрЛП(СтрокаТЧ.WarehouseTo.Код) + ", LegalEntity = " + СокрЛП(СтрокаТЧ.LegalEntity.Наименование) + ") of Final destinations: ETA is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].ETA", , Отказ);
				
		КонецЕсли;	
		 		
	КонецЦикла;
	
	// { RGS AGorlenko 24.04.2014 16:19:38 - S-I-0000686
	СтруктураПоиска = Новый Структура("WarehouseTo");
	МассивWarehouseTo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(FinalDestinations, "WarehouseTo");
	СкладыСНесовпадениями = Новый Массив;
	Для каждого ТекWarehouseTo Из МассивWarehouseTo Цикл
		СтруктураПоиска.WarehouseTo = ТекWarehouseTo;
		НайденныеСтроки = FinalDestinations.НайтиСтроки(СтруктураПоиска);
		ПервыйETA = НайденныеСтроки[0].ETA;
		ПервыйATA = НайденныеСтроки[0].ATA;
		Для ТекИндекс = 1 По НайденныеСтроки.Количество() - 1 Цикл
			ТекETA = НайденныеСтроки[ТекИндекс].ETA;
			ТекATA = НайденныеСтроки[ТекИндекс].ATA;
			Если ТекETA <> ПервыйETA ИЛИ ТекATA <> ПервыйATA Тогда
				СкладыСНесовпадениями.Добавить(ТекWarehouseTo);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СкладыСНесовпадениями.Количество() > 0 Тогда
		Для каждого ТекСклад Из СкладыСНесовпадениями Цикл
			ТекстОшибки = "The ETA and ATA datas are different for various legal entities for warehouse " + ТекСклад + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, , , Отказ);
		КонецЦикла;
	КонецЕсли;
	// } RGS AGorlenko 24.04.2014 16:19:39 - S-I-0000686
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТЧDomesticOB(Отказ)
	
	Если ПометкаУдаления 
		ИЛИ Не DomesticOBSentToTMS Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаТЧ из DomesticOB Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.LegalEntity) Тогда
			
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Domestic OB Legal entity for AU '" + СокрЛП(СтрокаТЧ.AU) + "' is empty!
				|Please contact riet-support-ld@slb.com.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DomesticOB[" + (СтрокаТЧ.НомерСтроки-1) + "].LegalEntity", , Отказ);
			
		КонецЕсли;
						 		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТЧFinalDestinationsПриПроведении(Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаТЧ из FinalDestinations Цикл 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Mileage) Тогда
		
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of Final destinations: Mileage is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "FinalDestinations[" + (СтрокаТЧ.НомерСтроки-1) + "].Mileage", , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

Процедура СинхронизироватьСтрокиТаблицыItemsСБазойДанных(Отказ)
	             		
	Если ТаблицаItems = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Items
	//++ КДС 18.12.2017 Проверка AU обязательна для всех items
	//Если DomesticOBSentToTMS Тогда
	//-- КДС 18.12.2017
		
		Сч = 0;
		Для Каждого СтрItems из ТаблицаItems Цикл 
			
			Если Не ЗначениеЗаполнено(СтрItems.КостЦентр) Тогда
				ТекстОшибки = "For Item " + СокрЛП(СтрItems.Ссылка) + ": 'AU' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					, "ТаблицаItems[" + Сч + "].КостЦентр",, Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрItems.Активити) Тогда
				ТекстОшибки = "For Item " + СокрЛП(СтрItems.Ссылка) + ": 'Activity' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					, "ТаблицаItems[" + Сч + "].Активити",, Отказ);
			КонецЕсли;
               						
			Сч = Сч + 1;
			
		КонецЦикла;
	
	//КонецЕсли;
	
	Если ТаблицаItems.Количество() > 0 Тогда
	
		ТаблицаItemsToTMS = LocalDistributionСервер.ПолучитьДанныеItemsToTMS(Parcels.ВыгрузитьКолонку("Parcel"), Final);
		ТаблицаСтрокИнвойсаБазы = ТаблицаItemsToTMS.Скопировать( ,"Ссылка,КостЦентр,Активити,НомерЗаявкиНаЗакупку,СтрокаЗаявкиНаЗакупку");
		
		// Синхронизируем таблицу строк инвойсов со строками в базе данных
		СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаСтрокИнвойсаБазы, ТаблицаItems, Отказ);
				
	КонецЕсли;
	    		
КонецПроцедуры
   
Процедура СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаБазы, ТаблицаДокумента, Отказ)
	
	// синхронизирует таблицу документа с базой данных
	//
	// Параметры:
	//  ТаблицаБазы  		- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
	//  ТаблицаДокумента	- ТаблицаЗначений. Обязательно присутствие реквизита Ссылка.
								 	
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0));
	
	// получим и подготовим рабочую ТЗ
	ТаблицаРабочая = ТаблицаБазы.Скопировать();
			
	// объединим две таблицы
	Для каждого Стр из ТаблицаДокумента Цикл
		НовСтр = ТаблицаРабочая.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	// подготовим имена колонок для свертки таблицы
	ИменаКолонокСвертки = "";
	Для каждого Колонка ИЗ ТаблицаБазы.Колонки Цикл
		ИменаКолонокСвертки = ИменаКолонокСвертки + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонокСвертки = Сред(ИменаКолонокСвертки, 2);
	
	// свернем вновь образованную таблицу
	ТаблицаРабочая.Индексы.Добавить("Ссылка");
	
	// { RGS AGorlenko 13.11.2014 15:45:58 - оптимизация алгоритма: устанавливаем только изменившиеся свойства
	КолонкиТаблицаРабочая = ТаблицаРабочая.Колонки;
	// } RGS AGorlenko 13.11.2014 15:46:29 - оптимизация алгоритма: устанавливаем только изменившиеся свойства
	
	// обработаем полученную таблицу
	Для Каждого Стр Из ТаблицаРабочая Цикл
		
		// строка изменилась, обработаем это
		Объект = Стр.Ссылка.ПолучитьОбъект();
		// { RGS AGorlenko 13.11.2014 15:45:58 - оптимизация алгоритма: устанавливаем только изменившиеся свойства
		//ЗаполнитьЗначенияСвойств(Объект, Стр);
		Для каждого ТекКолонка Из КолонкиТаблицаРабочая Цикл
			РГСофтКлиентСервер.УстановитьЗначение(Объект[ТекКолонка.Имя], Стр[ТекКолонка.Имя]);
		КонецЦикла;
		Если НЕ Объект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		// } RGS AGorlenko 13.11.2014 15:46:29 - оптимизация алгоритма: устанавливаем только изменившиеся свойства
		
		// чтобы избежать проверки при обновлении данных парселя
		Если DomesticOBSentToTMS Тогда 
			Объект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
		КонецЕсли;
	
		ОбщегоНазначения.ПопыткаЗаписиОбъекта(Объект, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS AGorlenko 07.03.2014 15:41:26 - S-I-0000620
Процедура ЗарегистрироватьДляSubscriptions(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Определим значения старых реквизитов	
	СтарыйETD = '00010101';
	СтарыйATD = '00010101';
	
	Если ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		Если НЕ ВыборкаСтарыхРеквизитовШапки.Следующий() Тогда
			ВыборкаСтарыхРеквизитовШапки.Сбросить();
			ВыборкаСтарыхРеквизитовШапки.Следующий();
		КонецЕсли;
		СтарыйETD = ВыборкаСтарыхРеквизитовШапки.ETD;
		СтарыйATD = ВыборкаСтарыхРеквизитовШапки.ATD;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.ТаблицаСтарыxДанныхFinalDestinations <> Неопределено Тогда
		
		ТаблицаСтарыxДанныхFinalDestinations = ДополнительныеСвойства.ТаблицаСтарыxДанныхFinalDestinations;
		
	Иначе
		
		ТаблицаСтарыxДанныхFinalDestinations = FinalDestinations.ВыгрузитьКолонки();
		
	КонецЕсли;
	
	// Примем решение о регистрации документа в регистре
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Warehouse", Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаСтатусов.Колонки.Добавить("Stage", Новый ОписаниеТипов("ПеречислениеСсылка.LocalDistributionStages"));
	ТаблицаСтатусов.Колонки.Добавить("StageDate", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоиска = Новый Структура("WarehouseTo");
	Для каждого СтрокаТЧ Из FinalDestinations Цикл
		СтрокаСтатуса = ТаблицаСтатусов.Добавить();
		СтрокаСтатуса.Warehouse = СтрокаТЧ.WarehouseTo;
		СтруктураПоиска.WarehouseTo = СтрокаТЧ.WarehouseTo;
		НайденныеСтроки = ТаблицаСтарыxДанныхFinalDestinations.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ATA) Тогда
				СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ATA;
				СтрокаСтатуса.StageDate = СтрокаТЧ.ATA;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ETA) Тогда
				СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ETA;
				СтрокаСтатуса.StageDate = СтрокаТЧ.ETA;
			ИначеЕсли ЗначениеЗаполнено(ATD) Тогда
				Если ATD <> СтарыйATD Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ATD;
					СтрокаСтатуса.StageDate = ATD;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
				Если ETD <> СтарыйETD ИЛИ ATD <> СтарыйATD Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ETD;
					СтрокаСтатуса.StageDate = ETD;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяСтрока = НайденныеСтроки[0];
			Если ЗначениеЗаполнено(СтрокаТЧ.ATA) Тогда
				Если СтрокаТЧ.ATA <> НайденнаяСтрока.ATA Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ATA;
					СтрокаСтатуса.StageDate = СтрокаТЧ.ATA;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ETA) Тогда
				Если СтрокаТЧ.ETA <> НайденнаяСтрока.ETA
					ИЛИ СтрокаТЧ.ATA <> НайденнаяСтрока.ATA Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ETA;
					СтрокаСтатуса.StageDate = СтрокаТЧ.ETA;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ATD) Тогда
				Если ATD <> СтарыйATD 
					ИЛИ СтрокаТЧ.ETA <> НайденнаяСтрока.ETA
					ИЛИ СтрокаТЧ.ATA <> НайденнаяСтрока.ATA Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ATD;
					СтрокаСтатуса.StageDate = ATD;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
				Если ETD <> СтарыйETD
					ИЛИ ATD <> СтарыйATD
					ИЛИ СтрокаТЧ.ETA <> НайденнаяСтрока.ETA
					ИЛИ СтрокаТЧ.ATA <> НайденнаяСтрока.ATA Тогда
					СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ETD;
					СтрокаСтатуса.StageDate = ETD;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаСтатуса.Stage.Пустая() Тогда
			ТаблицаСтатусов.Удалить(СтрокаСтатуса);
		КонецЕсли;
	КонецЦикла;
	
	Если FinalDestinations.Количество() = 0 Тогда
		СтрокаСтатуса = ТаблицаСтатусов.Добавить();
		Если ЗначениеЗаполнено(ATD) Тогда
			Если ATD <> СтарыйATD Тогда
				СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ATD;
				СтрокаСтатуса.StageDate = ATD;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
			Если ETD <> СтарыйETD
				ИЛИ ATD <> СтарыйATD Тогда
				СтрокаСтатуса.Stage = Перечисления.LocalDistributionStages.ETD;
				СтрокаСтатуса.StageDate = ETD;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаСтатуса.Stage.Пустая() Тогда
			ТаблицаСтатусов.Удалить(СтрокаСтатуса);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИзменения = ТекущаяДата();
	УстановитьПривилегированныйРежим(Истина);
	Для каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		МенеджерЗаписи = РегистрыСведений.TripsForSubscriptions.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Trip = Ссылка;
		МенеджерЗаписи.Warehouse = СтрокаСтатуса.Warehouse;
		МенеджерЗаписи.Stage = СтрокаСтатуса.Stage;
		МенеджерЗаписи.StageDate = СтрокаСтатуса.StageDate;
		МенеджерЗаписи.LastModified = ДатаИзменения;
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ТекстОшибки = "Не удалось зарегистрировать """ + ЭтотОбъект + """ для подписчиков PO tracking: " + ОписаниеОшибки();
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,,, Отказ);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменилисьТолькоНесущественныеРеквизиты") Тогда 
		ДополнительныеСвойства.Вставить("Leg7ReportLoading"); //добавила Петроченко НН для Costs
	КонецЕсли;

	ЗарегистрироватьДляSubscriptions(Отказ);
	
	// { RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	СформироватьДвиженияrgsCostAllocationParcelsOfTrip();
	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	
КонецПроцедуры // } RGS AGorlenko 07.03.2014 15:41:35 - S-I-0000620

// { RGS AGorlenko 05.04.2014 13:06:57 - S-I-0000655
Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ТаблицаСтарыxДанныхDomesticOB, ТаблицаСтарыxДанныхFinalDestinations)

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();
	СтрокаИсключаемыхРеквизитов = "WarehouseFrom, Draft, Final, Equipment, EquipmentNo, ETD, ATD, ServiceProvider, CreatedBy, ModifiedBy, ModificationDate, Comment, GrossWeightKG, CubicMeters, WarehouseToList, DaysETAWithoutATA, Specialist, BaseCostsSum, ZeroBaseCostsSum, BaseCostsSumSLBUSD, TotalCostsSumUSD, TotalAccessorialCostsSumUSD, TypeOfTransport, Transport, DontSendInTMS, Rate"; 
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		Новый Массив,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	ТекстИзмененийDomesticOB = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		ЭтотОбъект.DomesticOB,
		ТаблицаСтарыxДанныхDomesticOB,
		МетаданныеОбъекта.ТабличныеЧасти.DomesticOB);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийDomesticOB);
	
	Если ТаблицаСтарыxДанныхFinalDestinations <> Неопределено Тогда
		ТекстИзмененийFinalDestinations = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
			ЭтотОбъект.FinalDestinations,
			ТаблицаСтарыxДанныхFinalDestinations,
			МетаданныеОбъекта.ТабличныеЧасти.FinalDestinations);
		ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийFinalDestinations);
	КонецЕсли;
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.TripLogs.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // } RGS AGorlenko 05.04.2014 13:06:58 - S-I-0000655

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

Процедура ДетализироватьОписаниеОшибокLE(FinalDestinationsДоИзменения, FinalDestinationsПослеИзменения, МассивParcels)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ_FinalDestinationsДоИзменения", FinalDestinationsДоИзменения);
	Запрос.УстановитьПараметр("ТЗ_FinalDestinationsПослеИзменения", FinalDestinationsПослеИзменения);
	Запрос.УстановитьПараметр("Parcels", МассивParcels);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Final), Final, Draft));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	FinalDestinations.WarehouseTo,
	|	FinalDestinations.LegalEntity
	|ПОМЕСТИТЬ ВТ_FinalDestinationsОтПодрядчика
	|ИЗ
	|	&ТЗ_FinalDestinationsДоИзменения КАК FinalDestinations
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	FinalDestinations.WarehouseTo,
	|	FinalDestinations.LegalEntity
	|ПОМЕСТИТЬ ВТ_FinalDestinationsАктуальная
	|ИЗ
	|	&ТЗ_FinalDestinationsПослеИзменения КАК FinalDestinations
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_FinalDestinationsОтПодрядчика.WarehouseTo,
	|	ВТ_FinalDestinationsОтПодрядчика.LegalEntity
	|ИЗ
	|	ВТ_FinalDestinationsОтПодрядчика КАК ВТ_FinalDestinationsОтПодрядчика
	|ГДЕ
	|	НЕ (ВТ_FinalDestinationsОтПодрядчика.WarehouseTo, ВТ_FinalDestinationsОтПодрядчика.LegalEntity) В
	|				(ВЫБРАТЬ
	|					ВТ_FinalDestinationsАктуальная.WarehouseTo,
	|					ВТ_FinalDestinationsАктуальная.LegalEntity
	|				ИЗ
	|					ВТ_FinalDestinationsАктуальная КАК ВТ_FinalDestinationsАктуальная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_FinalDestinationsАктуальная.WarehouseTo,
	|	ВТ_FinalDestinationsАктуальная.LegalEntity
	|ПОМЕСТИТЬ ВТ_ДобавленныеLE
	|ИЗ
	|	ВТ_FinalDestinationsАктуальная КАК ВТ_FinalDestinationsАктуальная
	|ГДЕ
	|	НЕ (ВТ_FinalDestinationsАктуальная.WarehouseTo, ВТ_FinalDestinationsАктуальная.LegalEntity) В
	|				(ВЫБРАТЬ
	|					ВТ_FinalDestinationsОтПодрядчика.WarehouseTo,
	|					ВТ_FinalDestinationsОтПодрядчика.LegalEntity
	|				ИЗ
	|					ВТ_FinalDestinationsОтПодрядчика КАК ВТ_FinalDestinationsОтПодрядчика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.СтрокаИнвойса,
	|	ParcelsДетали.Ссылка.WarehouseTo КАК WarehouseTo,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU
	|ПОМЕСТИТЬ ВТ_ParcelsДетали
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.Ссылка В(&Parcels)
	|	И ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining <> ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ParentCompany,
	|	AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.СтрокаИнвойса,
	|	ParcelsДетали.WarehouseTo КАК WarehouseTo,
	|	ВЫБОР
	|		КОГДА ParcelsДетали.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ParcelsДетали.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ ЕСТЬNULL(AUsAndLegalEntitiesСрезПоследних.LegalEntity, ЗНАЧЕНИЕ(Справочник.LegalEntities.ПустаяСсылка))
	|	КОНЕЦ КАК LegalEntity,
	|	ParcelsДетали.ParentCompany КАК ParentCompany,
	|	ParcelsДетали.AU КАК AU
	|ИЗ
	|	ВТ_ParcelsДетали КАК ParcelsДетали
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ParcelsДетали.ParentCompany,
	|						ВТ_ParcelsДетали.AU
	|					ИЗ
	|						ВТ_ParcelsДетали КАК ВТ_ParcelsДетали)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ParcelsДетали.ParentCompany = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ParcelsДетали.AU = AUsAndLegalEntitiesСрезПоследних.AU
	|ГДЕ
	|	(ParcelsДетали.WarehouseTo, ВЫБОР
	|			КОГДА ParcelsДетали.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|				ТОГДА ParcelsДетали.ParentCompany.LegalEntityForLeg7
	|			ИНАЧЕ ЕСТЬNULL(AUsAndLegalEntitiesСрезПоследних.LegalEntity, ЗНАЧЕНИЕ(Справочник.LegalEntities.Пустаяссылка))
	|		КОНЕЦ) В
	|			(ВЫБРАТЬ
	|				ВТ_ДобавленныеLE.WarehouseTo,
	|				ВТ_ДобавленныеLE.LegalEntity
	|			ИЗ
	|				ВТ_ДобавленныеLE КАК ВТ_ДобавленныеLE)
	|
	|УПОРЯДОЧИТЬ ПО
	|	WarehouseTo,
	|	LegalEntity";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоОтсутствующимДанным = МассивРезультатов[2];
	РезультатПоОбновленнымДанным = МассивРезультатов[5];
	РезультатПоОтсутствующимДаннымПустой = РезультатПоОтсутствующимДанным.Пустой();
	РезультатПоОбновленнымДаннымПустой = РезультатПоОбновленнымДанным.Пустой();
	
	Если РезультатПоОтсутствующимДаннымПустой И РезультатПоОбновленнымДаннымПустой Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОписания = "Detailing on LE:" + Символы.ПС;
	
	Если НЕ РезультатПоОтсутствующимДаннымПустой Тогда
		ТекстОписания = ТекстОписания + Символы.Таб + "Missing data (these data are in the file but not in the database):" + Символы.ПС;
		Выборка = РезультатПоОтсутствующимДанным.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОписания = ТекстОписания + Символы.Таб + Символы.Таб + "WarehouseTo = " + Выборка.WarehouseTo + "; Legal entity = " + Выборка.LegalEntity + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезультатПоОбновленнымДаннымПустой Тогда
		ТекстОписания = ТекстОписания + Символы.Таб + "Updated data (these data are in the database but not in the file):" + Символы.ПС;
		ТекWarehouseTo = Неопределено;
		ТекLegalEntity = Неопределено;
		Выборка = РезультатПоОбновленнымДанным.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекWarehouseTo <> Выборка.WarehouseTo Или ТекLegalEntity <> Выборка.LegalEntity Тогда
				ТекстОписания = ТекстОписания + Символы.Таб + Символы.Таб + "WarehouseTo = " + Выборка.WarehouseTo + "; Legal entity = " + Выборка.LegalEntity + Символы.ПС;
				ТекWarehouseTo = Выборка.WarehouseTo;
				ТекLegalEntity = Выборка.LegalEntity;
			КонецЕсли;
			ТекстОписания = ТекстОписания + Символы.Таб + Символы.Таб + Символы.Таб + "Item = " + Выборка.СтрокаИнвойса + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РазбивкаПоLE", ТекстОписания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеТЧFinalDestinationsПриПроведении(Отказ);
	
	Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда 
		СформироватьДвиженияLocalDistributionCostsPerItem(Отказ);
		СформироватьДвиженияLocalDistributionCostsPerKG(Отказ);
		СформироватьДвиженияLocalDistributionCostsMilageWeightVolume(Отказ);
		// { RGS AArsentev 5/22/2017 11:30:01 AM - S-I-0002788
		СформироватьДвиженияLocalDistributionAccessorialCostsPerItem(Отказ);
		// } RGS AArsentev 5/22/2017 11:30:20 AM - S-I-0002788
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияLocalDistributionCostsPerItem(Отказ)
	               	
	// регистр LocalDistributionCostsPerItem 
	
	// сначала распределяем суммы по парселям пропорционально весу
	// затем по товарам поровну
	/// Получим максимальную дату прибытия
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(TripFinalDestinations.ETA) КАК ETA,
	|	МАКСИМУМ(TripFinalDestinations.ATA) КАК ATA
	|ИЗ
	|	Документ.Trip.FinalDestinations КАК TripFinalDestinations
	|ГДЕ
	|	TripFinalDestinations.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ATA_FD = Неопределено;
	Если Результат.Следующий() Тогда
		ATA_FD = ?(ЗначениеЗаполнено(Результат.ATA), Результат.ATA, Результат.ETA);
	КонецЕсли;

	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	ДвиженияLocalDistributionCostsPerItem = Движения.LocalDistributionCostsPerItem;
	
	ДвиженияLocalDistributionCostsPerItem.Записывать = Истина;
	ДвиженияLocalDistributionCostsPerItem.Очистить();
	
	ДвиженияDomesticFactCosts = Движения.InternationalAndDomesticFactCosts;
	
	ДвиженияDomesticFactCosts.Записывать = Истина;
	ДвиженияDomesticFactCosts.Очистить();
	
	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасстояний.LocationStart КАК SourceLocation,
	|	ТаблицаРасстояний.LocationEnd КАК DestinationLocation,
	|	ТаблицаРасстояний.LegalEntity КАК LegalEntity,
	|	ТаблицаРасстояний.Mileage КАК Milage
	|ПОМЕСТИТЬ ТаблицаРасстояний
	|ИЗ
	|	&ТаблицаРасстояний КАК ТаблицаРасстояний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Trip.Ссылка.Дата КАК Период,
	|	Детали.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	Детали.СтрокаИнвойса.КостЦентр КАК КостЦентр,
	|	Trip.Parcel.WarehouseFrom КАК SourceLocation,
	|	Trip.Parcel.WarehouseTo КАК DestinationLocation,
	|	СУММА(Trip.Parcel.CubicMeters) КАК Volume,
	|	СУММА(Trip.Parcel.GrossWeight) КАК Weight,
	|	Trip.Parcel
	|ПОМЕСТИТЬ ТаблицаParcel_Исходная
	|ИЗ
	|	Документ.Trip.Parcels КАК Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК Детали
	|		ПО Trip.Parcel = Детали.Ссылка
	|ГДЕ
	|	Trip.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Trip.Ссылка.Дата,
	|	Детали.СтрокаИнвойса.КостЦентр,
	|	Детали.СтрокаИнвойса.SoldTo,
	|	Trip.Parcel.WarehouseFrom,
	|	Trip.Parcel.WarehouseTo,
	|	Trip.Parcel
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel_Исходная.DestinationLocation,
	|	ВЫБОР
	|		КОГДА ТаблицаParcel_Исходная.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ТаблицаParcel_Исходная.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity
	|ПОМЕСТИТЬ ТаблицаLegalEntity
	|ИЗ
	|	ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаParcel_Исходная.ParentCompany,
	|						ТаблицаParcel_Исходная.КостЦентр
	|					ИЗ
	|						ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ТаблицаParcel_Исходная.ParentCompany = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ТаблицаParcel_Исходная.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.ParentCompany,
	|	Т.SourceLocation,
	|	Т.DestinationLocation,
	|	Т.Weight,
	|	ТаблицаLegalEntity.LegalEntity,
	|	Т.Parcel
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	ТаблицаParcel_Исходная КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаLegalEntity КАК ТаблицаLegalEntity
	|		ПО Т.DestinationLocation = ТаблицаLegalEntity.DestinationLocation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel.Период,
	|	0 КАК TotalCostsSumPerParcel,
	|	0 КАК TotalAccessorialCostsSumPerParcel,
	|	0 КАК BaseCostsSumPerParcel,
	|	0 КАК TotalCostsSumPerParcelUSD,
	|	0 КАК TotalAccessorialCostsSumPerParcelUSD,
	|	0 КАК BaseCostsSumPerParcelUSD,
	|	ТаблицаParcel.Weight * ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) / 1000 КАК TonneKilometers,
	|	ТаблицаParcel.Parcel
	|ПОМЕСТИТЬ ТаблицаПарселей
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасстояний КАК ТаблицаРасстояний
	|		ПО ТаблицаParcel.SourceLocation = ТаблицаРасстояний.SourceLocation
	|			И ТаблицаParcel.DestinationLocation = ТаблицаРасстояний.DestinationLocation
	|			И ТаблицаParcel.LegalEntity = ТаблицаРасстояний.LegalEntity
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripParcels.TonneKilometers КАК TonneKilometers,
	|	0 КАК TotalCostsSumPerParcel,
	|	0 КАК TotalAccessorialCostsSumPerParcel,
	|	0 КАК BaseCostsSumPerParcel,
	|	0 КАК TotalCostsSumPerParcelUSD,
	|	0 КАК TotalAccessorialCostsSumPerParcelUSD,
	|	0 КАК BaseCostsSumPerParcelUSD,
	|	TripParcels.Parcel
	|ИЗ
	|	ТаблицаПарселей КАК TripParcels
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ParcelsДетали.Ссылка КАК Parcel,
	|	ParcelsДетали.СтрокаИнвойса КАК Item,
	|	1 КАК Количество,
	|	0 КАК BaseCostsSumPerItem,
	|	0 КАК TotalAccessorialCostsSumPerItem,
	|	0 КАК TotalCostsSumPerItem,
	|	0 КАК BaseCostsSumPerItemUSD,
	|	0 КАК TotalAccessorialCostsSumPerItemUSD,
	|	0 КАК TotalCostsSumPerItemUSD,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.Ссылка В
	|			(ВЫБРАТЬ различные
	|				Parcels.Parcel
	|			ИЗ
	|				ТаблицаПарселей КАК Parcels)";

	
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТаблицаРасстояний",	ТаблицаРасстояний);
		
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Parcels.Parcel КАК Parcel
	//			   |ПОМЕСТИТЬ Parcels
	//               |ИЗ
	//               |	&Parcels КАК Parcels
	//               |;
	//			   |ВЫБРАТЬ
	//			   |	TripParcels.Parcel.GrossWeightKG КАК GrossWeightKG,
	//               |	0 КАК TotalCostsSumPerParcel,
	//               |	0 КАК TotalAccessorialCostsSumPerParcel,
	//               |	0 КАК BaseCostsSumPerParcel,
	//			   |	0 КАК TotalCostsSumPerParcelUSD,
	//               |	0 КАК TotalAccessorialCostsSumPerParcelUSD,
	//               |	0 КАК BaseCostsSumPerParcelUSD,
	//			   |	TripParcels.Parcel
	//               |ИЗ
	//               |	Parcels КАК TripParcels
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ParcelsДетали.Ссылка КАК Parcel,
	//               |	ParcelsДетали.СтрокаИнвойса КАК Item,
	//			   |	1 КАК Количество,
	//			   |	0 КАК BaseCostsSumPerItem,
	//			   |	0 КАК TotalAccessorialCostsSumPerItem,
	//			   |	0 КАК TotalCostsSumPerItem,
	//			   |	0 КАК BaseCostsSumPerItemUSD,
	//			   |	0 КАК TotalAccessorialCostsSumPerItemUSD,
	//			   |	0 КАК TotalCostsSumPerItemUSD,
	//			   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	//			   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	//			   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	//			   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	//			   |	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany
	//			   |ИЗ
	//			   |	Справочник.Parcels.Детали КАК ParcelsДетали
	//			   |ГДЕ
	//			   |	ParcelsДетали.Ссылка В
	//			   |			(ВЫБРАТЬ
	//			   |				Parcels.Parcel
	//			   |			ИЗ
	//               |				Parcels КАК Parcels)";
				   
	Результат = Запрос.ВыполнитьПакет();			   
	
	ТЗParcels = Результат[5].Выгрузить();

	
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), BaseCostsSum, 				ТЗParcels, "BaseCostsSumPerParcel");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), TotalAccessorialCostsSum, 	ТЗParcels, "TotalAccessorialCostsSumPerParcel");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), TotalCostsSum, 				ТЗParcels, "TotalCostsSumPerParcel");

	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), BaseCostsSumSLBUSD, 			ТЗParcels, "BaseCostsSumPerParcelUSD");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), TotalAccessorialCostsSumUSD,	ТЗParcels, "TotalAccessorialCostsSumPerParcelUSD");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), TotalCostsSumUSD, 			ТЗParcels, "TotalCostsSumPerParcelUSD");

	ТЗItems = Результат[6].Выгрузить();
	СтруктураОтбораПоParcel = Новый Структура("Parcel");
	
	Для Каждого СтрParcel Из ТЗParcels Цикл
		
		СтруктураОтбораПоParcel.Parcel = СтрParcel.Parcel;
		ТЗParcelItems = ТЗItems.Скопировать(СтруктураОтбораПоParcel);
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.BaseCostsSumPerParcel, ТЗParcelItems, "BaseCostsSumPerItem");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalAccessorialCostsSumPerParcel, ТЗParcelItems, "TotalAccessorialCostsSumPerItem");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalCostsSumPerParcel, ТЗParcelItems, "TotalCostsSumPerItem");

		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.BaseCostsSumPerParcelUSD, ТЗParcelItems, "BaseCostsSumPerItemUSD");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalAccessorialCostsSumPerParcelUSD, ТЗParcelItems, "TotalAccessorialCostsSumPerItemUSD");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalCostsSumPerParcelUSD, ТЗParcelItems, "TotalCostsSumPerItemUSD");

		Для Каждого СтрокаТЗ Из ТЗParcelItems Цикл
			
			Движение = ДвиженияLocalDistributionCostsPerItem.Добавить();
			
			Движение.Период 						= Дата;
			Движение.Trip 							= Ссылка;
			Движение.Parcel 						= СтрокаТЗ.Parcel;
			Движение.Item 							= СтрокаТЗ.Item;
			
			Движение.BaseCostsSum 					= СтрокаТЗ.BaseCostsSumPerItem;
			Движение.TotalAccessorialCostsSum 		= СтрокаТЗ.TotalAccessorialCostsSumPerItem;
			Движение.TotalCostsSum 					= СтрокаТЗ.TotalCostsSumPerItem;
			
			Движение.BaseCostsSumUSD 				= СтрокаТЗ.BaseCostsSumPerItemUSD;
			Движение.TotalAccessorialCostsSumUSD 	= СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD;
			Движение.TotalCostsSumUSD 				= СтрокаТЗ.TotalCostsSumPerItemUSD;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ATA_FD) Тогда 
			СформироватьДвиженияDomesticFactCosts(ТЗParcelItems, ДвиженияDomesticFactCosts, ATA_FD);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияDomesticFactCosts(ТЗParcelItems, ДвиженияDomesticFactCosts, ATA_FD)
	
	// регистр International Domestic Fact Costs   	
		
	ТЗLines = ТЗParcelItems.Скопировать(, "ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment,BaseCostsSumPerItemUSD,TotalAccessorialCostsSumPerItemUSD");
	                
	ТЗLines.Свернуть("ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment", "BaseCostsSumPerItemUSD,TotalAccessorialCostsSumPerItemUSD");
	
	Для Каждого СтрокаТЗ Из ТЗLines Цикл
		
		Если СтрокаТЗ.BaseCostsSumPerItemUSD <> 0 Тогда 
			
			Движение = ДвиженияDomesticFactCosts.Добавить();
			
			Движение.Период 				= НачалоМесяца(?(День(ATA_FD) > 25, ДобавитьМесяц(ATA_FD, 1), ATA_FD));
			Движение.CostsType 				= Перечисления.FactCostsTypes.Freight;
			Движение.DomesticInternational 	= Перечисления.DomesticInternational.Domestic;
			
			Движение.ParentCompany 			= СтрокаТЗ.ParentCompany;
			Движение.Geomarket 				= СтрокаТЗ.Geomarket;
			Движение.SubGeomarket 			= СтрокаТЗ.SubGeomarket;
			Движение.Segment 				= СтрокаТЗ.Segment;
			Движение.SubSegment 			= СтрокаТЗ.SubSegment;
			
			Движение.Sum 					= СтрокаТЗ.BaseCostsSumPerItemUSD;
			
		КонецЕсли;
		
		Если СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD <> 0 Тогда 
			
			Движение = ДвиженияDomesticFactCosts.Добавить();
			
			Движение.Период 				= НачалоМесяца(?(День(ATA_FD) > 25, ДобавитьМесяц(ATA_FD, 1), ATA_FD));
			Движение.CostsType 				= Перечисления.FactCostsTypes.AccessorialCosts;
			Движение.DomesticInternational 	= Перечисления.DomesticInternational.Domestic;
			
			Движение.ParentCompany 			= СтрокаТЗ.ParentCompany;
			Движение.Geomarket 				= СтрокаТЗ.Geomarket;
			Движение.SubGeomarket 			= СтрокаТЗ.SubGeomarket;
			Движение.Segment 				= СтрокаТЗ.Segment;
			Движение.SubSegment 			= СтрокаТЗ.SubSegment;
			
			Движение.Sum 					= СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD;
			
		КонецЕсли;

	КонецЦикла;
	        		  		
КонецПроцедуры

Процедура СформироватьДвиженияLocalDistributionCostsPerKG(Отказ)
	               	
	// регистр LocalDistributionCostsPerKG 
			
	ДвиженияLocalDistributionCostsPerKG = Движения.LocalDistributionCostsPerKG;
	
	ДвиженияLocalDistributionCostsPerKG.Записывать = Истина;
	ДвиженияLocalDistributionCostsPerKG.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", Parcels.Выгрузить().ВыгрузитьКолонку("Parcel"));	
	
	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасстояний.LocationStart КАК SourceLocation,
	|	ТаблицаРасстояний.LocationEnd КАК DestinationLocation,
	|	ТаблицаРасстояний.LegalEntity КАК LegalEntity,
	|	ТаблицаРасстояний.Mileage КАК Milage
	|ПОМЕСТИТЬ ТаблицаРасстояний
	|ИЗ
	|	&ТаблицаРасстояний КАК ТаблицаРасстояний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Trip.Ссылка.Дата КАК Период,
	|	Trip.Ссылка.Equipment,
	|	Trip.Parcel.HazardClass КАК HazardClass,
	|	Детали.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	Детали.СтрокаИнвойса.КостЦентр КАК КостЦентр,
	|	Детали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	Детали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	Trip.Parcel.WarehouseFrom КАК SourceLocation,
	|	Trip.Parcel.WarehouseTo КАК DestinationLocation,
	|	СУММА(Trip.Parcel.CubicMeters) КАК Volume,
	|	СУММА(Trip.Parcel.GrossWeight) КАК Weight
	|ПОМЕСТИТЬ ТаблицаParcel_Исходная
	|ИЗ
	|	Документ.Trip.Parcels КАК Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК Детали
	|		ПО Trip.Parcel = Детали.Ссылка
	|ГДЕ
	|	Trip.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Trip.Ссылка.Дата,
	|	Trip.Ссылка.Equipment,
	|	Trip.Parcel.HazardClass,
	|	Детали.СтрокаИнвойса.КостЦентр,
	|	Детали.СтрокаИнвойса.SoldTo,
	|	Детали.СтрокаИнвойса.КостЦентр.Geomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.SubGeomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.Segment,
	|	Детали.СтрокаИнвойса.КостЦентр.SubSegment,
	|	Trip.Parcel.WarehouseFrom,
	|	Trip.Parcel.WarehouseTo
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel_Исходная.DestinationLocation,
	|	ВЫБОР
	|		КОГДА ТаблицаParcel_Исходная.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ТаблицаParcel_Исходная.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity
	|ПОМЕСТИТЬ ТаблицаLegalEntity
	|ИЗ
	|	ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаParcel_Исходная.ParentCompany,
	|						ТаблицаParcel_Исходная.КостЦентр
	|					ИЗ
	|						ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ТаблицаParcel_Исходная.ParentCompany = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ТаблицаParcel_Исходная.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.Equipment,
	|	Т.HazardClass,
	|	Т.ParentCompany,
	|	Т.Geomarket,
	|	Т.SubGeomarket,
	|	Т.Segment,
	|	Т.SubSegment,
	|	Т.SourceLocation,
	|	Т.DestinationLocation,
	|	Т.Volume,
	|	Т.Weight,
	|	ТаблицаLegalEntity.LegalEntity
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	ТаблицаParcel_Исходная КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаLegalEntity КАК ТаблицаLegalEntity
	|		ПО Т.DestinationLocation = ТаблицаLegalEntity.DestinationLocation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаParcel.Период,
	|	ТаблицаParcel.ParentCompany,
	|	ТаблицаParcel.Geomarket,
	|	ТаблицаParcel.SubGeomarket,
	|	ТаблицаParcel.Segment,
	|	ТаблицаParcel.SubSegment,
	|	ТаблицаParcel.SourceLocation,
	|	ТаблицаParcel.DestinationLocation,
	|	СУММА(ТаблицаParcel.Volume) КАК Volume,
	|	СУММА(ТаблицаParcel.Weight) КАК Weight,
	|	СУММА(ЕСТЬNULL(ТаблицаРасстояний.Milage, 0)) КАК Milage,
	|	СУММА(ЕСТЬNULL(ТаблицаРасстояний.Milage, 0)) КАК MilageOfParcel,
	|	СУММА(ТаблицаParcel.Weight * ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) / 1000) КАК TonneKilometers
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасстояний КАК ТаблицаРасстояний
	|		ПО ТаблицаParcel.SourceLocation = ТаблицаРасстояний.SourceLocation
	|			И ТаблицаParcel.DestinationLocation = ТаблицаРасстояний.DestinationLocation
	|			И ТаблицаParcel.LegalEntity = ТаблицаРасстояний.LegalEntity
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаParcel.Период,
	|	ТаблицаParcel.SubGeomarket,
	|	ТаблицаParcel.Segment,
	|	ТаблицаParcel.ParentCompany,
	|	ТаблицаParcel.Geomarket,
	|	ТаблицаParcel.SourceLocation,
	|	ТаблицаParcel.SubSegment,
	|	ТаблицаParcel.DestinationLocation";
	
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТаблицаРасстояний",	ТаблицаРасстояний);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
			
	MOT = Неопределено;
	Если ЗначениеЗаполнено(Equipment) Тогда
		Если Equipment.MOTs.Количество() > 0 Тогда
			MOT = Equipment.MOTs[0].MOT;
		КонецЕсли;
	КонецЕсли;
	
	TotalTonneKilometers = ТаблицаДвижений.Итог("TonneKilometers");
		
	Для Каждого Стр из ТаблицаДвижений Цикл 
		
		Движение = ДвиженияLocalDistributionCostsPerKG.Добавить();
		Движение.Период 					= Дата;
		Движение.Trip 						= Ссылка;
		Движение.MOT 						= MOT;
		Движение.Segment 					= Стр.Segment;
		Движение.SubSegment 				= Стр.SubSegment;
		Движение.Geomarket 					= Стр.Geomarket;
		Движение.SubGeomarket 				= Стр.SubGeomarket;
		Движение.Equipment 					= Equipment;
		Движение.SourceLocation 			= Стр.SourceLocation;
		Движение.DestinationLocation 		= Стр.DestinationLocation;
		Если TotalTonneKilometers = 0 Тогда
			Движение.CostsSumPerKGUSD       = 0;
		Иначе
			Движение.CostsSumPerKGUSD 		= TotalCostsSumUSD * Стр.TonneKilometers / TotalTonneKilometers / ?(Стр.Weight = 0, 1, Стр.Weight);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуДвиженийLocalDistributionCostsMilageWeightVolume()

	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасстояний.LocationStart КАК SourceLocation,
	|	ТаблицаРасстояний.LocationEnd КАК DestinationLocation,
	|	ТаблицаРасстояний.LegalEntity КАК LegalEntity,
	|	ТаблицаРасстояний.Mileage КАК Milage
	|ПОМЕСТИТЬ ТаблицаРасстояний
	|ИЗ
	|	&ТаблицаРасстояний КАК ТаблицаРасстояний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Trip.Ссылка.Дата КАК Период,
	|	Trip.Ссылка.Equipment,
	|	Trip.Parcel.HazardClass КАК HazardClass,
	|	Детали.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	Детали.СтрокаИнвойса.КостЦентр КАК КостЦентр,
	|	Детали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	Детали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	Trip.Parcel.WarehouseFrom КАК SourceLocation,
	|	Trip.Parcel.WarehouseTo КАК DestinationLocation,
	|	СУММА(Trip.Parcel.CubicMeters) КАК Volume,
	|	СУММА(Детали.GrossWeightKG) КАК Weight
	|ПОМЕСТИТЬ ТаблицаParcel_Исходная
	|ИЗ
	|	Документ.Trip.Parcels КАК Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК Детали
	|		ПО Trip.Parcel = Детали.Ссылка
	|ГДЕ
	|	Trip.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Trip.Ссылка.Дата,
	|	Trip.Ссылка.Equipment,
	|	Trip.Parcel.HazardClass,
	|	Детали.СтрокаИнвойса.КостЦентр,
	|	Детали.СтрокаИнвойса.SoldTo,
	|	Детали.СтрокаИнвойса.КостЦентр.Geomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.SubGeomarket,
	|	Детали.СтрокаИнвойса.КостЦентр.Segment,
	|	Детали.СтрокаИнвойса.КостЦентр.SubSegment,
	|	Trip.Parcel.WarehouseFrom,
	|	Trip.Parcel.WarehouseTo
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel_Исходная.DestinationLocation,
	|	ВЫБОР
	|		КОГДА ТаблицаParcel_Исходная.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ТаблицаParcel_Исходная.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity
	|ПОМЕСТИТЬ ТаблицаLegalEntity
	|ИЗ
	|	ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаParcel_Исходная.ParentCompany,
	|						ТаблицаParcel_Исходная.КостЦентр
	|					ИЗ
	|						ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ТаблицаParcel_Исходная.ParentCompany = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ТаблицаParcel_Исходная.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.Equipment,
	|	Т.HazardClass,
	|	Т.ParentCompany,
	|	Т.Geomarket,
	|	Т.SubGeomarket,
	|	Т.Segment,
	|	Т.SubSegment,
	|	Т.SourceLocation,
	|	Т.DestinationLocation,
	|	Т.Volume,
	|	Т.Weight,
	|	ТаблицаLegalEntity.LegalEntity
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	ТаблицаParcel_Исходная КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаLegalEntity КАК ТаблицаLegalEntity
	|		ПО Т.DestinationLocation = ТаблицаLegalEntity.DestinationLocation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаParcel.Период,
	|	ТаблицаParcel.Equipment,
	|	ТаблицаParcel.HazardClass,
	|	ТаблицаParcel.ParentCompany,
	|	ТаблицаParcel.Geomarket,
	|	ТаблицаParcel.SubGeomarket,
	|	ТаблицаParcel.Segment,
	|	ТаблицаParcel.SubSegment,
	|	ТаблицаParcel.SourceLocation,
	|	ТаблицаParcel.DestinationLocation,
	|	ТаблицаParcel.Volume,
	|	ТаблицаParcel.Weight,
	|	ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) КАК Milage,
	|	ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) КАК MilageOfParcel,
	|	ТаблицаParcel.Weight * ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) / 1000 КАК TonneKilometers
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасстояний КАК ТаблицаРасстояний
	|		ПО ТаблицаParcel.SourceLocation = ТаблицаРасстояний.SourceLocation
	|			И ТаблицаParcel.DestinationLocation = ТаблицаРасстояний.DestinationLocation
	|			И ТаблицаParcel.LegalEntity = ТаблицаРасстояний.LegalEntity";
	
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТаблицаРасстояний",	ТаблицаРасстояний);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДвижений.Колонки.Добавить("Sum",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДвижений.Колонки.Добавить("SumOfMilage",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДвижений.Колонки.Добавить("MOT",			Новый ОписаниеТипов("СправочникСсылка.MOTs"));	
	
	MOT = Неопределено;
	Если ЗначениеЗаполнено(Equipment) Тогда
		Если Equipment.MOTs.Количество() > 0 Тогда
			MOT = Equipment.MOTs[0].MOT;
		КонецЕсли;
	КонецЕсли;
	
	// Распределяем общий пробег "Milage" И "SumOfMilage" по "Weight"
	MilageТек			= 0;
	MilageВсего			= ТаблицаРасстояний.Итог("Mileage");
	SumOfMilageТек		= 0;
	SumOfMilageВсего	= TotalCostsSumUSD;
	MilageOfParcelВсего	= ТаблицаДвижений.Итог("MilageOfParcel");
	
	ТекСчетчик	= 1;
	ВсегоСтрок	= ТаблицаДвижений.Количество();
	
	// Если базы распределения нет, то ничего делать не надо
	//Если MilageOfParcelВсего <> 0 Тогда
	//
	//	Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
	//		
	//		СтрокаДвижений.MOT = MOT;
	//		
	//		Если ТекСчетчик = ВсегоСтрок Тогда
	//			СтрокаДвижений.Milage		= MilageВсего - MilageТек;
	//			СтрокаДвижений.SumOfMilage	= SumOfMilageВсего - SumOfMilageТек;
	//		Иначе
	//			СтрокаДвижений.Milage		= MilageВсего * СтрокаДвижений.MilageOfParcel / MilageOfParcelВсего;
	//			СтрокаДвижений.SumOfMilage	= SumOfMilageВсего * СтрокаДвижений.MilageOfParcel / MilageOfParcelВсего;
	//		КонецЕсли;
	//		
	//		MilageТек		= MilageТек + СтрокаДвижений.Milage;
	//		SumOfMilageТек	= SumOfMilageТек + СтрокаДвижений.SumOfMilage;
	//		ТекСчетчик		= ТекСчетчик + 1;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;	
	
	// Распределение суммы по тонно километрам
	SumТек					= 0;
	SumВсего				= TotalCostsSumUSD;
	TonneKilometersВсего	= ТаблицаДвижений.Итог("TonneKilometers");
	
	ТекСчетчик	= 1;
	ВсегоСтрок	= ТаблицаДвижений.Количество();
	
	// Если базы распределения нет, то ничего делать не надо
	Если TonneKilometersВсего <> 0 Тогда
	
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			СтрокаДвижений.MOT = MOT;
			
			Если ТекСчетчик = ВсегоСтрок Тогда
				СтрокаДвижений.Sum = SumВсего - SumТек;
			Иначе
				СтрокаДвижений.Sum = SumВсего * СтрокаДвижений.TonneKilometers / TonneKilometersВсего;
			КонецЕсли;
			СтрокаДвижений.SumOfMilage = СтрокаДвижений.Sum; 
			
			SumТек		= SumТек + СтрокаДвижений.Sum;
			ТекСчетчик	= ТекСчетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;	
		
	Возврат ТаблицаДвижений;
	
КонецФункции	
	
Процедура СформироватьДвиженияLocalDistributionCostsMilageWeightVolume(Отказ)
	
	// регистр LocalDistributionCostsMilageWeightVolume 
			
	ДвиженияLocalDistributionCostsMilageWeightVolume = Движения.LocalDistributionCostsMilageWeightVolume;
	
	ДвиженияLocalDistributionCostsMilageWeightVolume.Записывать = Истина;
	ДвиженияLocalDistributionCostsMilageWeightVolume.Очистить();
	
	ТаблицаДвижений = ПолучитьТаблицуДвиженийLocalDistributionCostsMilageWeightVolume();
	
	ДвиженияLocalDistributionCostsMilageWeightVolume.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

Функция ПолучитьТаблицуДвиженийRouteOfLocation()
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	
	ТаблицаДвижений.Колонки.Добавить("Период",			ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("LocationStart",	Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаДвижений.Колонки.Добавить("LocationEnd",		Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаДвижений.Колонки.Добавить("LegalEntity",		Новый ОписаниеТипов("СправочникСсылка.LegalEntities"));
	ТаблицаДвижений.Колонки.Добавить("Mileage",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	
	Для Каждого СтрStops Из FinalDestinations Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		
		НоваяСтрока.Период			= Дата;
		НоваяСтрока.LocationStart	= WarehouseFrom;
		НоваяСтрока.LocationEnd		= СтрStops.WarehouseTo;
		НоваяСтрока.LegalEntity		= СтрStops.LegalEntity;
		НоваяСтрока.Mileage			= СтрStops.Mileage;
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.LocalDistributionCostsMilageWeightVolume.Очистить();
	Движения.LocalDistributionCostsMilageWeightVolume.Записать();
	
	Движения.LocalDistributionCostsPerItem.Очистить();
	Движения.LocalDistributionCostsPerItem.Записать();
	
	Движения.LocalDistributionCostsPerKG.Очистить();
	Движения.LocalDistributionCostsPerKG.Записать();
	
	Движения.InternationalAndDomesticFactCosts.Очистить();
	Движения.InternationalAndDomesticFactCosts.Записать();

	
КонецПроцедуры

// { RGS AArsentev 5/22/2017 11:30:01 AM - S-I-0002788
Процедура СформироватьДвиженияLocalDistributionAccessorialCostsPerItem(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(TripFinalDestinations.ETA) КАК ETA,
	|	МАКСИМУМ(TripFinalDestinations.ATA) КАК ATA
	|ИЗ
	|	Документ.Trip.FinalDestinations КАК TripFinalDestinations
	|ГДЕ
	|	TripFinalDestinations.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ATA_FD = Неопределено;
	Если Результат.Следующий() Тогда
		ATA_FD = ?(ЗначениеЗаполнено(Результат.ATA), Результат.ATA, Результат.ETA);
	КонецЕсли;
	
	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	ДвиженияLocalDistributionAccessorialCostsPerItem = Движения.LocalDistributionAccessorialCostsPerItem;
	
	ДвиженияLocalDistributionAccessorialCostsPerItem.Записывать = Истина;
	ДвиженияLocalDistributionAccessorialCostsPerItem.Очистить();
	
	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасстояний.LocationStart КАК SourceLocation,
	|	ТаблицаРасстояний.LocationEnd КАК DestinationLocation,
	|	ТаблицаРасстояний.LegalEntity КАК LegalEntity,
	|	ТаблицаРасстояний.Mileage КАК Milage
	|ПОМЕСТИТЬ ТаблицаРасстояний
	|ИЗ
	|	&ТаблицаРасстояний КАК ТаблицаРасстояний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Trip.Ссылка.Дата КАК Период,
	|	Детали.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	Детали.СтрокаИнвойса.КостЦентр КАК КостЦентр,
	|	Trip.Parcel.WarehouseFrom КАК SourceLocation,
	|	Trip.Parcel.WarehouseTo КАК DestinationLocation,
	|	СУММА(Trip.Parcel.CubicMeters) КАК Volume,
	|	СУММА(Trip.Parcel.GrossWeight) КАК Weight,
	|	Trip.Parcel
	|ПОМЕСТИТЬ ТаблицаParcel_Исходная
	|ИЗ
	|	Документ.Trip.Parcels КАК Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК Детали
	|		ПО Trip.Parcel = Детали.Ссылка
	|ГДЕ
	|	Trip.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Trip.Ссылка.Дата,
	|	Детали.СтрокаИнвойса.КостЦентр,
	|	Детали.СтрокаИнвойса.SoldTo,
	|	Trip.Parcel.WarehouseFrom,
	|	Trip.Parcel.WarehouseTo,
	|	Trip.Parcel
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel_Исходная.DestinationLocation,
	|	ВЫБОР
	|		КОГДА ТаблицаParcel_Исходная.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ТаблицаParcel_Исходная.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity
	|ПОМЕСТИТЬ ТаблицаLegalEntity
	|ИЗ
	|	ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|				&Период,
	|				(ParentCompany, AU) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаParcel_Исходная.ParentCompany,
	|						ТаблицаParcel_Исходная.КостЦентр
	|					ИЗ
	|						ТаблицаParcel_Исходная КАК ТаблицаParcel_Исходная)) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ТаблицаParcel_Исходная.ParentCompany = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ТаблицаParcel_Исходная.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.ParentCompany,
	|	Т.SourceLocation,
	|	Т.DestinationLocation,
	|	Т.Weight,
	|	ТаблицаLegalEntity.LegalEntity,
	|	Т.Parcel
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	ТаблицаParcel_Исходная КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаLegalEntity КАК ТаблицаLegalEntity
	|		ПО Т.DestinationLocation = ТаблицаLegalEntity.DestinationLocation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаParcel.Период,
	|	0 КАК AccessorialCostsSumPerParcel,
	|	ТаблицаParcel.Weight * ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) / 1000 КАК TonneKilometers,
	|	ТаблицаParcel.Parcel
	|ПОМЕСТИТЬ ТаблицаПарселей
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасстояний КАК ТаблицаРасстояний
	|		ПО ТаблицаParcel.SourceLocation = ТаблицаРасстояний.SourceLocation
	|			И ТаблицаParcel.DestinationLocation = ТаблицаРасстояний.DestinationLocation
	|			И ТаблицаParcel.LegalEntity = ТаблицаРасстояний.LegalEntity
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripParcels.TonneKilometers КАК TonneKilometers,
	|	0 КАК AccessorialCostsSumPerParcel,
	|	TripParcels.Parcel
	|ИЗ
	|	ТаблицаПарселей КАК TripParcels
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ParcelsДетали.Ссылка КАК Parcel,
	|	ParcelsДетали.СтрокаИнвойса КАК Item,
	|	1 КАК Количество,
	|	0 КАК AccessorialCostsSumPerItem,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Parcels.Parcel
	|			ИЗ
	|				ТаблицаПарселей КАК Parcels)";
	
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТаблицаРасстояний",	ТаблицаРасстояний);
	
	Результат = Запрос.ВыполнитьПакет();
	ТЗParcels = Результат[5].Выгрузить();
	
	Для Каждого Строка Из Costs Цикл
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("TonneKilometers"), Строка.Sum, 				ТЗParcels, "AccessorialCostsSumPerParcel");
		
		ТЗItems = Результат[6].Выгрузить();
		СтруктураОтбораПоParcel = Новый Структура("Parcel");
		
		Для Каждого СтрParcel Из ТЗParcels Цикл
			
			СтруктураОтбораПоParcel.Parcel = СтрParcel.Parcel;
			ТЗParcelItems = ТЗItems.Скопировать(СтруктураОтбораПоParcel);
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.AccessorialCostsSumPerParcel, ТЗParcelItems, "AccessorialCostsSumPerItem");
			
			Для Каждого СтрокаТЗ Из ТЗParcelItems Цикл
				
				Движение = ДвиженияLocalDistributionAccessorialCostsPerItem.Добавить();
				
				Движение.Период 						= Дата;
				Движение.Trip 							= Ссылка;
				Движение.Parcel 						= СтрокаТЗ.Parcel;
				Движение.Item 							= СтрокаТЗ.Item;
				Движение.CostType 						= Строка.CostType;
				
				Движение.AccessorialCostsSum 		= СтрокаТЗ.AccessorialCostsSumPerItem;
				
				Если ЗначениеЗаполнено(СтрокаТЗ.AccessorialCostsSumPerItem) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
					Движение.AccessorialCostsSumUSD 		= LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(СтрокаТЗ.AccessorialCostsSumPerItem, Currency, Дата);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры // } RGS AArsentev 5/22/2017 11:30:20 AM - S-I-0002788

// { RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636

Функция AllocateCostsToTrips(Ссылка, BaseCostsSum) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	TripParcels.Parcel КАК Parcel
	|ПОМЕСТИТЬ ParcelsСписок
	|ИЗ
	|	Документ.Trip.Parcels КАК TripParcels
	|ГДЕ
	|	TripParcels.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Parcels.Ссылка КАК Parcel,
	|	ВЫБОР
	|		КОГДА Parcels.GrossWeightKGCorrected = 0
	|			ТОГДА Parcels.GrossWeightKG
	|		ИНАЧЕ Parcels.GrossWeightKGCorrected
	|	КОНЕЦ КАК GrossWeightKG,
	|	ВЫБОР
	|		КОГДА Parcels.CubicMetersCorrected = 0
	|			ТОГДА Parcels.CubicMeters
	|		ИНАЧЕ Parcels.CubicMetersCorrected
	|	КОНЕЦ КАК CubicMeters,
	|	Parcels.WarehouseTo КАК WarehouseTo
	|ПОМЕСТИТЬ ParcelsBT
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|		ПО (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = Parcels.Ссылка)
	|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)
	|ГДЕ
	|	Parcels.Ссылка В
	|			(ВЫБРАТЬ
	|				ParcelsСписок.Parcel
	|			ИЗ
	|				ParcelsСписок КАК ParcelsСписок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TripFinalDestinations.Ссылка КАК Trip,
	|	TripFinalDestinations.WarehouseTo,
	|	СУММА(TripFinalDestinations.Mileage) КАК Mileage
	|ПОМЕСТИТЬ TripFinalDestinationsBT
	|ИЗ
	|	Документ.Trip.FinalDestinations КАК TripFinalDestinations
	|ГДЕ
	|	TripFinalDestinations.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	TripFinalDestinations.Ссылка,
	|	TripFinalDestinations.WarehouseTo
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripFinalDestinationsBT.Trip,
	|	ParcelsBT.Parcel,
	|	ParcelsBT.GrossWeightKG,
	|	ParcelsBT.CubicMeters,
	|	TripFinalDestinationsBT.Mileage,
	|	0 КАК Max,
	|	0 КАК Base,
	|	0 КАК Rate
	|ИЗ
	|	ParcelsBT КАК ParcelsBT
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ TripFinalDestinationsBT КАК TripFinalDestinationsBT
	|		ПО ParcelsBT.WarehouseTo = TripFinalDestinationsBT.WarehouseTo";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТЗParсels = РезультатЗапроса.Выгрузить();
		ParselsCount = ТЗParсels.Количество();
		
		
		Для каждого СтрокаТЗ ИЗ ТЗParсels Цикл
			
			K = СтрокаТЗ.CubicMeters/4;
			Max = МАКС(СтрокаТЗ.GrossWeightKG/1000, K);
			СтрокаТЗ.Base = Max * СтрокаТЗ.Mileage;
						 
		КонецЦикла;
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParсels.ВыгрузитьКолонку("Base"), BaseCostsSum, ТЗParсels, "Rate");
		
		Возврат ТЗParсels;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

КонецФункции

Процедура СформироватьДвиженияrgsCostAllocationParcelsOfTrip()
	
	ТЗParсels = Неопределено;
	
		УстановитьПривилегированныйРежим(Истина);
	Если ДополнительныеСвойства.Свойство("ТЗParсels", ТЗParсels) И НЕ ТЗParсels = Неопределено Тогда		
		
		ТаблицаДвижений =  ТЗParсels.Скопировать( , "Trip,Parcel,Rate");
		
		НаборCostAllocationParselsOfTrip =  РегистрыСведений.rgsCostAllocationParcelsOfTrip.СоздатьНаборЗаписей();
		НаборCostAllocationParselsOfTrip.Записывать = Истина;
		НаборCostAllocationParselsOfTrip.Отбор.Trip.Установить(Ссылка);
		НаборCostAllocationParselsOfTrip.Прочитать();
		НаборCostAllocationParselsOfTrip.Загрузить(ТаблицаДвижений);
		НаборCostAllocationParselsOfTrip.Записать();	
		
	КонецЕсли;
	
		УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


