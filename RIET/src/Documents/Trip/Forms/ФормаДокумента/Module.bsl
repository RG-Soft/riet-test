
////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Draft) Тогда
		Объект.Draft = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Параметры.Свойство("МассивParcels") Тогда 
		ДобавитьParcelsИзПереданногоПараметра(Параметры.МассивParcels);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		// Заполним дополнительные колонки в ТЧ Parcels
		МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
		ЗаполнитьДополнительныеКолонки(МассивParcels);
		
		НастроитьВидимостьToTMS();
		
	КонецЕсли;
	
	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		ЗаполнитьДанныеAllocateCostsToTripsНаСервере();		
	КонецЕсли;
	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьParcelsИзПереданногоПараметра(МассивParcels)
	
	СтруктураПоискаParcel = Новый Структура("Parcel");
	
	Для Каждого Parcel из МассивParcels Цикл 
		
		СтруктураПоискаParcel.Parcel = Parcel;
		МассивСтрокParcel = Объект.Parcels.НайтиСтроки(СтруктураПоискаParcel);
		
		Если МассивСтрокParcel.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Parcels.Добавить();
		НоваяСтрока.Parcel = Parcel;
		
	КонецЦикла;
	
	// Заполним дополнительные колонки в ТЧ Parcels
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ЗаполнитьДополнительныеКолонки(МассивParcels);
	
	// FINAL DESTINATIONS
	// { RGS AGorlenko 22.04.2014 18:47:12 - S-I-0000686
	//МассивWarehouseTo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "WarehouseTo");
	//LocalDistributionКлиентСервер.ОбновитьTripFinalDestinations(Объект.FinalDestinations, МассивWarehouseTo);
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	LocalDistributionСервер.ОбновитьTripFinalDestinations(ОбъектДляСервера.FinalDestinations, МассивParcels, ?(ЗначениеЗаполнено(Объект.Final), Объект.Final, Объект.Draft));
	// } RGS AGorlenko 22.04.2014 18:47:20 - S-I-0000686
	
	НастроитьВидимостьToTMS();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьToTMS()
	
	Если Не ЗначениеЗаполнено(Объект.Final) Тогда 
		Возврат;	
	КонецЕсли;
	
	Если Объект.DomesticOBSentToTMS Тогда 
		Элементы.GroupDomesticOBToTMS.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.SendDomesticOBToTMS.Видимость = Не Объект.DomesticOBSentToTMS;
	Элементы.CancelDomesticOBToTMS.Видимость = Объект.DomesticOBSentToTMS;
	Элементы.DomesticOBSentToTMSDate.Видимость = Объект.DomesticOBSentToTMS;
	
	Элементы.GroupDomesticOBToTMS.Видимость = Документы.Trip.ПолучитьНеобходимостьDomesticOBToTMS(
		Объект.Final, РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"), 
		Объект.DomesticOB, Объект.ServiceProvider);
		
	//{ RGS AArsentev 15.09.2017 S-I-0003598
	//Элементы.DontSendInTMS.Видимость = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.WarehouseFrom, "RCACountry") <> Справочники.CountriesOfProcessLevels.AZ);
	//} RGS AArsentev 15.09.2017 S-I-0003598
		     	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Заполним дополнительные колонки в ТЧ Parcels
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ЗаполнитьДополнительныеКолонки(МассивParcels);
	 
	НастроитьВидимостьToTMS();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДокументСозданВТекущемУзле = РегистрыСведений.ОбъектыИнформационныхБаз.ОбъектСозданВТекущемУзле(Объект.Ссылка);
	
	//Draft трипы могут изменяться только той стороной, на которой созданы. 
	//Т.е. драфт трип, созданный НЕК, меняет только НЕК, драфт трип, созданный Шлюмберже, меняет только Шлюмберже (кроме перевода в состояние final).
	
	Если Не РольДоступна("РедактированиеТриповСозданныхСервисПровайдерами") И (Не ДокументСозданВТекущемУзле  
		// { RGS AGorlenko 05.11.2015 12:27:00 - трипы, созданные на нашей стороне, должны быть доступны
		//ИЛИ (Объект.Final <> '00010101' И ПланыОбмена.Leg7.СервисПровайдерУчаствуетВОбмене(Объект.ServiceProvider))) Тогда
		И ПланыОбмена.Leg7.СервисПровайдерУчаствуетВОбмене(Объект.ServiceProvider)) Тогда
		// } RGS AGorlenko 05.11.2015 12:27:45 - трипы, созданные на нашей стороне, должны быть доступны
		
		Если ПланыОбмена.Leg7.ДокументНеБудетВыгружатьсяПоДатеНачалаВыгрузки(?(Объект.Final = '00010101', Объект.Draft, Объект.Final), Объект.WarehouseFrom, Объект.ServiceProvider) Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.Найти("ГруппаШапка") <> Неопределено Тогда
			Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элементы.Найти("ГруппаHeader") <> Неопределено Тогда
			//Элементы.ГруппаHeader.ТолькоПросмотр = Истина;
			// для трипов со склада мэйджора equipment должен редактироваться
			СкладМэйджор = Справочники.Warehouses.НайтиПоКоду("RUS_MJRM");
			Для каждого ТекЭлемент Из Элементы.ГруппаHeader.ПодчиненныеЭлементы Цикл
				Если ТекЭлемент.Имя = "ГруппаEquipment" И Объект.WarehouseFrom = СкладМэйджор Тогда
					ТекЭлемент.ТолькоПросмотр = Ложь;
				Иначе
					ТекЭлемент.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		УстанавливатьДоступностьКнопокСохранения = Истина;
		Если Элементы.Найти("Страницы") <> Неопределено Тогда
			//Элементы.Страницы.ТолькоПросмотр = Истина; для более гибкой настройки делаем для каждой страницы
			Для каждого ТекСтраница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
				ТекСтраница.ТолькоПросмотр = Истина;
			КонецЦикла;
			// ETA и ATA оставляем доступными
			//ЕстьПустыеETA = Объект.FinalDestinations.НайтиСтроки(Новый Структура("ETA", '00010101')).Количество() > 0;
			//ЕстьПустыеATA = Объект.FinalDestinations.НайтиСтроки(Новый Структура("ATA", '00010101')).Количество() > 0;
			//Элементы.СтраницаFinalDestinations.ТолькоПросмотр = Не ЕстьПустыеETA И Не ЕстьПустыеATA;
			Элементы.СтраницаFinalDestinations.ТолькоПросмотр = Ложь;
			Для каждого ТекКолонка Из Элементы.FinalDestinations.ПодчиненныеЭлементы Цикл
				//ТекКолонка.ТолькоПросмотр = НЕ ((ТекКолонка.Имя = "FinalDestinationsETA" И ЕстьПустыеETA) ИЛИ (ТекКолонка.Имя = "FinalDestinationsATA" И ЕстьПустыеATA));
				ТекКолонка.ТолькоПросмотр = НЕ ((ТекКолонка.Имя = "FinalDestinationsETA") ИЛИ (ТекКолонка.Имя = "FinalDestinationsATA"));
				Если НЕ ТекКолонка.ТолькоПросмотр Тогда
					УстанавливатьДоступностьКнопокСохранения = Ложь;
				КонецЕсли;
			КонецЦикла;
			// specialist должен быть доступен для редактирования
			Элементы.СтраницаOther.ТолькоПросмотр = Ложь;
			
			// для редактирования активити
			Элементы.СтраницаItems.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
		Если УстанавливатьДоступностьКнопокСохранения Тогда
			Если Элементы.Найти("ФормаЗаписатьИЗакрыть") <> Неопределено Тогда
				Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
			КонецЕсли;
			Если Элементы.Найти("ФормаЗаписать") <> Неопределено Тогда
				Элементы.ФормаЗаписать.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.Найти("ФормаУстановитьПометкуУдаления") <> Неопределено Тогда
			Элементы.ФормаУстановитьПометкуУдаления.Доступность = Ложь;
		КонецЕсли;
		Если Элементы.Найти("ФормаУдалить") <> Неопределено Тогда
			Элементы.ФормаУдалить.Доступность = Ложь;
		КонецЕсли;
		
	// { RGS AGorlenko 19.10.2015 18:15:45 - по просьбе Екатерины Брежневой (вопрос S-I-0001305) делаем дату final доступной
	//ИначеЕсли ДокументСозданВТекущемУзле И ПланыОбмена.Leg7.СервисПровайдерУчаствуетВОбмене(Объект.ServiceProvider) Тогда
	//	// сотрудники Шлюмберже не могут переводить трип в состояние final для сервис-провайдеров, участвующих в обмене
	//	Элементы.Final.ТолькоПросмотр = НЕ ПланыОбмена.Leg7.ДокументНеБудетВыгружатьсяПоДатеНачалаВыгрузки(Объект.Draft, Объект.WarehouseFrom, Объект.ServiceProvider)
	//		И НЕ РольДоступна("РедактированиеТриповСозданныхСервисПровайдерами");		
	// } RGS AGorlenko 19.10.2015 18:19:05 - по просьбе Екатерины Брежневой (вопрос S-I-0001305) делаем дату final доступной
		
	КонецЕсли;
	
	Элементы.СтраницаCosts.ТолькоПросмотр = Ложь;
    Элементы.FinalDestinationsMileage.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПриНеобходимостиДоступностьETAиATA()

	//ЕстьПустыеETA = Объект.FinalDestinations.НайтиСтроки(Новый Структура("ETA", '00010101')).Количество() > 0;
	//ЕстьПустыеATA = Объект.FinalDestinations.НайтиСтроки(Новый Структура("ATA", '00010101')).Количество() > 0;
	//
	//ИзменилиДоступность = Ложь;
	//Если Элементы.СтраницаFinalDestinations.ТолькоПросмотр Тогда
	//	Элементы.СтраницаFinalDestinations.ТолькоПросмотр = Не ЕстьПустыеETA И Не ЕстьПустыеATA;
	//КонецЕсли;
	//Для каждого ТекКолонка Из Элементы.FinalDestinations.ПодчиненныеЭлементы Цикл
	//	Если ТекКолонка.Имя = "FinalDestinationsETA" И ТекКолонка.ТолькоПросмотр И ЕстьПустыеETA Тогда
	//		ТекКолонка.ТолькоПросмотр = Ложь;
	//		ИзменилиДоступность = Истина
	//	ИначеЕсли ТекКолонка.Имя = "FinalDestinationsATA" И ТекКолонка.ТолькоПросмотр И ЕстьПустыеATA Тогда
	//		ТекКолонка.ТолькоПросмотр = Ложь;
	//		ИзменилиДоступность = Истина;
	//	Иначе
	//		ТекКолонка.ТолькоПросмотр = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ИзменилиДоступность Тогда
	//	Если Элементы.Найти("ФормаЗаписатьИЗакрыть") <> Неопределено Тогда
	//		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Истина;
	//	КонецЕсли;
	//	Если Элементы.Найти("ФормаЗаписать") <> Неопределено Тогда
	//		Элементы.ФормаЗаписать.Доступность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры


Процедура СделатьФормуНедоступнойДляРедактирования()
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПодвалParcels();
	// { RGS AGorlenko 15.12.2014 16:23:25 - установка доступности кнопок сохранения при модифицированности
	ПодключитьОбработчикОжидания("УстановитьДоступностьКнопокСохранения", 1);
	// } RGS AGorlenko 15.12.2014 16:24:09 - установка доступности кнопок сохранения при модифицированности
	
	НастроитьВидимостьПоTypeOfTransport();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокСохранения()

	Если Модифицированность Тогда
	
		Если Элементы.Найти("ФормаЗаписатьИЗакрыть") <> Неопределено Тогда
			Элементы.ФормаЗаписатьИЗакрыть.Доступность = Истина;
		КонецЕсли;
		Если Элементы.Найти("ФормаЗаписать") <> Неопределено Тогда
			Элементы.ФормаЗаписать.Доступность = Истина;
		КонецЕсли;
	
	КонецЕсли;	

КонецПроцедуры

	
////////////////////////////////////////////////////////////////////////
                              
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
	// { RGS AGorlenko 04.06.2014 15:28:30 - S-I-0000763
	ОбновитьТаблицуFinalDestinationsНаСервере();
	// } RGS AGorlenko 04.06.2014 15:30:20 - S-I-0000763
	
	// перем модуля
	ТекущийОбъект.ТаблицаItems = ТаблицаItems.Выгрузить(, "Ссылка,КостЦентр,Активити,НомерЗаявкиНаЗакупку,СтрокаЗаявкиНаЗакупку,DefaultActivity");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	  		
	
	ЭтаФорма.Прочитать();
	// { RGS ASeryakov 15.02.2018 11:26:39 - S-I-0004636
	ЗаполнитьДанныеAllocateCostsToTripsНаСервере();
	// } RGS ASeryakov 15.02.2018 11:26:39 - S-I-0004636
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанTrip", Объект.Ссылка, ЭтаФорма); 

	НастроитьВидимостьПоTypeOfTransport();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененParcel" Тогда 
		
		СтруктураПоискаПоParcel = Новый Структура("Parcel", Параметр);
		НайденныеСтроки = Объект.Parcels.НайтиСтроки(СтруктураПоискаПоParcel);
		Если НайденныеСтроки.Количество() Тогда
			
			МассивParcels = Новый Массив;
			МассивParcels.Добавить(Параметр);
			ЗаполнитьДополнительныеКолонки(МассивParcels);
			ОбновитьПодвалParcels();
			ОбновитьТаблицуFinalDestinations();
								
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписанTrip" И Параметр = Объект.Ссылка И Источник <> ЭтаФорма Тогда
		
		ЭтаФорма.Прочитать();	
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура FinalПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

&НаКлиенте
Процедура WarehouseFromНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWarehouseFrom = LocalDistributionСервер.ПолучитьСписокLeg7WarehouseFrom();
	ЭлементСписка = ВыбратьИзСписка(СписокWarehouseFrom, Элементы.WarehouseFrom);

	Если ЭлементСписка <> Неопределено Тогда 
		Объект.WarehouseFrom = ЭлементСписка.Значение;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура SaveComment(Команда)
	
	Если Не Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("No need to save comment");
		Возврат;
	КонецЕсли;
	
	Если Не ИзмененТолькоКомментарий() Тогда
		Ответ = Вопрос("There is a changed data besides the comment. If you continue, the data changes will be lost. Continue?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	SaveCommentНаСервере();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ИзмененТолькоКомментарий()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	// проверим изменилось ли еще что-то кроме комента
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ОбъектДляСервера);
	//проверяем неизменность всех ТЧ
	СписокТЧ = ОбъектДляСервера.Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	Если ИзмененныеРеквизиты.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты[0] = "Comment";
	
КонецФункции

&НаСервере
Функция SaveCommentНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ДокОбъект = ОбъектДляСервера.Ссылка.ПолучитьОбъект();
	ДокОбъект.Comment = ОбъектДляСервера.Comment;
	ДокОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ДокОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save comment!");
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ПриЧтенииНаСервере(ДокОбъект);

КонецФункции

////////////////////////////////////////////////////////////////////////
// PARCELS

// ВСПОМОГАТЕЛЬНОЕ

&НаСервере
Процедура ЗаполнитьДополнительныеКолонки(МассивParcels)
	                       		
	Если МассивParcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСвойств = "LengthCM, WidthCM, HeightCM, GrossWeightKG, CubicMeters, WarehouseTo, PackingType, POList, DOCNo, HazardClass, Urgency, "
	+ "WarehouseToAddress1, WarehouseToAddress2, WarehouseToAddress3, WarehouseFromAddress1, WarehouseFromAddress2, WarehouseFromAddress3, WarehouseFrom, Comment";
	СоответствиеСтруктур = ПолучитьЗначенияРеквизитовParcels(МассивParcels, СтрокаСвойств);

	// { RGS AGorlenko 04.04.2014 15:23:19 - S-I-0000660
	ДанныеTMS = ПолучитьДанныеTMSParcels(МассивParcels, Объект.Final, Объект.Ссылка);
	СтруктураПоискаTMS = Новый Структура("WarehouseTo, Gold, LegalEntity, AU, Activity");
	// } RGS AGorlenko 04.04.2014 15:23:40 - S-I-0000660
	
	СтруктураПоискаParcel = Новый Структура("Parcel");					
	Для Каждого СоответствиеParcel из СоответствиеСтруктур Цикл 
		
		СтруктураПоискаParcel.Parcel = СоответствиеParcel.Ключ;
		СтрокаParcel = Объект.Parcels.НайтиСтроки(СтруктураПоискаParcel)[0];
		ЗаполнитьЗначенияСвойств(СтрокаParcel, СоответствиеParcel.Значение, СтрокаСвойств);
		
		// { RGS AGorlenko 04.04.2014 15:23:19 - S-I-0000660
		СтрокиДанныхTMS = ДанныеTMS.НайтиСтроки(СтруктураПоискаParcel);
		Если СтрокиДанныхTMS.Количество() > 0 Тогда
			СтрокаParcel.OBNo = СтрокиДанныхTMS[0].OBNo;
			СтрокаParcel.WONo = СтрокиДанныхTMS[0].WONo;
		КонецЕсли;
		// } RGS AGorlenko 04.04.2014 15:23:40 - S-I-0000660
		
	КонецЦикла;
	
	ТаблицаItems.Очистить();
	ТЗданныхItems = LocalDistributionСервер.ПолучитьДанныеItemsToTMS(МассивParcels, Объект.Final);
	
	Для Каждого СтрокаТЗданныхItem из ТЗданныхItems Цикл 
		НовСтрокаТЗ = ТаблицаItems.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗданныхItem);
	КонецЦикла;
	
	// { RGS AGorlenko 04.04.2014 16:52:49 - S-I-0000660
	ДанныеWO = ДанныеTMS.Скопировать(, "OBNo, WONo");
	ДанныеWO.Свернуть("OBNo, WONo");
	СтруктураПоискаOB = Новый Структура("OBNo");
	Для каждого СтрокаWO Из ДанныеWO Цикл
		СтруктураПоискаOB.OBNo = СтрокаWO.OBNo;
		НайденныеСтроки = Объект.DomesticOB.НайтиСтроки(СтруктураПоискаOB);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].WONo = СтрокаWO.WONo;
		КонецЕсли;
	КонецЦикла;
	// } RGS AGorlenko 04.04.2014 16:52:50 - S-I-0000660
	
	// CREWs
	ТаблицаCREWs = РегистрыСведений.WaybillsAndCREWs.ПолучитьДанныеПоТрипу(Объект.Ссылка);
	ЕстьДанныеПоCREWs = ТаблицаCREWs.Количество() > 0;
	Элементы.FinalDestinationsCREW.Видимость = ЕстьДанныеПоCREWs;
	Если ЕстьДанныеПоCREWs Тогда
		Для каждого СтрокаFinalDestinations Из Объект.FinalDestinations Цикл
			СтрокаCREWs = "";
			МассивWB = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаFinalDestinations.Waybill, ",");
			Для каждого ТекWB Из МассивWB Цикл
				НайденнаяСтрока = ТаблицаCREWs.Найти(СокрЛП(ТекWB), "Waybill");
				Если НайденнаяСтрока <> Неопределено Тогда
					СтрокаCREWs = СтрокаCREWs + НайденнаяСтрока.CREW + ", ";
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(СтрокаCREWs) Тогда
				СтрокаCREWs = Лев(СтрокаCREWs, СтрДлина(СтрокаCREWs) -2);
				СтрокаFinalDestinations.CREW = СтрокаCREWs;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеTMSParcels(МассивParcels, Final, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	Запрос.УстановитьПараметр("Final", Final);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	// { RGS AGorlenko 11.11.2015 15:20:54 - поддержка периодичночти AUs and Legal entities
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	TripDomesticOB.OBNo,
	//               |	TripDomesticOB.WarehouseTo,
	//               |	TripDomesticOB.Gold,
	//               |	TripDomesticOB.LegalEntity,
	//               |	TripDomesticOB.AU,
	//               |	TripDomesticOB.Activity
	//               |ПОМЕСТИТЬ ВТ_OB
	//               |ИЗ
	//               |	Документ.Trip.DomesticOB КАК TripDomesticOB
	//               |ГДЕ
	//               |	TripDomesticOB.Ссылка = &Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ParcelsДетали.Ссылка.WarehouseTo,
	//               |	ВЫБОР
	//               |		КОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	//               |			ТОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.LegalEntityForLeg7
	//               |		ИНАЧЕ AUsAndLegalEntities.LegalEntity
	//               |	КОНЕЦ КАК LegalEntity,
	//               |	ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.Инвойс.Голд, ЛОЖЬ) КАК Gold,
	//               |	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	//               |	ParcelsДетали.СтрокаИнвойса.Активити КАК Activity,
	//               |	ParcelsДетали.Ссылка КАК Parcel
	//               |ПОМЕСТИТЬ ВТ_Parcels
	//               |ИЗ
	//               |	Справочник.Parcels.Детали КАК ParcelsДетали
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities КАК AUsAndLegalEntities
	//               |		ПО ParcelsДетали.СтрокаИнвойса.SoldTo = AUsAndLegalEntities.ParentCompany
	//               |			И ParcelsДетали.СтрокаИнвойса.КостЦентр = AUsAndLegalEntities.AU,
	//               |	Документ.Trip.DomesticOB КАК TripDomesticOB
	//               |ГДЕ
	//               |	ParcelsДетали.Ссылка В(&МассивParcels)
	//               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.StartOfExportToTMS <= &Final
	//               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining <> ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.ПустаяСсылка)
	//               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.StartOfExportToTMS <> ДАТАВРЕМЯ(1, 1, 1)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_Parcels.WarehouseTo,
	//               |	ВТ_Parcels.LegalEntity,
	//               |	ВТ_Parcels.Gold,
	//               |	ВТ_Parcels.AU,
	//               |	ВТ_Parcels.Activity,
	//               |	ВТ_Parcels.Parcel,
	//               |	ВТ_OB.OBNo,
	//               |	ЕСТЬNULL(OBNoAndWONo.WO, """") КАК WONo
	//               |ИЗ
	//               |	ВТ_Parcels КАК ВТ_Parcels
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_OB КАК ВТ_OB
	//               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.OBNoAndWONo КАК OBNoAndWONo
	//               |			ПО ВТ_OB.OBNo = OBNoAndWONo.OBNo
	//               |		ПО ВТ_Parcels.WarehouseTo = ВТ_OB.WarehouseTo
	//               |			И ВТ_Parcels.LegalEntity = ВТ_OB.LegalEntity
	//               |			И ВТ_Parcels.Gold = ВТ_OB.Gold
	//               |			И ВТ_Parcels.AU = ВТ_OB.AU
	//               |			И ВТ_Parcels.Activity = ВТ_OB.Activity";
	Запрос.Текст = "ВЫБРАТЬ
	               |	TripDomesticOB.OBNo,
	               |	TripDomesticOB.WarehouseTo,
	               |	TripDomesticOB.Gold,
	               |	TripDomesticOB.LegalEntity,
	               |	TripDomesticOB.AU,
	               |	TripDomesticOB.Activity
	               |ПОМЕСТИТЬ ВТ_OB
	               |ИЗ
	               |	Документ.Trip.DomesticOB КАК TripDomesticOB
	               |ГДЕ
	               |	TripDomesticOB.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ParcelsДетали.Ссылка.WarehouseTo,
	               |	ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.Инвойс.Голд, ЛОЖЬ) КАК Gold,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	               |	ParcelsДетали.СтрокаИнвойса.Активити КАК Activity,
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo КАК SoldTo
	               |ПОМЕСТИТЬ ВТ_Parcels
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали,
	               |	Документ.Trip.DomesticOB КАК TripDomesticOB
	               |ГДЕ
	               |	ParcelsДетали.Ссылка В(&МассивParcels)
	               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.StartOfExportToTMS <= &Final
	               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining <> ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.ПустаяСсылка)
	               |	И ParcelsДетали.СтрокаИнвойса.SoldTo.StartOfExportToTMS <> ДАТАВРЕМЯ(1, 1, 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Parcels.WarehouseTo,
	               |	ВТ_Parcels.Gold,
	               |	ВТ_Parcels.AU,
	               |	ВТ_Parcels.Activity,
	               |	ВТ_Parcels.Parcel,
	               |	ВТ_OB.OBNo,
	               |	ЕСТЬNULL(OBNoAndWONo.WO, """") КАК WONo,
	               |	ВЫБОР
	               |		КОГДА ВТ_Parcels.SoldTo.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	               |			ТОГДА ВТ_Parcels.SoldTo.LegalEntityForLeg7
	               |		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	               |	КОНЕЦ КАК LegalEntity
	               |ИЗ
	               |	ВТ_Parcels КАК ВТ_Parcels
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_OB КАК ВТ_OB
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.OBNoAndWONo КАК OBNoAndWONo
	               |			ПО ВТ_OB.OBNo = OBNoAndWONo.OBNo
	               |		ПО ВТ_Parcels.WarehouseTo = ВТ_OB.WarehouseTo
	               |			И ВТ_Parcels.Gold = ВТ_OB.Gold
	               |			И ВТ_Parcels.AU = ВТ_OB.AU
	               |			И ВТ_Parcels.Activity = ВТ_OB.Activity
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	               |				&Final,
	               |				(AU, ParentCompany) В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ВТ_Parcels.AU,
	               |						ВТ_Parcels.SoldTo
	               |					ИЗ
	               |						ВТ_Parcels КАК ВТ_Parcels)) КАК AUsAndLegalEntitiesСрезПоследних
	               |		ПО ВТ_Parcels.SoldTo = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	               |			И ВТ_Parcels.AU = AUsAndLegalEntitiesСрезПоследних.AU";
	// } RGS AGorlenko 11.11.2015 15:20:59 - поддержка периодичночти AUs and Legal entities
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

           
&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовParcels(МассивParcels, СтрокаСвойств)
	
	СоответствиеСтруктур = Новый Соответствие;
	
	Если МассивParcels.Количество() = 0 Тогда
		Возврат СоответствиеСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Parcels.LengthCMCorrected = 0
		|			ТОГДА Parcels.LengthCM
		|		ИНАЧЕ Parcels.LengthCMCorrected
		|	КОНЕЦ КАК LengthCM,
		|	ВЫБОР
		|		КОГДА Parcels.WidthCMCorrected = 0
		|			ТОГДА Parcels.WidthCM
		|		ИНАЧЕ Parcels.WidthCMCorrected
		|	КОНЕЦ КАК WidthCM,
		|	ВЫБОР
		|		КОГДА Parcels.HeightCMCorrected = 0
		|			ТОГДА Parcels.HeightCM
		|		ИНАЧЕ Parcels.HeightCMCorrected
		|	КОНЕЦ КАК HeightCM,
		|	Parcels.WarehouseTo КАК WarehouseTo,
		|	ВЫБОР
		|		КОГДА Parcels.GrossWeightKGCorrected = 0
		|			ТОГДА Parcels.GrossWeightKG
		|		ИНАЧЕ Parcels.GrossWeightKGCorrected
		|	КОНЕЦ КАК GrossWeightKG,
		|	ВЫБОР
		|		КОГДА Parcels.CubicMetersCorrected = 0
		|			ТОГДА Parcels.CubicMeters
		|		ИНАЧЕ Parcels.CubicMetersCorrected
		|	КОНЕЦ КАК CubicMeters,
		|	Parcels.Ссылка КАК Parcel,
		|	Parcels.POList КАК POList,
		|	Parcels.Comment КАК Comment,
		|	Parcels.PackingType КАК PackingType,
		|	Parcels.WarehouseFrom.Address1,
		|	Parcels.WarehouseFrom.Address2,
		|	Parcels.WarehouseFrom.Address3,
		|	Parcels.WarehouseTo.Address1,
		|	Parcels.WarehouseTo.Address2,
		|	Parcels.WarehouseTo.Address3,
		|	Parcels.HazardClass,
		|	Parcels.Urgency,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Номер КАК DOCNo,
		|	Parcels.WarehouseFrom
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|		ПО (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = Parcels.Ссылка)
		|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)
		|ГДЕ
		|	Parcels.Ссылка В(&МассивParcels)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураParcel = Новый Структура(СтрокаСвойств);
		ЗаполнитьЗначенияСвойств(СтруктураParcel, Выборка);		
		СоответствиеСтруктур.Вставить(Выборка.Parcel, СтруктураParcel);
		
	КонецЦикла;
	
	Возврат СоответствиеСтруктур;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПодвалParcels()
	
	// { RGS AGorlenko 08.02.2016 20:11:21 - если у пользователя нет прав на редактирование, то не обновляем
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	// } RGS AGorlenko 08.02.2016 20:13:19 - если у пользователя нет прав на редактирование, то не обновляем
	
	ИтогGrossWeightKG = Окр(Объект.Parcels.Итог("GrossWeightKG"), 3);
	Если Объект.GrossWeightKG <> ИтогGrossWeightKG Тогда
		Объект.GrossWeightKG = ИтогGrossWeightKG;
		Модифицированность = Истина;
	КонецЕсли;
	
	ИтогCubicMeters = Окр(Объект.Parcels.Итог("CubicMeters"), 4);
	Если Объект.CubicMeters <> ИтогCubicMeters Тогда
		Объект.CubicMeters = ИтогCubicMeters;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ParcelsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗначениеЗаполнено(Объект.Final) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not add parcels to Final Trip!",
			, "Parcels", "Объект", Отказ);
		Возврат;
	КонецЕсли; 
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Draft) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Draft is empty!",
			, "Draft", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.WarehouseFrom) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Warehouse from is empty!",
			, "WarehouseFrom", "Объект");
		Возврат;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзTrip");
	СтруктураНастройки.Вставить("Draft", Объект.Draft);
	СтруктураНастройки.Вставить("WarehouseFrom", Объект.WarehouseFrom);
	СтруктураНастройки.Вставить("CurrentTrip", Объект.Ссылка);
	СтруктураНастройки.Вставить("CurrentParcels", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels,"Parcel"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.Parcels.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() 
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.Parcels") Тогда

		Для Каждого Parcel Из ВыбранноеЗначение Цикл
			НоваяСтрокаParcels = Объект.Parcels.Добавить();
			НоваяСтрокаParcels.Parcel = Parcel;
		КонецЦикла;
		
		Модифицированность = Истина;
		ЗаполнитьДополнительныеКолонки(ВыбранноеЗначение);
		ОбновитьПодвалParcels();
		ОбновитьТаблицуFinalDestinations();
						
	КонецЕсли;

	// { RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	ОчиститьRateParcels();
	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
КонецПроцедуры

&НаКлиенте
Процедура ParcelsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Parcel) Тогда
		ОткрытьЗначение(ТекущиеДанные.Parcel);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Final) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not delete parcels from Final Trip!",
			, "Parcels", "Объект", Отказ);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПослеУдаления(Элемент)
	
	ОбновитьТаблицуFinalDestinations();
    ОбновитьПодвалParcels();

КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();
    // { RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
	ОчиститьRateParcels();
	// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// FINAL DESTINATIONS

&НаКлиенте
Процедура ОбновитьТаблицуFinalDestinations()
	
	// FINAL DESTINATIONS
	// { RGS AGorlenko 22.04.2014 18:48:54 - S-I-0000686
	//МассивWarehouseTo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "WarehouseTo");
	//	   
	//БылиИзменения = LocalDistributionКлиентСервер.ОбновитьTripFinalDestinations(Объект.FinalDestinations, МассивWarehouseTo);
	БылиИзменения = ОбновитьТаблицуFinalDestinationsНаСервере();
	// } RGS AGorlenko 22.04.2014 18:48:59 - S-I-0000686
	
	Если БылиИзменения Тогда
		Модифицированность = Истина;
	КонецЕсли;
			     	
КонецПроцедуры

&НаСервере
Функция ОбновитьТаблицуFinalDestinationsНаСервере()
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	БылиИзменения = LocalDistributionСервер.ОбновитьTripFinalDestinations(ОбъектДляСервера.FinalDestinations, МассивParcels, ?(ЗначениеЗаполнено(Объект.Final), Объект.Final, Объект.Draft));
	Если БылиИзменения Тогда
		ЗначениеВРеквизитФормы(ОбъектДляСервера.FinalDestinations, "Объект.FinalDestinations");
	КонецЕсли;
	
	Возврат БылиИзменения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// ITEMS TO TMS

&НаКлиенте
Процедура ТаблицаItemsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НомерЗаявкиНаЗакупку" 
		ИЛИ Поле.Имя = "СтрокаЗаявкиНаЗакупку"
		ИЛИ Поле.Имя = "КостЦентр"
		ИЛИ Поле.Имя = "Активити" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТаблицаItems.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		ОткрытьЗначение(ТекДанные.Ссылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура FillEmptyPOLines(Команда)
		
	FillEmptyPOLinesНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура FillEmptyPOLinesНаСервере()
	
	Для Каждого Стр Из ТаблицаItems Цикл
		
		ИндексСтр = ТаблицаItems.Индекс(Стр);
		Стр.НомерЗаявкиНаЗакупку = СокрЛП(Стр.НомерЗаявкиНаЗакупку);
		
		Если НЕ ЗначениеЗаполнено(Стр.СтрокаЗаявкиНаЗакупку) И ЗначениеЗаполнено(Стр.НомерЗаявкиНаЗакупку) Тогда
			
			КоличествоНайденныхPOLines = ЗаполнитьPOLineВInvoiceLine(Стр);
			
			Если КоличествоНайденныхPOLines = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find PO line for Item #" + СокрЛП(Стр.Ссылка) + "!
					|Try to select PO line manually.",
					, "ТаблицаItems[" + (ИндексСтр) + "].СтрокаЗаявкиНаЗакупку");
				
			Иначе
				
				Модифицированность = Истина;
					
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьPOLineВInvoiceLine(СтрокаItem) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("PONo", СтрокаItem.НомерЗаявкиНаЗакупку);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	POLines.Ссылка КАК POLine,
		|	POLines.КодПоставщика КАК PartNo,
		|	POLines.Владелец.БОРГ.Компания КАК ParentCompany,
		|	POLines.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
		|	POLines.Каталог КАК Catalog,
		|	POLines.Классификатор КАК ERPTreatment,
		|	POLines.Владелец.СтранаПоставщика КАК CountryOfOrigin,
		|	POLines.КостЦентр КАК AU,
		|	POLines.КостЦентр.DefaultActivity КАК AUActivity,
		|	POLines.АктивитиКод КАК Activity,
		|	POLines.Количество КАК Qty,
		|	POLines.ЕдиницаИзмерения КАК QtyUOM,
		|	POLines.Цена КАК Price,
		|	POLines.Валюта КАК Currency
		|ИЗ
		|	Справочник.СтрокиЗаявкиНаЗакупку КАК POLines
		|ГДЕ
		|	НЕ POLines.ПометкаУдаления
		|	И НЕ POLines.Владелец.ПометкаУдаления
		|	И POLines.Владелец.Код = &PONo";
    		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоPOLine = Выборка.Количество();
	Если КоличествоPOLine > 0 Тогда
		
		Выборка.Следующий();
		
		InvoiceLineОбъект = СтрокаItem.Ссылка.ПолучитьОбъект();
		
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтрокаЗаявкиНаЗакупку, Выборка.POLine);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Каталог, Выборка.Catalog);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Классификатор, Выборка.ERPTreatment);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.КостЦентр, Выборка.AU);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(Выборка.Activity));
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтранаПроисхождения, СокрЛП(Выборка.CountryOfOrigin));
		Если НЕ ЗначениеЗаполнено(InvoiceLineОбъект.Активити) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(Выборка.AUActivity));
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Цена, Выборка.Price);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Сумма, InvoiceLineОбъект.Цена * InvoiceLineОбъект.Количество);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Currency, Выборка.Currency);
		
		Попытка
			InvoiceLineОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to save #" + СокрЛП(СтрокаItem.Ссылка) + "!",
					, "ТаблицаItems[" + (СтрокаItem.НомерСтрокиИнвойса-1) + "].Ссылка");
			Возврат КоличествоPOLine;
		КонецПопытки;
		
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаItem.СтрокаЗаявкиНаЗакупку, InvoiceLineОбъект.СтрокаЗаявкиНаЗакупку);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаItem.КостЦентр, InvoiceLineОбъект.КостЦентр);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаItem.Активити, InvoiceLineОбъект.Активити);
		
	КонецЕсли;
	
	Возврат КоличествоPOLine;
	
КонецФункции

&НаКлиенте
Процедура FillEmptyActivity(Команда)
	
	FillEmptyActivityНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура FillEmptyActivityНаСервере()
	
	Для Каждого Стр Из ТаблицаItems Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.Активити) И ЗначениеЗаполнено(Стр.КостЦентр) Тогда
			
			Активити = СокрЛП(Стр.КостЦентр.DefaultActivity);
			
			Если НЕ ЗначениеЗаполнено(Активити) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Default Activity in AU #" + СокрЛП(Стр.КостЦентр) + "!
					|Try to fill Activity manually.",
					, "ТаблицаItems[" + (Стр.НомерСтрокиИнвойса-1) + "].Активити");
											
			Иначе
				
				Стр.Активити = Активити;
				Модифицированность = Истина;
					
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявкиНаЗакупкуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаItems.ТекущиеДанные;
	CustomsКлиент.ОткрытьPOПоНомеру(СокрЛП(ТекущиеДанные.НомерЗаявкиНаЗакупку), ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗаявкиНаЗакупкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТЗItems = Элементы.ТаблицаItems;
	ТекущиеДанные = ТЗItems.ТекущиеДанные;
	
	PONo = СокрЛП(ТекущиеДанные.НомерЗаявкиНаЗакупку);	
	Если НЕ ЗначениеЗаполнено(PONo) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose PO no. first!",
			, "ТаблицаItems[" + ТЗItems.ТекущаяСтрока + "].НомерЗаявкиНаЗакупку");
		Возврат;
	
	КонецЕсли;
		
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзInvoice"); 
					
	СтруктураНастройки.Вставить("PONo", PONo);
	
	PartNo = СокрЛП(ТекущиеДанные.КодПоИнвойсу);
	Если ЗначениеЗаполнено(PartNo) Тогда
		СтруктураНастройки.Вставить("PartNo", PartNo);
	КонецЕсли; 
				
	Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		СтруктураНастройки.Вставить("Qty", ТекущиеДанные.Количество);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);			
	ОткрытьФорму("Справочник.СтрокиЗаявкиНаЗакупку.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаItems.ТекущиеДанные;
	
	ImportExportКлиентСервер.ПерезаполнитьInvoiceLineПоPOLineПриНеобходимости(ТекущиеДанные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаItems.ТекущиеДанные;

	ТекущиеДанные.DefaultActivity = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КостЦентр, "DefaultActivity");
	
	Модифицированность = Истина;
	 	
КонецПроцедуры

&НаКлиенте
Процедура АктивитиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

   
////////////////////////////////////////////////////////////////////////
// SEND TO TMS

&НаКлиенте
Процедура SendDomesticOBToTMS(Команда)
	
	НесовпаденияПоАктивити = Ложь;
	Для Каждого СтрItems из ТаблицаItems Цикл 

		Если ЗначениеЗаполнено(СтрItems.Активити)
			И ЗначениеЗаполнено(СтрItems.DefaultActivity) 
			И СтрItems.Активити <> СтрItems.DefaultActivity Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non critical error: for Item " + СокрЛП(СтрItems.Ссылка) + ": 'Activity' differs from 'AU default Activity'!",
				, "ТаблицаItems[" + ТаблицаItems.Индекс(СтрItems) + "].Активити",, НесовпаденияПоАктивити);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.DomesticOBSentToTMS Тогда
		Сообщить("Domestic OB was already sent to TMS!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщить("Save new Trip before sending OB to TMS!");
		Возврат;	
	КонецЕсли;
	
	Ответ = Вопрос(
	    ?(НесовпаденияПоАктивити, "For some Items 'Activity' differs from 'AU default Activity', 
		|", "") +
		"Send Domestic OB to TMS?",
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	SendDomesticOBToTMSНаСервере();
	
	// { RGS AGorlenko 01.12.2014 16:43:35 - в случае добавления отсутствующих кост-центров надо разрешить проставить ETA
	ВключитьПриНеобходимостиДоступностьETAиATA();
	// } RGS AGorlenko 01.12.2014 16:44:32 - в случае добавления отсутствующих кост-центров надо разрешить проставить ETA
	
КонецПроцедуры

&НаСервере
Процедура SendDomesticOBToTMSНаСервере()
	
	НачатьТранзакцию();
	
	Объект.DomesticOBSentToTMS = Истина;
	Объект.DomesticOBSentToTMSDate = ТекущаяДата();
	
	Попытка
		Записать(Новый Структура);
	Исключение
		ОтменитьТранзакцию();
		Объект.DomesticOBSentToTMS = Ложь;
		Объект.DomesticOBSentToTMSDate = '00010101';
		Сообщить("Failed to save Trip: 
			| " + ОписаниеОшибки());
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;

	Попытка
		Документы.Trip.PushTripToTMS(Объект.Ссылка, Объект.DomesticOB.Выгрузить());
	Исключение
		ОтменитьТранзакцию();  
		Объект.DomesticOBSentToTMS = Ложь;
		Объект.DomesticOBSentToTMSDate = '00010101';
		Сообщить("Failed to push Trip to TMS!
			| " + ОписаниеОшибки());
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;

	ЗафиксироватьТранзакцию();
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

// Cancel

&НаКлиенте
Процедура CancelDomesticOBToTMS(Команда)
	
	Если НЕ Объект.DomesticOBSentToTMS Тогда
		Сообщить("Domestic OB of current Trip was not sent to TMS!");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(
		"Cancel Domestic OB sent to TMS?
		|(The system will only uncheck flag, nothing will be changed in TMS)",
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	CancelOBToTMSНаСервере();
	
	// { RGS AGorlenko 01.12.2014 16:43:35 - в случае добавления отсутствующих кост-центров надо разрешить проставить ETA
	ВключитьПриНеобходимостиДоступностьETAиATA();
	// } RGS AGorlenko 01.12.2014 16:44:32 - в случае добавления отсутствующих кост-центров надо разрешить проставить ETA
	
КонецПроцедуры

&НаСервере
Процедура CancelOBToTMSНаСервере()
	
	НачатьТранзакцию();
	
	Объект.DomesticOBSentToTMS = Ложь;
	Объект.DomesticOBSentToTMSDate = '00010101';
	
	Попытка
		Записать(Новый Структура);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РГСофтКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// COSTS

&НаКлиенте
Процедура CostsПриИзменении(Элемент)
	
	ПриИзмененииCostsSum();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииCostsSum()
	
	Объект.TotalCostsSum = Объект.BaseCostsSum + Объект.Costs.Итог("Sum");
		
КонецПроцедуры

&НаКлиенте
Процедура BaseCostSumПриИзменении(Элемент)
	
	ПриИзмененииCostsSum();
	
	Объект.BaseCostsSumSLBUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(Объект.BaseCostsSum, Объект.Currency, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ZeroBaseCostSumПриИзменении(Элемент)
	
	Объект.BaseCostsSum = 0;
	Объект.BaseCostsSumSLBUSD = 0;
	
	ПриИзмененииCostsSum();
	
	НастроитьВилимостьBaseCostSum();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВилимостьBaseCostSum()
	
	Элементы.BaseCostSum.ТолькоПросмотр = Объект.ZeroBaseCostsSum;
	Элементы.BaseCostSum.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.BaseCostsSum) И Не Объект.ZeroBaseCostsSum;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////
// SAVE TMS TR AS XML

&НаКлиенте
Процедура SaveAsXML(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		          				
		Сообщить("Trip is not saved!");
		Возврат;
			     				
	КонецЕсли;
        		
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
	ДиалогВыбораФайла.Фильтр = "XML files|*.xml";	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;	
	PathToXML = ДиалогВыбораФайла.ПолноеИмяФайла;
	
	АдресФайла = SaveAsXMLНаСервере();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(PathToXML);
		
КонецПроцедуры

&НаСервере
Функция SaveAsXMLНаСервере()
	
	Структура = ПолучитьPayloadИФабрикуXDTO(Объект.Ссылка, Объект.DomesticOB.Выгрузить());
	Структура.Payload.Проверить();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	Структура.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Структура.Payload);
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьPayloadИФабрикуXDTO(Trip, ТаблицаDomesticOB)
	
	WSСсылка = Обработки.PushExportToTMS.ПолучитьWSСсылку();
	ФабрикаXDTOTMS = WSСсылка.ПолучитьWSОпределения().ФабрикаXDTO;
	TransOrder = Документы.Trip.ПолучитьМассивTransOrder(ФабрикаXDTOTMS, Trip, ТаблицаDomesticOB);	
	Payload = Документы.Trip.ПолучитьPayload(ФабрикаXDTOTMS, TransOrder);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ФабрикаXDTO", ФабрикаXDTOTMS);
	СтруктураВозврата.Вставить("Payload", Payload);
	
	Возврат СтруктураВозврата;
	
КонецФункции

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура КостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.ТаблицаItems.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Draft);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Draft);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Draft);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DomesticOBAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.DomesticOB.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Draft);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.AU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры
//<- RG-Soft VIvanov

&НаКлиенте
Процедура TypeOfTransportПриИзменении(Элемент)
	
	Объект.Transport = Неопределено;
	Объект.ServiceProvider = Неопределено;
	Объект.EquipmentNo = Неопределено;

	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Own") Тогда 
		Объект.ServiceProvider = ПредопределенноеЗначение("Справочник.ServiceProviders.SLB");
	ИначеЕсли Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
	НастроитьВидимостьПоTypeOfTransport();
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьПоTypeOfTransport()
	           	
	Элементы.Transport.ТолькоПросмотр = Ложь;
	Элементы.ServiceProvider.ТолькоПросмотр = Ложь;
	Элементы.EquipmentNo.ТолькоПросмотр = Истина;  
	
	Элементы.СтраницаCosts.Видимость = Ложь;
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Own") Тогда 
		Элементы.ServiceProvider.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Элементы.Transport.ТолькоПросмотр = Истина;
		Элементы.СтраницаCosts.Видимость = Истина;
		Элементы.EquipmentNo.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TransportПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Transport) И Объект.Transport <> ПредопределенноеЗначение("Справочник.Transport.CallOut") Тогда
		СтруктураTransport = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Transport, "Код,ServiceProvider");
		Объект.EquipmentNo = СтруктураTransport.Код;
		Объект.ServiceProvider = СтруктураTransport.ServiceProvider;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура TransportНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Equipment) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Equipment / Тип транспортного средства'!";
		Иначе 	
			ТекстОшибки = "Select 'Equipment' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "Equipment", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.TypeOfTransport) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Type of transport / Тип транспорта'!";
		Иначе 	
			ТекстОшибки = "Select 'Type of transport' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "TypeOfTransport", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ServiceProviderПриИзменении(Элемент)
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура EquipmentПриИзменении(Элемент)
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;

КонецПроцедуры

// { RGS ASeryakov 15.02.2018 11:26:39 - S-I-0004636
&НаСервере
Процедура ОчиститьRateParcels()
	
	Объект.Rate = 0;
	
	Для каждого Строка Из Объект.Parcels Цикл	
		 Строка.Rate = 0;	
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОчиститьRateParcels()

&НаСервере
Процедура ЗаполнитьДанныеAllocateCostsToTripsНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	rgsCostAllocationParcelsOfTrip.Parcel,
		|	rgsCostAllocationParcelsOfTrip.Rate
		|ИЗ
		|	РегистрСведений.rgsCostAllocationParcelsOfTrip КАК rgsCostAllocationParcelsOfTrip
		|ГДЕ
		|	rgsCostAllocationParcelsOfTrip.Trip = &Trip";
	
	Запрос.УстановитьПараметр("Trip", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
			СтрокаПоиска = Объект.Parcels.НайтиСтроки(Новый Структура("Parcel",Выборка.Parcel));
			
			Если СтрокаПоиска.Количество() > 0 Тогда
			
				СтрокаПоиска[0].Rate = Выборка.Rate;
			
			КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// } RGS ASeryakov 15.02.2018 11:26:54 - S-I-0004636

