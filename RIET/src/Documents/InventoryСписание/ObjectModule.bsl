
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// ПЕРЕД ЗАПИСЬЮ
   
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если не ЗначениеЗаполнено(НалоговыйПериод) тогда
		НалоговыйПериод = дата;
	КонецЕсли;
	
	// Заполняем TaxRegistration
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда
		МассивAU = Goods.ВыгрузитьКолонку("AU");
		ЭтотОбъект.TaxRegistration = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	КонецЕсли;
	
	// Дозаполним реквизиты
	Если НЕ ЗначениеЗаполнено(Responsible) Тогда
		Responsible = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	ОбщегоНазначения.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(CreationDate) Тогда
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(LastModified) Тогда
		LastModified = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TransactionType) Тогда
		TransactionType = Перечисления.InventoryTransactionsTypes.IssueToSales;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(HasFinishedGoods, Goods.Найти(Истина, "FinishedGood") <> Неопределено);
	
	Для Каждого СтрокаТЧ Из Goods Цикл
		FinishedGoodPONumber = ?(СтрокаТЧ.FinishedGood, СокрЛП(СтрокаТЧ.FinishedGoodPONumber), "");
		ОбщегоНазначения.УстановитьЗначение(СтрокаТЧ.FinishedGoodPONumber, FinishedGoodPONumber);
	КонецЦикла;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи);
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьУникальностьНомера(СтруктураРезультатов.СписанияСТакимЖеНомером, Отказ);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
		ПроверитьЗаполнениеШапки(Отказ);
		
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураРезультатов.GoodsProps, СтруктураРезультатов.UOMsProps, Отказ);
		
		Если НЕ Отказ И Проведен Тогда
			Движения.InventoryBatches.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	// { RGS LFedotova 25.10.2018 22:53:44 - вопрос SLI-0007721
	ПроставитьРеализациюИСчетФактуру();
	// } RGS LFedotova 25.10.2018 22:53:47 - вопрос SLI-0007721
	
КонецПроцедуры

// { RGS LFedotova 25.10.2018 22:53:44 - вопрос SLI-0007721
Процедура ПроставитьРеализациюИСчетФактуру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Комментарий ПОДОБНО &НомерСписания + ""%""";
	
	Запрос.УстановитьПараметр("НомерСписания", СокрЛП(Номер));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Для каждого Строка Из Goods Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Реализация) Тогда
				Строка.Реализация = ВыборкаДетальныеЗаписи.Ссылка;	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры
// } RGS LFedotova 25.10.2018 22:53:47 - вопрос SLI-0007721
 
Функция ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	Если НЕ ОбменДанными.Загрузка
		И НЕ ПометкаУдаления Тогда
		
		// Проверка уникальности номера
		СтруктураПараметров.Вставить("Номер", Номер);
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураТекстов.Вставить("СписанияСТакимЖеНомером", 
			"ВЫБРАТЬ
			|	Таблица.Представление
			|ИЗ
			|	Документ.InventoryСписание КАК Таблица
			|ГДЕ
			|	Таблица.Номер = &Номер
			|	И Таблица.Ссылка <> &Ссылка
			|	И (НЕ Таблица.ПометкаУдаления)");
				
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
							
			// Реквизиты Goods
			СтруктураПараметров.Вставить("Goods", Goods.ВыгрузитьКолонку("Good"));
			СтруктураТекстов.Вставить("GoodsProps",
				"ВЫБРАТЬ
				|	InventoryGoods.Ссылка,
				|	InventoryGoods.StandardUOM,
				|	InventoryGoods.ПометкаУдаления
				|ИЗ
				|	Справочник.InventoryGoods КАК InventoryGoods
				|ГДЕ
				|	InventoryGoods.Ссылка В(&Goods)");
				
			// Реквизиты UOMs
			СтруктураПараметров.Вставить("UOMs", Goods.ВыгрузитьКолонку("UOM"));
			СтруктураТекстов.Вставить("UOMsProps",
				"ВЫБРАТЬ
				|	UOMs.Ссылка,
				|	UOMs.StandardUOM,
				|	UOMs.ПометкаУдаления
				|ИЗ
				|	Справочник.UOMs КАК UOMs
				|ГДЕ
				|	UOMs.Ссылка В(&UOMs)");
			
		КонецЕсли;
			
	КонецЕсли;
 		
	Возврат РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
КонецФункции

Процедура ПроверитьУникальностьНомера(Результат, Отказ)
			
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не уникальный номер! Номер используется в """ + Выборка.Представление + """",
			ЭтотОбъект, "Номер", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""No."" не заполнено!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Date"" не заполнено!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(InventoryLocation) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Inventory location"" не заполнено!",
			ЭтотОбъект, "InventoryLocation", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда     //SLI-0004537
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""TaxRegistration"" не заполнено!",
			ЭтотОбъект, "TaxRegistration", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(РезультатGoodsProps, РезультатUOMsProps, Отказ)
	
	GoodsProps = РезультатGoodsProps.Выгрузить();
	GoodsProps.Индексы.Добавить("Ссылка");
	
	UOMsProps = РезультатUOMsProps.Выгрузить();
	UOMsProps.Индексы.Добавить("Ссылка");
	
	Для каждого Стр ИЗ Goods Цикл
		
		GoodProps = Неопределено;
		UOMProps = Неопределено;
		
		Если ЗначениеЗаполнено(Стр.Good) Тогда
			
			GoodProps = GoodsProps.Найти(Стр.Good, "Ссылка");
			Если GoodProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченный на удаление Good!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(GoodProps.StandardUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": у Good не заполнена Standard UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Good"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
				
		КонецЕсли;
						
		Если ЗначениеЗаполнено(Стр.UOM) Тогда
			
			UOMProps = UOMsProps.Найти(Стр.UOM, "Ссылка");
			Если UOMProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченная на удаление UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
			КонецЕсли;
			
			Если GoodProps <> Неопределено
				И GoodProps.StandardUOM.StandardUOM <> UOMProps.StandardUOM Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": Good standard UOM (" + GoodProps.StandardUOM + ") не соответствует UOM standard UOM (" + UOMProps.StandardUOM + ")!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""UOM"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Стр.Quantity) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Qty"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Quantity", , Отказ);
		КонецЕсли;
		
		Если Стр.FinishedGood И НЕ ЗначениеЗаполнено(Стр.Batch) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Batch"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].FinishedGood", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// ОБРАБОТКА ПРОВЕДЕНИЯ

// ДОДЕЛАТЬ
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	НаборДвижений = Движения.InventoryBatches;
	// НО ЭТО ВЕДЬ НИ ФИГА НЕ БЛОКИРОВКА ИЗМЕРЕНИЙ!
	НаборДвижений.БлокироватьДляИзменения = Истина;
	НаборДвижений.Записывать = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("InventoryLocation", InventoryLocation);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Company", Company);
	Запрос.УстановитьПараметр("TaxRegistration", TaxRegistration);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	InventoryСписаниеGoods.Good,
		|	InventoryСписаниеGoods.FinishedGood,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryСписаниеGoods.UOM = InventoryСписаниеGoods.Good.StandardUOM
		|				ТОГДА InventoryСписаниеGoods.Quantity
		|			ИНАЧЕ InventoryСписаниеGoods.Quantity * InventoryСписаниеGoods.UOM.ConversionFactor / InventoryСписаниеGoods.Good.StandardUOM.ConversionFactor
		|		КОНЕЦ) КАК Quantity,
		|	InventoryСписаниеGoods.AU,
		|	InventoryСписаниеGoods.Batch,
		|	ВЫБОР
		|		КОГДА InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToSales)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairClientOwned)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairSLBOwned)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToService)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Fiscal,
		|	InventoryСписаниеGoods.Ссылка.НалоговыйПериод КАК FiscalPeriod
		|ПОМЕСТИТЬ InventoryСписаниеGoods
		|ИЗ
		|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		|ГДЕ
		|	InventoryСписаниеGoods.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryСписаниеGoods.Good,
		|	InventoryСписаниеGoods.FinishedGood,
		|	InventoryСписаниеGoods.AU,
		|	InventoryСписаниеGoods.Batch,
		|	InventoryСписаниеGoods.Ссылка.НалоговыйПериод,
		|	ВЫБОР
		|		КОГДА InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToSales)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairClientOwned)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairSLBOwned)
		|				ИЛИ InventoryСписаниеGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToService)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryСписаниеGoods.Good,
		|	InventoryСписаниеGoods.FinishedGood,
		|	InventoryСписаниеGoods.Quantity,
		|	InventoryСписаниеGoods.AU,
		|	InventoryСписаниеGoods.Batch,
		|	InventoryСписаниеGoods.Fiscal,
		|	InventoryСписаниеGoods.FiscalPeriod
		|ИЗ
		|	InventoryСписаниеGoods КАК InventoryСписаниеGoods
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatchesОстатки.Good,
		|	InventoryBatchesОстатки.FinishedGood,
		|	InventoryBatchesОстатки.Batch,
		|	InventoryBatchesОстатки.QuantityОстаток,
		|	InventoryBatchesОстатки.SumОстаток,
		|	InventoryBatchesОстатки.AU
		|ИЗ
		|	РегистрНакопления.InventoryBatches.Остатки(
		|			&Дата,
		|			InventoryLocation = &InventoryLocation
		|				И Company = &Company
		|				И TaxRegistration = &TaxRegistration
		|				И (Good, FinishedGood) В
		|					(ВЫБРАТЬ
		|						InventoryСписаниеGoods.Good,
		|						InventoryСписаниеGoods.FinishedGood
		|					ИЗ
		|						InventoryСписаниеGoods КАК InventoryСписаниеGoods)) КАК InventoryBatchesОстатки
		|ГДЕ
		|	InventoryBatchesОстатки.QuantityОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	InventoryBatchesОстатки.Batch.МоментВремени";
		
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаСписываемыхТоваров = Результаты[1].Выбрать();
	ВыборкаПартий = Результаты[2].Выбрать();
		
	Пока ВыборкаСписываемыхТоваров.Следующий() Цикл
	   	
		ВыполнитьСписаниеТовара(ВыборкаСписываемыхТоваров.Good, ВыборкаСписываемыхТоваров.FinishedGood, ВыборкаСписываемыхТоваров.Batch, ВыборкаСписываемыхТоваров.AU, ВыборкаСписываемыхТоваров.Quantity, ВыборкаСписываемыхТоваров.Fiscal, ВыборкаСписываемыхТоваров.FiscalPeriod, ВыборкаПартий, Отказ);
		
	КонецЦикла;
	// { RGS MYurkevich 08.07.2015 18:41:21 - RCA-0000073
	НаборДвижений.Записать();
	РегСебестоимость = Движения.РасчетСебестоимости;
	РегСебестоимость.Записывать = Истина;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	InventoryСписаниеGoods.Ссылка,
	|	InventoryСписаниеGoods.Good,
	|	InventoryСписаниеGoods.UOM КАК ЕдиницаИзмерения,
	|	СУММА(InventoryСписаниеGoods.Quantity) КАК Количество,
	|	InventoryСписаниеGoods.AU,
	|	InventoryСписаниеGoods.Реализация,
	|	InventoryСписаниеGoods.TicketId КАК SiebelOrder,
	|	СУММА(SiebelOrdersDetails.Количество) КАК КоличествоSO,
	|	МАКСИМУМ(SiebelOrdersDetails.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияSO,
	|	МАКСИМУМ(SiebelOrdersDetails.PartNumber) КАК PartNumberSO,
	|	МАКСИМУМ(SiebelOrdersDetails.Description) КАК DescriptionSO,
	|	МАКСИМУМ(SiebelOrdersDetails.Account) КАК Account,
	|	СУММА(SiebelOrdersDetails.Сумма) КАК СуммаSO,
	|	МАКСИМУМ(SiebelOrdersDetails.ParentLineID) КАК ParentLineID,
	|	МАКСИМУМ(SiebelOrdersDetails.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ Списание
	|ИЗ
	|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SiebelOrders.Details КАК SiebelOrdersDetails
	|		ПО InventoryСписаниеGoods.TicketId = SiebelOrdersDetails.Ссылка
	|			И (ВЫБОР
	|					КОГДА InventoryСписаниеGoods.Good.Код = ""D907DY""
	|						ТОГДА SiebelOrdersDetails.PartNumber = ""D907""
	|								ИЛИ SiebelOrdersDetails.PartNumber = InventoryСписаниеGoods.Good.Код
	|					КОГДА InventoryСписаниеGoods.Good.Код = ""D124R""
	|						ТОГДА SiebelOrdersDetails.PartNumber = ""D124""
	|								ИЛИ SiebelOrdersDetails.PartNumber = InventoryСписаниеGoods.Good.Код
	|					ИНАЧЕ SiebelOrdersDetails.PartNumber = InventoryСписаниеGoods.Good.Код
	|				КОНЕЦ
	|				ИЛИ SiebelOrdersDetails.Description <> """"
	|					И InventoryСписаниеGoods.Good.Код ПОДОБНО SiebelOrdersDetails.Description + ""%"")
	|ГДЕ
	|	InventoryСписаниеGoods.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	InventoryСписаниеGoods.AU,
	|	InventoryСписаниеGoods.Good,
	|	InventoryСписаниеGoods.Ссылка,
	|	InventoryСписаниеGoods.UOM,
	|	InventoryСписаниеGoods.Реализация,
	|	InventoryСписаниеGoods.TicketId
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InventoryBatchesОбороты.Good,
	|	InventoryBatchesОбороты.AU,
	|	СУММА(InventoryBatchesОбороты.QuantityОборот) КАК Количество,
	|	СУММА(InventoryBatchesОбороты.SumОборот) КАК СуммаСписания
	|ПОМЕСТИТЬ ДвиженияРегистра
	|ИЗ
	|	РегистрНакопления.InventoryBatches.Обороты(
	|			&Период,
	|			&Период,
	|			Регистратор,
	|			Good В
	|				(ВЫБРАТЬ
	|					Списание.Good
	|				ИЗ
	|					Списание КАК Списание)) КАК InventoryBatchesОбороты
	|ГДЕ
	|	InventoryBatchesОбороты.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	InventoryBatchesОбороты.Good,
	|	InventoryBatchesОбороты.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Списание.Ссылка,
	|	Списание.Good,
	|	Списание.ЕдиницаИзмерения,
	|	-ДвиженияРегистра.Количество КАК Количество,
	|	Списание.AU,
	|	Списание.Реализация,
	|	Списание.SiebelOrder,
	|	ЕСТЬNULL(Списание.КоличествоSO, 0) КАК КоличествоSO,
	|	Списание.ЕдиницаИзмеренияSO,
	|	Списание.PartNumberSO,
	|	Списание.DescriptionSO,
	|	-ДвиженияРегистра.СуммаСписания КАК СуммаСписания,
	|	Списание.Account,
	|	Списание.СуммаSO,
	|	Списание.ParentLineID,
	|	Списание.НомерСтроки
	|ИЗ
	|	ДвиженияРегистра КАК ДвиженияРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Списание КАК Списание
	|		ПО ДвиженияРегистра.Good = Списание.Good
	|			И ДвиженияРегистра.AU = Списание.AU";
		
		Запрос.УстановитьПараметр("Период", Новый Граница(Ссылка.Дата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		СуммаСписания = 0;
		Себестоимость = 0;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.SiebelOrder) И НЕ ЗначениеЗаполнено(Выборка.PartNumberSO) Тогда
				Сообщить("Не нашлось соответствия в " + Выборка.SiebelOrder + " для номенклатуры " + Выборка.Good); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Реализация) И НЕ ЗначениеЗаполнено(Выборка.SiebelOrder) Тогда
				Сообщить("Для товара " + Выборка.Good + " указана реализация, но не указан SO"); 
			КонецЕсли;
			Запись = РегСебестоимость.Добавить();
			Запись.Списание = Ссылка;
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Период = Ссылка.Дата;
			ЕдИзмерения = Справочники.UOMs.НайтиПоКоду(Выборка.ЕдиницаИзмеренияSO);
			Запись.ЕдиницаИзмеренияSO = ЕдИзмерения;
            КоличествоSO = Неопределено;
			Если ЗначениеЗаполнено(ЕдИзмерения) И Выборка.ЕдиницаИзмерения <> ЕдИзмерения Тогда
				Если Выборка.ЕдиницаИзмерения.StandardUOM = ЕдИзмерения Тогда
					Количество = Выборка.Количество * Выборка.ЕдиницаИзмерения.ConversionFactor;
				ИначеЕсли Выборка.ЕдиницаИзмерения.StandardUOM = ЕдИзмерения.StandardUOM Тогда
                    Количество = Выборка.Количество * Выборка.ЕдиницаИзмерения.ConversionFactor;	
					КоличествоSO = Выборка.КоличествоSO * ЕдИзмерения.ConversionFactor;
				Иначе
					Сообщить("Единицы измерения в Списании и Siebel order не совпадают для товара " + Выборка.Good + 
					". В SO: " + Выборка.ЕдиницаИзмеренияSO + ". В Списании: " + Выборка.ЕдиницаИзмерения);
					Количество = Выборка.Количество;
				КонецЕсли;
				КоличествоSO = ?(КоличествоSO = Неопределено, Выборка.КоличествоSO, КоличествоSO);
				Разница = Количество - КоличествоSO;
				ПроцентРасхождения = КоличествоSO / 100;
				Если  Разница>-ПроцентРасхождения И Разница<ПроцентРасхождения Тогда
					Количество = КоличествоSO;
				КонецЕсли;	
				
				Запись.Себестоимость = ?(КоличествоSO = 0, 0, Запись.СуммаСписания  / Количество * КоличествоSO);
			Иначе
				Запись.Себестоимость = ?(Запись.КоличествоSO = 0, 0, Запись.СуммаСписания  / Запись.Количество * Запись.КоличествоSO);

			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.Реализация) Тогда
			СуммаСписания = СуммаСписания + Запись.СуммаСписания;
			Себестоимость = Себестоимость + Запись.Себестоимость;
			КонецЕсли;
		КонецЦикла;
		Если СуммаСписания <> Себестоимость Тогда
			 Сообщить("Расхождение между суммой списания и себестоимостью на " + (СуммаСписания - Себестоимость));
		КонецЕсли;	 


	// } RGS MYurkevich 08.07.2015 18:41:47 - RCA-0000073
КонецПроцедуры

Процедура ВыполнитьСписаниеТовара(Good, FinishedGood, Batch, AU, Quantity, Fiscal, FiscalPeriod, ВыборкаПартий, Отказ)
	
	НаборЗаписей = Движения.InventoryBatches;
	
	// Подбираем очередную партию до тех пор пока не спишем все необходимое количество
	СтруктураПоиска = Новый Структура("Good, AU");
	СтруктураПоиска.Good = Good;
	СтруктураПоиска.AU = AU;
	Если FinishedGood Тогда
		СтруктураПоиска.Вставить("FinishedGood", FinishedGood);
	КонецЕсли;
	Если ЗначениеЗаполнено(Batch) Тогда
		СтруктураПоиска.Вставить("Batch", Batch);
	КонецЕсли;
			
	QuantityОсталось = Quantity;
	ВыборкаПартий.Сбросить();
	
	Пока QuantityОсталось > 0 Цикл
		
		Если НЕ ВыборкаПартий.НайтиСледующий(СтруктураПоиска) Тогда
			
			ТекстОшибки = "Не хватает " + QuantityОсталось + " " + Good.StandardUOM + " номенклатуры """ + Good.Код + """ на локации """ 
			+ InventoryLocation + """ по AU """ + AU + """ по Tax registration """ + TaxRegistration + """!";
			РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
			Прервать;
			
		КонецЕсли;
		
		СписываемоеКоличество = ?(ВыборкаПартий.QuantityОстаток > QuantityОсталось,
									QuantityОсталось, ВыборкаПартий.QuantityОстаток);								
									
		Если Не Отказ Тогда
		
			Движение = НаборЗаписей.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Company = Company;
			Движение.InventoryLocation = InventoryLocation;
			Движение.Good = Good;
			Движение.FinishedGood = FinishedGood;
			Движение.AU = AU;
			Движение.TaxRegistration = TaxRegistration; //SLI-0004537
			Движение.Batch = ВыборкаПартий.Batch;
			Движение.Quantity = СписываемоеКоличество;
			Цена = ВыборкаПартий.SumОстаток / ВыборкаПартий.QuantityОстаток;
			Движение.Sum = СписываемоеКоличество * Цена;
			Движение.Fiscal = Fiscal;
			Движение.FiscalPeriod = FiscalPeriod;
		
		КонецЕсли;
		
		QuantityОсталось = QuantityОсталось - СписываемоеКоличество;
				
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
КонецПроцедуры

// Добавила Фёдорова 23.03.16 KF-00000196
//
// Параметры:
//  МассивПараметров - 	 - 
//  ОбъектыПечати	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПечатьАкта(МассивПараметров, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "InventoryСписание_АктПриемаПередачи";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.МасштабПечати = 105;
	
	Макет = Документы.InventoryСписание.ПолучитьМакет("АктПриемаПередачи");
	
	//получение областей
	Заголовок		 = Макет.ПолучитьОбласть("Заголовок");
	ТекстИ			 = Макет.ПолучитьОбласть("ТекстИ");
	АнглТекст		 = Макет.ПолучитьОбласть("АнглТекст");
	АнглТекст1		 = Макет.ПолучитьОбласть("АнглТекст1");
	РусТекст		 = Макет.ПолучитьОбласть("РусТекст");
	РусТекст1		 = Макет.ПолучитьОбласть("РусТекст1");
	ЗаголовокТабл	 = Макет.ПолучитьОбласть("ЗаголовокТабл");
	ШапкаТабл		 = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Строка			 = Макет.ПолучитьОбласть("Строка");
	ИтогАнгл		 = Макет.ПолучитьОбласть("ИтогАнгл");
	ИтогРус			 = Макет.ПолучитьОбласть("ИтогРус");
	Подвал			 = Макет.ПолучитьОбласть("Подвал");
	ПустаяСтрока	 = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	Запрос = Новый Запрос;
	
	// { RGS LFedotova 08.12.2017 14:41:53 - вопрос SLI-0007436
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	//               |	КонтрагентыКонтактнаяИнформация.Представление + ""; "" + КонтрагентыКонтактнаяИнформацияАнгл.Представление КАК Представление
	//               |ПОМЕСТИТЬ втАдреса
	//               |ИЗ
	//               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАнгл
	//               |		ПО КонтрагентыКонтактнаяИнформация.Ссылка = КонтрагентыКонтактнаяИнформацияАнгл.Ссылка
	//               |ГДЕ
	//               |	КонтрагентыКонтактнаяИнформация.Вид = &Адрес
	//               |	И КонтрагентыКонтактнаяИнформацияАнгл.Вид = &АдресАнгл
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	КонтактнаяИнформация.Объект,
	//               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(155)) КАК АдресРус,
	//               |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияАнгл.Представление, """") КАК СТРОКА(155)) КАК АдресАнгл
	//               |ПОМЕСТИТЬ втАдресОтправителя
	//               |ИЗ
	//               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАнгл
	//               |		ПО КонтактнаяИнформация.Объект = КонтактнаяИнформацияАнгл.Объект
	//               |ГДЕ
	//               |	КонтактнаяИнформация.Вид = &АдресОтпр
	//               |	И КонтактнаяИнформацияАнгл.Вид = &АдресОтпрАнгл
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	InventoryСписание.Дата,
	//               |	InventoryСписание.Номер КАК НомерАкта,
	//               |	InventoryСписание.Ссылка КАК Ссылка,
	//               |	ГОД(InventoryСписание.Дата) КАК Год,
	//               |	МЕСЯЦ(InventoryСписание.Дата) КАК Месяц,
	//               |	ДЕНЬ(InventoryСписание.Дата) КАК День,
	//               |	InventoryСписание.ДоверенностьПолучателяДата КАК ДоверенностьПолучателя,
	//               |	InventoryСписание.ДоверенностьОтправителяДата КАК ДоверенностьОтправителя,
	//               |	InventoryСписание.Получатель.ФИОродительныйПадеж КАК Получатель,
	//               |	InventoryСписание.Отправитель.ФИОродительныйПадеж КАК Отправитель,
	//               |	InventoryСписание.КонтрагентПродажи.НаименованиеПолное КАК КонтрагентПродажиРус,
	//               |	InventoryСписание.КонтрагентПродажи.DescriptionFull КАК КонтрагентПродажиАнгл,
	//               |	InventoryСписание.МатериалПолучил,
	//               |	InventoryСписание.МатериалПередал,
	//               |	InventoryСписание.Получатель.НаименованиеEng КАК ПолучательАнгл,
	//               |	InventoryСписание.Отправитель.НаименованиеEng КАК ОтправительАнгл,
	//               |	втАдресаПолучателя.Представление КАК АдресПолучателя,
	//               |	втАдресОтправителя.АдресРус + ""; "" + втАдресОтправителя.АдресАнгл КАК АдресОтправителя,
	//               |	ПодразделенияОрганизаций.НаименованиеПолное КАК ОтправительОрг,
	//               |	ПодразделенияОрганизаций.LegalEntity КАК ОтправительОргАнгл
	//               |ИЗ
	//               |	Документ.InventoryСписание КАК InventoryСписание
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдресаПолучателя
	//               |		ПО InventoryСписание.КонтрагентПродажи = втАдресаПолучателя.Ссылка
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	//               |		ПО InventoryСписание.TaxRegistration = ПодразделенияОрганизаций.Ссылка
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ втАдресОтправителя КАК втАдресОтправителя
	//               |		ПО InventoryСписание.TaxRegistration = втАдресОтправителя.Объект
	//               |ГДЕ
	//               |	InventoryСписание.Ссылка В(&Ссылка)
	//               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	               |	КонтрагентыКонтактнаяИнформация.Представление + ""; "" + КонтрагентыКонтактнаяИнформацияАнгл.Представление КАК Представление
	               |ПОМЕСТИТЬ втАдреса
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАнгл
	               |		ПО КонтрагентыКонтактнаяИнформация.Ссылка = КонтрагентыКонтактнаяИнформацияАнгл.Ссылка
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Вид = &Адрес
	               |	И КонтрагентыКонтактнаяИнформацияАнгл.Вид = &АдресАнгл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Объект,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(155)) КАК АдресРус,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияАнгл.Представление, """") КАК СТРОКА(155)) КАК АдресАнгл
	               |ПОМЕСТИТЬ втАдресОтправителя
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАнгл
	               |		ПО КонтактнаяИнформация.Объект = КонтактнаяИнформацияАнгл.Объект
	               |ГДЕ
	               |	КонтактнаяИнформация.Вид = &АдресОтпр
	               |	И КонтактнаяИнформацияАнгл.Вид = &АдресОтпрАнгл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryСписание.Дата,
	               |	InventoryСписание.Номер КАК НомерАкта,
	               |	InventoryСписание.Ссылка КАК Ссылка,
	               |	ГОД(InventoryСписание.Дата) КАК Год,
	               |	МЕСЯЦ(InventoryСписание.Дата) КАК Месяц,
	               |	ДЕНЬ(InventoryСписание.Дата) КАК День,
	               |	InventoryСписание.ДоверенностьПолучателяДата КАК ДоверенностьПолучателя,
	               |	InventoryСписание.ДоверенностьОтправителяДата КАК ДоверенностьОтправителя,
	               |	InventoryСписание.Получатель.ФИОродительныйПадеж КАК Получатель,
	               |	InventoryСписание.Отправитель.ФИОродительныйПадеж КАК Отправитель,
	               |	InventoryСписание.КонтрагентПродажи.НаименованиеПолное КАК КонтрагентПродажиРус,
	               |	InventoryСписание.КонтрагентПродажи.DescriptionFull КАК КонтрагентПродажиАнгл,
	               |	InventoryСписание.МатериалПолучил,
	               |	InventoryСписание.МатериалПередал,
	               |	InventoryСписание.Получатель.НаименованиеEng КАК ПолучательАнгл,
	               |	InventoryСписание.Отправитель.НаименованиеEng КАК ОтправительАнгл,
	               |	InventoryСписание.LocationIn.Подразделение.Адрес КАК АдресПолучателя,
	               |	втАдресОтправителя.АдресРус + ""; "" + втАдресОтправителя.АдресАнгл КАК АдресОтправителя,
	               |	ПодразделенияОрганизаций.НаименованиеПолное КАК ОтправительОрг,
	               |	ПодразделенияОрганизаций.LegalEntity.Наименование КАК ОтправительОргАнгл
	               |ИЗ
	               |	Документ.InventoryСписание КАК InventoryСписание
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдресаПолучателя
	               |		ПО InventoryСписание.КонтрагентПродажи = втАдресаПолучателя.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |		ПО InventoryСписание.TaxRegistration = ПодразделенияОрганизаций.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втАдресОтправителя КАК втАдресОтправителя
	               |		ПО InventoryСписание.TaxRegistration = втАдресОтправителя.Объект
	               |ГДЕ
	               |	InventoryСписание.Ссылка В(&Ссылка)
	               |АВТОУПОРЯДОЧИВАНИЕ";
		
	// } RGS LFedotova 08.12.2017 14:42:00 - вопрос SLI-0007436
	
	Запрос.УстановитьПараметр("Ссылка",МассивПараметров);
	Запрос.УстановитьПараметр("Адрес",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("АдресОтпр",Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Запрос.УстановитьПараметр("АдресАнгл",Справочники.ВидыКонтактнойИнформации.АнглийскийАдресКонтрагента);
	Запрос.УстановитьПараметр("АдресОтпрАнгл",Справочники.ВидыКонтактнойИнформации.АнглийскийАдресОрганизации);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = Выборка.Дата;
	КонецЦикла;
	
	Запрос = Новый Запрос;
		
	// { RGS LFedotova 25.01.2017 12:48:55 - вопрос SLI-0007090
	Если СокрЛП(Ссылка.IctDocType) = "IS" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	InventoryСписаниеGoods.НомерСтроки КАК НомерСтроки,
		|	InventoryСписаниеGoods.Good.Наименование КАК НоменклатураАнгл,
		|	InventoryСписаниеGoods.Good.Код КАК НомерПартии,
		|	СУММА(InventoryСписаниеGoods.Quantity) КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementPrice КАК ЧИСЛО(15, 2))) КАК СтоимостьШтВал,
		|	СУММА(ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementSum КАК ЧИСЛО(15, 2))) КАК СтоимостьВсегоВал,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryBatchesОбороты.QuantityРасход <> 0
		|				ТОГДА ВЫРАЗИТЬ(InventoryBatchesОбороты.SumРасход / InventoryBatchesОбороты.QuantityРасход КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ВЫРАЗИТЬ(InventoryBatchesОбороты.SumРасход КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СтоимостьШт,
		|	СУММА(ВЫРАЗИТЬ(InventoryBatchesОбороты.SumРасход КАК ЧИСЛО(15, 2))) КАК СтоимостьВсего,
		|	InventoryСписаниеGoods.Ссылка КАК Ссылка,
		|	InventoryСписаниеGoods.UOM.Код КАК ЕдИзм,
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.Good.DescriptionRus КАК СТРОКА(250)) КАК НоменклатураРус
		|ИЗ
		|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.InventoryBatches.Обороты(, , Регистратор, ) КАК InventoryBatchesОбороты
		|		ПО InventoryСписаниеGoods.Ссылка = InventoryBatchesОбороты.Регистратор
		|			И InventoryСписаниеGoods.Good = InventoryBatchesОбороты.Good
		|ГДЕ
		|	InventoryСписаниеGoods.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.Good.DescriptionRus КАК СТРОКА(250)),
		|	InventoryСписаниеGoods.UOM.Код,
		|	InventoryСписаниеGoods.Ссылка,
		|	InventoryСписаниеGoods.Good.Код,
		|	InventoryСписаниеGoods.Good.Наименование,
		|	InventoryСписаниеGoods.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерСтроки),
		|	СУММА(СтоимостьШт),
		|	СУММА(СтоимостьВсего)
		|ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ТаблицаДат.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	НАЧАЛОПЕРИОДА(КурсыВалют.Период, ДЕНЬ) КАК ДатаКурса
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДат КАК втТаблицаДат
		|		ПО КурсыВалют.Период = втТаблицаДат.Дата
		|ГДЕ
		|	КурсыВалют.Валюта = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryСписаниеGoods.НомерСтроки КАК НомерСтроки,
		|	InventoryGoods.Наименование КАК НоменклатураАнгл,
		|	InventoryGoods.Код КАК НомерПартии,
		|	InventoryСписаниеGoods.Quantity КАК Количество,
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementPrice КАК ЧИСЛО(15, 2)) КАК СтоимостьШтВал,
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementSum КАК ЧИСЛО(15, 2)) КАК СтоимостьВсегоВал,
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementPrice * КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 2)) КАК СтоимостьШт,
		|	ВЫРАЗИТЬ(InventoryСписаниеGoods.ManagementSum * КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 2)) КАК СтоимостьВсего,
		|	InventoryСписаниеGoods.Ссылка КАК Ссылка,
		|	InventoryСписаниеGoods.UOM.Код КАК ЕдИзм,
		|	InventoryGoods.DescriptionRus КАК НоменклатураРус
		|ИЗ
		|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.InventoryGoods КАК InventoryGoods
		|		ПО InventoryСписаниеGoods.Good = InventoryGoods.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО (НАЧАЛОПЕРИОДА(InventoryСписаниеGoods.Ссылка.Дата, ДЕНЬ) = КурсыВалют.ДатаКурса)
		|ГДЕ
		|	InventoryСписаниеGoods.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерСтроки),
		|	СУММА(СтоимостьШтВал),
		|	СУММА(СтоимостьВсегоВал),
		|	СУММА(СтоимостьШт),
		|	СУММА(СтоимостьВсего)
		|ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.УстановитьПараметр("Ссылка", МассивПараметров);
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоНаименованию("USD"));
	
	ВыборкаОбщ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаШапка.Следующий() Цикл
		
	    Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ВыборкаОбщ.Сбросить();

		Если ВыборкаОбщ.НайтиСледующий(ВыборкаШапка.Ссылка) Тогда
			ВыборкаСтрок = ВыборкаОбщ.Выбрать();
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно сформировать печатную форму ""Акт приема-передачи ТМЦ"" документа ""%1"", так как табличная часть в данном документе является пустой.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаШапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаШапка.Ссылка);
			Продолжить;			
		КонецЕсли;
		
		Заголовок.Параметры.Заполнить(ВыборкаШапка);
		Месяц = НРег(Формат(ВыборкаШапка.Дата,"ДФ=ММММ"));
		Месяц = ?(Найти(Месяц,"ь") ИЛИ Найти(Месяц,"й"),Лев(Месяц,СтрДлина(Месяц)-1)+"я",Месяц+"а");
		Заголовок.Параметры.Месяц = Месяц;
		Заголовок.Параметры.Год = Прав(ВыборкаШапка.Год,1);
		ТабДок.Вывести(Заголовок);
		ТабДок.Вывести(ПустаяСтрока);
		
		АнглТекст.Параметры.Заполнить(ВыборкаШапка);
		АнглТекст.Параметры.ДоверенностьОтправителя =  Формат(ВыборкаШапка.ДоверенностьОтправителя,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(АнглТекст);                                                                 
		ТабДок.Вывести(ПустаяСтрока);
		РусТекст.Параметры.Заполнить(ВыборкаШапка);
		РусТекст.Параметры.ДоверенностьОтправителя =  Формат(ВыборкаШапка.ДоверенностьОтправителя,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(РусТекст);
		
		ТабДок.Вывести(ПустаяСтрока);
		ТабДок.Вывести(ТекстИ);
		ТабДок.Вывести(ПустаяСтрока);
		
		АнглТекст1.Параметры.Заполнить(ВыборкаШапка);
		АнглТекст1.Параметры.ДоверенностьПолучателя =  Формат(ВыборкаШапка.ДоверенностьПолучателя,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(АнглТекст1);
		Если ЗначениеЗаполнено(ВыборкаШапка.КонтрагентПродажиАнгл) Тогда
			АнглТекст1.Параметры.КонтрагентПродажиАнгл = ВыборкаШапка.КонтрагентПродажиРус;
		КонецЕсли;
		ТабДок.Вывести(ПустаяСтрока);
		РусТекст1.Параметры.Заполнить(ВыборкаШапка);
		РусТекст1.Параметры.ДоверенностьПолучателя =  Формат(ВыборкаШапка.ДоверенностьПолучателя,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(РусТекст1);
		ТабДок.Вывести(ПустаяСтрока);
		
		ТабДок.Вывести(ЗаголовокТабл);
		ТабДок.Вывести(ПустаяСтрока);
		ТабДок.Вывести(ШапкаТабл);
		
		Пока ВыборкаСтрок.Следующий() Цикл
			Строка.Параметры.Заполнить(ВыборкаСтрок);
			ТабДок.Вывести(Строка);				
		КонецЦикла;
		
		ВыборкаСтрок.Сбросить();
		
		ТабДок.Вывести(ПустаяСтрока);
		
		ИтогАнгл.Параметры.Заполнить(ВыборкаОбщ);
		ТабДок.Вывести(ИтогАнгл);
		
		ИтогРус.Параметры.Заполнить(ВыборкаОбщ);
		ТабДок.Вывести(ИтогРус);
		
		ТабДок.Вывести(ПустаяСтрока);
		
		Подвал.Параметры.Заполнить(ВыборкаШапка);
		Табдок.Вывести(Подвал);
			
	КонецЦикла;

	Возврат ТабДок;
КонецФункции
//Конец добавления 23.03.16 KF-00000196
