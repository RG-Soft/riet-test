
Перем мКоэффName Экспорт;
Перем мКоэффInvoice Экспорт;
Перем мКоэффPoNbr Экспорт;
Перем мКоэффSerNo Экспорт;
Перем мКоэффSerNoДлинный Экспорт;
Перем мSerNoДлинаКороткого Экспорт;
Перем мКоэффDate Экспорт;
Перем мКоэффValue Экспорт;

Перем мКоэффПохожестиСлова;

Перем мСписокСловОСLawson;

Перем ТаблицаБукв;

Перем ВремяНачалаРаботы Экспорт;

////////////////////////////////////////////////////////////////////////////////

Функция ПривестиСтроку(Строчка) Экспорт
	
	Возврат ВРег(СтрЗаменить(СокрЛП(Строчка),Символы.НПП,""));
	
КонецФункции

Функция НайтиПохожиеОС() Экспорт
	
	ДанныеОСLawson = ПолучитьСтруктуруВыбранногоОСLawsonИзБазыДанных();
	
	мСписокСловОСLawson = ПолучитьСписокСлов(ДанныеОСLawson.Name);
	
	ТаблицаОС = ПолучитьТаблицуОСИзБазыДанных();
	ТаблицаОС.Колонки.Добавить("Rel", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,2)));
	ТаблицаОС.Колонки.Добавить("SerNo", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	
	// Найдем совпадения по первым колонкам
	Для Каждого Стр из ТаблицаОС Цикл
		Если ЗначениеЗаполнено(Стр.СерийныйНомер) Тогда
			Стр.SerNo = ПривестиСтроку(Стр.СерийныйНомер);
		ИначеЕсли ЗначениеЗаполнено(Стр.НомерПаспорта) Тогда
		    Стр.SerNo = ПривестиСтроку(Стр.НомерПаспорта);
		Иначе
			Стр.SerNo = ПривестиСтроку(Стр.ЗаводскойНомер);
		КонецЕсли;
		
		Стр.Rel = НайтиСовпадениеПоПервымКолонкам(ДанныеОСLawson, Стр);
	КонецЦикла;
	
	// Отберем похожие в отдельную таблицу
	ТаблицаПохожихОС = ПолучитьТаблицуПохожихОС(ТаблицаОС);
	
	// Получим Дату и Стоимость для похожих строк
	ТаблицаDateValue = ПолучитьДополнительныеДанныеДляОС(ТаблицаПохожихОС.ВыгрузитьКолонку("ОССсылка"));
	ТаблицаDateValue.Индексы.Добавить("ОССсылка");
	
	ТаблицаПохожихОС.Колонки.Добавить("Date", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПохожихОС.Колонки.Добавить("Value", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПохожихОС.Колонки.Добавить("КартинкаRel", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	
	Для каждого Стр из ТаблицаПохожихОС Цикл
		СтрокаDV = ТаблицаDateValue.Найти(Стр.ОССсылка, "ОССсылка");
		Если ЗначениеЗаполнено(СтрокаDV) Тогда
			ЗаполнитьЗначенияСвойств(Стр, СтрокаDV);
		КонецЕсли;
	КонецЦикла;
	
	// Найдем совпадения по Дате и Стоимости и откорректируем Rel в таблице похожих строк 
	Для каждого ДанныеОС из ТаблицаПохожихОС Цикл
		
		//Date
		Дата1С	= НачалоДня(ДанныеОС.Date);
		ДатаL	= НачалоДня(ДанныеОСLawson.Date);
		Если Дата1С > ДобавитьМесяц(ДатаL, 1) Тогда
			ВероятностьDate = 0;
		ИначеЕсли ДобавитьМесяц(ДатаL, -1) <= Дата1С И Дата1С <= ДобавитьМесяц(ДатаL, 1) Тогда
			ВероятностьDate = мКоэффValue;
		ИначеЕсли Дата1С >= ДобавитьМесяц(ДатаL, - 12) Тогда
			ВероятностьDate = Окр((12-(ДатаL - Дата1С)/(3600*24*30.5)) * мКоэффValue / 11, 2);
		Иначе
			ВероятностьDate = 0;
		КонецЕсли;
		
		//Value
		СтоимМакс	= Макс(ДанныеОС.Value, ДанныеОСLawson.Value);
		СтоимМин	= Мин(ДанныеОС.Value, ДанныеОСLawson.Value);
		
		Отклон = 1 - СтоимМин / СтоимМакс;
		Если Отклон <= 0.1 Тогда
			ВероятностьValue = мКоэффValue;
		Иначеесли Отклон <= 0.3 Тогда
			ВероятностьValue = Окр((0.3 - Отклон) * 5 * мКоэффValue, 2);
		Иначе
			ВероятностьValue = 0;
		КонецЕсли;
		
		// Просуммируем Rel
		Rel = ДанныеОС.Rel + ВероятностьDate + ВероятностьValue;
		ДанныеОС.Rel = ?(Rel > 1, 1, Rel);
		
		ДанныеОС.КартинкаRel = Окр(10*ДанныеОС.Rel,0);
		
	КонецЦикла;
	
	// Снова отберем похожие в отдельную таблицу 
	ФинальнаяТаблица = ПолучитьТаблицуПохожихОС(ТаблицаПохожихОС);
	ФинальнаяТаблица.Сортировать("Rel УБЫВ");
	
	Возврат ФинальнаяТаблица;
	
Конецфункции

Функция НайтиСовпадениеПоПервымКолонкам(СтруктураLawson, СтруктураОС)
	
	// Invoice
	Если ЗначениеЗаполнено(СтруктураLawson.Invoice) И ВРег(СокрЛП(СтруктураLawson.Invoice)) = ВРег(СокрЛП(СтруктураОС.Invoice)) Тогда
		ВероятностьInvoice = мКоэффInvoice;
	Иначе
		ВероятностьInvoice = 0;
	КонецЕсли;
	
	// PO
	Если ЗначениеЗаполнено(СтруктураLawson.PoNbr) И ВРег(СокрЛП(СтруктураLawson.PoNbr)) = ВРег(СокрЛП(СтруктураОС.PoNbr)) Тогда
		ВероятностьPO = мКоэффPoNbr;
	Иначе
		ВероятностьPO = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураLawson.СерийныйНомер) И ВРег(СокрЛП(СтруктураLawson.СерийныйНомер)) = СтруктураОС.SerNo И ЗначениеЗаполнено(СтруктураОС.SerNo) Тогда
		Если СтрДлина(СтруктураОС.SerNo) > мSerNoДлинаКороткого Тогда
			ВероятностьSerNo = мКоэффSerNoДлинный;
		Иначе
			ВероятностьSerNo = мКоэффSerNo;
		КонецЕсли;
	Иначе
		ВероятностьSerNo = 0;
	КонецЕсли;
	
	//
	Вероятность = ВероятностьInvoice + ВероятностьPO + ВероятностьSerNo;
	Если Вероятность < 0.1 Тогда
		Возврат 0;
	КонецЕсли;
	
	// Name
	ВероятностьName = мКоэффName * ПровестиСравнениеНаименований(СтруктураLawson.Name, СтруктураОС.Name);
	
	Возврат ВероятностьName + Вероятность;
	
КонецФункции

Функция НайтиПохожиеОСLawson() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОсновныеСредстваLawsonОСФискал.Ссылка
	                      |ПОМЕСТИТЬ Привязанные
	                      |ИЗ
	                      |	Справочник.ОсновныеСредстваLawson.ОСФискал КАК ОсновныеСредстваLawsonОСФискал
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОсновныеСредстваLawson.Ссылка КАК ОСLawson,
	                      |	ОсновныеСредстваLawson.ItemDescription КАК Name,
	                      |	ОсновныеСредстваLawson.СерийныйНомер КАК SerNo,
	                      |	ОсновныеСредстваLawson.PoNbr,
	                      |	ОсновныеСредстваLawson.Invoice,
	                      |	ОсновныеСредстваLawson.ПервоначальнаяСтоимость КАК Value,
	                      |	ОсновныеСредстваLawson.ДатаПринятия КАК Date
	                      |ИЗ
	                      |	Справочник.ОсновныеСредстваLawson КАК ОсновныеСредстваLawson
	                      |ГДЕ
	                      |	ОсновныеСредстваLawson.Код МЕЖДУ &Код1 И &Код2
	                      |	И ОсновныеСредстваLawson.PoNbr = &PoNbr
	                      |	И (НЕ ОсновныеСредстваLawson.Ссылка В
	                      |				(ВЫБРАТЬ
	                      |					привязанные.Ссылка
	                      |				ИЗ
	                      |					привязанные))");
	Запрос.УстановитьПараметр("Код1", Формат(ОСLawson.Код-50,"ЧЦ=10; ЧДЦ=0; ЧГ=0"));
	Запрос.УстановитьПараметр("Код2", Формат(ОСLawson.Код+50,"ЧЦ=10; ЧДЦ=0; ЧГ=0"));
	Запрос.УстановитьПараметр("PoNbr", ОСLawson.PoNbr);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////


Функция ПолучитьСтруктуруВыбранногоОСLawsonИзБазыДанных()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОСLawson", ОСLawson);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСредстваLawson.ItemDescription КАК Name,
		|	ОсновныеСредстваLawson.Invoice,
		|	ОсновныеСредстваLawson.PoNbr,
		|	ОсновныеСредстваLawson.СерийныйНомер,
		|	ОсновныеСредстваLawson.ДатаПринятия КАК Date,
		|	ОсновныеСредстваLawson.ПервоначальнаяСтоимость КАК Value
		|ИЗ
		|	Справочник.ОсновныеСредстваLawson КАК ОсновныеСредстваLawson
		|ГДЕ
		|	ОсновныеСредстваLawson.Ссылка = &ОСLawson";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьТаблицуОСИзБазыДанных()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОСLawson);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСредстваLawsonОСФискал.ОсновноеСредство КАК ОССсылка
		|ПОМЕСТИТЬ ВТИсключения
		|ИЗ
		|	Справочник.ОсновныеСредстваLawson.ОСФискал КАК ОсновныеСредстваLawsonОСФискал
		|ГДЕ
		|	ОсновныеСредстваLawsonОСФискал.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОССсылка,
		|	ОсновныеСредства.НаименованиеENG КАК Name,
		|	ОсновныеСредства.НомерКоммерческогоИнвойса КАК Invoice,
		|	ОсновныеСредства.НомерЗаказаНаПриобретение КАК PoNbr,
		|	ОсновныеСредства.СерийныйНомер,
		|	ОсновныеСредства.НомерПаспорта,
		|	ОсновныеСредства.ЗаводскойНомер
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|ГДЕ
		|	(НЕ ОсновныеСредства.ПометкаУдаления)
		|	И ОсновныеСредства.ОсновноеСредствоLawson = ЗНАЧЕНИЕ(Справочник.ОсновныеСредстваLawson.ПустаяСсылка)
		|	И (НЕ ОсновныеСредства.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТИсключения.ОССсылка
		|				ИЗ
		|					ВТИсключения КАК ВТИсключения))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Invoice";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

Функция ПолучитьДополнительныеДанныеДляОС(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("840"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОССсылка,
		|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ КАК Value
		|ПОМЕСТИТЬ ВТValue
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&МассивСсылок)) КАК ПервоначальныеСведенияСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОССсылка,
		|	НАЧАЛОПЕРИОДА(СостоянияОСОрганизаций.ДатаСостояния, ДЕНЬ) КАК Date
		|ПОМЕСТИТЬ ВТDate
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|ГДЕ
		|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|	И СостоянияОСОрганизаций.ОсновноеСредство В(&МассивСсылок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Период,
		|	КурсыВалют.Курс
		|ПОМЕСТИТЬ Курсы
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта = &Валюта
		|	И КурсыВалют.Период В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТDate.Date
		|			ИЗ
		|				ВТDate КАК ВТDate)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТDate.ОССсылка КАК ОССсылка,
		|	ВТDate.Date,
		|	ВТValue.Value / Курсы.Курс КАК Value
		|ИЗ
		|	ВТDate КАК ВТDate
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТValue КАК ВТValue
		|		ПО ВТDate.ОССсылка = ВТValue.ОССсылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Курсы КАК Курсы
		|		ПО ВТDate.Date = Курсы.Период";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

Функция ПолучитьТаблицуПохожихОС(ТаблицаОС)
	
	ТаблицаПохожихОС = ТаблицаОС.СкопироватьКолонки();
	
	ТаблицаОС.Сортировать("Rel УБЫВ");
	Для каждого Стр из ТаблицаОС Цикл
		Если Стр.Rel >= RelMin Тогда
			СтрПохожих = ТаблицаПохожихОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПохожих, Стр);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПохожихОС;
	
КонецФункции

//

Функция ПолучитьМассивСоСпискамиСловНаименованийИзТаблицыОС(СписокОС)
	
	Массив = Новый Массив;
	
	Для каждого Стр из СписокОС Цикл
		СписокСловНаименования = ПолучитьСписокСлов(Стр.Name);
		Массив.Добавить(СписокСловНаименования);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьСписокСлов(ЗначениеРеквизита) Экспорт
	
	СписокСлов = Новый СписокЗначений;
	Слово = "";
	Для индекс = 1 по СтрДлина(ЗначениеРеквизита) Цикл
		Символ = Сред(ЗначениеРеквизита, индекс, 1);
		Если ЭтоБуква(Символ) Тогда
			Слово = Слово + Символ;
		Иначе
			// Если это слово, и оно имеет длину более 1-го символа, тогда добавим его в список
			Если ЗначениеЗаполнено(Слово) И СтрДлина(Слово) > 1 Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));
			Слово = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Уберем одинаковые слова из списка
	СписокСлов.СортироватьПоЗначению();
	ы = СписокСлов.Количество() - 1;
	Пока ы > 0 Цикл
		
		Если СписокСлов[ы].Значение = СписокСлов[ы - 1].Значение Тогда
			СписокСлов.Удалить(ы);
		КонецЕсли;
		
		ы = ы - 1;
	КонецЦикла;
	
	Возврат СписокСлов;
	
КонецФункции

Функция ПровестиСравнениеНаименований(НаименованиеLawson, НаименованиеОС)
	
	СтруктураСчетчиковСовпадения = Новый Структура;
	СтруктураСчетчиковСовпадения.Вставить("Совпадающих",	0);
	СтруктураСчетчиковСовпадения.Вставить("Похожих",		0);
	СтруктураСчетчиковСовпадения.Вставить("Несовпадающих",	0);
	
	СписокСловLawson	= мСписокСловОСLawson.Скопировать();
	СписокСловОС		= ПолучитьСписокСлов(НаименованиеОС);
	
	ВсегоСлов = СписокСловLawson.Количество() + СписокСловОС.Количество();
	
	// Находим одинаковые слова
	Для каждого СловоL из СписокСловLawson Цикл
		
		НайденныйЭлемент = СписокСловОС.НайтиПоЗначению(СловоL.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
			СтруктураСчетчиковСовпадения.Вставить("Совпадающих", СтруктураСчетчиковСовпадения.Совпадающих + 1);
			СписокСловLawson.Удалить(СловоL);
			СписокСловОС.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если не найдено совпадающих слов, то дальше не проверяем
	//Если НЕ СтруктураСчетчиковСовпадения.Совпадающих Тогда
	//	Возврат 0;
	//КонецЕсли;
	
	СуммаВероятностей = 0;
	// Находим и считаем похожие слова
	Для каждого СловоL из СписокСловLawson Цикл
		
		Для каждого СловоОС из СписокСловОС Цикл
			
			ВероятностьСовпадения = СравнитьСлова(СловоL.Значение, СловоОС.Значение);
			Если ВероятностьСовпадения >= мКоэффПохожестиСлова Тогда
				СтруктураСчетчиковСовпадения.Вставить("Похожих", СтруктураСчетчиковСовпадения.Похожих + 1);
				СуммаВероятностей = СуммаВероятностей + ВероятностьСовпадения;
				СписокСловLawson.Удалить(СловоL);
				СписокСловОС.Удалить(СловоОС);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Оставшиеся слова считаем непохожими
	СтруктураСчетчиковСовпадения.Вставить("Несовпадающих", СписокСловLawson.Количество() + СписокСловОС.Количество());
	
	//
	Возврат (СтруктураСчетчиковСовпадения.Совпадающих + СуммаВероятностей)/(СтруктураСчетчиковСовпадения.Похожих + СтруктураСчетчиковСовпадения.Совпадающих + СтруктураСчетчиковСовпадения.Несовпадающих);
	
КонецФункции

Функция СравнитьСлова(Слово1, Слово2)
	
	ТаблицаБукв.Очистить();
	ТаблицаБуквПустая = Истина;
		
	ЕСли СтрДлина(Слово1)<=СтрДлина(Слово2) Тогда
		Слово = ВРЕГ(Слово1);
		ИскомоеСлово = ВРЕГ(Слово2);
	Иначе
		Слово = ВРЕГ(Слово2);
		ИскомоеСлово = ВРЕГ(Слово1);
	КонецЕсли;
	
	Для индекс = 1 по СтрДлина(Слово) Цикл
		Символ = Сред(Слово, индекс, 1);
		ЕСли ТаблицаБуквПустая  Тогда
			поз = СтрНайти(ИскомоеСлово, Символ);
			поправка = 0;
			Пока поз>0 Цикл
				ТаблицаБуквПустая = Ложь;
				НовСтр = ТаблицаБукв.Добавить();
				НовСтр.Позиция = поз + поправка;
				НовСтр.ДлинаСлова = 1;
				НовСтр.КолвоПропущенных = 0;
				поправка = поправка + поз;
				поз = СтрНайти(Сред(ИскомоеСлово, поправка+1), Символ);
			КонецЦикла;
		Иначе
			Для Каждого Вхождение ИЗ ТаблицаБукв Цикл
				Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
				ИначеЕсли Сред(Слово, Вхождение.Позиция + Вхождение.ДлинаСлова - Вхождение.КолвоПропущенных, 1) = Вхождение.ПропущеноНа Тогда
					Вхождение.ПропущеноНа = "";
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				Иначе					
					//Если Окр((Вхождение.КолвоПропущенных + 1) / СтрДлина(ИскомоеСлово) * 100)<=ДопустимоеРазличиеСлов Тогда
					//	Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					//	Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					//	Вхождение.ПропущеноНа = Символ;
					//Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					//КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;		
	КонецЦикла;
	
	ЕСли ТаблицаБуквПустая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ТаблицаБукв.Сортировать("ДлинаСлова УБЫВ, КолвоПропущенных ВОЗР");
	
	СовпалоСимволов = ТаблицаБукв[0].ДлинаСлова - ТаблицаБукв[0].КолвоПропущенных;
	
	Возврат СовпалоСимволов / СтрДлина(ИскомоеСлово);
	//Возврат (Окр(СовпалоСимволов / СтрДлина(ИскомоеСлово) * 100) >= (100 - ДопустимоеРазличиеСлов));
		
КонецФункции

Функция ЭтоБуква (Символ)
	
	Код = КодСимвола(Символ);
	
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// ОБЩЕЕ

Процедура СвязатьВыбранныеОС(ОСLawsonСсылка, ОСФискал, Отказ) Экспорт
	
	НачатьТранзакцию();
	
	//записываем ос 1с
	Если ТипЗнч(ОСФискал) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		
		Для каждого ОСФискалСтрока из ОСФискал Цикл
			ДобавитьКОСФискалСсылкуНаОСLawson(ОСLawsonСсылка, ОСФискалСтрока.ОССсылка, Отказ);
		КонецЦикла;
		
	Иначе
		ДобавитьКОСФискалСсылкуНаОСLawson(ОСLawsonСсылка, ОСФискал, Отказ);
	КонецЕсли;
	
	//записываем ос lawson
	ОбьектОСLawson = ОСLawsonСсылка.ПолучитьОбъект();
	ТабЧасть = ОбьектОСLawson.ОСФискал;
	Если ТипЗнч(ОСФискал) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		
		Для каждого ОСФискалСтрока из ОСФискал Цикл
			ДобавитьВТабЧастьОСLawsonСсылкуНаОСФискал(ТабЧасть, ОСФискалСтрока.ОССсылка);
		КонецЦикла;
		
	Иначе
		ДобавитьВТабЧастьОСLawsonСсылкуНаОСФискал(ТабЧасть, ОСФискал);
	КонецЕсли;
			
	ПопыткаЗаписиОбъекта(ОбьектОСLawson, Отказ);
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКОСФискалСсылкуНаОСLawson(ОСLawsonСсылка, ОСФискалСсылка, Отказ)
	
	ОбьектОС = ОСФискалСсылка.ПолучитьОбъект();
	ОбьектОС.ОсновноеСредствоLawson = ОСLawsonСсылка;
	
	ПопыткаЗаписиОбъекта(ОбьектОС, Отказ);
	
КонецПроцедуры

Процедура ДобавитьВТабЧастьОСLawsonСсылкуНаОСФискал(ТабЧасть, ОСФискалСсылка)
	
	Строка = ТабЧасть.Добавить();
	Строка.ОсновноеСредство = ОСФискалСсылка;
	
КонецПроцедуры

Процедура ПопыткаЗаписиОбъекта(Обьект, Отказ)
	
	Попытка
		Обьект.Записать();
	Исключение
		ТекстОшибки = "Невозможно связать ОС: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецПопытки;
	
КонецПроцедуры

// ДЛЯ АВТОПОИСКА

Функция НайтиПохожиеОСДляАвтопоиска() Экспорт
	
	// Получим таблицы
	ТаблицаОСLawson = ПолучитьТаблицуОСLawsonДляАвтопоиска();
	ТаблицаОС = ПолучитьТаблицуОСДляАвтопоиска();
	ТаблицаОС.Колонки.Добавить("Rel", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,2)));
	
	// Приведем Серийный номер к виду без НПП
	Сч = 0;
	СчИтого = ТаблицаОС.Количество(); 
	Для каждого Стр из ТаблицаОС Цикл
		Сч = Сч + 1;
		Если НЕ Сч % 1000 Тогда
			#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
			Состояние("Приведение Серийного номера к виду без НПП. Обработано " + Сч + " ОС из " + СчИтого);
			#КонецЕсли
		КонецЕсли;
	 		Стр.SerNo = ПривестиСтроку(Стр.SerNo);
	КонецЦикла;

	// Установим индексы
	ТаблицаОС.Индексы.Добавить("Invoice");
	ТаблицаОС.Индексы.Добавить("PoNbr");
    ТаблицаОС.Индексы.Добавить("SerNo");
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Invoice");
	МассивПолей.Добавить("PoNbr");
	МассивПолей.Добавить("SerNo");
	
	Для каждого Стр из ТаблицаОСLawson Цикл
		
		Для каждого Элемент из МассивПолей Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить(Элемент, Стр[Элемент]);
			МассивСтрок = ТаблицаОС.НайтиСтроки(СтруктураПоиска);
			Если ЗначениеЗаполнено(МассивСтрок) Тогда
				
				Для каждого Строка из МассивСтрок Цикл
					Строка.Rel = ЭтотОбъект["мКоэфф" + Элемент];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Отсортируем по Rel
	ТаблицаОС.Сортировать("Rel Убыв");
	
	ТаблицаОСLawson.Колонки.Добавить("СписокСлов", Новый ОписаниеТипов("СписокЗначений"));
	
	
	Сч = 0;
	СчИтого = ТаблицаОСLawson.Количество(); 
	Для каждого Стр из ТаблицаОСLawson Цикл
		
		Сч = Сч + 1;
		Если НЕ Сч % 10 Тогда
			#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию
			Состояние("Получение списка слов для Item Description. Обработано " + Сч + " ОС Lawson из " + СчИтого);
			#КонецЕсли
		КонецЕсли;
	
		СписокСлов = ПолучитьСписокСлов(Стр.Name);
		Если СписокСлов.Количество() Тогда
			Стр.СписокСлов = СписокСлов;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОС.Колонки.Добавить("СписокСлов", Новый ОписаниеТипов("СписокЗначений"));
	
	Сч = 0;
	СчИтого = ТаблицаОС.Количество(); 
	Для каждого Стр из ТаблицаОС Цикл
		
		#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
	
		Сч = Сч + 1;
		Если НЕ Сч % 500 Тогда
			#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию
			Состояние("Получение списка слов для Наименования ENG. Обработано " + Сч + " ОС из " + СчИтого);
			#КонецЕсли      
		КонецЕсли;
		
		СписокСлов = ПолучитьСписокСлов(Стр.Name);
		Если СписокСлов.Количество() Тогда
			Стр.СписокСлов = СписокСлов;
		КонецЕсли;
		
		Стр.SerNo = ПривестиСтроку(Стр.SerNo);
		
	КонецЦикла;
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
	Состояние("Создание финальной таблицы");
	#КонецЕсли
		
	ФинальнаяТаблица = ТаблицаОС.Скопировать();
	ФинальнаяТаблица.Колонки.Добавить("Rel", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,2)));
	ФинальнаяТаблица.Колонки.Добавить("ОСLawsonСсылка", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредстваLawson"));
	
	// Найдем совпадения по колонкам
	Сч = 0;
	СчИтого = ТаблицаОСLawson.Количество(); 
	Для каждого СтрLawson из ТаблицаОСLawson Цикл
		
		Сч = Сч + 1;
		Если НЕ Сч % 5 Тогда
			#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
			Состояние("Поиск совпадений реквизитов. Обработано " + Сч + " ОС Lawson из " + СчИтого);
			#КонецЕсли
		КонецЕсли;
	
		Для Каждого СтрОС из ТаблицаОС Цикл
			
			#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			Rel = НайтиСовпадениеПоКолонкамДляАвтопоиска(СтрLawson, СтрОС);
			Если Rel >= RelMin Тогда
				СтрокаФ = ФинальнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФ, СтрОС);
				СтрокаФ.Rel = Rel;
				СтрокаФ.ОСLawsonСсылка = СтрLawson.ОСLawsonСсылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
	Состояние("");
	#КонецЕсли	
	Возврат ФинальнаяТаблица;
	
КонецФункции

Функция ПолучитьТаблицуОСLawsonДляАвтопоиска() Экспорт
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
	Состояние("Получение таблицы ОС Lawson");
	#КонецЕсли
		
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОС.ОсновноеСредствоLawson КАК ОСLawsonСсылка
		|ПОМЕСТИТЬ ВТПривязанные
		|ИЗ
		|	РегистрСведений.СоответствиеОС КАК СоответствиеОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОСLawsonСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредстваLawson.Ссылка КАК ОсновноеСредствоLawson,
		|	ОсновныеСредстваLawson.ItemDescription КАК Name,
		|	ОсновныеСредстваLawson.Invoice,
		|	ОсновныеСредстваLawson.PoNbr,
		|	ОсновныеСредстваLawson.СерийныйНомер КАК SerNo,
		|	ОсновныеСредстваLawson.ДатаПринятия КАК Date,
		|	ОсновныеСредстваLawson.ПервоначальнаяСтоимость КАК Value
		|ИЗ
		|	Справочник.ОсновныеСредстваLawson КАК ОсновныеСредстваLawson
		|ГДЕ
		|	(НЕ ОсновныеСредстваLawson.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТПривязанные.ОСLawsonСсылка
		|				ИЗ
		|					ВТПривязанные КАК ВТПривязанные))
		|	И (НЕ ОсновныеСредстваLawson.ПометкаУдаления)
		|	И ОсновныеСредстваLawson.ItemDescription <> """"";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
	Состояние("");
	#КонецЕсли
		
	Возврат Выгрузка;
	
КонецФункции

Функция ПолучитьТаблицуОСДляАвтопоиска() Экспорт
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию
	Состояние("Получение таблицы ОС");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("840"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОССсылка
		|ПОМЕСТИТЬ ВТОсновныеСредства
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|ГДЕ
		|	(НЕ ОсновныеСредства.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОССсылка,
		|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ КАК Value
		|ПОМЕСТИТЬ ВТValue
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(
		|			&Дата,
		|			ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВТОсновныеСредства.ОССсылка
		|				ИЗ
		|					ВТОсновныеСредства КАК ВТОсновныеСредства)) КАК ПервоначальныеСведенияСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОССсылка,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.КостЦентр
		|ПОМЕСТИТЬ ВТМестонахождение
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВТОсновныеСредства.ОССсылка
		|				ИЗ
		|					ВТОсновныеСредства КАК ВТОсновныеСредства)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОССсылка,
		|	НАЧАЛОПЕРИОДА(СостоянияОСОрганизаций.ДатаСостояния, ДЕНЬ) КАК Date
		|ПОМЕСТИТЬ ВТDate
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|ГДЕ
		|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|	И СостоянияОСОрганизаций.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				ВТОсновныеСредства.ОССсылка
		|			ИЗ
		|				ВТОсновныеСредства КАК ВТОсновныеСредства)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОССсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Период,
		|	КурсыВалют.Курс
		|ПОМЕСТИТЬ Курсы
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта = &Валюта
		|	И КурсыВалют.Период В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТDate.Date
		|			ИЗ
		|				ВТDate КАК ВТDate)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|	ОсновныеСредства.НаименованиеENG КАК Name,
		|	ОсновныеСредства.НомерКоммерческогоИнвойса КАК Invoice,
		|	ОсновныеСредства.НомерЗаказаНаПриобретение КАК PoNbr,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.СерийныйНомер = """"
		|			ТОГДА ВЫБОР
		|					КОГДА ОсновныеСредства.ЗаводскойНомер = """"
		|						ТОГДА ОсновныеСредства.НомерПаспорта
		|					ИНАЧЕ ОсновныеСредства.ЗаводскойНомер
		|				КОНЕЦ
		|		ИНАЧЕ ОсновныеСредства.СерийныйНомер
		|	КОНЕЦ КАК SerNo,
		|	ВТDate.Date,
		|	ВТValue.Value / Курсы.Курс КАК Value,
		|	ВТМестонахождение.КостЦентр КАК AU
		|ИЗ
		|	Курсы КАК Курсы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТDate КАК ВТDate
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТValue КАК ВТValue
		|				ПО (ВТValue.ОССсылка = ОсновныеСредства.Ссылка)
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМестонахождение КАК ВТМестонахождение
		|				ПО ВТМестонахождение.ОССсылка = ОсновныеСредства.Ссылка
		|			ПО ВТDate.ОССсылка = ОсновныеСредства.Ссылка
		|		ПО Курсы.Период = ВТDate.Date
		|ГДЕ
		|	(НЕ ОсновныеСредства.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Invoice";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	#Если Клиент Тогда //18.09.2012 Пахоменков добавил инструкцию 
	Состояние("");
	#КонецЕсли
	
	Возврат Выгрузка;
	
КонецФункции

Функция НайтиСовпадениеПоКолонкамДляАвтопоиска(СтруктураLawson, СтруктураОС)
	
	// Invoice
	Если ЗначениеЗаполнено(СтруктураLawson.Invoice) И ВРег(СокрЛП(СтруктураLawson.Invoice)) = ВРег(СокрЛП(СтруктураОС.Invoice)) Тогда
		ВероятностьInvoice = мКоэффInvoice;
	Иначе
		ВероятностьInvoice = 0;
	КонецЕсли;
	
	// PO
	Если ЗначениеЗаполнено(СтруктураLawson.PoNbr) И ВРег(СокрЛП(СтруктураLawson.PoNbr)) = ВРег(СокрЛП(СтруктураОС.PoNbr)) Тогда
		ВероятностьPO = мКоэффPoNbr;
	Иначе
		ВероятностьPO = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураLawson.СерийныйНомер) И ВРег(СокрЛП(СтруктураLawson.СерийныйНомер)) = СтруктураОС.SerNo И ЗначениеЗаполнено(СтруктураОС.SerNo) Тогда
		Если СтрДлина(СтруктураОС.SerNo) > мSerNoДлинаКороткого Тогда
			ВероятностьSerNo = мКоэффSerNoДлинный;
		Иначе
			ВероятностьSerNo = мКоэффSerNo;
		КонецЕсли;
	Иначе
		ВероятностьSerNo = 0;
	КонецЕсли;
	
	//
	Вероятность = ВероятностьInvoice + ВероятностьPO + ВероятностьSerNo;
	Если Вероятность < 0.1 Тогда
		Возврат 0;
	КонецЕсли;
	
	// Name
	ВероятностьName = мКоэффName * ПровестиСравнениеНаименованийДляАвтопоиска(СтруктураLawson.СписокСлов, СтруктураОС.СписокСлов);
	
	//Date
	Дата1С	= НачалоДня(СтруктураОС.Date);
	ДатаL	= НачалоДня(СтруктураLawson.Date);
	Если Дата1С > ДобавитьМесяц(ДатаL, 1) Тогда
		ВероятностьDate = 0;
	ИначеЕсли ДобавитьМесяц(ДатаL, -1) <= Дата1С И Дата1С <= ДобавитьМесяц(ДатаL, 1) Тогда
		ВероятностьDate = мКоэффValue;
	ИначеЕсли Дата1С >= ДобавитьМесяц(ДатаL, - 12) Тогда
		ВероятностьDate = Окр((12-(ДатаL - Дата1С)/(3600*24*30.5)) * мКоэффValue / 11, 2);
	Иначе
		ВероятностьDate = 0;
	КонецЕсли;
	
	//Value
	СтоимМакс	= Макс(СтруктураОС.Value, СтруктураLawson.Value);
	СтоимМин	= Мин(СтруктураОС.Value, СтруктураLawson.Value);
	
	Отклон = 1 - СтоимМин / СтоимМакс;
	Если Отклон <= 0.1 Тогда
		ВероятностьValue = мКоэффValue;
	Иначеесли Отклон <= 0.3 Тогда
		ВероятностьValue = Окр((0.3 - Отклон) * 5 * мКоэффValue, 2);
	Иначе
		ВероятностьValue = 0;
	КонецЕсли;
	
	// Просуммируем Rel
	Rel = Вероятность + ВероятностьName + ВероятностьDate + ВероятностьValue;
	Rel = ?(Rel > 1, 1, Rel);
	
	Возврат Rel;
	
КонецФункции

Функция ПровестиСравнениеНаименованийДляАвтопоиска(СписокСловL, СписокСлов) Экспорт
	
	СтруктураСчетчиковСовпадения = Новый Структура;
	СтруктураСчетчиковСовпадения.Вставить("Совпадающих",	0);
	СтруктураСчетчиковСовпадения.Вставить("Похожих",		0);
	СтруктураСчетчиковСовпадения.Вставить("Несовпадающих",	0);
	
	СписокСловLawson	= СписокСловL.Скопировать();
	СписокСловОС		= СписокСлов.Скопировать();
	
	ВсегоСлов = СписокСловLawson.Количество() + СписокСловОС.Количество();
	
	// Находим одинаковые слова
	Для каждого СловоL из СписокСловLawson Цикл
		
		НайденныйЭлемент = СписокСловОС.НайтиПоЗначению(СловоL.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
			СтруктураСчетчиковСовпадения.Вставить("Совпадающих", СтруктураСчетчиковСовпадения.Совпадающих + 1);
			СписокСловLawson.Удалить(СловоL);
			СписокСловОС.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если не найдено совпадающих слов, то дальше не проверяем
	//Если НЕ СтруктураСчетчиковСовпадения.Совпадающих Тогда
	//	Возврат 0;
	//КонецЕсли;
	
	СуммаВероятностей = 0;
	// Находим и считаем похожие слова
	Для каждого СловоL1 из СписокСловLawson Цикл
		
		Для каждого СловоОС из СписокСловОС Цикл
			
			ВероятностьСовпадения = СравнитьСлова(СловоL1.Значение, СловоОС.Значение);
			Если ВероятностьСовпадения >= мКоэффПохожестиСлова Тогда
				СтруктураСчетчиковСовпадения.Вставить("Похожих", СтруктураСчетчиковСовпадения.Похожих + 1);
				СуммаВероятностей = СуммаВероятностей + ВероятностьСовпадения;
				СписокСловLawson.Удалить(СловоL1);
				СписокСловОС.Удалить(СловоОС);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Оставшиеся слова считаем непохожими
	СтруктураСчетчиковСовпадения.Вставить("Несовпадающих", СписокСловLawson.Количество() + СписокСловОС.Количество());
	
	//
	ВсегоСлов = СтруктураСчетчиковСовпадения.Похожих 
		+ СтруктураСчетчиковСовпадения.Совпадающих
		+ СтруктураСчетчиковСовпадения.Несовпадающих;
		
	Возврат ?(НЕ ВсегоСлов, "0", (СтруктураСчетчиковСовпадения.Совпадающих + СуммаВероятностей) / ВсегоСлов);
	
КонецФункции

// ДЛЯ ОБХДА ГРУПП

Функция ПолучитьДанныеПоОСИзРегистраСоответствиеОС(ОСLawson, ОССсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОСLawson", ОСLawson);
	Запрос.УстановитьПараметр("ОССсылка", ОССсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОС.ОсновноеСредство,
		|	СоответствиеОС.Rel
		|ИЗ
		|	РегистрСведений.СоответствиеОС КАК СоответствиеОС
		|ГДЕ
		|	СоответствиеОС.ОсновноеСредствоLawson = &ОСLawson
		|	И СоответствиеОС.ОсновноеСредство В(&ОССсылка)";
		
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////


// Коэффициенты
мКоэффName				= 0.50;
мКоэффInvoice			= 0.20;
мКоэффPoNbr				= 0.30;
мКоэффSerNo				= 0.10;
мКоэффSerNoДлинный		= 0.40;
мSerNoДлинаКороткого	= 4;
мКоэффDate				= 0.15;
мКоэффValue				= 0.15;

мКоэффПохожестиСлова	= 0.5;

// Минимальное значение похожести ОС, выводимое пользователю
RelMin = 0.30;

ТаблицаБукв = Новый ТаблицаЗначений;
ТаблицаБукв.Колонки.Добавить("Позиция");
ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
