////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформационнуюНадпись(Форма)

	ШаблонНадписи = ВернутьСтр("ru = 'Всего подобрано %1 позиции(ия)'");
	Форма.ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи, Форма.Объект.Корзина.Количество());

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииОС(ГруппаОС)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПодборТаблицаОС, "Ссылка",
		ГруппаОС, ЗначениеЗаполнено(ГруппаОС), ВидСравненияКомпоновкиДанных.ВИерархии);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()

	Использование = ЗначениеЗаполнено(СтрокаПоиска);

	ГруппаОтбора = СоздатьГруппуЭлементовОтбора(
		ЭтаФорма.ПодборТаблицаОС.Отбор.Элементы, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Наименование", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "НаименованиеПолное", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Код", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	ОбновитьОтображениеДанных();

КонецПроцедуры

//добавлено RG-SOFT

&НаКлиенте
Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

&НаКлиенте
Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

&НаКлиенте
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

&НаКлиенте
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление, ВидПоиска = 0) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ВидПоиска = 0 Тогда
			Если ЭлементОтбора.Представление = Представление Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 1 Тогда
			Если СтрНайти(ЭлементОтбора.Представление, Представление) = 1 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 2 Тогда
			Если СтрНайти(ЭлементОтбора.Представление, Представление) > 0 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

&НаКлиенте
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

&НаКлиенте
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	Для каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			Если КоличествоНайденных > 7 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // АвтоПодбор()

&НаКлиенте
Процедура ОбновитьСписокВыбора(СписокВыбора, СтрокаПоиска) Экспорт
	
	// Удалим элемент из истории поиска если он там был
	НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;
	
	
	// И поставим его на первое место
	СписокВыбора.Вставить(0, СтрокаПоиска);
	Пока СписокВыбора.Количество() > 1000 Цикл
		СписокВыбора.Удалить(СписокВыбора.Количество() - 1);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокВыбора()

//конец добавления RG-SOFT

&НаСервере
Функция ПоместитьОСВХранилище()

	ОС = Объект.Корзина.Выгрузить();

	АдресОСВХранилище = ПоместитьВоВременноеХранилище(ОС, УникальныйИдентификатор);

	Возврат АдресОСВХранилище;

КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыОС, Количество)

	РезультатПоиска = Объект.Корзина.НайтиСтроки(ПараметрыОС);
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОС);

		ДобавленыНовыеОС = Истина;
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;

	// Активизируем текущую строку табличной части
	Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

	СформироватьИнформационнуюНадпись(ЭтаФорма);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ИерархияОС

&НаКлиенте
Процедура ИерархияОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииОС(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияОСПриАктивизацииСтроки(Элемент)

	ТекущаяСтрока = Элементы.ИерархияОС.ТекущаяСтрока;
	Если ТекущаяСтрока <> ТекущаяГруппаОС Тогда
		ТекущаяГруппаОС = ТекущаяСтрока;
		УстановитьОтборПоИерархииОС(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ТаблицаОС

&НаКлиенте
Процедура ПодборТаблицаОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		СтруктураПараметрыОС = Новый Структура;
		СтруктураПараметрыОС.Вставить("ОсновноеСредство", Элемент.ТекущиеДанные.Ссылка);
		ДобавитьВКорзину(СтруктураПараметрыОС, 1);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ Корзина

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборОС",);
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ИсторияПоискаОС") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.ИсторияПоискаОС);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(Параметры.АдресОСВХранилище) Тогда
		ОС = ПолучитьИзВременногоХранилища(Параметры.АдресОСВХранилище);
		Объект.Корзина.Загрузить(ОС);
	КонецЕсли;

	СформироватьИнформационнуюНадпись(ЭтаФорма);

	ТекущаяГруппаОС = Справочники.ОсновныеСредства.ПустаяСсылка();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ПеренестиВДокумент И ДобавленыНовыеОС Тогда

		ОтветНаВопрос = Вопрос(ВернутьСтр("ru = 'Подобранные основные средства не перенесены в документ.
			|
			|Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);

		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			ПеренестиВДокумент = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ИсторияПоискаОС", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПодборОС", , ПараметрыЗакрытия);

	Если ПеренестиВДокумент Тогда
		АдресОСВХранилище = ПоместитьОСВХранилище();
		Структура = Новый Структура("АдресОСВХранилище", АдресОСВХранилище);
		ПеренестиВДокумент = Истина;
		ОповеститьОВыборе(Структура);
	КонецЕсли;

КонецПроцедуры
