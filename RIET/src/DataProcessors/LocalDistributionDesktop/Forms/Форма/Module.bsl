  
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Parcels.Параметры.УстановитьЗначениеПараметра("СписокWarehouseFrom", LocalDistributionСервер.ПолучитьСписокLeg7WarehouseFrom().ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьDashboards()
	
	ИнициализироватьTripsPendingOpenDashboards();
	//ИнициализироватьLocalLeadTimeDashboards();
	
	СформироватьDashboardsНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьTripsPendingOpenDashboards()
	
	ПараметрыДанных = Новый Структура("ТекущаяДата", ТекущаяДата());
	ИнициализироватьDashboard(Отчеты.LEG7TripsPendingOpen, ОтчетLEG7TripsPendingOpenByServiceProviders, АдресСхемыКомпоновкиTripsPendingOpenByServiceProviders, , , "ByServiceProviders", ПараметрыДанных);
	ИнициализироватьDashboard(Отчеты.LEG7TripsPendingOpen, ОтчетLEG7TripsPendingOpenBySpecialist, АдресСхемыКомпоновкиTripsPendingOpenBySpecialist, , , "BySpecialist", ПараметрыДанных);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьLocalLeadTimeDashboards()
	
	ИнициализироватьDashboard(Отчеты.LEG7LocalLeadTime, ОтчетLEG7LocalLeadTimeByWarehouseFrom, АдресСхемыКомпоновкиLocalLeadTimeByWarehouseFrom, , , "ByWarehouseFrom");
	ИнициализироватьDashboard(Отчеты.LEG7LocalLeadTime, ОтчетLEG7LocalLeadTimeByServiceProvider, АдресСхемыКомпоновкиLocalLeadTimeByServiceProvider, , , "ByServiceProvider");
	ИнициализироватьDashboard(Отчеты.LEG7LocalLeadTime, ОтчетLEG7LocalLeadTimeByMOT, АдресСхемыКомпоновкиLocalLeadTimeByMOT, , , "ByMOT");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьDashboard(ОтчетМенеджер, ДанныеФормыСтруктура, АдресСхемы, НастройкиОтбора = Неопределено, МассивДопПолейГруппировок = Неопределено, ИмяВарианта = Неопределено, ПараметрыДанных = Неопределено)
	
	ПолноценныйОтчет = ОтчетМенеджер.Создать();
	СКД = ПолноценныйОтчет.СхемаКомпоновкиДанных;
	АктивизироватьВариантОтчета(СКД, ИмяВарианта);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	ПолноценныйОтчет.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ИнициализироватьДопПоляГруппировкиDashboard(ПолноценныйОтчет.КомпоновщикНастроек, МассивДопПолейГруппировок);
	ИнициализироватьОтборDashboard(ПолноценныйОтчет.КомпоновщикНастроек, НастройкиОтбора);
	ИнициализироватьПараметрыДанныхDashboard(ПолноценныйОтчет.КомпоновщикНастроек, ПараметрыДанных);
	ЗначениеВДанныеФормы(ПолноценныйОтчет, ДанныеФормыСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыДанныхDashboard(КомпоновщикНастроек, ПараметрыДанных, ВключатьВПользовательскиеНастройки = Ложь)
	
	Если ПараметрыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПараметр Из ПараметрыДанных Цикл
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ТекПараметр.Ключ);
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ТекПараметр.Значение;
			Параметр.Использование = Истина;
			Если ВключатьВПользовательскиеНастройки Тогда
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Параметр.ИдентификаторПользовательскойНастройки);
				Если ПользовательскийПараметр <> Неопределено Тогда
					ПользовательскийПараметр.Значение = ТекПараметр.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьВариантОтчета(СКД, ИмяВарианта)
	
	Если Не ЗначениеЗаполнено(ИмяВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = СКД.ВариантыНастроек.Найти(ИмяВарианта);
	
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыДляУдаления = Новый Массив;
	
	Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			ВариантыДляУдаления.Добавить(ТекВариант);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВариант Из ВариантыДляУдаления Цикл
		СКД.ВариантыНастроек.Удалить(ТекВариант);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДопПоляГруппировкиDashboard(КомпоновщикНастроек, МассивДопПолейГруппировок)
	
	Если МассивДопПолейГруппировок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДопПолеГруппировки Из МассивДопПолейГруппировок Цикл
		ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, ДопПолеГруппировки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборDashboard(КомпоновщикНастроек, НастройкиОтбора)
	
	Если НастройкиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ТекНастройкаОтбора Из НастройкиОтбора Цикл
		НашлиЭлементОтбора = Ложь;
		Для каждого ТекЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
			Если ТекЭлементОтбора.ЛевоеЗначение = ТекНастройкаОтбора.ЛевоеЗначение Тогда
				ЗаполнитьЗначенияСвойств(ТекЭлементОтбора, ТекНастройкаОтбора);
				ТекЭлементОтбора.Использование = Истина;
				НашлиЭлементОтбора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не НашлиЭлементОтбора Тогда
			ЭлементОтбора = КоллекцияЭлементовОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ТекНастройкаОтбора);
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // } RGS AGorlenko 11.03.2014 13:44:32 - S-I-0000633

&НаКлиенте
Процедура Отсчет()
	
	MinutesRemaining = MinutesRemaining - 1;
	Если MinutesRemaining = 0 Тогда
		ПараметрыДанных = Новый Структура("ТекущаяДата", ТекущаяДата());
		ИнициализироватьПараметрыДанныхDashboard(ОтчетLEG7TripsPendingOpenByServiceProviders.КомпоновщикНастроек, ПараметрыДанных, Истина);
		ИнициализироватьПараметрыДанныхDashboard(ОтчетLEG7TripsPendingOpenBySpecialist.КомпоновщикНастроек, ПараметрыДанных, Истина);
		СформироватьDashboardsНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПериод();
	УстановитьWarehouseFrom();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод()
	
	Если Не ЗначениеЗаполнено(Period) Тогда
		Period = Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКвартал) 
	КонецЕсли;
	
	Parcels.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Period.ДатаНачала);
	Parcels.Параметры.УстановитьЗначениеПараметра("КонецПериода", Period.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанTrip" Тогда
		Элементы.Parcels.Обновить();
	КонецЕсли; 
	
КонецПроцедуры
 
  
///////////////////////////////////////////////////////////////////////////////
/// СТРАНИЦА PARCELS
///////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура PeriodПриИзменении(Элемент)
	
	УстановитьПериод();	
	
КонецПроцедуры

&НаКлиенте
Процедура WarehouseFromНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWarehouseFrom = LocalDistributionСервер.ПолучитьСписокLeg7WarehouseFrom();
	ЭлементСписка = ВыбратьИзСписка(СписокWarehouseFrom, Элементы.WarehouseFrom);

	Если ЭлементСписка <> Неопределено Тогда 
		WarehouseFrom = ЭлементСписка.Значение;
	КонецЕсли;
	
	УстановитьWarehouseFrom();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьWarehouseFrom()
	
	Если ЗначениеЗаполнено(WarehouseFrom) Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Parcels.Отбор,
			"WarehouseFrom",
			WarehouseFrom,
			ВидСравненияКомпоновкиДанных.Равно);
	иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Parcels.Отбор,
			"WarehouseFrom");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура WarehouseFromПриИзменении(Элемент)
	
	УстановитьWarehouseFrom();
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриАктивизацииСтроки(Элемент)
	
	ParcelsGrossWeightKG = 0;
	ParcelsCubicMeters = 0;
	КолВоВыделенныхСтрок = 0;
	
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	МассивСтруктурParcels = ПолучитьМассивСтруктурДанныхВыделенныхСтрокParcels(МассивParcels);
	
	Для Каждого СтруктураParcel из МассивСтруктурParcels цикл
		
		ParcelsGrossWeightKG = ParcelsGrossWeightKG + СтруктураParcel.GrossWeightKG;
		ParcelsCubicMeters = ParcelsCubicMeters + СтруктураParcel.CubicMeters;
		КолВоВыделенныхСтрок = КолВоВыделенныхСтрок + 1;
		
	КонецЦикла;
	 	
КонецПроцедуры


// КОМАНДНАЯ ПАНЕЛЬ

&НаКлиенте
Процедура MarkAsEmergency(Команда)
	
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	ChangeParcelsUrgency(МассивParcels);

	Элементы.Parcels.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ChangeParcelsUrgency(МассивParcels);
		
	Для Каждого ЭлементМассива из МассивParcels цикл
		
		ParcelОбъект = ЭлементМассива.ПолучитьОбъект();
		
		ParcelОбъект.ОбменДанными.Загрузка = Истина;
		
		Если ParcelОбъект.Urgency = Перечисления.Urgencies.Emergency Тогда 
			ParcelОбъект.Urgency = Перечисления.Urgencies.Standard;
		Иначе 
			ParcelОбъект.Urgency = Перечисления.Urgencies.Emergency;
		КонецЕсли;
		
		ParcelОбъект.Записать();
		
	КонецЦикла;	
		
КонецПроцедуры


// MOVE TO NEW TRIP

&НаКлиенте
Процедура MoveToNewTrip(Команда)
	
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	МассивСтруктурParcels = ПолучитьМассивСтруктурДанныхВыделенныхСтрокParcels(МассивParcels);
	Отказ = Ложь;
	
	// Определим и проверим Warehouse from Выделенных Parcels
	WarehouseFromВыделенныхParcels = ПолучитьWarehouseFromВыделенныхParcels(МассивСтруктурParcels);	
	Если WarehouseFromВыделенныхParcels = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Selected parcels have different Warehouse from!",
			, , , Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеParcelsНаходятсяВTrips(МассивСтруктурParcels) Тогда
		
		Ответ = ВопросОПеремещенииВДругойTrip();
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	MoveToTrip();
   	  	
КонецПроцедуры 

// MOVE TO EXISTING TRIP

&НаКлиенте
Процедура AddToExistingTrip(Команда)  
	
	Отказ = Ложь;
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	МассивСтруктурParcels = ПолучитьМассивСтруктурДанныхВыделенныхСтрокParcels(МассивParcels);
		
	// Определим и проверим Warehouse from Выделенных Parcels
	WarehouseFromВыделенныхParcels = ПолучитьWarehouseFromВыделенныхParcels(МассивСтруктурParcels);	
	Если WarehouseFromВыделенныхParcels = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Selected parcels have different Warehouse from!",
			, , , Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Зададим вопрос о перемещении в другой Trip при необходимости
	Если ВыделенныеParcelsНаходятсяВTrips(МассивСтруктурParcels) Тогда
		
		Ответ = ВопросОПеремещенииВДругойTrip();
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем форму выбора Trip
	СтруктураОтбора = Новый Структура;
		            
	СтруктураОтбора.Вставить("Final", '00010101');
	СтруктураОтбора.Вставить("WarehouseFrom", WarehouseFromВыделенныхParcels);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	GrossWeightKG = 0;
	Для Каждого СтруктураParcel из МассивСтруктурParcels цикл
		GrossWeightKG = GrossWeightKG + СтруктураParcel.GrossWeightKG;
	КонецЦикла;
	СтруктураПараметров.Вставить("GrossWeightKG", GrossWeightKG);
	
	ОткрытьФорму("Документ.Trip.ФормаВыбора", СтруктураПараметров, Элементы.Parcels);
	
	Элементы.Parcels.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьWarehouseFromВыделенныхParcels(МассивСтруктурParcels)
	
	WarehouseFromВыделенныхParcels = Неопределено;
	Для Каждого СтруктураParcel Из МассивСтруктурParcels Цикл
		
		Если WarehouseFromВыделенныхParcels <> Неопределено
			И WarehouseFromВыделенныхParcels <> СтруктураParcel.WarehouseFrom Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		WarehouseFromВыделенныхParcels = СтруктураParcel.WarehouseFrom;
		
	КонецЦикла; 
	
	Возврат WarehouseFromВыделенныхParcels;
	
КонецФункции

&НаКлиенте
Процедура ParcelsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Trip")
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		MoveToTrip(ВыбранноеЗначение);
				
	КонецЕсли;
	
КонецПроцедуры

// REMOVE FROM TRIP

&НаКлиенте
Процедура RemoveFromTrips(Команда)
	
	Ответ = Вопрос(
		"Are you sure, you want to remove Parcels from Trips?",
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Да,
		"Attention!",
		КодВозвратаДиалога.Нет);
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УдалитьParcelsИзTrips(Отказ, ПолучитьСоответствиеУдаляемыхИзTripParcels());
	
	Если Не Отказ Тогда
		ПоказатьОповещениеПользователя(
			"Success",
			,
			"Parcels were successfully removed from Trips.");
	КонецЕсли; 
	
	Элементы.Parcels.Обновить();
	
КонецПроцедуры
   
// ОБЩЕЕ

&НаКлиенте
Процедура MoveToTrip(Trip=Неопределено)
	
	Если Элементы.Parcels.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
 	УдалитьParcelsИзTrips(Отказ, ПолучитьСоответствиеУдаляемыхИзTripParcels(Trip));
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// откроем форму Trip
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ЗначениеЗаполнено(Trip) Тогда 
		СтруктураПараметров.Вставить("Ключ", Trip);
		СтруктураПараметров.Вставить("МассивParcels", Элементы.Parcels.ВыделенныеСтроки);
	иначе
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", Новый Структура("МассивParcels", Элементы.Parcels.ВыделенныеСтроки));
	КонецЕсли;

	ОткрытьФорму("Документ.Trip.ФормаОбъекта", СтруктураПараметров, ЭтаФорма, Истина);	
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеParcelsНаходятсяВTrips(МассивСтруктурParcels)
	
	Для Каждого СтруктураParcel Из МассивСтруктурParcels Цикл
		
		Если ЗначениеЗаполнено(СтруктураParcel.Trip) Тогда
			Возврат Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции 

&НаКлиенте
Функция ВопросОПеремещенииВДругойTrip()
	
	Возврат Вопрос(
		"Some parcels are already included in Trips.
		|Are you sure, you want to move them into another Trip?",
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Да,
		"Attention!",
		КодВозвратаДиалога.Нет);
	
КонецФункции
     
&НаСервереБезКонтекста
Процедура УдалитьParcelsИзTrips(Отказ, СоответствиеУдаляемыхИзTripParcels)
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Для Каждого КлючИЗначение Из СоответствиеУдаляемыхИзTripParcels Цикл
		
		СтруктураПоискаПоParcel = Новый Структура("Parcel");
		
		TripОбъект = КлючИЗначение.Ключ.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(TripОбъект.Final) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Final Trip " + TripОбъект + " can not be changed!",
				TripОбъект, , , Отказ);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Parcel Из КлючИЗначение.Значение Цикл
			
			СтруктураПоискаПоParcel.Parcel = Parcel;
			СтрокиТЧ = TripОбъект.Parcels.НайтиСтроки(СтруктураПоискаПоParcel);
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				TripОбъект.Parcels.Удалить(СтрокаТЧ);
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			
			Если TripОбъект.Parcels.Количество() = 0 Тогда 
				TripОбъект.ПометкаУдаления = Истина;
			КонецЕсли;
			
			TripОбъект.Записать();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to remove Parcels from " + TripОбъект + ". See errors above. " + ОписаниеОшибки(),
				TripОбъект, , , Отказ);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеУдаляемыхИзTripParcels(Trip=Неопределено)
	
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	МассивСтруктурParcels = ПолучитьМассивСтруктурДанныхВыделенныхСтрокParcels(МассивParcels);
	  
	СоответствиеУдаляемыхИзTripParcels = Новый Соответствие;
	Для Каждого СтруктураParcel из МассивСтруктурParcels цикл
		
		Если Не ЗначениеЗаполнено(СтруктураParcel.Trip) 
			ИЛИ СтруктураParcel.Trip = Trip Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСоответствия = СоответствиеУдаляемыхИзTripParcels.Получить(СтруктураParcel.Trip);
		Если ЭлементСоответствия = Неопределено Тогда 
			НовыйЭлементСоответствия = Новый Массив;
			НовыйЭлементСоответствия.Добавить(СтруктураParcel.Parcel);
			СоответствиеУдаляемыхИзTripParcels.Вставить(СтруктураParcel.Trip, НовыйЭлементСоответствия);
		иначе
			ЭлементСоответствия.Добавить(СтруктураParcel.Parcel);
			СоответствиеУдаляемыхИзTripParcels.Вставить(СтруктураParcel.Trip, ЭлементСоответствия);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеУдаляемыхИзTripParcels;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивСтруктурДанныхВыделенныхСтрокParcels(МассивParcels) 
	
	МассивСтруктурParcels = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);

	Запрос.Текст = "ВЫБРАТЬ
	               |	Parcels.Ссылка КАК Parcel,
	               |	Parcels.WarehouseFrom,
	               |	Parcels.GrossWeightKG,
	               |	Parcels.CubicMeters,
	               |	ЕСТЬNULL(TripParcels.Ссылка, """") КАК Trip
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	               |		ПО Parcels.Ссылка = TripParcels.Parcel
	               |			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
	               |ГДЕ
	               |	Parcels.Ссылка В(&МассивParcels)";
	  		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураParcel = Новый Структура("WarehouseFrom,GrossWeightKG,CubicMeters,Trip,Parcel");
	
		СтруктураParcel.WarehouseFrom = Выборка.WarehouseFrom;
		СтруктураParcel.GrossWeightKG = Выборка.GrossWeightKG;
		СтруктураParcel.CubicMeters = Выборка.CubicMeters;
		СтруктураParcel.Trip = Выборка.Trip;
		СтруктураParcel.Parcel = Выборка.Parcel;

		МассивСтруктурParcels.Добавить(СтруктураParcel);
	
	КонецЦикла;
	
	Возврат МассивСтруктурParcels;
	    	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
/// СТРАНИЦА REPORTS
///////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Процедура DetailsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элементы.Details.ТекущиеДанные.ParcelСсылка);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
/// GENERATE REPORT 

&НаКлиенте
Процедура GenerateReport(Команда)
	
	Если ПроверитьЗаполнение() Тогда 
		ЗагрузитьDetailsНаСервере();	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьDetailsНаСервере()
	
	ServiceProviderОбъект = ServiceProvider.ПолучитьОбъект();
	
	//МассивPOA = ServiceProviderОбъект.POAs.ВыгрузитьКолонку("POA");
	
	ТаблицаДанныхIntInboundReport = Обработки.LocalDistributionDesktop.ПолучитьРезультатЗапросаLeg7Reports(ServiceProvider,
		ServiceProviderОбъект.DefaultWarehouse, ShipmentATA);
	
	Объект.Details.Загрузить(ТаблицаДанныхIntInboundReport);
	     	
КонецПроцедуры                     

//////////////////////////////////////////////////////////////
/// SAVE IN XML

&НаКлиенте
Процедура SaveInXML(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;	
	КонецЕсли;

	// { RGS AGorlenko 21.11.2014 18:24:02 - для обмена изменениями может быть пустым
	//Если Объект.Details.Количество() = 0 Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Leg7 report is empty!"
	//		, Объект.Details);
	//	Возврат;
	//КонецЕсли;
	// { RGS AGorlenko 21.11.2014 18:24:02 - для обмена изменениями может быть пустым
	
	// Поместим файл во временное хранилище
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
	ДиалогВыбораФайла.Фильтр = "XML files|*.xml";	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;	
	PathToXML = ДиалогВыбораФайла.ПолноеИмяФайла;
	
	АдресФайла = SaveAsXMLНаСервере(АдресФайла);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(PathToXML)	
	
КонецПроцедуры

&НаСервере
Функция SaveAsXMLНаСервере(АдресФайла)
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	ТаблицаDetails = Объект.Details.Выгрузить();
	ТаблицаWO = Объект.WOReport.Выгрузить();
	Обработки.LocalDistributionDesktop.УдалитьСтрокиСПустымWaybillИзWOReport(ТаблицаWO, Истина);
	МассивСкладов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаDetails.ВыгрузитьКолонку("WarehouseFromСсылка"));
	ПолучитьLeg7Reports = Обработки.LocalDistributionDesktop.ПолучитьСообщениеОбмена(
		ТаблицаDetails, ТаблицаWO, СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ServiceProvider.DefaultWarehouse, "Код")), МассивСкладов, Неопределено, Неопределено, Неопределено, СоответствиеУзловОбменаИСервисПровайдеров[ServiceProvider], ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(СоответствиеУзловОбменаИСервисПровайдеров[ServiceProvider]));
		
	Если ПолучитьLeg7Reports = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
			  				
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПолучитьLeg7Reports);
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
КонецФункции

&НаКлиенте
Процедура SendParcels(Команда)
	
	МассивParcels = Элементы.Parcels.ВыделенныеСтроки;
	Если МассивParcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	SendParcelsНаСервере(МассивParcels);
	
	Элементы.Parcels.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура SendParcelsНаСервере(МассивParcels)
	
	Обработки.LocalDistributionDesktop.ЗарегистрироватьДополнительныеПарселиКОтправке(МассивParcels);
	
КонецПроцедуры


&НаКлиенте
Процедура GenerateReportChanges(Команда)
	Если ПроверитьЗаполнение() Тогда
		GenerateReportChangesНаСервере();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура GenerateReportChangesНаСервере()
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	УзелОбмена = СоответствиеУзловОбменаИСервисПровайдеров[ServiceProvider];
	
	Если УзелОбмена = Неопределено Тогда
		РГСофтКлиентСервер.СообщитьОбОшибке("Для сервис-провайдера '" + ServiceProvider + "' не задан узел обмена.");
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(УзелОбмена);
	ТаблицаДанныхIntInboundReport = Обработки.LocalDistributionDesktop.ПолучитьРезультатЗапросаLeg7Reports(ServiceProvider,
		ServiceProvider.DefaultWarehouse, УзелОбмена, НастройкаОбмена);
		
	ТаблицаДанныхWOReport = Обработки.LocalDistributionDesktop.ПолучитьРезультатЗапросаWOReport(УзелОбмена);
	
	ТаблицаДанныхLeg6 = Обработки.LocalDistributionDesktop.ПолучитьТаблицыLeg6(УзелОбмена);
	ТаблицаДанныхAdditionalInfo = Обработки.LocalDistributionDesktop.ПолучитьТаблицыAdditionalInfo(УзелОбмена);
	// { RGS LKhristyuk 4/23/2018 5:11:52 PM
	ТаблицаДанныхExportReports = Обработки.LocalDistributionDesktop.ПолучитьТаблицыExportReports(УзелОбмена);
	// } RGS LKhristyuk 4/23/2018 5:11:52 PM
	
	Объект.Details.Загрузить(ТаблицаДанныхIntInboundReport);
	Объект.WOReport.Загрузить(ТаблицаДанныхWOReport);
	Объект.Invoices.Загрузить(ТаблицаДанныхLeg6.Invoices);
	Объект.DOCs.Загрузить(ТаблицаДанныхLeg6.DOCs);
	Объект.DOCManualStatuses.Загрузить(ТаблицаДанныхLeg6.DOCsManualStatuses);
	Объект.DOCInvoices.Загрузить(ТаблицаДанныхLeg6.DOCsInvoices);
	Объект.DOCParcels.Загрузить(ТаблицаДанныхLeg6.DOCsParcels);
	Объект.Shipments.Загрузить(ТаблицаДанныхLeg6.Shipments);
	Объект.ShipmentDOCs.Загрузить(ТаблицаДанныхLeg6.ShipmentDOCs);
	Объект.ShipmentOutOfComplianceReasons.Загрузить(ТаблицаДанныхLeg6.ShipmentOutOfComplianceReasons);
	Объект.POs.Загрузить(ТаблицаДанныхLeg6.POs);
	Объект.POLines.Загрузить(ТаблицаДанныхLeg6.POLines);
	Объект.InvoiceLines.Загрузить(ТаблицаДанныхLeg6.Items);
	Объект.BORGs.Загрузить(ТаблицаДанныхAdditionalInfo.BORGs);
	Объект.AUs.Загрузить(ТаблицаДанныхAdditionalInfo.AUs);
	Объект.Warehouses.Загрузить(ТаблицаДанныхAdditionalInfo.Warehouses);
	Объект.LegalEntities.Загрузить(ТаблицаДанныхAdditionalInfo.LegalEntities);
	Объект.Equipments.Загрузить(ТаблицаДанныхAdditionalInfo.Equipments);
	Объект.ServiceProviders.Загрузить(ТаблицаДанныхAdditionalInfo.ServiceProviders);
	Объект.Users.Загрузить(ТаблицаДанныхAdditionalInfo.Users);
	// { RGS LKhristyuk 4/23/2018 5:13:06 PM
	Объект.ExportRequests.Загрузить(ТаблицаДанныхExportReports.ExportRequests);
	// } RGS LKhristyuk 4/23/2018 5:13:06 PM
	
КонецПроцедуры


&НаСервере
Процедура СформироватьDashboardsНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СформироватьDashboardНаСервере(ТабличныйДокументTripsPendingOpenByServiceProviders, ОтчетLEG7TripsPendingOpenByServiceProviders, "LEG7TripsPendingOpen", АдресДанныхРасшифровкиTripsPendingOpenByServiceProviders);
	СформироватьDashboardНаСервере(ТабличныйДокументTripsPendingOpenBySpecialist, ОтчетLEG7TripsPendingOpenBySpecialist, "LEG7TripsPendingOpen", АдресДанныхРасшифровкиTripsPendingOpenBySpecialist);
	
	//СформироватьDashboardНаСервере(ТабличныйДокументLocalLeadTimeByWarehouseFrom, ОтчетLEG7LocalLeadTimeByWarehouseFrom, "LEG7LocalLeadTime", АдресДанныхРасшифровкиLocalLeadTimeByWarehouseFrom, Ложь);
	//СформироватьDashboardНаСервере(ТабличныйДокументLocalLeadTimeByServiceProvider, ОтчетLEG7LocalLeadTimeByServiceProvider, "LEG7LocalLeadTime", АдресДанныхРасшифровкиLocalLeadTimeByServiceProvider, Ложь);
	//СформироватьDashboardНаСервере(ТабличныйДокументLocalLeadTimeByMOT, ОтчетLEG7LocalLeadTimeByMOT, "LEG7LocalLeadTime", АдресДанныхРасшифровкиLocalLeadTimeByMOT, Ложь);
	
	MinutesRemaining = 60;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьDashboardНаСервере(ТабличныйДокумент, ДанныеФормы, ИмяОтчета, АдресДанныхРасшифровки, СворачиватьГруппировки = Истина)
	
	ТабличныйДокумент.Очистить();
	ПолноценныйОтчет = ДанныеФормыВЗначение(ДанныеФормы, Тип("ОтчетОбъект." + ИмяОтчета));
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ПолноценныйОтчет.СкомпоноватьРезультат(ТабличныйДокумент, ДанныеРасшифровки);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	Если СворачиватьГруппировки Тогда
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RefreshNow(Команда)
	
	ПараметрыДанных = Новый Структура("ТекущаяДата", ТекущаяДата());
	ИнициализироватьПараметрыДанныхDashboard(ОтчетLEG7TripsPendingOpenByServiceProviders.КомпоновщикНастроек, ПараметрыДанных, Истина);
	ИнициализироватьПараметрыДанныхDashboard(ОтчетLEG7TripsPendingOpenBySpecialist.КомпоновщикНастроек, ПараметрыДанных, Истина);
	СформироватьDashboardsНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ShowTripsPendingOpenFiltersByServiceProviders(Команда)
	
	Элементы.ShowTripsPendingOpenByServiceProvidersFilters.Пометка = НЕ Элементы.ShowTripsPendingOpenByServiceProvidersFilters.Пометка;
	Элементы.КомпоновщикНастроекTripsPendingOpenByServiceProvidersПользовательскиеНастройки.Видимость = Элементы.ShowTripsPendingOpenByServiceProvidersFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowTripsPendingOpenFiltersBySpecialist(Команда)
	Элементы.ShowTripsPendingOpenBySpecialistFilters.Пометка = НЕ Элементы.ShowTripsPendingOpenBySpecialistFilters.Пометка;
	Элементы.КомпоновщикНастроекTripsPendingOpenBySpecialistПользовательскиеНастройки.Видимость = Элементы.ShowTripsPendingOpenBySpecialistFilters.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ShowLocalLeadTimeFiltersByWarehouseFrom(Команда)
	Элементы.ShowLocalLeadTimeByWarehouseFromFilters.Пометка = НЕ Элементы.ShowLocalLeadTimeByWarehouseFromFilters.Пометка;
	Элементы.КомпоновщикНастроекLocalLeadTimeByWarehouseFromПользовательскиеНастройки.Видимость = Элементы.ShowLocalLeadTimeByWarehouseFromFilters.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ShowLocalLeadTimeFiltersByServiceProvider(Команда)
	Элементы.ShowLocalLeadTimeByServiceProviderFilters.Пометка = НЕ Элементы.ShowLocalLeadTimeByServiceProviderFilters.Пометка;
	Элементы.КомпоновщикНастроекLocalLeadTimeByServiceProviderПользовательскиеНастройки.Видимость = Элементы.ShowLocalLeadTimeByServiceProviderFilters.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ShowLocalLeadTimeFiltersByMOT(Команда)
	Элементы.ShowLocalLeadTimeByMOTFilters.Пометка = НЕ Элементы.ShowLocalLeadTimeByMOTFilters.Пометка;
	Элементы.КомпоновщикНастроекLocalLeadTimeByMOTПользовательскиеНастройки.Видимость = Элементы.ShowLocalLeadTimeByMOTFilters.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаTripsPendingOpenDashboard ИЛИ ТекущаяСтраница = Элементы.ГруппаLocalLeadTimeDashboard Тогда
		
		Если ТабличныйДокументTripsPendingOpenByServiceProviders.ВысотаТаблицы = 0 Тогда
		
			ИнициализироватьDashboards();
			ПодключитьОбработчикОжидания("Отсчет", 60);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументTripsPendingOpenByServiceProvidersОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиTripsPendingOpenByServiceProviders, АдресДанныхРасшифровкиTripsPendingOpenByServiceProviders, Расшифровка, "LEG7TripsPendingOpen");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровку(АдресСхемыКомпоновки, АдресДанныхРасшифровки, Расшифровка, ИмяОтчета)
	
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыбранноеДействие, ПараметрыВыбранногоДействия, ДоступныеДействия);
	
	Если ВыбранноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ПоказатьЗначение(,ПараметрыВыбранногоДействия);
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
			СтруктураПараметров.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрыВыбранногоДействия));
			ОткрытьФорму("Отчет." + ИмяОтчета + ".Форма", СтруктураПараметров, , Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументTripsPendingOpenBySpecialistОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиTripsPendingOpenBySpecialist, АдресДанныхРасшифровкиTripsPendingOpenBySpecialist, Расшифровка, "LEG7TripsPendingOpen");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектDOCsПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоDOC", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоDOC()
	
	Если Элементы.ОбъектDOCs.ТекущиеДанные <> Неопределено Тогда
		DOCСсылка = Элементы.ОбъектDOCs.ТекущиеДанные.DOCСсылка;
		СтруктураОтбора = Новый ФиксированнаяСтруктура("DOCСсылка", DOCСсылка);
		Элементы.ОбъектDOCManualStatuses.ОтборСтрок = СтруктураОтбора;
		Элементы.ОбъектDOCInvoices.ОтборСтрок = СтруктураОтбора;
		Элементы.ОбъектDOCParcels.ОтборСтрок = СтруктураОтбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектShipmentsПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоShipment", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоShipment()
	
	Если Элементы.ОбъектShipments.ТекущиеДанные <> Неопределено Тогда
		ShipmentСсылка = Элементы.ОбъектShipments.ТекущиеДанные.ShipmentСсылка;
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ShipmentСсылка", ShipmentСсылка);
		Элементы.ОбъектShipmentDOCs.ОтборСтрок = СтруктураОтбора;
		Элементы.ОбъектShipmentOutOfComplianceReasons.ОтборСтрок = СтруктураОтбора;
	КонецЕсли;
	
КонецПроцедуры


