
Процедура PushLeg7Reports(ТолькоИзмененныеДанные = Ложь) Экспорт 
		
	ТаблицаServiceProviders = Справочники.ServiceProviders.ПолучитьТаблицуServiceProviders();
	
	//для каждого склада сформируем и отправим файл по e-mail
	Для Каждого СтрокаServiceProviders из ТаблицаServiceProviders Цикл 
		
		НастройкаОбмена = ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(СтрокаServiceProviders.УзелОбмена);
		
		Если Не НастройкаОбмена.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		//получим данные для отправления
		ТаблицаДанныхLeg7Reports = ПолучитьРезультатЗапросаLeg7Reports(СтрокаServiceProviders.ServiceProvider, 
			СтрокаServiceProviders.DefaultWarehouse, СтрокаServiceProviders.УзелОбмена, НастройкаОбмена);
			
		ТаблицаДанныхWOReport = ПолучитьРезультатЗапросаWOReport(СтрокаServiceProviders.УзелОбмена);
		
		УдалитьСтрокиСПустымWaybillИзWOReport(ТаблицаДанныхWOReport, РГСофтСерверПовтИспСеанс.ЭтоProductionБаза());
		
		ТаблицыДанныхLeg6Report = ?(НастройкаОбмена.Leg6Report, ПолучитьТаблицыLeg6(СтрокаServiceProviders.УзелОбмена), Неопределено);
		// { RGS VShamin 17.07.2015 13:31:45 - S-I-0001168
		//ТаблицыДанныхAdditionalInfo = ПолучитьТаблицыAdditionalInfo(СтрокаServiceProviders.УзелОбмена);
		ТаблицыДанныхAdditionalInfo = ?(НастройкаОбмена.AdditionalInfoReport, ПолучитьТаблицыAdditionalInfo(СтрокаServiceProviders.УзелОбмена), Неопределено);
		// } RGS VShamin 17.07.2015 13:31:49 - S-I-0001168
		
		// { RGS LKhristyuk 4/20/2018 4:15:22 PM
		ТаблицыДанныхExportReports = ?(НастройкаОбмена.ExportReports, ПолучитьТаблицыExportReports(СтрокаServiceProviders.УзелОбмена), Неопределено);
		// } RGS LKhristyuk 4/20/2018 4:15:22 PM
		
		Если ТаблицаДанныхLeg7Reports.Количество() = 0 И Не ТолькоИзмененныеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивСкладов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДанныхLeg7Reports.ВыгрузитьКолонку("WarehouseFromСсылка"));
		
		// сформируем сообщение обмена
		Попытка
			// { RGS LKhristyuk 4/24/2018 4:40:08 PM
			//СообщениеОбмена = ПолучитьСообщениеОбмена(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, СокрЛП(СтрокаServiceProviders.DefaultWarehouseCode), МассивСкладов, ТаблицыДанныхLeg6Report, ТаблицыДанныхAdditionalInfo, ?(ТолькоИзмененныеДанные, СтрокаServiceProviders.УзелОбмена, Неопределено), НастройкаОбмена);
			СообщениеОбмена = ПолучитьСообщениеОбмена(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, СокрЛП(СтрокаServiceProviders.DefaultWarehouseCode), МассивСкладов, ТаблицыДанныхLeg6Report, ТаблицыДанныхAdditionalInfo, ТаблицыДанныхExportReports, ?(ТолькоИзмененныеДанные, СтрокаServiceProviders.УзелОбмена, Неопределено), НастройкаОбмена);
			// } RGS LKhristyuk 4/24/2018 4:40:08 PM 
			СообщениеОбмена.Проверить();
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to generate Leg7 Reports to '" + СокрЛП(СтрокаServiceProviders.ServiceProvider) + "'",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Обработки.LocalDistributionDesktop,
				,
				ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		// запишем Leg7 Reports во временный файл
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка		
			    			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			ВременныйФайл = Новый Файл(ИмяВременногоФайла);
			// { RGS AGorlenko 12.08.2014 17:06:04 - поддержка тестовой базы
			//ИмяXMLФайла = ВременныйФайл.Путь + "Leg7Reports.xml";
			Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда
				ИмяXMLФайла = ВременныйФайл.Путь + "Leg7Reports" + НастройкаОбмена.НаименованиеУзла + ".xml";
			Иначе
				ИмяXMLФайла = ВременныйФайл.Путь + "Leg7ReportsTest" + НастройкаОбмена.НаименованиеУзла + ".xml";
			КонецЕсли;
			// } RGS AGorlenko 12.08.2014 17:13:25 - поддержка тестовой базы
						
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ИмяXMLФайла);
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СообщениеОбмена);
			ЗаписьXML.Закрыть();
			
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to save in xml Leg7 Reports to '" + СокрЛП(СтрокаServiceProviders.ServiceProvider) + "'",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Обработки.LocalDistributionDesktop,
				,
				ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если ТолькоИзмененныеДанные Тогда
			
			ВыполнятьВТранзакции = Не ТранзакцияАктивна();
			Если ВыполнятьВТранзакции Тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			КонецЕсли;
			
			УзелОбменаОбъект = СтрокаServiceProviders.УзелОбмена.ПолучитьОбъект();
			УзелОбменаОбъект.НомерОтправленного = УзелОбменаОбъект.НомерОтправленного + 1;
			Попытка
				УзелОбменаОбъект.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(
					"Failed to write exchange plan node '" + УзелОбменаОбъект.Наименование + "'",
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Обработки.LocalDistributionDesktop,
					,
					ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
				
		КонецЕсли;
		
		// попытаемся отправить по e-mail
		БылаОшибкаПриОтправке = Ложь;
		Попытка	
			
			АрхивироватьФайл = Истина;
			Если ТолькоИзмененныеДанные Тогда
				АрхивироватьФайл = НастройкаОбмена.АрхивироватьФайл;
			КонецЕсли;
			Если АрхивироватьФайл Тогда
				ИмяZipФайла = СтрЗаменить(ИмяXMLФайла, "xml", "zip");
				ZipФайл = Новый ЗаписьZipФайла(ИмяZipФайла, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный); 
				ZipФайл.Добавить(ИмяXMLФайла);
				ZipФайл.Записать();
			Иначе
				ИмяZipФайла = ИмяXMLФайла;
			КонецЕсли;
			
			Вложения = Новый Массив();
			Вложения.Добавить(ИмяZipФайла);
								 						
			// { RGS VChaplygin 09.04.2016 23:57:28 - Добавим резервную учетку для отправки
			//ИнтернетПочтовыйПрофиль = ImportExportСерверПовтИспСеанс.ПолучитьИнтернетПочтовыйПрофиль();
			ИспользоватьСистемнуюУчетнуюЗапись = Ложь;
			ИнтернетПочтовыйПрофиль = ImportExportСерверПовтИспСеанс.ПолучитьИнтернетПочтовыйПрофиль(ИспользоватьСистемнуюУчетнуюЗапись);
			// } RGS VChaplygin 09.04.2016 23:57:28 - Добавим резервную учетку для отправки
			
			ИнтернетПочта = ImportExportСервер.ПодключитьсяКИнтернетПочте(ИнтернетПочтовыйПрофиль);
			
			ImportExportСервер.ПослатьПисьмо(
				ИнтернетПочта,
				ИнтернетПочтовыйПрофиль.ПользовательSMTP,
				СтрокаServiceProviders.EMailBox,
				"[Leg7 Reports] from SLB",
				"This letter was send automatically. Please send errors to the e-mail: riet-support@slb.com (Leg6), riet-support-ld@slb.com (Leg7)",
				, Вложения);
			
		Исключение
			
			// { RGS VChaplygin 09.04.2016 23:57:28 - Добавим резервную учетку для отправки
			ТекстОшибки = ИнформацияОбОшибке();
			
			Если ТекстОшибки <> Неопределено Тогда
				Если ТекстОшибки.Причина <> Неопределено Тогда
					
					Если СтрНайти(ТекстОшибки.Причина.Описание, "Recipient address rejected: User unknown in relay recipient table") > 0 
						Или СтрНайти(ТекстОшибки.Причина.Описание, "Mailbox not available (SMTP error code") > 0
						Или СтрНайти(ТекстОшибки.Причина.Описание, "Почтовый ящик не доступен (SMTP error code") > 0 Тогда
						
						Попытка
						
							ИспользоватьСистемнуюУчетнуюЗапись = Истина;

							ИнтернетПочтовыйПрофиль = ImportExportСерверПовтИспСеанс.ПолучитьИнтернетПочтовыйПрофиль(ИспользоватьСистемнуюУчетнуюЗапись);
							
							ИнтернетПочта.Отключиться();
							ИнтернетПочта = ImportExportСервер.ПодключитьсяКИнтернетПочте(ИнтернетПочтовыйПрофиль);
							ImportExportСервер.ПослатьПисьмо(
								ИнтернетПочта,
								ИнтернетПочтовыйПрофиль.ПользовательSMTP,
								СтрокаServiceProviders.EMailBox,
								"[Leg7 Reports] from SLB",
								"This letter was send automatically. Please send errors to the e-mail: riet-support@slb.com (Leg6), riet-support-ld@slb.com (Leg7)",
								, Вложения);
					
						Исключение
								
							БылаОшибкаПриОтправке = Истина;
						
						КонецПопытки;
						
					Иначе
						
						БылаОшибкаПриОтправке = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			// } RGS VChaplygin 09.04.2016 23:57:44 - Добавим резервную учетку для отправки
			
		КонецПопытки;
		
		// { RGS VChaplygin 09.04.2016 23:57:44 - Добавим резервную учетку для отправки
		Если БылаОшибкаПриОтправке Тогда
			
			ЗаписьЖурналаРегистрации(
				"Failed to send Leg7 Reports to '" + СокрЛП(СтрокаServiceProviders.ServiceProvider) + "'",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Обработки.LocalDistributionDesktop,
				,
				ТекстОшибки.Причина.Описание);
			
		КонецЕсли;
		// } RGS VChaplygin 09.04.2016 23:57:44 - Добавим резервную учетку для отправки
		
		Если ТолькоИзмененныеДанные Тогда
			Если БылаОшибкаПриОтправке Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
			УдалитьФайлы(ИмяXMLФайла);
			Если ИмяXMLФайла <> ИмяZipФайла Тогда
				УдалитьФайлы(ИмяZipФайла);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to delete created temporary files: " + ИмяВременногоФайла + ", " + ИмяXMLФайла + ", " + ИмяXMLФайла,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Обработки.LocalDistributionDesktop,
				,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьМассивPOA(ТаблицаServiceProviders, ServiceProvider)
	                     		
	МассивPOA = Новый Массив;
	
	СтруктураОтбора = Новый Структура("ServiceProvider", ServiceProvider);
	
	МассивСтрок = ТаблицаServiceProviders.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ЭлементМассива из МассивСтрок Цикл 
		МассивPOA.Добавить(ЭлементМассива.POA);	
	КонецЦикла;
	
	Возврат МассивPOA;	
	
КонецФункции

Функция ПолучитьРезультатЗапросаLeg7Reports(ServiceProvider, DefaultWarehouse, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DefaultWarehouse", DefaultWarehouse);
	//Запрос.УстановитьПараметр("МассивPOA", МассивPOA);
	Запрос.УстановитьПараметр("ServiceProvider", ServiceProvider);
	Запрос.УстановитьПараметр("TripПустаяСсылка", Документы.Trip.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонвертироватьВСтандартныеЕдиницыИзмерения", ?(УзелОбмена = Неопределено, Ложь, НастройкаОбмена.КонвертироватьВСтандартныеЕдиницыИзмерения));
	Если НастройкаОбмена <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЕдиницаИзмеренияРазмера", НастройкаОбмена.ЕдиницаИзмеренияРазмера);
		Запрос.УстановитьПараметр("КоэффицинтПересчетаРазмера", НастройкаОбмена.КоэффицинтПересчетаРазмера);
		Запрос.УстановитьПараметр("КодЕдиницыИзмеренияРазмера", НастройкаОбмена.КодЕдиницыИзмеренияРазмера);
		Запрос.УстановитьПараметр("ЕдиницаИзмеренияВеса", НастройкаОбмена.ЕдиницаИзмеренияВеса);
		Запрос.УстановитьПараметр("КоэффицинтПересчетаВеса", НастройкаОбмена.КоэффицинтПересчетаВеса);
		Запрос.УстановитьПараметр("КодЕдиницыИзмеренияВеса", НастройкаОбмена.КодЕдиницыИзмеренияВеса);
		Запрос.УстановитьПараметр("ИсключаемыеБрокеры", НастройкаОбмена.ИсключаемыеБрокеры);
	КонецЕсли;
	
	Если УзелОбмена <> Неопределено Тогда
		// { RGS VShamin 27.07.2015 19:49:04 - S-I-0001168
		//МассивВсехПарселей = ПланыОбмена.Leg7.ПолучитьСписокЗарегистрированныхПарселей(УзелОбмена);
		МассивВсехПарселей = ПланыОбмена.Leg7.ПолучитьСписокЗарегистрированныхПарселей(УзелОбмена, НастройкаОбмена);
		// } RGS VShamin 27.07.2015 19:49:05 - S-I-0001168
		Если МассивВсехПарселей = Неопределено Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивParcels", МассивВсехПарселей);
		
		// { RGS VShamin 23.07.2015 17:36:12 - S-I-0001168
		МассивТрипов = ПланыОбмена.Leg7.ПолучитьСписокЗарегистрированныхТрипов(УзелОбмена);
		Если МассивТрипов = Неопределено Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивTrips", МассивТрипов);
		// } RGS VShamin 23.07.2015 17:36:12 - S-I-0001168
	КонецЕсли;
	Запрос.Текст = ПолучитьТекстЗапросаLeg7Reports(УзелОбмена <> Неопределено);
	
	ТаблицаДанныхLeg7Reports = Запрос.Выполнить().Выгрузить();
	
	Если УзелОбмена <> Неопределено Тогда
		ПарселиНеCanceled = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаДанныхLeg7Reports, "ParcelСсылка");
		ПарселиCanceled = РГСофтКлиентСервер.ВычестьМассивы(МассивВсехПарселей, ПарселиНеCanceled);
		Запрос.УстановитьПараметр("МассивParcels", ПарселиCanceled);
		Запрос.УстановитьПараметр("ИспользуетсяLeg6Report", НастройкаОбмена.Leg6Report);
		Запрос.УстановитьПараметр("ДанныеLeg7", Истина);
		Запрос.Текст = ПолучитьТекстЗапросаCanceledParcels();
		ТаблицаДанныхLeg7ReportsCanceledParcels = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаCanceledParcels Из ТаблицаДанныхLeg7ReportsCanceledParcels Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанныхLeg7Reports.Добавить(), СтрокаCanceledParcels);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаДанныхLeg7Reports.Индексы.Добавить("TripNo");
	
	Возврат ТаблицаДанныхLeg7Reports;
	
КонецФункции

Функция ПолучитьРезультатЗапросаWOReport(УзелОбмена = Неопределено) Экспорт
	
	Если УзелОбмена = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	OBNoAndWONoИзменения.OBNo КАК OBNo
	|ПОМЕСТИТЬ ВТ_OBs
	|ИЗ
	|	РегистрСведений.OBNoAndWONo.Изменения КАК OBNoAndWONoИзменения
	|ГДЕ
	|	OBNoAndWONoИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	OBNo
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TripDomesticOB.Ссылка.Номер КАК TripNo,
	|	TripDomesticOB.WarehouseTo.Код КАК WarehouseTo,
	|	TripDomesticOB.LegalEntity.Наименование КАК LegalEntity,
	|	TripFinalDestinations.Waybill,
	|	OBNoAndWONo.WO
	|ИЗ
	|	Документ.Trip.DomesticOB КАК TripDomesticOB
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.OBNoAndWONo КАК OBNoAndWONo
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_OBs КАК ВТ_OBs
	|			ПО OBNoAndWONo.OBNo = ВТ_OBs.OBNo
	|		ПО TripDomesticOB.OBNo = OBNoAndWONo.OBNo
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК TripFinalDestinations
	|		ПО TripDomesticOB.Ссылка = TripFinalDestinations.Ссылка
	|			И TripDomesticOB.WarehouseTo = TripFinalDestinations.WarehouseTo
	|			И TripDomesticOB.LegalEntity = TripFinalDestinations.LegalEntity";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТекстЗапросаLeg7Reports(ИспользоватьОтборПоСпискуПарселей = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ServiceProvidersWarehouses.Warehouse
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	Справочник.ServiceProviders.Warehouses КАК ServiceProvidersWarehouses
	|ГДЕ
	|	ServiceProvidersWarehouses.Ссылка = &ServiceProvider
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Склады.Warehouse
	|ПОМЕСТИТЬ ВТ_СобственныеСклады
	|ИЗ
	|	ВТ_Склады КАК ВТ_Склады
	|ГДЕ
	|	НЕ ВТ_Склады.Warehouse В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ServiceProvidersWarehouses.Warehouse
	|				ИЗ
	|					Справочник.ServiceProviders.Warehouses КАК ServiceProvidersWarehouses
	|				ГДЕ
	|					ServiceProvidersWarehouses.Ссылка <> &ServiceProvider)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.Ссылка.DONo КАК DONo,
	|	ParcelsДетали.Ссылка.VolumeWeight КАК VolumeWeight,
	|	ParcelsДетали.Ссылка.ChargeableWeight КАК ChargeableWeight,
	|	ПРЕДСТАВЛЕНИЕ(ParcelsДетали.Ссылка.Urgency) КАК Urgency,
	|	ParcelsДетали.Ссылка.SpecialHandling.Код КАК SpecialHandling,
	|	ParcelsДетали.Ссылка.RDD КАК RDD,
	|	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Код КАК POLine,
	|	ParcelsДетали.СтрокаИнвойса.ImportReference КАК Receiver,
	|	ParcelsДетали.GrossWeightKG,
	|	ParcelsДетали.ChargeableWeight КАК ItemChargeableWeight,
	|	ЕСТЬNULL(Поставка.ATA, ДАТАВРЕМЯ(1, 1, 1)) КАК ShipmentATA,
	|	ЕСТЬNULL(КонсолидированныйПакетЗаявокНаПеревозку.Номер, """") КАК DOCNo,
	|	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	|	СтрокиИнвойса.SoldTo.Код КАК ParentCompany,
	|	ParcelsОбъект.Код КАК ParcelNo,
	|	ParcelsОбъект.WarehouseTo.Код КАК WarehouseTo,
	|	ParcelsОбъект.NumOfParcels КАК NumOfParcels,
	|	ParcelsОбъект.SerialNo КАК ParcelSerialNo,
	|	ParcelsОбъект.PackingType.Код КАК PackingType,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Length,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Width,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Height,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияРазмера
	|		ИНАЧЕ ParcelsОбъект.DIMsUOM.Код
	|	КОНЕЦ КАК DIMsUOM,
	|	ParcelsОбъект.CubicMeters КАК CubicMeters,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKG
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKG / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК GrossWeight,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ КАК GrossWeightUOM,
	|	СтрокиИнвойса.Наименование КАК ItemNo,
	|	СтрокиИнвойса.КодПоИнвойсу КАК PartNo,
	|	СтрокиИнвойса.СерийныйНомер КАК ItemSerialNo,
	|	ВЫРАЗИТЬ(СтрокиИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	|	ParcelsДетали.Qty КАК QTY,
	|	ParcelsДетали.QtyUOM.Код КАК QTYUOM,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.NetWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.NetWeight
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.NetWeight * ParcelsОбъект.WeightUOM.ConversionFactor / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК NetWeight,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ КАК NetWeightUOM,
	|	ВЫРАЗИТЬ(ParcelsОбъект.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	|	ParcelsДетали.Ссылка КАК ParcelСсылка,
	|	Trip.Номер КАК TripNo,
	|	Trip.Equipment,
	|	Trip.Draft,
	|	Trip.ETD,
	|	ВЫРАЗИТЬ(Trip.Comment КАК СТРОКА(1024)) КАК TripComment,
	|	ParcelsОбъект.WarehouseFrom.Код КАК WarehouseFrom,
	|	СтрокиИнвойса.LocalOnly КАК Local,
	|	Trip.ServiceProvider.Код КАК ServiceProvider,
	|	ВЫРАЗИТЬ(ParcelsОбъект.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	|	ЕСТЬNULL(Поставка.HouseWB, """") КАК ImportHouseWB,
	|	ЕСТЬNULL(Поставка.WB2, """") КАК ImportWB2,
	|	ЕСТЬNULL(Поставка.WB3, """") КАК ImportWB3,
	|	ЕСТЬNULL(Поставка.WB4, """") КАК ImportWB4,
	|	ЕСТЬNULL(Поставка.MOT, """") КАК MOT,
	|	ParcelsОбъект.LocalImpacked КАК Repacked,
	|	СтрокиИнвойса.КостЦентр КАК AU,
	|	СтрокиИнвойса.SoldTo КАК ParentCompanyСсылка,
	|	ParcelsОбъект.WarehouseFrom КАК WarehouseFromСсылка,
	|	ЛОЖЬ КАК Canceled,
	|	ParcelsДетали.СтрокаИнвойса КАК ItemСсылка,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК LengthCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК WidthCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК HeightCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKGCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKGCorrected / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК GrossWeightCorrected,
	|	Trip.Final КАК Final,
	|	Trip.ATD КАК ATD,
	|	Trip.EquipmentNo КАК EquipmentNo,
	|	Trip.Ссылка КАК TripСсылка,
	|	ParcelsОбъект.WarehouseTo КАК WarehouseToСсылка,
	// { RGS LKhristyuk 5/4/2018 12:49:51 PM
	|	"""" КАК ExportRequest
	// } RGS LKhristyuk 5/4/2018 12:49:51 PM 
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	Документ.Trip.Parcels КАК TripParcels
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка КАК Поставка
	|				ПО ПоставкаУпаковочныеЛисты.Ссылка = Поставка.Ссылка
	|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
	|				И (НЕ Поставка.Отменен)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = КонсолидированныйПакетЗаявокНаПеревозку.Ссылка
	|		ПО (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = TripParcels.Parcel)
	|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозку.Отменен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels КАК ParcelsОбъект
	|			ПО ParcelsДетали.Ссылка = ParcelsОбъект.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|			ПО ParcelsДетали.СтрокаИнвойса = СтрокиИнвойса.Ссылка
	|		ПО TripParcels.Parcel = ParcelsДетали.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip КАК Trip
	|		ПО TripParcels.Ссылка = Trip.Ссылка
	|ГДЕ
	|	НЕ Trip.ПометкаУдаления
	|	И (Trip.ServiceProvider = &ServiceProvider
	|			ИЛИ Trip.WarehouseFrom В
	|				(ВЫБРАТЬ
	|					ВТ_Склады.Warehouse
	|				ИЗ
	|					ВТ_Склады КАК ВТ_Склады))
	|	И (ParcelsДетали.Ссылка В (&МассивParcels)
	|			ИЛИ Trip.Ссылка В (&МассивTrips))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.Ссылка.DONo,
	|	ParcelsДетали.Ссылка.VolumeWeight,
	|	ParcelsДетали.Ссылка.ChargeableWeight,
	|	ПРЕДСТАВЛЕНИЕ(ParcelsДетали.Ссылка.Urgency),
	|	ParcelsДетали.Ссылка.SpecialHandling.Код,
	|	ParcelsДетали.Ссылка.RDD,
	|	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Код,
	|	ParcelsДетали.СтрокаИнвойса.ImportReference,
	|	ParcelsДетали.GrossWeightKG,
	|	ParcelsДетали.ChargeableWeight,
	|	Поставка.ATA,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Номер,
	|	ParcelsДетали.НомерЗаявкиНаЗакупку,
	|	СтрокиИнвойса.SoldTo.Код,
	|	ParcelsОбъект.Код,
	|	ParcelsОбъект.WarehouseTo.Код,
	|	ParcelsОбъект.NumOfParcels,
	|	ParcelsОбъект.SerialNo,
	|	ParcelsОбъект.PackingType.Код,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияРазмера
	|		ИНАЧЕ ParcelsОбъект.DIMsUOM.Код
	|	КОНЕЦ,
	|	ParcelsОбъект.CubicMeters,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKG
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKG / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ,
	|	СтрокиИнвойса.Наименование,
	|	СтрокиИнвойса.КодПоИнвойсу,
	|	СтрокиИнвойса.СерийныйНомер,
	|	ВЫРАЗИТЬ(СтрокиИнвойса.НаименованиеТовара КАК СТРОКА(1024)),
	|	ParcelsДетали.Qty,
	|	ParcelsДетали.QtyUOM.Код,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.NetWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.NetWeight
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.NetWeight * ParcelsОбъект.WeightUOM.ConversionFactor / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ParcelsОбъект.Comment КАК СТРОКА(1024)),
	|	ParcelsДетали.Ссылка,
	|	"""",
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	ParcelsОбъект.WarehouseFrom.Код,
	|	СтрокиИнвойса.LocalOnly,
	|	NULL,
	|	ВЫРАЗИТЬ(ParcelsОбъект.HazardClass.Код КАК СТРОКА(3)),
	|	Поставка.HouseWB,
	|	Поставка.WB2,
	|	Поставка.WB3,
	|	Поставка.WB4,
	|	Поставка.MOT,
	|	ParcelsОбъект.LocalImpacked,
	|	СтрокиИнвойса.КостЦентр,
	|	СтрокиИнвойса.SoldTo,
	|	ParcelsОбъект.WarehouseFrom,
	|	ЛОЖЬ,
	|	ParcelsДетали.СтрокаИнвойса,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKGCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKGCorrected / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	Trip.Ссылка,
	|	ParcelsОбъект.WarehouseTo,
	// { RGS LKhristyuk 5/4/2018 12:50:22 PM
	|	""""
	// } RGS LKhristyuk 5/4/2018 12:50:22 PM 
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip КАК Trip
	|				ПО TripParcels.Ссылка = Trip.Ссылка
	|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = TripParcels.Parcel
	|				И (НЕ Trip.ПометкаУдаления)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = КонсолидированныйПакетЗаявокНаПеревозку.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels КАК ParcelsОбъект
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|					ПО ParcelsДетали.СтрокаИнвойса = СтрокиИнвойса.Ссылка
	|				ПО ParcelsОбъект.Ссылка = ParcelsДетали.Ссылка
	|			ПО (ParcelsОбъект.Проверен)
	|				И (НЕ ParcelsОбъект.Отменен)
	|				И (НЕ ParcelsОбъект.Repacked)
	|				И (ParcelsОбъект.WarehouseFrom В
	|					(ВЫБРАТЬ
	|						ВТ_Склады.Warehouse
	|					ИЗ
	|						ВТ_Склады КАК ВТ_Склады))
	|				И КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ParcelsОбъект.Ссылка
	|				И (ParcelsОбъект.DeliveredToWH = ДАТАВРЕМЯ(1, 1, 1))
	|		ПО ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка КАК Поставка
	|		ПО ПоставкаУпаковочныеЛисты.Ссылка = Поставка.Ссылка
	|ГДЕ
	|	НЕ Поставка.Отменен
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозку.Отменен
	|	И TripParcels.Parcel ЕСТЬ NULL
	|	И НЕ ParcelsДетали.Ссылка ЕСТЬ NULL
	|	И ParcelsОбъект.WarehouseFrom В
	|			(ВЫБРАТЬ
	|				ВТ_Склады.Warehouse
	|			ИЗ
	|				ВТ_Склады КАК ВТ_Склады)
	|	И ParcelsДетали.Ссылка В(&МассивParcels)
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозку.CCA В (&ИсключаемыеБрокеры)
	|	И Поставка.ATA <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsДетали.Ссылка.DONo,
	|	ParcelsДетали.Ссылка.VolumeWeight,
	|	ParcelsДетали.Ссылка.ChargeableWeight,
	|	ПРЕДСТАВЛЕНИЕ(ParcelsДетали.Ссылка.Urgency),
	|	ParcelsДетали.Ссылка.SpecialHandling.Код,
	|	ParcelsДетали.Ссылка.RDD,
	|	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Код,
	|	ParcelsДетали.СтрокаИнвойса.ImportReference,
	|	ParcelsДетали.GrossWeightKG,
	|	ParcelsДетали.ChargeableWeight,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	ParcelsДетали.НомерЗаявкиНаЗакупку,
	|	СтрокиИнвойса.SoldTo.Код,
	|	ParcelsОбъект.Код,
	|	ParcelsОбъект.WarehouseTo.Код,
	|	ParcelsОбъект.NumOfParcels,
	|	ParcelsОбъект.SerialNo,
	|	ParcelsОбъект.PackingType.Код,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Length
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Width
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.Height
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияРазмера
	|		ИНАЧЕ ParcelsОбъект.DIMsUOM.Код
	|	КОНЕЦ,
	|	ParcelsОбъект.CubicMeters,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeight
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKG
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKG / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ,
	|	СтрокиИнвойса.Наименование,
	|	СтрокиИнвойса.КодПоИнвойсу,
	|	СтрокиИнвойса.СерийныйНомер,
	|	ВЫРАЗИТЬ(СтрокиИнвойса.НаименованиеТовара КАК СТРОКА(1024)),
	|	ParcelsДетали.Qty,
	|	ParcelsДетали.QtyUOM.Код,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.NetWeight
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.NetWeight
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.NetWeight * ParcelsОбъект.WeightUOM.ConversionFactor / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsОбъект.WeightUOM.Код
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ParcelsОбъект.Comment КАК СТРОКА(1024)),
	|	ParcelsДетали.Ссылка,
	|	"""",
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	ParcelsОбъект.WarehouseFrom.Код,
	|	СтрокиИнвойса.LocalOnly,
	|	NULL,
	|	ВЫРАЗИТЬ(ParcelsОбъект.HazardClass.Код КАК СТРОКА(3)),
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ParcelsОбъект.LocalImpacked,
	|	СтрокиИнвойса.КостЦентр,
	|	СтрокиИнвойса.SoldTo,
	|	ParcelsОбъект.WarehouseFrom,
	|	ЛОЖЬ,
	|	ParcelsДетали.СтрокаИнвойса,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.LengthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.LengthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.LengthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.WidthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.WidthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.WidthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА ParcelsОбъект.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsОбъект.HeightCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsОбъект.HeightCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.HeightCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА ParcelsОбъект.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsОбъект.GrossWeightCorrected
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsОбъект.GrossWeightKGCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsОбъект.GrossWeightKGCorrected / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	Trip.Ссылка,
	|	ParcelsОбъект.WarehouseTo,
	// { RGS LKhristyuk 5/4/2018 12:50:50 PM
	|	""""
	// } RGS LKhristyuk 5/4/2018 12:50:50 PM
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels КАК ParcelsОбъект
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|				ПО ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка
	|			ПО (ParcelsОбъект.Проверен)
	|				И (НЕ ParcelsОбъект.Отменен)
	|				И (НЕ ParcelsОбъект.Repacked)
	|				И (ParcelsОбъект.WarehouseFrom В
	|					(ВЫБРАТЬ
	|						ВТ_Склады.Warehouse
	|					ИЗ
	|						ВТ_Склады КАК ВТ_Склады))
	|				И (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ParcelsОбъект.Ссылка)
	|		ПО ParcelsДетали.Ссылка = ParcelsОбъект.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip КАК Trip
	|			ПО TripParcels.Ссылка = Trip.Ссылка
	|		ПО (НЕ Trip.ПометкаУдаления)
	|			И ParcelsДетали.Ссылка = TripParcels.Parcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ПО ParcelsДетали.СтрокаИнвойса = СтрокиИнвойса.Ссылка
	|ГДЕ
	|	ПоставкаУпаковочныеЛисты.Ссылка ЕСТЬ NULL
	|	И TripParcels.Parcel ЕСТЬ NULL
	|	И ParcelsОбъект.WarehouseFrom В
	|			(ВЫБРАТЬ
	|				ВТ_Склады.Warehouse
	|			ИЗ
	|				ВТ_Склады КАК ВТ_Склады)
	|	И ParcelsОбъект.Проверен
	|	И НЕ ParcelsОбъект.Отменен
	|	И НЕ ParcelsОбъект.Repacked
	|	И ParcelsДетали.Ссылка В(&МассивParcels)
	|	И ParcelsДетали.Ссылка.LocalOnly
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	TripСсылка,
	|	WarehouseToСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ItemСсылка,
	|	ВТ_Результат.AU,
	|	ВТ_Результат.ParentCompanyСсылка КАК ParentCompany,
	|	МАКСИМУМ(AUsAndLegalEntities.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МаксимальныеДаты
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities КАК AUsAndLegalEntities
	|		ПО ВТ_Результат.AU = AUsAndLegalEntities.AU
	|			И (ВЫБОР
	|				КОГДА ВТ_Результат.Final <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВТ_Результат.Final >= AUsAndLegalEntities.Период
	|				КОГДА ВТ_Результат.Draft <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВТ_Результат.Draft >= AUsAndLegalEntities.Период
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И ВТ_Результат.ParentCompanyСсылка = AUsAndLegalEntities.ParentCompany
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ItemСсылка,
	|	ВТ_Результат.AU,
	|	ВТ_Результат.ParentCompanyСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаксимальныеДаты.ItemСсылка КАК ItemСсылка,
	|	ВЫБОР
	|		КОГДА ВТ_МаксимальныеДаты.ParentCompany.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ВТ_МаксимальныеДаты.ParentCompany.LegalEntityForLeg7
	|		ИНАЧЕ ЕСТЬNULL(AUsAndLegalEntities.LegalEntity, ЗНАЧЕНИЕ(Справочник.LegalEntities.ПустаяСсылка))
	|	КОНЕЦ КАК LegalEntity
	|ПОМЕСТИТЬ ВТ_LE
	|ИЗ
	|	ВТ_МаксимальныеДаты КАК ВТ_МаксимальныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities КАК AUsAndLegalEntities
	|		ПО ВТ_МаксимальныеДаты.AU = AUsAndLegalEntities.AU
	|			И ВТ_МаксимальныеДаты.ParentCompany = AUsAndLegalEntities.ParentCompany
	|			И ВТ_МаксимальныеДаты.Период = AUsAndLegalEntities.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ItemСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.DONo,
	|	ВТ_Результат.VolumeWeight,
	|	ВТ_Результат.ChargeableWeight,
	|	ВТ_Результат.Urgency,
	|	ВТ_Результат.SpecialHandling,
	|	ВТ_Результат.RDD,
	|	ВТ_Результат.POLine,
	|	ВТ_Результат.Receiver,
	|	ВТ_Результат.GrossWeightKG,
	|	ВТ_Результат.ItemChargeableWeight,
	|	ВТ_Результат.ShipmentATA,
	|	ВТ_Результат.DOCNo,
	|	ВТ_Результат.PONo,
	|	ВТ_Результат.ParentCompany,
	|	ВТ_Результат.ParcelNo,
	|	ВТ_Результат.WarehouseTo,
	|	ВТ_Результат.NumOfParcels,
	|	ВТ_Результат.ParcelSerialNo,
	|	ВТ_Результат.PackingType,
	|	ВТ_Результат.Length,
	|	ВТ_Результат.Width,
	|	ВТ_Результат.Height,
	|	ВТ_Результат.DIMsUOM,
	|	ВТ_Результат.CubicMeters,
	|	ВТ_Результат.GrossWeight,
	|	ВТ_Результат.GrossWeightUOM,
	|	ВТ_Результат.ItemNo,
	|	ВТ_Результат.PartNo,
	|	ВТ_Результат.ItemSerialNo,
	|	ВТ_Результат.ItemDescription,
	|	ВТ_Результат.QTY,
	|	ВТ_Результат.QTYUOM,
	|	ВТ_Результат.NetWeight,
	|	ВТ_Результат.NetWeightUOM,
	|	ВТ_Результат.ParcelComment,
	|	ВТ_Результат.ParcelСсылка,
	|	ВТ_Результат.TripNo,
	|	ВТ_Результат.Equipment,
	|	ВТ_Результат.Draft,
	|	ВТ_Результат.ETD,
	|	ВТ_Результат.TripComment,
	|	ВТ_Результат.WarehouseFrom,
	|	ВТ_Результат.Local,
	|	ВТ_Результат.ServiceProvider,
	|	ВТ_Результат.HazardClass,
	|	ВТ_Результат.ImportHouseWB,
	|	ВТ_Результат.ImportWB2,
	|	ВТ_Результат.ImportWB3,
	|	ВТ_Результат.ImportWB4,
	|	ВТ_Результат.MOT,
	|	ВТ_Результат.Repacked,
	|	ВТ_Результат.AU,
	|	ВТ_Результат.ParentCompanyСсылка,
	|	ВТ_Результат.WarehouseFromСсылка,
	|	ВТ_LE.LegalEntity,
	|	ВТ_Результат.Canceled,
	|	ВТ_Результат.ItemСсылка,
	|	ВТ_Результат.LengthCorrected,
	|	ВТ_Результат.WidthCorrected,
	|	ВТ_Результат.HeightCorrected,
	|	ВТ_Результат.GrossWeightCorrected,
	|	ВТ_Результат.Final,
	|	ВТ_Результат.ATD,
	|	ВТ_Результат.EquipmentNo,
	|	ВТ_Результат.TripСсылка,
	|	ВТ_Результат.WarehouseToСсылка,
	// { RGS LKhristyuk 5/4/2018 12:51:22 PM
	|	ВТ_Результат.ExportRequest
	// } RGS LKhristyuk 5/4/2018 12:51:22 PM 
	|ПОМЕСТИТЬ ВТ_РезультатСLE
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_LE КАК ВТ_LE
	|		ПО ВТ_Результат.ItemСсылка = ВТ_LE.ItemСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатСLE.DONo,
	|	ВТ_РезультатСLE.VolumeWeight,
	|	ВТ_РезультатСLE.ChargeableWeight,
	|	ВТ_РезультатСLE.Urgency,
	|	ВТ_РезультатСLE.SpecialHandling,
	|	ВТ_РезультатСLE.RDD,
	|	ВТ_РезультатСLE.POLine,
	|	ВТ_РезультатСLE.Receiver,
	|	ВТ_РезультатСLE.GrossWeightKG,
	|	ВТ_РезультатСLE.ItemChargeableWeight,
	|	ВТ_РезультатСLE.ShipmentATA,
	|	ВТ_РезультатСLE.DOCNo,
	|	ВТ_РезультатСLE.PONo,
	|	ВТ_РезультатСLE.ParentCompany,
	|	ВТ_РезультатСLE.ParcelNo,
	|	ВТ_РезультатСLE.WarehouseTo,
	|	ВТ_РезультатСLE.NumOfParcels,
	|	ВТ_РезультатСLE.ParcelSerialNo,
	|	ВТ_РезультатСLE.PackingType,
	|	ВТ_РезультатСLE.Length,
	|	ВТ_РезультатСLE.Width,
	|	ВТ_РезультатСLE.Height,
	|	ВТ_РезультатСLE.DIMsUOM,
	|	ВТ_РезультатСLE.CubicMeters,
	|	ВТ_РезультатСLE.GrossWeight,
	|	ВТ_РезультатСLE.GrossWeightUOM,
	|	ВТ_РезультатСLE.ItemNo,
	|	ВТ_РезультатСLE.PartNo,
	|	ВТ_РезультатСLE.ItemSerialNo,
	|	ВТ_РезультатСLE.ItemDescription,
	|	ВТ_РезультатСLE.QTY,
	|	ВТ_РезультатСLE.QTYUOM,
	|	ВТ_РезультатСLE.NetWeight,
	|	ВТ_РезультатСLE.NetWeightUOM,
	|	ВТ_РезультатСLE.ParcelComment,
	|	ВТ_РезультатСLE.ParcelСсылка,
	|	ВТ_РезультатСLE.TripNo,
	|	ВТ_РезультатСLE.Equipment,
	|	ВТ_РезультатСLE.Draft,
	|	ВТ_РезультатСLE.ETD,
	|	ВТ_РезультатСLE.TripComment,
	|	ВТ_РезультатСLE.WarehouseFrom,
	|	ВТ_РезультатСLE.Local,
	|	ВТ_РезультатСLE.ServiceProvider,
	|	ВТ_РезультатСLE.HazardClass,
	|	ВЫБОР
	|		КОГДА ВТ_РезультатСLE.ImportHouseWB = """"
	|			ТОГДА ВТ_РезультатСLE.ImportWB2
	|		ИНАЧЕ ВТ_РезультатСLE.ImportHouseWB
	|	КОНЕЦ КАК ImportHouseWB,
	|	ВТ_РезультатСLE.ImportWB2,
	|	ВТ_РезультатСLE.ImportWB3,
	|	ВТ_РезультатСLE.ImportWB4,
	|	ВТ_РезультатСLE.MOT,
	|	ВТ_РезультатСLE.Repacked,
	|	ВТ_РезультатСLE.AU,
	|	ВТ_РезультатСLE.ParentCompanyСсылка,
	|	ВТ_РезультатСLE.WarehouseFromСсылка,
	|	ВТ_РезультатСLE.LegalEntity,
	|	ВТ_РезультатСLE.Canceled,
	|	ВТ_РезультатСLE.ItemСсылка КАК ItemСсылка,
	|	ВТ_РезультатСLE.LengthCorrected,
	|	ВТ_РезультатСLE.WidthCorrected,
	|	ВТ_РезультатСLE.HeightCorrected,
	|	ВТ_РезультатСLE.GrossWeightCorrected,
	|	ВТ_РезультатСLE.Final,
	|	ВТ_РезультатСLE.ATD,
	|	ВТ_РезультатСLE.EquipmentNo,
	|	ЕСТЬNULL(TripFinalDestinations.Waybill, """") КАК Waybill,
	|	ЕСТЬNULL(TripFinalDestinations.ETA, ДАТАВРЕМЯ(1, 1, 1)) КАК ETA,
	|	ЕСТЬNULL(TripFinalDestinations.ATA, ДАТАВРЕМЯ(1, 1, 1)) КАК ATA,
	|	ЕСТЬNULL(ВТ_РезультатСLE.TripСсылка, &TripПустаяСсылка) КАК TripСсылка,
	// { RGS LKhristyuk 5/4/2018 12:51:45 PM
	|	ВТ_РезультатСLE.ExportRequest
	// } RGS LKhristyuk 5/4/2018 12:51:45 PM 
	|ИЗ
	|	ВТ_РезультатСLE КАК ВТ_РезультатСLE
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК TripFinalDestinations
	|		ПО ВТ_РезультатСLE.TripСсылка = TripFinalDestinations.Ссылка
	|			И ВТ_РезультатСLE.LegalEntity = TripFinalDestinations.LegalEntity
	|			И ВТ_РезультатСLE.WarehouseToСсылка = TripFinalDestinations.WarehouseTo
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СобственныеСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МаксимальныеДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_LE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РезультатСLE";
	
	Если НЕ ИспользоватьОтборПоСпискуПарселей Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ParcelsДетали.Ссылка В(&МассивParcels)", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ParcelsОбъект.DeliveredToWH = ДАТАВРЕМЯ(1, 1, 1))", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Trip.Final = ДАТАВРЕМЯ(1, 1, 1)", "");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаCanceledParcels()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ShipmentATA,
	|	"""" КАК DOCNo,
	|	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	|	ParcelsДетали.Ссылка.Код КАК ParcelNo,
	|	ParcelsДетали.Ссылка.WarehouseTo.Код КАК WarehouseTo,
	|	ParcelsДетали.Ссылка.NumOfParcels,
	|	ParcelsДетали.Ссылка.SerialNo КАК ParcelSerialNo,
	|	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.Length
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.Length
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.LengthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.LengthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Length,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.Width
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.Width
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.WidthCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.WidthCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Width,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.Height
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.Height
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.HeightCM
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HeightCM / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Height,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияРазмера
	|		ИНАЧЕ ParcelsДетали.Ссылка.DIMsUOM.Код
	|	КОНЕЦ КАК DIMsUOM,
	|	ParcelsДетали.Ссылка.CubicMeters,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeight
	|		КОГДА ParcelsДетали.Ссылка.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeight
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeightKG
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.GrossWeightKG / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК GrossWeight,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsДетали.Ссылка.WeightUOM.Код
	|	КОНЕЦ КАК GrossWeightUOM,
	|	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo,
	|	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
	|	ParcelsДетали.СтрокаИнвойса.СерийныйНомер КАК ItemSerialNo,
	|	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	|	ParcelsДетали.Qty КАК QTY,
	|	ParcelsДетали.QtyUOM.Код КАК QTYUOM,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.NetWeight
	|		КОГДА ParcelsДетали.Ссылка.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.NetWeight
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.NetWeight * ParcelsДетали.Ссылка.WeightUOM.ConversionFactor / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК NetWeight,
	|	ВЫБОР
	|		КОГДА &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА &КодЕдиницыИзмеренияВеса
	|		ИНАЧЕ ParcelsДетали.Ссылка.WeightUOM.Код
	|	КОНЕЦ КАК NetWeightUOM,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	|	ParcelsДетали.Ссылка КАК ParcelСсылка,
	|	"""" КАК TripNo,
	|	"""" КАК Equipment,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Draft,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ETD,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ETA,
	|	"""" КАК Waybill,
	|	"""" КАК TripComment,
	|	ParcelsДетали.Ссылка.WarehouseFrom.Код КАК WarehouseFrom,
	|	ParcelsДетали.Ссылка.LocalOnly КАК Local,
	|	NULL КАК ServiceProvider,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	|	"""" КАК ImportHouseWB,
	|	"""" КАК ImportWB2,
	|	"""" КАК ImportWB3,
	|	"""" КАК ImportWB4,
	|	"""" КАК MOT,
	|	ParcelsДетали.Ссылка.LocalImpacked КАК Repacked,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompanyСсылка,
	|	ParcelsДетали.Ссылка.WarehouseFrom КАК WarehouseFromСсылка,
	|	ИСТИНА КАК Canceled,
	|	ParcelsДетали.СтрокаИнвойса КАК ItemСсылка,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.LengthCorrected
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.LengthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.LengthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.LengthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК LengthCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.WidthCorrected
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.WidthCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.WidthCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.WidthCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК WidthCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.HeightCorrected
	|		КОГДА ParcelsДетали.Ссылка.DIMsUOM = &ЕдиницаИзмеренияРазмера
	|			ТОГДА ParcelsДетали.Ссылка.HeightCorrected
	|		КОГДА &ЕдиницаИзмеренияРазмера = ЗНАЧЕНИЕ(Справочник.UOMs.CM)
	|			ТОГДА ParcelsДетали.Ссылка.HeightCMCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HeightCMCorrected / &КоэффицинтПересчетаРазмера КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК HeightCorrected,
	|	ВЫБОР
	|		КОГДА НЕ &КонвертироватьВСтандартныеЕдиницыИзмерения
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeightCorrected
	|		КОГДА ParcelsДетали.Ссылка.WeightUOM = &ЕдиницаИзмеренияВеса
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeightCorrected
	|		КОГДА &ЕдиницаИзмеренияВеса = ЗНАЧЕНИЕ(Справочник.UOMs.KG)
	|			ТОГДА ParcelsДетали.Ссылка.GrossWeightKGCorrected
	|		ИНАЧЕ ВЫРАЗИТЬ(ParcelsДетали.Ссылка.GrossWeightKGCorrected / &КоэффицинтПересчетаВеса КАК ЧИСЛО(10, 4))
	|	КОНЕЦ КАК GrossWeightCorrected
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	|		ПО ParcelsДетали.Ссылка = TripParcels.Parcel
	|			И (TripParcels.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|		ПО ParcelsДетали.Ссылка = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
	|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)
	|ГДЕ
	|	ParcelsДетали.Ссылка В(&МассивParcels)
	|	И ВЫБОР
	|			КОГДА &ИспользуетсяLeg6Report
	|				ТОГДА ВЫБОР
	|						КОГДА &ДанныеLeg7
	|								И КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка ЕСТЬ NULL 
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// { RGS AGorlenko 12.03.2014 15:53:52 - S-I-0000636
Процедура PushLeg7ReportsAdditionalParsels(МассивParcels) Экспорт 
		
	// получим таблицу Warehouses, по которым нужно отправить Leg7 Reports
	
	//ТаблицаServiceProviders = Справочники.ServiceProviders.ПолучитьТаблицуServiceProviders();
	//
	//СписокКолонокДляКопирования = "DefaultWarehouse,DefaultWarehouseCode,ServiceProvider,StartOfLeg7Reports,EMailBox"; 
	//ТаблицаWarehouses = ТаблицаServiceProviders.Скопировать(, СписокКолонокДляКопирования);
	//ТаблицаWarehouses.Свернуть(СписокКолонокДляКопирования);
	//
	//Если ТаблицаWarehouses.Количество() > 1 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unable to determine the address to send!");
	//	Возврат;
	//КонецЕсли;
	//
	//СтрокаТабWarehouse = ТаблицаWarehouses[0];
	//
	////получим данные для отправления
	//ТаблицаДанныхLeg7Reports = ПолучитьРезультатЗапросаLeg7ReportsAdditionalParsels(МассивParcels);
	//
	//ВсеПарселиМогутБытьВыгружены = Истина;
	//СтруктураПоиска = Новый Структура("ParcelСсылка");
	//Для каждого ТекParcel Из МассивParcels Цикл
	//	СтруктураПоиска.ParcelСсылка = ТекParcel;
	//	НайденныеСтроки = ТаблицаДанныхLeg7Reports.НайтиСтроки(СтруктураПоиска);
	//	Если НайденныеСтроки.Количество() = 0 Тогда
	//		ВсеПарселиМогутБытьВыгружены = Ложь;
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			"Parcel" + ТекParcel + " does not satisfy the selection criteria", ТекParcel);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если Не ВсеПарселиМогутБытьВыгружены Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТаблицаWarehousesFrom = ТаблицаДанныхLeg7Reports.Скопировать(,"WarehouseFromСсылка");
	//ТаблицаWarehousesFrom.Свернуть("WarehouseFromСсылка");
	//Если ТаблицаWarehousesFrom.Количество() > 1 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("You can not send parcels from several warehouses!");
	//	Возврат;
	//КонецЕсли;
	//
	//WarehouseFrom = ТаблицаWarehousesFrom[0].WarehouseFromСсылка;
	//Если СтрокаТабWarehouse.DefaultWarehouse = WarehouseFrom Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Warehouse coincides with default warehouse of service provider, parcels do not need to send.");
	//	Возврат;
	//КонецЕсли;
	//
	//// сформируем Leg7 Reports
	//Попытка
	//	Leg7Reports = ПолучитьLeg7Reports(ТаблицаДанныхLeg7Reports, СокрЛП(WarehouseFrom.Код));
	//	Leg7Reports.Проверить();
	//Исключение
	//	СтрокаСообщения = "Failed to generate Leg7 Reports to '" + СокрЛП(СтрокаТабWarehouse.ServiceProvider) + "'";
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	//	ЗаписьЖурналаРегистрации(
	//		СтрокаСообщения,
	//		УровеньЖурналаРегистрации.Предупреждение,
	//		Метаданные.Обработки.LocalDistributionDesktop,
	//		,
	//		ОписаниеОшибки());
	//		Возврат;
	//КонецПопытки;
	//				
	//// запишем Leg7 Reports во временный файл
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Попытка		
	//					
	//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	//	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	//	ИмяXMLФайла = ВременныйФайл.Путь + "Leg7Reports.xml";
	//				
	//	ЗаписьXML = Новый ЗаписьXML;
	//	ЗаписьXML.ОткрытьФайл(ИмяXMLФайла);
	//	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Leg7Reports);
	//	ЗаписьXML.Закрыть();
	//	
	//Исключение
	//	СтрокаСообщения = "Failed to save in xml Leg7 Reports to '" + СокрЛП(СтрокаТабWarehouse.ServiceProvider) + "'";
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	//	ЗаписьЖурналаРегистрации(
	//		СтрокаСообщения,
	//		УровеньЖурналаРегистрации.Предупреждение,
	//		Метаданные.Обработки.LocalDistributionDesktop,
	//		,
	//		ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//// попытаемся отправить по e-mail
	//Попытка	
	//	 						
	//	ИмяZipФайла = СтрЗаменить(ИмяXMLФайла, "xml", "zip");
	//	ZipФайл = Новый ЗаписьZipФайла(ИмяZipФайла, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный); 
	//	ZipФайл.Добавить(ИмяXMLФайла);
	//	ZipФайл.Записать();
	//	
	//	Вложения = Новый Массив();
	//	Вложения.Добавить(ИмяZipФайла);
	//						 						
	//	ИнтернетПочтовыйПрофиль = ImportExportСерверПовтИспСеанс.ПолучитьИнтернетПочтовыйПрофиль();
	//	ИнтернетПочта = ImportExportСервер.ПодключитьсяКИнтернетПочте(ИнтернетПочтовыйПрофиль);
	//	
	//	ImportExportСервер.ПослатьПисьмо(
	//		ИнтернетПочта,
	//		ИнтернетПочтовыйПрофиль.ПользовательSMTP,
	//		СтрокаТабWarehouse.EMailBox,
	//		"[Leg7 Reports] from SLB",
	//		"This letter was send automatically. Please send errors to the e-mail: riet-support@slb.com",
	//		, Вложения);
	//		
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Leg7 Reports sent successfully");
	//	
	//	УстановитьПривилегированныйРежим(Истина);
	//	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//	ИнформацияУспешноЗаписана = Истина;
	//	Для каждого ТекParcel Из МассивParcels Цикл
	//		МенеджерЗаписи = РегистрыСведений.ParcelsSentManually.СоздатьМенеджерЗаписи();
	//		МенеджерЗаписи.Parcel = ТекParcel;
	//		МенеджерЗаписи.Sent = Истина;
	//		Попытка
	//			МенеджерЗаписи.Записать(Истина);
	//		Исключение
	//			ОтменитьТранзакцию();
	//			ИнформацияУспешноЗаписана = Ложь;
	//			СтрокаСообщения = "Failed to note parcel " + ТекParcel + " as sent";
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	//			ЗаписьЖурналаРегистрации(
	//				СтрокаСообщения,
	//				УровеньЖурналаРегистрации.Предупреждение,
	//				Метаданные.Обработки.LocalDistributionDesktop,
	//				,
	//				ОписаниеОшибки());
	//			Прервать;
	//		КонецПопытки;
	//	КонецЦикла;
	//	Если ИнформацияУспешноЗаписана Тогда
	//		ЗафиксироватьТранзакцию();
	//	КонецЕсли;
	//	УстановитьПривилегированныйРежим(Ложь);
	//	
	//Исключение
	//	СтрокаСообщения = "Failed to send Leg7 Reports to '" + СокрЛП(СтрокаТабWarehouse.ServiceProvider) + "'";
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	//	ЗаписьЖурналаРегистрации(
	//		СтрокаСообщения,
	//		УровеньЖурналаРегистрации.Предупреждение,
	//		Метаданные.Обработки.LocalDistributionDesktop,
	//		,
	//		ОписаниеОшибки());
	//КонецПопытки;
	//
	//Попытка
	//	УдалитьФайлы(ИмяВременногоФайла);
	//	УдалитьФайлы(ИмяXMLФайла);
	//	УдалитьФайлы(ИмяZipФайла);
	//Исключение
	//	ЗаписьЖурналаРегистрации(
	//		"Failed to delete created temporary files: " + ИмяВременногоФайла + ", " + ИмяXMLФайла + ", " + ИмяXMLФайла,
	//		УровеньЖурналаРегистрации.Предупреждение,
	//		Метаданные.Обработки.LocalDistributionDesktop,
	//		,
	//		ОписаниеОшибки());
	//КонецПопытки;

КонецПроцедуры

Функция ПолучитьРезультатЗапросаLeg7ReportsAdditionalParsels(МассивParcels) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.ATA, ДАТАВРЕМЯ(1, 1, 1)) КАК ShipmentATA,
	               |	ЕСТЬNULL(КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Номер, """") КАК DOCNo,
	               |	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	               |	ParcelsДетали.Ссылка.Код КАК ParcelNo,
	               |	ParcelsДетали.Ссылка.WarehouseTo.Код КАК WarehouseTo,
	               |	ParcelsДетали.Ссылка.NumOfParcels КАК NumOfParcels,
	               |	ParcelsДетали.Ссылка.SerialNo КАК ParcelSerialNo,
	               |	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
	               |	ParcelsДетали.Ссылка.Length КАК Length,
	               |	ParcelsДетали.Ссылка.Width КАК Width,
	               |	ParcelsДетали.Ссылка.Height КАК Height,
	               |	ParcelsДетали.Ссылка.DIMsUOM.Код КАК DIMsUOM,
	               |	ParcelsДетали.Ссылка.CubicMeters КАК CubicMeters,
	               |	ParcelsДетали.Ссылка.GrossWeight КАК GrossWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код КАК GrossWeightUOM,
	               |	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo,
	               |	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
	               |	ParcelsДетали.СтрокаИнвойса.СерийныйНомер КАК ItemSerialNo,
	               |	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	               |	ParcelsДетали.Qty КАК QTY,
	               |	ParcelsДетали.QtyUOM КАК QTYUOM,
	               |	ParcelsДетали.NetWeight КАК NetWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код КАК NetWeightUOM,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	               |	ParcelsДетали.Ссылка КАК ParcelСсылка,
	               |	TripParcels.Ссылка.Номер КАК TripNo,
	               |	TripParcels.Ссылка.Equipment,
	               |	TripParcels.Ссылка.Draft,
	               |	TripParcels.Ссылка.ETD,
	               |	TripFinalDestinations.ETA,
	               |	TripFinalDestinations.Waybill,
	               |	ВЫРАЗИТЬ(TripParcels.Ссылка.Comment КАК СТРОКА(1024)) КАК TripComment,
	               |	ParcelsДетали.Ссылка.WarehouseFrom.Код КАК WarehouseFrom,
	               |	ParcelsДетали.Ссылка.LocalOnly КАК Local,
	               |	TripParcels.Ссылка.ServiceProvider.Код КАК ServiceProvider,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.HouseWB, """") КАК ImportHouseWB,
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB2, """") КАК ImportWB2,
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB3, """") КАК ImportWB3,
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB4, """") КАК ImportWB4,
	               |	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.MOT, """") КАК MOT,
	               |	ParcelsДетали.Ссылка.LocalImpacked КАК Repacked,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompanyСсылка,
	               |	ParcelsДетали.Ссылка.WarehouseFrom КАК WarehouseFromСсылка
	               |ПОМЕСТИТЬ ВТ_TripDOC
	               |ИЗ
	               |	Документ.Trip.Parcels КАК TripParcels
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	               |			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
	               |				И (НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен)
	               |		ПО (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = TripParcels.Parcel)
	               |			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	               |		ПО TripParcels.Parcel = ParcelsДетали.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК TripFinalDestinations
	               |		ПО TripParcels.Ссылка = TripFinalDestinations.Ссылка
	               |			И TripParcels.Parcel.WarehouseTo = TripFinalDestinations.WarehouseTo
	               |ГДЕ
	               |	НЕ TripParcels.Ссылка.ПометкаУдаления
	               |	И TripParcels.Ссылка.Final = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ParcelsДетали.Ссылка В(&МассивParcels)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоставкаУпаковочныеЛисты.Ссылка.ATA,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Номер,
	               |	ParcelsДетали.НомерЗаявкиНаЗакупку,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo.Код,
	               |	ParcelsДетали.Ссылка.Код,
	               |	ParcelsДетали.Ссылка.WarehouseTo.Код,
	               |	ParcelsДетали.Ссылка.NumOfParcels,
	               |	ParcelsДетали.Ссылка.SerialNo,
	               |	ParcelsДетали.Ссылка.PackingType.Код,
	               |	ParcelsДетали.Ссылка.Length,
	               |	ParcelsДетали.Ссылка.Width,
	               |	ParcelsДетали.Ссылка.Height,
	               |	ParcelsДетали.Ссылка.DIMsUOM.Код,
	               |	ParcelsДетали.Ссылка.CubicMeters,
	               |	ParcelsДетали.Ссылка.GrossWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код,
	               |	ParcelsДетали.СтрокаИнвойса.Наименование,
	               |	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу,
	               |	ParcelsДетали.СтрокаИнвойса.СерийныйНомер,
	               |	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)),
	               |	ParcelsДетали.Qty,
	               |	ParcelsДетали.QtyUOM,
	               |	ParcelsДетали.NetWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)),
	               |	ParcelsДетали.Ссылка,
	               |	"""",
	               |	"""",
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	"""",
	               |	"""",
	               |	ParcelsДетали.Ссылка.WarehouseFrom.Код,
	               |	ParcelsДетали.Ссылка.LocalOnly,
	               |	NULL,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)),
	               |	ПоставкаУпаковочныеЛисты.Ссылка.HouseWB,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.WB2,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.WB3,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.WB4,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.MOT,
	               |	ParcelsДетали.Ссылка.LocalImpacked,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo,
	               |	ParcelsДетали.Ссылка.WarehouseFrom
	               |ИЗ
	               |	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	               |			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ParcelsДетали.Ссылка
	               |				И (ParcelsДетали.Ссылка.Проверен)
	               |				И (НЕ ParcelsДетали.Ссылка.Отменен)
	               |				И (НЕ ParcelsДетали.Ссылка.Repacked)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	               |			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = TripParcels.Parcel
	               |				И (НЕ TripParcels.Ссылка.ПометкаУдаления)
	               |		ПО ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка
	               |ГДЕ
	               |	НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен
	               |	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен
	               |	И TripParcels.Parcel ЕСТЬ NULL 
	               |	И НЕ ParcelsДетали.Ссылка ЕСТЬ NULL 
	               |	И ParcelsДетали.Ссылка В(&МассивParcels)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ShipmentATA,
	               |	"""" КАК DOCNo,
	               |	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	               |	ParcelsДетали.Ссылка.Код КАК ParcelNo,
	               |	ParcelsДетали.Ссылка.WarehouseTo.Код КАК WarehouseTo,
	               |	ParcelsДетали.Ссылка.NumOfParcels,
	               |	ParcelsДетали.Ссылка.SerialNo КАК ParcelSerialNo,
	               |	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
	               |	ParcelsДетали.Ссылка.Length,
	               |	ParcelsДетали.Ссылка.Width,
	               |	ParcelsДетали.Ссылка.Height,
	               |	ParcelsДетали.Ссылка.DIMsUOM.Код КАК DIMsUOM,
	               |	ParcelsДетали.Ссылка.CubicMeters,
	               |	ParcelsДетали.Ссылка.GrossWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код КАК GrossWeightUOM,
	               |	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo,
	               |	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
	               |	ParcelsДетали.СтрокаИнвойса.СерийныйНомер КАК ItemSerialNo,
	               |	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	               |	ParcelsДетали.Qty КАК QTY,
	               |	ParcelsДетали.QtyUOM КАК QTYUOM,
	               |	ParcelsДетали.NetWeight,
	               |	ParcelsДетали.Ссылка.WeightUOM.Код КАК NetWeightUOM,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	               |	ParcelsДетали.Ссылка КАК ParcelСсылка,
	               |	"""" КАК TripNo,
	               |	"""" КАК Equipment,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК Draft,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ETD,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ETA,
	               |	"""" КАК Waybill,
	               |	"""" КАК TripComment,
	               |	ParcelsДетали.Ссылка.WarehouseFrom.Код КАК WarehouseFrom,
	               |	ParcelsДетали.Ссылка.LocalOnly КАК Local,
	               |	NULL КАК ServiceProvider,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	               |	"""" КАК ImportHouseWB,
	               |	"""" КАК ImportWB2,
	               |	"""" КАК ImportWB3,
	               |	"""" КАК ImportWB4,
	               |	"""" КАК MOT,
	               |	ParcelsДетали.Ссылка.LocalImpacked КАК Repacked,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	               |	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompanyСсылка,
	               |	ParcelsДетали.Ссылка.WarehouseFrom КАК WarehouseFromСсылка
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали
	               |ГДЕ
	               |	ParcelsДетали.Ссылка В(&МассивParcels)
	               |	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления
	               |	И НЕ ParcelsДетали.Ссылка.Отменен
	               |	И НЕ ParcelsДетали.Ссылка.Repacked
	               |	И ParcelsДетали.Ссылка.Проверен
	               |	И НЕ ParcelsДетали.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_TripDOC.ParcelСсылка
	               |				ИЗ
	               |					ВТ_TripDOC КАК ВТ_TripDOC)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_TripDOC.ShipmentATA,
	               |	ВТ_TripDOC.DOCNo,
	               |	ВТ_TripDOC.PONo,
	               |	ВТ_TripDOC.ParentCompany,
	               |	ВТ_TripDOC.ParcelNo,
	               |	ВТ_TripDOC.WarehouseTo,
	               |	ВТ_TripDOC.NumOfParcels,
	               |	ВТ_TripDOC.ParcelSerialNo,
	               |	ВТ_TripDOC.PackingType,
	               |	ВТ_TripDOC.Length,
	               |	ВТ_TripDOC.Width,
	               |	ВТ_TripDOC.Height,
	               |	ВТ_TripDOC.DIMsUOM,
	               |	ВТ_TripDOC.CubicMeters,
	               |	ВТ_TripDOC.GrossWeight,
	               |	ВТ_TripDOC.GrossWeightUOM,
	               |	ВТ_TripDOC.ItemNo,
	               |	ВТ_TripDOC.PartNo,
	               |	ВТ_TripDOC.ItemSerialNo,
	               |	ВТ_TripDOC.ItemDescription,
	               |	ВТ_TripDOC.QTY,
	               |	ВТ_TripDOC.QTYUOM,
	               |	ВТ_TripDOC.NetWeight,
	               |	ВТ_TripDOC.NetWeightUOM,
	               |	ВТ_TripDOC.ParcelComment,
	               |	ВТ_TripDOC.ParcelСсылка,
	               |	ВТ_TripDOC.TripNo,
	               |	ВТ_TripDOC.Equipment,
	               |	ВТ_TripDOC.Draft,
	               |	ВТ_TripDOC.ETD,
	               |	ВТ_TripDOC.ETA,
	               |	ВТ_TripDOC.Waybill,
	               |	ВТ_TripDOC.TripComment,
	               |	ВТ_TripDOC.WarehouseFrom,
	               |	ВТ_TripDOC.Local,
	               |	ВТ_TripDOC.ServiceProvider,
	               |	ВТ_TripDOC.HazardClass,
	               |	ВТ_TripDOC.ImportHouseWB,
	               |	ВТ_TripDOC.ImportWB2,
	               |	ВТ_TripDOC.ImportWB3,
	               |	ВТ_TripDOC.ImportWB4,
	               |	ВТ_TripDOC.MOT,
	               |	ВТ_TripDOC.Repacked,
	               |	ВТ_TripDOC.AU,
	               |	ВТ_TripDOC.ParentCompanyСсылка,
	               |	ВТ_TripDOC.WarehouseFromСсылка
	               |ИЗ
	               |	ВТ_TripDOC КАК ВТ_TripDOC
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.ShipmentATA,
	               |	ВТ.DOCNo,
	               |	ВТ.PONo,
	               |	ВТ.ParentCompany,
	               |	ВТ.ParcelNo,
	               |	ВТ.WarehouseTo,
	               |	ВТ.NumOfParcels,
	               |	ВТ.ParcelSerialNo,
	               |	ВТ.PackingType,
	               |	ВТ.Length,
	               |	ВТ.Width,
	               |	ВТ.Height,
	               |	ВТ.DIMsUOM,
	               |	ВТ.CubicMeters,
	               |	ВТ.GrossWeight,
	               |	ВТ.GrossWeightUOM,
	               |	ВТ.ItemNo,
	               |	ВТ.PartNo,
	               |	ВТ.ItemSerialNo,
	               |	ВТ.ItemDescription,
	               |	ВТ.QTY,
	               |	ВТ.QTYUOM,
	               |	ВТ.NetWeight,
	               |	ВТ.NetWeightUOM,
	               |	ВТ.ParcelComment,
	               |	ВТ.ParcelСсылка,
	               |	ВТ.TripNo,
	               |	ВТ.Equipment,
	               |	ВТ.Draft,
	               |	ВТ.ETD,
	               |	ВТ.ETA,
	               |	ВТ.Waybill,
	               |	ВТ.TripComment,
	               |	ВТ.WarehouseFrom,
	               |	ВТ.Local,
	               |	ВТ.HazardClass,
	               |	ВТ.ImportHouseWB,
	               |	ВТ.ImportWB2,
	               |	ВТ.ImportWB3,
	               |	ВТ.ImportWB4,
	               |	ВТ.MOT,
	               |	ВТ.Repacked,
	               |	ВЫБОР
	               |		КОГДА ВТ.ParentCompanyСсылка.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	               |			ТОГДА ВТ.ParentCompanyСсылка.LegalEntityForLeg7
	               |		ИНАЧЕ AUsAndLegalEntities.LegalEntity
	               |	КОНЕЦ КАК LegalEntity,
	               |	ВТ.WarehouseFromСсылка
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities КАК AUsAndLegalEntities
	               |		ПО ВТ.ParentCompanyСсылка = AUsAndLegalEntities.ParentCompany
	               |			И ВТ.AU = AUsAndLegalEntities.AU";
	        	
	ТаблицаДанныхLeg7Reports = Запрос.Выполнить().Выгрузить();	
	ТаблицаДанныхLeg7Reports.Индексы.Добавить("TripNo");
	
	Возврат ТаблицаДанныхLeg7Reports;
	
КонецФункции

Процедура ЗарегистрироватьДополнительныеПарселиКОтправке(МассивParcels) Экспорт
	
	ТаблицаServiceProviders = Справочники.ServiceProviders.ПолучитьТаблицуServiceProviders();
	
	СписокКолонокДляКопирования = "DefaultWarehouse,DefaultWarehouseCode,ServiceProvider,StartOfLeg7Reports,EMailBox"; 
	ТаблицаWarehouses = ТаблицаServiceProviders.Скопировать(, СписокКолонокДляКопирования);
	ТаблицаWarehouses.Свернуть(СписокКолонокДляКопирования);
	
	Если ТаблицаWarehouses.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Unable to determine the address to send!");
		Возврат;
	КонецЕсли;
	
	СтрокаТабWarehouse = ТаблицаWarehouses[0];
	
	//получим данные для отправления
	ТаблицаДанныхLeg7Reports = ПолучитьРезультатЗапросаLeg7ReportsAdditionalParsels(МассивParcels);
	
	ВсеПарселиМогутБытьВыгружены = Истина;
	СтруктураПоиска = Новый Структура("ParcelСсылка");
	Для каждого ТекParcel Из МассивParcels Цикл
		СтруктураПоиска.ParcelСсылка = ТекParcel;
		НайденныеСтроки = ТаблицаДанныхLeg7Reports.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ВсеПарселиМогутБытьВыгружены = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Parcel" + ТекParcel + " does not satisfy the selection criteria", ТекParcel);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВсеПарселиМогутБытьВыгружены Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаWarehousesFrom = ТаблицаДанныхLeg7Reports.Скопировать(,"WarehouseFromСсылка");
	ТаблицаWarehousesFrom.Свернуть("WarehouseFromСсылка");
	Если ТаблицаWarehousesFrom.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("You can not send parcels from several warehouses!");
		Возврат;
	КонецЕсли;
	
	WarehouseFrom = ТаблицаWarehousesFrom[0].WarehouseFromСсылка;
	Если СтрокаТабWarehouse.DefaultWarehouse = WarehouseFrom Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Warehouse coincides with default warehouse of service provider, parcels do not need to send.");
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ИнформацияУспешноЗаписана = Истина;
	Для каждого ТекParcel Из МассивParcels Цикл
		МенеджерЗаписи = РегистрыСведений.ParcelsSentManually.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Parcel = ТекParcel;
		МенеджерЗаписи.Sent = Истина;
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОтменитьТранзакцию();
			ИнформацияУспешноЗаписана = Ложь;
			СтрокаСообщения = "Failed to register parcel " + ТекParcel + " to send";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			ЗаписьЖурналаРегистрации(
				СтрокаСообщения,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Обработки.LocalDistributionDesktop,
				,
				ОписаниеОшибки());
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Если ИнформацияУспешноЗаписана Тогда
		ЗафиксироватьТранзакцию();
		СтрокаСообщения = "Parcels are successfully registered for sending";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// } RGS AGorlenko 12.03.2014 15:53:52 - S-I-0000636

#Область Leg6
Функция ПолучитьТаблицыLeg6(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвойсИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Инвойсы
	|ИЗ
	|	Документ.Инвойс.Изменения КАК ИнвойсИзменения
	|ГДЕ
	|	ИнвойсИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_DOCs
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Изменения КАК КонсолидированныйПакетЗаявокНаПеревозкуИзменения
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Parcels
	|ИЗ
	|	Справочник.Parcels.Изменения КАК ParcelsИзменения
	|ГДЕ
	|	ParcelsИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойсаИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Items
	|ИЗ
	|	Справочник.СтрокиИнвойса.Изменения КАК СтрокиИнвойсаИзменения
	|ГДЕ
	|	СтрокиИнвойсаИзменения.Узел = &УзелОбмена
	|	И СтрокиИнвойсаИзменения.Ссылка.ExportRequest = ЗНАЧЕНИЕ(Документ.ExportRequest.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоставкаИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Shipments
	|ИЗ
	|	Документ.Поставка.Изменения КАК ПоставкаИзменения
	|ГДЕ
	|	ПоставкаИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиНаЗакупкуИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_POs
	|ИЗ
	|	Справочник.ЗаявкиНаЗакупку.Изменения КАК ЗаявкиНаЗакупкуИзменения
	|ГДЕ
	|	ЗаявкиНаЗакупкуИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиЗаявкиНаЗакупкуИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_POLines
	|ИЗ
	|	Справочник.СтрокиЗаявкиНаЗакупку.Изменения КАК СтрокиЗаявкиНаЗакупкуИзменения
	|ГДЕ
	|	СтрокиЗаявкиНаЗакупкуИзменения.Узел = &УзелОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Инвойс.Номер КАК No,
	|	Инвойс.Голд КАК GOLD,
	|	Инвойс.Продавец.Наименование КАК Seller,
	|	Инвойс.Покупатель.Наименование КАК SoldTo,
	|	Инвойс.Декларант.Код КАК ConsignTo,
	|	Инвойс.УсловияПоставки.Наименование КАК Incoterms,
	|	Инвойс.Contract.Наименование КАК Contract,
	|	Инвойс.OperatingLocation.Наименование КАК OperatingLocation,
	|	Инвойс.Валюта.Код КАК Currency,
	|	Инвойс.НомерЗаявкиНаДоставку КАК DONo,
	|	Инвойс.СуммаДокумента КАК TotalExWorks,
	|	Инвойс.Страховка КАК Insurance,
	|	Инвойс.Фрахт КАК Freight,
	|	Инвойс.Упаковка КАК Handling,
	|	Инвойс.ОбщаяСумма КАК TotalValue,
	|	Инвойс.Проверен КАК Final,
	|	Инвойс.Comment КАК Comment,
	|	Инвойс.Specialist.Код КАК Specialist,
	|	Инвойс.Transfer КАК Transfer,
	|	Инвойс.Ссылка КАК InvoiceСсылка,
	|	ВЫБОР
	|		КОГДА Инвойс.ПометкаУдаления
	|				ИЛИ Инвойс.Отменен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Canceled,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	Инвойс.ProcessLevel.Код КАК ProcessLevelКод
	|ИЗ
	|	Документ.Инвойс КАК Инвойс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Инвойсы КАК ВТ_Инвойсы
	|		ПО Инвойс.Ссылка = ВТ_Инвойсы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И Инвойс.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозку.Номер КАК No,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка КАК DOCСсылка,
	|	ВЫБОР
	|		КОГДА КонсолидированныйПакетЗаявокНаПеревозку.ПометкаУдаления
	|				ИЛИ КонсолидированныйПакетЗаявокНаПеревозку.Отменен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Canceled,
	|	КонсолидированныйПакетЗаявокНаПеревозку.GOLD КАК GOLD,
	|	КонсолидированныйПакетЗаявокНаПеревозку.POD.Код КАК POD,
	|	КонсолидированныйПакетЗаявокНаПеревозку.ConsignTo.Код КАК ConsignTo,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Seller.Наименование КАК Seller,
	|	КонсолидированныйПакетЗаявокНаПеревозку.MOT.Код КАК MOT,
	|	КонсолидированныйПакетЗаявокНаПеревозку.RequestedPOA.Код КАК RequestedPOA,
	|	ПРЕДСТАВЛЕНИЕ(КонсолидированныйПакетЗаявокНаПеревозку.Urgency) КАК Urgency,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Coordinator.Код КАК Coordinator,
	|	ПРЕДСТАВЛЕНИЕ(КонсолидированныйПакетЗаявокНаПеревозку.СтатусВажности) КАК ActionPriority,
	|	КонсолидированныйПакетЗаявокНаПеревозку.FirstRequested КАК FirstRequested,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Requested КАК Requested,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Accepted КАК Accepted,
	|	КонсолидированныйПакетЗаявокНаПеревозку.CCAFirstResponse КАК CCAFirstResponse,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Received КАК Received,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Granted КАК Granted,
	|	КонсолидированныйПакетЗаявокНаПеревозку.Booked КАК Booked,
	|	ПРЕДСТАВЛЕНИЕ(КонсолидированныйПакетЗаявокНаПеревозку.CurrentStage) КАК CurrentStage,
	|	ПРЕДСТАВЛЕНИЕ(КонсолидированныйПакетЗаявокНаПеревозку.CurrentStatus) КАК CurrentStatus,
	|	КонсолидированныйПакетЗаявокНаПеревозку.CurrentStatusDate КАК CurrentStatusDate,
	|	КонсолидированныйПакетЗаявокНаПеревозку.WithoutGreenLight КАК WithoutGreenLight,
	|	КонсолидированныйПакетЗаявокНаПеревозку.HouseKeeping КАК HouseKeeping,
	|	КонсолидированныйПакетЗаявокНаПеревозку.CurrentComment КАК CurrentComment,
	|	КонсолидированныйПакетЗаявокНаПеревозку.SanctionedItems КАК SanctionedItems,
	|	КонсолидированныйПакетЗаявокНаПеревозку.PendingEUC КАК PendingEUC,
	|	КонсолидированныйПакетЗаявокНаПеревозку.CCA КАК CCA,
	|	ЕСТЬNULL(DOCVersions.Version, 0) КАК Version,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	КонсолидированныйПакетЗаявокНаПеревозку.ProcessLevel,
	|	КонсолидированныйПакетЗаявокНаПеревозку.ProcessLevel.Код
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_DOCs КАК ВТ_DOCs
	|		ПО КонсолидированныйПакетЗаявокНаПеревозку.Ссылка = ВТ_DOCs.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И КонсолидированныйПакетЗаявокНаПеревозку.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			DOCVersionsСрезПоследних.DOC КАК DOC,
	|			DOCVersionsСрезПоследних.Version КАК Version
	|		ИЗ
	|			РегистрСведений.DOCVersions.СрезПоследних(, ) КАК DOCVersionsСрезПоследних) КАК DOCVersions
	|		ПО КонсолидированныйПакетЗаявокНаПеревозку.Ссылка = DOCVersions.DOC
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.НомерСтроки КАК No,
	|	КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.Date,
	|	ПРЕДСТАВЛЕНИЕ(КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.Status) КАК Status,
	|	КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.User.Код КАК User,
	|	КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.Comment,
	|	КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.Ссылка КАК DOCСсылка
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.ManualStatuses КАК КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_DOCs КАК ВТ_DOCs
	|		ПО КонсолидированныйПакетЗаявокНаПеревозкуManualStatuses.Ссылка = ВТ_DOCs.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс КАК InvoiceСсылка,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.Номер КАК InvoiceNo,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOCСсылка,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_DOCs КАК ВТ_DOCs
	|		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = ВТ_DOCs.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel.Код КАК ParcelNo,
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel КАК ParcelСсылка,
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка КАК DOCСсылка,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_DOCs КАК ВТ_DOCs
	|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ВТ_DOCs.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|			И (СоответствияОбъектовИнформационныхБаз.ТипПриемника = ""СправочникСсылка.ParcelsLeg6"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.ATA, ДАТАВРЕМЯ(1, 1, 1)) КАК ShipmentATA,
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Номер КАК DOCNo,
	|	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	|	ParcelsДетали.Ссылка.Код КАК ParcelNo,
	|	ParcelsДетали.Ссылка.WarehouseTo.Код КАК WarehouseTo,
	|	ParcelsДетали.Ссылка.NumOfParcels,
	|	ParcelsДетали.Ссылка.SerialNo КАК ParcelSerialNo,
	|	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
	|	ParcelsДетали.Ссылка.Length,
	|	ParcelsДетали.Ссылка.Width,
	|	ParcelsДетали.Ссылка.Height,
	|	ParcelsДетали.Ссылка.DIMsUOM.Код КАК DIMsUOM,
	|	ParcelsДетали.Ссылка.CubicMeters,
	|	ParcelsДетали.Ссылка.GrossWeight,
	|	ParcelsДетали.Ссылка.WeightUOM.Код КАК GrossWeightUOM,
	|	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo,
	|	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
	|	ParcelsДетали.СтрокаИнвойса.СерийныйНомер КАК ItemSerialNo,
	|	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	|	ParcelsДетали.Qty КАК QTY,
	|	ParcelsДетали.QtyUOM.Код КАК QTYUOM,
	|	ParcelsДетали.NetWeight,
	|	ParcelsДетали.Ссылка.WeightUOM.Код КАК NetWeightUOM,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	|	ParcelsДетали.Ссылка КАК ParcelСсылка,
	|	ParcelsДетали.Ссылка.WarehouseFrom.Код КАК WarehouseFrom,
	|	ParcelsДетали.СтрокаИнвойса.LocalOnly КАК Local,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.HouseWB, """") КАК ImportHouseWB,
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB2, """") КАК ImportWB2,
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB3, """") КАК ImportWB3,
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.WB4, """") КАК ImportWB4,
	|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.MOT, """") КАК MOT,
	|	ParcelsДетали.Ссылка.LocalImpacked КАК Repacked,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompanyСсылка,
	|	ParcelsДетали.Ссылка.WarehouseFrom КАК WarehouseFromСсылка,
	|	ВЫБОР
	|		КОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity,
	|	ParcelsДетали.Ссылка.ПометкаУдаления
	|		ИЛИ ParcelsДетали.Ссылка.Отменен КАК Canceled,
	|	ParcelsДетали.СтрокаИнвойса КАК ItemСсылка,
	|	ParcelsДетали.Ссылка.LengthCorrected,
	|	ParcelsДетали.Ссылка.WidthCorrected,
	|	ParcelsДетали.Ссылка.HeightCorrected,
	|	ParcelsДетали.Ссылка.GrossWeightCorrected,
	|	ParcelsДетали.Ссылка.WarehouseTo КАК WarehouseToСсылка,
	|	ParcelsДетали.Ссылка.DONo,
	|	ParcelsДетали.Ссылка.VolumeWeight,
	|	ParcelsДетали.Ссылка.ChargeableWeight,
	|	ПРЕДСТАВЛЕНИЕ(ParcelsДетали.Ссылка.Urgency) КАК Urgency,
	|	ParcelsДетали.Ссылка.SpecialHandling.Код КАК SpecialHandling,
	|	ParcelsДетали.Ссылка.RDD,
	|	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Код КАК POLine,
	|	ParcelsДетали.СтрокаИнвойса.ImportReference КАК Receiver,
	|	ParcelsДетали.GrossWeightKG,
	|	ParcelsДетали.ChargeableWeight КАК ItemChargeableWeight,
	|	"""" КАК ExportRequest
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Parcels КАК ВТ_Parcels
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|				ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
	|					И (НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_DOCs КАК ВТ_DOCs
	|				ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ВТ_DOCs.Ссылка
	|			ПО ВТ_Parcels.Ссылка = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
	|				И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен
	|					ИЛИ ВТ_Parcels.Ссылка.Отменен)
	|		ПО ParcelsДетали.Ссылка = ВТ_Parcels.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(, ) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ParcelsДетали.СтрокаИнвойса.SoldTo = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ParcelsДетали.СтрокаИнвойса.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|ГДЕ
	|	(ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.ATA, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НЕ ВТ_DOCs.Ссылка ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиИнвойса.Наименование КАК No,
	|	СтрокиИнвойса.Инвойс.Номер КАК Invoice,
	|	СтрокиИнвойса.НомерСтрокиИнвойса КАК LineNo,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК PONo,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Код КАК POLine,
	|	СтрокиИнвойса.КодПоИнвойсу КАК PartNo,
	|	СтрокиИнвойса.СерийныйНомер КАК SN,
	|	СтрокиИнвойса.RAN,
	|	СтрокиИнвойса.Каталог.Код КАК Catalog,
	|	СтрокиИнвойса.ImportReference,
	|	СтрокиИнвойса.НаименованиеТовара КАК DescriptionEng,
	|	СтрокиИнвойса.DescriptionRus,
	|	СтрокиИнвойса.Количество КАК Qty,
	|	СтрокиИнвойса.ЕдиницаИзмерения.Код КАК UOM,
	|	СтрокиИнвойса.Цена КАК UnitPrice,
	|	СтрокиИнвойса.Currency.Код КАК Currency,
	|	СтрокиИнвойса.Сумма КАК TotalPrice,
	|	СтрокиИнвойса.SoldTo.Код КАК SoldTo,
	|	СтрокиИнвойса.КостЦентр.Код КАК AU,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиИнвойса.Классификатор) КАК ERPTreatment,
	|	СтрокиИнвойса.Активити КАК Activity,
	|	ВЫБОР
	|		КОГДА СтрокиИнвойса.СтранаПроисхождения ССЫЛКА Справочник.CountriesHUBs
	|			ТОГДА ВЫРАЗИТЬ(СтрокиИнвойса.СтранаПроисхождения КАК Справочник.CountriesHUBs).Наименование
	|		ИНАЧЕ СтрокиИнвойса.СтранаПроисхождения
	|	КОНЕЦ КАК CountryOfOrigin,
	|	СтрокиИнвойса.Manufacturer,
	|	СтрокиИнвойса.МеждународныйКодТНВЭД КАК HTC,
	|	СтрокиИнвойса.НомерВходящейДекларации КАК PriorCCD,
	|	СтрокиИнвойса.NetWeight,
	|	СтрокиИнвойса.WeightUOM.Код КАК WeightUOM,
	|	СтрокиИнвойса.PSA.Код КАК PSAContract,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиИнвойса.PermanentTemporary) КАК PermanentTemporary,
	|	СтрокиИнвойса.PermitsRequired КАК PermitsRequired,
	|	СтрокиИнвойса.COORequired КАК COORequired,
	|	СтрокиИнвойса.Final,
	|	СтрокиИнвойса.LocalOnly,
	|	СтрокиИнвойса.Shortage,
	|	СтрокиИнвойса.EUCNotRequired,
	|	СтрокиИнвойса.EUCRequested,
	|	СтрокиИнвойса.EUCReceived,
	|	СтрокиИнвойса.SCNo,
	|	СтрокиИнвойса.TNVED.Код КАК TNVED,
	|	СтрокиИнвойса.КостЦентр.Segment.Код КАК Segment,
	|	СтрокиИнвойса.Ссылка КАК ItemСсылка,
	|	СтрокиИнвойса.ПометкаУдаления КАК Canceled,
	|	"""" КАК GUIDSP,
	|	"""" КАК ExportRequest,
	|	СтрокиИнвойса.Инвойс КАК InvoiceReference
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Items КАК ВТ_Items
	|		ПО СтрокиИнвойса.Ссылка = ВТ_Items.Ссылка
	|ГДЕ
	|	СтрокиИнвойса.ExportRequest = ЗНАЧЕНИЕ(Документ.ExportRequest.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поставка.Номер КАК No,
	|	Поставка.GOLD,
	|	Поставка.Shipper.Код КАК Shipper,
	|	Поставка.FreightForwarder.Код КАК FreightForwarder,
	|	Поставка.HouseWB,
	|	Поставка.WB2,
	|	Поставка.WB3,
	|	Поставка.WB4,
	|	Поставка.PiecesQty,
	|	Поставка.TotalWBWeight,
	|	Поставка.Freight,
	|	ПРЕДСТАВЛЕНИЕ(Поставка.Urgency) КАК Urgency,
	|	Поставка.ActualPOA.Код КАК ActualPOA,
	|	Поставка.Coordinator.Код КАК Coordinator,
	|	ПРЕДСТАВЛЕНИЕ(Поставка.СтатусВажности) КАК ActionPriority,
	|	Поставка.ETD,
	|	Поставка.ATD,
	|	Поставка.PreAlertETA,
	|	Поставка.ETA,
	|	Поставка.ATA,
	|	Поставка.CollectedFromPort,
	|	ПРЕДСТАВЛЕНИЕ(Поставка.CurrentCargoStage) КАК CurrentCargoStage,
	|	Поставка.PreAlert,
	|	Поставка.DoxForCCA,
	|	Поставка.DoxRcvd,
	|	Поставка.PermitsRequested,
	|	Поставка.PermitsObtained,
	|	Поставка.InCustoms,
	|	Поставка.Cleared,
	|	ПРЕДСТАВЛЕНИЕ(Поставка.CurrentDocumentStage) КАК CurrentDocumentStage,
	|	Поставка.WithoutPreAlert,
	|	Поставка.WithoutGreenLight,
	|	Поставка.CurrentComment,
	|	Поставка.InfoOnHazardClasses,
	|	Поставка.Inspection,
	|	Поставка.InspectionStart,
	|	Поставка.InspectionEnd,
	|	Поставка.CCAJobReference,
	|	Поставка.PermitsRequired КАК PermitsRequired,
	|	ПРЕДСТАВЛЕНИЕ(Поставка.PSA) КАК PSA,
	|	Поставка.PSARequested,
	|	Поставка.PSAReceived,
	|	Поставка.Completed,
	|	Поставка.ConditionalRelease,
	|	Поставка.CCDNumber,
	|	Поставка.Ссылка КАК ShipmentСсылка,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	ВЫБОР
	|		КОГДА Поставка.ПометкаУдаления
	|				ИЛИ Поставка.Отменен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Canceled,
	|	Поставка.CCA,
	|	Поставка.PreInspection,
	|	Поставка.PreInspectionStart,
	|	Поставка.PreInspectionEnd,
	|	Поставка.CCACurrentComment,
	|	Поставка.ProcessLevel.Код
	|ИЗ
	|	Документ.Поставка КАК Поставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Shipments КАК ВТ_Shipments
	|		ПО Поставка.Ссылка = ВТ_Shipments.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И Поставка.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.Номер КАК No,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист КАК DOCСсылка,
	|	ПоставкаУпаковочныеЛисты.Ссылка КАК ShipmentСсылка,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Shipments КАК ВТ_Shipments
	|		ПО ПоставкаУпаковочныеЛисты.Ссылка = ВТ_Shipments.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И ПоставкаУпаковочныеЛисты.УпаковочныйЛист = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоставкаOutOfComplianceReasons.Ссылка КАК ShipmentСсылка,
	|	ПоставкаOutOfComplianceReasons.OutOfComplianceReason.Код КАК OutOfComplianceReason,
	|	ПоставкаOutOfComplianceReasons.Комментарий КАК Comment
	|ИЗ
	|	Документ.Поставка.OutOfComplianceReasons КАК ПоставкаOutOfComplianceReasons
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Shipments КАК ВТ_Shipments
	|		ПО ПоставкаOutOfComplianceReasons.Ссылка = ВТ_Shipments.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиНаЗакупку.Код КАК No,
	|	ЗаявкиНаЗакупку.БОРГ.Код КАК BORG,
	|	ЗаявкиНаЗакупку.ДатаЗаявкиНаЗакупку КАК PODate,
	|	ЗаявкиНаЗакупку.Посредник КАК ISUP,
	|	ЗаявкиНаЗакупку.Поставщик КАК Supplier,
	|	ЗаявкиНаЗакупку.СтранаПоставщика КАК SupplierCountry,
	|	ЗаявкиНаЗакупку.Грузополучатель КАК ShiptoLabel,
	|	ЗаявкиНаЗакупку.Комментарий КАК RequisitionName,
	|	ЗаявкиНаЗакупку.SubmitDate,
	|	ЗаявкиНаЗакупку.ShipTo,
	|	ЗаявкиНаЗакупку.ShiptoCode,
	|	ЗаявкиНаЗакупку.EUCNotRequired,
	|	ЗаявкиНаЗакупку.EUCRequested,
	|	ЗаявкиНаЗакупку.EUCReceived,
	|	ЗаявкиНаЗакупку.ПометкаУдаления КАК Canceled,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	ЗаявкиНаЗакупку.Ссылка КАК POСсылка
	|ИЗ
	|	Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_POs КАК ВТ_POs
	|		ПО ЗаявкиНаЗакупку.Ссылка = ВТ_POs.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И ЗаявкиНаЗакупку.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиЗаявкиНаЗакупку.Код КАК No,
	|	СтрокиЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК LineNo,
	|	СтрокиЗаявкиНаЗакупку.КодПоставщика КАК PartNo,
	|	СтрокиЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК PartDescription,
	|	СтрокиЗаявкиНаЗакупку.Количество КАК Qty,
	|	СтрокиЗаявкиНаЗакупку.ЕдиницаИзмерения.Код КАК UOM,
	|	СтрокиЗаявкиНаЗакупку.Цена КАК UnitCost,
	|	СтрокиЗаявкиНаЗакупку.Валюта.Код КАК Currency,
	|	СтрокиЗаявкиНаЗакупку.ИтогоПоСтроке КАК ExtendedCost,
	|	СтрокиЗаявкиНаЗакупку.ИтогоПоСтрокеДолл КАК ExtendedCostUSD,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиЗаявкиНаЗакупку.Классификатор) КАК ERPTreatment,
	|	СтрокиЗаявкиНаЗакупку.КостЦентр.Код КАК AU,
	|	СтрокиЗаявкиНаЗакупку.АктивитиКод КАК ActivityCode,
	|	СтрокиЗаявкиНаЗакупку.ТипЗапроса КАК TypeOfRequisition,
	|	СтрокиЗаявкиНаЗакупку.НазначениеРасходов КАК Commodity,
	|	СтрокиЗаявкиНаЗакупку.ТипНазначенияРасходов КАК CommodityType,
	|	СтрокиЗаявкиНаЗакупку.СпособПеревозки КАК ShipMethod,
	|	СтрокиЗаявкиНаЗакупку.ИнструкцииПоТранспортировке КАК ShippingInstructions,
	|	СтрокиЗаявкиНаЗакупку.СпециальныеИнструкции КАК SpecialInstructions,
	|	СтрокиЗаявкиНаЗакупку.SupplierPromisedDate,
	|	СтрокиЗаявкиНаЗакупку.GOLDReceiptDate,
	|	СтрокиЗаявкиНаЗакупку.GoodsReceiptDate,
	|	СтрокиЗаявкиНаЗакупку.DONumber КАК DONo,
	|	СтрокиЗаявкиНаЗакупку.HTC,
	|	СтрокиЗаявкиНаЗакупку.UrgentFlag,
	|	СтрокиЗаявкиНаЗакупку.Status,
	|	СтрокиЗаявкиНаЗакупку.CurrentRDD,
	|	СтрокиЗаявкиНаЗакупку.SupplierRequiredDate,
	|	СтрокиЗаявкиНаЗакупку.CountryOfOrigin,
	|	СтрокиЗаявкиНаЗакупку.ПометкаУдаления КАК Canceled,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	СтрокиЗаявкиНаЗакупку.Ссылка КАК POLineСсылка,
	|	СтрокиЗаявкиНаЗакупку.Владелец КАК POСсылка,
	|	СтрокиЗаявкиНаЗакупку.Владелец.Код КАК PONo
	|ИЗ
	|	Справочник.СтрокиЗаявкиНаЗакупку КАК СтрокиЗаявкиНаЗакупку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_POLines КАК ВТ_POLines
	|		ПО СтрокиЗаявкиНаЗакупку.Ссылка = ВТ_POLines.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И СтрокиЗаявкиНаЗакупку.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура();
	Результат.Вставить("Invoices", РезультатЗапроса[7].Выгрузить());
	Результат.Вставить("DOCs", РезультатЗапроса[8].Выгрузить());
	DOCsManualStatuses = РезультатЗапроса[9].Выгрузить();
	DOCsManualStatuses.Индексы.Добавить("DOCСсылка");
	Результат.Вставить("DOCsManualStatuses", DOCsManualStatuses);
	DOCsInvoices = РезультатЗапроса[10].Выгрузить();
	DOCsInvoices.Индексы.Добавить("DOCСсылка");
	Результат.Вставить("DOCsInvoices", DOCsInvoices);
	DOCsParcels = РезультатЗапроса[11].Выгрузить();
	DOCsParcels.Индексы.Добавить("DOCСсылка");
	Результат.Вставить("DOCsParcels", DOCsParcels);
	Parcels = РезультатЗапроса[12].Выгрузить();
	Parcels.Индексы.Добавить("ParcelСсылка");
	Результат.Вставить("Parcels", Parcels);
	Результат.Вставить("Items", РезультатЗапроса[13].Выгрузить());
	Shipments = РезультатЗапроса[14].Выгрузить();
	Shipments.Индексы.Добавить("ShipmentСсылка");
	Результат.Вставить("Shipments", Shipments);
	ShipmentDOCs = РезультатЗапроса[15].Выгрузить();
	ShipmentDOCs.Индексы.Добавить("ShipmentСсылка");
	Результат.Вставить("ShipmentDOCs", ShipmentDOCs);
	ShipmentOutOfComplianceReasons = РезультатЗапроса[16].Выгрузить();
	ShipmentOutOfComplianceReasons.Индексы.Добавить("ShipmentСсылка");
	Результат.Вставить("ShipmentOutOfComplianceReasons", ShipmentOutOfComplianceReasons);
	Результат.Вставить("POs", РезультатЗапроса[17].Выгрузить());
	Результат.Вставить("POLines", РезультатЗапроса[18].Выгрузить());
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область AdditionalInfo
Функция ПолучитьТаблицыAdditionalInfo(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BORGsИзменения.Ссылка.Код КАК No,
		|	ВЫБОР
		|		КОГДА BORGsИзменения.Ссылка.ПометкаУдаления
		|				ИЛИ BORGsИзменения.Ссылка.Компания.Country <> ЗНАЧЕНИЕ(Справочник.CountriesOfProcessLevels.RU)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Canceled,
		|	BORGsИзменения.Ссылка.Наименование КАК Description,
		|	BORGsИзменения.Ссылка.DefaultAU КАК DefaultAU,
		|	BORGsИзменения.Ссылка.DefaultWH КАК DefaultWH,
		|	ВЫБОР
		|		КОГДА BORGsИзменения.Ссылка.Компания.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
		|			ТОГДА BORGsИзменения.Ссылка.Компания.LegalEntityForLeg7
		|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
		|	КОНЕЦ КАК LegalEntity,
		|	BORGsИзменения.Ссылка КАК BORGСсылка,
		|	BORGsИзменения.Ссылка.Компания КАК ParentCompany
		|ИЗ
		|	Справочник.BORGs.Изменения КАК BORGsИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(, ) КАК AUsAndLegalEntitiesСрезПоследних
		|		ПО BORGsИзменения.Ссылка.Компания = AUsAndLegalEntitiesСрезПоследних.ParentCompany
		|			И BORGsИзменения.Ссылка.DefaultAU = AUsAndLegalEntitiesСрезПоследних.AU
		|ГДЕ
		|	BORGsИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КостЦентрыИзменения.Ссылка.Код КАК No,
		|	КостЦентрыИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	КостЦентрыИзменения.Ссылка.Наименование КАК Description,
		|	КостЦентрыИзменения.Ссылка КАК AUСсылка
		|ИЗ
		|	Справочник.КостЦентры.Изменения КАК КостЦентрыИзменения
		|ГДЕ
		|	КостЦентрыИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	WarehousesИзменения.Ссылка.Код КАК No,
		|	WarehousesИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	WarehousesИзменения.Ссылка.Наименование КАК Description,
		|	WarehousesИзменения.Ссылка КАК WarehouseСсылка,
		|	WarehousesИзменения.Ссылка.Address1 КАК Address1,
		|	WarehousesИзменения.Ссылка.Address2 КАК Address2,
		|	WarehousesИзменения.Ссылка.Address3 КАК Address3,
		|	WarehousesИзменения.Ссылка.AddressRus КАК AddressRus,
		|	WarehousesИзменения.Ссылка.ContactName КАК ContactName,
		|	WarehousesИзменения.Ссылка.ContactPhone КАК ContactPhone,
		|	WarehousesИзменения.Ссылка.ContactEMail КАК ContactEMail,
		|	WarehousesИзменения.Ссылка.Warehouse КАК Warehouse,
		|	WarehousesИзменения.Ссылка.Port КАК Port,
		|	WarehousesИзменения.Ссылка.City.Код КАК City
		|ИЗ
		|	Справочник.Warehouses.Изменения КАК WarehousesИзменения
		|ГДЕ
		|	WarehousesИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	LegalEntitiesИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	LegalEntitiesИзменения.Ссылка.Наименование КАК Description,
		|	LegalEntitiesИзменения.Ссылка КАК LegalEntityСсылка,
		|	LegalEntitiesИзменения.Ссылка.SoldToAddress КАК SoldToAddress,
		|	LegalEntitiesИзменения.Ссылка.SoldToAddressRus КАК SoldToAddressRus,
		|	LegalEntitiesИзменения.Ссылка.NameRus КАК SoldToNameRus
		|ИЗ
		|	Справочник.LegalEntities.Изменения КАК LegalEntitiesИзменения
		|ГДЕ
		|	LegalEntitiesИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	EquipmentsИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	EquipmentsИзменения.Ссылка КАК EquipmentСсылка,
		|	EquipmentsИзменения.Ссылка.EffectiveWeight КАК EffectiveWeight,
		|	EquipmentsИзменения.Ссылка.MOTList КАК MOTList,
		|	EquipmentsИзменения.Ссылка.Код КАК No
		|ИЗ
		|	Справочник.Equipments.Изменения КАК EquipmentsИзменения
		|ГДЕ
		|	EquipmentsИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ServiceProvidersИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	ServiceProvidersИзменения.Ссылка КАК ServiceProviderСсылка,
		|	ServiceProvidersИзменения.Ссылка.Код КАК No,
		|	ServiceProvidersИзменения.Ссылка.Наименование КАК Description
		|ИЗ
		|	Справочник.ServiceProviders.Изменения КАК ServiceProvidersИзменения
		|ГДЕ
		|	ServiceProvidersИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		|	ПользователиИзменения.Ссылка КАК UserСсылка,
		|	ПользователиИзменения.Ссылка.Код КАК Alias,
		|	ПользователиИзменения.Ссылка.Наименование КАК FullName,
		|	ПользователиИзменения.Ссылка.EMail КАК EMail,
		|	ПользователиИзменения.Ссылка.CCA КАК CCA
		|ИЗ
		|	Справочник.Пользователи.Изменения КАК ПользователиИзменения
		|ГДЕ
		|	ПользователиИзменения.Узел = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ParentCompanyИзменения.Ссылка.ПометкаУдаления
		|				ИЛИ ParentCompanyИзменения.Ссылка.Country <> ЗНАЧЕНИЕ(Справочник.CountriesOfProcessLevels.RU)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Canceled,
		|	ParentCompanyИзменения.Ссылка КАК ParentCompanyСсылка,
		|	ParentCompanyИзменения.Ссылка.Код КАК No,
		|	ParentCompanyИзменения.Ссылка.Наименование КАК Description,
		|	ParentCompanyИзменения.Ссылка.NameRus КАК ParentCompanyNameRus
		|ИЗ
		|	Справочник.SoldTo.Изменения КАК ParentCompanyИзменения
		|ГДЕ
		|	ParentCompanyИзменения.Узел = &УзелОбмена";
		// { RGS VShamin 17.12.2015 16:28:30 - выгрузка шаблонов и писем
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.ПометкаУдаления КАК Canceled,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.Код КАК No,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.Владелец КАК User,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.POD КАК POD,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.ConsignTo КАК ConsignTo,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.Subject КАК Subject,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка.Body КАК Body,
		//|	UsersPODsEMailTemplatesИзменения.Ссылка КАК EMailTemplatesСсылка,
		//|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
		//|ИЗ
		//|	Справочник.UsersPODsEMailTemplates.Изменения КАК UsersPODsEMailTemplatesИзменения
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		//|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		//|			И UsersPODsEMailTemplatesИзменения.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		//|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
		//|ГДЕ
		//|	UsersPODsEMailTemplatesИзменения.Узел = &УзелОбмена
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	EMailsИзменения.Ссылка.Ссылка КАК EmailsСсылка,
		//|	EMailsИзменения.Ссылка.Object КАК DOC,
		//|	EMailsИзменения.Ссылка.Subject КАК Subject,
		//|	EMailsИзменения.Ссылка.Body КАК Body,
		//|	EMailsИзменения.Ссылка.ReplyTo КАК ReplyTo,
		//|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
		//|ИЗ
		//|	Документ.EMails.Изменения КАК EMailsИзменения
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		//|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		//|			И EMailsИзменения.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		//|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
		//|ГДЕ
		//|	EMailsИзменения.Узел = &УзелОбмена";
	// } RGS VShamin 17.12.2015 16:28:34 - выгрузка шаблонов и писем
		
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура();
	Результат.Вставить("BORGs", РезультатЗапроса[0].Выгрузить());
	Результат.Вставить("AUs", РезультатЗапроса[1].Выгрузить());
	Результат.Вставить("Warehouses", РезультатЗапроса[2].Выгрузить());
	Результат.Вставить("LegalEntities", РезультатЗапроса[3].Выгрузить());
	Результат.Вставить("Equipments", РезультатЗапроса[4].Выгрузить());
	Результат.Вставить("ServiceProviders", РезультатЗапроса[5].Выгрузить());
	Результат.Вставить("Users", РезультатЗапроса[6].Выгрузить());
	Результат.Вставить("ParentСompanies", РезультатЗапроса[7].Выгрузить());
	// { RGS VShamin 17.12.2015 16:28:30 - выгрузка шаблонов и писем
	//Результат.Вставить("EMailTemplates", РезультатЗапроса[8].Выгрузить());
	//Результат.Вставить("EMails", РезультатЗапроса[9].Выгрузить());
	// } RGS VShamin 17.12.2015 16:28:34 - выгрузка шаблонов и писем
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

// { RGS LKhristyuk 4/20/2018 4:19:13 PM
#Область ExportReports
Функция ПолучитьТаблицыExportReports(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ParcelsИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Parcels
	|ИЗ
	|	Справочник.Parcels.Изменения КАК ParcelsИзменения
	|ГДЕ
	|	ParcelsИзменения.Узел = &УзелОбмена
	|	И ParcelsИзменения.Ссылка.ExportRequest <> ЗНАЧЕНИЕ(Документ.ExportREquest.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойсаИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Items
	|ИЗ
	|	Справочник.СтрокиИнвойса.Изменения КАК СтрокиИнвойсаИзменения
	|ГДЕ
	|	СтрокиИнвойсаИзменения.Узел = &УзелОбмена
	|	И СтрокиИнвойсаИзменения.Ссылка.ExportRequest <> ЗНАЧЕНИЕ(Документ.ExportREquest.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ExportRequestИзменения.Ссылка
	|ПОМЕСТИТЬ BT_ExportRequests
	|ИЗ
	|	Документ.ExportRequest.Изменения КАК ExportRequestИзменения
	|ГДЕ
	|	ExportRequestИзменения.Узел = &УзелОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ExportShipmentИзменения.Ссылка
	|ПОМЕСТИТЬ BT_ExportShipments
	|ИЗ
	|	Документ.ExportShipment.Изменения КАК ExportShipmentИзменения
	|ГДЕ
	|	ExportShipmentИзменения.Узел = &УзелОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ShipmentATA,
	|	"""" КАК DOCNo,
	|	ParcelsДетали.НомерЗаявкиНаЗакупку КАК PONo,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Код КАК ParentCompany,
	|	ParcelsДетали.Ссылка.Код КАК ParcelNo,
	|	ParcelsДетали.Ссылка.WarehouseTo.Код КАК WarehouseTo,
	|	ParcelsДетали.Ссылка.NumOfParcels,
	|	ParcelsДетали.Ссылка.SerialNo КАК ParcelSerialNo,
	|	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
	|	ParcelsДетали.Ссылка.Length,
	|	ParcelsДетали.Ссылка.Width,
	|	ParcelsДетали.Ссылка.Height,
	|	ParcelsДетали.Ссылка.DIMsUOM.Код КАК DIMsUOM,
	|	ParcelsДетали.Ссылка.CubicMeters,
	|	ParcelsДетали.Ссылка.GrossWeight,
	|	ParcelsДетали.Ссылка.WeightUOM.Код КАК GrossWeightUOM,
	|	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo,
	|	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
	|	ParcelsДетали.СтрокаИнвойса.СерийныйНомер КАК ItemSerialNo,
	|	ВЫРАЗИТЬ(ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК СТРОКА(1024)) КАК ItemDescription,
	|	ParcelsДетали.Qty КАК QTY,
	|	ParcelsДетали.QtyUOM.Код КАК QTYUOM,
	|	ParcelsДетали.NetWeight,
	|	ParcelsДетали.Ссылка.WeightUOM.Код КАК NetWeightUOM,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Comment КАК СТРОКА(1024)) КАК ParcelComment,
	|	ParcelsДетали.Ссылка КАК ParcelСсылка,
	|	ParcelsДетали.Ссылка.WarehouseFrom.Код КАК WarehouseFrom,
	|	ParcelsДетали.СтрокаИнвойса.LocalOnly КАК Local,
	|	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.HazardClass.Код КАК СТРОКА(3)) КАК HazardClass,
	|	ParcelsДетали.Ссылка.LocalImpacked КАК Repacked,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр КАК AU,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompanyСсылка,
	|	ParcelsДетали.Ссылка.WarehouseFrom КАК WarehouseFromСсылка,
	|	ВЫБОР
	|		КОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.DefaultLegalEntity)
	|			ТОГДА ParcelsДетали.СтрокаИнвойса.SoldTo.LegalEntityForLeg7
	|		ИНАЧЕ AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|	КОНЕЦ КАК LegalEntity,
	|	ParcelsДетали.Ссылка.ПометкаУдаления
	|		ИЛИ ParcelsДетали.Ссылка.Отменен КАК Canceled,
	|	ParcelsДетали.СтрокаИнвойса КАК ItemСсылка,
	|	ParcelsДетали.Ссылка.LengthCorrected,
	|	ParcelsДетали.Ссылка.WidthCorrected,
	|	ParcelsДетали.Ссылка.HeightCorrected,
	|	ParcelsДетали.Ссылка.GrossWeightCorrected,
	|	ParcelsДетали.Ссылка.WarehouseTo КАК WarehouseToСсылка,
	|	ParcelsДетали.Ссылка.DONo,
	|	ParcelsДетали.Ссылка.VolumeWeight,
	|	ParcelsДетали.Ссылка.ChargeableWeight,
	|	ПРЕДСТАВЛЕНИЕ(ParcelsДетали.Ссылка.Urgency) КАК Urgency,
	|	ParcelsДетали.Ссылка.SpecialHandling.Код КАК SpecialHandling,
	|	ParcelsДетали.Ссылка.RDD,
	|	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Код КАК POLine,
	|	ParcelsДетали.СтрокаИнвойса.ImportReference КАК Receiver,
	|	ParcelsДетали.GrossWeightKG,
	|	ParcelsДетали.ChargeableWeight КАК ItemChargeableWeight,
	|	"""" КАК ImportHouseWB,
	|	"""" КАК ImportWB2,
	|	"""" КАК ImportWB3,
	|	"""" КАК ImportWB4,
	|	"""" КАК MOT,
	|	ParcelsДетали.СтрокаИнвойса.ExportRequest.Номер КАК ExportRequest,
	|	ParcelsДетали.СтрокаИнвойса.ExportRequest КАК ExportRequestReference
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Parcels КАК ВТ_Parcels
	|		ПО ParcelsДетали.Ссылка = ВТ_Parcels.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(, ) КАК AUsAndLegalEntitiesСрезПоследних
	|		ПО ParcelsДетали.СтрокаИнвойса.SoldTo = AUsAndLegalEntitiesСрезПоследних.ParentCompany
	|			И ParcelsДетали.СтрокаИнвойса.КостЦентр = AUsAndLegalEntitiesСрезПоследних.AU
	|ГДЕ
	|	ParcelsДетали.Ссылка.ExportRequest <> ЗНАЧЕНИЕ(Документ.ExportRequest.Пустаяссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиИнвойса.Наименование КАК No,
	|	"""" КАК Invoice,
	|	СтрокиИнвойса.НомерСтрокиИнвойса КАК LineNo,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК PONo,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Код КАК POLine,
	|	СтрокиИнвойса.КодПоИнвойсу КАК PartNo,
	|	СтрокиИнвойса.СерийныйНомер КАК SN,
	|	СтрокиИнвойса.RAN,
	|	СтрокиИнвойса.Каталог.Код КАК Catalog,
	|	СтрокиИнвойса.ImportReference,
	|	СтрокиИнвойса.НаименованиеТовара КАК DescriptionEng,
	|	СтрокиИнвойса.DescriptionRus,
	|	СтрокиИнвойса.Количество КАК Qty,
	|	СтрокиИнвойса.ЕдиницаИзмерения.Код КАК UOM,
	|	СтрокиИнвойса.Цена КАК UnitPrice,
	|	СтрокиИнвойса.Currency.Код КАК Currency,
	|	СтрокиИнвойса.Сумма КАК TotalPrice,
	|	СтрокиИнвойса.SoldTo.Код КАК SoldTo,
	|	СтрокиИнвойса.КостЦентр.Код КАК AU,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиИнвойса.Классификатор) КАК ERPTreatment,
	|	СтрокиИнвойса.Активити КАК Activity,
	|	ВЫБОР
	|		КОГДА СтрокиИнвойса.СтранаПроисхождения ССЫЛКА Справочник.CountriesHUBs
	|			ТОГДА ВЫРАЗИТЬ(СтрокиИнвойса.СтранаПроисхождения КАК Справочник.CountriesHUBs).Наименование
	|		ИНАЧЕ СтрокиИнвойса.СтранаПроисхождения
	|	КОНЕЦ КАК CountryOfOrigin,
	|	СтрокиИнвойса.Manufacturer,
	|	СтрокиИнвойса.МеждународныйКодТНВЭД КАК HTC,
	|	СтрокиИнвойса.НомерВходящейДекларации КАК PriorCCD,
	|	СтрокиИнвойса.NetWeight,
	|	СтрокиИнвойса.WeightUOM.Код КАК WeightUOM,
	|	СтрокиИнвойса.PSA.Код КАК PSAContract,
	|	ПРЕДСТАВЛЕНИЕ(СтрокиИнвойса.PermanentTemporary) КАК PermanentTemporary,
	|	СтрокиИнвойса.PermitsRequired КАК PermitsRequired,
	|	СтрокиИнвойса.COORequired КАК COORequired,
	|	СтрокиИнвойса.Final,
	|	СтрокиИнвойса.LocalOnly,
	|	СтрокиИнвойса.Shortage,
	|	СтрокиИнвойса.EUCNotRequired,
	|	СтрокиИнвойса.EUCRequested,
	|	СтрокиИнвойса.EUCReceived,
	|	СтрокиИнвойса.SCNo,
	|	СтрокиИнвойса.TNVED.Код КАК TNVED,
	|	СтрокиИнвойса.КостЦентр.Segment.Код КАК Segment,
	|	СтрокиИнвойса.Ссылка КАК ItemСсылка,
	|	СтрокиИнвойса.ПометкаУдаления КАК Canceled,
	|	"""" КАК GUIDSP,
	|	СтрокиИнвойса.ExportRequest.Номер КАК ExportRequest,
	|	СтрокиИнвойса.ExportRequest КАК ExportRequestReference
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Items КАК ВТ_Items
	|		ПО СтрокиИнвойса.Ссылка = ВТ_Items.Ссылка
	|ГДЕ
	|	СтрокиИнвойса.ExportRequest <> ЗНАЧЕНИЕ(Документ.ExportREquest.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ExportRequest.Ссылка КАК GUIDRIET,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	ExportRequest.Номер КАК No,
	|	ExportRequest.FromCountry.Код КАК FromCountry,
	|	ExportRequest.Company.Наименование КАК Company,
	|	ExportRequest.FromLegalEntity.Наименование КАК FromLegalEntity,
	|	ExportRequest.Segment.Код КАК Segment,
	|	ExportRequest.BORG.Код КАК BORG,
	|	ExportRequest.ExportMode,
	|	ExportRequest.Urgency,
	|	ExportRequest.AcceptedBySpecialist,
	|	ExportRequest.ExportSpecialist.Код КАК ExportSpecialist,
	|	ExportRequest.CCAGLRequested,
	|	ExportRequest.CCAGLReceived,
	|	ВЫБОР
	|		КОГДА ExportRequest.SourceDocsAvailable = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК SourceDocsAvailable,
	|	ВЫБОР
	|		КОГДА ExportRequest.PermitsRequired = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК PermitsRequired,
	|	ExportRequest.Incoterms.Наименование КАК Incoterms,
	|	ExportRequest.ConsigneeGLRequested,
	|	ExportRequest.ConsigneeGLReceived,
	|	ExportRequest.ShippingInvoiceReady,
	|	ВЫБОР
	|		КОГДА ExportRequest.FumigationRequired = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК FumigationRequired,
	|	ExportRequest.PermitsRequested,
	|	ExportRequest.PermitsObtained,
	|	ExportRequest.POD.Код КАК POD,
	|	ExportRequest.POA.Код КАК POA,
	|	ExportRequest.InternationalMOT.Код КАК InternationalMOT,
	|	ВЫБОР
	|		КОГДА ExportRequest.Canceled
	|				ИЛИ ExportRequest.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Canceled,
	|	ВЫБОР
	|		КОГДА ExportRequest.DualUse = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК DualUse,
	|	ExportRequest.CCA,
	|	ExportRequest.ProcessLevel,
	|	ExportRequest.ProcessLevel.Код,
	|	ЕСТЬNULL(ERVersionsСрезПоследних.Version, 0) КАК Version
	|ИЗ
	|	BT_ExportRequests КАК BT_ExportRequests
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ExportRequest КАК ExportRequest
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|			ПО ExportRequest.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|				И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|				И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERVersions.СрезПоследних КАК ERVersionsСрезПоследних
	|			ПО ExportRequest.Ссылка = ERVersionsСрезПоследних.ER
	|		ПО BT_ExportRequests.Ссылка = ExportRequest.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ExportShipment.Ссылка КАК GUIDRIET,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP,
	|	ExportShipment.Номер КАК No,
	|	ВЫБОР
	|		КОГДА ExportShipment.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Canceled,
	|	ExportShipment.SubmittedToCustoms,
	|	ExportShipment.ReleasedFromCustoms,
	|	ExportShipment.CCDNumber,
	|	ExportShipment.POD.Код КАК POD,
	|	ExportShipment.POA.Код КАК POA,
	|	ExportShipment.InternationalMOT.Код КАК InternationalMOT,
	|	ExportShipment.InternationalETD,
	|	ExportShipment.InternationalATD,
	|	ExportShipment.PreAlertSent,
	|	ExportShipment.InternationalETA,
	|	ExportShipment.InternationalATA,
	|	ExportShipment.InternationalWB1,
	|	ExportShipment.InternationalWB2,
	|	ExportShipment.InternationalWB3,
	|	ExportShipment.InternationalWB4,
	|	ExportShipment.ExportRequestsNo,
	|	ExportShipment.ExportSpecialist.Код КАК ExportSpecialist,
	|	ExportShipment.NoticeOfDeliveryDate,
	|	ExportShipment.CCA,
	|	ExportShipment.ProcessLevel,
	|	ExportShipment.ProcessLevel.Код,
	|	ExportShipment.Ссылка КАК ExportShipmentСсылка
	|ИЗ
	|	BT_ExportShipments КАК BT_ExportShipments
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ExportShipment КАК ExportShipment
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|			ПО ExportShipment.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|				И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|				И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)
	|		ПО BT_ExportShipments.Ссылка = ExportShipment.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ExportShipmentExportRequests.ExportRequest.Номер КАК No,
	|	ExportShipmentExportRequests.ExportRequest КАК ExportRequestСсылка,
	|	ExportShipmentExportRequests.Ссылка КАК ExportShipmentСсылка,
	|	ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника, """") КАК GUIDSP
	|ИЗ
	|	Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ BT_ExportShipments КАК BT_ExportShipments
	|		ПО ExportShipmentExportRequests.Ссылка = BT_ExportShipments.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
	|			И ExportShipmentExportRequests.ExportRequest = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	|			И (НЕ СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура();
	
	Результат.Вставить("ExportRequests", РезультатЗапроса[6].Выгрузить());
	Результат.Вставить("ExportShipments", РезультатЗапроса[7].Выгрузить());
	ExportShipmentExportRequests = РезультатЗапроса[8].Выгрузить();
	ExportShipmentExportRequests.Индексы.Добавить("ExportShipmentСсылка");
	Результат.Вставить("ExportShipmentExportRequests", ExportShipmentExportRequests);
	Parcels = РезультатЗапроса[4].Выгрузить();
	Parcels.Индексы.Добавить("ParcelСсылка");
	Результат.Вставить("Parcels", Parcels);
	Результат.Вставить("Items", РезультатЗапроса[5].Выгрузить());
	
	Возврат Результат;
	
КонецФункции // } RGS LKhristyuk 4/20/2018 4:19:13 PM
#КонецОбласти


///////////////////////////////////////////////////////////////////////////////////

// { RGS VShamin 27.07.2015 13:40:24 - S-I-0001168
//Функция ПолучитьLeg7Reports(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, WarehouseCode, МассивСкладов, УзелОбмена = Неопределено) Экспорт
Функция ПолучитьLeg7Reports(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, WarehouseCode, МассивСкладов, УзелОбмена = Неопределено, НастройкаОбмена) Экспорт
// } RGS VShamin 27.07.2015 13:40:24 - S-I-0001168
	
	Leg7Reports = ПолучитьОбъектXDTOLeg7("Leg7Reports");
	ChangesReport = ПолучитьОбъектXDTOLeg7("ChangesReport");
	
	// данные по боргам
	ДанныеБоргов = ПолучитьДанныеБоргов(ТаблицаДанныхLeg7Reports.ВыгрузитьКолонку("ItemСсылка"));
	
	// International Inbound Report
	
	Для каждого ТекСклад Из МассивСкладов Цикл
		
		CurrentInternationalInboundReport = ПолучитьОбъектXDTOLeg7("InternationalInboundReport");
		CurrentInternationalInboundReport.Warehouse = ТекСклад.Код;
		
		//отберем только те парсели, по которым нет Trip
		ДеталиInternationalInboundReport = ТаблицаДанныхLeg7Reports.Скопировать(Новый Структура("TripNo, WarehouseFromСсылка", "", ТекСклад));
		
		// заполним список Parcels
		
		МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ДеталиInternationalInboundReport, "ParcelСсылка");
		СтруктураОтбора = Новый Структура("ParcelСсылка");
		
		Для Каждого ParcelСсылка из МассивParcels Цикл 
			
			СтруктураОтбора.ParcelСсылка = ParcelСсылка;
			ДеталиParcel = ДеталиInternationalInboundReport.Скопировать(СтруктураОтбора);
			
			// { RGS AGorlenko 08.11.2014 22:06:36 - обмен изменениями
			//CurrentInternationalInboundReport.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена));
			// Если парсель уже выгружался ранее, то выгружаем его в отчете по изменениям
			// { RGS AGorlenko 13.12.2015 18:15:35 - для разделения парселей leg6 и leg7, спасибо нэку
			//Если РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ParcelСсылка, УзелОбмена) Тогда
			Если РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ЗаписьЕстьВРегистре(УзелОбмена, ParcelСсылка, "СправочникСсылка.ParcelsLeg7") Тогда
			// } RGS AGorlenko 13.12.2015 18:16:06 - для разделения парселей leg6 и leg7, спасибо нэку
				
				CurrentChangedParcel = ПолучитьОбъектXDTOLeg7("ChangedParcel");
				// { RGS VShamin 27.07.2015 13:44:04 - S-I-0001168
				//CurrentChangedParcel.Parcel = ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена);
				CurrentChangedParcel.Parcel = ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена, НастройкаОбмена, Истина, ДанныеБоргов);
				// } RGS VShamin 27.07.2015 13:44:05 - S-I-0001168
				CurrentChangedParcel.Warehouse = ТекСклад.Код;
				ChangesReport.ChangedParcel.Добавить(CurrentChangedParcel);
				
			Иначе
				
				// { RGS VShamin 27.07.2015 13:57:47 - S-I-0001168
				//CurrentInternationalInboundReport.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена));
				CurrentInternationalInboundReport.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена, НастройкаОбмена, Истина, ДанныеБоргов));
				// } RGS VShamin 27.07.2015 13:57:51 - S-I-0001168
				
			КонецЕсли;
			// } RGS AGorlenko 08.11.2014 22:06:43 - обмен изменениями
			
			Если УзелОбмена <> Неопределено Тогда
				
				Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ParcelСсылка, УзелОбмена) Тогда
					
					// добавляем запись в регистр сопоставления
					СтруктураЗаписи = Новый Структура;
					СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ParcelСсылка);
					СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
					
					РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Leg7Reports.InternationalInboundReport.Добавить(CurrentInternationalInboundReport);
		
	КонецЦикла;
	
	// Draft Trips Report
	
	// заполним список Draft Trips
	
	МассивTripNo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаДанныхLeg7Reports, "TripNo");
	
	СтруктураОтбора = Новый Структура("TripNo");
	
	//Если МассивTripNo.Количество() > 0 Тогда 
	DraftTripsReport = ПолучитьОбъектXDTOLeg7("DraftTripsReport");
	//КонецЕсли;
	
	Для Каждого TripNo из МассивTripNo Цикл 
		
		СтруктураОтбора.TripNo = TripNo;
		ДеталиTrip = ТаблицаДанныхLeg7Reports.Скопировать(СтруктураОтбора);
		
		// { RGS AGorlenko 08.11.2014 23:00:32 - обмен изменениями
		//Leg7Reports.DraftTripsReport.DraftTrips.Добавить(ЗаполнитьСтруктуруDraftTrip(ДеталиDraftTrip, УзелОбмена));
		Если ДеталиTrip[0].Final <> '00010101' Тогда
			
			// { RGS VShamin 27.07.2015 13:59:37 - S-I-0001168
			//ChangesReport.ChangedFinalTrip.Добавить(ЗаполнитьСтруктуруFinalTrip(ДеталиTrip, УзелОбмена));
			ChangesReport.ChangedFinalTrip.Добавить(ЗаполнитьСтруктуруFinalTrip(ДеталиTrip, УзелОбмена, НастройкаОбмена, ДанныеБоргов));
			// } RGS VShamin 27.07.2015 13:59:40 - S-I-0001168
			
		Иначе
			
			// { RGS VShamin 27.07.2015 13:59:44 - S-I-0001168
			//DraftTripsReport.DraftTrips.Добавить(ЗаполнитьСтруктуруDraftTrip(ДеталиTrip, УзелОбмена));
			DraftTripsReport.DraftTrips.Добавить(ЗаполнитьСтруктуруDraftTrip(ДеталиTrip, УзелОбмена, НастройкаОбмена, ДанныеБоргов));
			// } RGS VShamin 27.07.2015 13:59:45 - S-I-0001168
			
		КонецЕсли;
		// } RGS AGorlenko 08.11.2014 23:00:37 - обмен изменениями
		
		Если УзелОбмена <> Неопределено Тогда
			
			МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ДеталиTrip, "ParcelСсылка");
			Для каждого ТекParcel Из МассивParcels Цикл
				
				Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекParcel, УзелОбмена) Тогда
					// добавляем запись в регистр сопоставления
					СтруктураЗаписи = Новый Структура;
					СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекParcel);
					СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
					
					РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//WorkOrdersReport = ПолучитьОбъектXDTOLeg7("WorkOrdersReport");
	//МассивTripNo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаДанныхWOReport, "TripNo");
	//Для Каждого TripNo из МассивTripNo Цикл
	//	СтруктураОтбора.TripNo = TripNo;
	//	ДеталиTrip = ТаблицаДанныхWOReport.Скопировать(СтруктураОтбора);
	//	WorkOrdersReport.WorkOrders.Добавить(ЗаполнитьСтруктуруWO(ДеталиTrip, УзелОбмена));
	//КонецЦикла;
	
	Если DraftTripsReport.DraftTrips.Количество() > 0 Тогда
		Leg7Reports.DraftTripsReport = DraftTripsReport;
	КонецЕсли;
	Если ChangesReport.ChangedParcel.Количество() > 0 ИЛИ ChangesReport.ChangedFinalTrip.Количество() > 0 Тогда
		Leg7Reports.ChangesReport = ChangesReport;
	КонецЕсли;
	//Если WorkOrdersReport.WorkOrders.Количество() > 0 Тогда
	//	Leg7Reports.WorkOrdersReport = WorkOrdersReport;
	//КонецЕсли;
	
	Возврат Leg7Reports;
	
КонецФункции

Функция ПолучитьLeg6Report(ТаблицыLeg6Report, УзелОбмена, НастройкаОбмена) Экспорт
	
	Leg6Report = ПолучитьОбъектXDTOLeg7("Leg6Report");
	
	// Invoices
	ТаблицаInvoices = ТаблицыLeg6Report.Invoices;
	Для каждого ТекСтрокаИнвойса Из ТаблицаInvoices Цикл
		Leg6Report.Invoices.Добавить(ЗаполнитьСтруктуруInvoice(ТекСтрокаИнвойса, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаИнвойса.InvoiceСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаИнвойса.InvoiceСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	CCA = НастройкаОбмена.CCA;
	// DOCs
	ТаблицаDOCs = ТаблицыLeg6Report.DOCs;
	ТаблицаDOCsManualStatuses = ТаблицыLeg6Report.DOCsManualStatuses;
	ТаблицаDOCsInvoices = ТаблицыLeg6Report.DOCsInvoices;
	ТаблицаDOCsParcels = ТаблицыLeg6Report.DOCsParcels;
	СтруктураПоиска = Новый Структура("DOCСсылка");
	Для каждого ТекСтрокаDOC Из ТаблицаDOCs Цикл
		СтруктураПоиска.DOCСсылка = ТекСтрокаDOC.DOCСсылка;
		СтрокиDOCsManualStatuses = ТаблицаDOCsManualStatuses.НайтиСтроки(СтруктураПоиска);
		СтрокиDOCsInvoices = ТаблицаDOCsInvoices.НайтиСтроки(СтруктураПоиска);
		СтрокиDOCsParcels = ТаблицаDOCsParcels.НайтиСтроки(СтруктураПоиска);
		Leg6Report.DOCs.Добавить(ЗаполнитьСтруктуруDOC(ТекСтрокаDOC, СтрокиDOCsManualStatuses, СтрокиDOCsInvoices, СтрокиDOCsParcels, CCA, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаDOC.DOCСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаDOC.DOCСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Parcels
	ТаблицаParcels = ТаблицыLeg6Report.Parcels;
	МассивПарселей = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаParcels, "ParcelСсылка");
	СтруктураПоиска = Новый Структура("ParcelСсылка");
	Для каждого ТекParcel Из МассивПарселей Цикл
		
		СтруктураПоиска.ParcelСсылка = ТекParcel;
		СтрокиДеталей = ТаблицаParcels.НайтиСтроки(СтруктураПоиска);
		
		// { RGS VShamin 28.07.2015 12:18:07 - S-I-0001168
		//Leg6Report.Parcels.Добавить(ЗаполнитьСтруктуруParcel(СтрокиДеталей, ТекParcel, УзелОбмена, Истина));
		Leg6Report.Parcels.Добавить(ЗаполнитьСтруктуруParcel(СтрокиДеталей, ТекParcel, УзелОбмена, НастройкаОбмена, Ложь));
		// } RGS VShamin 28.07.2015 12:18:20 - S-I-0001168
		
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекParcel, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекParcel);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	// Items
	ТаблицаItems = ТаблицыLeg6Report.Items;
	Для каждого ТекСтрокаItem Из ТаблицаItems Цикл
		Leg6Report.InvoiceLines.Добавить(ЗаполнитьСтруктуруInvoiceLine(ТекСтрокаItem, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаItem.ItemСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаItem.ItemСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Shipments
	ТаблицаShipments = ТаблицыLeg6Report.Shipments;
	ТаблицаShipmentDOCs = ТаблицыLeg6Report.ShipmentDOCs;
	ТаблицаShipmentOutOfComplianceReasons = ТаблицыLeg6Report.ShipmentOutOfComplianceReasons;
	СтруктураПоиска = Новый Структура("ShipmentСсылка");
	Для каждого ТекСтрокаShipment Из ТаблицаShipments Цикл
		СтруктураПоиска.ShipmentСсылка = ТекСтрокаShipment.ShipmentСсылка;
		СтрокиShipmentDOCs = ТаблицаShipmentDOCs.НайтиСтроки(СтруктураПоиска);
		СтрокиShipmentOutOfComplianceReasons = ТаблицаShipmentOutOfComplianceReasons.НайтиСтроки(СтруктураПоиска);
		Leg6Report.Shipments.Добавить(ЗаполнитьСтруктуруShipment(ТекСтрокаShipment, СтрокиShipmentDOCs, СтрокиShipmentOutOfComplianceReasons, CCA, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаShipment.ShipmentСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаShipment.ShipmentСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// PO
	ТаблицаPOs = ТаблицыLeg6Report.POs;
	Для каждого ТекСтрокаPO Из ТаблицаPOs Цикл
		Leg6Report.POs.Добавить(ЗаполнитьСтруктуруPO(ТекСтрокаPO, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаPO.POСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаPO.POСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// PO lines
	ТаблицаPOLines = ТаблицыLeg6Report.POLines;
	Для каждого ТекСтрокаPOLine Из ТаблицаPOLines Цикл
		Leg6Report.POLines.Добавить(ЗаполнитьСтруктуруPOLine(ТекСтрокаPOLine, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаPOLine.POLineСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаPOLine.POLineСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Leg6Report;
	
КонецФункции

Функция ПолучитьAdditionalInfoReport(ТаблицыAdditionalInfo, УзелОбмена, НастрокаОбмена) Экспорт
	
	AdditionalInfo = ПолучитьОбъектXDTOLeg7("AdditionalInfo");
	
	// BORGs
	ТаблицаBORGs = ТаблицыAdditionalInfo.BORGs;
	Для каждого ТекСтрокаBORG Из ТаблицаBORGs Цикл
		AdditionalInfo.BORGs.Добавить(ЗаполнитьСтруктуруBORG(ТекСтрокаBORG, УзелОбмена, НастрокаОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаBORG.BORGСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаBORG.BORGСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// AUs
	ТаблицаAUs = ТаблицыAdditionalInfo.AUs;
	Для каждого ТекСтрокаAU Из ТаблицаAUs Цикл
		AdditionalInfo.AUs.Добавить(ЗаполнитьСтруктуруAU(ТекСтрокаAU, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаAU.AUСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаAU.AUСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Warehouses
	ТаблицаWarehouses = ТаблицыAdditionalInfo.Warehouses;
	Для каждого ТекСтрокаWarehouse Из ТаблицаWarehouses Цикл
		AdditionalInfo.Warehouses.Добавить(ЗаполнитьСтруктуруWarehouse(ТекСтрокаWarehouse, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаWarehouse.WarehouseСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаWarehouse.WarehouseСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// LegalEntities
	ТаблицаLegalEntities = ТаблицыAdditionalInfo.LegalEntities;
	Для каждого ТекСтрокаLegalEntity Из ТаблицаLegalEntities Цикл
		AdditionalInfo.LegalEntities.Добавить(ЗаполнитьСтруктуруLegalEntity(ТекСтрокаLegalEntity, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаLegalEntity.LegalEntityСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаLegalEntity.LegalEntityСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Equipments
	ТаблицаEquipments = ТаблицыAdditionalInfo.Equipments;
	Для каждого ТекСтрокаEquipment Из ТаблицаEquipments Цикл
		AdditionalInfo.Equipments.Добавить(ЗаполнитьСтруктуруEquipment(ТекСтрокаEquipment, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаEquipment.EquipmentСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаEquipment.EquipmentСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// ServiceProviders
	ТаблицаServiceProviders = ТаблицыAdditionalInfo.ServiceProviders;
	Для каждого ТекСтрокаServiceProvider Из ТаблицаServiceProviders Цикл
		AdditionalInfo.ServiceProviders.Добавить(ЗаполнитьСтруктуруServiceProvider(ТекСтрокаServiceProvider, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаServiceProvider.ServiceProviderСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаServiceProvider.ServiceProviderСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Users
	ТаблицаUsers = ТаблицыAdditionalInfo.Users;
	Для каждого ТекСтрокаUser Из ТаблицаUsers Цикл
		AdditionalInfo.Users.Добавить(ЗаполнитьСтруктуруUser(ТекСтрокаUser, УзелОбмена, НастрокаОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаUser.UserСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаUser.UserСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// ParentCompany
	ТаблицаParentСompanies = ТаблицыAdditionalInfo.ParentСompanies;
	Для каждого ТекСтрокаParentCompany Из ТаблицаParentСompanies Цикл
		AdditionalInfo.ParentCompanies.Добавить(ЗаполнитьСтруктуруParentCompany(ТекСтрокаParentCompany, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаParentCompany.ParentCompanyСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаParentCompany.ParentCompanyСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// { RGS VShamin 17.12.2015 16:38:54 - обмен шаблонами и письмами
	//// EMailTemplates
	//ТаблицаEMailTemplates = ТаблицыAdditionalInfo.EMailTemplates;
	//Для каждого ТекСтрокаEMailTemplates Из ТаблицаEMailTemplates Цикл
	//	AdditionalInfo.EMailTemplates.Добавить(ЗаполнитьСтруктуруEMailTemplates(ТекСтрокаEMailTemplates, УзелОбмена));
	//	Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаEMailTemplates.EMailTemplatesСсылка, УзелОбмена) Тогда
	//		// добавляем запись в регистр сопоставления
	//		СтруктураЗаписи = Новый Структура;
	//		СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
	//		СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаEMailTemplates.EMailTemplatesСсылка);
	//		СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
	//		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// EMails
	//ТаблицаEMails = ТаблицыAdditionalInfo.EMails;
	//Для каждого ТекСтрокаEMails Из ТаблицаEMails Цикл
	//	AdditionalInfo.EMails.Добавить(ЗаполнитьСтруктуруEMails(ТекСтрокаEMails, УзелОбмена));
	//	Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаEMails.EMailsСсылка, УзелОбмена) Тогда
	//		// добавляем запись в регистр сопоставления
	//		СтруктураЗаписи = Новый Структура;
	//		СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
	//		СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаEMails.EMailsСсылка);
	//		СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
	//		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
	//	КонецЕсли;
	//КонецЦикла;
	// } RGS VShamin 17.12.2015 16:39:01 - обмен шаблонами и письмами
	
	Возврат AdditionalInfo;
	
КонецФункции

// { RGS LKhristyuk 4/24/2018 4:48:26 PM
Функция ПолучитьExportReports(ТаблицыДанныхExportReports, УзелОбмена, НастройкаОбмена)
	
	ExportReports = ПолучитьОбъектXDTOLeg7("ExportReports");
		
	// Parcels
	ТаблицаParcels = ТаблицыДанныхExportReports.Parcels;
	МассивПарселей = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаParcels, "ParcelСсылка");
	СтруктураПоиска = Новый Структура("ParcelСсылка");
	Для каждого ТекParcel Из МассивПарселей Цикл
		
		СтруктураПоиска.ParcelСсылка = ТекParcel;
		СтрокиДеталей = ТаблицаParcels.НайтиСтроки(СтруктураПоиска);	
		ExportReports.Parcels.Добавить(ЗаполнитьСтруктуруParcel(СтрокиДеталей, ТекParcel, УзелОбмена, НастройкаОбмена, Ложь));
		
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекParcel, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекParcel);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;	
	КонецЦикла;
	
	// Items
	ТаблицаItems = ТаблицыДанныхExportReports.Items;
	Для каждого ТекСтрокаItem Из ТаблицаItems Цикл
		ExportReports.Items.Добавить(ЗаполнитьСтруктуруInvoiceLine(ТекСтрокаItem, УзелОбмена));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаItem.ItemСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаItem.ItemСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Export requests
	ТаблицаExportsRequests = ТаблицыДанныхExportReports.ExportRequests;
	Для каждого ТекСтрокаExportRequest Из ТаблицаExportsRequests Цикл
		ExportReports.ExportRequests.Добавить(ЗаполнитьСтруктуруExportRequest(ТекСтрокаExportRequest, УзелОбмена, НастройкаОбмена.CCA)); 
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаExportRequest.GUIDRIET, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаExportRequest.GUIDRIET);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Export shipments
	ТаблицаExportsShipments = ТаблицыДанныхExportReports.ExportShipments;
	ТаблицаExportShipmentExportRequests = ТаблицыДанныхExportReports.ExportShipmentExportRequests;
	СтруктураПоиска = Новый Структура("ExportShipmentСсылка");
	Для каждого ТекСтрокаExportShipment Из ТаблицаExportsShipments Цикл
		СтруктураПоиска.ExportShipmentСсылка = ТекСтрокаExportShipment.ExportShipmentСсылка;
		СтрокиExportShipmentExportRequests = ТаблицаExportShipmentExportRequests.НайтиСтроки(СтруктураПоиска);
		ExportReports.ExportShipments.Добавить(ЗаполнитьСтруктуруExportShipment(ТекСтрокаExportShipment, СтрокиExportShipmentExportRequests, УзелОбмена, НастройкаОбмена.CCA));
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ТекСтрокаExportShipment.GUIDRIET, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ТекСтрокаExportShipment.GUIDRIET);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
			
	Возврат ExportReports;
	
КонецФункции // } RGS LKhristyuk 4/24/2018 4:48:26 PM 

Функция ПолучитьСообщениеОбмена(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, WarehouseCode, МассивСкладов, ТаблицыLeg6Report, ТаблицыAdditionalInfo, ТаблицыДанныхExportReports, УзелОбмена, НастройкаОбмена) Экспорт
	
	Message = ПолучитьОбъектXDTOLeg7("Message");
	Message.MessageDate = ТекущаяДатаСеанса();
	Message.MessageNoRIET = УзелОбмена.НомерОтправленного + 1;
	Message.MessageNoSP = УзелОбмена.НомерПринятого;
	
	// { RGS VShamin 27.07.2015 13:39:31 - S-I-0001168
	//Leg7Reports = ПолучитьLeg7Reports(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, WarehouseCode, МассивСкладов, УзелОбмена);
	Leg7Reports = ПолучитьLeg7Reports(ТаблицаДанныхLeg7Reports, ТаблицаДанныхWOReport, WarehouseCode, МассивСкладов, УзелОбмена, НастройкаОбмена);
	// } RGS VShamin 27.07.2015 13:39:32 - S-I-0001168
	Message.Leg7Reports = Leg7Reports;
	
	Если НастройкаОбмена.Leg6Report Тогда
		Leg6Report = ПолучитьLeg6Report(ТаблицыLeg6Report, УзелОбмена, НастройкаОбмена);
		Message.Leg6Report = Leg6Report;
	КонецЕсли;
	
	// { RGS VShamin 27.07.2015 13:39:31 - S-I-0001168
	//AdditionalInfo = ПолучитьAdditionalInfoReport(ТаблицыAdditionalInfo, УзелОбмена, НастройкаОбмена);
	//Message.AdditionalInfo = AdditionalInfo;
	Если НастройкаОбмена.AdditionalInfoReport Тогда
		AdditionalInfo = ПолучитьAdditionalInfoReport(ТаблицыAdditionalInfo, УзелОбмена, НастройкаОбмена);
		Message.AdditionalInfo = AdditionalInfo;
	КонецЕсли;
	// } RGS VShamin 27.07.2015 13:39:32 - S-I-0001168
	
	// { RGS LKhristyuk 4/24/2018 4:41:38 PM
	Если НастройкаОбмена.ExportReports Тогда
		ExportReports = ПолучитьExportReports(ТаблицыДанныхExportReports, УзелОбмена, НастройкаОбмена);
		Message.ExportReports = ExportReports;
	КонецЕсли;
	// } RGS LKhristyuk 4/24/2018 4:41:38 PM
	
	Возврат Message;
	
КонецФункции

// { RGS VShamin 27.07.2015 14:00:24 - S-I-0001168
//Функция ЗаполнитьСтруктуруDraftTrip(ДеталиDraftTrip, УзелОбмена = Неопределено)
Функция ЗаполнитьСтруктуруDraftTrip(ДеталиDraftTrip, УзелОбмена = Неопределено, НастройкаОбмена, ДанныеБоргов)
// } RGS VShamin 27.07.2015 14:00:27 - S-I-0001168
	
	DraftTrip = ПолучитьОбъектXDTOLeg7("DraftTrip");
	
	СтрокаДеталейDraftTrip = ДеталиDraftTrip[0];	
	
	DraftTrip.Draft = СтрокаДеталейDraftTrip.Draft;
	DraftTrip.ETD = СтрокаДеталейDraftTrip.ETD;
	
	// Destinations ETA
	
	ТаблицаDestinationETA = ДеталиDraftTrip.Скопировать(, "WarehouseTo,LegalEntity,ETA,Waybill");
	ТаблицаDestinationETA.Свернуть("WarehouseTo,LegalEntity,ETA,Waybill");
	
	Для Каждого СтрокаDestinationETA из ТаблицаDestinationETA Цикл 
		DestinationETA = ПолучитьОбъектXDTOLeg7("DestinationETA");
		DestinationETA.WarehouseTo = СокрЛП(СтрокаDestinationETA.WarehouseTo);
		DestinationETA.LegalEntity = СокрЛП(СтрокаDestinationETA.LegalEntity);
		DestinationETA.ETA = СтрокаDestinationETA.ETA;
		DestinationETA.Waybill = СтрокаDestinationETA.Waybill;
		DestinationETA.ATA = Дата('00010101');
		DraftTrip.DestinationETA.Добавить(DestinationETA);	
	КонецЦикла;
		
	DraftTrip.Trip = ПолучитьОбъектXDTOLeg7("BaseTrip");
	
	DraftTrip.Trip.No = СтрокаДеталейDraftTrip.TripNo;
	DraftTrip.Trip.WarehouseFrom = СокрЛП(СтрокаДеталейDraftTrip.WarehouseFrom);
	DraftTrip.Trip.ServiceProvider = СокрЛП(СтрокаДеталейDraftTrip.ServiceProvider);
	DraftTrip.Trip.Equipment = СокрЛП(СтрокаДеталейDraftTrip.Equipment);
	DraftTrip.Trip.Comment = СокрЛП(СтрокаДеталейDraftTrip.TripComment);
	
	// Parcels
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ДеталиDraftTrip, "ParcelСсылка");
	СтруктураОтбора = Новый Структура("ParcelСсылка");
	
	Для Каждого ParcelСсылка из МассивParcels Цикл 
		СтруктураОтбора.ParcelСсылка = ParcelСсылка;
		ДеталиParcel = ДеталиDraftTrip.Скопировать(СтруктураОтбора);
		
		// { RGS VShamin 27.07.2015 14:00:55 - S-I-0001168
		//DraftTrip.Trip.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена));
		DraftTrip.Trip.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена, НастройкаОбмена, Истина, ДанныеБоргов));
		// } RGS VShamin 27.07.2015 14:00:58 - S-I-0001168
		
	КонецЦикла;
	
	Возврат DraftTrip;
	
КонецФункции

// { RGS VShamin 27.07.2015 14:01:54 - S-I-0001168
//Функция ЗаполнитьСтруктуруFinalTrip(ДеталиFinalTrip, УзелОбмена = Неопределено)
Функция ЗаполнитьСтруктуруFinalTrip(ДеталиFinalTrip, УзелОбмена = Неопределено, НастройкаОбмена, ДанныеБоргов)
// } RGS VShamin 27.07.2015 14:01:58 - S-I-0001168
	
	FinalTrip = ПолучитьОбъектXDTOLeg7("FinalTrip");
	
	СтрокаДеталейFinalTrip = ДеталиFinalTrip[0];
	
	FinalTrip.Final = СтрокаДеталейFinalTrip.Final;
	FinalTrip.ATD = СтрокаДеталейFinalTrip.ATD;
	
	// Destinations ETA
	
	ТаблицаDestinationETA = ДеталиFinalTrip.Скопировать(, "WarehouseTo,LegalEntity,ETA,Waybill,ATA");
	ТаблицаDestinationETA.Свернуть("WarehouseTo,LegalEntity,ETA,Waybill,ATA");
	
	Для Каждого СтрокаDestinationETA из ТаблицаDestinationETA Цикл 
		DestinationETA = ПолучитьОбъектXDTOLeg7("DestinationETA");
		DestinationETA.WarehouseTo = СокрЛП(СтрокаDestinationETA.WarehouseTo);
		DestinationETA.LegalEntity = СокрЛП(СтрокаDestinationETA.LegalEntity);
		DestinationETA.ETA = СтрокаDestinationETA.ETA;
		DestinationETA.Waybill = СтрокаDestinationETA.Waybill;
		DestinationETA.ATA = СтрокаDestinationETA.ATA;
		FinalTrip.DestinationETA.Добавить(DestinationETA);	
	КонецЦикла;
		
	FinalTrip.Trip = ПолучитьОбъектXDTOLeg7("BaseTrip");
	
	FinalTrip.Trip.No = СтрокаДеталейFinalTrip.TripNo;
	FinalTrip.Trip.WarehouseFrom = СокрЛП(СтрокаДеталейFinalTrip.WarehouseFrom);
	FinalTrip.Trip.ServiceProvider = СокрЛП(СтрокаДеталейFinalTrip.ServiceProvider);
	FinalTrip.Trip.Equipment = СокрЛП(СтрокаДеталейFinalTrip.Equipment);
	FinalTrip.Trip.Comment = СокрЛП(СтрокаДеталейFinalTrip.TripComment);
	FinalTrip.EquipmentNo = СокрЛП(СтрокаДеталейFinalTrip.EquipmentNo);
	
	// Parcels
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ДеталиFinalTrip, "ParcelСсылка");
	СтруктураОтбора = Новый Структура("ParcelСсылка");
	
	Для Каждого ParcelСсылка из МассивParcels Цикл 
		СтруктураОтбора.ParcelСсылка = ParcelСсылка;
		ДеталиParcel = ДеталиFinalTrip.Скопировать(СтруктураОтбора);
		
		// { RGS VShamin 27.07.2015 14:02:22 - S-I-0001168
		//FinalTrip.Trip.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена));
		FinalTrip.Trip.Parcel.Добавить(ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена, НастройкаОбмена, Истина, ДанныеБоргов));
		// } RGS VShamin 27.07.2015 14:02:25 - S-I-0001168
		
	КонецЦикла;
	
	Возврат FinalTrip;
	
КонецФункции

// { RGS VShamin 27.07.2015 13:45:12 - S-I-0001168
//Функция ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена = Неопределено, Leg6 = Ложь)
Функция ЗаполнитьСтруктуруParcel(ДеталиParcel, ParcelСсылка, УзелОбмена = Неопределено, НастройкаОбмена, ЭтоLeg7, ДанныеБоргов = Неопределено)
// } RGS VShamin 27.07.2015 13:45:13 - S-I-0001168
	
	Parcel = ПолучитьОбъектXDTOLeg7("Parcel");

	// заполним шапку Parcel
	
	ДанныеШапкиParcel = ДеталиParcel[0];
	
	Parcel.No                   = СокрЛП(ДанныеШапкиParcel.ParcelNo);
	Parcel.ShipmentATA          = ДанныеШапкиParcel.ShipmentATA;
	Parcel.DOCNo                = СокрЛП(ДанныеШапкиParcel.DOCNo);
	Parcel.ImportHouseWB        = СокрЛП(ДанныеШапкиParcel.ImportHouseWB);
	Parcel.ImportWB2            = СокрЛП(ДанныеШапкиParcel.ImportWB2);
    Parcel.ImportWB3            = СокрЛП(ДанныеШапкиParcel.ImportWB3);
	Parcel.ImportWB4            = СокрЛП(ДанныеШапкиParcel.ImportWB4);
	Parcel.MOT                  = СокрЛП(ДанныеШапкиParcel.MOT);
	Parcel.WarehouseTo          = СокрЛП(ДанныеШапкиParcel.WarehouseTo);
	Parcel.NumOfParcels         = ДанныеШапкиParcel.NumOfParcels;
	Parcel.SerialNo             = СокрЛП(ДанныеШапкиParcel.ParcelSerialNo);
	Parcel.PackingType          = СокрЛП(ДанныеШапкиParcel.PackingType);
	Parcel.Length               = ДанныеШапкиParcel.Length;
	Parcel.LengthCorrected      = ДанныеШапкиParcel.LengthCorrected;
	Parcel.Width                = ДанныеШапкиParcel.Width;
	Parcel.WidthCorrected       = ДанныеШапкиParcel.WidthCorrected;
	Parcel.Height               = ДанныеШапкиParcel.Height;
	Parcel.HeightCorrected      = ДанныеШапкиParcel.HeightCorrected;
	Parcel.DIMsUOM              = СокрЛП(ДанныеШапкиParcel.DIMsUOM);
	Parcel.CubicMeters          = ДанныеШапкиParcel.CubicMeters;
	Parcel.GrossWeight          = ДанныеШапкиParcel.GrossWeight;
	Parcel.GrossWeightCorrected = ДанныеШапкиParcel.GrossWeightCorrected;
	Parcel.GrossWeightUOM       = СокрЛП(ДанныеШапкиParcel.GrossWeightUOM);
	Parcel.HazardClass          = СокрЛП(ДанныеШапкиParcel.HazardClass);
	Если ЭтоLeg7 И Не ЗначениеЗаполнено(Parcel.HazardClass) Тогда
		Parcel.HazardClass = "Non";
	КонецЕсли;
	Parcel.Repacked             = ДанныеШапкиParcel.Repacked;
	Parcel.Comment              = СокрЛП(ДанныеШапкиParcel.ParcelComment);
	Parcel.Canceled             = ДанныеШапкиParcel.Canceled;
	Parcel.GUIDRIET             = Строка(ДанныеШапкиParcel.ParcelСсылка.УникальныйИдентификатор());
	// { RGS VShamin 08.12.2015 19:15:02 - в базе NEK парсели leg6 и leg7 разные сущности
	Parcel.GUIDSP               = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ПолучитьИдентификаторПриемникаСУчетомТипа(УзелОбмена, ДанныеШапкиParcel.ParcelСсылка, ?(ЭтоLeg7, "СправочникСсылка.ParcelsLeg7", "СправочникСсылка.ParcelsLeg6"));
	//Если НастройкаОбмена.Leg6Report Тогда
	//	Parcel.GUIDSP               = "";
	//Иначе
	//	Parcel.GUIDSP               = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ПолучитьИдентификаторПриемника(УзелОбмена, ДанныеШапкиParcel.ParcelСсылка);
	//КонецЕсли;
	// } RGS VShamin 08.12.2015 19:15:02 - в базе NEK парсели leg6 и leg7 разные сущности
	Parcel.WarehouseFrom        = СокрЛП(ДанныеШапкиParcel.WarehouseFrom);
	
	// заполним Items
	
	Для Каждого СтрокаItem из ДеталиParcel Цикл
		// { RGS VShamin 27.07.2015 13:47:41 - S-I-0001168
		//Parcel.Item.Добавить(ЗаполнитьСтруктуруItem(СтрокаItem, УзелОбмена, Leg6));
		Parcel.Item.Добавить(ЗаполнитьСтруктуруItem(СтрокаItem, УзелОбмена, НастройкаОбмена, ЭтоLeg7, ДанныеБоргов));
		// } RGS VShamin 27.07.2015 13:47:45 - S-I-0001168
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(СтрокаItem.ItemСсылка, УзелОбмена) Тогда
			// добавляем запись в регистр сопоставления
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбмена);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", СтрокаItem.ItemСсылка);
			СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// { RGS VShamin 27.07.2015 12:53:41 - S-I-0001168
	//Если Leg6 Тогда
	Если НастройкаОбмена.Leg6Report Тогда
	// } RGS VShamin 27.07.2015 12:53:42 - S-I-0001168
		
		// { RGS VShamin 27.07.2015 12:53:41 - S-I-0001168
		//Parcel.DONo             = СокрЛП(ДанныеШапкиParcel.DONo);
		//Parcel.NetWeight        = ДанныеШапкиParcel.NetWeight;
		//Parcel.VolumeWeight     = ДанныеШапкиParcel.VolumeWeight;
		//Parcel.ChargeableWeight = ДанныеШапкиParcel.ChargeableWeight;
		//Parcel.Urgency          = СокрЛП(ДанныеШапкиParcel.Urgency);
		//Parcel.RDD              = ДанныеШапкиParcel.RDD;
		//Parcel.WarehouseFrom    = СокрЛП(ДанныеШапкиParcel.WarehouseFrom);
		
		Parcel.DONo  = ?(ДанныеШапкиParcel.DONo <> Неопределено, СокрЛП(ДанныеШапкиParcel.DONo), "");
		Parcel.NetWeight  = ?(ДанныеШапкиParcel.NetWeight <> Неопределено, ДанныеШапкиParcel.NetWeight, 0);
		Parcel.VolumeWeight  = ?(ДанныеШапкиParcel.VolumeWeight <> Неопределено, ДанныеШапкиParcel.VolumeWeight, 0);
		Parcel.ChargeableWeight  = ?(ДанныеШапкиParcel.ChargeableWeight <> Неопределено, ДанныеШапкиParcel.ChargeableWeight, 0);
		Parcel.Urgency  = ?(ДанныеШапкиParcel.Urgency <> Неопределено, СокрЛП(ДанныеШапкиParcel.Urgency), "");
		Если ДанныеШапкиParcel.RDD <> Неопределено Тогда
		
			Parcel.RDD  = ДанныеШапкиParcel.RDD;
		
		КонецЕсли;
		Parcel.WarehouseFrom  = ?(ДанныеШапкиParcel.WarehouseFrom <> Неопределено, СокрЛП(ДанныеШапкиParcel.WarehouseFrom), "");
		// } RGS VShamin 27.07.2015 12:53:42 - S-I-0001168
		
	КонецЕсли;
	
	Возврат Parcel;
	
КонецФункции

// { RGS VShamin 27.07.2015 13:48:11 - S-I-0001168
//Функция ЗаполнитьСтруктуруItem(СтрокаItem, УзелОбмена = Неопределено, Leg6 = Ложь)
Функция ЗаполнитьСтруктуруItem(СтрокаItem, УзелОбмена = Неопределено, НастройкаОбмена, ЭтоLeg7, ДанныеБоргов)
// } RGS VShamin 27.07.2015 13:48:14 - S-I-0001168
	
	Item = ПолучитьОбъектXDTOLeg7("Item");
	
	// { RGS LKhristyuk 5/3/2018 5:29:44 PM
	//Item.ImportLocal    = ?(СтрокаItem.Local, "Local", "Import");
	Если СтрокаItem.Local Тогда
		Item.Type = "Local";
	ИначеЕсли ЗначениеЗаполнено(СтрокаItem.ExportRequest) Тогда
		Item.Type = "Export";
	Иначе
		Item.Type = "Import";
	КонецЕсли;
	// } RGS LKhristyuk 5/3/2018 5:29:44 PM              		
	
	Item.No             = СокрЛП(СтрокаItem.ItemNo);
	Item.ParentCompany  = СокрЛП(СтрокаItem.ParentCompany);
	// { RGS AGorlenko 20.01.2016 17:20:34 - S-I-0001504
	//Item.PONo           = СокрЛП(СтрокаItem.PONo);
	Item.PONo           = ПолучитьРО(СтрокаItem.ItemСсылка, СтрокаItem.PONo, ДанныеБоргов);
	// } RGS AGorlenko 20.01.2016 17:23:03 - S-I-0001504
	Item.PartNo         = СокрЛП(СтрокаItem.PartNo);
	Item.SerialNo       = СокрЛП(СтрокаItem.ItemSerialNo);
	Item.Description    = СокрЛП(СтрокаItem.ItemDescription);
	Item.Qty            = СтрокаItem.Qty;
	Item.QtyUOM         = СокрЛП(СтрокаItem.QtyUOM);
	Item.NetWeight      = СтрокаItem.NetWeight;
	Item.NetWeightUOM   = СокрЛП(СтрокаItem.NetWeightUOM);
	Item.LegalEntity    = СокрЛП(СтрокаItem.LegalEntity);
	Item.GUIDRIET       = Строка(СтрокаItem.ItemСсылка.УникальныйИдентификатор());
	Item.GUIDSP         = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ПолучитьИдентификаторПриемникаСУчетомТипа(УзелОбмена, СтрокаItem.ItemСсылка, ?(ЭтоLeg7, "СправочникСсылка.СтрокиИнвойсаLeg7", "СправочникСсылка.СтрокиИнвойсаLeg6"));
	
	// { RGS VShamin 27.07.2015 12:53:41 - S-I-0001168
	//Если Leg6 Тогда
	Если НастройкаОбмена.Leg6Report Тогда
	// } RGS VShamin 27.07.2015 12:53:42 - S-I-0001168
	
		// { RGS VShamin 27.07.2015 14:41:57 - S-I-0001168
		//Если Не ПустаяСтрока(СтрокаItem.POLine) Тогда
		//	Item.POLine          = СокрЛП(СтрокаItem.POLine);
		//КонецЕсли;
		//Item.Receiver        = СокрЛП(СтрокаItem.Receiver);
		//Item.GrossWeightKG   = СтрокаItem.GrossWeightKG;
		//Item.ChargeableWeight   = СтрокаItem.ItemChargeableWeight;
		
		Если Не ПустаяСтрока(СтрокаItem.POLine) Тогда
			Item.POLine          = СокрЛП(СтрокаItem.POLine);
		КонецЕсли;
		Item.Receiver  = ?(СтрокаItem.Receiver <> Неопределено, СокрЛП(СтрокаItem.Receiver), "");
		Item.GrossWeightKG  = ?(СтрокаItem.GrossWeightKG <> Неопределено, СтрокаItem.GrossWeightKG, 0);
		Item.ChargeableWeight  = ?(СтрокаItem.ChargeableWeight <> Неопределено, СтрокаItem.ChargeableWeight, 0);
		// } RGS VShamin 27.07.2015 14:41:59 - S-I-0001168
		
	КонецЕсли;
	
	Возврат Item;

КонецФункции

Функция ЗаполнитьСтруктуруWO(ДеталиTrip, УзелОбмена = Неопределено)
	
	Возврат Неопределено;
	
	WorkOrder = ПолучитьОбъектXDTOLeg7("WorkOrder");
	
	СтрокаДеталейTrip = ДеталиTrip[0];
	
	WorkOrder.TripNo = СтрокаДеталейTrip.TripNo;
	
	Для Каждого СтрокаДеталей из ДеталиTrip Цикл 
		WorkOrderDetails = ПолучитьОбъектXDTOLeg7("WorkOrderDetails");
		WorkOrderDetails.WarehouseTo = СокрЛП(СтрокаДеталей.WarehouseTo);
		WorkOrderDetails.LegalEntity = СокрЛП(СтрокаДеталей.LegalEntity);
		WorkOrderDetails.Waybill = СокрЛП(СтрокаДеталей.Waybill);
		WorkOrderDetails.WO = СокрЛП(СтрокаДеталей.WO);
		WorkOrder.WorkOrderDetails.Добавить(WorkOrderDetails);
	КонецЦикла;
	
	Возврат WorkOrder;
	
КонецФункции

//Функция ЗаполнитьСтруктуруWO(ДеталиTrip, УзелОбмена = Неопределено)
//	
//	WorkOrder = ПолучитьОбъектXDTOLeg7("WorkOrder");
//	
//	СтрокаДеталейTrip = ДеталиTrip[0];
//	
//	WorkOrder.TripNo = СтрокаДеталейTrip.TripNo;
//	
//	Для Каждого СтрокаДеталей из ДеталиTrip Цикл 
//		WorkOrderDetails = ПолучитьОбъектXDTOLeg7("WorkOrderDetails");
//		WorkOrderDetails.WarehouseTo = СокрЛП(СтрокаДеталей.WarehouseTo);
//		WorkOrderDetails.LegalEntity = СокрЛП(СтрокаДеталей.LegalEntity);
//		WorkOrderDetails.Waybill = СокрЛП(СтрокаДеталей.Waybill);
//		WorkOrderDetails.WO = СокрЛП(СтрокаДеталей.WO);
//		WorkOrder.WorkOrderDetails.Добавить(WorkOrderDetails);
//	КонецЦикла;
//	
//	Возврат WorkOrder;
//	
//КонецФункции

Процедура УдалитьСтрокиСПустымWaybillИзWOReport(ТаблицаДанныхWOReport, РегистрироватьПочтовоеСообщение = Ложь) Экспорт
	
	НайденныеСтроки = ТаблицаДанныхWOReport.НайтиСтроки(Новый Структура("Waybill", ""));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТелоПисьмаДляОтправки = "WO report problems:" + Символы.ПС;
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТелоПисьмаДляОтправки = ТелоПисьмаДляОтправки + "For trip '" + НайденнаяСтрока.TripNo + "' and WO '" + НайденнаяСтрока.WO + "' waybill is empty." + Символы.ПС;
		МассивСтрокДляУдаления.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаДанныхWOReport.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	Если РегистрироватьПочтовоеСообщение Тогда
		РГСофт.ЗарегистрироватьПочтовоеСообщение("riet-support-ld@slb.com", "WO report problems", ТелоПисьмаДляОтправки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруInvoice(ДанныеШапкиИнвойса, УзелОбмена)
	
	Invoice = ПолучитьОбъектXDTOLeg7("Invoice");
	
	Invoice.GUIDRIET = Строка(ДанныеШапкиИнвойса.InvoiceСсылка.УникальныйИдентификатор());
	Invoice.GUIDSP = СокрЛП(ДанныеШапкиИнвойса.GUIDSP);
	Invoice.No = СокрЛП(ДанныеШапкиИнвойса.No);
	Invoice.ProcessLevel = СокрЛП(ДанныеШапкиИнвойса.ProcessLevelКод);
	Invoice.GOLD = ДанныеШапкиИнвойса.GOLD;
	Invoice.Seller = СокрЛП(ДанныеШапкиИнвойса.Seller);
	Invoice.SoldTo = СокрЛП(ДанныеШапкиИнвойса.SoldTo);
	Invoice.ConsignTo = СокрЛП(ДанныеШапкиИнвойса.ConsignTo);
	Invoice.Incoterms = СокрЛП(ДанныеШапкиИнвойса.Incoterms);
	Invoice.Contract = СокрЛП(ДанныеШапкиИнвойса.Contract);
	Invoice.OperatingLocation = СокрЛП(ДанныеШапкиИнвойса.OperatingLocation);
	Invoice.Currency = СокрЛП(ДанныеШапкиИнвойса.Currency);
	Invoice.DONo = СокрЛП(ДанныеШапкиИнвойса.DONo);
	Invoice.TotalExWorks = ДанныеШапкиИнвойса.TotalExWorks;
	Invoice.Insurance = ДанныеШапкиИнвойса.Insurance;
	Invoice.Freight = ДанныеШапкиИнвойса.Freight;
	Invoice.Handling = ДанныеШапкиИнвойса.Handling;
	Invoice.TotalValue = ДанныеШапкиИнвойса.TotalValue;
	Invoice.Final = ДанныеШапкиИнвойса.Final;
	Invoice.Comment = СокрЛП(ДанныеШапкиИнвойса.Comment);
	Invoice.Specialist = СокрЛП(ДанныеШапкиИнвойса.Specialist);
	Invoice.Transfer = ДанныеШапкиИнвойса.Transfer;
	Invoice.Canceled = ДанныеШапкиИнвойса.Canceled;
	
	Возврат Invoice;
	
КонецФункции

Функция ЗаполнитьСтруктуруDOC(ДанныеШапкиDOC, СтрокиDOCsManualStatuses, СтрокиDOCsInvoices, СтрокиDOCsParcels, CCA, УзелОбмена)
	
	DOC = ПолучитьОбъектXDTOLeg7("DOC");
	
	DOC.GUIDRIET = Строка(ДанныеШапкиDOC.DOCСсылка.УникальныйИдентификатор());
	DOC.GUIDSP = СокрЛП(ДанныеШапкиDOC.GUIDSP);
	DOC.Canceled = ДанныеШапкиDOC.Canceled ИЛИ ДанныеШапкиDOC.CCA <> CCA ИЛИ НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(ДанныеШапкиDOC.CCA, ДанныеШапкиDOC.ProcessLevel);
	DOC.No = СокрЛП(ДанныеШапкиDOC.No);
	DOC.ProcessLevel = СокрЛП(ДанныеШапкиDOC.ProcessLevelКод);
	DOC.GOLD = ДанныеШапкиDOC.GOLD;
	DOC.POD = СокрЛП(ДанныеШапкиDOC.POD);
	DOC.ConsignTo = СокрЛП(ДанныеШапкиDOC.ConsignTo);
	DOC.Seller = СокрЛП(ДанныеШапкиDOC.Seller);
	DOC.MOT = СокрЛП(ДанныеШапкиDOC.MOT);
	DOC.RequestedPOA = СокрЛП(ДанныеШапкиDOC.RequestedPOA);
	DOC.Urgency = СокрЛП(ДанныеШапкиDOC.Urgency);
	DOC.Coordinator = СокрЛП(ДанныеШапкиDOC.Coordinator);
	DOC.ActionPriority = СокрЛП(ДанныеШапкиDOC.ActionPriority);
	DOC.FirstRequested = ДанныеШапкиDOC.FirstRequested;
	DOC.Requested = ДанныеШапкиDOC.Requested;
	DOC.Accepted = ДанныеШапкиDOC.Accepted;
	DOC.CCAFirstResponse = ДанныеШапкиDOC.CCAFirstResponse;
	DOC.Received = ДанныеШапкиDOC.Received;
	DOC.Granted = ДанныеШапкиDOC.Granted;
	DOC.Booked = ДанныеШапкиDOC.Booked;
	DOC.CurrentStage = СокрЛП(ДанныеШапкиDOC.CurrentStage);
	DOC.CurrentStatus = СокрЛП(ДанныеШапкиDOC.CurrentStatus);
	DOC.CurrentStatusDate = ДанныеШапкиDOC.CurrentStatusDate;
	DOC.WithoutGreenLight = ДанныеШапкиDOC.WithoutGreenLight;
	DOC.HouseKeeping = ДанныеШапкиDOC.HouseKeeping;
	DOC.CurrentComment = СокрЛП(ДанныеШапкиDOC.CurrentComment);
	DOC.SanctionedItems = ДанныеШапкиDOC.SanctionedItems;
	DOC.PendingEUC = ДанныеШапкиDOC.PendingEUC;
	// { RGS VShamin 22.04.2016 18:35:27 - S-I-0001602
	DOC.Version = ДанныеШапкиDOC.Version;
	// } RGS VShamin 22.04.2016 18:35:32 - S-I-0001602
	
	Для каждого СтрокаDOCsManualStatuses Из СтрокиDOCsManualStatuses Цикл
		DOC.ManualStatuses.Добавить(ЗаполнитьСтруктуруDOCsManualStatuses(СтрокаDOCsManualStatuses));
	КонецЦикла;
	
	Для каждого СтрокаDOCsInvoices Из СтрокиDOCsInvoices Цикл
		DOC.Invoices.Добавить(ЗаполнитьСтруктуруDOCsInvoices(СтрокаDOCsInvoices));
	КонецЦикла;
	
	Для каждого СтрокаDOCsParcels Из СтрокиDOCsParcels Цикл
		DOC.Parcels.Добавить(ЗаполнитьСтруктуруDOCsParcels(СтрокаDOCsParcels));
	КонецЦикла;
	
	Возврат DOC;
	
КонецФункции

Функция ЗаполнитьСтруктуруDOCsManualStatuses(СтрокаDOCsManualStatuses)
	
	DOCManualStatuses = ПолучитьОбъектXDTOLeg7("DOCManualStatuses");
	
	DOCManualStatuses.No = СтрокаDOCsManualStatuses.No;
	DOCManualStatuses.Date = СтрокаDOCsManualStatuses.Date;
	DOCManualStatuses.Status = СокрЛП(СтрокаDOCsManualStatuses.Status);
	DOCManualStatuses.User = СокрЛП(СтрокаDOCsManualStatuses.User);
	DOCManualStatuses.Comment = СокрЛП(СтрокаDOCsManualStatuses.Comment);
	
	Возврат DOCManualStatuses;
	
КонецФункции

Функция ЗаполнитьСтруктуруDOCsInvoices(СтрокаDOCsInvoices)
	
	DOCInvoices = ПолучитьОбъектXDTOLeg7("DOCInvoices");
	
	DOCInvoices.InvoiceNo = СокрЛП(СтрокаDOCsInvoices.InvoiceNo);
	DOCInvoices.GUIDRIET = Строка(СтрокаDOCsInvoices.InvoiceСсылка.УникальныйИдентификатор());
	DOCInvoices.GUIDSP = СокрЛП(СтрокаDOCsInvoices.GUIDSP);
	
	Возврат DOCInvoices;
	
КонецФункции

Функция ЗаполнитьСтруктуруDOCsParcels(СтрокаDOCsParcels)
	
	DOCParcels = ПолучитьОбъектXDTOLeg7("DOCParcels");
	
	DOCParcels.ParcelNo = СокрЛП(СтрокаDOCsParcels.ParcelNo);
	DOCParcels.GUIDRIET = Строка(СтрокаDOCsParcels.ParcelСсылка.УникальныйИдентификатор());
	DOCParcels.GUIDSP = СокрЛП(СтрокаDOCsParcels.GUIDSP);
	
	Возврат DOCParcels;
	
КонецФункции

Функция ЗаполнитьСтруктуруInvoiceLine(ДанныеШапкиInvoiceLine, УзелОбмена)
	
	InvoiceLine = ПолучитьОбъектXDTOLeg7("InvoiceLine");
	
	InvoiceLine.GUIDRIET = Строка(ДанныеШапкиInvoiceLine.ItemСсылка.УникальныйИдентификатор());
	InvoiceLine.GUIDSP = СокрЛП(ДанныеШапкиInvoiceLine.GUIDSP);
	InvoiceLine.Canceled = ДанныеШапкиInvoiceLine.Canceled;
	InvoiceLine.No = СокрЛП(ДанныеШапкиInvoiceLine.No);
	// { RGS LKhristyuk 5/10/2018 3:47:12 PM
	//InvoiceLine.Invoice = СокрЛП(ДанныеШапкиInvoiceLine.Invoice);
	Если Не ПустаяСтрока(ДанныеШапкиInvoiceLine.Invoice) Тогда
		InvoiceLine.Invoice = СокрЛП(ДанныеШапкиInvoiceLine.Invoice);
		// { RGS EParshina 02.11.2018 18:40:33 - S-I-0006204
		InvoiceLine.InvoiceGUIDRIET = Строка(ДанныеШапкиInvoiceLine.InvoiceReference.УникальныйИдентификатор());
		// } RGS EParshina 02.11.2018 18:40:33 - S-I-0006204
	КонецЕсли;
	// } RGS LKhristyuk 5/10/2018 3:47:12 PM
	
	// { RGS LKhristyuk 5/10/2018 5:42:27 PM
	Если Не ПустаяСтрока(ДанныеШапкиInvoiceLine.ExportRequest) Тогда
		InvoiceLine.ExportRequest = СокрЛП(ДанныеШапкиInvoiceLine.ExportRequest);
		InvoiceLine.ExportRequestGUIDRIET = Строка(ДанныеШапкиInvoiceLine.ExportRequestReference.УникальныйИдентификатор());
	КонецЕсли;
	// } RGS LKhristyuk 5/10/2018 5:42:27 PM
	
	InvoiceLine.LineNo = ДанныеШапкиInvoiceLine.LineNo;
	Если Не ПустаяСтрока(ДанныеШапкиInvoiceLine.PONo) Тогда
		InvoiceLine.PONo = СокрЛП(ДанныеШапкиInvoiceLine.PONo);
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеШапкиInvoiceLine.POLine) Тогда
		InvoiceLine.POLine = СокрЛП(ДанныеШапкиInvoiceLine.POLine);
	КонецЕсли;
	InvoiceLine.PartNo = СокрЛП(ДанныеШапкиInvoiceLine.PartNo);
	InvoiceLine.SN = СокрЛП(ДанныеШапкиInvoiceLine.SN);
	InvoiceLine.RAN = СокрЛП(ДанныеШапкиInvoiceLine.RAN);
	InvoiceLine.Catalog = СокрЛП(ДанныеШапкиInvoiceLine.Catalog);
	InvoiceLine.ImportReference = СокрЛП(ДанныеШапкиInvoiceLine.ImportReference);
	InvoiceLine.DescriptionEng = СокрЛП(ДанныеШапкиInvoiceLine.DescriptionEng);
	InvoiceLine.DescriptionRus = СокрЛП(ДанныеШапкиInvoiceLine.DescriptionRus);
	InvoiceLine.Qty = ДанныеШапкиInvoiceLine.Qty;
	InvoiceLine.UOM = СокрЛП(ДанныеШапкиInvoiceLine.UOM);
	InvoiceLine.UnitPrice = ДанныеШапкиInvoiceLine.UnitPrice;
	InvoiceLine.Currency = СокрЛП(ДанныеШапкиInvoiceLine.Currency);
	InvoiceLine.TotalPrice = ДанныеШапкиInvoiceLine.TotalPrice;
	InvoiceLine.SoldTo = СокрЛП(ДанныеШапкиInvoiceLine.SoldTo);
	InvoiceLine.AU = СокрЛП(ДанныеШапкиInvoiceLine.AU);
	InvoiceLine.ERPTreatment = СокрЛП(ДанныеШапкиInvoiceLine.ERPTreatment);
	InvoiceLine.Activity = СокрЛП(ДанныеШапкиInvoiceLine.Activity);
	InvoiceLine.CountryOfOrigin = СокрЛП(ДанныеШапкиInvoiceLine.CountryOfOrigin);
	InvoiceLine.Manufacturer = СокрЛП(ДанныеШапкиInvoiceLine.Manufacturer);
	InvoiceLine.HTC = СокрЛП(ДанныеШапкиInvoiceLine.HTC);
	InvoiceLine.PriorCCD = СокрЛП(ДанныеШапкиInvoiceLine.PriorCCD);
	InvoiceLine.NetWeight = ДанныеШапкиInvoiceLine.NetWeight;
	InvoiceLine.WeightUOM = СокрЛП(ДанныеШапкиInvoiceLine.WeightUOM);
	// { RGS VShamin 20.08.2015 13:58:10 - 
	//InvoiceLine.PSA = СокрЛП(ДанныеШапкиInvoiceLine.PSA);
	InvoiceLine.PSAContract = СокрЛП(ДанныеШапкиInvoiceLine.PSAContract);
	// } RGS VShamin 20.08.2015 13:58:10 - 
	InvoiceLine.PermanentTemporary = СокрЛП(ДанныеШапкиInvoiceLine.PermanentTemporary);
	InvoiceLine.PermitsRequired = (ДанныеШапкиInvoiceLine.PermitsRequired = Перечисления.YesNo.Yes);
	// { RGS VShamin 24.09.2015 12:06:37 - 
	InvoiceLine.COORequired = (ДанныеШапкиInvoiceLine.COORequired = Перечисления.YesNo.Yes);
	// } RGS VShamin 24.09.2015 12:06:37 - 
	InvoiceLine.Final = ДанныеШапкиInvoiceLine.Final;
	InvoiceLine.ImportLocal = ?(ДанныеШапкиInvoiceLine.LocalOnly, "Local", "Import");
	InvoiceLine.Shortage = ДанныеШапкиInvoiceLine.Shortage;
	InvoiceLine.EUCNotRequired = ДанныеШапкиInvoiceLine.EUCNotRequired;
	InvoiceLine.EUCRequested = ДанныеШапкиInvoiceLine.EUCRequested;
	InvoiceLine.EUCReceived = ДанныеШапкиInvoiceLine.EUCReceived;
	InvoiceLine.SCNo = СокрЛП(ДанныеШапкиInvoiceLine.SCNo);
	InvoiceLine.TNVED = СокрЛП(ДанныеШапкиInvoiceLine.TNVED);
	InvoiceLine.Segment = СокрЛП(ДанныеШапкиInvoiceLine.Segment);
	
	Возврат InvoiceLine;
	
КонецФункции

Функция ЗаполнитьСтруктуруShipment(ДанныеШапкиShipment, СтрокиShipmentDOCs, СтрокиShipmentOutOfComplianceReasons, CCA, УзелОбмена)
	
	Shipment = ПолучитьОбъектXDTOLeg7("Shipment");
	
	Shipment.GUIDRIET = Строка(ДанныеШапкиShipment.ShipmentСсылка.УникальныйИдентификатор());
	Shipment.GUIDSP = СокрЛП(ДанныеШапкиShipment.GUIDSP);
	Shipment.Canceled = ДанныеШапкиShipment.Canceled ИЛИ ДанныеШапкиShipment.CCA <> CCA;
	Shipment.No = СокрЛП(ДанныеШапкиShipment.No);
	Shipment.ProcessLevel = СокрЛП(ДанныеШапкиShipment.ProcessLevelКод);
	Shipment.GOLD = ДанныеШапкиShipment.GOLD;
	Shipment.Shipper = СокрЛП(ДанныеШапкиShipment.Shipper);
	Shipment.FreightForwarder = СокрЛП(ДанныеШапкиShipment.FreightForwarder);
	Shipment.HouseWB = СокрЛП(ДанныеШапкиShipment.HouseWB);
	Shipment.WB2 = СокрЛП(ДанныеШапкиShipment.WB2);
	Shipment.WB3 = СокрЛП(ДанныеШапкиShipment.WB3);
	Shipment.WB4 = СокрЛП(ДанныеШапкиShipment.WB4);
	Shipment.PiecesQty = ДанныеШапкиShipment.PiecesQty;
	Shipment.TotalWBWeight = ДанныеШапкиShipment.TotalWBWeight;
	Shipment.Freight = ДанныеШапкиShipment.Freight;
	Shipment.Urgency = СокрЛП(ДанныеШапкиShipment.Urgency);
	Shipment.ActualPOA = СокрЛП(ДанныеШапкиShipment.ActualPOA);
	Shipment.Coordinator = СокрЛП(ДанныеШапкиShipment.Coordinator);
	Shipment.ActionPriority = СокрЛП(ДанныеШапкиShipment.ActionPriority);
	Shipment.ETD = ДанныеШапкиShipment.ETD;
	Shipment.ATD = ДанныеШапкиShipment.ATD;
	Shipment.PreAlertETA = ДанныеШапкиShipment.PreAlertETA;
	Shipment.ETA = ДанныеШапкиShipment.ETA;
	Shipment.ATA = ДанныеШапкиShipment.ATA;
	Shipment.CollectedFromPort = ДанныеШапкиShipment.CollectedFromPort;
	Shipment.CurrentCargoStage = СокрЛП(ДанныеШапкиShipment.CurrentCargoStage);
	Shipment.PreAlert = ДанныеШапкиShipment.PreAlert;
	Shipment.DoxForCCA = ДанныеШапкиShipment.DoxForCCA;
	Shipment.DoxRcvd = ДанныеШапкиShipment.DoxRcvd;
	Shipment.PermitsRequested = ДанныеШапкиShipment.PermitsRequested;
	Shipment.PermitsObtained = ДанныеШапкиShipment.PermitsObtained;
	Shipment.InCustoms = ДанныеШапкиShipment.InCustoms;
	Shipment.Cleared = ДанныеШапкиShipment.Cleared;
	Shipment.CurrentDocumentStage = СокрЛП(ДанныеШапкиShipment.CurrentDocumentStage);
	Shipment.WithoutPreAlert = ДанныеШапкиShipment.WithoutPreAlert;
	Shipment.WithoutGreenLight = ДанныеШапкиShipment.WithoutGreenLight;
	Shipment.CurrentComment = СокрЛП(ДанныеШапкиShipment.CurrentComment);
	Shipment.CCACurrentComment = СокрЛП(ДанныеШапкиShipment.CCACurrentComment);
	Shipment.InfoOnHazardClasses = СокрЛП(ДанныеШапкиShipment.InfoOnHazardClasses);
	// { RGS AGorlenko 22.12.2015 16:18:35 - S-I-0001434
	Shipment.PreInspection = ДанныеШапкиShipment.PreInspection;
	Shipment.PreInspectionStart = ДанныеШапкиShipment.PreInspectionStart;
	Shipment.PreInspectionEnd = ДанныеШапкиShipment.PreInspectionEnd;
	// } RGS AGorlenko 22.12.2015 16:18:38 - S-I-0001434
	Shipment.Inspection = ДанныеШапкиShipment.Inspection;
	Shipment.InspectionStart = ДанныеШапкиShipment.InspectionStart;
	Shipment.InspectionEnd = ДанныеШапкиShipment.InspectionEnd;
	Shipment.CCAJobReference = СокрЛП(ДанныеШапкиShipment.CCAJobReference);
	Shipment.PermitsRequired = (ДанныеШапкиShipment.PermitsRequired = Перечисления.YesNo.Yes);
	Shipment.PSA = (ДанныеШапкиShipment.PSA = Перечисления.YesNo.Yes);
	Shipment.PSARequested = ДанныеШапкиShipment.PSARequested;
	Shipment.PSAReceived = ДанныеШапкиShipment.PSAReceived;
	Shipment.Completed = ДанныеШапкиShipment.Completed;
	Shipment.ConditionalRelease = ДанныеШапкиShipment.ConditionalRelease;
	Shipment.CCDNumber = СокрЛП(ДанныеШапкиShipment.CCDNumber);
	Shipment.CCDNumber = СокрЛП(ДанныеШапкиShipment.CCDNumber);
	
	Для каждого СтрокаShipmentDOCs Из СтрокиShipmentDOCs Цикл
		Shipment.DOCs.Добавить(ЗаполнитьСтруктуруShipmentDOCs(СтрокаShipmentDOCs));
	КонецЦикла;
	
	Для каждого СтрокаShipmentOutOfComplianceReasons Из СтрокиShipmentOutOfComplianceReasons Цикл
		Shipment.OutOfComplianceReasons.Добавить(ЗаполнитьСтруктуруShipmentOutOfComplianceReasons(СтрокаShipmentOutOfComplianceReasons));
	КонецЦикла;
	
	Возврат Shipment;
	
КонецФункции

Функция ЗаполнитьСтруктуруShipmentDOCs(СтрокаShipmentDOCs)
	
	ShipmentDOCs = ПолучитьОбъектXDTOLeg7("ShipmentDOCs");
	
	ShipmentDOCs.No = СокрЛП(СтрокаShipmentDOCs.No);
	ShipmentDOCs.GUIDRIET = Строка(СтрокаShipmentDOCs.DOCСсылка.УникальныйИдентификатор());
	ShipmentDOCs.GUIDSP = СокрЛП(СтрокаShipmentDOCs.GUIDSP);
	
	Возврат ShipmentDOCs;
	
КонецФункции

Функция ЗаполнитьСтруктуруShipmentOutOfComplianceReasons(СтрокаShipmentOutOfComplianceReasons)
	
	ShipmentOutOfComplianceReasons = ПолучитьОбъектXDTOLeg7("ShipmentOutOfComplianceReasons");
	
	ShipmentOutOfComplianceReasons.OutOfComplianceReason = СокрЛП(СтрокаShipmentOutOfComplianceReasons.OutOfComplianceReason);
	ShipmentOutOfComplianceReasons.Comment = СокрЛП(СтрокаShipmentOutOfComplianceReasons.Comment);
	
	Возврат ShipmentOutOfComplianceReasons;
	
КонецФункции

Функция ЗаполнитьСтруктуруPO(ДанныеШапкиPO, УзелОбмена)
	
	PO = ПолучитьОбъектXDTOLeg7("PO");
	
	PO.GUIDRIET = Строка(ДанныеШапкиPO.POСсылка.УникальныйИдентификатор());
	PO.GUIDSP = СокрЛП(ДанныеШапкиPO.GUIDSP);
	PO.Canceled = ДанныеШапкиPO.Canceled;
	PO.No = СокрЛП(ДанныеШапкиPO.No);
	PO.BORG = СокрЛП(ДанныеШапкиPO.BORG);
	PO.PODate = ДанныеШапкиPO.PODate;
	PO.ISUP = СокрЛП(ДанныеШапкиPO.ISUP);
	PO.Supplier = СокрЛП(ДанныеШапкиPO.Supplier);
	PO.SupplierCountry = СокрЛП(ДанныеШапкиPO.SupplierCountry);
	PO.ShiptoLabel = СокрЛП(ДанныеШапкиPO.ShiptoLabel);
	PO.RequisitionName = СокрЛП(ДанныеШапкиPO.RequisitionName);
	PO.SubmitDate = ДанныеШапкиPO.SubmitDate;
	PO.ShipTo = СокрЛП(ДанныеШапкиPO.ShipTo);
	PO.ShiptoCode = СокрЛП(ДанныеШапкиPO.ShiptoCode);
	PO.EUCNotRequired = ДанныеШапкиPO.EUCNotRequired;
	PO.EUCRequested = ДанныеШапкиPO.EUCRequested;
	PO.EUCReceived = ДанныеШапкиPO.EUCReceived;
	
	Возврат PO;
	
КонецФункции

Функция ЗаполнитьСтруктуруPOLine(ДанныеШапкиPOLine, УзелОбмена)
	
	POLine = ПолучитьОбъектXDTOLeg7("POLine");
	
	POLine.GUIDRIET = Строка(ДанныеШапкиPOLine.POLineСсылка.УникальныйИдентификатор());
	POLine.GUIDSP = СокрЛП(ДанныеШапкиPOLine.GUIDSP);
	POLine.Canceled = ДанныеШапкиPOLine.Canceled;
	POLine.No = СокрЛП(ДанныеШапкиPOLine.No);
	POLine.LineNo = ДанныеШапкиPOLine.LineNo;
	POLine.PartNo = СокрЛП(ДанныеШапкиPOLine.PartNo);
	POLine.PartDescription = СокрЛП(ДанныеШапкиPOLine.PartDescription);
	POLine.Qty = ДанныеШапкиPOLine.Qty;
	POLine.UOM = СокрЛП(ДанныеШапкиPOLine.UOM);
	POLine.UnitCost = ДанныеШапкиPOLine.UnitCost;
	POLine.Currency = СокрЛП(ДанныеШапкиPOLine.Currency);
	POLine.ExtendedCost = ДанныеШапкиPOLine.ExtendedCost;
	POLine.ExtendedCostUSD = ДанныеШапкиPOLine.ExtendedCostUSD;
	POLine.ERPTreatment = СокрЛП(ДанныеШапкиPOLine.ERPTreatment);
	POLine.AU = СокрЛП(ДанныеШапкиPOLine.AU);
	POLine.ActivityCode = СокрЛП(ДанныеШапкиPOLine.ActivityCode);
	POLine.TypeOfRequisition = СокрЛП(ДанныеШапкиPOLine.TypeOfRequisition);
	POLine.Commodity = СокрЛП(ДанныеШапкиPOLine.Commodity);
	POLine.CommodityType = СокрЛП(ДанныеШапкиPOLine.CommodityType);
	POLine.ShipMethod = СокрЛП(ДанныеШапкиPOLine.ShipMethod);
	POLine.ShippingInstructions = СокрЛП(ДанныеШапкиPOLine.ShippingInstructions);
	POLine.SpecialInstructions = СокрЛП(ДанныеШапкиPOLine.SpecialInstructions);
	POLine.SupplierPromisedDate = ДанныеШапкиPOLine.SupplierPromisedDate;
	POLine.GOLDReceiptDate = ДанныеШапкиPOLine.GOLDReceiptDate;
	POLine.GoodsReceiptDate = ДанныеШапкиPOLine.GoodsReceiptDate;
	POLine.DONo = СокрЛП(ДанныеШапкиPOLine.DONo);
	POLine.HTC = СокрЛП(ДанныеШапкиPOLine.HTC);
	POLine.UrgentFlag = СокрЛП(ДанныеШапкиPOLine.UrgentFlag);
	POLine.Status = СокрЛП(ДанныеШапкиPOLine.Status);
	POLine.CurrentRDD = ДанныеШапкиPOLine.CurrentRDD;
	POLine.SupplierRequiredDate = ДанныеШапкиPOLine.SupplierRequiredDate;
	POLine.CountryOfOrigin = СокрЛП(ДанныеШапкиPOLine.CountryOfOrigin);
	POLine.POGUID = Строка(ДанныеШапкиPOLine.POСсылка.УникальныйИдентификатор());
	POLine.PONo = СокрЛП(ДанныеШапкиPOLine.PONO);
	
	Возврат POLine;
	
КонецФункции

Функция ЗаполнитьСтруктуруBORG(ДанныеШапкиBORG, УзелОбмена, НастройкаОбмена)
	
	BORG = ПолучитьОбъектXDTOLeg7("BORG");
	
	//BORG.GUIDRIET = Строка(ДанныеШапкиBORG.BORGСсылка.УникальныйИдентификатор());
	BORG.Canceled = ДанныеШапкиBORG.Canceled;
	BORG.No = СокрЛП(ДанныеШапкиBORG.No);
	BORG.Description = СокрЛП(ДанныеШапкиBORG.Description);
	BORG.AUGUID = Строка(ДанныеШапкиBORG.DefaultAU.УникальныйИдентификатор());
	Если ДанныеШапкиBORG.DefaultWH = Справочники.Warehouses.UNKN И НастройкаОбмена.ЗаменятьСкладUNKN Тогда
		BORG.WarehouseGUID = Строка(НастройкаОбмена.ЗаменаСкладаUNKN.УникальныйИдентификатор());
	Иначе
		BORG.WarehouseGUID = Строка(ДанныеШапкиBORG.DefaultWH.УникальныйИдентификатор());
	КонецЕсли;
	BORG.LegalEntityGUID = ?(ЗначениеЗаполнено(ДанныеШапкиBORG.LegalEntity), Строка(ДанныеШапкиBORG.LegalEntity.УникальныйИдентификатор()), "");
	BORG.ParentCompanyGUID = Строка(ДанныеШапкиBORG.ParentCompany.УникальныйИдентификатор());
	
	Возврат BORG;
	
КонецФункции

Функция ЗаполнитьСтруктуруAU(ДанныеШапкиAU, УзелОбмена)
	
	AU = ПолучитьОбъектXDTOLeg7("AU");
	
	AU.GUIDRIET = Строка(ДанныеШапкиAU.AUСсылка.УникальныйИдентификатор());
	AU.Canceled = ДанныеШапкиAU.Canceled;
	AU.No = СокрЛП(ДанныеШапкиAU.No);
	AU.Description = СокрЛП(ДанныеШапкиAU.Description);
	
	Возврат AU;
	
КонецФункции

Функция ЗаполнитьСтруктуруWarehouse(ДанныеШапкиWarehouse, УзелОбмена)
	
	Warehouse = ПолучитьОбъектXDTOLeg7("Warehouse");
	
	Warehouse.GUIDRIET = Строка(ДанныеШапкиWarehouse.WarehouseСсылка.УникальныйИдентификатор());
	Warehouse.Canceled = ДанныеШапкиWarehouse.Canceled ИЛИ (НЕ ДанныеШапкиWarehouse.Warehouse И НЕ ДанныеШапкиWarehouse.Port);
	Warehouse.No = СокрЛП(ДанныеШапкиWarehouse.No);
	Warehouse.Description = СокрЛП(ДанныеШапкиWarehouse.Description);
	Warehouse.City = СокрЛП(ДанныеШапкиWarehouse.City);
	Warehouse.Address1 = СокрЛП(ДанныеШапкиWarehouse.Address1);
	Warehouse.Address2 = СокрЛП(ДанныеШапкиWarehouse.Address2);
	Warehouse.Address3 = СокрЛП(ДанныеШапкиWarehouse.Address3);
	Warehouse.AddressRus = СокрЛП(ДанныеШапкиWarehouse.AddressRus);
	Warehouse.ContactName = СокрЛП(ДанныеШапкиWarehouse.ContactName);
	Warehouse.ContactPhone = СокрЛП(ДанныеШапкиWarehouse.ContactPhone);
	Warehouse.ContactEMail = СокрЛП(ДанныеШапкиWarehouse.ContactEMail);
	
	Возврат Warehouse;
	
КонецФункции

Функция ЗаполнитьСтруктуруLegalEntity(ДанныеШапкиLegalEntity, УзелОбмена)
	
	LegalEntity = ПолучитьОбъектXDTOLeg7("LegalEntity");
	
	LegalEntity.GUIDRIET = Строка(ДанныеШапкиLegalEntity.LegalEntityСсылка.УникальныйИдентификатор());
	LegalEntity.Canceled = ДанныеШапкиLegalEntity.Canceled;
	LegalEntity.Description = СокрЛП(ДанныеШапкиLegalEntity.Description);
	LegalEntity.SoldToAddress = СокрЛП(ДанныеШапкиLegalEntity.SoldToAddress);
	LegalEntity.SoldToAddressRus = СокрЛП(ДанныеШапкиLegalEntity.SoldToAddressRus);
	LegalEntity.NameRus = СокрЛП(ДанныеШапкиLegalEntity.SoldToNameRus);
	
	Возврат LegalEntity;
	
КонецФункции

Функция ЗаполнитьСтруктуруEquipment(ДанныеШапкиEquipment, УзелОбмена)
	
	Equipment = ПолучитьОбъектXDTOLeg7("Equipment");
	
	Equipment.Canceled = ДанныеШапкиEquipment.Canceled;
	Equipment.No = СокрЛП(ДанныеШапкиEquipment.No);
	Equipment.EffectiveWeight = ДанныеШапкиEquipment.EffectiveWeight;
	Equipment.MOTList = СокрЛП(ДанныеШапкиEquipment.MOTList);
	
	Возврат Equipment;
	
КонецФункции

Функция ЗаполнитьСтруктуруServiceProvider(ДанныеШапкиServiceProvider, УзелОбмена)
	
	ServiceProvider = ПолучитьОбъектXDTOLeg7("ServiceProvider");
	
	ServiceProvider.Canceled = ДанныеШапкиServiceProvider.Canceled;
	ServiceProvider.No = СокрЛП(ДанныеШапкиServiceProvider.No);
	ServiceProvider.Description = СокрЛП(ДанныеШапкиServiceProvider.Description);
	
	Возврат ServiceProvider;
	
КонецФункции

Функция ЗаполнитьСтруктуруUser(ДанныеШапкиUser, УзелОбмена, НастрокаОбмена)
	
	User = ПолучитьОбъектXDTOLeg7("User");
	
	User.Canceled = ДанныеШапкиUser.Canceled ИЛИ ДанныеШапкиUser.CCA <> НастрокаОбмена.CCA;
	User.Alias = СокрЛП(ДанныеШапкиUser.Alias);
	User.FullName = СокрЛП(ДанныеШапкиUser.FullName);
	User.EMail = СокрЛП(ДанныеШапкиUser.EMail);
	
	Возврат User;
	
КонецФункции

// { RGS VShamin 20.07.2015 23:19:52 - S-I-0001168
Функция ЗаполнитьСтруктуруParentCompany(ДанныеШапкиParentCompany, УзелОбмена)
	
	ParentCompany = ПолучитьОбъектXDTOLeg7("ParentCompany");
	
	ParentCompany.GUIDRIET = Строка(ДанныеШапкиParentCompany.ParentCompanyСсылка.УникальныйИдентификатор());
	ParentCompany.Canceled = ДанныеШапкиParentCompany.Canceled;
	ParentCompany.No = СокрЛП(ДанныеШапкиParentCompany.No);
	ParentCompany.Description = СокрЛП(ДанныеШапкиParentCompany.Description);
	ParentCompany.NameRus = СокрЛП(ДанныеШапкиParentCompany.ParentCompanyNameRus);
	
	Возврат ParentCompany;
	
КонецФункции // } RGS VShamin 20.07.2015 23:19:52 - S-I-0001168

// { RGS LKhristyuk 4/24/2018 5:11:07 PM
Функция ЗаполнитьСтруктуруExportRequest(ДанныеШапкиExportRequest, УзелОбмена, CCA)
	
	ExportRequest = ПолучитьОбъектXDTOLeg7("ExportRequest");
	
	ExportRequest.GUIDRIET = Строка(ДанныеШапкиExportRequest.GUIDRIET.УникальныйИдентификатор());
	ExportRequest.GUIDSP = СокрЛП(ДанныеШапкиExportRequest.GUIDSP);
	ExportRequest.No = СокрЛП(ДанныеШапкиExportRequest.No);
	ExportRequest.Canceled = ДанныеШапкиExportRequest.Canceled ИЛИ ДанныеШапкиExportRequest.CCA <> CCA;
	ExportRequest.FromCountry = СокрЛП(ДанныеШапкиExportRequest.FromCountry);
	ExportRequest.Company = СокрЛП(ДанныеШапкиExportRequest.Company);
	ExportRequest.FromLegalEntity = СокрЛП(ДанныеШапкиExportRequest.FromLegalEntity);
	ExportRequest.Segment = СокрЛП(ДанныеШапкиExportRequest.Segment);
	ExportRequest.BORG = СокрЛП(ДанныеШапкиExportRequest.BORG);
	ExportRequest.ExportMode = СокрЛП(ДанныеШапкиExportRequest.ExportMode);
	ExportRequest.Urgency = СокрЛП(ДанныеШапкиExportRequest.Urgency);
	ExportRequest.AcceptedBySpecialist = ДанныеШапкиExportRequest.AcceptedBySpecialist;
	ExportRequest.ExportSpecialist = СокрЛП(ДанныеШапкиExportRequest.ExportSpecialist);
	ExportRequest.ProcessLevel = СокрЛП(ДанныеШапкиExportRequest.ProcessLevelКод);
	ExportRequest.CCAGLRequested = ДанныеШапкиExportRequest.CCAGLRequested;
	ExportRequest.CCAGLReceived = ДанныеШапкиExportRequest.CCAGLReceived;
	ExportRequest.SourceDocsAvailable = ДанныеШапкиExportRequest.SourceDocsAvailable;
	ExportRequest.PermitsRequired = ДанныеШапкиExportRequest.PermitsRequired;
	ExportRequest.Incoterms = СокрЛП(ДанныеШапкиExportRequest.Incoterms);
	ExportRequest.ConsigneeGLRequested = ДанныеШапкиExportRequest.ConsigneeGLRequested;
	ExportRequest.ConsigneeGLReceived = ДанныеШапкиExportRequest.ConsigneeGLReceived;
	ExportRequest.ShippingInvoiceReady = ДанныеШапкиExportRequest.ShippingInvoiceReady;
	ExportRequest.FumigationRequired = ДанныеШапкиExportRequest.FumigationRequired;
	// { RGS DKazanskiy 09.10.2018 10:39:09 - S-I-0005759	
	//ExportRequest.FumigationCertificateRequired = ДанныеШапкиExportRequest.FumigationCertificateRequired;
	//ExportRequest.FumigationDone = ДанныеШапкиExportRequest.FumigationDone;
	ExportRequest.PermitsRequested = ДанныеШапкиExportRequest.PermitsRequested;
	ExportRequest.PermitsObtained = ДанныеШапкиExportRequest.PermitsObtained;
	// } RGS DKazanskiy 09.10.2018 10:39:22 - S-I-0005759
	ExportRequest.POD = СокрЛП(ДанныеШапкиExportRequest.POD);
	ExportRequest.POA = СокрЛП(ДанныеШапкиExportRequest.POA);
	ExportRequest.InternationalMOT = СокрЛП(ДанныеШапкиExportRequest.InternationalMOT);
	ExportRequest.DualUse = ДанныеШапкиExportRequest.DualUse;
	ExportRequest.Version = ДанныеШапкиExportRequest.Version;
	
	Возврат ExportRequest;
	
КонецФункции // } RGS LKhristyuk 4/24/2018 5:11:07 PM 

// { RGS LKhristyuk 4/26/2018 4:49:53 PM
Функция ЗаполнитьСтруктуруExportShipment(ДанныеШапкиExportShipment, СтрокиExportShipmentExportRequests, УзелОбмена, CCA)

	ExportShipment = ПолучитьОбъектXDTOLeg7("ExportShipment");
	ExportShipment.GUIDRIET = Строка(ДанныеШапкиExportShipment.GUIDRIET.УникальныйИдентификатор());
	ExportShipment.GUIDSP = СокрЛП(ДанныеШапкиExportShipment.GUIDSP);
	ExportShipment.No = СокрЛП(ДанныеШапкиExportShipment.No);
	ExportShipment.Canceled = ДанныеШапкиExportShipment.Canceled ИЛИ ДанныеШапкиExportShipment.CCA <> CCA;
	ExportShipment.SubmittedToCustoms = ДанныеШапкиExportShipment.SubmittedToCustoms;
	ExportShipment.ReleasedFromCustoms = ДанныеШапкиExportShipment.ReleasedFromCustoms;
	ExportShipment.CCDNumber = СокрЛП(ДанныеШапкиExportShipment.CCDNumber);
	ExportShipment.POD = СокрЛП(ДанныеШапкиExportShipment.POD);
	ExportShipment.POA = СокрЛП(ДанныеШапкиExportShipment.POA);
	ExportShipment.InternationalMOT = СокрЛП(ДанныеШапкиExportShipment.InternationalMOT);
	ExportShipment.InternationalETD = ДанныеШапкиExportShipment.InternationalETD;
	ExportShipment.InternationalATD = ДанныеШапкиExportShipment.InternationalATD;
	ExportShipment.PreAlertSent = ДанныеШапкиExportShipment.PreAlertSent;
	ExportShipment.InternationalETA = ДанныеШапкиExportShipment.InternationalETA;
	ExportShipment.InternationalATA = ДанныеШапкиExportShipment.InternationalATA;
	ExportShipment.InternationalWB1 = СокрЛП(ДанныеШапкиExportShipment.InternationalWB1);
	ExportShipment.InternationalWB2 = СокрЛП(ДанныеШапкиExportShipment.InternationalWB2);
	ExportShipment.InternationalWB3 = СокрЛП(ДанныеШапкиExportShipment.InternationalWB3);
	ExportShipment.InternationalWB4 = СокрЛП(ДанныеШапкиExportShipment.InternationalWB4);
	ExportShipment.ExportRequestsNo = СокрЛП(ДанныеШапкиExportShipment.ExportRequestsNo);
	ExportShipment.ExportSpecialist = СокрЛП(ДанныеШапкиExportShipment.ExportSpecialist);
	ExportShipment.ProcessLevel = СокрЛП(ДанныеШапкиExportShipment.ProcessLevelКод);
	ExportShipment.NoticeOfDeliveryDate = ДанныеШапкиExportShipment.NoticeOfDeliveryDate;
	
	Для каждого СтрокаExportShipmentExportRequests Из СтрокиExportShipmentExportRequests Цикл
		ExportShipment.ExportRequests.Добавить(ЗаполнитьСтруктуруExportShipmentExportRequests(СтрокаExportShipmentExportRequests));
	КонецЦикла;
	
	Возврат ExportShipment;
	
КонецФункции // } RGS LKhristyuk 4/26/2018 4:49:53 PM 

Функция ЗаполнитьСтруктуруExportShipmentExportRequests(СтрокаExportShipmentExportRequests)
	
	ExportShipmentExportRequests = ПолучитьОбъектXDTOLeg7("ExportShipmentExportRequests");
	
	ExportShipmentExportRequests.ExportRequestNo = СокрЛП(СтрокаExportShipmentExportRequests.No);
	ExportShipmentExportRequests.GUIDRIET = Строка(СтрокаExportShipmentExportRequests.ExportRequestСсылка.УникальныйИдентификатор());
	ExportShipmentExportRequests.GUIDSP = СокрЛП(СтрокаExportShipmentExportRequests.GUIDSP);
	
	Возврат ExportShipmentExportRequests;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьURIПространстваИменLeg7() 
	
	Возврат "http://www.slb.com/RIET/Leg7new";
	
КонецФункции

Функция ПолучитьОбъектXDTOLeg7(Имя)
	
	// Конструирует объект XDTO типа ИмяТипа с помощью ФабрикиXDTO
	
	ТипПоля = ФабрикаXDTO.Тип(ПолучитьURIПространстваИменLeg7(), Имя);
	Возврат ПолучитьОбъектXDTO(ФабрикаXDTO, ПолучитьURIПространстваИменLeg7(), Имя);
	
КонецФункции

Функция ПолучитьОбъектXDTO(ИспользуемаяФабрикаXDTO, URIПространстваИмен, Имя) 
	
	// Конструирует объект XDTO типа Имя с помощью ФабрикиXDTO и URIПространстваИмен
	
	ТипПоля = ИспользуемаяФабрикаXDTO.Тип(URIПространстваИмен, Имя);
	Возврат ИспользуемаяФабрикаXDTO.Создать(ТипПоля);
	
КонецФункции

Функция ПолучитьРО(ItemСсылка, PONo, ДанныеБоргов)
	
	Если ДанныеБоргов = Неопределено Тогда
		Возврат PONo;
	КонецЕсли;
	
	СтрокаБорга = ДанныеБоргов.Найти(ItemСсылка, "ItemСсылка");
	Если СтрокаБорга = Неопределено Тогда
		Возврат PONo;
	ИначеЕсли СтрокаБорга.ProcessLevel <> Справочники.ProcessLevels.RUSM Тогда
		Возврат PONo;
	КонецЕсли;
	
	BORGКод = СокрЛП(СтрокаБорга.BORGКод);
	ДлинаКодаБорга = СтрДлина(BORGКод);
	
	Если Лев(PONo, ДлинаКодаБорга) = BORGКод Тогда
		Возврат PONo;
	Иначе
		Возврат BORGКод + " " + PONo;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеБоргов(МассивАйтемов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.Ссылка КАК ItemСсылка,
	|	ВЫБОР
	|		КОГДА НЕ ЗаявкиНаЗакупку.БОРГ ЕСТЬ NULL 
	|				И ЗаявкиНаЗакупку.БОРГ <> ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка)
	|			ТОГДА ЗаявкиНаЗакупку.БОРГ
	|		КОГДА НЕ BORGsOfNonPOItems.BORG ЕСТЬ NULL 
	|			ТОГДА BORGsOfNonPOItems.BORG
	|		КОГДА НЕ BORGs.Ссылка ЕСТЬ NULL 
	|			ТОГДА BORGs.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(BORGs1.Ссылка, ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка))
	|	КОНЕЦ КАК BORG,
	|	ВЫБОР
	|		КОГДА НЕ ЗаявкиНаЗакупку.БОРГ ЕСТЬ NULL 
	|				И ЗаявкиНаЗакупку.БОРГ <> ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка)
	|			ТОГДА ЗаявкиНаЗакупку.БОРГ.Код
	|		КОГДА НЕ BORGsOfNonPOItems.BORG ЕСТЬ NULL 
	|			ТОГДА BORGsOfNonPOItems.BORG.Код
	|		КОГДА НЕ BORGs.Ссылка ЕСТЬ NULL 
	|			ТОГДА BORGs.Код
	|		ИНАЧЕ ЕСТЬNULL(BORGs1.Код, ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка))
	|	КОНЕЦ КАК BORGКод,
	|	СтрокиИнвойса.Инвойс.ProcessLevel КАК ProcessLevel
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs
	|		ПО (НЕ BORGs.ПометкаУдаления)
	|			И (ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 4) = BORGs.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs1
	|		ПО (НЕ BORGs1.ПометкаУдаления)
	|			И (ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 2) = BORGs1.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.BORGsOfNonPOItems КАК BORGsOfNonPOItems
	|		ПО СтрокиИнвойса.Ссылка = BORGsOfNonPOItems.Item
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
	|		ПО СтрокиИнвойса.НомерЗаявкиНаЗакупку = ЗаявкиНаЗакупку.Код
	|			И (НЕ ЗаявкиНаЗакупку.ПометкаУдаления)
	|ГДЕ
	|	СтрокиИнвойса.Ссылка В(&МассивАйтемов)";
	
	Запрос.УстановитьПараметр("МассивАйтемов", МассивАйтемов);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ItemСсылка");
	
	Возврат Результат;
	
КонецФункции

// { RGS VShamin 20.07.2015 23:19:52 - обмен шаблонами и письмами
Функция ЗаполнитьСтруктуруEMailTemplates(ДанныеШапкиEMailTemplates, УзелОбмена)
	
	EMailTemplates = ПолучитьОбъектXDTOLeg7("EMailTemplate");
	
	EMailTemplates.GUIDRIET = Строка(ДанныеШапкиEMailTemplates.EMailTemplatesСсылка.УникальныйИдентификатор());
	EMailTemplates.GUIDSP = СокрЛП(ДанныеШапкиEMailTemplates.GUIDSP);
	EMailTemplates.Canceled = ДанныеШапкиEMailTemplates.Canceled;
	EMailTemplates.No = СокрЛП(ДанныеШапкиEMailTemplates.No);
	EMailTemplates.User = СокрЛП(ДанныеШапкиEMailTemplates.User);
	EMailTemplates.POD = СокрЛП(ДанныеШапкиEMailTemplates.POD);
	EMailTemplates.ConsignTo = СокрЛП(ДанныеШапкиEMailTemplates.ConsignTo);
	EMailTemplates.Subject = СокрЛП(ДанныеШапкиEMailTemplates.Subject);
	EMailTemplates.Body = СокрЛП(ДанныеШапкиEMailTemplates.Body);
	
	Возврат EMailTemplates;
	
КонецФункции // } RGS VShamin 20.07.2015 23:19:52 - обмен шаблонами и письмами

// { RGS VShamin 20.07.2015 23:19:52 - обмен шаблонами и письмами
Функция ЗаполнитьСтруктуруEMails(ДанныеШапкиEMails, УзелОбмена)
	
	EMails = ПолучитьОбъектXDTOLeg7("EMail");
	
	EMails.GUIDRIET = Строка(ДанныеШапкиEMails.EMailsСсылка.УникальныйИдентификатор());
	EMails.GUIDSP = СокрЛП(ДанныеШапкиEMails.GUIDSP);
	EMails.DOCGUID = Строка(ДанныеШапкиEMails.DOC.УникальныйИдентификатор());
	EMails.Subject = СокрЛП(ДанныеШапкиEMails.Subject);
	EMails.Body = СокрЛП(ДанныеШапкиEMails.Body);
	EMails.ReplyTo = СокрЛП(ДанныеШапкиEMails.ReplyTo);
	
	ТЧRecipients = ДанныеШапкиEMails.EMailsСсылка.Recipients;
	Для каждого ТекСтрока Из ТЧRecipients Цикл
		EMails.Recipient.Добавить(СокрЛП(ТекСтрока.Recipient));
	КонецЦикла;
	
	Возврат EMails;
	
КонецФункции // } RGS VShamin 20.07.2015 23:19:52 - обмен шаблонами и письмами
