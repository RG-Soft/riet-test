
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// отбор только непроведенные
	ЗначениеОтбора = ТолькоНепроведенные;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ПартииInventory.Отбор,
	"Проведен",
	ВидСравненияКомпоновкиДанных.Равно,
	Не ЗначениеОтбора,,ЗначениеОтбора);   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекстВопроса = "Вы действительно хотите закрыть ""Подбор Inventory партий""?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, "Закрытие формы подбора Inventory партий");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда //17.09.2012 пахоменков. В тонком клиенте это выдаст ошибку.
&НаКлиенте
Процедура SegmentПриИзменении(Элемент)
	
Использование = ?(Segment = Справочники.Сегменты.ПустаяСсылка(), Ложь, Истина);
	
РГСофтКлиентСервер.УстановитьЭлементОтбора(
		ПартииInventory.Отбор,
		"Segment",
		Segment,
		ВидСравненияКомпоновкиДанных.Равно,,Использование);
		
РГСофтКлиентСервер.УстановитьЭлементОтбора(
		ОстаткиInventory.Отбор,
		"Segment",
		Segment,
		ВидСравненияКомпоновкиДанных.Равно,,Использование);
	
КонецПроцедуры
 #КонецЕсли


// СПИСОК ДОКУМЕНТОВ INVENTORY ПАРТИЯ

&НаКлиенте
Процедура СоздатьПартииЗаПериод(Команда)
	
	СоздатьПартииЗаПериодНаСервере();
	Элементы.ПартииInventory.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПартииЗаПериодНаСервере()
	
	НачПериода = Элементы.ПартииInventory.Период.ДатаНачала;
	КонПериода = ?(Элементы.ПартииInventory.Период.ДатаОкончания = Дата(1,1,1), КонецДня(ТекущаяДата()), 
	                                                                            Элементы.ПартииInventory.Период.ДатаОкончания);
	
	Если НачПериода = Дата(1,1,1) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не установлена дата начала создания партий Inventory!",,
		                                                  "ПартииInventoryУстановитьИнтервал");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.Текст = "ВЫБРАТЬ
	               |	InventoryПоступление.Ссылка
	               |ПОМЕСТИТЬ ВТДокументыInventory
	               |ИЗ
	               |	Документ.InventoryПоступление КАК InventoryПоступление
	               |ГДЕ
	               |	InventoryПоступление.Дата >= &НачПериода
	               |	И InventoryПоступление.Дата <= &КонПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК Проводка,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Описание,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.PoNumber
	               |ПОМЕСТИТЬ ВТСправочникПроводки
	               |ИЗ
	               |	Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок КАК ПроводкиDSSДеталейСчетовКнигиПокупок,
	               |	ВТДокументыInventory КАК ВТДокументыInventory
	               |ГДЕ
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Документ В
	               |			(ВЫБРАТЬ
	               |				ВТДокументыInventory.Ссылка
	               |			ИЗ
	               |				ВТДокументыInventory)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryTangibleAssetsCostsОстатки.FiscalSumОстаток КАК FiscalSum,
	               |	InventoryTangibleAssetsCostsОстатки.ManagementSumОстаток КАК ManagementSum,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Описание КАК ItemCode,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.PoNumber КАК PoNumber,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.AU КАК AU,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Период КАК Период,
	               |	InventoryTangibleAssetsCostsОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.InventoryTangibleAssetsCosts.Остатки(
	               |			,
	               |			ПроводкаДеталейСКП В
	               |				(ВЫБРАТЬ
	               |					ВТСправочникПроводки.Проводка
	               |				ИЗ
	               |					ВТСправочникПроводки)) КАК InventoryTangibleAssetsCostsОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП,
	               |	InventoryTangibleAssetsCostsОстатки.FiscalSumОстаток КАК FiscalSum,
	               |	InventoryTangibleAssetsCostsОстатки.ManagementSumОстаток КАК ManagementSum,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Описание КАК ItemCode,
	               |	InventoryTangibleAssetsCostsОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.InventoryTangibleAssetsCosts.Остатки(
	               |			,
	               |			ПроводкаДеталейСКП.System = ""AP""
	               |				И ПроводкаДеталейСКП В
	               |					(ВЫБРАТЬ
	               |						ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК Проводка
	               |					ИЗ
	               |						Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок КАК ПроводкиDSSДеталейСчетовКнигиПокупок ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСправочникПроводки
	               |							ПО
	               |								ПроводкиDSSДеталейСчетовКнигиПокупок.PoNumber = ВТСправочникПроводки.PoNumber
	               |									И ПроводкиDSSДеталейСчетовКнигиПокупок.Описание = ВТСправочникПроводки.Описание
	               |									И ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка <> ВТСправочникПроводки.Проводка)) КАК InventoryTangibleAssetsCostsОстатки";
		
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаТекДок = Результат[2].Выбрать();
    ВыборкаТекДокСКП = Результат[3].Выгрузить();
	
	СтруктураItemCode = Новый Структура("ItemCode");
			
	Пока ВыборкаТекДок.Следующий() Цикл
		
		СтруктураItemCode.Вставить("ItemCode", ВыборкаТекДок.ItemCode);
		ЗначениеFiscalSum = Документы.InventoryПоступление.ПолучитьFiscalSumПоДокументуInventoryПартия(
														   ВыборкаТекДокСКП.НайтиСтроки(СтруктураItemCode), ВыборкаТекДок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНепроведенныеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ПартииInventory.Отбор,
		"Проведен",
		Не ТолькоНепроведенные,
		ВидСравненияКомпоновкиДанных.Равно,,ТолькоНепроведенные);
	
КонецПроцедуры
	  	
&НаКлиенте
Процедура ПартииInventoryПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрок();
	  	ОбщаяДельтаFiscalSum = ПолучитьОбщуюДельтуFiscalSum(МассивВыделенныхСтрок);
		ОбновитьОстатки();
	КонецЕсли;
        	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхСтрок()
	
	МассивВыделенныхСтрок = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПартииInventory.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока.Ключ);
		иначе
			МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыделенныхСтрок;
				         	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбщуюДельтуFiscalSum(МассивВыделенныхСтрок)
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("МассивВыделенныхСтрок", МассивВыделенныхСтрок);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	InventoryПартия.Дельта КАК Дельта
	               |ИЗ
	               |	Документ.InventoryПартия КАК InventoryПартия
	               |ГДЕ
	               |	(InventoryПартия.PoNumber В (&МассивВыделенныхСтрок)
	               |			ИЛИ InventoryПартия.Ссылка В (&МассивВыделенныхСтрок))
	               |ИТОГИ
	               |	СУММА(Дельта)
	               |ПО
	               |	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	
		ОбщаяДельтаFiscalSum = Выборка.Дельта;
	
	КонецЦикла;
	
	Возврат ОбщаяДельтаFiscalSum;
	         	
КонецФункции

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда //17.09.2012 пахоменков. В тонком клиенте это выдаст ошибку.
&НаКлиенте
Процедура ПартииInventoryВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		PoNumber = СокрЛП(Элемент.ТекущиеДанные.PoNumber);
		PO = Справочники.ЗаявкиНаЗакупку.НайтиПоКоду(PoNumber);
		
		Если Не PO = Справочники.ЗаявкиНаЗакупку.ПустаяСсылка() Тогда 
			ОткрытьЗначение(Po);
		КонецЕсли;
		
	ИначеЕсли  ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.InventoryПартия") Тогда 
		
		ОткрытьЗначение(Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры
 #КонецЕсли

// ТАБЛИЧНАЯ ЧАСТЬ ДОКУМЕНТА

&НаКлиенте
Процедура УдалитьИЗТЧПартии(Команда)
	
	УдалитьСтрокиИЗТЧПартии();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИЗТЧПартии()
	
	ВыделенныеСтроки = Элементы.ПартииInventoryПроводки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() Тогда 
		
		ДокСсылка = Элементы.ПартииInventory.ТекущаяСтрока;
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		
		Для Каждого Стр из ВыделенныеСтроки Цикл 
			ДокОбъект.Проводки.Удалить(Стр);
		КонецЦикла;
		
		InventoryСервер.ЗаписатьДокументВВыбранномРежиме(ДокОбъект, РежимЗаписиДокумента.ОтменаПроведения);
		
		Элементы.ПартииInventory.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПартииInventoryПроводкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииInventoryПроводкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДобавитьВыделенныеСтрокиВПартиюInventory();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииInventoryПроводкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПроводкаДеталейСКП);
	
КонецПроцедуры


// ОСТАТКИ INVENTORY

&НаКлиенте
Процедура ОтборОстатковПриИзменении(Элемент)
	
	ОбновитьОстатки();
	
КонецПроцедуры

&НаКлиенте                                                                                  
Процедура ОбновитьОстатки()
	     		
	Если ОтборОстатков = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОстаткиInventory.Отбор,"PoNumber");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОстаткиInventory.Отбор,"ItemCode");
	Иначе
		
		Если ОтборОстатков = 1 Тогда 
			 ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОстаткиInventory.Отбор,"ItemCode");
		КонецЕсли;
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрок();	
		СтруктураОтбора = ПолучитьОстаткиПоPoNumberИЛИДокументу(МассивВыделенныхСтрок, Истина,ОтборОстатков = 2);  
		                                                            		
		Для каждого ЭлементСтруктурыОтбора Из СтруктураОтбора Цикл
			
			РГСофтКлиентСервер.УстановитьЭлементОтбора(
				ОстаткиInventory.Отбор,
				ЭлементСтруктурыОтбора.Ключ,
				ЭлементСтруктурыОтбора.Значение,
				ВидСравненияКомпоновкиДанных.ВСписке);
					
		КонецЦикла; 
	
	КонецЕсли;
				      		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОстаткиПоPoNumberИЛИДокументу(МассивВыделенныхСтрок, ОтборПоPO, ОтборПоItemCode)
	
	СтруктураОтбора = Новый Структура();
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("МассивВыделенныхСтрок", МассивВыделенныхСтрок);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	InventoryПартия.PoNumber,
	               |	InventoryПартия.ItemCode
	               |ИЗ
	               |	Документ.InventoryПартия КАК InventoryПартия
	               |ГДЕ
	               |	(InventoryПартия.PoNumber В (&МассивВыделенныхСтрок)
	               |			ИЛИ InventoryПартия.Ссылка В (&МассивВыделенныхСтрок))";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	     	
	Если ОтборПоPO Тогда 
		СтруктураОтбора.Вставить("PoNumber", Результат.ВыгрузитьКолонку("PoNumber"));
	КонецЕсли;
	
	Если ОтборПоItemCode Тогда 
		СтруктураОтбора.Вставить("ItemCode", Результат.ВыгрузитьКолонку("ItemCode"));
	КонецЕсли;
	
	Возврат СтруктураОтбора;
       	         	
КонецФункции

&НаКлиенте
Процедура ОстаткиInventoryВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПроводкаДеталейСКП);
	
КонецПроцедуры


// ПЕРЕТАСКИВНИЕ СТРОК

&НаКлиенте
Процедура ДобавитьВПартиюInventory(Команда)
	
   ДобавитьВыделенныеСтрокиВПартиюInventory();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделенныеСтрокиВПартиюInventory()
	
   ВыделенныеСтроки = Элементы.ОстаткиInventory.ВыделенныеСтроки;
    
   Если ВыделенныеСтроки.Количество() Тогда
		
		ДокСсылкаInventoryПартия = Элементы.ПартииInventory.ВыделенныеСтроки[0];
		
		Если ТипЗнч(ДокСсылкаInventoryПартия) = Тип("ДокументСсылка.InventoryПартия") Тогда 
			
			МассивСтрок = Новый Массив;
			Для Каждого Стр из ВыделенныеСтроки цикл
				МассивСтрок.Добавить(Элементы.ОстаткиInventory.ДанныеСтроки(Стр)); 
			КонецЦикла;
			
			ДобавитьВыделенныеСтрокиВТабличнуюЧасть(МассивСтрок, ДокСсылкаInventoryПартия);
			
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран документ для добавления строки в табличную часть!",,
			                                                  "ПартииInventory");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыделенныеСтрокиВТабличнуюЧасть(МассивСтрок, ДокСсылка)

	ДокОбъектInventoryПартия = ДокСсылка.ПолучитьОбъект();
	
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		НоваяСтрока = ДокОбъектInventoryПартия.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
	КонецЦикла;
	
	InventoryСервер.ЗаписатьДокументВВыбранномРежиме(ДокОбъектInventoryПартия, РежимЗаписиДокумента.ОтменаПроведения);
	
	Элементы.ПартииInventory.Обновить();
	
КонецПроцедуры


