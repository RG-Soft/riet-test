
///////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПИСЕМ

// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
//Функция ОбработатьПисьма(Письма, ИнтернетПочта, АдресОтправителя) Экспорт
Функция ОбработатьПисьма(Письма, ДанныеДляОтправкиОтвета) Экспорт
// } RGS VChaplygin 15.04.2016 8:42:40 - Добавим аварийный почтовый аккаунт
	
	// Обрабатывает переданные письма
	// Возвращает массив обработанных писем - как успешно, так и нет. 
	// Логика обмена изменениями позволяет не загружать повторно неуспешно обработанные сообщения
	// ИнтернетПочта и АдресОтправителя нужны для отправки ответа
	
	// { RGS AGorlenko 02.12.2015 17:37:36 - оптимизация загрузки
	МаксимальныеДатыСообщений = Новый Соответствие;
	Для каждого Письмо Из Письма Цикл
		Если Не ТемаПисьмаLeg7Report(Письмо.Тема) Тогда
			Продолжить;
		КонецЕсли;
		АдресСервисПровайдера = ?(ТипЗнч(Письмо.Отправитель) = Тип("ИнтернетПочтовыйАдрес"), Письмо.Отправитель.Адрес, Письмо.Отправитель);
		Если МаксимальныеДатыСообщений[АдресСервисПровайдера] = Неопределено Тогда
			МаксимальныеДатыСообщений.Вставить(АдресСервисПровайдера, Письмо.ДатаОтправления);
		КонецЕсли;
		Если Письмо.ДатаОтправления > МаксимальныеДатыСообщений[АдресСервисПровайдера] Тогда
			МаксимальныеДатыСообщений[АдресСервисПровайдера] = Письмо.ДатаОтправления;
		КонецЕсли;
	КонецЦикла;
	// } RGS AGorlenko 02.12.2015 17:39:55 - оптимизация загрузки
	
	ОбработанныеПисьма = Новый Массив;
	
	Для Каждого Письмо Из Письма Цикл
		
		Если Не Обработки.PullReportsFromServiceProvidersEmails.ТемаПисьмаLeg7Report(Письмо.Тема) Тогда
			Продолжить;
		КонецЕсли;
		
		// Письма должны обрабатываться независимо
		// Если при обработке письма случилась ошибка - это не должно повлиять на другое письмо
		
		// { RGS AGorlenko 02.12.2015 17:52:16 - оптимизация загрузки
		АдресСервисПровайдера = ?(ТипЗнч(Письмо.Отправитель) = Тип("ИнтернетПочтовыйАдрес"), Письмо.Отправитель.Адрес, Письмо.Отправитель);
		Если МаксимальныеДатыСообщений[АдресСервисПровайдера] = Письмо.ДатаОтправления Тогда
		// } RGS AGorlenko 02.12.2015 17:52:18 - оптимизация загрузки
		
			Попытка
				
				// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
				//ОбработатьПисьмо(Письмо, ИнтернетПочта, АдресОтправителя);
				ОбработатьПисьмо(Письмо, ДанныеДляОтправкиОтвета);
				// } RGS VChaplygin 15.04.2016 8:42:40 - Добавим аварийный почтовый аккаунт
				
			Исключение
									
				// Залоггируем ошибку, чтобы получить ее по е-mail
				// { RGS vchaplygin 26.04.2018 8:29:29 - Говнище генерит в логах
				//РГСофт.СообщитьИЗалоггировать(
				//	"Failed to process incoming e-mail " + Письмо.Идентификатор[0],
				//	УровеньЖурналаРегистрации.Ошибка,
				//	Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
				//	Неопределено,
				//	ОписаниеОшибки());
				РГСофт.СообщитьИЗалоггировать(
					"Failed to process incoming e-mail. PullReportsFromServiceProvidersEmails",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
					Неопределено,
					"Failed to process incoming e-mail: " + Письмо.Идентификатор[0] + "
						|" + ОписаниеОшибки());
				// } RGS vchaplygin 26.04.2018 8:29:44 - Говнище генерит в логах
				
			КонецПопытки;
			
		// { RGS AGorlenko 02.12.2015 17:52:16 - оптимизация загрузки
		КонецЕсли;
		// } RGS AGorlenko 02.12.2015 17:52:18 - оптимизация загрузки
			
		ОбработанныеПисьма.Добавить(Письмо);
		
	КонецЦикла;
	
	Возврат ОбработанныеПисьма;
	
КонецФункции

// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
//Процедура ОбработатьПисьмо(Письмо, ИнтернетПочта, АдресОтправителя)
Процедура ОбработатьПисьмо(Письмо, ДанныеДляОтправкиОтвета)
// } RGS VChaplygin 15.04.2016 8:42:40 - Добавим аварийный почтовый аккаунт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Время начала: " + ТекущаяДатаСеанса());
	
	// Обрабатывает письмо
	// ИнтернетПочта и АдресОтправителя нужны для отправки ответа
	
	// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	//ДанныеДляОтправкиОтвета = Новый Структура;
	//ДанныеДляОтправкиОтвета.Вставить("ИнтернетПочта", ИнтернетПочта);
	//ДанныеДляОтправкиОтвета.Вставить("АдресОтправителя", АдресОтправителя);
	// } RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	ДанныеДляОтправкиОтвета.Вставить("АдресПолучателя", ПолучитьАдресПолучателяОшибок(Письмо));
	ДанныеДляОтправкиОтвета.Вставить("ТемаИсходногоПисьма", Письмо.Тема);
	ДанныеДляОтправкиОтвета.Вставить("Вложения", Письмо.Вложения);
	ДанныеДляОтправкиОтвета.Вставить("UID", Письмо.Идентификатор[0]);
	
	ДанныеДляОтправкиОтветаRIETLeg6 = Новый Структура;
	// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	//ДанныеДляОтправкиОтветаRIETLeg6.Вставить("ИнтернетПочта", ИнтернетПочта);
	//ДанныеДляОтправкиОтветаRIETLeg6.Вставить("АдресОтправителя", АдресОтправителя);
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("ИнтернетПочта", ДанныеДляОтправкиОтвета.ИнтернетПочта);
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("ИнтернетПочтаRCA", ДанныеДляОтправкиОтвета.ИнтернетПочтаRCA);
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("АдресОтправителя", ДанныеДляОтправкиОтвета.АдресОтправителя);
	// } RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("АдресПолучателя", ПолучитьАдресПолучателяОшибокСоСтороныRIETLeg6());
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("ТемаИсходногоПисьма", Письмо.Тема);
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("UID", Письмо.Идентификатор[0]);
	
	// { RGS LHristyc 02.07.2018 12:20:29 - S-I-0004942	
	ДанныеДляОтправкиОтветаRIETExportReports = Новый Структура;
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("ИнтернетПочта", ДанныеДляОтправкиОтвета.ИнтернетПочта);
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("ИнтернетПочтаRCA", ДанныеДляОтправкиОтвета.ИнтернетПочтаRCA);
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("АдресОтправителя", ДанныеДляОтправкиОтвета.АдресОтправителя);
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("АдресПолучателя", ПолучитьАдресПолучателяОшибокСоСтороныRIETExportReports());
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("ТемаИсходногоПисьма", Письмо.Тема);
	ДанныеДляОтправкиОтветаRIETExportReports.Вставить("UID", Письмо.Идентификатор[0]);
	// } RGS LHristyc 02.07.2018 12:20:40 - S-I-0004942 
	
	ДанныеДляОтправкиОтветаRIETLeg7 = Новый Структура;
	// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	//ДанныеДляОтправкиОтветаRIETLeg7.Вставить("ИнтернетПочта", ИнтернетПочта);
	//ДанныеДляОтправкиОтветаRIETLeg7.Вставить("АдресОтправителя", АдресОтправителя);
	ДанныеДляОтправкиОтветаRIETLeg7.Вставить("ИнтернетПочта", ДанныеДляОтправкиОтвета.ИнтернетПочта);
	ДанныеДляОтправкиОтветаRIETLeg6.Вставить("ИнтернетПочтаRCA", ДанныеДляОтправкиОтвета.ИнтернетПочтаRCA);
	ДанныеДляОтправкиОтветаRIETLeg7.Вставить("АдресОтправителя", ДанныеДляОтправкиОтвета.АдресОтправителя);
	// } RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	ДанныеДляОтправкиОтветаRIETLeg7.Вставить("АдресПолучателя", ПолучитьАдресПолучателяОшибокСоСтороныRIETLeg7());
	ДанныеДляОтправкиОтветаRIETLeg7.Вставить("ТемаИсходногоПисьма", Письмо.Тема);
	ДанныеДляОтправкиОтветаRIETLeg7.Вставить("UID", Письмо.Идентификатор[0]);
	
	Sender = СокрЛП(Письмо.Отправитель.Адрес); 
	ServiceProvider = Справочники.ServiceProviders.ПолучитьServiceProviderПоОтправителю(Sender);	
	Если ServiceProvider.Пустая() Тогда
		Возврат;
	КонецЕсли;
	УзелОбмена = ПланыОбмена.Leg7.ПолучитьУзелОбменаПоСервисПровайдеру(ServiceProvider);
	НастройкаОбмена = ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(УзелОбмена);
	
	Если Не НастройкаОбмена.ЗагружатьДанные Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКXMLфайлу = ПолучитьПутьКXMLФайлу(Письмо.Вложения, НастройкаОбмена.АрхивироватьФайл);
	
	Если Найти(ПутьКXMLфайлу, ".xml") = 0 Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, ПутьКXMLфайлу, НастройкаОбмена);
		Возврат;
	КонецЕсли;
	
	XMLфайл = Новый Файл(ПутьКXMLфайлу);
		
	ОбъектXDTO = ПолучитьReportИзXML(ПутьКXMLфайлу);
	
	УдалитьФайлы(ПутьКXMLфайлу);
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, ОбъектXDTO, НастройкаОбмена);
		Возврат;
	КонецЕсли;

	// проверим, что отчет новее предыдущих по отправителю
	// { RGS VShamin 19.08.2015 16:24:39 - 
	//ReportsDate = ОбъектXDTO.ReportsDate;
	//Если Не ЗначениеЗаполнено(ReportsDate) Тогда
	//	ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, "Reports date is empty!");
	//	Возврат;
	//КонецЕсли;
	MessageDate = ОбъектXDTO.MessageDate;
	Если Не ЗначениеЗаполнено(MessageDate) Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, "Message date is empty!", НастройкаОбмена);
		Возврат;
	КонецЕсли;
	// } RGS VShamin 19.08.2015 16:24:41 - 

	MessageNoRIET = ОбъектXDTO.MessageNoRIET;
	MessageNoSP = ОбъектXDTO.MessageNoSP;
	
	// { RGS VShamin 19.08.2015 16:26:12 - 
	//Если ReportIsOlderThanThePreviousOne(Sender, ReportsDate) Тогда
	Если ReportIsOlderThanThePreviousOne(Sender, MessageDate) Тогда
	// } RGS VShamin 19.08.2015 16:26:14 - 
		Возврат;
	КонецЕсли;
	
	Если MessageNoSP <= УзелОбмена.НомерПринятого Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, "Errors loading:
			|The message number is less than or equal to the previously received.", НастройкаОбмена);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(); // перед загрузкой снимаем регистрацию для успешно загруженных объектов на стороне сервис-провайдера
	// установим для объектов признак успешной загрузки на стороне сервис-провайдера
	УстановитьПризнакУспешнойЗагрузки(УзелОбмена, MessageNoRIET);
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, MessageNoRIET);
	ЗафиксироватьТранзакцию();
	
	// Далее все происходит в транзакции: для целостности и чтобы избежать "грязного чтения"
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// получим структуру данных файла
	Если НастройкаОбмена.Leg6Report Тогда
		СтруктураФайлаLeg6 = ПолучитьСтруктуруФайлаИзLeg6Reports(ОбъектXDTO.Leg6Report, НастройкаОбмена);
	КонецЕсли;
	// { RGS LHristyc 20.06.2018 15:00:30 - S-I-0004942
	Если НастройкаОбмена.ExportReports Тогда
		СтруктураФайлаExportReports = ПолучитьСтруктуруФайлаИзExportReports(ОбъектXDTO.ExportReports, НастройкаОбмена);
	КонецЕсли;
	// } RGS LHristyc 20.06.2018 15:00:31 - S-I-0004942  
	// { RGS AGorlenko 19.08.2015 17:11:31 - 
	//СтруктураФайлаLeg7 = ПолучитьСтруктуруФайлаИзLeg7Reports(ОбъектXDTO, НастройкаОбмена);
	СтруктураФайлаLeg7 = ПолучитьСтруктуруФайлаИзLeg7Reports(ОбъектXDTO.Leg7Reports, НастройкаОбмена);	
	// } RGS AGorlenko 19.08.2015 17:11:32 - 
	
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	ЕстьОшибкиAdditionalInfo = Ложь;
	AdditionalInfo = ОбъектXDTO.AdditionalInfo;
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		СтруктураФайлаAdditionalInfo = ПолучитьСтруктуруФайлаИзAdditionalInfoReport(ОбъектXDTO.AdditionalInfo, НастройкаОбмена);
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	ЕстьОшибкиLeg6 = Ложь;
	Если НастройкаОбмена.Leg6Report Тогда
		ЕстьОшибкиLeg6 = СтруктураФайлаLeg6.Свойство("ТекстОшибок");
		// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
		ЕстьОшибкиLeg6RIET = СтруктураФайлаLeg6.Свойство("ТекстОшибокRIET");
		// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	КонецЕсли;
	// { RGS LHristyc 20.06.2018 17:00:10 - S-I-0004942
	ЕстьОшибкиExportReports = Ложь;
	Если НастройкаОбмена.ExportReports Тогда
		ЕстьОшибкиExportReports = СтруктураФайлаExportReports.Свойство("ТекстОшибок");
		ЕстьОшибкиExportReportsRIET = СтруктураФайлаExportReports.Свойство("ТекстОшибокRIET");
	КонецЕсли;
	// } RGS LHristyc 20.06.2018 17:00:11 - S-I-0004942	
	ЕстьОшибкиLeg7 = СтруктураФайлаLeg7.Свойство("ТекстОшибок");
	// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	ЕстьОшибкиLeg7RIET = СтруктураФайлаLeg7.Свойство("ТекстОшибокRIET");
	// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		ЕстьОшибкиAdditionalInfo = СтруктураФайлаAdditionalInfo.Свойство("ТекстОшибок");
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	ТекстОшибок = "";
	ТекстОшибокRIETLeg6 = "";
	ТекстОшибокRIETLeg7 = "";
	// { RGS LHristyc 02.07.2018 11:26:26 - S-I-0004942 
	ТекстОшибокRIETExportReports = "";	
	// } RGS LHristyc 02.07.2018 11:26:27 - S-I-0004942 
	// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	//Если ЕстьОшибкиLeg6 Тогда
	Если ЕстьОшибкиLeg6 И ЗначениеЗаполнено(СтруктураФайлаLeg6.ТекстОшибок) Тогда
	// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)	
		
		ТекстОшибок = "Leg6 (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаLeg6.ТекстОшибок;
		// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
		//ТекстОшибокRIET = "Leg6:" + Символы.ПС + СтруктураФайлаLeg6.ТекстОшибокRIET;
		// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	КонецЕсли;
	// { RGS LHristyc 02.07.2018 11:40:02 - S-I-0004942
	Если ЕстьОшибкиExportReports И ЗначениеЗаполнено(СтруктураФайлаExportReports.ТекстОшибок) Тогда
		ТекстОшибок = "Export reports (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаExportReports.ТекстОшибок;
	КонецЕсли; // } RGS LHristyc 02.07.2018 11:40:04 - S-I-0004942 	
	Если НастройкаОбмена.Leg6Report Тогда
		// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
		Если ЕстьОшибкиLeg6RIET И ЗначениеЗаполнено(СтруктураФайлаLeg6.ТекстОшибокRIET) Тогда
			ТекстОшибокRIETLeg6 = "Leg6 (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаLeg6.ТекстОшибокRIET;
		КонецЕсли;
		// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	КонецЕсли;
	// { RGS LHristyc 02.07.2018 11:43:08 - S-I-0004942
	Если НастройкаОбмена.ExportReports Тогда
		Если ЕстьОшибкиExportReportsRIET И ЗначениеЗаполнено(СтруктураФайлаExportReports.ТекстОшибокRIET) Тогда
			ТекстОшибокRIETExportReports = "Export reports (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаExportReports.ТекстОшибокRIET;
		КонецЕсли;
	КонецЕсли; // } RGS LHristyc 02.07.2018 11:43:09 - S-I-0004942 	
	// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	//Если ЕстьОшибкиLeg7 Тогда
	Если ЕстьОшибкиLeg7 И ЗначениеЗаполнено(СтруктураФайлаLeg7.ТекстОшибок) Тогда
	// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)	
		
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Leg7 (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаLeg7.ТекстОшибок;
		// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
		//ТекстОшибокRIET = ТекстОшибокRIET + Символы.ПС + "Leg7:" + Символы.ПС + СтруктураФайлаLeg7.ТекстОшибокRIET;
		// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	КонецЕсли;
	
	// { RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	Если ЕстьОшибкиLeg7RIET И ЗначениеЗаполнено(СтруктураФайлаLeg7.ТекстОшибокRIET) Тогда
		ТекстОшибокRIETLeg7 = ТекстОшибокRIETLeg7 + Символы.ПС + "Leg7 (analysis of the correctness of the input data):" + Символы.ПС + СтруктураФайлаLeg7.ТекстОшибокRIET;
	КонецЕсли;
	// } RGS VShamin 21.09.2015 17:11:31 - разделение ошибок (оправлялись пустые)
	
	// { RGS VShamin 23.12.2015 16:52:20 - emails
	Если ЕстьОшибкиAdditionalInfo Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Additional info:" + Символы.ПС + СтруктураФайлаAdditionalInfo.ТекстОшибок;
		ТекстОшибокRIETLeg7 = ТекстОшибокRIETLeg7 + Символы.ПС + "Additional info:" + Символы.ПС + СтруктураФайлаAdditionalInfo.ТекстОшибокRIET;
	КонецЕсли;
	// } RGS VShamin 23.12.2015 16:52:22 - emails
	
	// { RGS VShamin 23.12.2015 16:53:10 - emails
	//Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 Тогда
	// { RGS LHristyc 02.07.2018 11:51:06 - 
	//Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 ИЛИ ЕстьОшибкиAdditionalInfo Тогда	
	Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 ИЛИ ЕстьОшибкиAdditionalInfo ИЛИ ЕстьОшибкиExportReports Тогда	
	// } RGS LHristyc 02.07.2018 11:51:07 -  
	// } RGS VShamin 23.12.2015 16:53:12 - emails
	
		ОтменитьТранзакцию();
	
		Если Не ПустаяСтрока(ТекстОшибок) Тогда
			ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, "Errors loading:
				|" + СокрЛП(ТекстОшибок), НастройкаОбмена);
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибокRIETLeg6) Тогда
			ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETLeg6, "Errors loading (RIET):
				|" + СокрЛП(ТекстОшибокRIETLeg6), НастройкаОбмена);
		КонецЕсли;
		// { RGS LHristyc 02.07.2018 11:52:27 - S-I-0004942 
		Если Не ПустаяСтрока(ТекстОшибокRIETExportReports) Тогда
			ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETLeg6, "Errors loading (RIET):
				|" + СокрЛП(ТекстОшибокRIETExportReports), НастройкаОбмена);
		КонецЕсли;
		// } RGS LHristyc 02.07.2018 11:52:28 - S-I-0004942  
		
		Если Не ПустаяСтрока(ТекстОшибокRIETLeg7) Тогда
			ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETLeg7, "Errors loading (RIET):
				|" + СокрЛП(ТекстОшибокRIETLeg7), НастройкаОбмена);
		КонецЕсли;

		Возврат;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СтруктураФайлаLeg7.Вставить("ServiceProvider", ServiceProvider);
	
	// Leg6
	ОписаниеОшибокLeg6 = ""; // то, что отправляем подрядчику
	ОписаниеОшибокLeg6RIET = ""; // то, что отправляется нам
	СформированыОтбивкиПользователямLeg6 = Ложь;
	
	Если НастройкаОбмена.Leg6Report Тогда
		// leg6 загружаем вне транзакции
		СоздатьОбъектыLeg6(СтруктураФайлаLeg6, ОписаниеОшибокLeg6, ОписаниеОшибокLeg6RIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователямLeg6);
	КонецЕсли;
	
	// { RGS LHristyc 02.07.2018 11:55:20 - S-I-0004942
	// Export reports
	ОписаниеОшибокExportReports = ""; // то, что отправляем подрядчику
	ОписаниеОшибокExportReportsRIET = ""; // то, что отправляется нам
	СформированыОтбивкиПользователямExportReports = Ложь;
	
	Если НастройкаОбмена.ExportReports Тогда
		СоздатьОбъектыExportReports(СтруктураФайлаExportReports, ОписаниеОшибокExportReports, ОписаниеОшибокExportReportsRIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователямExportReports);
	КонецЕсли;
	// } RGS LHristyc 02.07.2018 11:55:22 - S-I-0004942 
	
	// AdditionalInfo
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	ОписаниеОшибокAdditionalInfo = ""; // то, что отправляем подрядчику
	ОписаниеОшибокAdditionalInfoRIET = ""; // то, что отправляется нам
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		СоздатьОбъектыAdditionalInfo(СтруктураФайлаAdditionalInfo, ОписаниеОшибокAdditionalInfo, ОписаниеОшибокAdditionalInfoRIET, УзелОбмена, НастройкаОбмена);
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	// Leg7
	ОписаниеОшибокLeg7 = ""; // то, что отправляем подрядчику
	ОписаниеОшибокLeg7RIET = ""; // то, что отправляется нам
	
	БылиОшибки = Ложь;
	ПовторитьСозданиеОбъектов = Истина;
	ОбработанныеTrip = Новый Массив;
	МаксимальноеКоличествоПовторений = 30;
	ТекущийНомерПовторения = 0;
	СозданныеParcels = Новый Массив;
	СозданныеItems = Новый Массив;
	
	МаксимальныйИндексТрипа = СтруктураФайлаLeg7.МассивСтруктурTrips.ВГраница();
	НомерПоследнегоТрипа = ?(МаксимальныйИндексТрипа = -1, "<нет>", СтруктураФайлаLeg7.МассивСтруктурTrips[МаксимальныйИндексТрипа].TripNo);
	
	// leg7 пока загружаем в транзакции
	Пока ПовторитьСозданиеОбъектов И ТекущийНомерПовторения <= МаксимальноеКоличествоПовторений Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Повторение " + ТекущийНомерПовторения);
		СозданныеParcels.Очистить();
		СозданныеItems.Очистить();
		// Создадим объекты
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			// { RGS AGorlenko 26.04.2014 18:22:54 - S-I-0000699
			//СоздатьОбъекты(СтруктураФайла);
			ТекущееОписаниеОшибок = "";
			СоздатьОбъектыLeg7(СтруктураФайлаLeg7, ТекущееОписаниеОшибок, ОбработанныеTrip, СозданныеParcels, СозданныеItems, ОписаниеОшибокLeg7RIET, УзелОбмена, НастройкаОбмена);
			// } RGS AGorlenko 26.04.2014 18:23:32 - S-I-0000699
			ИндексПоследнегоОбработанногоТрипа = ОбработанныеTrip.ВГраница();
			НомерПоследнегоОбработанногоТрипа = ?(ИндексПоследнегоОбработанногоТрипа = -1, "", ОбработанныеTrip[ИндексПоследнегоОбработанногоТрипа]);
			Если МаксимальныйИндексТрипа = -1 Тогда
				ПовторитьСозданиеОбъектов = Не ПустаяСтрока(ТекущееОписаниеОшибок);
			Иначе
				ПовторитьСозданиеОбъектов = Не ПустаяСтрока(ТекущееОписаниеОшибок) И НомерПоследнегоОбработанногоТрипа <> НомерПоследнегоТрипа;
			КонецЕсли;
			ОписаниеОшибокLeg7 = ОписаниеОшибокLeg7 + ТекущееОписаниеОшибок;
			БылиОшибки = ТекущийНомерПовторения > 0 ИЛИ НЕ ПустаяСтрока(ТекущееОписаниеОшибок);
			Если ПовторитьСозданиеОбъектов Тогда
				ОчиститьСозданныеParcelsИItems(СтруктураФайлаLeg7, СозданныеParcels, СозданныеItems);
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			Если Не ПустаяСтрока(ТекущееОписаниеОшибок) Тогда
				ОписаниеОшибокLeg7 = ОписаниеОшибокLeg7 + ТекущееОписаниеОшибок;
			КонецЕсли;
			// { RGS vchaplygin 26.04.2018 8:29:29 - Говнище генерит в логах
			//РГСофт.СообщитьИЗалоггировать(
			//	"Failed to process incoming e-mail " + Письмо.Идентификатор[0],
			//	УровеньЖурналаРегистрации.Ошибка,
			//	Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
			//	Неопределено,
			//	ОписаниеОшибки());
			РГСофт.СообщитьИЗалоггировать(
				"Failed to process incoming e-mail. PullReportsFromServiceProvidersEmails",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
				Неопределено,
				"Failed to process incoming e-mail: " + Письмо.Идентификатор[0] + "
					|" + ОписаниеОшибки()
				);
				// } RGS vchaplygin 26.04.2018 8:29:44 - Говнище генерит в логах
			Если ПустаяСтрока(ОписаниеОшибокLeg7) Тогда
				Возврат;
			Иначе
				Прервать;
			КонецЕсли;
		КонецПопытки;
		ТекущийНомерПовторения = ТекущийНомерПовторения + 1;
	КонецЦикла;
	
	ТекстСообщения = "";
	ТекстСообщенияRIETLeg6 = "";
	ТекстСообщенияRIETLeg7 = "";
	// { RGS LHristyc 02.07.2018 12:12:05 - 
	ТекстСообщенияRIETExportReports= "";
	// } RGS LHristyc 02.07.2018 12:12:07 -  
	Если Не ПустаяСтрока(ОписаниеОшибокLeg6) Тогда
		ТекстСообщения = "Leg6 errors loading (analysis of the correctness of filling objects):
			|" + СокрЛП(ОписаниеОшибокLeg6) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	Если Не ПустаяСтрока(ОписаниеОшибокLeg6RIET) Тогда
		ТекстСообщенияRIETLeg6 = "Leg6 errors loading (RIET) (analysis of the correctness of filling objects):
			|" + СокрЛП(ОписаниеОшибокLeg6RIET) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	// { RGS LHristyc 02.07.2018 12:08:55 - S-I-0004942
	Если Не ПустаяСтрока(ОписаниеОшибокExportReports) Тогда
		ТекстСообщения = "Export reports errors loading (analysis of the correctness of filling objects):
		|" + СокрЛП(ОписаниеОшибокExportReports) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	Если Не ПустаяСтрока(ОписаниеОшибокExportReportsRIET) Тогда
		ТекстСообщенияRIETExportReports = "Export reports errors loading (RIET)(analysis of the correctness of filling objects):
		|" + СокрЛП(ОписаниеОшибокExportReportsRIET) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	// } RGS LHristyc 02.07.2018 12:08:59 - S-I-0004942
	Если Не ПустаяСтрока(ОписаниеОшибокLeg7) Тогда
		ТекстСообщения = ТекстСообщения + "Errors loading (analysis of the correctness of filling objects):
			|" + СокрЛП(ОписаниеОшибокLeg7);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ОписаниеОшибокLeg7RIET) Тогда
		ТекстСообщенияRIETLeg7 = ТекстСообщенияRIETLeg7 + "Errors loading (RIET) (analysis of the correctness of filling objects):
			|" + СокрЛП(ОписаниеОшибокLeg7RIET);
	КонецЕсли;
	
	// { RGS AGorlenko 26.04.2014 18:24:02 - S-I-0000699
	ТранзакцияОтменена = Ложь;
	// } RGS AGorlenko 26.04.2014 18:24:03 - S-I-0000699
	// { RGS LHristyc 02.07.2018 12:15:30 - S-I-0004942
	//Если ПустаяСтрока(ТекстСообщения) И ПустаяСтрока(ТекстСообщенияRIETLeg6) И ПустаяСтрока(ТекстСообщенияRIETLeg7) И Не БылиОшибки И Не СформированыОтбивкиПользователямLeg6 Тогда
	Если ПустаяСтрока(ТекстСообщения) И ПустаяСтрока(ТекстСообщенияRIETLeg6) И ПустаяСтрока(ТекстСообщенияRIETExportReports) И ПустаяСтрока(ТекстСообщенияRIETLeg7) И Не БылиОшибки И Не СформированыОтбивкиПользователямLeg6 Тогда	
	// } RGS LHristyc 02.07.2018 12:15:32 - S-I-0004942 
		// { RGS VShamin 19.08.2015 16:27:25 - 
		//ДобавитьЗаписьLeg7ReceivedReportsDate(Sender, ReportsDate);
		ДобавитьЗаписьLeg7ReceivedReportsDate(Sender, MessageDate);
		// } RGS VShamin 19.08.2015 16:27:26 - 
		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.УдалитьНеактуальныеЗаписиРежимаВыгрузкиПоСсылке(УзелОбмена);
	Иначе
		// { RGS AGorlenko 26.04.2014 18:24:02 - S-I-0000699
		//Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		//	ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, ТекстСообщения);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		//КонецЕсли;
		//Если НЕ ПустаяСтрока(ТекстСообщенияRIET) Тогда
		//	ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIET, ТекстСообщенияRIET);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияRIET);
		//КонецЕсли;
		ТранзакцияОтменена = Истина;
		// } RGS AGorlenko 26.04.2014 18:24:03 - S-I-0000699
		// { RGS AGorlenko 16.03.2017 12:28:56 - на данном этапе активна может быть только транзакция записи объектов Leg7, поэтому сделаем проверку на ошибки Leg7
		//Если ТранзакцияАктивна() Тогда
		//	ОтменитьТранзакцию();
		//КонецЕсли;
		Если ТранзакцияАктивна() И (НЕ ПустаяСтрока(ТекстСообщенияRIETLeg7) ИЛИ БылиОшибки) Тогда
			ОтменитьТранзакцию();
		ИначеЕсли ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		// } RGS AGorlenko 16.03.2017 12:49:58 - на данном этапе активна может быть только транзакция записи объектов Leg7, поэтому сделаем проверку на ошибки Leg7
		// { RGS AGorlenko 26.04.2014 18:24:02 - S-I-0000699
		//Возврат;
		// } RGS AGorlenko 26.04.2014 18:24:03 - S-I-0000699
	КонецЕсли;
	
	Если Не ТранзакцияОтменена Тогда
	
		УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбменаОбъект.НомерПринятого = MessageNoSP;
		УзелОбменаОбъект.Записать();
	
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	КонецЕсли;
	
	// { RGS AGorlenko 26.04.2014 18:24:02 - S-I-0000699
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, ТекстСообщения, НастройкаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекстСообщенияRIETLeg6) Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETLeg6, ТекстСообщенияRIETLeg6, НастройкаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияRIETLeg6);
	КонецЕсли;
	// { RGS LHristyc 02.07.2018 12:17:22 - S-I-0004942 
	Если НЕ ПустаяСтрока(ТекстСообщенияRIETExportReports) Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETExportReports, ТекстСообщенияRIETExportReports, НастройкаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияRIETExportReports);
	КонецЕсли;	
	// } RGS LHristyc 02.07.2018 12:17:26 - S-I-0004942  
	Если НЕ ПустаяСтрока(ТекстСообщенияRIETLeg7) Тогда
		ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтветаRIETLeg7, ТекстСообщенияRIETLeg7, НастройкаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияRIETLeg7);
	КонецЕсли;
	// } RGS AGorlenko 26.04.2014 18:24:03 - S-I-0000699
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Время окончания: " + ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ОбработатьФайл(ИмяФайла, ServiceProvider) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Время начала: " + ТекущаяДатаСеанса());
	
	XMLфайл = Новый Файл(ИмяФайла);
		
	ОбъектXDTO = ПолучитьReportИзXML(ИмяФайла);
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбъектXDTO);
		Возврат;
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.Leg7.ПолучитьУзелОбменаПоСервисПровайдеру(ServiceProvider);
	НастройкаОбмена = ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(УзелОбмена);
	
	Если Не НастройкаОбмена.ЗагружатьДанные Тогда
		Возврат;
	КонецЕсли;
	
	// Далее все происходит в транзакции: для целостности и чтобы избежать "грязного чтения"
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// получим структуру данных файла
	Если НастройкаОбмена.Leg6Report Тогда
		СтруктураФайлаLeg6 = ПолучитьСтруктуруФайлаИзLeg6Reports(ОбъектXDTO.Leg6Report, НастройкаОбмена);
	КонецЕсли;
	// { RGS LHristyc 20.06.2018 15:00:30 - S-I-0004942
	Если НастройкаОбмена.ExportReports Тогда
		СтруктураФайлаExportReports = ПолучитьСтруктуруФайлаИзExportReports(ОбъектXDTO.ExportReports, НастройкаОбмена);
	КонецЕсли;
	// } RGS LHristyc 20.06.2018 15:00:31 - S-I-0004942  
	СтруктураФайлаLeg7 = ПолучитьСтруктуруФайлаИзLeg7Reports(ОбъектXDTO.Leg7Reports, НастройкаОбмена);
	
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	ЕстьОшибкиAdditionalInfo = Ложь;
	AdditionalInfo = ОбъектXDTO.AdditionalInfo;
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		СтруктураФайлаAdditionalInfo = ПолучитьСтруктуруФайлаИзAdditionalInfoReport(ОбъектXDTO.AdditionalInfo, НастройкаОбмена);
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	ЕстьОшибкиLeg6 = Ложь;
	Если НастройкаОбмена.Leg6Report Тогда
		ЕстьОшибкиLeg6 = СтруктураФайлаLeg6.Свойство("ТекстОшибок");
	КонецЕсли;
	// { RGS LHristyc 20.06.2018 17:00:10 - S-I-0004942 
	Если НастройкаОбмена.ExportReports Тогда
		ЕстьОшибкиExportReports = СтруктураФайлаExportReports.Свойство("ТекстОшибок");
	КонецЕсли;
	// } RGS LHristyc 20.06.2018 17:00:11 - S-I-0004942  
	ЕстьОшибкиLeg7 = СтруктураФайлаLeg7.Свойство("ТекстОшибок");
	
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	ЕстьОшибкиAdditionalInfo = Ложь;
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		ЕстьОшибкиAdditionalInfo = СтруктураФайлаAdditionalInfo.Свойство("ТекстОшибок");
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	ТекстОшибок = "";
	ТекстОшибокRIET = "";
	Если ЕстьОшибкиLeg6 Тогда
		ТекстОшибок = "Leg6:" + Символы.ПС + СтруктураФайлаLeg6.ТекстОшибок;
		ТекстОшибокRIET = "Leg6:" + Символы.ПС + СтруктураФайлаLeg6.ТекстОшибокRIET;
	КонецЕсли;
	// { RGS LHristyc 20.06.2018 17:03:02 - S-I-0004942
	Если ЕстьОшибкиExportReports Тогда
		ТекстОшибок = "ExportReports:" + Символы.ПС + СтруктураФайлаExportReports.ТекстОшибок;
		ТекстОшибокRIET = "ExportReports:" + Символы.ПС + СтруктураФайлаExportReports.ТекстОшибокRIET;
	КонецЕсли;
	// } RGS LHristyc 20.06.2018 17:03:03 - S-I-0004942  
	Если ЕстьОшибкиLeg7 Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Leg7:" + Символы.ПС + СтруктураФайлаLeg7.ТекстОшибок;
		ТекстОшибокRIET = ТекстОшибокRIET + Символы.ПС + "Leg7:" + Символы.ПС + СтруктураФайлаLeg7.ТекстОшибокRIET;
	КонецЕсли;
	// { RGS VShamin 23.12.2015 16:52:20 - emails
	Если ЕстьОшибкиAdditionalInfo Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Additional info:" + Символы.ПС + СтруктураФайлаAdditionalInfo.ТекстОшибок;
		ТекстОшибокRIET = ТекстОшибокRIET + Символы.ПС + "Additional info:" + Символы.ПС + СтруктураФайлаAdditionalInfo.ТекстОшибокRIET;
	КонецЕсли;
	// } RGS VShamin 23.12.2015 16:52:22 - emails
	
	// { RGS LHristyc 20.06.2018 17:04:49 - S-I-0004942
	// { RGS VShamin 23.12.2015 16:53:10 - emails
	////Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 Тогда
	//Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 ИЛИ ЕстьОшибкиAdditionalInfo Тогда
	// } RGS VShamin 23.12.2015 16:53:12 - emails
	Если ЕстьОшибкиLeg6 ИЛИ ЕстьОшибкиLeg7 ИЛИ ЕстьОшибкиAdditionalInfo ИЛИ ЕстьОшибкиExportReports Тогда
	// } RGS LHristyc 20.06.2018 17:04:51 - S-I-0004942  
	
		
		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибок);

		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибокRIET);

		ОтменитьТранзакцию();
		Возврат;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СтруктураФайлаLeg7.Вставить("ServiceProvider", ServiceProvider);
	
	// Leg6
	ОписаниеОшибокLeg6 = ""; // то, что отправляем подрядчику
	ОписаниеОшибокLeg6RIET = ""; // то, что отправляется нам
	БылиОшибки = Ложь;
	СформированыОтбивкиПользователямLeg6 = Ложь;
	
	Если НастройкаОбмена.Leg6Report Тогда
		// leg6 загружаем вне транзакции
		СоздатьОбъектыLeg6(СтруктураФайлаLeg6, ОписаниеОшибокLeg6, ОписаниеОшибокLeg6RIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователямLeg6);
	КонецЕсли;
	
	// { RGS LHristyc 21.06.2018 14:49:34 - S-I-0004942
	// ExportReports
	ОписаниеОшибокExportReports = ""; // то, что отправляем подрядчику
	ОписаниеОшибокExportReportsRIET = ""; // то, что отправляется нам
	БылиОшибки = Ложь;
	СформированыОтбивкиПользователямExportReports = Ложь;
	
	Если НастройкаОбмена.ExportReports Тогда
		СоздатьОбъектыExportReports(СтруктураФайлаExportReports, ОписаниеОшибокExportReports, ОписаниеОшибокExportReportsRIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователямExportReports);
	КонецЕсли;
	// } RGS LHristyc 21.06.2018 14:49:38 - S-I-0004942
	
	// AdditionalInfo
	// { RGS VShamin 23.12.2015 12:10:57 - emails
	ОписаниеОшибокAdditionalInfo = ""; // то, что отправляем подрядчику
	ОписаниеОшибокAdditionalInfoRIET = ""; // то, что отправляется нам
	Если НастройкаОбмена.AdditionalInfoReport И AdditionalInfo <> Неопределено Тогда
		СоздатьОбъектыAdditionalInfo(СтруктураФайлаAdditionalInfo, ОписаниеОшибокAdditionalInfo, ОписаниеОшибокAdditionalInfoRIET, УзелОбмена, НастройкаОбмена);
	КонецЕсли;
	// } RGS VShamin 23.12.2015 12:11:02 - emails
	
	// Leg7
	ОписаниеОшибокLeg7 = ""; // то, что отправляем подрядчику
	ОписаниеОшибокLeg7RIET = ""; // то, что отправляется нам
	
	ПовторитьСозданиеОбъектов = Истина;
	ОбработанныеTrip = Новый Массив;
	МаксимальноеКоличествоПовторений = 100;
	ТекущийНомерПовторения = 0;
	СозданныеParcels = Новый Массив;
	СозданныеItems = Новый Массив;
	
	МаксимальныйИндексТрипа = СтруктураФайлаLeg7.МассивСтруктурTrips.ВГраница();
	НомерПоследнегоТрипа = ?(МаксимальныйИндексТрипа = -1, "<нет>", СтруктураФайлаLeg7.МассивСтруктурTrips[МаксимальныйИндексТрипа].TripNo);
	
	// leg7 пока загружаем в транзакции
	Пока ПовторитьСозданиеОбъектов И ТекущийНомерПовторения <= МаксимальноеКоличествоПовторений Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Повторение " + ТекущийНомерПовторения);
		СозданныеParcels.Очистить();
		СозданныеItems.Очистить();
		// Создадим объекты
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			ТекущееОписаниеОшибок = "";
			СоздатьОбъектыLeg7(СтруктураФайлаLeg7, ТекущееОписаниеОшибок, ОбработанныеTrip, СозданныеParcels, СозданныеItems, ОписаниеОшибокLeg7RIET, УзелОбмена, НастройкаОбмена);
			ИндексПоследнегоОбработанногоТрипа = ОбработанныеTrip.ВГраница();
			НомерПоследнегоОбработанногоТрипа = ?(ИндексПоследнегоОбработанногоТрипа = -1, "", ОбработанныеTrip[ИндексПоследнегоОбработанногоТрипа]);
			Если МаксимальныйИндексТрипа = -1 Тогда
				ПовторитьСозданиеОбъектов = Не ПустаяСтрока(ТекущееОписаниеОшибок);
			Иначе
				ПовторитьСозданиеОбъектов = Не ПустаяСтрока(ТекущееОписаниеОшибок) И НомерПоследнегоОбработанногоТрипа <> НомерПоследнегоТрипа;
			КонецЕсли;
			ОписаниеОшибокLeg7 = ОписаниеОшибокLeg7 + ТекущееОписаниеОшибок;
			БылиОшибки = ТекущийНомерПовторения > 0 ИЛИ НЕ ПустаяСтрока(ТекущееОписаниеОшибок);
			Если ПовторитьСозданиеОбъектов Тогда
				ОчиститьСозданныеParcelsИItems(СтруктураФайлаLeg7, СозданныеParcels, СозданныеItems);
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			// { RGS vchaplygin 26.04.2018 8:29:29 - Для единообразия
			//РГСофт.СообщитьИЗалоггировать(
			//	"Failed to process incoming e-mail ",
			//	УровеньЖурналаРегистрации.Ошибка,
			//	Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
			//	Неопределено,
			//	ОписаниеОшибки());
			РГСофт.СообщитьИЗалоггировать(
				"Failed to process incoming e-mail. PullReportsFromServiceProvidersEmails",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Обработки.PullReportsFromServiceProvidersEmails,
				Неопределено,
				"Failed to process incoming e-mail:
					|" + ОписаниеОшибки()
				);
			// } RGS vchaplygin 26.04.2018 8:29:44 - Для единообразия
			Возврат;
		КонецПопытки;
		ТекущийНомерПовторения = ТекущийНомерПовторения + 1;
	КонецЦикла;
	
	ТекстСообщения = "";
	ТекстСообщенияRIET = "";
	Если Не ПустаяСтрока(ОписаниеОшибокLeg6) Тогда
		ТекстСообщения = "Leg6 errors loading:
			|" + СокрЛП(ОписаниеОшибокLeg6) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	Если Не ПустаяСтрока(ОписаниеОшибокLeg6RIET) Тогда
		ТекстСообщения = "Leg6 errors loading (RIET):
			|" + СокрЛП(ОписаниеОшибокLeg6RIET) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	// { RGS LHristyc 02.07.2018 11:07:30 - S-I-0004942 
	Если Не ПустаяСтрока(ОписаниеОшибокExportReports) Тогда
		ТекстСообщения = "Export reports errors loading:
		|" + СокрЛП(ОписаниеОшибокExportReports) + Символы.ПС + Символы.ПС;
	КонецЕсли;
	Если Не ПустаяСтрока(ОписаниеОшибокExportReportsRIET) Тогда
		ТекстСообщения = "Export reports errors loading (RIET):
		|" + СокрЛП(ОписаниеОшибокExportReportsRIET) + Символы.ПС + Символы.ПС;
	КонецЕсли; // } RGS LHristyc 02.07.2018 11:07:31 - S-I-0004942  
	
	Если Не ПустаяСтрока(ОписаниеОшибокLeg7) ИЛИ НЕ ПустаяСтрока(ОписаниеОшибокLeg7RIET) ИЛИ БылиОшибки Тогда
		ТекстСообщения = ТекстСообщения + "Errors loading:
			|" + СокрЛП(ОписаниеОшибокLeg7);
		ТекстСообщенияRIET = ТекстСообщенияRIET + "Errors loading (RIET):
			|" + СокрЛП(ОписаниеОшибокLeg7RIET);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Время окончания: " + ТекущаяДатаСеанса());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) И ПустаяСтрока(ТекстСообщенияRIET) И Не СформированыОтбивкиПользователямLeg6 Тогда
		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.УдалитьНеактуальныеЗаписиРежимаВыгрузкиПоСсылке(УзелОбмена);
	Иначе
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ТекстСообщенияRIET) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияRIET);
		КонецЕсли;
		Если СформированыОтбивкиПользователямLeg6 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформированы отбивки пользователям");
		КонецЕсли;
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Время окончания: " + ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ОчиститьСозданныеParcelsИItems(СтруктураФайла, СозданныеParcels, СозданныеItems)

	СтрокиДляУдаления = Новый Массив;
	Для каждого ТекЭлемент Из СозданныеParcels Цикл
		НайденнаяСтрока = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаParcels.Найти(ТекЭлемент, "ParcelNo");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокиДляУдаления.Добавить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаParcels.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления.Очистить();
	Для каждого ТекЭлемент Из СозданныеItems Цикл
		НайденнаяСтрока = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаLocalItems.Найти(ТекЭлемент, "ItemNo");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокиДляУдаления.Добавить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаLocalItems.Удалить(СтрокаДляУдаления);
	КонецЦикла;

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// Объект XDTO -> СТРУКТУРА

#Область ПолучениеСтруктурыДанныхLeg6

Функция ПолучитьСтруктуруФайлаИзLeg6Reports(Leg6Reports, НастройкаОбмена)
	
	// Загружает Leg6 Reports из XDTO-объекта 
	// В случае обработанных ошибок - возвращает текст ошибок
	// В случае успеха - возвращае структуру данных
	ТекстОшибок = "";
	ТекстОшибокRIET = "";
	
	СтруктураДанных = Новый Структура("СтруктураТаблицОбъектов,МассивСтруктурInvoiceLines,МассивСтруктурParcels,МассивСтруктурDOCs,МассивСтруктурShipments");
	
	// { RGS VShamin 22.09.2015 15:25:31 - 
	//СтруктураТекстовыхЗначенийКодов = Новый Структура(
	//	"МассивInvoiceLineNo,МассивTNVEDNo,МассивDOCNo,МассивUser,МассивShipmentNo,МассивActualPOA,МассивParcelNo,МассивHazardClasses",
	//	Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив());
	СтруктураТекстовыхЗначенийКодов = Новый Структура(
		"МассивInvoiceLineNo,МассивTNVEDNo,МассивPermitsRequired,МассивCOORequired,МассивDOCNo,МассивUser,МассивShipmentNo,МассивActualPOA,МассивParcelNo,МассивHazardClasses",
		Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив(),Новый Массив());
	// } RGS VShamin 22.09.2015 15:25:31 - 
	
	// INVOICE LINES
	InvoiceLines = Leg6Reports.InvoiceLines;
	Если InvoiceLines <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзInvoiceLines(ТекстОшибок, InvoiceLines, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// Parcels
	Parcels = Leg6Reports.Parcels;
	Если Parcels <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзParcels(ТекстОшибок, Parcels, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// DOCs
	DOCs = Leg6Reports.DOCs;
	Если DOCs <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзDOCs(ТекстОшибок, DOCs, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// Shipments
	Shipments = Leg6Reports.Shipments;
	Если Shipments <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзShipments(ТекстОшибок, Shipments, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// ТАБЛИЦЫ ОБЪЕКТОВ
	
	СтруктураДанных.СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектовLeg6(СтруктураТекстовыхЗначенийКодов);
	
	// ПРОВЕРКА ДАННЫХ И ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ ДАННЫХ
	
	ПроверитьИЗаполнитьСтруктуруЗначенийLeg6(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена);
	
	Если Не ПустаяСтрока(ТекстОшибок) ИЛИ Не ПустаяСтрока(ТекстОшибокRIET) Тогда
		Возврат Новый Структура("ТекстОшибок, ТекстОшибокRIET", ТекстОшибок, ТекстОшибокRIET);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ЗаполнитьСтруктуруДанныхИзInvoiceLines(ТекстОшибок, InvoiceLines, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список invoice lines
	СтруктураДанных.МассивСтруктурInvoiceLines = Новый Массив;
	
	Если InvoiceLines.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекInvoiceLine из InvoiceLines Цикл 
		СтруктураInvoiceLine = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийInvoiceLine(ТекстОшибок, СтруктураInvoiceLine, ТекInvoiceLine, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурInvoiceLines.Добавить(СтруктураInvoiceLine);
	КонецЦикла;	
	          	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзParcels(ТекстОшибок, Parcels, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список Parcels
	СтруктураДанных.МассивСтруктурParcels = Новый Массив;
	
	Если Parcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекParcel из Parcels Цикл 
		СтруктураParcel = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийParcelLeg6(ТекстОшибок, СтруктураParcel, ТекParcel, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурParcels.Добавить(СтруктураParcel);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзDOCs(ТекстОшибок, DOCs, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список DOCs
	СтруктураДанных.МассивСтруктурDOCs = Новый Массив;
	
	Если DOCs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекDOC из DOCs Цикл 
		СтруктураDOC = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийDOC(ТекстОшибок, СтруктураDOC, ТекDOC, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурDOCs.Добавить(СтруктураDOC);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзShipments(ТекстОшибок, Shipments, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список DOCs
	СтруктураДанных.МассивСтруктурShipments = Новый Массив;
	
	Если Shipments.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекShipment из Shipments Цикл 
		СтруктураShipment = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийShipment(ТекстОшибок, СтруктураShipment, ТекShipment, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурShipments.Добавить(СтруктураShipment);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСтруктурыДанныхLeg7

Функция ПолучитьСтруктуруФайлаИзLeg7Reports(Leg7Reports, НастройкаОбмена)
	
	// Загружает Leg7 Reports из XDTO-объекта 
	// В случае обработанных ошибок - возвращает текст ошибок
	// В случае успеха - возвращае структуру данных
	ТекстОшибок = "";
	ТекстОшибокRIET = "";
	
	СтруктураДанных = Новый Структура("WarehouseFrom,Leg7Warehouse,ПрефиксСклада,СтруктураТаблицОбъектов,МассивСтруктурDeliveredParcels,МассивСтруктурTrips,МассивRepackedItems,МассивParcelsToRepack, МассивСтруктурChangedParcels");
	СтруктураДанных.МассивRepackedItems = Новый Массив; 
	СтруктураДанных.МассивParcelsToRepack = Новый Массив; 
	
	СтруктураТекстовыхЗначенийКодов = Новый Структура(
		"МассивParcelNo,МассивImportItemNo,МассивLocalItemNo,МассивWarehouse,МассивPackingType,МассивUOM," +
		"МассивParentCompanies,МассивPONo,МассивTripNo,МассивEquipments,МассивServiceProviders,МассивHazardClasses," +
		"МассивПрефиксовСкладов,МассивLegalEntities,МассивSoldTo,МассивBORGs");
		
	СоздатьМассивыДляСтруктурТекстовыхЗначенийКодов(СтруктураТекстовыхЗначенийКодов);
		
	// WAREHOUSE INBOUND REPORT
	
	WarehouseInboundReport = Leg7Reports.WarehouseInboundReport;
	Если WarehouseInboundReport <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзWarehouseInboundReport(ТекстОшибок, WarehouseInboundReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	СтруктураДанных.МассивСтруктурTrips = Новый Массив;
	
	// DRAFT TRIPS
	
	DraftTripsReport = Leg7Reports.DraftTripsReport;
	Если DraftTripsReport <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзDraftTripsReport(ТекстОшибок, DraftTripsReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// FINAL TRIPS
	
	FinalTripsReport = Leg7Reports.FinalTripsReport;
	Если FinalTripsReport <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзFinalTripsReport(ТекстОшибок, FinalTripsReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);	
	КонецЕсли;
	
	// CHANGES REPORT
	ChangesReport = Leg7Reports.ChangesReport;
	Если ChangesReport <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзChangesReport(ТекстОшибок, ChangesReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);	
	КонецЕсли;

	// ТАБЛИЦЫ ОБЪЕКТОВ
	
	СтруктураДанных.СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектовLeg7(СтруктураТекстовыхЗначенийКодов);
	
	// ПРОВЕРКА ДАННЫХ И ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ ДАННЫХ
	
	ПроверитьИЗаполнитьСтруктуруЗначений(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена);
	
	Если Не ПустаяСтрока(ТекстОшибок) ИЛИ Не ПустаяСтрока(ТекстОшибокRIET) Тогда
		Возврат Новый Структура("ТекстОшибок, ТекстОшибокRIET", ТекстОшибок, ТекстОшибокRIET);
	КонецЕсли;
	 
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ЗаполнитьСтруктуруДанныхИзWarehouseInboundReport(ТекстОшибок, WarehouseInboundReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	СписокDeliveredParcels = WarehouseInboundReport.DeliveredParcel;
	
	// Warehouse
	// если пустой или не найден - дальше не идем
	КодWarehouse = СокрЛП(WarehouseInboundReport.Warehouse);
	Если Не ЗначениеЗаполнено(КодWarehouse) Тогда
		ДобавитьСтроку(ТекстОшибок, "Warehouse is empty!");
		Возврат;
	КонецЕсли;
	
	СтруктураСклада	= ПолучитьСтруктуруWarehouseFrom(КодWarehouse);
	СтруктураДанных.WarehouseFrom = СтруктураСклада.WarehouseFrom;
	СтруктураДанных.Leg7Warehouse = СтруктураСклада.Leg7Warehouse;
		
	Если Не ЗначениеЗаполнено(СтруктураДанных.WarehouseFrom) Тогда
		ДобавитьСтроку(ТекстОшибок, "Failed to find Warehouse for exchange by code '" + КодWarehouse + "'!");
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 08.05.2014 11:49:02 - убираем префикс
	//СтруктураДанных.ПрефиксСклада = СтруктураСклада.Prefix;
	//Если СтруктураДанных.ПрефиксСклада = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	// } RGS AGorlenko 08.05.2014 11:49:07 - убираем префикс
	
	//список прибывших парселей 
	СтруктураДанных.МассивСтруктурDeliveredParcels = Новый Массив;
	
	Если СписокDeliveredParcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого DeliveredParcel из СписокDeliveredParcels Цикл 
		СтруктураParcel = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийParcel(ТекстОшибок, СтруктураParcel, DeliveredParcel, СтруктураТекстовыхЗначенийКодов, Истина);
		СтруктураДанных.МассивСтруктурDeliveredParcels.Добавить(СтруктураParcel);
	КонецЦикла;	
	          	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзDraftTripsReport(ТекстОшибок, DraftTripsReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	СписокDraftTrips = DraftTripsReport.DraftTrips;
	
	Если СписокDraftTrips.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого DraftTrip из СписокDraftTrips Цикл 
		СтруктураTrip = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийTrip(ТекстОшибок, СтруктураTrip, DraftTrip, СтруктураТекстовыхЗначенийКодов, "Draft");
		СтруктураДанных.МассивСтруктурTrips.Добавить(СтруктураTrip);
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзFinalTripsReport(ТекстОшибок, FinalTripsReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	СписокFinalTrips = FinalTripsReport.FinalTrips;
	
	Если СписокFinalTrips.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого FinalTrip из СписокFinalTrips Цикл 
		СтруктураTrip = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийTrip(ТекстОшибок, СтруктураTrip, FinalTrip, СтруктураТекстовыхЗначенийКодов, "Final");
		СтруктураДанных.МассивСтруктурTrips.Добавить(СтруктураTrip);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзChangesReport(ТекстОшибок, ChangesReport, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	СписокChangedParcel = ChangesReport.ChangedParcel;
	
	Если СписокChangedParcel.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//список измененных парселей 
	СтруктураДанных.МассивСтруктурChangedParcels = Новый Массив;
	КэшСкладов = Новый Соответствие;
	
	Для Каждого ChangedParcel из СписокChangedParcel Цикл 
		
		// Warehouse
		КодWarehouse = СокрЛП(ChangedParcel.Warehouse);
		Если Не ЗначениеЗаполнено(КодWarehouse) Тогда
			ДобавитьСтроку(ТекстОшибок, "For changed parcel " + ChangedParcel.Parcel.No + " Warehouse is empty!");
			Продолжить;
		Иначе
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивWarehouse, КодWarehouse);
		КонецЕсли;
		//Если КэшСкладов[КодWarehouse] = Неопределено Тогда
		//	КэшСкладов.Вставить(КодWarehouse, ПолучитьСтруктуруWarehouseFrom(КодWarehouse));
		//КонецЕсли;
		//СтруктураСклада = КэшСкладов[КодWarehouse];
		//
		//Если Не ЗначениеЗаполнено(СтруктураСклада.WarehouseFrom) Тогда
		//	ДобавитьСтроку(ТекстОшибок, "Failed to find Warehouse by code '" + КодWarehouse + "'!");
		//	Возврат;
		//КонецЕсли;
		
		СтруктураParcel = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийParcel(ТекстОшибок, СтруктураParcel, ChangedParcel.Parcel, СтруктураТекстовыхЗначенийКодов);
		//СтруктураParcel.Вставить("WarehouseFrom", СтруктураСклада.WarehouseFrom);
		СтруктураParcel.Вставить("WarehouseFrom", КодWarehouse);
		СтруктураДанных.МассивСтруктурChangedParcels.Добавить(СтруктураParcel);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

// { RGS LHristyc 20.06.2018 14:56:05 - S-I-0004942 
#Область ПолучениеСтруктурыДанныхExportReports

Функция ПолучитьСтруктуруФайлаИзExportReports(ExportReports, НастройкаОбмена)
	
	// Загружает ExportReports из XDTO-объекта 
	// В случае обработанных ошибок - возвращает текст ошибок
	// В случае успеха - возвращае структуру данных
	ТекстОшибок = "";
	ТекстОшибокRIET = "";
	
	//СтруктураДанных = Новый Структура("СтруктураТаблицОбъектов,МассивСтруктурInvoiceLines,МассивСтруктурParcels,МассивСтруктурExportShipments,МассивСтруктурExportShipments");
	СтруктураДанных = Новый Структура("СтруктураТаблицОбъектов, МассивСтруктурExportRequests, МассивСтруктурExportShipments");
	СтруктураТекстовыхЗначенийКодов = Новый Структура("МассивExportRequestNo, МассивExportShipmentNo", Новый Массив(), Новый Массив());
	
	// ExportRequests
	ExportRequests = ExportReports.ExportRequests;
	Если ExportRequests <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзExportRequests(ТекстОшибок, ExportRequests, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// ExportShipments
	ExportShipments = ExportReports.ExportShipments;
	Если ExportShipments <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзExportShipments(ТекстОшибок, ExportShipments, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	
	// ТАБЛИЦЫ ОБЪЕКТОВ
	
	//СтруктураДанных.СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектовLeg6(СтруктураТекстовыхЗначенийКодов);
	СтруктураДанных.СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектовExportReports(СтруктураТекстовыхЗначенийКодов);
		
	// ПРОВЕРКА ДАННЫХ И ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ ДАННЫХ
	
	//ПроверитьИЗаполнитьСтруктуруЗначенийLeg6(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена);
	ПроверитьИЗаполнитьСтруктуруЗначенийExportReports(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена);
	
	Если Не ПустаяСтрока(ТекстОшибок) ИЛИ Не ПустаяСтрока(ТекстОшибокRIET) Тогда
		Возврат Новый Структура("ТекстОшибок, ТекстОшибокRIET", ТекстОшибок, ТекстОшибокRIET);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции


Процедура ЗаполнитьСтруктуруДанныхИзExportRequests(ТекстОшибок, ExportRequests, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список ExportRequests
	СтруктураДанных.МассивСтруктурExportRequests = Новый Массив;
	
	Если ExportRequests.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекExportRequest из ExportRequests Цикл 
		СтруктураТекExportRequest = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийExportRequest(ТекстОшибок, СтруктураТекExportRequest, ТекExportRequest, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурExportRequests.Добавить(СтруктураТекExportRequest);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхИзExportShipments(ТекстОшибок, ExportShipments, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список ExportShipments
	СтруктураДанных.МассивСтруктурExportShipments = Новый Массив;
	
	Если ExportShipments.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекExportShipment из ExportShipments Цикл 
		СтруктураExportShipment = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийExportShipment(ТекстОшибок, СтруктураExportShipment, ТекExportShipment, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурExportShipments.Добавить(СтруктураExportShipment);
	КонецЦикла;
	
КонецПроцедуры // } RGS LHristyc 20.06.2018 14:56:17 - S-I-0004942  

#КонецОбласти 

//////////////////////////////////////////////////////////////////////////////
// РАЗБОР XDTO ОБЪЕКТОВ

#Область СтруктураТекстовыхЗначенийLeg6

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийInvoiceLine(ТекстОшибок, СтруктураInvoiceLine, InvoiceLine, СтруктураТекстовыхЗначенийКодов)
	
	// { RGS VShamin 25.08.2015 11:33:02 - исключаем поля (PriorCCD) 
	//СтруктураInvoiceLine = Новый Структура("No,InvoiceLineСсылка,PriorCCD,TNVED");
	СтруктураInvoiceLine = Новый Структура("No,InvoiceLineСсылка,TNVED,PermitsRequired,COORequired");
	// } RGS VShamin 25.08.2015 11:33:03 - исключаем поля (PriorCCD)
		
	// Invoice Line No
	InvoiceLineNo = СокрЛП(InvoiceLine.No);
	Если Не ЗначениеЗаполнено(InvoiceLineNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Invoice line no. is empty!");
		Возврат;
	Иначе
		СтруктураInvoiceLine.No = InvoiceLineNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивInvoiceLineNo, InvoiceLineNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Invoice line no. " + InvoiceLineNo + ": ";
	
	// { RGS VShamin 25.08.2015 11:33:21 - исключаем поля
	//// PriorCCD
	//PriorCCD = СокрЛП(InvoiceLine.PriorCCD);
	//Если ЗначениеЗаполнено(PriorCCD) Тогда
	//	СтруктураInvoiceLine.PriorCCD = PriorCCD;
	//Иначе
	//	СтруктураInvoiceLine.PriorCCD = PriorCCD;
	//КонецЕсли;
	// } RGS VShamin 25.08.2015 11:33:22 - исключаем поля 
	
	// TNVED
	TNVED = СокрЛП(InvoiceLine.TNVED);
	Если ЗначениеЗаполнено(TNVED) Тогда
		СтруктураInvoiceLine.TNVED = TNVED;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивTNVEDNo, TNVED);
	КонецЕсли;
	
	// { RGS VShamin 22.09.2015 15:21:35 - 
	// PermitsRequired
	PermitsRequired = СокрЛП(InvoiceLine.PermitsRequired);
	Если ЗначениеЗаполнено(PermitsRequired) Тогда
		СтруктураInvoiceLine.PermitsRequired = PermitsRequired;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивPermitsRequired, PermitsRequired);
	КонецЕсли;

	// COORequired
	COORequired = СокрЛП(InvoiceLine.COORequired);
	Если ЗначениеЗаполнено(COORequired) Тогда
		СтруктураInvoiceLine.COORequired = COORequired;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивCOORequired, COORequired);
	КонецЕсли;
	// } RGS VShamin 22.09.2015 15:21:36 - 
	
	// GUIDs
	Если ЗначениеЗаполнено(InvoiceLine.GUIDSP) Тогда
		СтруктураInvoiceLine.Вставить("УникальныйИдентификаторПриемника", InvoiceLine.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(InvoiceLine.GUIDRIET) Тогда
		СтруктураInvoiceLine.Вставить("GUIDRIET", InvoiceLine.GUIDRIET);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийParcelLeg6(ТекстОшибок, СтруктураParcel, Parcel, СтруктураТекстовыхЗначенийКодов)
	
	СтруктураParcel = Новый Структура("No,ParcelСсылка,LengthCorrected,WidthCorrected,HeightCorrected,"+
		"GrossWeightCorrected,Repacked,HazardClass");
		
	// Parcel No
	ParcelNo = СокрЛП(Parcel.No);
	Если Не ЗначениеЗаполнено(ParcelNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Parcel no. is empty!");
		Возврат;
	Иначе
		СтруктураParcel.No = ParcelNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивParcelNo, ParcelNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Parcel no. " + ParcelNo + ": ";
	
	// Hazard Class
	HazardClass = СокрЛП(Parcel.HazardClass);
	Если Не ЗначениеЗаполнено(HazardClass) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Hazard class is empty!");
	Иначе
		СтруктураParcel.HazardClass = HazardClass;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивHazardClasses, HazardClass);
	КонецЕсли;
	
	// Length Corrected
	СтруктураParcel.LengthCorrected = Parcel.LengthCorrected;
	// { RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	//Если Не ЗначениеЗаполнено(СтруктураParcel.LengthCorrected) Тогда
	//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Length corrected is empty!");
	//КонецЕсли;
	// } RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	
	// Width corrected
	СтруктураParcel.WidthCorrected = Parcel.WidthCorrected;
	// { RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	//Если Не ЗначениеЗаполнено(СтруктураParcel.WidthCorrected) Тогда
	//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Width corrected is empty!");
	//КонецЕсли;
	// } RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	
	// Height corrected
	СтруктураParcel.HeightCorrected = Parcel.HeightCorrected;
	// { RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	//Если Не ЗначениеЗаполнено(СтруктураParcel.HeightCorrected) Тогда
	//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Height corrected is empty!");
	//КонецЕсли;
	// } RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	
	// Gross Weight Corrected
	СтруктураParcel.GrossWeightCorrected = Parcel.GrossWeightCorrected;
	// { RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	//Если Не ЗначениеЗаполнено(СтруктураParcel.GrossWeightCorrected) Тогда
	//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Gross Weight Corrected is empty!");
	//КонецЕсли;
	// } RGS VShamin 09.10.2015 3:12:29 - Corrected заполняются в RIET
	
	// Repacked
	СтруктураParcel.Repacked = Parcel.Repacked;
	
	Если ЗначениеЗаполнено(Parcel.GUIDSP) Тогда
		СтруктураParcel.Вставить("УникальныйИдентификаторПриемника", Parcel.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(Parcel.GUIDRIET) Тогда
		СтруктураParcel.Вставить("GUIDRIET", Parcel.GUIDRIET);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийDOC(ТекстОшибок, СтруктураDOC, DOC, СтруктураТекстовыхЗначенийКодов)
	
	// { RGS VShamin 25.04.2016 10:34:42 - S-I-0001602
	//СтруктураDOC = Новый Структура("No,DOCСсылка,Accepted,CCAFirstResponse,Received,ManualStatuses");
	СтруктураDOC = Новый Структура("No,DOCСсылка,Accepted,CCAFirstResponse,Received,ManualStatuses,Version");
	// } RGS VShamin 25.04.2016 10:34:49 - S-I-0001602
		
	// DOC No
	DOCNo = СокрЛП(DOC.No);
	Если Не ЗначениеЗаполнено(DOCNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "DOC no. is empty!");
		Возврат;
	Иначе
		СтруктураDOC.No = DOCNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивDOCNo, DOCNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For DOC no. " + DOCNo + ": ";
	
	// Accepted
	СтруктураDOC.Accepted = DOC.Accepted;
	
	// CCAFirstResponse
	СтруктураDOC.CCAFirstResponse = DOC.CCAFirstResponse;
	
	// Received
	СтруктураDOC.Received = DOC.Received;
	
	// GUIDs
	Если ЗначениеЗаполнено(DOC.GUIDSP) Тогда
		СтруктураDOC.Вставить("УникальныйИдентификаторПриемника", DOC.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(DOC.GUIDRIET) Тогда
		СтруктураDOC.Вставить("GUIDRIET", DOC.GUIDRIET);
	КонецЕсли;
	
	// { RGS VShamin 25.04.2016 10:04:24 - S-I-0001602
	// Version
	DOCVersion = СокрЛП(DOC.Version);
	Если Не ЗначениеЗаполнено(DOCVersion) Тогда
		СтруктураDOC.Version = 0;
	Иначе
		СтруктураDOC.Version = Число(DOCVersion);
	КонецЕсли;
	// } RGS VShamin 25.04.2016 10:05:29 - S-I-0001602
	
	// ManualStatuses
	МассивСтруктурManualStatuses = Новый Массив();
	
	Для Каждого ManualStatus из DOC.ManualStatuses Цикл 
		
		СтруктураManualStatus = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийManualStatus(ТекстОшибок, СтруктураManualStatus, ManualStatus, DOC, СтруктураТекстовыхЗначенийКодов);
		МассивСтруктурManualStatuses.Добавить(СтруктураManualStatus);
		
	КонецЦикла;	
	
	СтруктураDOC.ManualStatuses = МассивСтруктурManualStatuses;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийManualStatus(ТекстОшибок, СтруктураManualStatus, ManualStatus, DOC, СтруктураТекстовыхЗначенийКодов)
	
	СтруктураManualStatus = Новый Структура("No,Date,Status,User,Comment");
	
	// No
	СтруктураManualStatus.No = ManualStatus.No;
	
	ПрефиксОшибки = "For DOC no. " + DOC.No + " in manual statuses (" + ManualStatus.No + "): ";
	
	// Date
	СтруктураManualStatus.Date = ManualStatus.Date;
	
	// Status
	Status = СокрЛП(ManualStatus.Status);
	Если Не ЗначениеЗаполнено(Status) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Status is empty!");
	Иначе
		СтруктураManualStatus.Status = Status;
	КонецЕсли;
	
	// User
	User = СокрЛП(ManualStatus.User);
	Если Не ЗначениеЗаполнено(User) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "User is empty!");
	Иначе
		СтруктураManualStatus.User = User;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивUser, User);
	КонецЕсли;
	
	// Comment
	СтруктураManualStatus.Comment = СокрЛП(ManualStatus.Comment);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийShipment(ТекстОшибок, СтруктураShipment, Shipment, СтруктураТекстовыхЗначенийКодов)
	
	// { RGS VShamin 25.08.2015 11:39:12 - исключаем поля 
	//СтруктураShipment = Новый Структура("No,ShipmentСсылка,HouseWB,WB2,WB3,WB4,TotalWBWeight,
	//	|ActualPOA,ETD,ATD,PreAlertETA,ETA,ATA,CollectedFromPort,PreAlert,DoxForCCA,DoxRcvd,
	//	|InCustoms,Cleared,InfoOnHazardClasses,Inspection,InspectionStart,InspectionEnd,
	//	|CCAJobReference,ConditionalRelease,CCDNumber");
	СтруктураShipment = Новый Структура("No,ShipmentСсылка,HouseWB,WB2,WB3,WB4,TotalWBWeight,
		|ActualPOA,ETD,ATD,PreAlertETA,ETA,ATA,CollectedFromPort,PreAlert,DoxRcvd,
		|InCustoms,Cleared,Inspection,InspectionStart,InspectionEnd,
		|CCAJobReference,ConditionalRelease,CCDNumber,PreInspection,PreInspectionStart,PreInspectionEnd,
		|CCACurrentComment,PiecesQty,PermitsRequested,PermitsObtained");
	// } RGS VShamin 25.08.2015 11:39:12 - исключаем поля 
		
	ShipmentNo = СокрЛП(Shipment.No);
	Если Не ЗначениеЗаполнено(ShipmentNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Shipment no. is empty!");
		Возврат;
	Иначе
		СтруктураShipment.No = ShipmentNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивShipmentNo, ShipmentNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Shipment no. " + ShipmentNo + ": ";
	
	СтруктураShipment.HouseWB = ?(Shipment.HouseWB = Неопределено, "", СокрЛП(Shipment.HouseWB));
	СтруктураShipment.WB2 = ?(Shipment.WB2 = Неопределено, "", СокрЛП(Shipment.WB2));
	СтруктураShipment.WB3 = ?(Shipment.WB3 = Неопределено, "", СокрЛП(Shipment.WB3));
	СтруктураShipment.WB4 = ?(Shipment.WB4 = Неопределено, "", СокрЛП(Shipment.WB4));
	СтруктураShipment.TotalWBWeight = ?(Shipment.TotalWBWeight = Неопределено, 0, Shipment.TotalWBWeight);
	СтруктураShipment.ETD = Shipment.ETD;
	СтруктураShipment.ATD = ?(Shipment.ATD = Неопределено, '00010101', Shipment.ATD);
	СтруктураShipment.PreAlertETA = ?(Shipment.PreAlertETA = Неопределено, '00010101', Shipment.PreAlertETA);
	СтруктураShipment.ETA = ?(Shipment.ETA = Неопределено, '00010101', Shipment.ETA);
	СтруктураShipment.ATA = ?(Shipment.ATA = Неопределено, '00010101', Shipment.ATA);
	СтруктураShipment.CollectedFromPort = ?(Shipment.CollectedFromPort = Неопределено, '00010101', Shipment.CollectedFromPort);
	СтруктураShipment.PreAlert = ?(Shipment.PreAlert = Неопределено, '00010101', Shipment.PreAlert);
	// { RGS VShamin 25.08.2015 11:39:36 - исключаем поля
	//СтруктураShipment.DoxForCCA = ?(Shipment.DoxForCCA = Неопределено, '00010101', Shipment.DoxForCCA);
	// } RGS VShamin 25.08.2015 11:39:36 - исключаем поля
	СтруктураShipment.DoxRcvd = ?(Shipment.DoxRcvd = Неопределено, '00010101', Shipment.DoxRcvd);
	СтруктураShipment.InCustoms = ?(Shipment.InCustoms = Неопределено, '00010101', Shipment.InCustoms);
	СтруктураShipment.Cleared = ?(Shipment.Cleared = Неопределено, '00010101', Shipment.Cleared);
	// { RGS VShamin 25.08.2015 11:40:50 - исключаем поля
	//СтруктураShipment.InfoOnHazardClasses = ?(Shipment.InfoOnHazardClasses = Неопределено, "", СокрЛП(Shipment.InfoOnHazardClasses));
	// } RGS VShamin 25.08.2015 11:40:51 - исключаем поля
	// { RGS AGorlenko 22.12.2015 16:21:26 - S-I-0001434
	СтруктураShipment.PreInspection = ?(Shipment.PreInspection = Неопределено, Ложь, Shipment.PreInspection);
	СтруктураShipment.PreInspectionStart = ?(Shipment.PreInspectionStart = Неопределено, '00010101', Shipment.PreInspectionStart);
	СтруктураShipment.PreInspectionEnd = ?(Shipment.PreInspectionEnd = Неопределено, '00010101', Shipment.PreInspectionEnd);
	// } RGS AGorlenko 22.12.2015 16:21:27 - S-I-0001434
	СтруктураShipment.Inspection = ?(Shipment.Inspection = Неопределено, Ложь, Shipment.Inspection);
	СтруктураShipment.InspectionStart = ?(Shipment.InspectionStart = Неопределено, '00010101', Shipment.InspectionStart);
	СтруктураShipment.InspectionEnd = ?(Shipment.InspectionEnd = Неопределено, '00010101', Shipment.InspectionEnd);
	СтруктураShipment.CCAJobReference = ?(Shipment.CCAJobReference = Неопределено, "", СокрЛП(Shipment.CCAJobReference));
	СтруктураShipment.ConditionalRelease = ?(Shipment.ConditionalRelease = Неопределено, Ложь, Shipment.ConditionalRelease);
	СтруктураShipment.CCDNumber = СокрЛП(Shipment.CCDNumber);
	СтруктураShipment.CCACurrentComment = СокрЛП(Shipment.CCACurrentComment);
	СтруктураShipment.PiecesQty = Shipment.PiecesQty;
	СтруктураShipment.PermitsRequested = Shipment.PermitsRequested;
	СтруктураShipment.PermitsObtained = Shipment.PermitsObtained;
	
	ActualPOA = СокрЛП(Shipment.ActualPOA);
	Если ЗначениеЗаполнено(ActualPOA) Тогда
		СтруктураShipment.ActualPOA = ActualPOA;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивActualPOA, ActualPOA);
	КонецЕсли;
	
	// GUIDs
	Если ЗначениеЗаполнено(Shipment.GUIDSP) Тогда
		СтруктураShipment.Вставить("УникальныйИдентификаторПриемника", Shipment.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(Shipment.GUIDRIET) Тогда
		СтруктураShipment.Вставить("GUIDRIET", Shipment.GUIDRIET);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураТекстовыхЗначенийLeg7

Функция ПолучитьСтруктуруWarehouseFrom(КодWarehouse)
	
	// { RGS AGorlenko 08.05.2014 11:46:22 - убираем префикс
	//СтруктураСклада = Новый Структура("Leg7Warehouse,WarehouseFrom,Prefix");
	СтруктураСклада = Новый Структура("Leg7Warehouse,WarehouseFrom");
	// } RGS AGorlenko 08.05.2014 11:46:30 - убираем префикс
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодWarehouse", КодWarehouse);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ServiceProviders.DefaultWarehouse КАК WarehouseFrom,
		// { RGS AGorlenko 08.05.2014 11:47:29 - убираем префикс
		//|	ServiceProviders.Prefix КАК Prefix,
		// } RGS AGorlenko 08.05.2014 11:47:31 - убираем префикс
		|	ServiceProviders.Ссылка КАК Leg7Warehouse
		|ИЗ
		|	Справочник.ServiceProviders КАК ServiceProviders
		|ГДЕ
		|	НЕ ServiceProviders.ПометкаУдаления
		|	И ServiceProviders.DefaultWarehouse.Код = &КодWarehouse";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		СтруктураСклада.WarehouseFrom = Выборка.WarehouseFrom;
		// { RGS AGorlenko 08.05.2014 11:47:43 - убираем префикс
		//СтруктураСклада.Prefix = Выборка.Prefix;
		// } RGS AGorlenko 08.05.2014 11:47:54 - убираем префикс
		СтруктураСклада.Leg7Warehouse = Выборка.Leg7Warehouse;
	КонецЕсли;
	
	Возврат СтруктураСклада;
	
КонецФункции

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийTrip(ТекстОшибок, СтруктураTrip, Trip, СтруктураТекстовыхЗначенийКодов, DraftFinal)
	
	СтруктураTrip = Новый Структура("TripNo,Draft,ETD,Final,ATD,ServiceProvider,МассивСтруктурDestinationETA,WarehouseFrom,Equipment,EquipmentNo,МассивСтруктурParcels,Comment");
	
	BaseTrip = Trip.Trip;
	
	// Trip No
	TripNo = СокрЛП(BaseTrip.No);
	Если Не TripNoСоответствуетПравилуНумерации(TripNo, СтруктураТекстовыхЗначенийКодов.МассивПрефиксовСкладов) Тогда
		ДобавитьСтроку(ТекстОшибок, "Trip no. is empty or do not comply with the numbering!");
		Возврат;
	иначе
		СтруктураTrip.TripNo = TripNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивTripNo, TripNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Trip no. " + TripNo + ": ";
                            	
	Если DraftFinal = "Draft" Тогда 
		
		// Draft
		СтруктураTrip.Draft = Trip.Draft;
		Если Не ЗначениеЗаполнено(СтруктураTrip.Draft) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Draft is empty!");
		КонецЕсли;
		
		// ETD
		СтруктураTrip.ETD = Trip.ETD;
		Если Не ЗначениеЗаполнено(СтруктураTrip.ETD) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ETD is empty!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураTrip.Draft) И ЗначениеЗаполнено(СтруктураTrip.ETD) И СтруктураTrip.Draft > СтруктураTrip.ETD Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ETD " + Формат(СтруктураTrip.ETD, "ДЛФ=D") + " is earlier than Draft " + Формат(СтруктураTrip.Draft, "ДЛФ=D") + "!");
		КонецЕсли;
		
	иначе
		
		// Final
		СтруктураTrip.Final = Trip.Final;
		Если Не ЗначениеЗаполнено(СтруктураTrip.Final) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Final is empty!");
		КонецЕсли;
		
		// ATD
		СтруктураTrip.ATD = Trip.ATD;
		Если Не ЗначениеЗаполнено(СтруктураTrip.ATD) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ATD is empty!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураTrip.Final) И ЗначениеЗаполнено(СтруктураTrip.ATD) И СтруктураTrip.Final > СтруктураTrip.ATD Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ATD " + Формат(СтруктураTrip.ATD, "ДЛФ=D") + " is earlier than Final " + Формат(СтруктураTrip.Final, "ДЛФ=D") + "!");
		КонецЕсли;
		
		// Equipment No
		СтруктураTrip.EquipmentNo = СокрЛП(Trip.EquipmentNo);
		
	КонецЕсли;
	      	 		
	// Destinations ETA
	СтруктураTrip.МассивСтруктурDestinationETA = Новый Массив;
	Для Каждого ЭлементСпискаDestinationETA из Trip.DestinationETA Цикл 
		
		// { RGS VShamin 04.08.2015 13:24:26 - S-I-0001168
		//СтруктураDestinationETA = Новый Структура("WarehouseTo,LegalEntity,SoldTo,BORG,Waybill,ETA,ATA");
		СтруктураDestinationETA = Новый Структура("WarehouseTo,LegalEntity,SoldTo,BORG,Waybill,ETA,ATA,CREW");
		// } RGS VShamin 04.08.2015 13:25:06 - S-I-0001168
		
		// Warehouse To
		WarehouseTo = СокрЛП(ЭлементСпискаDestinationETA.WarehouseTo);
		Если Не ЗначениеЗаполнено(WarehouseTo) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Warehouse To in Destination ETA is empty!");
		иначе
			СтруктураDestinationETA.WarehouseTo = WarehouseTo;
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивWarehouse, WarehouseTo);
		КонецЕсли;
		
		// Legal Entity
		СтруктураDestinationETA.LegalEntity = СокрЛП(ЭлементСпискаDestinationETA.LegalEntity);
		Если ЗначениеЗаполнено(СтруктураDestinationETA.LegalEntity) Тогда
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивLegalEntities, СтруктураDestinationETA.LegalEntity);
		КонецЕсли;
		
		// SoldTo
		СтруктураDestinationETA.SoldTo = СокрЛП(ЭлементСпискаDestinationETA.SoldTo);
		Если ЗначениеЗаполнено(СтруктураDestinationETA.SoldTo) Тогда
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивSoldTo, СтруктураDestinationETA.SoldTo);
		КонецЕсли;
		
		// BORG
		СтруктураDestinationETA.BORG = СокрЛП(ЭлементСпискаDestinationETA.BORG);
		Если ЗначениеЗаполнено(СтруктураDestinationETA.BORG) Тогда
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивBORGs, СтруктураDestinationETA.BORG);
		КонецЕсли;
		
		// { RGS VShamin 04.08.2015 13:26:02 - S-I-0001168
		// CREW
		СтруктураDestinationETA.CREW = СокрЛП(ЭлементСпискаDestinationETA.CREW);
		// } RGS VShamin 04.08.2015 13:26:06 - S-I-0001168
		
		// Waybill
		СтруктураDestinationETA.Waybill = СокрЛП(ЭлементСпискаDestinationETA.Waybill);
		
		// ETA
		СтруктураDestinationETA.ETA = ЭлементСпискаDestinationETA.ETA;
		Если Не ЗначениеЗаполнено(СтруктураDestinationETA.ETA) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ETA is empty!");
		иначе
			
			Если DraftFinal = "Draft" И ЗначениеЗаполнено(СтруктураTrip.ETD) И СтруктураDestinationETA.ETA < СтруктураTrip.ETD Тогда
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ETA in Warehouse To '" + WarehouseTo + "' " + Формат(СтруктураDestinationETA.ETA, "ДЛФ=D") + " is earlier than ETD " + Формат(СтруктураTrip.ETD, "ДЛФ=D") + "!");
			КонецЕсли;
			
			Если DraftFinal = "Final" И ЗначениеЗаполнено(СтруктураTrip.ATD) И СтруктураDestinationETA.ETA < СтруктураTrip.ATD Тогда
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ETA in Warehouse To '" + WarehouseTo + "' " + Формат(СтруктураDestinationETA.ETA, "ДЛФ=D") + " is earlier than ATD " + Формат(СтруктураTrip.ATD, "ДЛФ=D") + "!");
			КонецЕсли;

		КонецЕсли;

		// ATA
		СтруктураDestinationETA.ATA = ЭлементСпискаDestinationETA.ATA;
		Если ЗначениеЗаполнено(СтруктураTrip.ATD)  
			И ЗначениеЗаполнено(СтруктураDestinationETA.ATA)
			И СтруктураDestinationETA.ATA < СтруктураTrip.ATD Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ATA in Warehouse To '" + WarehouseTo + "' " + Формат(СтруктураDestinationETA.ATA, "ДЛФ=D") + " is earlier than ATD " + Формат(СтруктураTrip.ATD, "ДЛФ=D") + "!");
		КонецЕсли;
		
		СтруктураTrip.МассивСтруктурDestinationETA.Добавить(СтруктураDestinationETA);
		
	КонецЦикла;
	
	// Service Provider
	TripServiceProvider = СокрЛП(BaseTrip.ServiceProvider);
	Если Не ЗначениеЗаполнено(TripServiceProvider) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Service provider is empty!");
	иначе
		СтруктураTrip.ServiceProvider = TripServiceProvider;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивServiceProviders, TripServiceProvider);
	КонецЕсли;
	
	// Warehouse From
	WarehouseFrom = СокрЛП(BaseTrip.WarehouseFrom);
	Если Не ЗначениеЗаполнено(WarehouseFrom) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Warehouse From is empty!");
	иначе
		СтруктураTrip.WarehouseFrom = WarehouseFrom;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивWarehouse, WarehouseFrom);
	КонецЕсли;

	// Equipment
	Equipment = СокрЛП(BaseTrip.Equipment);
	Если Не ЗначениеЗаполнено(Equipment) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Equipment is empty!");
	иначе
		СтруктураTrip.Equipment = Equipment;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивEquipments, Equipment);
	КонецЕсли;	
	
	// Comment
	Попытка
		СтруктураTrip.Comment = BaseTrip.Comment;
	Исключение
	КонецПопытки;
	
	// список Parcels в трипе
	СтруктураTrip.МассивСтруктурParcels = Новый Массив;
	Для Каждого Parcel из BaseTrip.Parcel Цикл 
		СтруктураParcel = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийParcel(ТекстОшибок, СтруктураParcel, Parcel, СтруктураТекстовыхЗначенийКодов);
		СтруктураTrip.МассивСтруктурParcels.Добавить(СтруктураParcel);
	КонецЦикла;	
	 	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийParcel(ТекстОшибок, СтруктураParcel, Parcel, СтруктураТекстовыхЗначенийКодов, DeliveredParcel=Ложь)
	
	СтруктураParcel = Новый Структура("DeliveryDate,ParcelNo,WarehouseTo,NumOfParcels,SerialNo,PackingType,Length,LengthCorrected,Width,WidthCorrected,Height,HeightCorrected,"+
		"DIMsUOM,GrossWeight,GrossWeightCorrected,GrossWeightUOM,Repacked,HazardClass,Comment,МассивСтруктурItems");
		
	// Delivery Date
	Если DeliveredParcel Тогда
		
		СтруктураParcel.DeliveryDate = Parcel.DeliveryDate;
		Если Не ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) Тогда
			ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СокрЛП(Parcel.Parcel.ParcelNo) + ": " + "Delivery date is empty!");
		КонецЕсли;
		Parcel = Parcel.Parcel;
		
	КонецЕсли;
	    		
	// Parcel No
	ParcelNo = СокрЛП(Parcel.No);
	Если Не ЗначениеЗаполнено(ParcelNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Parcel no. is empty!");
		Возврат;
	иначе
		СтруктураParcel.ParcelNo = ParcelNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивParcelNo, ParcelNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Parcel no. " + ParcelNo + ": ";
	
	// Warehouse To
	WarehouseTo = СокрЛП(Parcel.WarehouseTo);
	Если Не ЗначениеЗаполнено(WarehouseTo) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Warehouse To is empty!");
	иначе
		СтруктураParcel.WarehouseTo = WarehouseTo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивWarehouse, WarehouseTo);
	КонецЕсли;
	
	// Num Of Parcels
	СтруктураParcel.NumOfParcels = Parcel.NumOfParcels;
	Если Не ЗначениеЗаполнено(СтруктураParcel.NumOfParcels) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Num of parcels is empty!");
	КонецЕсли;
	
	// Serial No
	Попытка
		СтруктураParcel.SerialNo = СокрЛП(Parcel.SerialNo);
	Исключение
	КонецПопытки;

	// Packing Type
	PackingType = ВРег(СокрЛП(Parcel.PackingType));
	Если Не ЗначениеЗаполнено(PackingType) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Packing type is empty!");
	иначе
		СтруктураParcel.PackingType = PackingType;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивPackingType, PackingType);
	КонецЕсли;
	
	// Hazard Class
	HazardClass = СокрЛП(Parcel.HazardClass);
	Если Не ЗначениеЗаполнено(HazardClass) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Hazard class is empty!");
	иначе
		СтруктураParcel.HazardClass = HazardClass;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивHazardClasses, HazardClass);
	КонецЕсли;

	// Length
	СтруктураParcel.Length = Parcel.Length;
	Если Не ЗначениеЗаполнено(СтруктураParcel.Length) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Length is empty!");
	КонецЕсли;
	
	// Length Corrected
	СтруктураParcel.LengthCorrected = Parcel.LengthCorrected;
	Если Не ЗначениеЗаполнено(СтруктураParcel.LengthCorrected) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Length corrected is empty!");
	КонецЕсли;
	
	// Width
	СтруктураParcel.Width = Parcel.Width;
	Если Не ЗначениеЗаполнено(СтруктураParcel.Width) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Width is empty!");
	КонецЕсли;
	
	// Width corrected
	СтруктураParcel.WidthCorrected = Parcel.WidthCorrected;
	Если Не ЗначениеЗаполнено(СтруктураParcel.WidthCorrected) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Width corrected is empty!");
	КонецЕсли;

	// Height
	СтруктураParcel.Height = Parcel.Height;
	Если Не ЗначениеЗаполнено(СтруктураParcel.Height) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Height is empty!");
	КонецЕсли;
	
	// Height corrected
	СтруктураParcel.HeightCorrected = Parcel.HeightCorrected;
	Если Не ЗначениеЗаполнено(СтруктураParcel.HeightCorrected) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Height corrected is empty!");
	КонецЕсли;
	
	// DIMs UOM
	DIMsUOM = СокрЛП(Parcel.DIMsUOM);
	Если Не ЗначениеЗаполнено(DIMsUOM) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "DIMs UOM is empty!");
	иначе
		СтруктураParcel.DIMsUOM = DIMsUOM;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивUOM, DIMsUOM);
	КонецЕсли;
	
	// Gross Weight
	СтруктураParcel.GrossWeight = Parcel.GrossWeight;
	Если Не ЗначениеЗаполнено(СтруктураParcel.GrossWeight) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Gross Weight is empty!");
	КонецЕсли;
	
	// Gross Weight Corrected
	СтруктураParcel.GrossWeightCorrected = Parcel.GrossWeightCorrected;
	Если Не ЗначениеЗаполнено(СтруктураParcel.GrossWeightCorrected) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Gross Weight Corrected is empty!");
	КонецЕсли;

	// Gross Weight UOM
	GrossWeightUOM = СокрЛП(Parcel.GrossWeightUOM);
	Если Не ЗначениеЗаполнено(GrossWeightUOM) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Gross weight UOM is empty!");
	иначе
		СтруктураParcel.GrossWeightUOM = GrossWeightUOM;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивUOM, GrossWeightUOM);
	КонецЕсли;
	
	// Repacked
	СтруктураParcel.Repacked = Parcel.Repacked;
	
	// Comment
	Попытка
		СтруктураParcel.Comment = Parcel.Comment;
	Исключение
	КонецПопытки;
	
	// { RGS AGorlenko 14.08.2014 14:51:20 - поддержка обмена изменениями. Сохраняем ГУИД объета подрядчика
	Если ЗначениеЗаполнено(Parcel.GUIDSP) Тогда
		СтруктураParcel.Вставить("УникальныйИдентификаторПриемника", Parcel.GUIDSP);
	КонецЕсли;
	// } RGS AGorlenko 14.08.2014 14:51:56 - поддержка обмена изменениями. Сохраняем ГУИД объета подрядчика
	// { RGS AGorlenko 17.11.2014 16:06:09 - обмен изменениями
	Если ЗначениеЗаполнено(Parcel.GUIDRIET) Тогда
		СтруктураParcel.Вставить("GUIDRIET", Parcel.GUIDRIET);
	КонецЕсли;
	// } RGS AGorlenko 17.11.2014 16:06:14 - обмен изменениями

	//список прибывших товаров
	
	МассивСтруктурItems = Новый Массив;
	
	Для Каждого DeliveredItem из Parcel.Item Цикл 
		
		СтруктураItem = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийItem(ТекстОшибок, DeliveredItem, СтруктураItem, СтруктураТекстовыхЗначенийКодов);
		МассивСтруктурItems.Добавить(СтруктураItem);
		
	КонецЦикла;	
	
	СтруктураParcel.МассивСтруктурItems = МассивСтруктурItems;
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийItem(ТекстОшибок, Item, СтруктураItem, СтруктураТекстовыхЗначенийКодов)
	
	СтруктураItem = Новый Структура("ItemNo,ItemСсылка,ImportLocal,ParentCompany,PONo,PartNo,SerialNo,Description,Qty,QtyUOM,NetWeight,NetWeightUOM");
				
	// Item No
	ItemNo = СокрЛП(Item.No);
	Если Не ЗначениеЗаполнено(ItemNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Item no. is empty!");
		Возврат;
	иначе
		СтруктураItem.ItemNo = ItemNo;
	КонецЕсли;
	
	ПрефиксОшибки = "For Item no. " + ItemNo + ": ";
	
	// Import/Local
	ImportLocal = СокрЛП(Item.Type);
	Если Не ЗначениеЗаполнено(ImportLocal) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "ImportLocal is empty!");
	иначе
		
		Если ImportLocal = "Import" ИЛИ ImportLocal = "Local" Тогда 
			
			СтруктураItem.ImportLocal = ImportLocal;
			
			Если ImportLocal = "Import" Тогда 
				ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивImportItemNo, ItemNo);
			ИначеЕсли ImportLocal = "Local" Тогда 
				ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивLocalItemNo, ItemNo);
			КонецЕсли;
			
		иначе
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Item can be 'Import' or 'Local'!");
		КонецЕсли;
		
	КонецЕсли;
	
	// Parent Company
	ParentCompany = СокрЛП(Item.ParentCompany);
	Если Не ЗначениеЗаполнено(ParentCompany) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Parent сompany is empty!");
	иначе
		СтруктураItem.ParentCompany = ParentCompany;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивParentCompanies, ParentCompany);
	КонецЕсли;
	
	// PO No
	Попытка
		СтруктураItem.PONo = СокрЛП(Item.PONo);
		Если ImportLocal = "Local" Тогда
			ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивPONo, СтруктураItem.PONo);
			ДобавитьРОСУчетомПреобразований(СтруктураТекстовыхЗначенийКодов.МассивPONo, СтруктураItem.PONo);
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	// Part No
	PartNo = СокрЛП(Item.PartNo);
	Если Не ЗначениеЗаполнено(PartNo) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Part no. is empty!");
	иначе
		СтруктураItem.PartNo = PartNo;
	КонецЕсли;
	
	// Serial No
	Попытка
		СтруктураItem.SerialNo = СокрЛП(Item.SerialNo);
	Исключение
	КонецПопытки;
	
	// Description
	Description = СокрЛП(Item.Description);
	Если Не ЗначениеЗаполнено(Description) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Description is empty!");
	иначе
		СтруктураItem.Description = Description;
	КонецЕсли;

	// Qty
	СтруктураItem.Qty = Item.Qty;
	Если Не ЗначениеЗаполнено(СтруктураItem.Qty) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Qty is empty!");
	КонецЕсли;

	// Qty UOM
	QtyUOM = СокрЛП(Item.QtyUOM);
	Если Не ЗначениеЗаполнено(QtyUOM) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Qty UOM is empty!");
	иначе
		СтруктураItem.QtyUOM = QtyUOM;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивUOM, QtyUOM);
	КонецЕсли;
	
	// Net weight
	Попытка
		СтруктураItem.NetWeight = Item.NetWeight;
	Исключение
	КонецПопытки;
	
	// Net weight UOM
	NetWeightUOM = Неопределено;
	Попытка
		NetWeightUOM = СокрЛП(Item.NetWeightUOM);
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтруктураItem.NetWeight) И Не ЗначениеЗаполнено(NetWeightUOM) Тогда
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Net weight UOM is empty!");
	КонецЕсли;

	Если ЗначениеЗаполнено(NetWeightUOM) Тогда
		СтруктураItem.NetWeightUOM = NetWeightUOM;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивUOM, NetWeightUOM);
	КонецЕсли;
	
		// { RGS AGorlenko 14.08.2014 14:51:20 - поддержка обмена изменениями. Сохраняем ГУИД объета подрядчика
	Если ЗначениеЗаполнено(Item.GUIDSP) Тогда
		СтруктураItem.Вставить("УникальныйИдентификаторПриемника", Item.GUIDSP);
	КонецЕсли;
	// } RGS AGorlenko 14.08.2014 14:51:56 - поддержка обмена изменениями. Сохраняем ГУИД объета подрядчика
	// { RGS AGorlenko 17.11.2014 16:06:09 - обмен изменениями
	Если ЗначениеЗаполнено(Item.GUIDRIET) Тогда
		СтруктураItem.Вставить("GUIDRIET", Item.GUIDRIET);
	КонецЕсли;
	// } RGS AGorlenko 17.11.2014 16:06:14 - обмен изменениями
	
КонецПроцедуры

#КонецОбласти

// { RGS LHristyc 20.06.2018 15:22:35 - S-I-0004942
#Область СтруктураТекстовыхЗначенийExportReports

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийExportRequest(ТекстОшибок, СтруктураExportRequest, ExportRequest, СтруктураТекстовыхЗначенийКодов)
	
	// { RGS DKazanskiy 09.10.2018 12:58:10 - S-I-0005759
	//СтруктураExportRequest = Новый Структура("No, ExportRequestСсылка, CCAGLReceived, FumigationRequired, FumigationCertificateRequired, FumigationDone, PermitsRequired, PermitsObtained, Version");
	//СтруктураExportRequest.FumigationCertificateRequired = ?(ExportRequest.FumigationCertificateRequired = Неопределено, Ложь, ExportRequest.FumigationCertificateRequired);
	//СтруктураExportRequest.FumigationDone = ?(ExportRequest.FumigationDone = Неопределено, '00010101', ExportRequest.FumigationDone);	
	СтруктураExportRequest = Новый Структура("No, ExportRequestСсылка, CCAGLReceived, FumigationRequired, PermitsRequired, PermitsObtained, Version");
	//СтруктураExportRequest.PermitsRequired = ?(ExportRequest.PermitsRequired = Неопределено, Ложь, ExportRequest.PermitsRequired);
	// } RGS DKazanskiy 09.10.2018 12:58:13 - S-I-0005759
	
	СтруктураExportRequest.CCAGLReceived = ?(ExportRequest.CCAGLReceived = Неопределено, '00010101', ExportRequest.CCAGLReceived);
	СтруктураExportRequest.FumigationRequired = ?(ExportRequest.FumigationRequired = Неопределено, Ложь, ExportRequest.FumigationRequired);	
	СтруктураExportRequest.PermitsObtained = ?(ExportRequest.PermitsObtained = Неопределено, '00010101', ExportRequest.PermitsObtained);
	// { RGS ASeryakov, 27.11.2018 S-I-0006375
	СтруктураExportRequest.PermitsRequired = ExportRequest.PermitsRequired;
	// { RGS ASeryakov, 27.11.2018 S-I-0006375
	
	ExportRequestNo = СокрЛП(ExportRequest.No);
	Если Не ЗначениеЗаполнено(ExportRequestNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Export Request no. is empty!");
		Возврат;
	Иначе
		СтруктураExportRequest.No = ExportRequestNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивExportRequestNo, ExportRequestNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Export Request no. " + ExportRequestNo + ": ";
	
	// GUIDs
	Если ЗначениеЗаполнено(ExportRequest.GUIDSP) Тогда
		СтруктураExportRequest.Вставить("УникальныйИдентификаторПриемника", ExportRequest.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(ExportRequest.GUIDRIET) Тогда
		СтруктураExportRequest.Вставить("GUIDRIET", ExportRequest.GUIDRIET);
	КонецЕсли;
	
	// Version
	ERVersion = СокрЛП(ExportRequest.Version);
	Если Не ЗначениеЗаполнено(ERVersion) Тогда
		СтруктураExportRequest.Version = 0;
	Иначе
		СтруктураExportRequest.Version = Число(ERVersion);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьСтруктуруТекстовыхЗначенийExportShipment(ТекстОшибок, СтруктураExportShipment, ExportShipment, СтруктураТекстовыхЗначенийКодов);
	
	СтруктураExportShipment = Новый Структура("No, ExportShipmentСсылка, SubmittedToCustoms, ReleasedFromCustoms, CCDNumber");
	
	СтруктураExportShipment.SubmittedToCustoms = ?(ExportShipment.SubmittedToCustoms = Неопределено, '00010101', ExportShipment.SubmittedToCustoms);
	СтруктураExportShipment.ReleasedFromCustoms = ?(ExportShipment.ReleasedFromCustoms = Неопределено, '00010101', ExportShipment.ReleasedFromCustoms);
	СтруктураExportShipment.CCDNumber = ?(ExportShipment.CCDNumber = Неопределено, "", ExportShipment.CCDNumber);
	//СтруктураExportShipment.InternationalWB1 = ?(ExportShipment.InternationalWB1 = Неопределено, "", СокрЛП(ExportShipment.InternationalWB1));
	//СтруктураExportShipment.InternationalETD = ?(ExportShipment.InternationalETD = Неопределено, '00010101', ExportShipment.InternationalETD);
	//СтруктураExportShipment.InternationalATD = ?(ExportShipment.InternationalATD = Неопределено, '00010101', ExportShipment.InternationalATD);
	//СтруктураExportShipment.PreAlertSent = ?(ExportShipment.PreAlertSent = Неопределено, '00010101', ExportShipment.PreAlertSent);
	//СтруктураExportShipment.InternationalETA = ?(ExportShipment.InternationalETA = Неопределено, '00010101', ExportShipment.InternationalETA);
	//СтруктураExportShipment.InternationalATA = ?(ExportShipment.InternationalATA = Неопределено, '00010101', ExportShipment.InternationalATA);
	
	ExportShipmentNo = СокрЛП(ExportShipment.No);
	Если Не ЗначениеЗаполнено(ExportShipmentNo) Тогда
		ДобавитьСтроку(ТекстОшибок, "Export Shipment no. is empty!");
		Возврат;
	Иначе
		СтруктураExportShipment.No = ExportShipmentNo;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивExportShipmentNo, ExportShipmentNo);
	КонецЕсли;
	
	ПрефиксОшибки = "For Export Shipment no. " + ExportShipmentNo + ": ";
	
	// GUIDs
	Если ЗначениеЗаполнено(ExportShipment.GUIDSP) Тогда
		СтруктураExportShipment.Вставить("УникальныйИдентификаторПриемника", ExportShipment.GUIDSP);
	КонецЕсли;
	Если ЗначениеЗаполнено(ExportShipment.GUIDRIET) Тогда
		СтруктураExportShipment.Вставить("GUIDRIET", ExportShipment.GUIDRIET);
	КонецЕсли;

	
КонецПроцедуры // } RGS LHristyc 20.06.2018 15:22:37 - S-I-0004942  

#КонецОбласти


//////////////////////////////////////////////////////////////////////////////
//// ТАБЛИЦЫ ОБЪЕКТОВ

Функция ПолучитьСтруктуруТаблицОбъектовLeg6(СтруктураТекстовыхЗначений)
	
	// Сформируем пакет запросов
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("МассивInvoiceLineNo", СтруктураТекстовыхЗначений.МассивInvoiceLineNo);
	СтруктураТекстов.Вставить("InvoiceLines",
	    "ВЫБРАТЬ
	    |	InvoiceLines.Ссылка КАК InvoiceLine,
	    |	ВЫРАЗИТЬ(InvoiceLines.Наименование КАК СТРОКА(30)) КАК InvoiceLineNo
	    |ИЗ
	    |	Справочник.СтрокиИнвойса КАК InvoiceLines
	    |ГДЕ
	    |	НЕ InvoiceLines.ПометкаУдаления
	    |	И InvoiceLines.Наименование В(&МассивInvoiceLineNo)");
		
	СтруктураПараметров.Вставить("МассивTNVEDNo", СтруктураТекстовыхЗначений.МассивTNVEDNo);
	СтруктураТекстов.Вставить("TNVEDs",
	    "ВЫБРАТЬ
	    |	TNVEDCodes.Ссылка КАК TNVED,
	    |	ВЫРАЗИТЬ(TNVEDCodes.Код КАК СТРОКА(12)) КАК TNVEDNo
	    |ИЗ
	    |	Справочник.TNVEDCodes КАК TNVEDCodes
	    |ГДЕ
	    |	НЕ TNVEDCodes.ПометкаУдаления
	    |	И TNVEDCodes.Код В(&МассивTNVEDNo)");
		
	СтруктураПараметров.Вставить("МассивDOCNo", СтруктураТекстовыхЗначений.МассивDOCNo);
	СтруктураТекстов.Вставить("DOCs",
	    "ВЫБРАТЬ
	    |	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка КАК DOC,
	    |	ВЫРАЗИТЬ(КонсолидированныйПакетЗаявокНаПеревозку.Номер КАК СТРОКА(25)) DOCNo
	    |ИЗ
	    |	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	    |ГДЕ
	    |	НЕ КонсолидированныйПакетЗаявокНаПеревозку.ПометкаУдаления
	    |	И КонсолидированныйПакетЗаявокНаПеревозку.Номер В(&МассивDOCNo)");
		
	СтруктураПараметров.Вставить("МассивUser", СтруктураТекстовыхЗначений.МассивUser);
	СтруктураТекстов.Вставить("Users",
	    "ВЫБРАТЬ
	    |	Пользователи.Ссылка КАК User,
	    |	ВЫРАЗИТЬ(Пользователи.Код КАК СТРОКА(25)) КАК UserCode
	    |ИЗ
	    |	Справочник.Пользователи КАК Пользователи
	    |ГДЕ
	    |	НЕ Пользователи.ПометкаУдаления
	    |	И Пользователи.Код В(&МассивUser)");
		
	СтруктураПараметров.Вставить("МассивShipmentNo", СтруктураТекстовыхЗначений.МассивShipmentNo);
	СтруктураТекстов.Вставить("Shipments",
	    "ВЫБРАТЬ
	    |	Поставка.Ссылка КАК Shipment,
	    |	ВЫРАЗИТЬ(Поставка.Номер КАК СТРОКА(10)) КАК ShipmentNo
	    |ИЗ
	    |	Документ.Поставка КАК Поставка
	    |ГДЕ
	    |	НЕ Поставка.ПометкаУдаления
	    |	И Поставка.Номер В(&МассивShipmentNo)");
		
	СтруктураПараметров.Вставить("МассивActualPOA", СтруктураТекстовыхЗначений.МассивActualPOA);
	СтруктураТекстов.Вставить("ActualPOAs",
	    "ВЫБРАТЬ
	    |	SeaAndAirPorts.Ссылка КАК ActualPOA,
	    |	ВЫРАЗИТЬ(SeaAndAirPorts.Код КАК СТРОКА(4)) КАК ActualPOACode
	    |ИЗ
	    |	Справочник.SeaAndAirPorts КАК SeaAndAirPorts
	    |ГДЕ
	    |	НЕ SeaAndAirPorts.ПометкаУдаления
	    |	И SeaAndAirPorts.Код В(&МассивActualPOA)");
		
	СтруктураПараметров.Вставить("МассивHazardClasses", СтруктураТекстовыхЗначений.МассивHazardClasses);
	СтруктураТекстов.Вставить("HazardClasses",
	    "ВЫБРАТЬ
	    |	HazardClasses.Ссылка КАК HazardClass,
	    |	ВЫРАЗИТЬ(HazardClasses.Код КАК СТРОКА(3)) КАК HazardClassCode
	    |ИЗ
	    |	Справочник.HazardClasses КАК HazardClasses
	    |ГДЕ
	    |	НЕ HazardClasses.ПометкаУдаления
	    |	И HazardClasses.Код В(&МассивHazardClasses)");
	
	// Выполним пакет запросов
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	// Разберем результаты
	СтруктураОбъектовБазы = Новый Структура("ТаблицаInvoiceLines, ТаблицаTNVEDs, ТаблицаDOCs,ТаблицаUsers");
	
	// Invoice lines
	СтруктураОбъектовБазы.Вставить("ТаблицаInvoiceLines", СтруктураРезультатов.InvoiceLines.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаInvoiceLines, "InvoiceLineNo");
	СтруктураОбъектовБазы.ТаблицаInvoiceLines.Индексы.Добавить("InvoiceLineNo");
		
	// TNVEDs
	СтруктураОбъектовБазы.Вставить("ТаблицаTNVEDs", СтруктураРезультатов.TNVEDs.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаTNVEDs, "TNVEDNo");
	СтруктураОбъектовБазы.ТаблицаTNVEDs.Индексы.Добавить("TNVEDNo");
	
	// DOCs
	СтруктураОбъектовБазы.Вставить("ТаблицаDOCs", СтруктураРезультатов.DOCs.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаDOCs, "DOCNo");
	СтруктураОбъектовБазы.ТаблицаDOCs.Индексы.Добавить("DOCNo");
	
	// Users
	СтруктураОбъектовБазы.Вставить("ТаблицаUsers", СтруктураРезультатов.Users.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаUsers, "UserCode");
	СтруктураОбъектовБазы.ТаблицаUsers.Индексы.Добавить("UserCode");
	
	// DOCStatuses
	СтруктураОбъектовБазы.Вставить("СоответствиеDOCStatuses", ПолучитьСоответствиеDOCStatuses());
	
	// Shipments
	СтруктураОбъектовБазы.Вставить("ТаблицаShipments", СтруктураРезультатов.Shipments.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаShipments, "ShipmentNo");
	СтруктураОбъектовБазы.ТаблицаShipments.Индексы.Добавить("ShipmentNo");
	
	// ActualPOAs
	СтруктураОбъектовБазы.Вставить("ТаблицаActualPOAs", СтруктураРезультатов.ActualPOAs.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаActualPOAs, "ActualPOACode");
	СтруктураОбъектовБазы.ТаблицаActualPOAs.Индексы.Добавить("ActualPOACode");
	
	// Hazard Class	
	СтруктураОбъектовБазы.Вставить("ТаблицаHazardClasses", СтруктураРезультатов.HazardClasses.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаHazardClasses, "HazardClassCode");
	СтруктураОбъектовБазы.ТаблицаHazardClasses.Индексы.Добавить("HazardClassCode");
	
	Возврат СтруктураОбъектовБазы;
	
КонецФункции

// { RGS LHristyc 21.06.2018 11:44:24 - S-I-0004942 
Функция ПолучитьСтруктуруТаблицОбъектовExportReports(СтруктураТекстовыхЗначений)
	
	// Сформируем пакет запросов
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
		
	СтруктураПараметров.Вставить("МассивExportRequestNo", СтруктураТекстовыхЗначений.МассивExportRequestNo);
	СтруктураТекстов.Вставить("ExportRequests",
	    "ВЫБРАТЬ
	    |	ExportRequest.Ссылка КАК ExportRequest,
	    |	ВЫРАЗИТЬ(ExportRequest.Номер КАК СТРОКА(11)) КАК ExportRequestNo
	    |ИЗ
	    |	Документ.ExportRequest КАК ExportRequest
	    |ГДЕ
	    |	НЕ ExportRequest.ПометкаУдаления
	    |	И ExportRequest.Номер В(&МассивExportRequestNo)");
	
	
	СтруктураПараметров.Вставить("МассивExportShipmentNo", СтруктураТекстовыхЗначений.МассивExportShipmentNo);
	СтруктураТекстов.Вставить("ExportShipments",
	    "ВЫБРАТЬ
	    |	ExportShipment.Ссылка КАК ExportShipment,
	    |	ВЫРАЗИТЬ(ExportShipment.Номер КАК СТРОКА(10)) КАК ExportShipmentNo
	    |ИЗ
	    |	Документ.ExportShipment КАК ExportShipment
	    |ГДЕ
	    |	НЕ ExportShipment.ПометкаУдаления
	    |	И ExportShipment.Номер В(&МассивExportShipmentNo)");
	
	
	
	// Выполним пакет запросов
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	// Разберем результаты
	//СтруктураОбъектовБазы = Новый Структура("ТаблицаInvoiceLines, ТаблицаTNVEDs, ТаблицаDOCs,ТаблицаUsers");
	СтруктураОбъектовБазы = Новый Структура();
	
	
	// ExportRequests
	СтруктураОбъектовБазы.Вставить("ТаблицаExportRequests", СтруктураРезультатов.ExportRequests.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаExportRequests, "ExportRequestNo");
	СтруктураОбъектовБазы.ТаблицаExportRequests.Индексы.Добавить("ExportRequestNo");
	
	// ExportShipments
	СтруктураОбъектовБазы.Вставить("ТаблицаExportShipments", СтруктураРезультатов.ExportShipments.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаExportShipments, "ExportShipmentNo");
	СтруктураОбъектовБазы.ТаблицаExportShipments.Индексы.Добавить("ExportShipmentNo");
	
	Возврат СтруктураОбъектовБазы;
	
КонецФункции // } RGS LHristyc 21.06.2018 11:44:25 - S-I-0004942  

Функция ПолучитьСоответствиеDOCStatuses()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Open", Перечисления.DOCStatuses.Open);
	Результат.Вставить("Pending CCA", Перечисления.DOCStatuses.PendingCCA);
	Результат.Вставить("Pending SLB", Перечисления.DOCStatuses.PendingSLB);
	Результат.Вставить("Pending TD", Перечисления.DOCStatuses.PendingTD);
	Результат.Вставить("Red light", Перечисления.DOCStatuses.RedLight);
	Результат.Вставить("Pending HUB", Перечисления.DOCStatuses.PendingHUB);
	Результат.Вставить("Pending EUC", Перечисления.DOCStatuses.PendingEUC);
	Результат.Вставить("Pending shipment", Перечисления.DOCStatuses.PendingShipment);
	Результат.Вставить("Closed", Перечисления.DOCStatuses.Closed);
	Результат.Вставить("Disposal", Перечисления.DOCStatuses.Disposal);
	Результат.Вставить("Pending certification", Перечисления.DOCStatuses.PendingCertification);
	Результат.Вставить("Pending MOC", Перечисления.DOCStatuses.PendingMOC);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицОбъектовLeg7(СтруктураТекстовыхЗначений)
	
	// Сформируем пакет запросов
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("МассивParcelNo", СтруктураТекстовыхЗначений.МассивParcelNo);
	СтруктураТекстов.Вставить("Parcels",
		"ВЫБРАТЬ
		|	Parcels.Ссылка КАК Parcel,
		|	ВЫРАЗИТЬ(Parcels.Код КАК СТРОКА(30)) КАК ParcelNo,
		|	Parcels.WarehouseTo КАК WarehouseTo, 
		|	Parcels.LocalOnly,
		// { RGS AGorlenko 08.05.2014 11:50:47 - убираем префиксы
		//|	Parcels.Prefix,
		// } RGS AGorlenko 08.05.2014 11:50:52 - убираем префиксы
		|	Parcels.DeliveredToWH 
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	НЕ Parcels.Отменен
		|	И Parcels.Код В(&МассивParcelNo)");
		
	СтруктураПараметров.Вставить("МассивImportItemNo", СтруктураТекстовыхЗначений.МассивImportItemNo);
	СтруктураТекстов.Вставить("ImportItems",
	    "ВЫБРАТЬ
	    |	Items.Ссылка КАК Item,
	    |	ВЫРАЗИТЬ(Items.Наименование КАК СТРОКА(30)) КАК ItemNo,
	    |	ПоставкаУпаковочныеЛисты.Ссылка.ATA КАК ShipmentATA
	    |ИЗ
	    |	Справочник.СтрокиИнвойса КАК Items
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	    |			ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
	    |		ПО Items.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
	    |ГДЕ
	    |	НЕ Items.LocalOnly
	    |	И НЕ Items.ПометкаУдаления
	    |	И Items.Наименование В(&МассивImportItemNo)
	    |	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен
	    |	И НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен");
					
	СтруктураПараметров.Вставить("МассивLocalItemNo", СтруктураТекстовыхЗначений.МассивLocalItemNo);
	СтруктураТекстов.Вставить("LocalItems",
	    "ВЫБРАТЬ
	    |	Items.Ссылка КАК Item,
	    |	ВЫРАЗИТЬ(Items.Наименование КАК СТРОКА(31)) КАК ItemNo
		// { RGS AGorlenko 08.05.2014 11:51:08 - убираем префиксы
	    //|	Items.Prefix
		// } RGS AGorlenko 08.05.2014 11:51:14 - убираем префиксы
	    |ИЗ
	    |	Справочник.СтрокиИнвойса КАК Items
	    |ГДЕ
	    |	Items.LocalOnly
	    |	И Items.Наименование В(&МассивLocalItemNo)");
		
	СтруктураПараметров.Вставить("МассивWarehouse", СтруктураТекстовыхЗначений.МассивWarehouse);
	СтруктураТекстов.Вставить("Warehouses",
	    "ВЫБРАТЬ
	    |	Warehouses.Ссылка КАК Warehouse,
	    |	ВЫРАЗИТЬ(Warehouses.Код КАК СТРОКА(50)) КАК WarehouseCode
	    |ИЗ
	    |	Справочник.Warehouses КАК Warehouses
	    |ГДЕ
	    |	Warehouses.Код В(&МассивWarehouse)
	    |	И (Warehouses.Warehouse
	    |			ИЛИ Warehouses.Port)");	
		
	СтруктураПараметров.Вставить("МассивPackingType", СтруктураТекстовыхЗначений.МассивPackingType);
	СтруктураТекстов.Вставить("PackingTypes",
	// { RGS VShamin 12.01.2016 20:26:12 - временный костыль (удалили BOX, а старые трипы загружались)
		//"ВЫБРАТЬ
		//|	PackingTypes.Ссылка КАК PackingType,
		//|	ВЫРАЗИТЬ(PackingTypes.Код КАК СТРОКА(25)) КАК PackingTypeCode
		//|ИЗ
		//|	Справочник.PackingTypes КАК PackingTypes
		//|ГДЕ
		//|	НЕ PackingTypes.ПометкаУдаления
		//|	И PackingTypes.Код В(&МассивPackingType)");
		"ВЫБРАТЬ
		|	PackingTypes.Ссылка КАК PackingType,
		|	ВЫРАЗИТЬ(PackingTypes.Код КАК СТРОКА(25)) КАК PackingTypeCode
		|ИЗ
		|	Справочник.PackingTypes КАК PackingTypes
		|ГДЕ
		|	(НЕ PackingTypes.ПометкаУдаления
		|			ИЛИ (ВЫРАЗИТЬ(PackingTypes.Код КАК СТРОКА(25))) = ""BOX"")
		|	И PackingTypes.Код В(&МассивPackingType)");
	// } RGS VShamin 12.01.2016 20:26:36 - временный костыль (удалили BOX, а старые трипы загружались)
		
	СтруктураПараметров.Вставить("МассивUOM", СтруктураТекстовыхЗначений.МассивUOM);
	СтруктураТекстов.Вставить("UOMs",
	    "ВЫБРАТЬ
	    |	UOMs.Ссылка КАК UOM,
	    |	ВЫРАЗИТЬ(UOMs.Код КАК СТРОКА(3)) КАК UOMCode
	    |ИЗ
	    |	Справочник.UOMs КАК UOMs
	    |ГДЕ
	    |	НЕ UOMs.ПометкаУдаления
	    |	И UOMs.Код В(&МассивUOM)");
		
	СтруктураПараметров.Вставить("МассивParentCompanies", СтруктураТекстовыхЗначений.МассивParentCompanies);
	СтруктураТекстов.Вставить("ParentCompanies",
	    "ВЫБРАТЬ
	    |	SoldTo.Ссылка КАК ParentCompany,
	    |	ВЫРАЗИТЬ(SoldTo.Код КАК СТРОКА(10)) КАК ParentCompanyCode
	    |ИЗ
	    |	Справочник.SoldTo КАК SoldTo
	    |ГДЕ
	    |	НЕ SoldTo.ПометкаУдаления
	    |	И SoldTo.Код В(&МассивParentCompanies)");	
		
	СтруктураПараметров.Вставить("МассивPONo", СтруктураТекстовыхЗначений.МассивPONo);
	СтруктураТекстов.Вставить("POLines",
	    "ВЫБРАТЬ
	    |	ВЫРАЗИТЬ(POLines.Владелец.Код КАК СТРОКА(10)) КАК PONo,
	    |	POLines.Ссылка КАК POLine,
	    |	POLines.КодПоставщика КАК PartNo,
	    |	POLines.Владелец.БОРГ.Компания КАК ParentCompany,
	    |	POLines.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	    |	POLines.Каталог КАК Catalog,
	    |	POLines.Классификатор КАК ERPTreatment,
	    |	POLines.Владелец.СтранаПоставщика КАК CountryOfOrigin,
	    |	POLines.КостЦентр КАК AU,
	    |	POLines.КостЦентр.DefaultActivity КАК AUActivity,
	    |	POLines.АктивитиКод КАК Activity,
	    |	POLines.Количество КАК Qty,
	    |	POLines.ЕдиницаИзмерения КАК QtyUOM,
	    |	POLines.Цена КАК Price,
	    |	POLines.Валюта КАК Currency
	    |ИЗ
	    |	Справочник.СтрокиЗаявкиНаЗакупку КАК POLines
	    |ГДЕ
	    |	POLines.Владелец.Код В(&МассивPONo)
	    |	И НЕ POLines.ПометкаУдаления");
		
	СтруктураПараметров.Вставить("МассивTripNo", СтруктураТекстовыхЗначений.МассивTripNo);
	СтруктураТекстов.Вставить("Trips",
	    "ВЫБРАТЬ
	    |	Trip.Ссылка КАК Trip,
	    |	Trip.Номер КАК TripNo
	    |ИЗ
	    |	Документ.Trip КАК Trip
	    |ГДЕ
	    |	Trip.Номер В(&МассивTripNo)");
		
	СтруктураПараметров.Вставить("МассивEquipments", СтруктураТекстовыхЗначений.МассивEquipments);
	СтруктураТекстов.Вставить("Equipments",
	    "ВЫБРАТЬ
	    |	Equipments.Ссылка КАК Equipment,
	    |	ВЫРАЗИТЬ(Equipments.Код КАК СТРОКА(50)) КАК EquipmentCode,
	    |	Equipments.EffectiveWeight
	    |ИЗ
	    |	Справочник.Equipments КАК Equipments
	    |ГДЕ
	    |	НЕ Equipments.ПометкаУдаления
	    |	И Equipments.Код В(&МассивEquipments)");	
		
	СтруктураПараметров.Вставить("МассивServiceProviders", СтруктураТекстовыхЗначений.МассивServiceProviders);
	СтруктураТекстов.Вставить("ServiceProviders",
	    "ВЫБРАТЬ
	    |	ServiceProviders.Ссылка КАК ServiceProvider,
	    |	ВЫРАЗИТЬ(ServiceProviders.Код КАК СТРОКА(50)) КАК ServiceProviderCode
	    |ИЗ
	    |	Справочник.ServiceProviders КАК ServiceProviders
	    |ГДЕ
	    |	НЕ ServiceProviders.ПометкаУдаления
	    |	И ServiceProviders.Код В(&МассивServiceProviders)");
		
	СтруктураПараметров.Вставить("МассивHazardClasses", СтруктураТекстовыхЗначений.МассивHazardClasses);
	СтруктураТекстов.Вставить("HazardClasses",
	    "ВЫБРАТЬ
	    |	HazardClasses.Ссылка КАК HazardClass,
	    |	ВЫРАЗИТЬ(HazardClasses.Код КАК СТРОКА(3)) КАК HazardClassCode
	    |ИЗ
	    |	Справочник.HazardClasses КАК HazardClasses
	    |ГДЕ
	    |	НЕ HazardClasses.ПометкаУдаления
	    |	И HazardClasses.Код В(&МассивHazardClasses)");
		
	// { RGS AGorlenko 15.04.2014 16:25:06 - S-I-0000686
	СтруктураПараметров.Вставить("МассивLegalEntities", СтруктураТекстовыхЗначений.МассивLegalEntities);
	СтруктураТекстов.Вставить("LegalEntities",
	    "ВЫБРАТЬ
	    |	LegalEntities.Ссылка КАК LegalEntity,
	    |	ВЫРАЗИТЬ(LegalEntities.Наименование КАК СТРОКА(100)) КАК LegalEntityDesc
	    |ИЗ
	    |	Справочник.LegalEntities КАК LegalEntities
	    |ГДЕ
	    |	НЕ LegalEntities.ПометкаУдаления
	    |	И LegalEntities.Наименование В(&МассивLegalEntities)");
	// } RGS AGorlenko 15.04.2014 16:25:15 - S-I-0000686
	СтруктураПараметров.Вставить("МассивSoldTo", СтруктураТекстовыхЗначений.МассивSoldTo);
	СтруктураТекстов.Вставить("SoldTo",
	    "ВЫБРАТЬ
	    |	SoldTo.Ссылка КАК SoldTo,
	    |	ВЫРАЗИТЬ(SoldTo.Код КАК СТРОКА(10)) КАК SoldToCode
	    |ИЗ
	    |	Справочник.SoldTo КАК SoldTo
	    |ГДЕ
	    |	НЕ SoldTo.ПометкаУдаления
	    |	И SoldTo.Код В(&МассивSoldTo)");
	СтруктураПараметров.Вставить("МассивBORGs", СтруктураТекстовыхЗначений.МассивBORGs);
	СтруктураТекстов.Вставить("BORGs",
	    "ВЫБРАТЬ
	    |	BORGs.Ссылка КАК BORG,
	    |	ВЫРАЗИТЬ(BORGs.Код КАК СТРОКА(4)) КАК BORGCode
	    |ИЗ
	    |	Справочник.BORGs КАК BORGs
	    |ГДЕ
	    |	НЕ BORGs.ПометкаУдаления
	    |	И BORGs.Код В(&МассивBORGs)");
		
	// Выполним пакет запросов
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	// Разберем результаты
	СтруктураОбъектовБазы = Новый Структура("ТаблицаParcels, ТаблицаImportItems, ТаблицаLocalItems, ТаблицаWarehouses, ТаблицаPackingTypes, ТаблицаUOMs, " +
	// { RGS AGorlenko 15.04.2014 16:29:08 - S-I-0000686
	//	"ТаблицаParentCompanies, ТаблицаPOLines, ТаблицаTrips, ТаблицаEquipments, ТаблицаServiceProviders, ТаблицаHazardClasses");
		"ТаблицаParentCompanies, ТаблицаPOLines, ТаблицаTrips, ТаблицаEquipments, ТаблицаServiceProviders, ТаблицаHazardClasses, ТаблицаLegalEntities,ТаблицаSoldTo,ТаблицаBORGs");
	// } RGS AGorlenko 15.04.2014 16:29:16 - S-I-0000686
	   			      									
	// Parcels	
	СтруктураОбъектовБазы.Вставить("ТаблицаParcels", СтруктураРезультатов.Parcels.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаParcels, "ParcelNo");
	СтруктураОбъектовБазы.ТаблицаParcels.Индексы.Добавить("ParcelNo");
		
	// Import Items	
	СтруктураОбъектовБазы.Вставить("ТаблицаImportItems", СтруктураРезультатов.ImportItems.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаImportItems, "ItemNo");
	СтруктураОбъектовБазы.ТаблицаImportItems.Индексы.Добавить("ItemNo");
	
	// Local Items	
	СтруктураОбъектовБазы.Вставить("ТаблицаLocalItems", СтруктураРезультатов.LocalItems.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаLocalItems, "ItemNo");
	СтруктураОбъектовБазы.ТаблицаLocalItems.Индексы.Добавить("ItemNo");

	// Warehouses	
	СтруктураОбъектовБазы.Вставить("ТаблицаWarehouses", СтруктураРезультатов.Warehouses.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаWarehouses, "WarehouseCode");
	СтруктураОбъектовБазы.ТаблицаWarehouses.Индексы.Добавить("WarehouseCode");

	// Packing Types	
	СтруктураОбъектовБазы.Вставить("ТаблицаPackingTypes", СтруктураРезультатов.PackingTypes.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаPackingTypes, "PackingTypeCode");
	СтруктураОбъектовБазы.ТаблицаPackingTypes.Индексы.Добавить("PackingTypeCode");

	// UOMs	
	СтруктураОбъектовБазы.Вставить("ТаблицаUOMs", СтруктураРезультатов.UOMs.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаUOMs, "UOMCode");
	СтруктураОбъектовБазы.ТаблицаUOMs.Индексы.Добавить("UOMCode");

	// Parent Companies	
	СтруктураОбъектовБазы.Вставить("ТаблицаParentCompanies", СтруктураРезультатов.ParentCompanies.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаParentCompanies, "ParentCompanyCode");
	СтруктураОбъектовБазы.ТаблицаParentCompanies.Индексы.Добавить("ParentCompanyCode");
	
	// PO Lines	
	СтруктураОбъектовБазы.Вставить("ТаблицаPOLines", СтруктураРезультатов.POLines.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаPOLines, "PONo");
	СтруктураОбъектовБазы.ТаблицаPOLines.Индексы.Добавить("PONo");
	
	// Trips	
	СтруктураОбъектовБазы.Вставить("ТаблицаTrips", СтруктураРезультатов.Trips.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаTrips, "TripNo");
	СтруктураОбъектовБазы.ТаблицаTrips.Индексы.Добавить("TripNo");
	
	// Equipments	
	СтруктураОбъектовБазы.Вставить("ТаблицаEquipments", СтруктураРезультатов.Equipments.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаEquipments, "EquipmentCode");
	СтруктураОбъектовБазы.ТаблицаEquipments.Индексы.Добавить("EquipmentCode");
	
	// Service providers	
	СтруктураОбъектовБазы.Вставить("ТаблицаServiceProviders", СтруктураРезультатов.ServiceProviders.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаServiceProviders, "ServiceProviderCode");
	СтруктураОбъектовБазы.ТаблицаServiceProviders.Индексы.Добавить("ServiceProviderCode");
	
	// Hazard Class	
	СтруктураОбъектовБазы.Вставить("ТаблицаHazardClasses", СтруктураРезультатов.HazardClasses.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаHazardClasses, "HazardClassCode");
	СтруктураОбъектовБазы.ТаблицаHazardClasses.Индексы.Добавить("HazardClassCode");
	
	// Legal entities
	СтруктураОбъектовБазы.Вставить("ТаблицаLegalEntities", СтруктураРезультатов.LegalEntities.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаLegalEntities, "LegalEntityDesc");
	СтруктураОбъектовБазы.ТаблицаLegalEntities.Индексы.Добавить("LegalEntityDesc");
	
	// Sold-To
	СтруктураОбъектовБазы.Вставить("ТаблицаSoldTo", СтруктураРезультатов.SoldTo.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаSoldTo, "SoldToCode");
	СтруктураОбъектовБазы.ТаблицаSoldTo.Индексы.Добавить("SoldToCode");
	
	// BORG
	СтруктураОбъектовБазы.Вставить("ТаблицаBORGs", СтруктураРезультатов.BORGs.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаBORGs, "BORGCode");
	СтруктураОбъектовБазы.ТаблицаBORGs.Индексы.Добавить("BORGCode");
	
	Возврат СтруктураОбъектовБазы;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
//// ПРОВЕРКА ДАННЫХ И ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ ДАННЫХ

#Область ПроверкаИЗаполнениеLeg6

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийLeg6(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена)
	
	//проверяем, что в базе есть элементы с указанными в файле ID (код, номер)
	
	// Invoice lines
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурInvoiceLines) Тогда 
		Для Каждого СтруктураInvoiceLine из СтруктураДанных.МассивСтруктурInvoiceLines Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийInvoiceLine(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураInvoiceLine);
		КонецЦикла;
	КонецЕсли;
	
	// Parcels
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурParcels) Тогда 
		Для Каждого СтруктураParcel из СтруктураДанных.МассивСтруктурParcels Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийParcel(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураParcel);
		КонецЦикла;
	КонецЕсли;
	
	// DOCs
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурDOCs) Тогда
		Для Каждого СтруктураDOC из СтруктураДанных.МассивСтруктурDOCs Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийDOC(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураDOC);
		КонецЦикла;
	КонецЕсли;
	
	// Shipments
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурShipments) Тогда
		Для Каждого СтруктураShipment из СтруктураДанных.МассивСтруктурShipments Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийShipment(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураShipment);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийInvoiceLine(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураInvoiceLine)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Invoice line
	Если СтруктураInvoiceLine.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For Invoice line no. " + СтруктураInvoiceLine.No + ": ";
	
	// TNVED
	Если ЗначениеЗаполнено(СтруктураInvoiceLine.TNVED) Тогда 
		СтрокаTNVED = СтруктураТаблицОбъектов.ТаблицаTNVEDs.Найти(СтруктураInvoiceLine.TNVED, "TNVEDNo");
		Если СтрокаTNVED = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find TNVED by Code '" + СтруктураInvoiceLine.TNVED + "'!");
			ДобавитьСтроку(ТекстОшибокRIET, ПрефиксОшибки + "failed to find TNVED by Code '" + СтруктураInvoiceLine.TNVED + "'!");
		иначе
			СтруктураInvoiceLine.TNVED = СтрокаTNVED.TNVED;
		КонецЕсли;
	Иначе
		СтруктураInvoiceLine.TNVED = Справочники.TNVEDCodes.ПустаяСсылка();
	КонецЕсли;
	
	// { RGS VShamin 22.09.2015 15:59:32 - 
	// PermitsRequired
	Если ЗначениеЗаполнено(СтруктураInvoiceLine.PermitsRequired) Тогда
		
		СтруктураInvoiceLine.PermitsRequired = ?(СтруктураInvoiceLine.PermitsRequired = "Yes"
			ИЛИ СтруктураInvoiceLine.PermitsRequired = "Да",
			Перечисления.YesNo.Yes, Перечисления.YesNo.No
		);
		
	Иначе
		
		СтруктураInvoiceLine.PermitsRequired = Перечисления.YesNo.ПустаяСсылка();
		
	КонецЕсли;
	
	// COORequired
	Если ЗначениеЗаполнено(СтруктураInvoiceLine.COORequired) Тогда
		
		СтруктураInvoiceLine.COORequired = ?(СтруктураInvoiceLine.COORequired = "Yes"
			ИЛИ СтруктураInvoiceLine.COORequired = "Да",
			Перечисления.YesNo.Yes, Перечисления.YesNo.No
		);
		
	Иначе
		
		СтруктураInvoiceLine.COORequired = Перечисления.YesNo.ПустаяСсылка();
		
	КонецЕсли;
	// } RGS VShamin 22.09.2015 15:59:32 - 
	
	InvoiceLineНайден = Ложь;
	// ищем по ссылке
	Если СтруктураInvoiceLine.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураInvoiceLine.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			InvoiceLineСсылка = Справочники.СтрокиИнвойса.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(InvoiceLineСсылка) Тогда
				InvoiceLineНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не InvoiceLineНайден Тогда
		// ищем по коду
		СтрокаInvoiceLine = СтруктураТаблицОбъектов.ТаблицаInvoiceLines.Найти(СтруктураInvoiceLine.No, "InvoiceLineNo");
		Если СтрокаInvoiceLine <> Неопределено Тогда
			InvoiceLineСсылка = СтрокаInvoiceLine.InvoiceLine;
			InvoiceLineНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если InvoiceLineНайден Тогда 
		
		СтруктураInvoiceLine.InvoiceLineСсылка = InvoiceLineСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Invoice line by Code '" + СтруктураInvoiceLine.No + "'!");
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийParcel(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураParcel)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Parcel
	Если СтруктураParcel.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For Parcel no. " + СтруктураParcel.No + ": ";
	
	ParcelНайден = Ложь;
	// ищем по ссылке
	Если СтруктураParcel.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураParcel.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			ParcelСсылка = Справочники.Parcels.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(ParcelСсылка) Тогда
				ParcelНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ParcelНайден Тогда
		// ищем по коду
		СтрокаParcel = СтруктураТаблицОбъектов.ТаблицаParcels.Найти(СтруктураParcel.No, "ParcelNo");
		Если СтрокаParcel <> Неопределено Тогда
			ParcelСсылка = СтрокаParcel.Parcel;
			ParcelНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ParcelНайден Тогда 
		
		СтруктураParcel.ParcelСсылка = ParcelСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Parcel by Code '" + СтруктураParcel.No + "'!");
		Возврат;
		
	КонецЕсли;
	
	// HazardClass
	Если ЗначениеЗаполнено(СтруктураParcel.HazardClass) Тогда 
		СтрокаHazardClass = СтруктураТаблицОбъектов.ТаблицаHazardClasses.Найти(СтруктураParcel.HazardClass, "HazardClassCode");
		Если СтрокаHazardClass = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Hazard Class by Code '" + СтруктураParcel.HazardClass + "'!");
		иначе
			СтруктураParcel.HazardClass = СтрокаHazardClass.HazardClass;
		КонецЕсли;
	Иначе
		СтруктураParcel.HazardClass = Справочники.HazardClasses.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийDOC(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураDOC)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// DOC
	Если СтруктураDOC.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For DOC no. " + СтруктураDOC.No + ": ";
	
	DOCНайден = Ложь;
	// ищем по ссылке
	Если СтруктураDOC.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураDOC.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			DOCСсылка = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(DOCСсылка) Тогда
				DOCНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не DOCНайден Тогда
		// ищем по коду
		СтрокаDOC = СтруктураТаблицОбъектов.ТаблицаDOCs.Найти(СтруктураDOC.No, "DOCNo");
		Если СтрокаDOC <> Неопределено Тогда
			DOCСсылка = СтрокаDOC.DOC;
			DOCНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если DOCНайден Тогда 
		
		СтруктураDOC.DOCСсылка = DOCСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find DOC by No '" + СтруктураDOC.No + "'!");
		Возврат;
		
	КонецЕсли;
	
	// manual statuses
	Для каждого ManualStatus Из СтруктураDOC.ManualStatuses Цикл
		ПроверитьИЗаполнитьСтруктуруЗначенийManualStatus(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураDOC, ManualStatus);
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийManualStatus(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураDOC, СтруктураManualStatus)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	ПрефиксОшибки = "For DOC no. " + СтруктураDOC.No + " in manual statuses (" + СтруктураManualStatus.No + "): ";
	
	// status
	Если ЗначениеЗаполнено(СтруктураManualStatus.Status) Тогда 
		Status = СтруктураТаблицОбъектов.СоответствиеDOCStatuses[СтруктураManualStatus.Status];
		Если Status = Неопределено Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Status by description '" + СтруктураManualStatus.Status + "'!");
		иначе
			СтруктураManualStatus.Status = Status;
		КонецЕсли;
	КонецЕсли;
	
	// user
	Если ЗначениеЗаполнено(СтруктураManualStatus.User) Тогда 
		СтрокаUser = СтруктураТаблицОбъектов.ТаблицаUsers.Найти(СтруктураManualStatus.User, "UserCode");
		Если СтрокаUser = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find User by Code '" + СтруктураManualStatus.User + "'!");
		иначе
			СтруктураManualStatus.User = СтрокаUser.User;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийShipment(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураShipment)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Shipment
	Если СтруктураShipment.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For Shipment no. " + СтруктураShipment.No + ": ";
	
	ShipmentНайден = Ложь;
	// ищем по ссылке
	Если СтруктураShipment.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураShipment.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			ShipmentСсылка = Документы.Поставка.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(ShipmentСсылка) Тогда
				ShipmentНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ShipmentНайден Тогда
		// ищем по коду
		СтрокаShipment = СтруктураТаблицОбъектов.ТаблицаShipments.Найти(СтруктураShipment.No, "ShipmentNo");
		Если СтрокаShipment <> Неопределено Тогда
			ShipmentСсылка = СтрокаShipment.Shipment;
			ShipmentНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ShipmentНайден Тогда 
		
		СтруктураShipment.ShipmentСсылка = ShipmentСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Shipment by No '" + СтруктураShipment.No + "'!");
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураShipment.ActualPOA) Тогда 
		СтрокаActualPOA = СтруктураТаблицОбъектов.ТаблицаActualPOAs.Найти(СтруктураShipment.ActualPOA, "ActualPOACode");
		Если СтрокаActualPOA = Неопределено Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find ActualPOA by Code '" + СтруктураShipment.ActualPOA + "'!");
		Иначе
			СтруктураShipment.ActualPOA = СтрокаActualPOA.ActualPOA;
		КонецЕсли;
	Иначе
		СтруктураShipment.ActualPOA = Справочники.SeaAndAirPorts.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// { RGS LHristyc 20.06.2018 17:47:07 - S-I-0004942
#Область ПроверкаИЗаполнениеExportReports

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийExportReports(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена)
	
	//проверяем, что в базе есть элементы с указанными в файле ID (код, номер)
	
	// ExportRequests
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурExportRequests) Тогда
		Для Каждого СтруктураExportRequest из СтруктураДанных.МассивСтруктурExportRequests Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийExportRequest(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных,  СтруктураExportRequest);
		КонецЦикла;
	КонецЕсли;
	
	// ExportShipments
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурExportShipments) Тогда
		Для Каждого СтруктураExportShipment из СтруктураДанных.МассивСтруктурExportShipments Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийExportShipment(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураExportShipment);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийExportRequest(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураExportRequest)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Export Request
	Если СтруктураExportRequest.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For Export Request no. " + СтруктураExportRequest.No + ": ";
	
	ExportRequestНайден = Ложь;
	// ищем по ссылке
	Если СтруктураExportRequest.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураExportRequest.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			ExportRequestСсылка = Документы.ExportRequest.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(ExportRequestСсылка) Тогда
				ExportRequestНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ExportRequestНайден Тогда
		// ищем по коду
		СтрокаExportRequest = СтруктураТаблицОбъектов.ТаблицаExportRequests.Найти(СтруктураExportRequest.No, "ExportRequestNo");
		Если СтрокаExportRequest <> Неопределено Тогда
			ExportRequestСсылка = СтрокаExportRequest.ExportRequest;
			ExportRequestНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ExportRequestНайден Тогда 
		
		СтруктураExportRequest.ExportRequestСсылка = ExportRequestСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Export Request by No '" + СтруктураExportRequest.No + "'!");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийExportShipment(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураExportShipment)
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Export Shipment
	Если СтруктураExportShipment.No = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПрефиксОшибки = "For Export Shipment no. " + СтруктураExportShipment.No + ": ";
	
	ExportShipmentНайден = Ложь;
	// ищем по ссылке
	Если СтруктураExportShipment.Свойство("GUIDRIET") Тогда
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураExportShipment.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			ExportShipmentСсылка = Документы.ExportShipment.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(ExportShipmentСсылка) Тогда
				ExportShipmentНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ExportShipmentНайден Тогда
		// ищем по коду
		СтрокаExportRequest = СтруктураТаблицОбъектов.ТаблицаExportShipments.Найти(СтруктураExportShipment.No, "ExportShipmentNo");
		Если СтрокаExportRequest <> Неопределено Тогда
			ExportShipmentСсылка = СтрокаExportRequest.ExportShipment;
			ExportShipmentНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ExportShipmentНайден Тогда 
		
		СтруктураExportShipment.ExportShipmentСсылка = ExportShipmentСсылка;
		
	Иначе
		
		ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Export Shipment by No '" + СтруктураExportShipment.No + "'!");
		Возврат;
		
	КонецЕсли;
КонецПроцедуры // } RGS LHristyc 20.06.2018 17:47:12 - S-I-0004942 

#КонецОбласти


#Область ПроверкаИЗаполнениеLeg7

Процедура ПроверитьИЗаполнитьСтруктуруЗначений(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена)
	
	//проверяем, что в базе есть элементы с указанными в файле ID (код, номер)
	//проверяем переупакованные парсели
	
	// сформируем массив всех импортных товаров по всем отчетам для проверки переупакованных парселей
	МассивImportItems = Новый Массив;
	
	// Delivered Parcels
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурDeliveredParcels) Тогда 
		
		Для Каждого СтруктураDeliveredParcel из СтруктураДанных.МассивСтруктурDeliveredParcels Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийParcels(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураDeliveredParcel, МассивImportItems, НастройкаОбмена);
		КонецЦикла;
		
	КонецЕсли;
	
	// Changed Parcels
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурChangedParcels) Тогда 
		
		Для Каждого СтруктураChangedParcel из СтруктураДанных.МассивСтруктурChangedParcels Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийParcels(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураChangedParcel, МассивImportItems, НастройкаОбмена);
		КонецЦикла;
		
	КонецЕсли;
	
	// Trips
	Для Каждого СтруктураTrip из СтруктураДанных.МассивСтруктурTrips Цикл 
			
		Для Каждого СтруктураParcel из СтруктураTrip.МассивСтруктурParcels Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийParcels(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураParcel, МассивImportItems, НастройкаОбмена);
		КонецЦикла;	
		
		ПроверитьИЗаполнитьСтруктуруЗначенийTrips(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураTrip, НастройкаОбмена);
		
	КонецЦикла;
		        	
	// проверим, что в переупакованных парселях товары не потерялись
	ПроверкаRepackedParcels(ТекстОшибок, СтруктураДанных, МассивImportItems);
	      	    
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийTrips(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураTrip, НастройкаОбмена)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Trip No
	Если СтруктураTrip.TripNo = Неопределено Тогда 
		Возврат;
	КонецЕсли;
							
	ПрефиксОшибки = "For Trip no. " + СтруктураTrip.TripNo + ": ";
	
	// Service provider
	Если ЗначениеЗаполнено(СтруктураTrip.ServiceProvider) Тогда 
		
		СтрокаServiceProvider = СтруктураТаблицОбъектов.ТаблицаServiceProviders.Найти(СтруктураTrip.ServiceProvider, "ServiceProviderCode");
		
		Если СтрокаServiceProvider = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Service provider by Code '" + СтруктураTrip.ServiceProvider + "'!");
		иначеЕсли ЗначениеЗаполнено(СтруктураTrip.Final)
			И СтрокаServiceProvider.ServiceProvider = Справочники.ServiceProviders.RFQ Тогда 
			//в Final Trip должен быть определен сервис провайдер
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Service provider can not be 'RFQ' in Final Trip!");
		иначе
			СтруктураTrip.ServiceProvider = СтрокаServiceProvider.ServiceProvider;
		КонецЕсли;	
		
	КонецЕсли;
	
	// Warehouse From
	Если ЗначениеЗаполнено(СтруктураTrip.WarehouseFrom) Тогда 
		СтрокаWarehouseFrom = СтруктураТаблицОбъектов.ТаблицаWarehouses.Найти(СтруктураTrip.WarehouseFrom, "WarehouseCode");
		Если СтрокаWarehouseFrom = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураTrip.WarehouseFrom + "'!");
			// { RGS AGorlenko 04.11.2014 15:59:50 - S-I-0000925
			ДобавитьСтроку(ТекстОшибокRIET, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураTrip.WarehouseFrom + "'!");
			// } RGS AGorlenko 04.11.2014 15:59:56 - S-I-0000925
		иначе
			СтруктураTrip.WarehouseFrom = СтрокаWarehouseFrom.Warehouse;
		КонецЕсли;
	КонецЕсли;
	
	//получим массив Warehouse to и Total Gross Weight KG из парселей трипа
	TotalGrossWeightKG = 0;
	МассивTripWarehouseTo = Новый Массив;
	
	Для Каждого СтруктураParcel из СтруктураTrip.МассивСтруктурParcels Цикл 
		
		Если ТипЗнч(СтруктураParcel.GrossWeightUOM) = Тип("СправочникСсылка.UOMs") Тогда
			Если СтруктураParcel.GrossWeightUOM = Справочники.UOMs.KG Тогда
				КоэффициентЕдиницыИзмеренияВеса = 1;
			Иначе
				КоэффициентЕдиницыИзмеренияВеса = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтруктураParcel.GrossWeightUOM, "ConversionFactor");
			КонецЕсли;
			TotalGrossWeightKG = TotalGrossWeightKG + (СтруктураParcel.GrossWeight * КоэффициентЕдиницыИзмеренияВеса);
		КонецЕсли;	

		Если ТипЗнч(СтруктураParcel.WarehouseTo) = Тип("СправочникСсылка.Warehouses") Тогда 
			ДобавитьВМассив(МассивTripWarehouseTo, СтруктураParcel.WarehouseTo);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураTrip.Draft) И СтруктураParcel.Свойство("DeliveredToWH") И СтруктураParcel.DeliveredToWH > СтруктураTrip.Draft Тогда 
			ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": Draft date of Trip '" + СтруктураTrip.TripNo + "' can not be earlier than Delivery date " + Формат(СтруктураParcel.DeliveredToWH, "ДЛФ=D") + "!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураTrip.Final) И СтруктураParcel.Свойство("DeliveredToWH") И СтруктураParcel.DeliveredToWH > СтруктураTrip.Final Тогда 
			ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": Final date of Trip '" + СтруктураTrip.TripNo + "' can not be earlier than Delivery date " + Формат(СтруктураParcel.DeliveredToWH, "ДЛФ=D") + "!");
		КонецЕсли;
		
		Для Каждого СтруктураItem из СтруктураParcel.МассивСтруктурItems Цикл 
			
			Если ЗначениеЗаполнено(СтруктураTrip.Draft) И СтруктураItem.Свойство("ShipmentATA") И СтруктураItem.ShipmentATA > СтруктураTrip.Draft Тогда 
				ДобавитьСтроку(ТекстОшибок, "For Item no. " + СтруктураItem.ItemNo + ": Draft date of Trip '" + СтруктураTrip.TripNo + "' can not be earlier than Shipment ATA " + Формат(СтруктураItem.ShipmentATA, "ДЛФ=D") + "!");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураTrip.Final) И СтруктураItem.Свойство("ShipmentATA") И СтруктураItem.ShipmentATA > СтруктураTrip.Final Тогда 
				ДобавитьСтроку(ТекстОшибок, "For Item no. " + СтруктураItem.ItemNo + ": Final date of Trip '" + СтруктураTrip.TripNo + "' can not be earlier than Shipment ATA " + Формат(СтруктураItem.ShipmentATA, "ДЛФ=D") + "!");
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	// Equipment
	Если ЗначениеЗаполнено(СтруктураTrip.Equipment) Тогда 
		СтрокаEquipment = СтруктураТаблицОбъектов.ТаблицаEquipments.Найти(СтруктураTrip.Equipment, "EquipmentCode");
		Если СтрокаEquipment = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Equipment by Code '" + СтруктураTrip.Equipment + "'!");
		иначе
			СтруктураTrip.Equipment = СтрокаEquipment.Equipment;
			
			// проверим, что gross weight меньше effective weight
			Если СтрокаEquipment.EffectiveWeight < TotalGrossWeightKG Тогда 
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "Total Gross weight of pracels '" + TotalGrossWeightKG + "' exceeds Effective weight of Equipment '" + СтрокаEquipment.EffectiveWeight + "'!");
			КонецЕсли;
									
		КонецЕсли;
	КонецЕсли;

	ЭтоFinalTrip = ЗначениеЗаполнено(СтруктураTrip.Final);
	// Destination ETA
	МассивDestinationsWarehouseTo = Новый Массив;
	Для Каждого СтруктураDestinationETA из СтруктураTrip.МассивСтруктурDestinationETA Цикл  
		
		СтрокаWarehouseTo = СтруктураТаблицОбъектов.ТаблицаWarehouses.Найти(СтруктураDestinationETA.WarehouseTo, "WarehouseCode");
		Если СтрокаWarehouseTo = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA Warehouse by Code '" + СтруктураDestinationETA.WarehouseTo + "'!");
			// { RGS AGorlenko 04.11.2014 15:59:50 - S-I-0000925
			ДобавитьСтроку(ТекстОшибокRIET, ПрефиксОшибки + "failed to find in Destination ETA Warehouse by Code '" + СтруктураDestinationETA.WarehouseTo + "'!");
			// } RGS AGorlenko 04.11.2014 15:59:56 - S-I-0000925
		иначе
			СтруктураDestinationETA.WarehouseTo = СтрокаWarehouseTo.Warehouse;
			ДобавитьВМассив(МассивDestinationsWarehouseTo, СтруктураDestinationETA.WarehouseTo);
		КонецЕсли;
		
		Если НЕ НастройкаОбмена.ЗаполнятьLEвТрипах Тогда
			
			СтрокаSoldTo = СтруктураТаблицОбъектов.ТаблицаSoldTo.Найти(СтруктураDestinationETA.SoldTo, "SoldToCode");
			Если СтрокаSoldTo = Неопределено Тогда  
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA Sold-To by code '" + СтруктураDestinationETA.SoldTo + "'!");
			Иначе
				СтруктураDestinationETA.SoldTo = СтрокаSoldTo.SoldTo;
			КонецЕсли;
			
			// { RGS VShamin 04.08.2015 13:28:25 - S-I-0001168
			//СтрокаBORG = СтруктураТаблицОбъектов.ТаблицаBORGs.Найти(СтруктураDestinationETA.BORG, "BORGCode");
			//Если СтрокаBORG = Неопределено Тогда  
			//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA BORG by code '" + СтруктураDestinationETA.BORG + "'!");
			//Иначе
			//	СтруктураDestinationETA.BORG = СтрокаBORG.BORG;
			//КонецЕсли;
			Если Не ЗначениеЗаполнено(СтруктураDestinationETA.CREW) Тогда
				СтрокаBORG = СтруктураТаблицОбъектов.ТаблицаBORGs.Найти(СтруктураDestinationETA.BORG, "BORGCode");
				Если СтрокаBORG = Неопределено Тогда  
					ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA BORG by code '" + СтруктураDestinationETA.BORG + "'!");
				Иначе
					СтруктураDestinationETA.BORG = СтрокаBORG.BORG;
				КонецЕсли;
			Иначе
				СтруктураDestinationETA.BORG = Справочники.BORGs.ПустаяСсылка();
			КонецЕсли;
			// } RGS VShamin 04.08.2015 13:28:30 - S-I-0001168
			
		Иначе
			
			// { RGS AGorlenko 15.04.2014 16:39:35 - S-I-0000686
			СтрокаLegalEntity = СтруктураТаблицОбъектов.ТаблицаLegalEntities.Найти(СтруктураDestinationETA.LegalEntity, "LegalEntityDesc");
			Если СтрокаLegalEntity = Неопределено Тогда  
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA Legal entity by description '" + СтруктураDestinationETA.LegalEntity + "'!");
			Иначе
				СтруктураDestinationETA.LegalEntity = СтрокаLegalEntity.LegalEntity;
			КонецЕсли;
			// } RGS AGorlenko 15.04.2014 16:39:44 - S-I-0000686
			
		КонецЕсли;
		
		Если ЭтоFinalTrip И ПустаяСтрока(СтруктураDestinationETA.Waybill) Тогда
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "for Warehouse = '" + СтруктураDestinationETA.WarehouseTo
				+ "' and Legal entity = '" + СтруктураDestinationETA.LegalEntity + "' waybill is empty!");
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим, что МассивDestinationsWarehouseTo соответствует МассивTripWarehouseTo
	Для Каждого ЭлементМассива из МассивTripWarehouseTo Цикл 
		
		Если МассивDestinationsWarehouseTo.Найти(ЭлементМассива) = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find in Destination ETA Warehouse '" + СокрЛП(ЭлементМассива.код) + "'!");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийParcels(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураParcel, МассивImportItems, НастройкаОбмена)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// Parcel
	Если СтруктураParcel.ParcelNo = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	        				
	ПрефиксОшибки = "For Parcel no. " + СтруктураParcel.ParcelNo + ": ";
	
	// Warehouse From (для изменных парселей)
	Если СтруктураParcel.Свойство("WarehouseFrom") Тогда
		Если ЗначениеЗаполнено(СтруктураParcel.WarehouseFrom) Тогда 
			СтрокаWarehouseFrom = СтруктураТаблицОбъектов.ТаблицаWarehouses.Найти(СтруктураParcel.WarehouseFrom, "WarehouseCode");
			Если СтрокаWarehouseFrom = Неопределено Тогда  
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураParcel.WarehouseFrom + "'!");
				// { RGS AGorlenko 04.11.2014 16:01:29 - S-I-0000925
				ДобавитьСтроку(ТекстОшибокRIET, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураParcel.WarehouseFrom + "'!");
				// } RGS AGorlenko 04.11.2014 16:01:31 - S-I-0000925
			иначе
				СтруктураParcel.WarehouseFrom = СтрокаWarehouseFrom.Warehouse;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Warehouse To
	Если ЗначениеЗаполнено(СтруктураParcel.WarehouseTo) Тогда 
		СтрокаWarehouseTo = СтруктураТаблицОбъектов.ТаблицаWarehouses.Найти(СтруктураParcel.WarehouseTo, "WarehouseCode");
		Если СтрокаWarehouseTo = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураParcel.WarehouseTo + "'!");
			// { RGS AGorlenko 04.11.2014 16:01:29 - S-I-0000925
			ДобавитьСтроку(ТекстОшибокRIET, ПрефиксОшибки + "failed to find Warehouse by Code '" + СтруктураParcel.WarehouseTo + "'!");
			// } RGS AGorlenko 04.11.2014 16:01:31 - S-I-0000925
		иначе
			СтруктураParcel.WarehouseTo = СтрокаWarehouseTo.Warehouse;
		КонецЕсли;
	КонецЕсли;
	
	// DIMs UOM
	Если ЗначениеЗаполнено(СтруктураParcel.DIMsUOM) Тогда 
		СтрокаDIMsUOM = СтруктураТаблицОбъектов.ТаблицаUOMs.Найти(СтруктураParcel.DIMsUOM, "UOMCode");
		Если СтрокаDIMsUOM = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find UOM by Code '" + СтруктураParcel.DIMsUOM + "'!");
		иначе
			СтруктураParcel.DIMsUOM = СтрокаDIMsUOM.UOM;
		КонецЕсли;
	КонецЕсли;
	
	// Gross Weight UOM
	Если ЗначениеЗаполнено(СтруктураParcel.GrossWeightUOM) Тогда 
		СтрокаGrossWeightUOM = СтруктураТаблицОбъектов.ТаблицаUOMs.Найти(СтруктураParcel.GrossWeightUOM, "UOMCode");
		Если СтрокаGrossWeightUOM = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find UOM by Code '" + СтруктураParcel.GrossWeightUOM + "'!");
		иначе
			СтруктураParcel.GrossWeightUOM = СтрокаGrossWeightUOM.UOM;
		КонецЕсли;
	КонецЕсли;
	
	// Hazard Class
	Если ЗначениеЗаполнено(СтруктураParcel.HazardClass) Тогда 
		СтрокаHazardClass = СтруктураТаблицОбъектов.ТаблицаHazardClasses.Найти(СтруктураParcel.HazardClass, "HazardClassCode");
		Если СтрокаHazardClass = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Hazard class by Code '" + СтруктураParcel.HazardClass + "'!");
		иначе
			СтруктураParcel.HazardClass = СтрокаHazardClass.HazardClass;
		КонецЕсли;
	КонецЕсли;

	//найдем Pacel по номеру и выгрузим массив Items
	МассивСтрокИнвойса = Новый Массив;
	
	ParcelНайден = Ложь;
	// ищем по ссылке
	Если СтруктураParcel.Свойство("GUIDRIET") Тогда
		
			// { RGS ASeryakov 24.05.2018 17:00:00 S-I-0005295
			Если НастройкаОбмена.Свойство("objRegExpGUID") И НЕ СоответствуетФорматуGUID(НастройкаОбмена.objRegExpGUID, СтруктураParcel.GUIDRIET) Тогда
				
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "For the formation of the object reference Parcel attribute GUIDRIET incorrect value '" + СтруктураParcel.GUIDRIET + "'!");
				Возврат;
				
			КонецЕсли;
			// } RGS ASeryakov 24.05.2018 17:00:00 S-I-0005295
		
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураParcel.GUIDRIET);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		Если ГУИД <> Неопределено Тогда
			ParcelСсылка = Справочники.Parcels.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(ParcelСсылка) Тогда
				ParcelНайден = Истина;
				РеквизитыParcel = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ParcelСсылка, "LocalOnly,DeliveredToWH");
				LocalOnly = РеквизитыParcel.LocalOnly;
				DeliveredToWH = РеквизитыParcel.DeliveredToWH;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ParcelНайден Тогда
		// ищем по коду
		СтрокаParcel = СтруктураТаблицОбъектов.ТаблицаParcels.Найти(СтруктураParcel.ParcelNo, "ParcelNo");
		Если СтрокаParcel <> Неопределено Тогда
			ParcelСсылка = СтрокаParcel.Parcel;
			ParcelНайден = Истина;
			LocalOnly = СтрокаParcel.LocalOnly;
			DeliveredToWH = СтрокаParcel.DeliveredToWH;
		КонецЕсли;
	КонецЕсли;
	
	Если ParcelНайден Тогда 
		
		Если Не СтруктураParcel.Repacked Тогда 
			
			Если Не LocalOnly Тогда
				Parcel = ParcelСсылка.ПолучитьОбъект();
				МассивСтрокИнвойса = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Parcel.Детали, "СтрокаИнвойса");
			КонецЕсли;
			
			////Warehouse To должен совпадать для парселей, т.к. его устанавливает логист SLB  - убрала проверку 25.12.2013 
			//Если СтруктураParcel.WarehouseTo <> Parcel.WarehouseTo Тогда 
			//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " Warehouse to '" + СокрЛП(СтруктураParcel.WarehouseTo) + "' differs from '" + СокрЛП(Parcel.WarehouseTo) + "'!");
			//КонецЕсли;
			
		иначе
			
			Если Не LocalOnly Тогда
				ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " repacked parcel should have a new number!");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(DeliveredToWH) Тогда 
			СтруктураParcel.Вставить("DeliveredToWH", DeliveredToWH);
		КонецЕсли;
		
	//Иначе
	//	
	//	ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + " failed to find Parcel by Code '" + СтруктураParcel.ParcelNo + "'!");
	//	Возврат;
		
	КонецЕсли;
      		
	// Items
	// { RGS AGorlenko 04.10.2017 17:30:07 - S-I-0003817
	// { RGS ASeryakov 30.03.2017 13:00:00 - S-I-0004935
	//Если LocalOnly ИЛИ НЕ НастройкаОбмена.ОтключитьПроверкуСоставаИмпортныхПарселей Тогда
	Если НЕ ParcelНайден ИЛИ LocalOnly ИЛИ НЕ НастройкаОбмена.ОтключитьПроверкуСоставаИмпортныхПарселей Тогда	
	// } RGS ASeryakov 30.03.2017 13:00:00 - S-I-0004935
	// } RGS AGorlenko 04.10.2017 17:30:13 - S-I-0003817
		Для Каждого СтруктураItem из СтруктураParcel.МассивСтруктурItems Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийItems(ТекстОшибок, СтруктураДанных, СтруктураParcel, СтруктураItem, МассивImportItems, МассивСтрокИнвойса, НастройкаОбмена);
		КонецЦикла;
	// { RGS AGorlenko 04.10.2017 17:30:07 - S-I-0003817
	КонецЕсли;
	// } RGS AGorlenko 04.10.2017 17:30:13 - S-I-0003817
	 	
	// для не переупакованных парселей проверим, что состав товаров не поменялся
	// { RGS AGorlenko 04.10.2017 17:30:07 - S-I-0003817
	//Если Не СтруктураParcel.Repacked И МассивСтрокИнвойса.Количество() > 0 Тогда
	Если Не СтруктураParcel.Repacked И МассивСтрокИнвойса.Количество() > 0 И НЕ НастройкаОбмена.ОтключитьПроверкуСоставаИмпортныхПарселей Тогда
	// } RGS AGorlenko 04.10.2017 17:30:13 - S-I-0003817
		Для Каждого СтрокаИнвойса из МассивСтрокИнвойса Цикл 
			ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": failed to find Item '" + СокрЛП(СтрокаИнвойса) + "'!"); 
		КонецЦикла;	
	КонецЕсли;  
	        		           	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьСтруктуруЗначенийItems(ТекстОшибок, СтруктураДанных, СтруктураParcel, СтруктураItem, МассивImportItems, ДеталиImportParcel, НастройкаОбмена)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;

	Если СтруктураItem.ItemNo = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	    						
	// Import, local
	Если СтруктураItem.ImportLocal = "Import" Тогда 
		
		// Import Item
		// { RGS AGorlenko 18.11.2014 1:00:16 - обмен изменениями
		//СтрокаImportItem = СтруктураТаблицОбъектов.ТаблицаImportItems.Найти(СтруктураItem.ItemNo, "ItemNo");
		ItemНайден = Ложь;
		Если СтруктураItem.Свойство("GUIDRIET") Тогда
			Попытка
				ГУИД = Новый УникальныйИдентификатор(СтруктураItem.GUIDRIET);
			Исключение
				ГУИД = Неопределено;
			КонецПопытки;
			Если ГУИД <> Неопределено Тогда
				ItemСсылка = Справочники.СтрокиИнвойса.ПолучитьСсылку(ГУИД);
				ItemНайден = ЗначениеЗаполнено(ItemСсылка);
				НайденныеСтрокиImportItem = СтруктураТаблицОбъектов.ТаблицаImportItems.НайтиСтроки(Новый Структура("ItemNo, Item", ItemСсылка.Наименование, ItemСсылка));
				Если НайденныеСтрокиImportItem.Количество() > 0 Тогда
					СтрокаImportItem = НайденныеСтрокиImportItem[0];
				Иначе
					// { RGS VShamin 13.08.2015 15:35:09 - 
					//СтрокаImportItem = ПолучитьДанныеItem(ItemСсылка);
					СтрокаImportItem = ПолучитьДанныеItem(ТекстОшибок, ItemСсылка, ItemНайден);
					// } RGS VShamin 13.08.2015 15:35:09 - 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Не ItemНайден Тогда
			СтрокаImportItem = СтруктураТаблицОбъектов.ТаблицаImportItems.Найти(СтруктураItem.ItemNo, "ItemNo");
			Если СтрокаImportItem <> Неопределено Тогда
				ItemНайден = Истина;
				ItemСсылка = СтрокаImportItem.Item;
			КонецЕсли;
		КонецЕсли;
		// } RGS AGorlenko 18.11.2014 1:00:20 - обмен изменениями
		
		Если Не ItemНайден Тогда  
			
			ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": failed to find Import item '" + СтруктураItem.ItemNo + "'!");
			
		иначе
			
			СтруктураItem.ItemСсылка = ItemСсылка;
				   			
			МассивImportItems.Добавить(ItemСсылка);
			
			// для Repacked парселя собираем массив переупакованных импортных товаров  
			Если СтруктураParcel.Repacked Тогда 
				СтруктураДанных.МассивRepackedItems.Добавить(ItemСсылка);
			// { RGS AGorlenko 04.10.2017 17:13:36 - S-I-0003817
			//иначе
			ИначеЕсли НЕ НастройкаОбмена.ОтключитьПроверкуСоставаИмпортныхПарселей Тогда
			// } RGS AGorlenko 04.10.2017 17:17:59 - S-I-0003817
				ИндексItem = ДеталиImportParcel.Найти(ItemСсылка);
				Если ИндексItem = Неопределено Тогда
					ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": failed to find Import item '" + СтруктураItem.ItemNo + "' (there is no such item as part of parcel, or file has a double item)!");
				Иначе
					ДеталиImportParcel.Удалить(ИндексItem);
				КонецЕсли;
			КонецЕсли;
			 
			Если ЗначениеЗаполнено(СтрокаImportItem.ShipmentATA) Тогда 
				СтруктураItem.Вставить("ShipmentATA", СтрокаImportItem.ShipmentATA);
				Если ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) и СтруктураItem.ShipmentATA > СтруктураParcel.DeliveryDate Тогда
					ДобавитьСтроку(ТекстОшибок, "For Parcel no. " + СтруктураParcel.ParcelNo + ": Delivery date of item No. '" + СтруктураItem.ItemNo + "' can not be earlier than Shipment ATA "+ Формат(СтруктураItem.ShipmentATA, "ДЛФ=D") + "!");
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрефиксОшибки = "For Item no. " +  СтруктураItem.ItemNo + ": ";
	
	// Parent company
	Если ЗначениеЗаполнено(СтруктураItem.ParentCompany) Тогда 
		СтрокаParentCompany = СтруктураТаблицОбъектов.ТаблицаParentCompanies.Найти(СтруктураItem.ParentCompany, "ParentCompanyCode");
		Если СтрокаParentCompany = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find Parent company by Code '" + СтруктураItem.ParentCompany + "'!");
		иначе
			СтруктураItem.ParentCompany = СтрокаParentCompany.ParentCompany;
		КонецЕсли;
	КонецЕсли;
    	
	// Qty UOM
	Если ЗначениеЗаполнено(СтруктураItem.QtyUOM) Тогда 
		СтрокаQtyUOM = СтруктураТаблицОбъектов.ТаблицаUOMs.Найти(СтруктураItem.QtyUOM, "UOMCode");
		Если СтрокаQtyUOM = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find UOM by Code '" + СтруктураItem.QtyUOM + "'!");
		иначе
			СтруктураItem.QtyUOM = СтрокаQtyUOM.UOM;
		КонецЕсли;
	КонецЕсли;
   			
	// Net Weight UOM
	Если ЗначениеЗаполнено(СтруктураItem.NetWeightUOM) Тогда 
		СтрокаNetWeightUOM = СтруктураТаблицОбъектов.ТаблицаUOMs.Найти(СтруктураItem.NetWeightUOM, "UOMCode");
		Если СтрокаNetWeightUOM = Неопределено Тогда  
			ДобавитьСтроку(ТекстОшибок, ПрефиксОшибки + "failed to find UOM by Code '" + СтруктураItem.NetWeightUOM + "'!");
		иначе
			СтруктураItem.NetWeightUOM = СтрокаNetWeightUOM.UOM;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаRepackedParcels(ТекстОшибок, СтруктураДанных, МассивImportItems)
	
	// проверяем Repacked Parcels
	// заполняем Массив Parcels To Repack
	// получим таблицу строк всех импортных парселей, в которых встречается item из МассивRepackedItems
	// для каждого парселя проверим, что все айтемы находятся в таблице Import items и не потерялись при переупаковывании
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивRepackedItems", СтруктураДанных.МассивRepackedItems);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	ВЫРАЗИТЬ(ParcelsДетали.Ссылка.Код КАК СТРОКА(23)) КАК ParcelNo,
	               |	ParcelsДетали.СтрокаИнвойса КАК ImportItem,
	               |	ParcelsДетали.СтрокаИнвойса.Наименование КАК ItemNo
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали
	               |ГДЕ
	               |	ParcelsДетали.СтрокаИнвойса В(&МассивRepackedItems)
	               |	И НЕ ParcelsДетали.Ссылка.Repacked
	               |	И НЕ ParcelsДетали.Ссылка.LocalOnly";
			
	ТаблицаImportParcels = Запрос.Выполнить().Выгрузить();
	
	ImportParcel = Неопределено;              	
	Для Каждого СтрImportParcel из ТаблицаImportParcels Цикл
				
	    Если ImportParcel <> СтрImportParcel.Parcel Тогда
			
			ImportParcel = СтрImportParcel.Parcel;
			
			// TODO RGS agorlenko 12.09.2016: убрать!!!
			Если СокрЛП(СтрImportParcel.ItemNo) = "GU152676-1" И СокрЛП(СтрImportParcel.ParcelNo) <> "11683366-5/6" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ImportParcel <> Неопределено Тогда 
				СтруктураДанных.МассивParcelsToRepack.Добавить(ImportParcel);
			КонецЕсли;
			
		КонецЕсли;
	
		//ищем item в таблице импортных товаров
		//если не нашли - ругаемся, что товар потерялся
		Если МассивImportItems.Найти(СтрImportParcel.ImportItem) = Неопределено Тогда
			ДобавитьСтроку(ТекстОшибок, "Parcel '" + СокрЛП(СтрImportParcel.ItemNo) + "' was repacked, but Item '" + СокрЛП(СтрImportParcel.ItemNo) + 
				"' was not found in new parcels!");
		КонецЕсли;
		 		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
//// СОЗДАНИЕ ОБЪЕКТОВ

#Область СозданиеОбъектовLeg6

Процедура СоздатьОбъектыLeg6(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователям)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// { RGS VShamin 17.12.2015 22:50:02 - рассылка отбивок по пользователям
	СоответствиеДляРассылкиОтбивок = Новый Соответствие;
	// } RGS VShamin 17.12.2015 22:50:16 - рассылка отбивок по пользователям
	
	// Invoice lines
	СоздатьInvoiceLines(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
	
	// Parcels
	СоздатьParcels(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
	
	// DOCs
	// { RGS VShamin 17.12.2015 22:51:03 - рассылка отбивок по пользователям
	//СоздатьDOCs(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
	СоздатьDOCs(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылкиОтбивок);
	// } RGS VShamin 17.12.2015 22:51:05 - рассылка отбивок по пользователям
	
	// Shipments
	// { RGS VShamin 17.12.2015 22:51:34 - рассылка отбивок по пользователям
	//СоздатьShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
	СоздатьShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылкиОтбивок);
	// } RGS VShamin 17.12.2015 22:51:35 - рассылка отбивок по пользователям
	
	СформированыОтбивкиПользователям = СоответствиеДляРассылкиОтбивок.Количество() > 0;
	
	// { RGS VShamin 17.12.2015 23:10:16 - рассылка отбивок по пользователям
	ЗаписатьОтбивкиДляПользователейВОчередьРассылкиПисем(СоответствиеДляРассылкиОтбивок);
	// } RGS VShamin 17.12.2015 23:10:16 - рассылка отбивок по пользователям
	
КонецПроцедуры

Процедура СоздатьInvoiceLines(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена)
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурInvoiceLines = СтруктураФайла.МассивСтруктурInvoiceLines;
	
	Для каждого СтруктураInvoiceLine Из МассивСтруктурInvoiceLines Цикл
		
		InvoiceLineОбъект = СтруктураInvoiceLine.InvoiceLineСсылка.ПолучитьОбъект();
		// {RGS VShamin 8/21/2015 5:55:29 PM - 
		Если InvoiceLineОбъект = Неопределено Тогда
		
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (Invoice line) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураInvoiceLine.GUIDRIET + Символы.ПС +  "No: " + СтруктураInvoiceLine.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (Invoice line) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураInvoiceLine.GUIDRIET + Символы.ПС +  "No: " + СтруктураInvoiceLine.No + Символы.ПС;			
			Продолжить;
		
		КонецЕсли;
		// }RGS VShamin 8/21/2015 5:55:30 PM - 
		ЗаполнитьInvoiceLine(InvoiceLineОбъект, СтруктураInvoiceLine);
		
		Если InvoiceLineОбъект.Модифицированность() Тогда
			
			InvoiceLineОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			InvoiceLineОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				InvoiceLineОбъект.Записать();
			Исключение
				ЕстьОписаниеОшибок = InvoiceLineОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = InvoiceLineОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + InvoiceLineОбъект 
							+ ": " + InvoiceLineОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + InvoiceLineОбъект 
							+ ": " + InvoiceLineОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					КонецЕсли; 
					// { RGS AGorlenko 10.12.2015 18:29:40 - для полной загрузки
					//Возврат;
					Продолжить;
					// } RGS AGorlenko 10.12.2015 18:29:49 - для полной загрузки
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			Если УзелОбмена <> Неопределено Тогда
			
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = InvoiceLineОбъект.Ссылка;
				Если СтруктураInvoiceLine.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураInvoiceLine.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "СправочникСсылка.СтрокиИнвойса";
				СтруктураЗаписи.ТипПриемника = "СправочникСсылка.СтрокиИнвойсаLeg6";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьParcels(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена)
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурParcels = СтруктураФайла.МассивСтруктурParcels;
	
	Для каждого СтруктураParcel Из МассивСтруктурParcels Цикл
		
		ParcelОбъект = СтруктураParcel.ParcelСсылка.ПолучитьОбъект();
		ЗаполнитьParcelLeg6(ParcelОбъект, СтруктураParcel);
		
		Если ParcelОбъект.Модифицированность() Тогда
			
			ParcelОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			ParcelОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				ParcelОбъект.Записать();
			Исключение
				ЕстьОписаниеОшибок = ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ParcelОбъект 
							+ ": " + ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + ParcelОбъект 
							+ ": " + ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					КонецЕсли; 
					// { RGS AGorlenko 10.12.2015 18:29:40 - для полной загрузки
					//Возврат;
					Продолжить;
					// } RGS AGorlenko 10.12.2015 18:29:49 - для полной загрузки
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			Если УзелОбмена <> Неопределено Тогда
			
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = ParcelОбъект.Ссылка;
				Если СтруктураParcel.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураParcel.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "СправочникСсылка.Parcels";
				СтруктураЗаписи.ТипПриемника = "СправочникСсылка.ParcelsLeg6";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS VShamin 17.12.2015 22:52:07 - рассылка отбивок по пользователям
//Процедура СоздатьDOCs(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена)
Процедура СоздатьDOCs(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылки)
// } RGS VShamin 17.12.2015 22:52:12 - рассылка отбивок по пользователям
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурDOCs = СтруктураФайла.МассивСтруктурDOCs;
	
	Для каждого СтруктураDOC Из МассивСтруктурDOCs Цикл
		
		DOCОбъект = СтруктураDOC.DOCСсылка.ПолучитьОбъект();
		// {RGS VShamin 8/21/2015 5:55:29 PM - 
		Если DOCОбъект = Неопределено Тогда
		
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (DOC) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураDOC.GUIDRIET + Символы.ПС +  "No: " + СтруктураDOC.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (DOC) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураDOC.GUIDRIET + Символы.ПС +  "No: " + СтруктураDOC.No + Символы.ПС;			
			Продолжить;
		
		КонецЕсли;
		// }RGS VShamin 8/21/2015 5:55:30 PM - 
		
		// { RGS AArsentev 10/11/2016
		ТекущаяВерсия = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(СтруктураDOC.DOCСсылка);
		Если ТекущаяВерсия <> СтруктураDOC.Version Тогда
			
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The current version of doc is not equal to specified in the file: Current version - " + ТекущаяВерсия + ", version in the file - " + СтруктураDOC.Version + Символы.ПС
			+ "GUIDRIET: " + СтруктураDOC.GUIDRIET + Символы.ПС +  "No: " + СтруктураDOC.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The current version of doc is not equal to specified in the file: Current version - " + ТекущаяВерсия + ", version in the file - " + СтруктураDOC.Version + Символы.ПС
			+ "GUIDRIET: " + СтруктураDOC.GUIDRIET + Символы.ПС +  "No: " + СтруктураDOC.No + Символы.ПС;
			Продолжить
			
		КонецЕсли;
		// } RGS AArsentev 10/11/2016
	
		ЗаполнитьDOC(DOCОбъект, СтруктураDOC);
		
		Если DOCОбъект.Модифицированность() Тогда
			DOCОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			DOCОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				DOCОбъект.Записать(?(DOCОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ЕстьОписаниеОшибок = DOCОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = DOCОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + DOCОбъект
						//{ RGS AArsentev 27.10.2016 
						+ ?(ЗначениеЗаполнено(DOCОбъект.Coordinator)," ("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOCОбъект.Coordinator, "EMail") +")","") 
						//} RGS AArsentev 27.10.2016
						+ ": " + DOCОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						// { RGS VShamin 17.12.2015 22:55:53 - рассылка отбивок по пользователям
						//ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + DOCОбъект 
						//	+ ": " + DOCОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
						ТекстОшибокRIETДляПользователя = СоответствиеДляРассылки.Получить(DOCОбъект.Coordinator);
						Если ТекстОшибокRIETДляПользователя = Неопределено Тогда
							СоответствиеДляРассылки.Вставить(DOCОбъект.Coordinator, 
								Строка(DOCОбъект) + ": " + DOCОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						Иначе
							СоответствиеДляРассылки.Вставить(DOCОбъект.Coordinator, ТекстОшибокRIETДляПользователя + Символы.ПС + 
								Строка(DOCОбъект) + ": " + DOCОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						КонецЕсли;
						// } RGS VShamin 17.12.2015 22:55:54 - рассылка отбивок по пользователям
					КонецЕсли; 
					// { RGS AGorlenko 10.12.2015 18:29:40 - для полной загрузки
					//Возврат;
					Продолжить;
					// } RGS AGorlenko 10.12.2015 18:29:49 - для полной загрузки
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			// { RGS VShamin 18.11.2014 18:46:44 - обмен изменениями
			DOCСсылка = DOCОбъект.Ссылка;
			Если УзелОбмена <> Неопределено Тогда
			
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = DOCСсылка;
				Если СтруктураDOC.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураDOC.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
			КонецЕсли;
			// } RGS VShamin 18.11.2014 18:46:51 - обмен изменениями
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS VShamin 17.12.2015 22:52:45 - рассылка отбивок по пользователям
//Процедура СоздатьShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена)
Процедура СоздатьShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылки)
// } RGS VShamin 17.12.2015 22:52:46 - рассылка отбивок по пользователям
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурShipments = СтруктураФайла.МассивСтруктурShipments;
	
	Для каждого СтруктураShipment Из МассивСтруктурShipments Цикл
		
		ShipmentОбъект = СтруктураShipment.ShipmentСсылка.ПолучитьОбъект();
		// { RGS VShamin 8/21/2015 5:55:29 PM - 
		Если ShipmentОбъект = Неопределено Тогда
		
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (Shipment) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураShipment.GUIDRIET + Символы.ПС +  "No: " + СтруктураShipment.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (Shipment) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураShipment.GUIDRIET + Символы.ПС +  "No: " + СтруктураShipment.No + Символы.ПС;			
			Продолжить;
		
		КонецЕсли;
		// } RGS VShamin 8/21/2015 5:55:30 PM - 
		//{ RGS AArsentev 27.10.2016
		ОписаниеНеКритичныхОшибок = "";
		//} RGS AArsentev 27.10.2016
		ЗаполнитьShipment(ShipmentОбъект, СтруктураShipment, ОписаниеНеКритичныхОшибок);
		//{ RGS AArsentev 27.10.2016
		ОписаниеОшибок = ОписаниеОшибок + ОписаниеНеКритичныхОшибок;
		//} RGS AArsentev 27.10.2016
		
		Если ShipmentОбъект.Модифицированность() Тогда
			ShipmentОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			ShipmentОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				ShipmentОбъект.Записать(?(ShipmentОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ЕстьОписаниеОшибок = ShipmentОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = ShipmentОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ShipmentОбъект
						//{ RGS AArsentev 27.10.2016
						+ ?(ЗначениеЗаполнено(ShipmentОбъект.Coordinator)," ("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipmentОбъект.Coordinator, "EMail") +")","")
						//} RGS AArsentev 27.10.2016
						+ ": " + ShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						// { RGS VShamin 17.12.2015 22:55:53 - рассылка отбивок по пользователям
						//ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + ShipmentОбъект 
						//	+ ": " + ShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
						ТекстОшибокRIETДляПользователя = СоответствиеДляРассылки.Получить(ShipmentОбъект.Coordinator);
						Если ТекстОшибокRIETДляПользователя = Неопределено Тогда
							СоответствиеДляРассылки.Вставить(ShipmentОбъект.Coordinator, 
								Строка(ShipmentОбъект) + ": " + ShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						Иначе
							СоответствиеДляРассылки.Вставить(ShipmentОбъект.Coordinator, ТекстОшибокRIETДляПользователя + Символы.ПС + 
								Строка(ShipmentОбъект) + ": " + ShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						КонецЕсли;
						// } RGS VShamin 17.12.2015 22:55:54 - рассылка отбивок по пользователям
					КонецЕсли; 
					// { RGS AGorlenko 10.12.2015 18:29:40 - для полной загрузки
					//Возврат;
					Продолжить;
					// } RGS AGorlenko 10.12.2015 18:29:49 - для полной загрузки
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			// { RGS VShamin 18.11.2014 18:46:44 - обмен изменениями
			ShipmentСсылка = ShipmentОбъект.Ссылка;
			Если УзелОбмена <> Неопределено Тогда
			
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = ShipmentСсылка;
				Если СтруктураShipment.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураShipment.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "ДокументСсылка.Поставка";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
			КонецЕсли;
			// } RGS VShamin 18.11.2014 18:46:51 - обмен изменениями
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// { RGS LHristyc 21.06.2018 14:56:14 - S-I-0004942 
#Область СозданиеОбъектовExportReports

Процедура СоздатьОбъектыExportReports(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СформированыОтбивкиПользователям)
	
	УстановитьПривилегированныйРежим(Истина);

	СоответствиеДляРассылкиОтбивок = Новый Соответствие;	
	СоздатьExportRequests(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылкиОтбивок);
	СоздатьExportShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылкиОтбивок);
	
	СформированыОтбивкиПользователям = СоответствиеДляРассылкиОтбивок.Количество() > 0;
	ЗаписатьОтбивкиДляПользователейВОчередьРассылкиПисем(СоответствиеДляРассылкиОтбивок);
	
КонецПроцедуры

Процедура СоздатьExportRequests(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылки)
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурExportRequests = СтруктураФайла.МассивСтруктурExportRequests;
	
	Для каждого СтруктураExportRequest Из МассивСтруктурExportRequests Цикл
		
		ExportRequestОбъект = СтруктураExportRequest.ExportRequestСсылка.ПолучитьОбъект();
		Если ExportRequestОбъект = Неопределено Тогда
			
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (Export Request) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураExportRequest.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportRequest.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (Export Request) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураExportRequest.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportRequest.No + Символы.ПС;			
			Продолжить;
			
		КонецЕсли;
		ОписаниеНеКритичныхОшибок = "";
		
		ТекущаяВерсия = Документы.ExportRequest.rgsПолучитьАктуальнуюВерсию(СтруктураExportRequest.ExportRequestСсылка);
		Если ТекущаяВерсия <> СтруктураExportRequest.Version Тогда
			
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The current version of ER is not equal to specified in the file: Current version - " + ТекущаяВерсия + ", version in the file - " + СтруктураExportRequest.Version + Символы.ПС
			+ "GUIDRIET: " + СтруктураExportRequest.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportRequest.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The current version of ER is not equal to specified in the file: Current version - " + ТекущаяВерсия + ", version in the file - " + СтруктураExportRequest.Version + Символы.ПС
			+ "GUIDRIET: " + СтруктураExportRequest.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportRequest.No + Символы.ПС;
			Продолжить
			
		КонецЕсли;
		
		ЗаполнитьExportRequest(ExportRequestОбъект, СтруктураExportRequest, ОписаниеНеКритичныхОшибок); //
		ОписаниеОшибок = ОписаниеОшибок + ОписаниеНеКритичныхОшибок;
		
		Если ExportRequestОбъект.Модифицированность() Тогда
			//ExportRequestОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			ExportRequestОбъект.ДополнительныеСвойства.Вставить("ExportReportsLoading");
			ExportRequestОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				ExportRequestОбъект.Записать(?(ExportRequestОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ЕстьОписаниеОшибок = ExportRequestОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = ExportRequestОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ExportRequestОбъект
						+ ?(ЗначениеЗаполнено(ExportRequestОбъект.ExportSpecialist)," ("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ExportRequestОбъект.ExportSpecialist, "EMail") +")","")
						+ ": " + ExportRequestОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						ТекстОшибокRIETДляПользователя = СоответствиеДляРассылки.Получить(ExportRequestОбъект.ExportSpecialist);
						Если ТекстОшибокRIETДляПользователя = Неопределено Тогда
							СоответствиеДляРассылки.Вставить(ExportRequestОбъект.ExportSpecialist, 
							Строка(ExportRequestОбъект) + ": " + ExportRequestОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						Иначе
							СоответствиеДляРассылки.Вставить(ExportRequestОбъект.ExportSpecialist, ТекстОшибокRIETДляПользователя + Символы.ПС + 
							Строка(ExportRequestОбъект) + ": " + ExportRequestОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						КонецЕсли;
					КонецЕсли; 
					Продолжить;
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			// { RGS VShamin 18.11.2014 18:46:44 - обмен изменениями
			ExportRequestСсылка = ExportRequestОбъект.Ссылка;
			Если УзелОбмена <> Неопределено Тогда
				
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = ExportRequestСсылка;
				Если СтруктураExportRequest.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураExportRequest.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "ДокументСсылка.ExportRequest";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
				
			КонецЕсли;
			// } RGS VShamin 18.11.2014 18:46:51 - обмен изменениями
			
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

Процедура СоздатьExportShipments(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена, СоответствиеДляРассылки)

	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурExportShipments = СтруктураФайла.МассивСтруктурExportShipments;
	
	Для каждого СтруктураExportShipment Из МассивСтруктурExportShipments Цикл
		
		ExportShipmentОбъект = СтруктураExportShipment.ExportShipmentСсылка.ПолучитьОбъект();
		Если ExportShipmentОбъект = Неопределено Тогда
			
			ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (Export Shipment) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураExportShipment.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportShipment.No + Символы.ПС;
			ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (Export Shipment) in base doesn't exist:" + Символы.ПС
				+ "GUIDRIET: " + СтруктураExportShipment.GUIDRIET + Символы.ПС +  "No: " + СтруктураExportShipment.No + Символы.ПС;			
			Продолжить;
			
		КонецЕсли;
		ОписаниеНеКритичныхОшибок = "";
		ЗаполнитьExportShipment(ExportShipmentОбъект, СтруктураExportShipment, ОписаниеНеКритичныхОшибок);
		ОписаниеОшибок = ОписаниеОшибок + ОписаниеНеКритичныхОшибок;
		
		Если ExportShipmentОбъект.Модифицированность() Тогда
			//ExportShipmentОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			ExportShipmentОбъект.ДополнительныеСвойства.Вставить("ExportReportsLoading");
			ExportShipmentОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				ExportShipmentОбъект.Записать(?(ExportShipmentОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ЕстьОписаниеОшибок = ExportShipmentОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = ExportShipmentОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ExportShipmentОбъект
						+ ?(ЗначениеЗаполнено(ExportShipmentОбъект.ExportSpecialist)," ("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ExportShipmentОбъект.ExportSpecialist, "EMail") +")","")
						+ ": " + ExportShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						ТекстОшибокRIETДляПользователя = СоответствиеДляРассылки.Получить(ExportShipmentОбъект.ExportSpecialist);
						Если ТекстОшибокRIETДляПользователя = Неопределено Тогда
							СоответствиеДляРассылки.Вставить(ExportShipmentОбъект.ExportSpecialist, 
							Строка(ExportShipmentОбъект) + ": " + ExportShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						Иначе
							СоответствиеДляРассылки.Вставить(ExportShipmentОбъект.ExportSpecialist, ТекстОшибокRIETДляПользователя + Символы.ПС + 
							Строка(ExportShipmentОбъект) + ": " + ExportShipmentОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET);
						КонецЕсли;
					КонецЕсли; 
					Продолжить;
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			// { RGS VShamin 18.11.2014 18:46:44 - обмен изменениями
			ExportShipmentСсылка = ExportShipmentОбъект.Ссылка;
			Если УзелОбмена <> Неопределено Тогда
				
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = ExportShipmentСсылка;
				Если СтруктураExportShipment.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураExportShipment.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "ДокументСсылка.ExportShipment";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
				
			КонецЕсли;
			// } RGS VShamin 18.11.2014 18:46:51 - обмен изменениями
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // } RGS LHristyc 21.06.2018 14:56:15 - S-I-0004942  

#КонецОбласти


#Область СозданиеОбъектовLeg7

Процедура СоздатьОбъектыLeg7(СтруктураФайла, ОписаниеОшибок, ОбработанныеTrip, СозданныеParcels, СозданныеItems, ОписаниеОшибокRIET, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// отметим переупакованные парсели
	Для Каждого ParcelsToRepack из СтруктураФайла.МассивParcelsToRepack Цикл 
		
		ParcelToRepackОбъект = ParcelsToRepack.ПолучитьОбъект();
		РГСофтКлиентСервер.УстановитьЗначение(ParcelToRepackОбъект.Repacked, Истина);
		
		Если ParcelToRepackОбъект.Модифицированность() Тогда 
			// { RGS AGorlenko 12.11.2015 23:35:44 - такие парсели должны регистрироваться
			//ParcelToRepackОбъект.ОбменДанными.Загрузка = Истина;
			// } RGS AGorlenko 12.11.2015 23:35:59 - такие парсели должны регистрироваться
			// { RGS VShamin 08.11.2014 14:58:20 - Регистрация объектов исключая отправителей
			ParcelToRepackОбъект.ОбменДанными.Отправитель = УзелОбмена;
			// } RGS VShamin 08.11.2014 14:58:25 - Регистрация объектов исключая отправителей
			// { RGS AGorlenko 20.11.2015 18:29:31 - S-I-0001375
			ParcelToRepackОбъект.ДополнительныеСвойства.Вставить("ОтключитьКонтрольЗаполненностиNetWeight");
			// } RGS AGorlenko 20.11.2015 18:29:37 - S-I-0001375
			ParcelToRepackОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	// Delivered Parcels
	СоздатьItemsИParcels(СтруктураФайла, СтруктураФайла.МассивСтруктурDeliveredParcels,,, ОписаниеОшибок, ОписаниеОшибокRIET, СозданныеParcels, СозданныеItems, УзелОбмена, НастройкаОбмена);
	
	// Changed Parcels
	СоздатьItemsИParcels(СтруктураФайла, СтруктураФайла.МассивСтруктурChangedParcels,,, ОписаниеОшибок, ОписаниеОшибокRIET, СозданныеParcels, СозданныеItems, УзелОбмена, НастройкаОбмена);
	
	// Trips
	СоздатьTrips(СтруктураФайла, СтруктураФайла.МассивСтруктурTrips, ОписаниеОшибок, ОбработанныеTrip, СозданныеParcels, СозданныеItems, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
			
КонецПроцедуры

Процедура СоздатьTrips(СтруктураФайла, МассивСтруктурTrips, ОписаниеОшибок, ОбработанныеTrip, СозданныеParcels, СозданныеItems, ОписаниеОшибокRIET, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	
	Если МассивСтруктурTrips = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеНесущественныеДанныеТЧ = Новый Соответствие;
	ДополнительныеНесущественныеДанныеТЧ.Вставить("FinalDestinations", Новый Массив);
	ДополнительныеНесущественныеДанныеТЧ["FinalDestinations"].Добавить("ATA");
	
	Для Каждого СтруктураTrip из МассивСтруктурTrips Цикл 
		
		TripОбъект = Неопределено;
		
		//найдем Trip по номеру
		
		Если ОбработанныеTrip.Найти(СтруктураTrip.TripNo) <> Неопределено Тогда
			Продолжить;
		Иначе
			ОбработанныеTrip.Добавить(СтруктураTrip.TripNo);
		КонецЕсли;
		
		СтрокаTrip = СтруктураТаблиц.ТаблицаTrips.Найти(СтруктураTrip.TripNo, "TripNo");
				
		//если не найден - создаем новый
		Если СтрокаTrip = Неопределено Тогда
			TripОбъект = Документы.Trip.СоздатьДокумент();
			TripОбъект.Номер = СтруктураTrip.TripNo;
			TripОбъект.TypeOfTransport = Перечисления.TypesOfTransport.CallOut;
			TripОбъект.Transport = Справочники.Transport.CallOut;
		иначе
			TripОбъект = СтрокаTrip.Trip.ПолучитьОбъект();
		КонецЕсли;	   						
		
		ЗаполненУспешно = ЗаполнитьTrip(СтруктураФайла, TripОбъект, СтруктураTrip, ОписаниеОшибок, СозданныеParcels, СозданныеItems, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
		
		Если Не ЗаполненУспешно Тогда
			Возврат;
		КонецЕсли;
		
		// записываем Trip 
		Если TripОбъект.Модифицированность() Тогда 
			TripОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			TripОбъект.ДополнительныеСвойства.Вставить("ДополнительныеНесущественныеДанныеТЧ", ДополнительныеНесущественныеДанныеТЧ);
			// { RGS AGorlenko 08.11.2014 14:58:20 - обмен изменениями
			TripОбъект.ОбменДанными.Отправитель = УзелОбмена;
			// } RGS AGorlenko 08.11.2014 14:58:25 - обмен изменениями
			// { RGS AGorlenko 26.04.2014 18:26:45 - S-I-0000699
			//TripОбъект.Записать(РежимЗаписиДокумента.Запись);
			//{ RGS AArsentev 27.10.2016
			Специалист = ПолучитьСпециалиста(TripОбъект);
			Если ЗначениеЗаполнено(Специалист) Тогда
				EMail = Специалист.EMail;
			Иначе
				EMail = "";
			КонецЕсли;
			//} RGS AArsentev 27.10.2016
			Попытка
				TripОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если TripОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок") Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + TripОбъект
						//{ RGS AArsentev 27.10.2016
						+ ?(ЗначениеЗаполнено(Специалист)," ("+ EMail +")","")
						//} RGS AArsentev 27.10.2016
						+ ": " + TripОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					// { RGS AGorlenko 04.11.2014 16:21:26 - описание изменений теперь встроено в сообщение
					//Если Найти(TripОбъект.ДополнительныеСвойства.ОписаниеОшибок, "You can not modify the Trip") 
					//	И TripОбъект.ДополнительныеСвойства.Свойство("ОписаниеИзменений") Тогда
					//	ОписаниеОшибок = ОписаниеОшибок + "Changes:" + Символы.ПС + TripОбъект.ДополнительныеСвойства.ОписаниеИзменений;
					//КонецЕсли;
					// } RGS AGorlenko 04.11.2014 16:21:43 - описание изменений теперь встроено в сообщение
					// { RGS AGorlenko 04.11.2014 20:20:52 - S-I-0000925
					Если TripОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET") Тогда
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект 
							+ ": " + TripОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					КонецЕсли; 
					// } RGS AGorlenko 04.11.2014 20:20:55 - S-I-0000925
					Если TripОбъект.ДополнительныеСвойства.Свойство("РезультатПроверкиLegalEntity") Тогда
						ОписаниеОшибок = ОписаниеОшибок + "LE check result:" + Символы.ПС + TripОбъект.ДополнительныеСвойства.РезультатПроверкиLegalEntity;
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект 
							+ ": " + "LE check result:" + Символы.ПС + TripОбъект.ДополнительныеСвойства.РезультатПроверкиLegalEntity;
					КонецЕсли;
					Если TripОбъект.ДополнительныеСвойства.Свойство("РазбивкаПоLE") Тогда
						ОписаниеОшибок = ОписаниеОшибок + ?(Прав(ОписаниеОшибок, 1) = Символы.ПС, "", Символы.ПС) + TripОбъект.ДополнительныеСвойства.РазбивкаПоLE;
					КонецЕсли;
					Возврат;
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			ПланыОбмена.Leg7.ЗарегистрироватьПарселиТрипаПриНеобходимости(УзелОбмена, TripОбъект);
			// } RGS AGorlenko 26.04.2014 18:26:52 - S-I-0000699
		КонецЕсли;
	
	КонецЦикла;			
	
КонецПроцедуры

Процедура СоздатьItemsИParcels(СтруктураФайла, МассивСтруктурParcels, TripОбъект=Неопределено, МассивParcels=Неопределено, ОписаниеОшибок, ОписаниеОшибокRIET, СозданныеParcels, СозданныеItems, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено) 
	
	ТаблицаParcels = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаParcels;
	
	Если МассивСтруктурParcels = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 12.11.2015 18:02:05 - оптимизация загрузки
	ТаблицаМодифицированныйПарселей = Новый ТаблицаЗначений;
	ТаблицаМодифицированныйПарселей.Колонки.Добавить("Parcel", Новый ОписаниеТипов("СправочникСсылка.Parcels"));
	ТаблицаМодифицированныйПарселей.Колонки.Добавить("Draft", Новый ОписаниеТипов("Дата"));
	ТаблицаМодифицированныйПарселей.Колонки.Добавить("WarehouseFrom", Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	// } RGS AGorlenko 12.11.2015 18:02:14 - оптимизация загрузки
	
	Для Каждого СтруктураParcel из МассивСтруктурParcels Цикл 
		
		Отказ = Ложь;
		ParcelОбъект = Неопределено;
		
		// { RGS AGorlenko 17.11.2014 19:43:00 - обмен изменениями
		//СтрокаParcel = ТаблицаParcels.Найти(СтруктураParcel.ParcelNo, "ParcelNo");
		// ищем по ссылке
		ParcelНайден = Ложь;
		Если СтруктураParcel.Свойство("GUIDRIET") Тогда
			Попытка
				ГУИД = Новый УникальныйИдентификатор(СтруктураParcel.GUIDRIET);
			Исключение
				ГУИД = Неопределено;
			КонецПопытки;
			Если ГУИД <> Неопределено Тогда
				ParcelСсылка = Справочники.Parcels.ПолучитьСсылку(ГУИД);
				ParcelНайден = ЗначениеЗаполнено(ParcelСсылка);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ParcelНайден Тогда // если не нашли по ссылке, ищем по коду
			СтрокаParcel = ТаблицаParcels.Найти(СтруктураParcel.ParcelNo, "ParcelNo");
			Если СтрокаParcel <> Неопределено Тогда
				ParcelНайден = Истина;
				ParcelСсылка = СтрокаParcel.Parcel;
			КонецЕсли;
		КонецЕсли;
		// } RGS AGorlenko 17.11.2014 19:43:06 - обмен изменениями
		
		//найдем Pacel по номеру с префиксом
		
		
		// { RGS AGorlenko 08.05.2014 11:56:47 - убираем префиксы
		//Если СтрокаParcel <> Неопределено Тогда
		//И ЗначениеЗаполнено(СтрокаParcel.Prefix) 
		//И СтрокаParcel.Prefix <> СтруктураФайла.ПрефиксСклада Тогда
		//	СтрокаParcel = Неопределено;
		//КонецЕсли;
		// } RGS AGorlenko 08.05.2014 11:56:55 - убираем префиксы
		
		//если не найден - создаем новый локальный с префиксом
        		
		Если НЕ ParcelНайден Тогда
			 			
			ParcelОбъект = Справочники.Parcels.СоздатьЭлемент();
			ParcelОбъект.Код = СтруктураParcel.ParcelNo;
			ParcelОбъект.LocalOnly = Истина;
			// { RGS AGorlenko 08.05.2014 11:57:40 - убираем префиксы
			//ParcelОбъект.Prefix = СтруктураФайла.ПрефиксСклада;
			// } RGS AGorlenko 08.05.2014 11:58:04 - убираем префиксы
			
			ЗаполнитьParcel(Отказ, СтруктураФайла, ParcelОбъект, СтруктураParcel, TripОбъект, СозданныеItems, УзелОбмена, НастройкаОбмена);	
			
		иначе
			
			РеквизитыParcel = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ParcelСсылка, "DeliveredToWH,WarehouseTo,LocalOnly,Comment,LengthCorrected,WidthCorrected,HeightCorrected,GrossWeightCorrected,WarehouseFrom,DIMsUOM,WeightUOM");
			
			Если РеквизитыParcel.LocalOnly Тогда 
				
				//для локальных парселей обновляем все реквизиты

				ParcelОбъект = ParcelСсылка.ПолучитьОбъект();
				ЗаполнитьParcel(Отказ, СтруктураФайла, ParcelОбъект, СтруктураParcel, TripОбъект, СозданныеItems, УзелОбмена, НастройкаОбмена);
				
			Иначе
				
				//для импортных парселей обновляем только комментарий, Warehouse To и Delivered to WH
				
				Если НастройкаОбмена.КонвертироватьВСтандартныеЕдиницыИзмерения Тогда
					КоэффициентРазмера = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтруктураParcel.DIMsUOM, "ConversionFactor") / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(РеквизитыParcel.DIMsUOM, "ConversionFactor");
					КоэффициентВеса = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтруктураParcel.GrossWeightUOM, "ConversionFactor") / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(РеквизитыParcel.WeightUOM, "ConversionFactor");
				Иначе
					КоэффициентРазмера = 1;
					КоэффициентВеса = 1;
				КонецЕсли;
				НовыйLengthCorrected = СтруктураParcel.LengthCorrected * КоэффициентРазмера;
				НовыйWidthCorrected = СтруктураParcel.WidthCorrected * КоэффициентРазмера;
				НовыйHeightCorrected = СтруктураParcel.HeightCorrected * КоэффициентРазмера;
				НовыйGrossWeightCorrected = СтруктураParcel.GrossWeightCorrected * КоэффициентВеса;
				
				Если (ЗначениеЗаполнено(СтруктураParcel.Comment) И Найти(РеквизитыParcel.Comment, СтруктураParcel.Comment) = 0) 
					ИЛИ (ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) И СтруктураParcel.DeliveryDate <> РеквизитыParcel.DeliveredToWH)
					ИЛИ (СтруктураParcel.WarehouseTo <> РеквизитыParcel.WarehouseTo)
					// { RGS AGorlenko 17.11.2014 19:43:00 - обмен изменениями, обновляем также скорректированные размеры и Wh-from
					ИЛИ (НовыйLengthCorrected <> РеквизитыParcel.LengthCorrected)
					ИЛИ (НовыйWidthCorrected <> РеквизитыParcel.WidthCorrected)
					ИЛИ (НовыйHeightCorrected <> РеквизитыParcel.HeightCorrected)
					ИЛИ (НовыйGrossWeightCorrected <> РеквизитыParcel.GrossWeightCorrected)
					ИЛИ (?(СтруктураParcel.Свойство("WarehouseFrom") И TripОбъект = Неопределено, СтруктураParcel.WarehouseFrom, ?(TripОбъект = Неопределено, СтруктураФайла.WarehouseFrom, TripОбъект.WarehouseFrom)) <> РеквизитыParcel.WarehouseFrom) Тогда
					// } RGS AGorlenko 17.11.2014 19:43:06 - обмен изменениями, обновляем также скорректированные размеры и Wh-from
					
					ParcelОбъект = ParcelСсылка.ПолучитьОбъект();
					//ParcelОбъект.ОбменДанными.Загрузка = Истина;
					Если ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) Тогда
						РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DeliveredToWH, СтруктураParcel.DeliveryDate);
					КонецЕсли;
					РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseTo, СтруктураParcel.WarehouseTo);
					// { RGS AGorlenko 17.11.2014 19:43:00 - обмен изменениями, обновляем также скорректированные размеры и Wh-from				
					РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.LengthCorrected, НовыйLengthCorrected);
					РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WidthCorrected, НовыйWidthCorrected);
					РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HeightCorrected, НовыйHeightCorrected);
					РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeightCorrected, НовыйGrossWeightCorrected);
					Если СтруктураParcel.Свойство("WarehouseFrom") И TripОбъект = Неопределено Тогда
						РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, СтруктураParcel.WarehouseFrom);
					Иначе
						РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, ?(TripОбъект = Неопределено, СтруктураФайла.WarehouseFrom, TripОбъект.WarehouseFrom));
					КонецЕсли;
					// } RGS AGorlenko 17.11.2014 19:43:06 - обмен изменениями, обновляем также скорректированные размеры и Wh-from
					
					Если ЗначениеЗаполнено(СтруктураParcel.Comment) И Найти(РеквизитыParcel.Comment, СтруктураParcel.Comment) = 0 Тогда 
						ParcelОбъект.Comment = СокрЛП(ParcelОбъект.Comment + "
							|" + СтруктураParcel.Comment);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		// записываем Parcel 
		Если ParcelОбъект <> Неопределено И ParcelОбъект.Модифицированность() Тогда 
			
			Попытка
				ParcelОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
				// { RGS VShamin 08.11.2014 14:58:20 - Регистрация объектов исключая отправителей
				ParcelОбъект.ОбменДанными.Отправитель = УзелОбмена;
				// } RGS VShamin 08.11.2014 14:58:25 - Регистрация объектов исключая отправителей
				// { RGS AGorlenko 12.11.2015 18:06:05 - оптимизация загрузки
				ParcelОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
				// } RGS AGorlenko 12.11.2015 18:06:13 - оптимизация загрузки
				// { RGS AGorlenko 20.11.2015 18:29:31 - S-I-0001375
				ParcelОбъект.ДополнительныеСвойства.Вставить("ОтключитьКонтрольЗаполненностиNetWeight");
				// } RGS AGorlenko 20.11.2015 18:29:37 - S-I-0001375
				ParcelОбъект.Записать();
				// { RGS AGorlenko 12.11.2015 18:02:05 - оптимизация загрузки
				СтрокаТаблицыМП = ТаблицаМодифицированныйПарселей.Добавить();
				СтрокаТаблицыМП.Parcel = ParcelОбъект.Ссылка;
				СтрокаТаблицыМП.Draft = ?(TripОбъект = Неопределено, '00010101', TripОбъект.Draft);
				СтрокаТаблицыМП.WarehouseFrom = ParcelОбъект.WarehouseFrom;
				// } RGS AGorlenko 12.11.2015 18:02:14 - оптимизация загрузки
			Исключение
				Если ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок") Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "Parcel " + ParcelОбъект 
						+ ": " + ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					Если ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET") Тогда
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "Parcel " + ParcelОбъект 
							+ ": " + ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					КонецЕсли; 
					ВызватьИсключение ОписаниеОшибок;
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			ParcelСсылка = ParcelОбъект.Ссылка;
			
			Если ТаблицаParcels.Найти(СтруктураParcel.ParcelNo, "ParcelNo") = Неопределено Тогда
				     							
				НоваяСтрокаТабParcels = ТаблицаParcels.Добавить();
				НоваяСтрокаТабParcels.Parcel = ParcelСсылка;
				НоваяСтрокаТабParcels.ParcelNo = СокрЛП(ParcelОбъект.Код);
				// { RGS AGorlenko 08.05.2014 12:16:55 - убираем префиксы
				//НоваяСтрокаТабParcels.Prefix = ParcelОбъект.Prefix;
				// } RGS AGorlenko 08.05.2014 12:17:01 - убираем префиксы
				НоваяСтрокаТабParcels.LocalOnly = ParcelОбъект.LocalOnly;
				НоваяСтрокаТабParcels.WarehouseTo = ParcelОбъект.WarehouseTo;
				НоваяСтрокаТабParcels.DeliveredToWH = ParcelОбъект.DeliveredToWH;
				СозданныеParcels.Добавить(НоваяСтрокаТабParcels.ParcelNo);
			КонецЕсли;
			
		ИначеЕсли ParcelОбъект <> Неопределено И ParcelОбъект.ДополнительныеСвойства.Свойство("ЕстьМодифицированныеАйтемы") Тогда 
			
				СтрокаТаблицыМП = ТаблицаМодифицированныйПарселей.Добавить();
				СтрокаТаблицыМП.Parcel = ParcelОбъект.Ссылка;
				СтрокаТаблицыМП.Draft = ?(TripОбъект = Неопределено, '00010101', TripОбъект.Draft);
				СтрокаТаблицыМП.WarehouseFrom = ParcelОбъект.WarehouseFrom;
			
		КонецЕсли;
		
		// { RGS AGorlenko 18.11.2014 18:46:44 - обмен изменениями
		Если УзелОбмена <> Неопределено Тогда
		
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
			
			СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
			СтруктураЗаписи.УникальныйИдентификаторИсточника = ParcelСсылка;
			Если СтруктураParcel.Свойство("УникальныйИдентификаторПриемника") Тогда
				СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураParcel.УникальныйИдентификаторПриемника;
			КонецЕсли;
			СтруктураЗаписи.ТипИсточника = "СправочникСсылка.Parcels";
			СтруктураЗаписи.ТипПриемника = "СправочникСсылка.ParcelsLeg7";
			
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
		
		КонецЕсли;
		// } RGS AGorlenko 18.11.2014 18:46:51 - обмен изменениями
		
		// дозаполним Trip		
		Если TripОбъект <> Неопределено И TripОбъект.Parcels.Найти(ParcelСсылка, "Parcel") = Неопределено Тогда
			
			РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.DomesticOBSentToTMS, Ложь);
			
			НовСтрокаParcels = TripОбъект.Parcels.Добавить();
			НовСтрокаParcels.Parcel = ParcelСсылка;
			   						
		КонецЕсли;
		
		Если МассивParcels <> Неопределено Тогда
			МассивParcels.Добавить(ParcelСсылка);
		КонецЕсли;
	
	КонецЦикла;			
	
	// { RGS AGorlenko 12.11.2015 18:04:32 - оптимизация загрузки
	Если ТаблицаМодифицированныйПарселей.Количество() > 0 Тогда
		ЗарегистрироватьМодифицированныеПарсели(ТаблицаМодифицированныйПарселей, TripОбъект, УзелОбмена);
	КонецЕсли;
	// } RGS AGorlenko 12.11.2015 18:04:40 - оптимизация загрузки
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
//// ЗАПОЛНЕНИЕ СОЗДАННЫХ ОБЪЕКТОВ

#Область ЗаполнениеОбъектовLeg6

Процедура ЗаполнитьInvoiceLine(InvoiceLineОбъект, СтруктураInvoiceLine)
	
	// { RGS VShamin 25.08.2015 11:33:39 - исключаем поля
	//РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.НомерВходящейДекларации, СтруктураInvoiceLine.PriorCCD);
	// } RGS VShamin 25.08.2015 11:33:39 - исключаем поля
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.TNVED, СтруктураInvoiceLine.TNVED);
	// { RGS VShamin 22.09.2015 16:31:59 - 
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.PermitsRequired, СтруктураInvoiceLine.PermitsRequired);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.COORequired, СтруктураInvoiceLine.COORequired);
	// } RGS VShamin 22.09.2015 16:31:59 - 
	
КонецПроцедуры

Процедура ЗаполнитьParcelLeg6(ParcelОбъект, СтруктураParcel)
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HazardClass, СтруктураParcel.HazardClass);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.LengthCorrected, СтруктураParcel.LengthCorrected);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WidthCorrected, СтруктураParcel.WidthCorrected);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HeightCorrected, СтруктураParcel.HeightCorrected);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeightCorrected, СтруктураParcel.GrossWeightCorrected);
	
КонецПроцедуры

Процедура ЗаполнитьDOC(DOCОбъект, СтруктураDOC)
	
	РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.Accepted, СтруктураDOC.Accepted);
	//РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.CCAFirstResponse, СтруктураDOC.CCAFirstResponse);
	РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.Received, СтруктураDOC.Received);
	
	// manual statuses
	// статусы пользователей шлюмберже оставляем без изменения
	// статусы пользователей сервис-провайдера меняем
	СтруктураПоиска = Новый Структура("Date,Status,User,Обработано");
	СтруктураПоиска.Обработано = Ложь;
	ТЗManualStatuses = DOCОбъект.ManualStatuses.Выгрузить();
	ТЗManualStatuses.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТЧМодифицирована = Ложь;
	Для каждого СтрокаManualStatuses Из СтруктураDOC.ManualStatuses Цикл
		Если РГСофтСерверПовтИспСеанс.ЭтоПользовательШлюмберже(СтрокаManualStatuses.User) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаManualStatuses);
		НайденныеСтроки = ТЗManualStatuses.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧ = НайденныеСтроки[0];
			Если СтрокаManualStatuses.Comment <> СтрокаТЧ.Comment Тогда
				СтрокаТЧ.Comment = СтрокаManualStatuses.Comment;
				ТЧМодифицирована = Истина;
			КонецЕсли;
		Иначе
			СтрокаТЧ = ТЗManualStatuses.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаManualStatuses);
			ТЧМодифицирована = Истина;
		КонецЕсли;
		СтрокаТЧ.Обработано = Истина;
	КонецЦикла;
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого СтрокаManualStatuses Из ТЗManualStatuses Цикл
		Если РГСофтСерверПовтИспСеанс.ЭтоПользовательШлюмберже(СтрокаManualStatuses.User) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаManualStatuses.Обработано Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаManualStatuses);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ТЧМодифицирована = Истина;
		Для каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ТЗManualStatuses.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	Если ТЧМодифицирована Тогда
		DOCОбъект.ManualStatuses.Загрузить(ТЗManualStatuses);
	КонецЕсли;
	// { RGS VShamin 25.04.2016 10:19:20 - S-I-0001602
	DOCОбъект.ДополнительныеСвойства.Вставить("Version", СтруктураDOC.Version);
	// } RGS VShamin 25.04.2016 10:19:28 - S-I-0001602
	
КонецПроцедуры

Процедура ЗаполнитьShipment(ShipmentОбъект, СтруктураShipment, ОписаниеНеКритичныхОшибок)
	
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.HouseWB, СтруктураShipment.HouseWB);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB2, СтруктураShipment.WB2);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB3, СтруктураShipment.WB3);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB4, СтруктураShipment.WB4);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.TotalWBWeight, СтруктураShipment.TotalWBWeight);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ActualPOA, СтруктураShipment.ActualPOA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ETD, СтруктураShipment.ETD);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ATD, СтруктураShipment.ATD);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreAlertETA, СтруктураShipment.PreAlertETA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ETA, СтруктураShipment.ETA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ATA, СтруктураShipment.ATA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CollectedFromPort, СтруктураShipment.CollectedFromPort);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreAlert, СтруктураShipment.PreAlert);
	// { RGS VShamin 25.08.2015 11:38:58 - исключаем поля
	//РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.DoxForCCA, СтруктураShipment.DoxForCCA);
	// } RGS VShamin 25.08.2015 11:38:58 - исключаем поля
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.DoxRcvd, СтруктураShipment.DoxRcvd);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InCustoms, СтруктураShipment.InCustoms);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.Cleared, СтруктураShipment.Cleared);
	// { RGS VShamin 25.08.2015 11:40:30 - исключаем поля
	//РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InfoOnHazardClasses, СтруктураShipment.InfoOnHazardClasses);	
	// } RGS VShamin 25.08.2015 11:40:31 - исключаем поля
	// { RGS AGorlenko 22.12.2015 16:29:43 - S-I-0001434
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspection, СтруктураShipment.PreInspection);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspectionStart, СтруктураShipment.PreInspectionStart);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspectionEnd, СтруктураShipment.PreInspectionEnd);
	// } RGS AGorlenko 22.12.2015 16:29:57 - S-I-0001434
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.Inspection, СтруктураShipment.Inspection);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InspectionStart, СтруктураShipment.InspectionStart);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InspectionEnd, СтруктураShipment.InspectionEnd);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCAJobReference, СтруктураShipment.CCAJobReference);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ConditionalRelease, СтруктураShipment.ConditionalRelease);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCDNumber, СтруктураShipment.CCDNumber);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCACurrentComment, СтруктураShipment.CCACurrentComment);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PiecesQty, СтруктураShipment.PiecesQty);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PermitsRequested, СтруктураShipment.PermitsRequested);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PermitsObtained, СтруктураShipment.PermitsObtained);
	
	//{ RGS AArsentev 25.10.2016
	COORequired = ПолучитьCOORequired(ShipmentОбъект);
	
	Если ЗначениеЗаполнено(ShipmentОбъект.Cleared) И НЕ ShipmentОбъект.ConditionalRelease И НЕ ЗначениеЗаполнено(ShipmentОбъект.COOReceived) Тогда
		Если COORequired И (ShipmentОбъект.ProcessLevel = Справочники.ProcessLevels.RUWE
			ИЛИ ShipmentОбъект.ProcessLevel = Справочники.ProcessLevels.RUEA) Тогда
			ShipmentОбъект.COOReceived = ShipmentОбъект.InCustoms;
			ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок + ShipmentОбъект.Номер + ОписаниеНеКритичныхОшибок + """COO requested"" is empty!";
			Если ЗначениеЗаполнено(ShipmentОбъект.Coordinator) Тогда
				ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок
				+ " Shipment Coordinator - " + СокрЛП(ShipmentОбъект.Coordinator)
				+ "("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipmentОбъект.Coordinator, "EMail") +")" + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ShipmentОбъект.COOReceived) И НЕ ЗначениеЗаполнено(ShipmentОбъект.COORequested) Тогда
		ShipmentОбъект.COORequested = ShipmentОбъект.InCustoms; 
		ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок + ShipmentОбъект.Номер +  """COO requested"" is empty!"; 
		Если ЗначениеЗаполнено(ShipmentОбъект.Coordinator) Тогда
			ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок
			+ " Shipment Coordinator - " + СокрЛП(ShipmentОбъект.Coordinator) 
			+ "("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipmentОбъект.Coordinator, "EMail") +")" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	//} RGS AArsentev 25.10.2016
	
КонецПроцедуры

#КонецОбласти

// { RGS LHristyc 21.06.2018 16:39:35 - S-I-0004942 
#Область ЗаполнениеОбъектовLeg6

Процедура ЗаполнитьShipment_Удалить(ShipmentОбъект, СтруктураShipment, ОписаниеНеКритичныхОшибок)
	
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.HouseWB, СтруктураShipment.HouseWB);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB2, СтруктураShipment.WB2);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB3, СтруктураShipment.WB3);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.WB4, СтруктураShipment.WB4);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.TotalWBWeight, СтруктураShipment.TotalWBWeight);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ActualPOA, СтруктураShipment.ActualPOA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ETD, СтруктураShipment.ETD);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ATD, СтруктураShipment.ATD);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreAlertETA, СтруктураShipment.PreAlertETA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ETA, СтруктураShipment.ETA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ATA, СтруктураShipment.ATA);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CollectedFromPort, СтруктураShipment.CollectedFromPort);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreAlert, СтруктураShipment.PreAlert);
	// { RGS VShamin 25.08.2015 11:38:58 - исключаем поля
	//РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.DoxForCCA, СтруктураShipment.DoxForCCA);
	// } RGS VShamin 25.08.2015 11:38:58 - исключаем поля
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.DoxRcvd, СтруктураShipment.DoxRcvd);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InCustoms, СтруктураShipment.InCustoms);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.Cleared, СтруктураShipment.Cleared);
	// { RGS VShamin 25.08.2015 11:40:30 - исключаем поля
	//РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InfoOnHazardClasses, СтруктураShipment.InfoOnHazardClasses);	
	// } RGS VShamin 25.08.2015 11:40:31 - исключаем поля
	// { RGS AGorlenko 22.12.2015 16:29:43 - S-I-0001434
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspection, СтруктураShipment.PreInspection);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspectionStart, СтруктураShipment.PreInspectionStart);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PreInspectionEnd, СтруктураShipment.PreInspectionEnd);
	// } RGS AGorlenko 22.12.2015 16:29:57 - S-I-0001434
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.Inspection, СтруктураShipment.Inspection);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InspectionStart, СтруктураShipment.InspectionStart);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.InspectionEnd, СтруктураShipment.InspectionEnd);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCAJobReference, СтруктураShipment.CCAJobReference);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.ConditionalRelease, СтруктураShipment.ConditionalRelease);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCDNumber, СтруктураShipment.CCDNumber);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.CCACurrentComment, СтруктураShipment.CCACurrentComment);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PiecesQty, СтруктураShipment.PiecesQty);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PermitsRequested, СтруктураShipment.PermitsRequested);
	РГСофтКлиентСервер.УстановитьЗначение(ShipmentОбъект.PermitsObtained, СтруктураShipment.PermitsObtained);
	
	//{ RGS AArsentev 25.10.2016
	COORequired = ПолучитьCOORequired(ShipmentОбъект);
	
	Если ЗначениеЗаполнено(ShipmentОбъект.Cleared) И НЕ ShipmentОбъект.ConditionalRelease И НЕ ЗначениеЗаполнено(ShipmentОбъект.COOReceived) Тогда
		Если COORequired И (ShipmentОбъект.ProcessLevel = Справочники.ProcessLevels.RUWE
			ИЛИ ShipmentОбъект.ProcessLevel = Справочники.ProcessLevels.RUEA) Тогда
			ShipmentОбъект.COOReceived = ShipmentОбъект.InCustoms;
			ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок + ShipmentОбъект.Номер + ОписаниеНеКритичныхОшибок + """COO requested"" is empty!";
			Если ЗначениеЗаполнено(ShipmentОбъект.Coordinator) Тогда
				ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок
				+ " Shipment Coordinator - " + СокрЛП(ShipmentОбъект.Coordinator)
				+ "("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipmentОбъект.Coordinator, "EMail") +")" + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ShipmentОбъект.COOReceived) И НЕ ЗначениеЗаполнено(ShipmentОбъект.COORequested) Тогда
		ShipmentОбъект.COORequested = ShipmentОбъект.InCustoms; 
		ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок + ShipmentОбъект.Номер +  """COO requested"" is empty!"; 
		Если ЗначениеЗаполнено(ShipmentОбъект.Coordinator) Тогда
			ОписаниеНеКритичныхОшибок = ОписаниеНеКритичныхОшибок
			+ " Shipment Coordinator - " + СокрЛП(ShipmentОбъект.Coordinator) 
			+ "("+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipmentОбъект.Coordinator, "EMail") +")" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	//} RGS AArsentev 25.10.2016
	
КонецПроцедуры

Процедура ЗаполнитьExportRequest(ExportRequestОбъект, СтруктураExportRequest, ОписаниеНеКритичныхОшибок);
	
	РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.CCAGLReceived, СтруктураExportRequest.CCAGLReceived);
	РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.FumigationRequired, ?(СтруктураExportRequest.FumigationRequired, Перечисления.YesNo.Yes, Перечисления.YesNo.No));
	// { RGS DKazanskiy 09.10.2018 12:59:38 - S-I-0005759
	//РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.FumigationCertificateRequired, ?(СтруктураExportRequest.FumigationCertificateRequired, Перечисления.YesNo.Yes, Перечисления.YesNo.No));
	//РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.FumigationDone, СтруктураExportRequest.FumigationDone);
	// } RGS DKazanskiy 09.10.2018 12:59:49 - S-I-0005759	
	РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.PermitsObtained, СтруктураExportRequest.PermitsObtained);
	РГСофтКлиентСервер.УстановитьЗначение(ExportRequestОбъект.PermitsRequired, ?(СтруктураExportRequest.PermitsRequired, Перечисления.YesNo.Yes, Перечисления.YesNo.No));
	ExportRequestОбъект.ДополнительныеСвойства.Вставить("Version", СтруктураExportRequest.Version);

КонецПроцедуры

Процедура ЗаполнитьExportShipment(ExportShipmentОбъект, СтруктураExportShipment, ОписаниеНеКритичныхОшибок);
	
	РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.SubmittedToCustoms, СтруктураExportShipment.SubmittedToCustoms);
	РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.ReleasedFromCustoms, СтруктураExportShipment.ReleasedFromCustoms);
	РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.CCDNumber, СтруктураExportShipment.CCDNumber);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.InternationalWB1, СтруктураExportShipment.InternationalWB1);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.InternationalETD, СтруктураExportShipment.InternationalETD);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.InternationalATD, СтруктураExportShipment.InternationalATD);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.PreAlertSent, СтруктураExportShipment.PreAlertSent);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.InternationalETA, СтруктураExportShipment.InternationalETA);
	//РГСофтКлиентСервер.УстановитьЗначение(ExportShipmentОбъект.InternationalATA, СтруктураExportShipment.InternationalATA);
	
КонецПроцедуры // } RGS LHristyc 21.06.2018 16:39:36 - S-I-0004942

#КонецОбласти
 

#Область ЗаполнениеОбъектовLeg7

Функция ЗаполнитьTrip(СтруктураФайла, TripОбъект, СтруктураTrip, ОписаниеОшибок, СозданныеParcels, СозданныеItems, ОписаниеОшибокRIET, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	// шапка Trip	
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.ПометкаУдаления, Ложь);
	
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.WarehouseFrom, СтруктураTrip.WarehouseFrom);
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.Equipment, СтруктураTrip.Equipment);
	
	Если ЗначениеЗаполнено(СтруктураTrip.EquipmentNo) Тогда
		РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.EquipmentNo, СтруктураTrip.EquipmentNo);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураTrip.Comment) И Найти(TripОбъект.Comment, СтруктураTrip.Comment) = 0 Тогда 
		TripОбъект.Comment = СокрЛП(TripОбъект.Comment + "
			|" + СтруктураTrip.Comment);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(СтруктураTrip.Final) Тогда
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.Final, СтруктураTrip.Final);
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(СтруктураTrip.ATD) Тогда
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.ATD, СтруктураTrip.ATD);
	//КонецЕсли;
	  		
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.Draft, ?(ЗначениеЗаполнено(СтруктураTrip.Draft), СтруктураTrip.Draft, TripОбъект.Final));
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.ETD, ?(ЗначениеЗаполнено(СтруктураTrip.ETD), СтруктураTrip.ETD, TripОбъект.ATD));
		
	// Service Provider
	РГСофтКлиентСервер.УстановитьЗначение(TripОбъект.ServiceProvider, СтруктураTrip.ServiceProvider);
      
	// Parcels
	МассивOLDParcels = TripОбъект.Parcels.ВыгрузитьКолонку("Parcel");
	
	МассивParcels = Новый Массив;
 	СоздатьItemsИParcels(СтруктураФайла, СтруктураTrip.МассивСтруктурParcels, TripОбъект, МассивParcels, ОписаниеОшибок, ОписаниеОшибокRIET, СозданныеParcels, СозданныеItems, УзелОбмена, НастройкаОбмена);
	
	// Удалим старые Parcels
	OLDParcels = РГСофтКлиентСервер.ВычестьМассивы(МассивOLDParcels, МассивParcels);
	Для Каждого OLDParcel из OLDParcels Цикл 
		СтрокаТЧ = TripОбъект.Parcels.Найти(OLDParcel, "Parcel");
		TripОбъект.Parcels.Удалить(СтрокаТЧ);	
	КонецЦикла;	
	
	// Final Destinations
	ЗаполнитьFinalDestination(СтруктураФайла, TripОбъект, СтруктураTrip, ОписаниеОшибок, ОписаниеОшибокRIET, НастройкаОбмена);
	
	// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
	//Возврат УбратьParcelsИзДругихTrips(МассивParcels, TripОбъект, ОписаниеОшибок, ОписаниеОшибокRIET);
	Возврат УбратьParcelsИзДругихTrips(МассивParcels, TripОбъект, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена);
	// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
	
КонецФункции 

// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
//Функция УбратьParcelsИзДругихTrips(МассивParcels, Trip, ОписаниеОшибок, ОписаниеОшибокRIET)
Функция УбратьParcelsИзДругихTrips(МассивParcels, Trip, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена = Неопределено)
// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	Запрос.УстановитьПараметр("Trip", Trip.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	TripParcels.Ссылка КАК Trip,
	               |	TripParcels.Parcel,
	               |	TripParcels.Parcel.Код КАК ParcelCode
	               |ИЗ
	               |	Документ.Trip.Parcels КАК TripParcels
	               |ГДЕ
	               |	TripParcels.Ссылка <> &Trip
	               |	И TripParcels.Parcel В(&МассивParcels)
	               |	И НЕ TripParcels.Ссылка.ПометкаУдаления
	               |ИТОГИ ПО
	               |	Trip";
	
	ВыборкаTrip = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаTrip.Следующий() Цикл
		
		TripОбъект = ВыборкаTrip.Trip.ПолучитьОбъект();
		
		СтрокаУдаленныхПарселей = "";
		Выборка = ВыборкаTrip.Выбрать();
		Пока Выборка.Следующий() Цикл 
			СтрокаТЧ = TripОбъект.Parcels.Найти(Выборка.Parcel, "Parcel");
			TripОбъект.Parcels.Удалить(СтрокаТЧ);
			СтрокаУдаленныхПарселей = СтрокаУдаленныхПарселей + Выборка.ParcelCode + Символы.ПС;
		КонецЦикла;
		
		// { RGS VShamin 04.08.2015 16:30:39 - S-I-0001168
		//Если TripОбъект.Parcels.Количество() = 0 Тогда 
		//	TripОбъект.ПометкаУдаления = Истина;
		//КонецЕсли;
		Если НЕ TripОбъект.DomesticOBSentToTMS И TripОбъект.Parcels.Количество() = 0 Тогда
			TripОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		// } RGS VShamin 04.08.2015 16:30:59 - S-I-0001168
		//{ RGS AArsentev 27.10.2016
		Специалист = ПолучитьСпециалиста(TripОбъект);
		Если ЗначениеЗаполнено(Специалист) Тогда
			EMail = Специалист.EMail;
		Иначе
			EMail = "";
		КонецЕсли;
		//} RGS AArsentev 27.10.2016
		Попытка
			TripОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			// { RGS VShamin 08.11.2014 14:58:20 - Регистрация объектов исключая отправителей
			TripОбъект.ОбменДанными.Отправитель = УзелОбмена;
			// } RGS VShamin 08.11.2014 14:58:25 - Регистрация объектов исключая отправителей
			TripОбъект.Записать();
		Исключение
			Если TripОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок") Тогда
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + TripОбъект
				//{ RGS AArsentev 27.10.2016
				+ ?(ЗначениеЗаполнено(Специалист)," ("+ EMail +")","")
				//} RGS AArsentev 27.10.2016
				+ ": " + TripОбъект.ДополнительныеСвойства.ОписаниеОшибок;
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "Parcels deleted when trip " + СокрЛП(Trip.Номер) + " is loaded: " + СтрокаУдаленныхПарселей;
				
				// { RGS VShamin 05.08.2015 16:44:36 - S-I-0001168
				Если TripОбъект.ДополнительныеСвойства.Свойство("РезультатПроверкиDomesticOBSentToTMS") Тогда
					
					ОписаниеОшибок = ОписаниеОшибок + TripОбъект.ДополнительныеСвойства.РезультатПроверкиDomesticOBSentToTMS;
					ОписаниеОшибокRIET = ОписаниеОшибокRIET + TripОбъект.ДополнительныеСвойства.РезультатПроверкиDomesticOBSentToTMS;
					
				КонецЕсли;
				// } RGS VShamin 05.08.2015 16:44:38 - S-I-0001168
				
				Если TripОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET") Тогда
					ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект 
						+ ": " + TripОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "Parcels deleted when trip " + СокрЛП(Trip.Номер) + " is loaded: " + СтрокаУдаленныхПарселей;
				КонецЕсли; 
				Если TripОбъект.ДополнительныеСвойства.Свойство("РезультатПроверкиLegalEntity") Тогда
					ОписаниеОшибок = ОписаниеОшибок + "LE check result:" + Символы.ПС + TripОбъект.ДополнительныеСвойства.РезультатПроверкиLegalEntity;
					ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект 
						+ ": " + "LE check result:" + Символы.ПС + TripОбъект.ДополнительныеСвойства.РезультатПроверкиLegalEntity;
				КонецЕсли;
				Если TripОбъект.ДополнительныеСвойства.Свойство("РазбивкаПоLE") Тогда
					ОписаниеОшибок = ОписаниеОшибок + ?(Прав(ОписаниеОшибок, 1) = Символы.ПС, "", Символы.ПС) + TripОбъект.ДополнительныеСвойства.РазбивкаПоLE;
				КонецЕсли;
				Возврат Ложь;
			Иначе
				ВызватьИсключение ОписаниеОшибки();
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
 
Функция ЗаполнитьParcel(Отказ, СтруктураФайла, ParcelОбъект, СтруктураParcel, TripОбъект, СозданныеItems, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.ПометкаУдаления, Ложь);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Проверен, Истина);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.LocalImpacked, СтруктураParcel.Repacked);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Urgency, Перечисления.Urgencies.Standard);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HazardClass, СтруктураParcel.HazardClass);
	// { RGS AGorlenko 09.05.2014 21:55:05
	//РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, СтруктураФайла.WarehouseFrom);
	Если СтруктураParcel.Свойство("WarehouseFrom") И TripОбъект = Неопределено Тогда
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, СтруктураParcel.WarehouseFrom);
	Иначе
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, ?(TripОбъект = Неопределено, СтруктураФайла.WarehouseFrom, TripОбъект.WarehouseFrom));
	КонецЕсли;
	// } RGS AGorlenko 09.05.2014 21:55:58
	
	Если ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) Тогда
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DeliveredToWH, СтруктураParcel.DeliveryDate);
	КонецЕсли;
	
	// если это новый локальный парсель сразу из final report
	Если Не ЗначениеЗаполнено(ParcelОбъект.DeliveredToWH)
		И Не ЗначениеЗаполнено(СтруктураParcel.DeliveryDate) И TripОбъект <> Неопределено 
		И Не РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(TripОбъект.WarehouseFrom, "Port") Тогда 
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DeliveredToWH, TripОбъект.Final);
	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseTo, СтруктураParcel.WarehouseTo);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.SerialNo, СтруктураParcel.SerialNo);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.NumOfParcels, СтруктураParcel.NumOfParcels);
	
	СтрокаPackingType = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаPackingTypes.Найти(СтруктураParcel.PackingType, "PackingTypeCode");
	Если НЕ ЗначениеЗаполнено(СтрокаPackingType) Тогда
		
		PackingType = Справочники.PackingTypes.СоздатьНовыйPackingType(СтруктураParcel.PackingType);
		
		НоваяСтрокаPackingType = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаPackingTypes.Добавить();
		НоваяСтрокаPackingType.PackingTypeCode = СтруктураParcel.PackingType;
		НоваяСтрокаPackingType.PackingType = PackingType;
		
	Иначе 
		PackingType = СтрокаPackingType.PackingType;		
	КонецЕсли;

	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.PackingType, PackingType);
	
	ЭтоНовыйПарсель = ParcelОбъект.ЭтоНовый();
	КонвертироватьВСтандартныеЕдиницыИзмерения = УзелОбмена <> Неопределено И НастройкаОбмена.КонвертироватьВСтандартныеЕдиницыИзмерения;
	Если ЭтоНовыйПарсель Тогда // оригинальные размеры заполняем только для новых объектов
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Length, СтруктураParcel.Length);
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Width, СтруктураParcel.Width);
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Height, СтруктураParcel.Height);
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DIMsUOM, СтруктураParcel.DIMsUOM);
	КонецЕсли;
	Если КонвертироватьВСтандартныеЕдиницыИзмерения Тогда
		//КоэффициентРазмера = НастройкаОбмена.КоэффицинтПересчетаРазмера / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ParcelОбъект.DIMsUOM, "ConversionFactor");
		КоэффициентРазмера = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтруктураParcel.DIMsUOM, "ConversionFactor") / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ParcelОбъект.DIMsUOM, "ConversionFactor");
	Иначе
		КоэффициентРазмера = 1;
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DIMsUOM, СтруктураParcel.DIMsUOM);
	КонецЕсли;
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.LengthCorrected, СтруктураParcel.LengthCorrected * КоэффициентРазмера);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WidthCorrected, СтруктураParcel.WidthCorrected * КоэффициентРазмера);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HeightCorrected, СтруктураParcel.HeightCorrected * КоэффициентРазмера);
	
	Если ЭтоНовыйПарсель Тогда
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeight, СтруктураParcel.GrossWeight);
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WeightUOM, СтруктураParcel.GrossWeightUOM);
	КонецЕсли;
	Если КонвертироватьВСтандартныеЕдиницыИзмерения Тогда
		//КоэффициентВеса = НастройкаОбмена.КоэффицинтПересчетаВеса / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ParcelОбъект.WeightUOM, "ConversionFactor");
		КоэффициентВеса = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтруктураParcel.GrossWeightUOM, "ConversionFactor") / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ParcelОбъект.WeightUOM, "ConversionFactor");
	Иначе
		КоэффициентВеса = 1;
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WeightUOM, СтруктураParcel.GrossWeightUOM);
	КонецЕсли;
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeightCorrected, СтруктураParcel.GrossWeightCorrected * КоэффициентВеса);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Comment, СтруктураParcel.Comment);
	 	
	// Items
	ЗаполнитьТЧДеталиParcel(СтруктураParcel.МассивСтруктурItems, СтруктураФайла, ParcelОбъект, СозданныеItems, УзелОбмена, НастройкаОбмена);
	 		
	NetWeight = ParcelОбъект.Детали.Итог("NetWeight");
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.NetWeight, NetWeight);
	
	//Если КонвертироватьВСтандартныеЕдиницыИзмерения Тогда
	//	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcelВСтандартные(ParcelОбъект);
	//	ParcelОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьРазмерыИВес", Истина);
	//КонецЕсли;
	
КонецФункции 

Процедура ЗаполнитьТЧДеталиParcel(МассивСтруктурItems, СтруктураФайла, ParcelОбъект, СозданныеItems, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	КонвертироватьВСтандартныеЕдиницыИзмерения = УзелОбмена <> Неопределено И НастройкаОбмена.КонвертироватьВСтандартныеЕдиницыИзмерения;
	Если КонвертироватьВСтандартныеЕдиницыИзмерения Тогда
		КоэффициентВеса = НастройкаОбмена.КоэффицинтПересчетаВеса / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ParcelОбъект.WeightUOM, "ConversionFactor");
	Иначе
		КоэффициентВеса = 1;
	КонецЕсли;
	
	МассивOLDItems = ParcelОбъект.Детали.ВыгрузитьКолонку("СтрокаИнвойса");
	МассивNewItems = Новый Массив;
	
	ТаблицаLocalItems = СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаLocalItems;
	
	Для Каждого СтруктураItem из МассивСтруктурItems Цикл
		        				
		// Local Item
		// { RGS AGorlenko 18.11.2014 1:13:44 - обмен изменениями
		//СтрокаLocalItem = ТаблицаLocalItems.Найти(СтруктураItem.ItemNo, "ItemNo");
		// поиск по ссылке
		ItemНайден = Ложь;
		Если СтруктураItem.Свойство("GUIDRIET") Тогда
			Попытка
				ГУИД = Новый УникальныйИдентификатор(СтруктураItem.GUIDRIET);
			Исключение
				ГУИД = Неопределено;
			КонецПопытки;
			Если ГУИД <> Неопределено Тогда
				ItemСсылка = Справочники.СтрокиИнвойса.ПолучитьСсылку(ГУИД);
				ItemНайден = ЗначениеЗаполнено(ItemСсылка);
			КонецЕсли;
		КонецЕсли;
		Если Не ItemНайден Тогда
			СтрокаLocalItem = ТаблицаLocalItems.Найти(СтруктураItem.ItemNo, "ItemNo");			
			Если СтрокаLocalItem <> Неопределено Тогда
				ItemСсылка = СтрокаLocalItem.Item;
				ItemНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		// } RGS AGorlenko 18.11.2014 1:13:49 - обмен изменениями
		Если ItemНайден Тогда
			// { RGS AGorlenko 08.05.2014 12:17:29 - убираем префиксы
			//И СтруктураФайла.ПрефиксСклада = СтрокаLocalItem.Prefix Тогда  
			// } RGS AGorlenko 08.05.2014 12:17:35 - убираем префиксы
			СтруктураItem.ItemСсылка = ItemСсылка;
		КонецЕсли;

		Если СтруктураItem.ItemСсылка <> Неопределено Тогда 
			
			СтрокаТЧ = ParcelОбъект.Детали.Найти(СтруктураItem.ItemСсылка, "СтрокаИнвойса");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ParcelОбъект.Детали.Добавить();
			КонецЕсли;
								
		иначе
			
			СтрокаТЧ = ParcelОбъект.Детали.Добавить();
			   	             			
		КонецЕсли;
		
		// PO no. - PO line no.
		Если ЗначениеЗаполнено(СтруктураItem.PONo) Тогда
			
			
			СтруктураДанныхPOLine = ПолучитьСтруктуруДанныхPOLine(СтруктураФайла.СтруктураТаблицОбъектов.ТаблицаPOLines, 
				СтруктураItem.PONo, СтруктураItem.ParentCompany);
			
			Если ЗначениеЗаполнено(СтруктураДанныхPOLine) Тогда
				РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаЗаявкиНаЗакупку, СтруктураДанныхPOLine.POLineNo);
			КонецЕсли; 
			
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.НомерЗаявкиНаЗакупку, СокрЛП(СтруктураItem.PONo));
			
		КонецЕсли; 
			
		// Invoice line
		InvoiceLine = ПолучитьInvoiceLineДляСтрокиParcel(СтруктураItem, ParcelОбъект, ТаблицаLocalItems, СтруктураДанныхPOLine, СтруктураФайла.ПрефиксСклада, СтрокаТЧ.НомерЗаявкиНаЗакупку, СозданныеItems, УзелОбмена, НастройкаОбмена);
				
		СтруктураРеквизитовItem = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(InvoiceLine, 
			"НомерЗаявкиНаЗакупку,СтрокаЗаявкиНаЗакупку,ImportReference,СерийныйНомер,Количество,ЕдиницаИзмерения,NetWeight");
		
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаИнвойса, InvoiceLine);
		POLineNo = РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовItem.СтрокаЗаявкиНаЗакупку, "НомерСтрокиЗаявкиНаЗакупку");
		Если ЗначениеЗаполнено(POLineNo) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаЗаявкиНаЗакупку, POLineNo);
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Receiver, СтруктураРеквизитовItem.ImportReference);
		// { RGS AGorlenko 02.10.2015 18:29:15 - для случая, когда 1 парсель разупаковывается в несколько, айтемы могут разбиться по нескольким парселям
		//РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Qty, СтруктураРеквизитовItem.Количество);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Qty, СтруктураItem.Qty);
		// } RGS AGorlenko 02.10.2015 18:30:06 - для случая, когда 1 парсель разупаковывается в несколько, айтемы могут разбиться по нескольким парселям
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.QtyUOM, СтруктураРеквизитовItem.ЕдиницаИзмерения);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.НомерЗаявкиНаЗакупку, СтруктураРеквизитовItem.НомерЗаявкиНаЗакупку);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СерийныйНомер, СтруктураРеквизитовItem.СерийныйНомер);
		// { RGS AGorlenko 16.11.2015 13:50:06 - количество в ТЧ может отличаться от общего количества айтема
		//РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.NetWeight, СтруктураРеквизитовItem.NetWeight * КоэффициентВеса);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.NetWeight, ?(СтруктураItem.NetWeight = Неопределено, 0, СтруктураItem.NetWeight) * КоэффициентВеса);
		// } RGS AGorlenko 16.11.2015 13:50:33 - количество в ТЧ может отличаться от общего количества айтема

		Если СтрокаТЧ.СтрокаИнвойса <> Неопределено Тогда
			МассивNewItems.Добавить(СтрокаТЧ.СтрокаИнвойса);
		КонецЕсли;
		
	КонецЦикла;

	// Удалим старые Items
	OLDItems = РГСофтКлиентСервер.ВычестьМассивы(МассивOLDItems, МассивNewItems);
	Для Каждого OLDItem из OLDItems Цикл 
		СтрокаТЧ = ParcelОбъект.Детали.Найти(OLDItem, "СтрокаИнвойса");
		ParcelОбъект.Детали.Удалить(СтрокаТЧ);	
	КонецЦикла;	
	
КонецПроцедуры 

Функция ПолучитьСтруктуруДанныхPOLine(ТаблицаPOLines, PONo, ParentCompany)
	
	// { RGS AGorlenko 30.11.2015 18:52:12 - S-I-0001317
	СтруктураПоискаPO = Новый Структура("PONo", PONo);
	// } RGS AGorlenko 30.11.2015 18:52:14 - S-I-0001317
	// Найдем PO lines, которые относятся к этой PO
	СтруктураПоискаPOLine = Новый Структура("PONo,ParentCompany", PONo, ParentCompany);
	 		
	ПодходящиеPOLines = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPOLine);
	
	// { RGS AGorlenko 30.11.2015 18:17:30 - S-I-0001317
	// TODO RGS agorlenko 30.11.2015: после отказа от режима совместимости переделать на СтрНайти
	// Если не найдено ни одной PO line - сообщаем об ошибке и выходим
	//Если ПодходящиеPOLines.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	Если ПодходящиеPOLines.Количество() = 0 Тогда
		ПодходящиеPO = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPO);
		Если ПодходящиеPO.Количество() = 0 Тогда
			МассивПодстрокРО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(PONo, "-");
			КоличествоПодстрок = МассивПодстрокРО.Количество();
			Если КоличествоПодстрок > 1 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(МассивПодстрокРО[КоличествоПодстрок - 1]) Тогда
				УкороченныйНомерРО = "";
				Для ТекИндекс = 0 По КоличествоПодстрок - 2 Цикл
					УкороченныйНомерРО = УкороченныйНомерРО + МассивПодстрокРО[ТекИндекс] + "-";
				КонецЦикла;
				УкороченныйНомерРО = Лев(УкороченныйНомерРО, СтрДлина(УкороченныйНомерРО) - 1);
				СтруктураПоискаPO.PONo = УкороченныйНомерРО;
				ПодходящиеPO = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPO);
				Если ПодходящиеPO.Количество() > 0 Тогда
					PONo = УкороченныйНомерРО;
					СтруктураПоискаPOLine.PONo = УкороченныйНомерРО;
					ПодходящиеPOLines = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPOLine);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПодходящиеPO.Количество() = 0 Тогда // еще может быть вариант, когда при выгрузке мы добавляли ведущие символы (код борга)
			ПозицияПробела = Найти(PONo, " ");
			Если ПозицияПробела <> 0 Тогда
				УкороченныйНомерРО = СокрЛП(Прав(PONo, СтрДлина(PONo) - ПозицияПробела));
				СтруктураПоискаPO.PONo = УкороченныйНомерРО;
				ПодходящиеPO = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPO);
				Если ПодходящиеPO.Количество() > 0 Тогда
					PONo = УкороченныйНомерРО;
					СтруктураПоискаPOLine.PONo = УкороченныйНомерРО;
					ПодходящиеPOLines = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPOLine);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Если не найдено ни одной PO line - сообщаем об ошибке и выходим
	Если ПодходящиеPOLines.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	// } RGS AGorlenko 30.11.2015 18:17:31 - S-I-0001317
	
	// Создадим структуру, которую будем возвращать
	СтрокаСвойств = "POLine, POLineNo, AU, AUActivity, Activity, ERPTreatment, Catalog, CountryOfOrigin, Price, Currency";
	СтруктураДанныхPOLine = Новый Структура(СтрокаСвойств);
	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхPOLine, ПодходящиеPOLines[0]);

	Возврат СтруктураДанныхPOLine;
	
КонецФункции

Функция ПолучитьInvoiceLineДляСтрокиParcel(СтруктураItem, ParcelОбъект, ТаблицаLocalItems, СтруктураДанныхPOLine, ПрефиксСклада, НомерЗаявкиНаЗакупку, СозданныеItems, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	КонвертироватьВСтандартныеЕдиницыИзмерения = УзелОбмена <> Неопределено И НастройкаОбмена.КонвертироватьВСтандартныеЕдиницыИзмерения;
	
	InvoiceLineОбъект = Неопределено;
	
	Если СтруктураItem.ImportLocal = "Import" Тогда
		
		Возврат СтруктураItem.ItemСсылка;
		
	иначе
		
		Если ЗначениеЗаполнено(СтруктураItem.ItemСсылка) Тогда
			InvoiceLineОбъект = СтруктураItem.ItemСсылка.ПолучитьОбъект();
 		Иначе
			InvoiceLineОбъект = Справочники.СтрокиИнвойса.СоздатьЭлемент();
			InvoiceLineОбъект.LocalOnly = Истина;
			InvoiceLineОбъект.Наименование = СтруктураItem.ItemNo;
			// { RGS AGorlenko 08.05.2014 12:18:05 - убираем префикс
			//InvoiceLineОбъект.Prefix = ПрефиксСклада;
			// } RGS AGorlenko 08.05.2014 12:18:14 - убираем префикс
		КонецЕсли;
		
	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.ПометкаУдаления, Ложь);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.НомерЗаявкиНаЗакупку, НомерЗаявкиНаЗакупку);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.SoldTo, СтруктураItem.ParentCompany);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.КодПоИнвойсу, СтруктураItem.PartNo);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.ЕдиницаИзмерения, СтруктураItem.QtyUOM);
	// { RGS AGorlenko 28.10.2015 15:20:49 - получаем количество с учетом остальных парселей
	//РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Количество, СтруктураItem.Qty);
	Если InvoiceLineОбъект.ЭтоНовый() Тогда
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Количество, СтруктураItem.Qty);
	Иначе
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Количество, ПолучитьКоличествоLocalItem(InvoiceLineОбъект.Ссылка, ParcelОбъект.Ссылка) + СтруктураItem.Qty);
	КонецЕсли;
	// } RGS AGorlenko 28.10.2015 15:21:10 - получаем количество с учетом остальных парселей
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СерийныйНомер, СтруктураItem.SerialNo);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.НаименованиеТовара, СтруктураItem.Description);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.DescriptionRus, СтруктураItem.Description);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.WeightUOM, СтруктураItem.NetWeightUOM);
	Если КонвертироватьВСтандартныеЕдиницыИзмерения И ЗначениеЗаполнено(InvoiceLineОбъект.WeightUOM) Тогда
		КоэффициентВеса = НастройкаОбмена.КоэффицинтПересчетаВеса / РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(InvoiceLineОбъект.WeightUOM, "ConversionFactor");
	Иначе
		КоэффициентВеса = 1;
	КонецЕсли;
	Если СтруктураItem.NetWeight <> Неопределено Тогда
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.NetWeight, СтруктураItem.NetWeight * КоэффициентВеса);
	КонецЕсли;

	Если СтруктураДанныхPOLine <> Неопределено Тогда 
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтрокаЗаявкиНаЗакупку, СтруктураДанныхPOLine.POLine);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Каталог, СтруктураДанныхPOLine.Catalog);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Классификатор, СтруктураДанныхPOLine.ERPTreatment);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.КостЦентр, СтруктураДанныхPOLine.AU);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(СтруктураДанныхPOLine.Activity));
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтранаПроисхождения, СокрЛП(СтруктураДанныхPOLine.CountryOfOrigin));
		Если НЕ ЗначениеЗаполнено(InvoiceLineОбъект.Активити) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(СтруктураДанныхPOLine.AUActivity));
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Цена, СтруктураДанныхPOLine.Price);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Сумма, InvoiceLineОбъект.Цена * InvoiceLineОбъект.Количество);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Currency, СтруктураДанныхPOLine.Currency);
	КонецЕсли;

	Если InvoiceLineОбъект.Модифицированность() Тогда 
		
		// если поменялось LE, то надо зарегистрировать парсель к обмену
		ПроверитьИзменениеLE(InvoiceLineОбъект);
		InvoiceLineОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
		// { RGS VShamin 08.11.2014 14:58:20 - Регистрация объектов исключая отправителей
		InvoiceLineОбъект.ОбменДанными.Отправитель = УзелОбмена;
		// } RGS VShamin 08.11.2014 14:58:25 - Регистрация объектов исключая отправителей
		// { RGS AGorlenko 18.12.2015 19:22:52 - оптимизация загрузки
		InvoiceLineОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
		Если НЕ ParcelОбъект.ДополнительныеСвойства.Свойство("ЕстьМодифицированныеАйтемы") Тогда
			ParcelОбъект.ДополнительныеСвойства.Вставить("ЕстьМодифицированныеАйтемы", Истина);
		КонецЕсли;
		// } RGS AGorlenko 18.12.2015 19:23:01 - оптимизация загрузки
		InvoiceLineОбъект.Записать();
		
		Если ТаблицаLocalItems.Найти(СтруктураItem.ItemNo, "ItemNo") = Неопределено Тогда
			НоваяСтрокаLocalItems = ТаблицаLocalItems.Добавить();
			НоваяСтрокаLocalItems.Item = InvoiceLineОбъект.Ссылка;
			// { RGS AGorlenko 08.05.2014 12:18:36 - убираем префиксы
			//НоваяСтрокаLocalItems.Prefix = InvoiceLineОбъект.Prefix;
			// } RGS AGorlenko 08.05.2014 12:18:41 - убираем префиксы
			НоваяСтрокаLocalItems.ItemNo = InvoiceLineОбъект.Наименование;
			
			СозданныеItems.Добавить(НоваяСтрокаLocalItems.ItemNo);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если УзелОбмена <> Неопределено Тогда
	
		СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
		
		СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
		СтруктураЗаписи.УникальныйИдентификаторИсточника = InvoiceLineОбъект.Ссылка;
		Если СтруктураItem.Свойство("УникальныйИдентификаторПриемника") Тогда
			СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураItem.УникальныйИдентификаторПриемника;
		КонецЕсли;
		СтруктураЗаписи.ТипИсточника = "СправочникСсылка.СтрокиИнвойса";
		СтруктураЗаписи.ТипПриемника = "СправочникСсылка.СтрокиИнвойсаLeg7";
		
		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
	
	КонецЕсли;

	Возврат InvoiceLineОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьFinalDestination(СтруктураФайла, TripОбъект, СтруктураTrip, ОписаниеОшибок, ОписаниеОшибокRIET, НастройкаОбмена)
	
	Если НастройкаОбмена.ЗаполнятьLEвТрипах Тогда
		
		ДанныеDestinationETA = СтруктураTrip.МассивСтруктурDestinationETA;
		
	Иначе // автоматическое заполнение данных по LE
		
		ТаблицаДанныхCREW = Новый ТаблицаЗначений;
		ТаблицаДанныхCREW.Колонки.Добавить("Waybill", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
		ТаблицаДанныхCREW.Колонки.Добавить("CREW", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
		
		РасширенныеДанныеFinalDestinationItems = LocalDistributionСервер.ПолучитьРасширенныеДанныеFinalDestination(TripОбъект.Parcels.ВыгрузитьКолонку("Parcel"), ?(ЗначениеЗаполнено(TripОбъект.Final), TripОбъект.Final, TripОбъект.Draft));
		РасширенныеДанныеFinalDestinationItems.Индексы.Добавить("Borg, WarehouseTo, SoldTo");
		РасширенныеДанныеFinalDestination = РасширенныеДанныеFinalDestinationItems.Скопировать(, "WarehouseTo, SoldTo, Borg, LegalEntity");
		РасширенныеДанныеFinalDestination.Свернуть("WarehouseTo, SoldTo, Borg, LegalEntity");
		РасширенныеДанныеFinalDestination.Колонки.Добавить("Waybill", Новый ОписаниеТипов("Строка"));
		РасширенныеДанныеFinalDestination.Колонки.Добавить("ETA", Новый ОписаниеТипов("Дата"));
		РасширенныеДанныеFinalDestination.Колонки.Добавить("ATA", Новый ОписаниеТипов("Дата"));
		
		Петроальянс = Справочники.SoldTo.НайтиПоКоду("SCP");
		// для айтемов с пустыми боргами посылаем уведовление пользователям
		СтрокиСПустымиБоргами = РасширенныеДанныеFinalDestinationItems.НайтиСтроки(Новый Структура("Borg", Справочники.BORGs.ПустаяСсылка()));
		Если СтрокиСПустымиБоргами.Количество() > 0 Тогда
			// { RGS AGorlenko 02.02.2016 13:32:56 - для Петроальянса локальные айтемы без борга
			//ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект + ":";
			ОтбивкаПоПустымБоргам = "";
			// } RGS AGorlenko 02.02.2016 13:33:15 - для Петроальянса локальные айтемы без борга
			Для каждого СтрокаСПустымБоргом Из СтрокиСПустымиБоргами Цикл
				// { RGS AGorlenko 02.02.2016 13:38:02 - для Петроальянса локальные айтемы без борга
				//ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + Символы.Таб + "For Item " + СокрЛП(СтрокаСПустымБоргом.ItemNo) + " BORG is empty!";
				Если СтрокаСПустымБоргом.SoldTo = Петроальянс И СтрокаСПустымБоргом.LocalOnly Тогда
					Продолжить;
				КонецЕсли;
				ОтбивкаПоПустымБоргам = ОтбивкаПоПустымБоргам + Символы.ПС + Символы.Таб + "For Item " + СокрЛП(СтрокаСПустымБоргом.ItemNo) + " BORG is empty!";
				// } RGS AGorlenko 02.02.2016 13:38:04 - для Петроальянса локальные айтемы без борга
			КонецЦикла;
			// { RGS AGorlenko 02.02.2016 13:39:30 - для Петроальянса локальные айтемы без борга
			Если Не ПустаяСтрока(ОтбивкаПоПустымБоргам) Тогда
				ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + TripОбъект + ":" + ОтбивкаПоПустымБоргам;
			КонецЕсли;
			// } RGS AGorlenko 02.02.2016 13:39:32 - для Петроальянса локальные айтемы без борга
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("WarehouseTo, SoldTo, BORG");
		СтруктураПоискаCREW = Новый Структура("WarehouseTo, SoldTo");
		СтруктураПоискаСУчетомПризнакаЛокального = Новый Структура("WarehouseTo, SoldTo, BORG, LocalOnly");
		Для Каждого СтруктураDestinationETA из СтруктураTrip.МассивСтруктурDestinationETA Цикл
			ИспользуетсяCREW = Не ПустаяСтрока(СтруктураDestinationETA.CREW);
			// { RGS AGorlenko 01.02.2016 14:07:34 - доработки по CREW
			//ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураDestinationETA);
			// } RGS AGorlenko 01.02.2016 14:12:18 - доработки по CREW
			Если ИспользуетсяCREW Тогда
				//СтруктураПоиска.BORG = Справочники.BORGs.ПустаяСсылка();
				ЗаполнитьЗначенияСвойств(СтруктураПоискаCREW, СтруктураDestinationETA);
				НайденныеСтроки = РасширенныеДанныеFinalDestination.НайтиСтроки(СтруктураПоискаCREW);
				Если НЕ ПустаяСтрока(СтруктураDestinationETA.Waybill) Тогда
					СтрокаДанныхCREW = ТаблицаДанныхCREW.Добавить();
					СтрокаДанныхCREW.Waybill = СтруктураDestinationETA.Waybill;
					СтрокаДанныхCREW.CREW = СтруктураDestinationETA.CREW;
				КонецЕсли;
			// { RGS AGorlenko 01.02.2016 14:07:34 - доработки по CREW
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураDestinationETA);
				НайденныеСтроки = РасширенныеДанныеFinalDestination.НайтиСтроки(СтруктураПоиска);
			// } RGS AGorlenko 01.02.2016 14:12:18 - доработки по CREW
			КонецЕсли;
			// { RGS AGorlenko 01.02.2016 14:13:43 - доработки по CREW
			//НайденныеСтроки = РасширенныеДанныеFinalDestination.НайтиСтроки(СтруктураПоиска);
			// } RGS AGorlenko 01.02.2016 14:13:45 - доработки по CREW
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				// { RGS VShamin 10.08.2015 16:56:52 - 2 легал ентити 1 вейбил
				//НайденнаяСтрока = НайденныеСтроки[0];
				//Если ИспользуетсяCREW И НЕ ПустаяСтрока(СтруктураDestinationETA.Waybill) Тогда
				//	НайденнаяСтрока.Waybill = НайденнаяСтрока.Waybill + ?(ПустаяСтрока(НайденнаяСтрока.Waybill), "", ", ") + СтруктураDestinationETA.Waybill;
				//Иначе
				//	НайденнаяСтрока.Waybill = СтруктураDestinationETA.Waybill;
				//КонецЕсли;
				//НайденнаяСтрока.ETA = СтруктураDestinationETA.ETA;
				//НайденнаяСтрока.ATA = СтруктураDestinationETA.ATA;
				Для каждого ТекСтрока Из НайденныеСтроки Цикл
					Если НЕ ПустаяСтрока(СтруктураDestinationETA.Waybill) Тогда
						ТекСтрока.Waybill = ТекСтрока.Waybill + ?(ПустаяСтрока(ТекСтрока.Waybill), "", ", ") + СтруктураDestinationETA.Waybill;
					КонецЕсли;
					ТекСтрока.ETA = СтруктураDestinationETA.ETA;
					ТекСтрока.ATA = СтруктураDestinationETA.ATA;
				КонецЦикла;
				// { RGS VShamin 10.08.2015 16:56:52 - 2 легал ентити 1 вейбил				

			Иначе
				// данные есть в файле, но нет в базе
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + TripОбъект 
					+ ": Missing data of DestinationETA (these data are in the file but not in the database): WarehouseTo = '"
					+ СокрЛП(СтруктураПоиска.WarehouseTo) + "', SoldTo = '" + СокрЛП(СтруктураПоиска.SoldTo) + "', BORG = '" + СокрЛП(СтруктураПоиска.BORG) + "'" + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		// проверяем данные, которые есть в базе, но нет в файле
		Для каждого СтрокаДанныхБазы Из РасширенныеДанныеFinalDestination Цикл
			Нашли = Ложь;
			НашлиСПустымБоргом = Ложь;
			Для каждого ТекСтруктураDestinationETA Из СтруктураTrip.МассивСтруктурDestinationETA Цикл
				Если СтрокаДанныхБазы.WarehouseTo = ТекСтруктураDestinationETA.WarehouseTo
					И СтрокаДанныхБазы.SoldTo = ТекСтруктураDestinationETA.SoldTo
					И СтрокаДанныхБазы.BORG = ТекСтруктураDestinationETA.BORG Тогда
					Нашли = Истина;
					Прервать;
				ИначеЕсли СтрокаДанныхБазы.WarehouseTo = ТекСтруктураDestinationETA.WarehouseTo
					И СтрокаДанныхБазы.SoldTo = ТекСтруктураDestinationETA.SoldTo
					И ТекСтруктураDestinationETA.BORG  = Справочники.BORGs.ПустаяСсылка() Тогда
					НашлиСПустымБоргом = Истина;
				КонецЕсли;
			КонецЦикла;
			// эти данные есть в базе, но нет в файле
			Если Не Нашли Тогда
				Если СтрокаДанныхБазы.SoldTo = Петроальянс И НашлиСПустымБоргом Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСУчетомПризнакаЛокального, СтрокаДанныхБазы);
					СтруктураПоискаСУчетомПризнакаЛокального.LocalOnly = Ложь;
					НайденныеСтрокиАйтемов = РасширенныеДанныеFinalDestinationItems.НайтиСтроки(СтруктураПоискаСУчетомПризнакаЛокального);
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанныхБазы);
					НайденныеСтрокиАйтемов = РасширенныеДанныеFinalDestinationItems.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
				ОтбивкаПоАйтемам = "";
				Для каждого НайденнаяСтрокаАйтема Из НайденныеСтрокиАйтемов Цикл
					ОтбивкаПоАйтемам = ОтбивкаПоАйтемам + Символы.Таб + "Item = " + НайденнаяСтрокаАйтема.Item + Символы.ПС;
				КонецЦикла;
				Если Не ПустаяСтрока(ОтбивкаПоАйтемам) Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + TripОбъект 
						+ ": Updated data of DestinationETA (these data are in the database but not in the file): WarehouseTo = '"
						+ СокрЛП(СтрокаДанныхБазы.WarehouseTo) + "', SoldTo = '" + СокрЛП(СтрокаДанныхБазы.SoldTo) + "', BORG = '" + СокрЛП(СтрокаДанныхБазы.BORG) + "'" + Символы.ПС + ОтбивкаПоАйтемам;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеFinalDestination = РасширенныеДанныеFinalDestination.Скопировать(,"WarehouseTo, LegalEntity, ETA, ATA");
		ДанныеFinalDestination.Свернуть("WarehouseTo, LegalEntity, ETA, ATA");
		ДанныеFinalDestination.Колонки.Добавить("Waybill", Новый ОписаниеТипов("Строка"));
		СтруктураПоиска = Новый Структура("WarehouseTo, LegalEntity");
		МассивWaybills = Новый Массив;
		
		Для каждого СтрокаТЗ Из ДанныеFinalDestination Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			НайденныеСтроки = РасширенныеДанныеFinalDestination.НайтиСтроки(СтруктураПоиска);
			МассивWaybills.Очистить();
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если МассивWaybills.Найти(СокрЛП(НайденнаяСтрока.Waybill)) = Неопределено Тогда
					МассивWaybills.Добавить(СокрЛП(НайденнаяСтрока.Waybill));
				КонецЕсли;
			КонецЦикла;
			МассивWaybills = РГСофтКлиентСервер.СортироватьМассив(МассивWaybills);
			СтрокаWaybills = "";
			Для каждого ТекWaybill Из МассивWaybills Цикл
				СтрокаWaybills = СтрокаWaybills + ТекWaybill + ", ";
			КонецЦикла;
			СтрокаТЗ.Waybill = Лев(СтрокаWaybills, СтрДлина(СтрокаWaybills) - 2);
		КонецЦикла;
		
		ДанныеDestinationETA = ДанныеFinalDestination;
		
		// запишем данные по CREWs
		Если ТаблицаДанныхCREW.Количество() > 0 Тогда
			Если TripОбъект.ЭтоНовый() Тогда
				TripСсылка = Документы.Trip.ПолучитьСсылку(Новый УникальныйИдентификатор);
				TripОбъект.УстановитьСсылкуНового(TripСсылка);
			Иначе
				TripСсылка = TripОбъект.Ссылка;
			КонецЕсли;
			НЗ = РегистрыСведений.WaybillsAndCREWs.СоздатьНаборЗаписей();
			НЗ.Отбор.Trip.Установить(TripСсылка);
			
			// { RGS VShamin 10.08.2015 18:36:08 - 
			СгруппироватьПоWaybill(ТаблицаДанныхCREW);
			// } RGS VShamin 10.08.2015 18:36:08 - 
			
			Для каждого СтрокаДанныхCREW Из ТаблицаДанныхCREW Цикл
				ТекЗапись = НЗ.Добавить();
				ТекЗапись.Trip = TripСсылка;
				ТекЗапись.Waybill = СтрокаДанныхCREW.Waybill;
				ТекЗапись.CREW = СтрокаДанныхCREW.CREW;
			КонецЦикла;
			НЗ.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаOLDFinalDestinations = TripОбъект.FinalDestinations.Выгрузить(,"WarehouseTo, LegalEntity");
	ТаблицаNewFinalDestinations = Новый ТаблицаЗначений;
	ТаблицаNewFinalDestinations.Колонки.Добавить("WarehouseTo", Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаNewFinalDestinations.Колонки.Добавить("LegalEntity", Новый ОписаниеТипов("СправочникСсылка.LegalEntities"));
	СтруктураПоиска = Новый Структура("WarehouseTo, LegalEntity");
	
	Для Каждого СтруктураDestinationETA из ДанныеDestinationETA Цикл
		
		СтруктураПоиска.WarehouseTo = СтруктураDestinationETA.WarehouseTo;
		СтруктураПоиска.LegalEntity = СтруктураDestinationETA.LegalEntity;
		СтрокиFinalDestinations = TripОбъект.FinalDestinations.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиFinalDestinations.Количество() = 0 Тогда 
			СтрокаFinalDestinations = TripОбъект.FinalDestinations.Добавить();
		Иначе
			СтрокаFinalDestinations = СтрокиFinalDestinations[0];
		КонецЕсли;
	
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.WarehouseTo, СтруктураDestinationETA.WarehouseTo);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.LegalEntity, СтруктураDestinationETA.LegalEntity);
		Если НЕ ЗначениеЗаполнено(СтрокаFinalDestinations.ETA) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.ETA, СтруктураDestinationETA.ETA);
		ИначеЕсли TripОбъект.ServiceProvider = СтруктураФайла.ServiceProvider Тогда
			Если ЗначениеЗаполнено(СтруктураDestinationETA.ETA) Тогда
				РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.ETA, СтруктураDestinationETA.ETA);
			Иначе
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + TripОбъект 
					+ ": ETA for warehouse '" + СтруктураDestinationETA.WarehouseTo + "' is empty";
			КонецЕсли;
		КонецЕсли;
		
		// { RGS AGorlenko 10.05.2014 20:59:47 - S-I-0000699
		//Если ЗначениеЗаполнено(СтруктураDestinationETA.ATA) Тогда 
		Если ЗначениеЗаполнено(СтруктураDestinationETA.ATA) И TripОбъект.ServiceProvider = СтруктураФайла.ServiceProvider Тогда
		// } RGS AGorlenko 10.05.2014 20:59:52 - S-I-0000699
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.ATA, СтруктураDestinationETA.ATA);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтруктураDestinationETA.Waybill) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаFinalDestinations.Waybill, СтруктураDestinationETA.Waybill);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаNewFinalDestinations.Добавить(), СтрокаFinalDestinations);

	КонецЦикла;
	
	// Удалим старые Final Destinations
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого СтрокаOLDFinalDestinations Из ТаблицаOLDFinalDestinations Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаOLDFinalDestinations);
		НайденныеСтроки = ТаблицаNewFinalDestinations.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаOLDFinalDestinations);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДляУдаления);
		НайденныеСтроки = TripОбъект.FinalDestinations.НайтиСтроки(СтруктураПоиска);
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			TripОбъект.FinalDestinations.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Функция ПолучитьОбъектXDTO(ИспользуемаяФабрикаXDTO, URIПространстваИмен, Имя) 
	
	// Конструирует объект XDTO типа Имя с помощью ФабрикиXDTO и URIПространстваИмен
	
	ТипПоля = ИспользуемаяФабрикаXDTO.Тип(URIПространстваИмен, Имя);
	Возврат ИспользуемаяФабрикаXDTO.Создать(ТипПоля);
	
КонецФункции

Процедура ДобавитьВМассив(МассивЗначений, НовыйЭлементМассива)
	
	Если МассивЗначений.Найти(НовыйЭлементМассива) = Неопределено Тогда 
		МассивЗначений.Добавить(НовыйЭлементМассива);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМассивыДляСтруктурТекстовыхЗначенийКодов(СтруктураТекстовыхЗначенийКодов)
	
	СтруктураТекстовыхЗначенийКодов.МассивParcelNo    	   = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивWarehouse 	   = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивPackingType 	   = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивUOM         	   = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивImportItemNo     = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивLocalItemNo      = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивParentCompanies  = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивPONo             = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивTripNo           = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивEquipments       = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивServiceProviders = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивHazardClasses    = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивПрефиксовСкладов = МассивПрефиксовСкладовLeg7();
	// { RGS AGorlenko 15.04.2014 16:37:24 - S-I-0000686
	СтруктураТекстовыхЗначенийКодов.МассивLegalEntities    = Новый Массив;
	// } RGS AGorlenko 15.04.2014 16:38:00 - S-I-0000686
	СтруктураТекстовыхЗначенийКодов.МассивSoldTo           = Новый Массив;
	СтруктураТекстовыхЗначенийКодов.МассивBORGs            = Новый Массив;
	
КонецПроцедуры

Функция TripNoСоответствуетПравилуНумерации(TripNo, МассивПрефиксовСкладов)
	
	Если Не ЗначениеЗаполнено(TripNo) Тогда
    	Возврат Ложь;
	КонецЕсли;
	
	ПозицияДефиса = Найти(TripNo, "-");
	Если ПозицияДефиса <> 6 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрефиксСкладаВTripNo = Сред(TripNo, 5, 1);
	Если МассивПрефиксовСкладов.Найти(ПрефиксСкладаВTripNo) = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция МассивПрефиксовСкладовLeg7()
	
	МассивПрефиксовСкладовLeg7 = Новый Массив;
	МассивПрефиксовСкладовLeg7.Добавить("S");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ServiceProviders.Prefix
	               |ИЗ
	               |	Справочник.ServiceProviders КАК ServiceProviders
	               |ГДЕ
	               |	НЕ ServiceProviders.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПрефиксовСкладовLeg7.Добавить(Выборка.Prefix);    	
	КонецЦикла;
	  	
	Возврат МассивПрефиксовСкладовLeg7; 
	
КонецФункции

Функция ReportIsOlderThanThePreviousOne(Sender, ReportsDate)
	
	НаборЗаписейLeg7 = РегистрыСведений.Leg7ReceivedReportsDate.СоздатьНаборЗаписей();
	НаборЗаписейLeg7.Отбор.Sender.Установить(Sender);
	НаборЗаписейLeg7.Прочитать();
	
	Если НаборЗаписейLeg7.Количество() = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьНЗ = НаборЗаписейLeg7[0];
	
	Возврат ReportsDate <= ЗаписьНЗ.ReportsDate;
	
КонецФункции

Процедура ДобавитьЗаписьLeg7ReceivedReportsDate(Sender, ReportsDate)
	
	НаборЗаписейLeg7 = РегистрыСведений.Leg7ReceivedReportsDate.СоздатьНаборЗаписей();
	НаборЗаписейLeg7.Отбор.Sender.Установить(Sender);
	НаборЗаписейLeg7.Прочитать();
	
	Если НаборЗаписейLeg7.Количество() = 0 Тогда 
		ЗаписьНЗ = НаборЗаписейLeg7.Добавить();
		ЗаписьНЗ.Sender = Sender;
	иначе
		ЗаписьНЗ = НаборЗаписейLeg7[0];
	КонецЕсли;
	
	ЗаписьНЗ.ReportsDate = ReportsDate;
	НаборЗаписейLeg7.Записать();
	
КонецПроцедуры

Процедура ПроверитьИзменениеLE(InvoiceLineОбъект)
	
	Если InvoiceLineОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	SoldToНовый = InvoiceLineОбъект.SoldTo;
	КостЦентрНовый = InvoiceLineОбъект.КостЦентр;
	SoldToСтарый = InvoiceLineОбъект.Ссылка.SoldTo;
	КостЦентрСтарый = InvoiceLineОбъект.Ссылка.КостЦентр;
	
	Если SoldToНовый = SoldToСтарый И КостЦентрНовый = КостЦентрСтарый Тогда
		Возврат;
	КонецЕсли;
	
	LEНовый = ПолучитьLE(SoldToНовый, КостЦентрНовый);
	LEСтарый = ПолучитьLE(SoldToСтарый, КостЦентрСтарый);
	
	Если LEНовый <> LEСтарый Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ParcelsДетали.Ссылка
			|ИЗ
			|	Справочник.Parcels.Детали КАК ParcelsДетали
			|ГДЕ
			|	ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса
			|	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления
			|	И НЕ ParcelsДетали.Ссылка.Отменен";

		Запрос.УстановитьПараметр("СтрокаИнвойса", InvoiceLineОбъект.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьLE(SoldTo, КостЦентр)
	
	Если SoldTo.Leg7LegalEntityDetermining = Перечисления.Leg7LegalEntityDetermining.DefaultLegalEntity Тогда
		Возврат SoldTo.LegalEntityForLeg7;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	AUsAndLegalEntitiesСрезПоследних.LegalEntity
	|ИЗ
	|	РегистрСведений.AUsAndLegalEntities.СрезПоследних(
	|			,
	|			AU = &AU
	|				И ParentCompany = &SoldTo) КАК AUsAndLegalEntitiesСрезПоследних";
	
	Запрос.УстановитьПараметр("AU", КостЦентр);
	Запрос.УстановитьПараметр("SoldTo", SoldTo);
	
КонецФункции

// { RGS AGorlenko 12.11.2015 18:08:22 - оптимизация загрузки
Процедура ЗарегистрироватьМодифицированныеПарсели(ТаблицаParcels, TripОбъект, УзелОбмена)
	
	Если ТаблицаParcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивParcels = ТаблицаParcels.ВыгрузитьКолонку("Parcel");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	TripParcels.Parcel,
		|	TripParcels.Ссылка.Draft КАК Draft,
		|	TripParcels.Ссылка.WarehouseFrom КАК WarehouseFrom
		|ИЗ
		|	Документ.Trip.Parcels КАК TripParcels
		|ГДЕ
		|	TripParcels.Ссылка В
		|			(ВЫБРАТЬ
		|				TripParcels.Ссылка
		|			ИЗ
		|				Документ.Trip.Parcels КАК TripParcels
		|			ГДЕ
		|				TripParcels.Parcel В (&МассивParcels))";
	
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МассивParcels.Найти(ВыборкаДетальныеЗаписи.Parcel) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаParcels.Добавить(), ВыборкаДетальныеЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	Если TripОбъект <> Неопределено Тогда
		Для каждого СтрокаТЧ Из TripОбъект.Parcels Цикл
			СтрокаТаблицы = ТаблицаParcels.Добавить();
			СтрокаТаблицы.Parcel = СтрокаТЧ.Parcel;
			СтрокаТаблицы.Draft = TripОбъект.Draft;
			СтрокаТаблицы.WarehouseFrom = TripОбъект.WarehouseFrom;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаParcels.Свернуть("Parcel, Draft, WarehouseFrom");
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если КлючИЗначение.Значение = УзелОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		ДатыНачалаВыгрузкиДокументовПоСкладам = ПланыОбмена.Leg7.ПолучитьДатыНачалаВыгрузкиДокументовПоСкладам(КлючИЗначение.Значение);
		МассивСкладов = Справочники.ServiceProviders.ПолучитьМассивСкладов(КлючИЗначение.Ключ);
		
		Для каждого СтрокаТаблицы Из ТаблицаParcels Цикл
			ТекДатаНачалаВыгрузки = ДатыНачалаВыгрузкиДокументовПоСкладам[СтрокаТаблицы.WarehouseFrom];
			Если МассивСкладов.Найти(СтрокаТаблицы.WarehouseFrom) <> Неопределено
				И (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Draft) 
					ИЛИ ?(ТекДатаНачалаВыгрузки = Неопределено, '00010101', ТекДатаНачалаВыгрузки) <= СтрокаТаблицы.Draft) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, СтрокаТаблицы.Parcel);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // } RGS AGorlenko 12.11.2015 18:08:29 - оптимизация загрузки

// { RGS ASeryakov 24.05.2018 17:00:00 S-I-0005295
Функция СоответствуетФорматуGUID(objRegExpGUID, СтрокаСообщения)
	
	Возврат objRegExpGUID.Test(СтрокаСообщения);
	
КонецФункции // } RGS ASeryakov 24.05.2018 17:00:00 S-I-0005295

//////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

Функция ТемаПисьмаLeg7Report(ТемаПисьма) экспорт
	
	Возврат Найти(ТемаПисьма, "[Leg7 Reports] from") > 0;
	
КонецФункции

Функция ПослатьПисьмоОбОшибке(ДанныеДляОтправкиОтвета, Причина, НастройкаОбмена)
	
	Тема = "Failed to process " + ДанныеДляОтправкиОтвета.ТемаИсходногоПисьма;
	
	Тело =
		"Failed to process " + ДанныеДляОтправкиОтвета.ТемаИсходногоПисьма + ".
		|" + Причина;	
		
	Если НЕ НастройкаОбмена.ОтправлятьФайлВОтчетеОбОшибках ИЛИ НЕ ДанныеДляОтправкиОтвета.Свойство("Вложения") Тогда
		
		// { RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
		//ДатаСообщения = ТекущаяДата();
		
		//НЗ = РегистрыСведений.EMailQueue.СоздатьНаборЗаписей();
		//НЗ.Отбор.Date.Установить(ДатаСообщения);
		//НЗ.Отбор.EMail.Установить(ДанныеДляОтправкиОтвета.АдресПолучателя);
		//
		//ЗаписьНабора = НЗ.Добавить();
		//ЗаписьНабора.Date = ДатаСообщения;
		//ЗаписьНабора.EMail = ДанныеДляОтправкиОтвета.АдресПолучателя;
		//ЗаписьНабора.Subject = Тема;
		//ЗаписьНабора.Body = Тело;
		//ЗаписьНабора.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		//
		//НЗ.Записать();
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(
		ДанныеДляОтправкиОтвета.АдресПолучателя,
		Тема,
		Тело,
		,
		Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст, );
		// { RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
	Иначе
		
		// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
		//ImportExportСервер.ПослатьПисьмо(
		//	ДанныеДляОтправкиОтвета.ИнтернетПочта,
		//	ДанныеДляОтправкиОтвета.АдресОтправителя,
		//	ДанныеДляОтправкиОтвета.АдресПолучателя,
		//	Тема,
		//	Тело, 
		//	, ?(ДанныеДляОтправкиОтвета.Свойство("Вложения"), ДанныеДляОтправкиОтвета.Вложения, Неопределено));
		Попытка
			
			ImportExportСервер.ПослатьПисьмо(
				ДанныеДляОтправкиОтвета.ИнтернетПочта,
				ДанныеДляОтправкиОтвета.АдресОтправителя,
				ДанныеДляОтправкиОтвета.АдресПолучателя,
				Тема,
				Тело, 
				, ?(ДанныеДляОтправкиОтвета.Свойство("Вложения"), ДанныеДляОтправкиОтвета.Вложения, Неопределено)
				, "riet-support-ld@slb.com");
				
		Исключение
			
			ImportExportСервер.ПослатьПисьмо(
				ДанныеДляОтправкиОтвета.ИнтернетПочтаRCA,
				ДанныеДляОтправкиОтвета.АдресОтправителя,
				ДанныеДляОтправкиОтвета.АдресПолучателя,
				Тема,
				Тело, 
				, ?(ДанныеДляОтправкиОтвета.Свойство("Вложения"), ДанныеДляОтправкиОтвета.Вложения, Неопределено)
				, "riet-support-ld@slb.com");
			
		КонецПопытки;		
		// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСтроку(ИсходнаяСтрока, НоваяСтрока)
	
	ИсходнаяСтрока = ИсходнаяСтрока + Символы.ПС + НоваяСтрока;
			  
КонецПроцедуры

Функция ПолучитьПутьКXMLФайлу(Вложения, Архив = Истина) Экспорт
	
	Если Вложения.Количество() <> 1 Тогда
		Возврат Строка(Вложения.Количество()) + " files attached.";
	КонецЕсли;
		
	Вложение = Вложения.Получить(0);
	
	Если Архив Тогда
		Если Найти(Вложение.ИмяФайла, "zip") = 0 Тогда
			Возврат "The attached file is not .zip.";
		КонецЕсли;
	Иначе
		Если Найти(Вложение.ИмяФайла, "xml") = 0 Тогда
			Возврат "The attached file is not .xml.";
		КонецЕсли;
	КонецЕсли;
	
	ДД = Вложение.Данные; 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ВремФайл = Новый Файл(ИмяВременногоФайла);
	
	ПутьККаталогу = ВремФайл.Путь + ?(РГСофтСерверПовтИспСеанс.ЭтоProductionБаза(), "Leg7Catalog", "Leg7CatalogTest");
	СоздатьКаталог(ПутьККаталогу);
	
	Если Не Архив Тогда
		ПолныйПуть = ПутьККаталогу + "\" + Вложение.ИмяФайла;
		ДД.Записать(ПолныйПуть);
		Возврат ПолныйПуть;
	КонецЕсли;
	
	ИмяZipФайла = ВремФайл.Путь + Вложение.ИмяФайла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ДД.Записать(ИмяZipФайла);
	
	//разархивируем файл
	ZipЧтение = Новый ЧтениеZipФайла(ИмяZipФайла);
	
	Если ZipЧтение.Элементы.Количество() <> 1 Тогда 
		УдалитьФайлы(ИмяZipФайла);
		Возврат Строка(ZipЧтение.Элементы.Количество()) + " files in zip-file.";
	КонецЕсли;
	
	ЭлементZipФайла = ZipЧтение.Элементы[0];
	
	Если Найти(ЭлементZipФайла.Имя, "xml") = 0 Тогда
		УдалитьФайлы(ИмяZipФайла);
		Возврат "Zip-file does not contain xml-file.";
	КонецЕсли;
	
	ZipЧтение.Извлечь(ЭлементZipФайла, ПутьККаталогу, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	УдалитьФайлы(ИмяZipФайла);
	Возврат ПутьККаталогу + "\" + ЭлементZipФайла.Имя;
	
КонецФункции

Функция ПолучитьОписаниеИнформацииОбОшибке(ИнформацияОбОшибке)
	
	Описание = ИнформацияОбОшибке.Описание;
		
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Описание = Описание + "
		|
		|by reason:
		|
		|" + ПолучитьОписаниеИнформацииОбОшибке(ИнформацияОбОшибке.Причина);
	КонецЕсли;
	
	Возврат СокрЛП(Описание);
	
КонецФункции

Функция ПолучитьURIПространстваИменLeg7() 
	
	Возврат "http://www.slb.com/RIET/Leg7new";
	
КонецФункции

Функция ПолучитьАдресПолучателяОшибок(Письмо)

	АдресПолучателя = Справочники.ServiceProviders.ПолучитьEMailBoxForErrorMassagesПоОтправителю(СокрЛП(Письмо.Отправитель.Адрес));	
	
	//{ RGS AArsentev 07.12.2016
	//Для Каждого ОбратныйАдрес Из Письмо.ОбратныйАдрес Цикл
	//	
	//	Если Найти(АдресПолучателя, ОбратныйАдрес.Адрес) = 0 Тогда  
	//		АдресПолучателя = АдресПолучателя + ";" + ОбратныйАдрес.Адрес;
	//	КонецЕсли;
	//	
	//КонецЦикла; 
	//  		
	//Если АдресПолучателя = "" Тогда  
	//	АдресПолучателя = Письмо.Отправитель.Адрес;
	//КонецЕсли;
	//} RGS AArsentev 07.12.2016
	Возврат АдресПолучателя;

КонецФункции 

Функция ПолучитьАдресПолучателяОшибокСоСтороныRIETLeg7()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg7.Значение КАК Адрес
		|ИЗ
		|	Константа.АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg7 КАК АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg7";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;;

КонецФункции 

Функция ПолучитьАдресПолучателяОшибокСоСтороныRIETLeg6()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg6.Значение КАК Адрес
		|ИЗ
		|	Константа.АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg6 КАК АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg6";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;;

КонецФункции 

// { RGS LHristyc 02.07.2018 12:26:41 - S-I-0004942
Функция ПолучитьАдресПолучателяОшибокСоСтороныRIETExportReports()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресатыПолученияОтчетаПоОбменуСоСтороныRietExportReports.Значение КАК Адрес
		|ИЗ
		|	Константа.АдресатыПолученияОтчетаПоОбменуСоСтороныRietExportReports КАК АдресатыПолученияОтчетаПоОбменуСоСтороныRietExportReports";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;;

КонецФункции // } RGS LHristyc 02.07.2018 12:26:55 - S-I-0004942 

Функция ПолучитьReportИзXML(ИмяВременногоФайла)
	
	// Получает структуру данных из переданного XML файла
	// В случае ошибки возрващает текст ошибки
	
	ТипMessage = ФабрикаXDTO.Тип(ПолучитьURIПространстваИменLeg7(), "Message");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ОбъектXDTO = Неопределено;
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипMessage);
	Исключение			
		ОбъектXDTO = "Errors loading:
			|" + ПолучитьОписанияИнформацииОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		ЧтениеXML.Закрыть();
	Исключение
	КонецПопытки;
		
	Возврат ОбъектXDTO;

КонецФункции

Функция ПолучитьОписанияИнформацииОбОшибке(ИнформацияОбОшибке)
	
	Описание = ИнформацияОбОшибке.Описание;
		
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Описание = Описание + "
		|по причине:
		|
		|" + ПолучитьОписанияИнформацииОбОшибке(ИнформацияОбОшибке.Причина);
	КонецЕсли;
	
	Возврат СокрЛП(Описание);
	
КонецФункции

// { RGS VShamin 13.08.2015 16:12:37 - 
//Функция ПолучитьДанныеItem(Item)
Функция ПолучитьДанныеItem(ТекстОшибок, Item, ItemНайден)
// } RGS VShamin 13.08.2015 16:12:37 - 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Items.Ссылка КАК Item,
		|	ВЫРАЗИТЬ(Items.Наименование КАК СТРОКА(30)) КАК ItemNo,
		|	ЕСТЬNULL(ПоставкаУпаковочныеЛисты.Ссылка.ATA, ДАТАВРЕМЯ(1, 1, 1)) КАК ShipmentATA
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
		|			ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
		|		ПО Items.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
		|ГДЕ
		|	Items.Ссылка = &Item
		|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен
		|	И НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен";
	
	Запрос.УстановитьПараметр("Item", Item);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// { RGS VShamin 13.08.2015 15:36:24 - 
	//Возврат РезультатЗапроса.Выгрузить()[0];
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		Возврат РезультатЗапроса.Выгрузить()[0];
	
	Иначе
	
		ДобавитьСтроку(ТекстОшибок, "Data retrieval error for Item " + Item + ". Perhaps this Item is local in RIET base.");
		ItemНайден = Ложь;
		Возврат Неопределено;
	
	КонецЕсли;
	// } RGS VShamin 13.08.2015 15:36:25 - 
	
КонецФункции

// { RGS VShamin 10.08.2015 18:37:30 - 
Процедура СгруппироватьПоWaybill(ТаблицаДанныхCREW)

	Буфер = ТаблицаДанныхCREW.СкопироватьКолонки();
	
	Для каждого ТекСтрока Из ТаблицаДанныхCREW Цикл
		
		ПараметрыОтбораОдинаковых = Новый Структура;
		ПараметрыОтбораОдинаковых.Вставить("Waybill", ТекСтрока.Waybill);
		МассивОдинаковых = Буфер.НайтиСтроки(ПараметрыОтбораОдинаковых);
		
		Если МассивОдинаковых.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Waybill", ТекСтрока.Waybill);
		МассивПоWaybil = ТаблицаДанныхCREW.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивПоWaybil.Количество() = 1 Тогда
		
			НовСтрока = Буфер.Добавить();
			НовСтрока.Waybill = МассивПоWaybil[0].Waybill;
			НовСтрока.CREW = МассивПоWaybil[0].CREW;
			
		ИначеЕсли МассивПоWaybil.Количество() > 1 Тогда
			
			НовСтрока = Буфер.Добавить();
			НовСтрока.Waybill = МассивПоWaybil[0].Waybill;
			НовСтрока.CREW = МассивПоWaybil[0].CREW + ",";
			
			Для Счетчик = 1 По МассивПоWaybil.Количество() - 1 Цикл
			
				НовСтрока.CREW = НовСтрока.CREW + МассивПоWaybil[Счетчик].CREW + ",";
			
			КонецЦикла;
			
			НовСтрока.CREW = Лев(НовСтрока.CREW, СтрДлина(НовСтрока.CREW) - 1);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаДанныхCREW = Буфер;

КонецПроцедуры // } RGS VShamin 10.08.2015 18:37:30 - 

Процедура УстановитьПризнакУспешнойЗагрузки(УзелОбмена, НомерСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsИзменения.Ссылка
		|ИЗ
		|	Справочник.Parcels.Изменения КАК ParcelsИзменения
		|ГДЕ
		|	ParcelsИзменения.Узел = &Узел
		|	И ParcelsИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвойсИзменения.Ссылка
		|ИЗ
		|	Документ.Инвойс.Изменения КАК ИнвойсИзменения
		|ГДЕ
		|	ИнвойсИзменения.Узел = &Узел
		|	И ИнвойсИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИзменения.Ссылка
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Изменения КАК КонсолидированныйПакетЗаявокНаПеревозкуИзменения
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИзменения.Узел = &Узел
		|	И КонсолидированныйПакетЗаявокНаПеревозкуИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НЗ = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НЗ.Отбор.УзелИнформационнойБазы.Установить(УзелОбмена);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НЗ.Отбор.УникальныйИдентификаторИсточника.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НЗ.Прочитать();
		
		Для каждого ЗаписьНабора Из НЗ Цикл
			ЗаписьНабора.ПолученоПодтверждениеОбУспешнойЗагрузке = Истина;
		КонецЦикла;
		
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоLocalItem(Item, Parcel)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ParcelsДетали.Qty), 0) КАК Qty
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса
	|	И ParcelsДетали.Ссылка <> &Парсель
	|	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления
	|	И НЕ ParcelsДетали.Ссылка.Отменен";
	
	Запрос.УстановитьПараметр("СтрокаИнвойса", Item);
	Запрос.УстановитьПараметр("Парсель", Parcel);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Qty;
	
КонецФункции

// { RGS VShamin 17.12.2015 23:11:13 - рассылка отбивок по пользователям
Процедура ЗаписатьОтбивкиДляПользователейВОчередьРассылкиПисем(СоответствиеДляРассылкиОтбивок)

	ДатаОтбивки = ТекущаяДата();
	// { RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
	//НаборЗаписейРассылки = РегистрыСведений.EMailQueue.СоздатьНаборЗаписей();
	//НаборЗаписейРассылки.Отбор.Date.Установить(ДатаОтбивки);
	// } RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
	АдресКопии = ПолучитьАдресПолучателяОшибокСоСтороныRIETLeg6();
	
	Для каждого ТекСоответствие Из СоответствиеДляРассылкиОтбивок Цикл
		// { RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
		//НаборЗаписейРассылки.Очистить();
		
		EmailПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСоответствие.Ключ, "Email");
		//НаборЗаписейРассылки.Отбор.EMail.Установить(EmailПользователя);
		//
		//ЗаписьНабора = НаборЗаписейРассылки.Добавить();
		//ЗаписьНабора.EMail = EmailПользователя;
		//ЗаписьНабора.Date = ДатаОтбивки;
		//ЗаписьНабора.Subject = "Failed to process [Leg7 Reports] from NEK";
		//ЗаписьНабора.Body = ТекСоответствие.Значение;
		//ЗаписьНабора.Copy = АдресКопии;
		//
		//НаборЗаписейРассылки.Записать();
		РГСофт.ЗарегистрироватьПочтовоеСообщение(EmailПользователя, "Failed to process [Leg7 Reports] from NEK", ТекСоответствие.Значение, , , АдресКопии);
		// } RGS ASeryakov 05.06.2015 14:00:00 S-I-0005399
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 17.12.2015 23:11:14 - рассылка отбивок по пользователям

Процедура ДобавитьРОСУчетомПреобразований(МассивPONo, Знач PONo)
	
	МассивПодстрокРО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(PONo, "-");
	КоличествоПодстрок = МассивПодстрокРО.Количество();
	Если КоличествоПодстрок > 1 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(МассивПодстрокРО[КоличествоПодстрок - 1]) Тогда
		УкороченныйНомерРО = "";
		Для ТекИндекс = 0 По КоличествоПодстрок - 2 Цикл
			УкороченныйНомерРО = УкороченныйНомерРО + МассивПодстрокРО[ТекИндекс] + "-";
		КонецЦикла;
		УкороченныйНомерРО = Лев(УкороченныйНомерРО, СтрДлина(УкороченныйНомерРО) - 1);
		ДобавитьВМассив(МассивPONo, УкороченныйНомерРО);
	КонецЕсли;
	ПозицияПробела = Найти(PONo, " ");
	Если ПозицияПробела <> 0 Тогда
		УкороченныйНомерРО = СокрЛП(Прав(PONo, СтрДлина(PONo) - ПозицияПробела));
		ДобавитьВМассив(МассивPONo, УкороченныйНомерРО);
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеСтруктурыДанныхAdditionalInfo

// { RGS VShamin 23.12.2015 12:15:40 - emails
Функция ПолучитьСтруктуруФайлаИзAdditionalInfoReport(AdditionalInfoReport, НастройкаОбмена)
	
	// Загружает AdditionalInfo Report из XDTO-объекта 
	// В случае обработанных ошибок - возвращает текст ошибок
	// В случае успеха - возвращае структуру данных
	ТекстОшибок = "";
	ТекстОшибокRIET = "";
	
	СтруктураДанных = Новый Структура("СтруктураТаблицОбъектов, МассивСтруктурEmails");
	
	СтруктураТекстовыхЗначенийКодов = Новый Структура("МассивDOCGUIDS");
	СтруктураТекстовыхЗначенийКодов.МассивDOCGUIDS = Новый Массив;
	
	// EMAILS
	Emails = AdditionalInfoReport.Emails;
	Если Emails <> Неопределено Тогда
		ЗаполнитьСтруктуруДанныхИзEmails(ТекстОшибок, Emails, СтруктураДанных, СтруктураТекстовыхЗначенийКодов);
	КонецЕсли;
	
	// ТАБЛИЦЫ ОБЪЕКТОВ
	
	СтруктураДанных.СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектовAdditionalInfo(СтруктураТекстовыхЗначенийКодов);
	
	// ПРОВЕРКА ДАННЫХ И ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ ДАННЫХ
	
	ПроверитьИЗаполнитьСтруктуруЗначенийAdditionalInfo(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена);
	
	Если Не ПустаяСтрока(ТекстОшибок) ИЛИ Не ПустаяСтрока(ТекстОшибокRIET) Тогда
		Возврат Новый Структура("ТекстОшибок, ТекстОшибокRIET", ТекстОшибок, ТекстОшибокRIET);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // } RGS VShamin 23.12.2015 12:15:42 - emails

// { RGS VShamin 23.12.2015 12:15:42 - emails
Процедура ЗаполнитьСтруктуруДанныхИзEmails(ТекстОшибок, Emails, СтруктураДанных, СтруктураТекстовыхЗначенийКодов)
	
	//список invoice lines
	СтруктураДанных.МассивСтруктурEmails = Новый Массив;
	
	Если Emails.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекEmail из Emails Цикл
		
		СтруктураEmail = Неопределено;
		ЗаполнитьСтруктуруТекстовыхЗначенийEmail(ТекстОшибок, СтруктураEmail, ТекEmail, СтруктураТекстовыхЗначенийКодов);
		СтруктураДанных.МассивСтруктурEmails.Добавить(СтруктураEmail);
		
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 23.12.2015 12:15:42 - emails

#КонецОбласти

#Область СтруктураТекстовыхЗначенийAdditionalInfo

// { RGS VShamin 23.12.2015 12:21:38 - emails
Процедура ЗаполнитьСтруктуруТекстовыхЗначенийEmail(ТекстОшибок, СтруктураEmail, Email, СтруктураТекстовыхЗначенийКодов)
	
	СтруктураEmail = Новый Структура("DOCGUID,Subject,Body,ReplyTo,Recipient,EmailСсылка,DOCСсылка");
		
	// DOCGUID
	DOCGUID = СокрЛП(Email.DOCGUID);
	Если Не ЗначениеЗаполнено(DOCGUID) Тогда
		ДобавитьСтроку(ТекстОшибок, "Email DOCGUID is empty!");
	Иначе
		СтруктураEmail.DOCGUID = DOCGUID;
		ДобавитьВМассив(СтруктураТекстовыхЗначенийКодов.МассивDOCGUIDS, DOCGUID);
	КонецЕсли;
	
	//ПрефиксОшибки = "For Email DOCGUID " + DOCGUID + ": ";
	
	// Subject
	Subject = СокрЛП(Email.Subject);
	Если ЗначениеЗаполнено(Subject) Тогда
		СтруктураEmail.Subject = Subject;
	КонецЕсли;
	
	// Body
	Body = СокрЛП(Email.Body);
	Если ЗначениеЗаполнено(Body) Тогда
		СтруктураEmail.Body = Body;
	КонецЕсли;

	// ReplyTo
	ReplyTo = СокрЛП(Email.ReplyTo);
	Если ЗначениеЗаполнено(ReplyTo) Тогда
		СтруктураEmail.ReplyTo = ReplyTo;
	КонецЕсли;
	
	// Recipient
	МассивСтруктурRecipient = Новый Массив();
	Для Каждого Recipient из Email.Recipient Цикл 
		
		СтруктураRecipient = Новый Структура;
		СтруктураRecipient.Вставить("Recipient", Recipient);
		МассивСтруктурRecipient.Добавить(СтруктураRecipient);
		
	КонецЦикла;
	СтруктураEmail.Recipient = МассивСтруктурRecipient;
	
	// GUIDs
	Если ЗначениеЗаполнено(Email.GUIDSP) Тогда
		СтруктураEmail.Вставить("УникальныйИдентификаторПриемника", СтрЗаменить(СокрЛП(Email.GUIDSP), Символы.НПП, ""));
	Иначе
		ДобавитьСтроку(ТекстОшибок, "Email GUIDSP is empty!");
	КонецЕсли;
	Если ЗначениеЗаполнено(Email.GUIDRIET) Тогда
		СтруктураEmail.Вставить("GUIDRIET", Email.GUIDRIET);
	КонецЕсли;

КонецПроцедуры // } RGS VShamin 23.12.2015 12:21:45 - emails

// { RGS VShamin 23.12.2015 13:17:34 - additionalinfo
Функция ПолучитьСтруктуруТаблицОбъектовAdditionalInfo(СтруктураТекстовыхЗначений)
	
	СтруктураОбъектовБазы = Новый Структура();
	Возврат СтруктураОбъектовБазы;
	
КонецФункции // } RGS VShamin 23.12.2015 13:17:44 - additionalinfo

#КонецОбласти

#Область ПроверкаИЗаполнениеAdditionalInfo

// { RGS VShamin 23.12.2015 14:53:13 - emails
Процедура ПроверитьИЗаполнитьСтруктуруЗначенийAdditionalInfo(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, НастройкаОбмена)
	
	// Emails
	Если ЗначениеЗаполнено(СтруктураДанных.МассивСтруктурEmails) Тогда
		Для Каждого СтруктураEmail из СтруктураДанных.МассивСтруктурEmails Цикл 
			ПроверитьИЗаполнитьСтруктуруЗначенийEmail(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураEmail);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 23.12.2015 14:53:15 - emails

// { RGS VShamin 23.12.2015 14:53:13 - emails
Процедура ПроверитьИЗаполнитьСтруктуруЗначенийEmail(ТекстОшибок, ТекстОшибокRIET, СтруктураДанных, СтруктураEmail)
	
	СтруктураТаблицОбъектов = СтруктураДанных.СтруктураТаблицОбъектов;
	
	// ищем по ссылке
	EmailНайден = Ложь;
	Если СтруктураEmail.Свойство("УникальныйИдентификаторПриемника") Тогда
		
		Если СтруктураEmail.УникальныйИдентификаторПриемника <> "" Тогда
		
			EmailСсылка = Неопределено;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
			|ГДЕ
			|	ВЫРАЗИТЬ(СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК СТРОКА(36)) = &УникальныйИдентификаторПриемника";
			Запрос.УстановитьПараметр("УникальныйИдентификаторПриемника", СтруктураEmail.УникальныйИдентификаторПриемника);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				EmailСсылка = Выборка.УникальныйИдентификаторИсточника;
				EmailНайден = Истина;
			КонецЕсли;
			
		Иначе
			
			ДобавитьСтроку(ТекстОшибок, "'GUIDSP' " + СтруктураEmail.GUIDSP + " property isn't filled at object of Email!");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ищем по ссылке
	DOCНайден = Ложь;
	Если СтруктураEmail.Свойство("DOCGUID") Тогда
		
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтруктураEmail.DOCGUID);
		Исключение
			ГУИД = Неопределено;
		КонецПопытки;
		
		Если ГУИД <> Неопределено Тогда
			
			DOCСсылка = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПолучитьСсылку(ГУИД);
			Если ЗначениеЗаполнено(DOCСсылка) Тогда
				DOCНайден = Истина;
			КонецЕсли;
			
		Иначе
			
			ДобавитьСтроку(ТекстОшибок, "'DOCGUID' " + СтруктураEmail.DOCGUID + " isn't correctly filled at object of Email!");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если EmailНайден Тогда
		СтруктураEmail.EmailСсылка = EmailСсылка;
	КонецЕсли;
	
	Если DOCНайден Тогда
		СтруктураEmail.DOCСсылка = DOCСсылка;
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 23.12.2015 14:53:15 - emails

#КонецОбласти

#Область СозданиеОбъектовAdditionalInfo

// { RGS VShamin 23.12.2015 17:19:12 - emails
Процедура СоздатьОбъектыAdditionalInfo(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Emails
	СоздатьEmails(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена, НастройкаОбмена);
	
КонецПроцедуры // } RGS VShamin 23.12.2015 17:20:27 - emails

// { RGS VShamin 23.12.2015 17:19:12 - emails
Процедура СоздатьEmails(СтруктураФайла, ОписаниеОшибок, ОписаниеОшибокRIET, УзелОбмена = Неопределено, НастройкаОбмена = Неопределено)
	
	СтруктураТаблиц = СтруктураФайла.СтруктураТаблицОбъектов;
	МассивСтруктурEmails = СтруктураФайла.МассивСтруктурEmails;
	
	Для каждого СтруктураEmail Из МассивСтруктурEmails Цикл
		
		Если СтруктураEmail.EmailСсылка = Неопределено Тогда
			
			EmailОбъект = Документы.EMails.СоздатьДокумент();
			
		Иначе
			
			EmailОбъект = СтруктураEmail.EmailСсылка.ПолучитьОбъект();
			Если EmailОбъект = Неопределено Тогда
			
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "The object (Email) in base doesn't exist:" + Символы.ПС
					+ "GUIDRIET: " + СтруктураEmail.GUIDRIET + Символы.ПС;
				ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + "The object (Email) in base doesn't exist:" + Символы.ПС
					+ "GUIDRIET: " + СтруктураEmail.GUIDRIET + Символы.ПС;
				Продолжить;
			
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьEmail(EmailОбъект, СтруктураEmail);
		
		Если EmailОбъект.Модифицированность() Тогда
			
			EmailОбъект.ДополнительныеСвойства.Вставить("Leg7ReportLoading");
			EmailОбъект.ОбменДанными.Отправитель = УзелОбмена;
			Попытка
				
				EmailОбъект.Записать(?(EmailОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
			Исключение
				
				ЕстьОписаниеОшибок = EmailОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок");
				ЕстьОписаниеОшибокRIET = EmailОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибокRIET");
				Если ЕстьОписаниеОшибок ИЛИ ЕстьОписаниеОшибокRIET Тогда
					
					Если ЕстьОписаниеОшибок Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + EmailОбъект 
							+ ": " + EmailОбъект.ДополнительныеСвойства.ОписаниеОшибок;
					КонецЕсли;
					Если ЕстьОписаниеОшибокRIET Тогда
						ОписаниеОшибокRIET = ОписаниеОшибокRIET + Символы.ПС + EmailОбъект 
							+ ": " + EmailОбъект.ДополнительныеСвойства.ОписаниеОшибокRIET;
					КонецЕсли; 
					
					Продолжить;
					
				Иначе
					ВызватьИсключение ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
			EmailСсылка = EmailОбъект.Ссылка;
			Если УзелОбмена <> Неопределено Тогда
			
				СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипИсточника, ТипПриемника");
				
				СтруктураЗаписи.УзелИнформационнойБазы = УзелОбмена;
				СтруктураЗаписи.УникальныйИдентификаторИсточника = EmailСсылка;
				Если СтруктураEmail.Свойство("УникальныйИдентификаторПриемника") Тогда
					СтруктураЗаписи.УникальныйИдентификаторПриемника = СтруктураEmail.УникальныйИдентификаторПриемника;
				КонецЕсли;
				СтруктураЗаписи.ТипИсточника = "ДокументСсылка.EMails";
				
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 23.12.2015 17:20:27 - emails

#КонецОбласти

// { RGS VShamin 23.12.2015 18:11:15 - emails
Процедура ЗаполнитьEmail(EmailОбъект, СтруктураEmail)
	
	Если EmailОбъект.ЭтоНовый() Тогда
		EmailОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(EmailОбъект.Object,  СтруктураEmail.DOCСсылка);
	РГСофтКлиентСервер.УстановитьЗначение(EmailОбъект.Subject, СтруктураEmail.Subject);
	РГСофтКлиентСервер.УстановитьЗначение(EmailОбъект.Body,    СтруктураEmail.Body);
	РГСофтКлиентСервер.УстановитьЗначение(EmailОбъект.ReplyTo, СтруктураEmail.ReplyTo);
	
	СтруктураПоиска = Новый Структура("Recipient,Обработано");
	СтруктураПоиска.Обработано = Ложь;
	ТЗRecipients = EmailОбъект.Recipients.Выгрузить();
	ТЗRecipients.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТЧМодифицирована = Ложь;
	Для каждого СтрокаRecipients Из СтруктураEmail.Recipient Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаRecipients);
		НайденныеСтроки = ТЗRecipients.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧ = НайденныеСтроки[0];
			Если СтрокаRecipients.Recipient <> СтрокаТЧ.Recipient Тогда
				СтрокаТЧ.Recipient = СтрокаRecipients.Recipient;
				ТЧМодифицирована = Истина;
			КонецЕсли;
		Иначе
			СтрокаТЧ = ТЗRecipients.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаRecipients);
			ТЧМодифицирована = Истина;
		КонецЕсли;
		
		СтрокаТЧ.Обработано = Истина;
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для каждого СтрокаRecipients Из ТЗRecipients Цикл
		Если НЕ СтрокаRecipients.Обработано Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаRecipients);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ТЧМодифицирована = Истина;
		Для каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ТЗRecipients.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Если ТЧМодифицирована Тогда
		EmailОбъект.Recipients.Загрузить(ТЗRecipients);
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 23.12.2015 18:11:18 - emails

Функция ПолучитьCOORequired(Shipment)
	
	Если Shipment.УпаковочныеЛисты.Количество() > 0 Тогда
		
		МассивDOCs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Shipment.УпаковочныеЛисты, "УпаковочныйЛист");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	DOCsInvoices.Ссылка КАК DOC,
		|	Items.Ссылка КАК Item,
		|	Items.COORequired
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&МассивDOCs)";
		Запрос.УстановитьПараметр("МассивDOCs", МассивDOCs);
		ТаблицаItems = Запрос.Выполнить().Выгрузить(); 
		
		
		Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
			
			Если СтрокаТаблицы.COORequired = Перечисления.YesNo.Yes Тогда
				Возврат Истина
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь
		
КонецФункции

Функция ПолучитьСпециалиста(Трип)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	|	Trip.Specialist
	|ИЗ
	|	Документ.Trip КАК Trip
	|ГДЕ
	|	Trip.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Трип.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		Результат.Следующий();
		Возврат Результат.Specialist;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции