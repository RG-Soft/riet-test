&НаКлиенте
Перем СоответствиеСинонимовИимен;

//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайл();
	ЗаполнитьСписокЛистовЭкселяИНомераКолонок();
	ЗаполнитьПараметрыСтруктурыФайлаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыСтруктурыФайлаПоУмолчанию()
	
	FirstRowOfData = 2;
	LastRowOfData = 0;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	ЗаполнитьСписокЛистовЭкселяИНомераКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Files xls (*.xls)|*.xls|Files xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЛистовЭкселяИНомераКолонок()
	
	Sheet = "";
	СписокЛистов = Новый Массив;
	Если ЗначениеЗаполнено(FullPath) Тогда
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FullPath + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
		Попытка 
			Connection.Open(СтрокаПодключения);	
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + FullPath + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
				Connection.Open(СтрокаПодключения);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		rs = Connection.OpenSchema(20);
		Пока rs.EOF() = 0 Цикл
			Если rs.Fields("TABLE_NAME").Value <> "_xlnm#_FilterDatabase" Тогда
				СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
			КонецЕсли;
			rs.MoveNext();
		КонецЦикла;
		rs.Close();
		Если СписокЛистов.Количество()>0 Тогда
			Sheet = СписокЛистов[0];
			sqlString = "select top 1 * from [" + Sheet + "]";
			rs.Open(sqlString);
			ЗаполнитьНомераКолонок(rs);
			rs.Close();
		Конецесли;
		Connection.Close();
	КонецЕсли;
	Элементы.Sheet.СписокВыбора.ЗагрузитьЗначения(СписокЛистов);
	Если СписокЛистов.Количество() = 1 Или СписокЛистов.Количество() = 0 Тогда
		Элементы.Sheet.КнопкаСпискаВыбора = Ложь;
	Иначе
		Элементы.Sheet.КнопкаСпискаВыбора = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SheetПриИзменении(Элемент)
	
	СписокЛистов = Новый Массив;
	Если ЗначениеЗаполнено(FullPath) Тогда
		Connection = Новый COMОбъект("ADODB.Connection");
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FullPath + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
		Попытка 
			Connection.Open(СтрокаПодключения);	
		Исключение
			Попытка
				СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + FullPath + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
				Connection.Open(СтрокаПодключения);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
		rs = Новый COMObject("ADODB.RecordSet");
		rs.ActiveConnection = Connection;
		sqlString = "select top 1 * from [" + Sheet + "]";
		rs.Open(sqlString);
		ЗаполнитьНомераКолонок(rs);
		rs.Close();
		Connection.Close();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераКолонок(rs)
	
	Если rs.EOF <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ColumnCode = 0;
	ColumnName = 0;
	
	Для ТекИндекс = 0 По rs.Fields.Count - 1 Цикл
		ИмяКолонки = СокрЛП(rs.Fields(ТекИндекс).Value);
		ИмяРеквизита = СоответствиеСинонимовИимен[ИмяКолонки];
		Если ИмяРеквизита <> Неопределено Тогда
			ЭтотОбъект["Column" + ИмяРеквизита] = ТекИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ParentCompany) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Need to select Parent company!",
			, "Объект", "ParentCompany");
			Возврат;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
		Если НЕ ЗначениеЗаполнено(FullPath) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Need to select file!",
				, "Объект", "FullPath");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(FullPath) Тогда
		Возврат;
	КонецЕсли;
	
	Если ColumnName = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Need to specify the column number!",
			, "Объект", "ColumnName");
			Возврат;
	КонецЕсли;
	
	Если ColumnCountryCode = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Need to specify the column Country!",
			, "Объект", "ColumnCountryCode");
			Возврат;
	КонецЕсли;
		
	Отказ = Ложь;
	
	ЗаполнитьТаблицуДанныхИзФайлаXLS(Отказ, FullPath);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Состояние("Updating data...");
	ЗаполнитьLegalEntities(Отказ);
	
	Если Отказ Тогда
		Предупреждение("No data was loaded due to errors.
			|See them on the right pane.", 60);
	Иначе
		Предупреждение("Legal entities were successfully loaded.", 60);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуДанныхИзФайлаXLS(Отказ, ПолноеИмяXLSФайла)
	
	// Открываем файл
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + FullPath + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		// если подключение не удалось, то пытаемся подключиться к файлу через Microsoft.Jet.OLEDB.4.0
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + FullPath + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	//rs.MoveFirst(); // Станем на 1 закладку
	sqlString = "select * from [" + Sheet + "]";
	rs.Close();
	rs.Open(sqlString);
	
	rs.MoveFirst();
	
	// пропуск заголока
	rs.Move(FirstRowOfData - 1);
	
	АвтоОпределениеКонца = LastRowOfData = 0;
	НомерТекущейСтроки = FirstRowOfData;
	
	ТаблицаДанных.Очистить();
	
	//запоняем таб.документ пока не кончаться строки
	Пока ?(АвтоОпределениеКонца, rs.EOF = 0 И ЗначениеЗаполнено(rs.Fields(0).Value), НомерТекущейСтроки <= LastRowOfData) Цикл
		
		СтрокаТЗ = ТаблицаДанных.Добавить();
		
		СтрокаТЗ.Name = СокрЛП(rs.Fields(ColumnName - 1).Value);
		
		Если ColumnNameRus > 0 Тогда
			СтрокаТЗ.NameRus = СокрЛП(rs.Fields(ColumnNameRus - 1).Value);
		КонецЕсли;
		
		СтрокаТЗ.CountryCode = СокрЛП(rs.Fields(ColumnCountryCode - 1).Value);
		
		Если ColumnSoldToAddress > 0 Тогда
			СтрокаТЗ.SoldToAddress = СокрЛП(rs.Fields(ColumnSoldToAddress - 1).Value);
		КонецЕсли;
		
		Если ColumnSoldToAddressRus > 0 Тогда
			СтрокаТЗ.SoldToAddressRus = СокрЛП(rs.Fields(ColumnSoldToAddressRus - 1).Value);
		КонецЕсли;
		
		rs.MoveNext();
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьLegalEntities(Отказ) 
	
	СтруктураТекстовыхЗначений = СформироватьСтруктуруТекстовыхЗначений();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	СтруктураТаблиц = ПолучитьСтруктуруТаблиц(СтруктураТекстовыхЗначений);
	
	Для Каждого ТекСтрока из ТаблицаДанных Цикл 
		
		НайденнаяСтрока = СтруктураТаблиц.ТаблицаLegalEntities.Найти(ТекСтрока.Name, "Name");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтруктураТаблиц.ТаблицаLegalEntities.Найти(ВРег(ТекСтрока.Name), "Name");
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			ТекОбъект = Справочники.LegalEntities.СоздатьЭлемент();
			ТекОбъект.Наименование = ТекСтрока.Name;
		иначе		
			ТекОбъект = НайденнаяСтрока.LegalEntity.ПолучитьОбъект();
			ТекОбъект.ПометкаУдаления = Ложь;   
		КонецЕсли;
		
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.ParentCompany, Объект.ParentCompany);
		
		Если ColumnNameRus > 0 Тогда
			РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.NameRus, ТекСтрока.NameRus);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекСтрока.CountryCode) Тогда
			RCACountry = Справочники.CountriesOfProcessLevels.НайтиПоКоду(СокрЛП(ТекСтрока.CountryCode));
			Если RCACountry = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to find RCA country by Code '" + ТекСтрока.RCACountry + "'");
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
		Иначе
			RCACountry = Справочники.CountriesOfProcessLevels.ПустаяСсылка();
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.Country, RCACountry);
	     		
		Если ColumnSoldToAddress > 0 Тогда
			РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.SoldToAddress, ТекСтрока.SoldToAddress);
		КонецЕсли;
		Если ColumnSoldToAddressRus > 0 Тогда
			РГСофтКлиентСервер.УстановитьЗначение(ТекОбъект.SoldToAddressRus, ТекСтрока.SoldToAddressRus);
		КонецЕсли;
		  		
		Если ТекОбъект.Модифицированность() Тогда
			Попытка
				ТекОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save '" + СокрЛП(ТекОбъект.Код) + "'. See errors above.");
				Отказ = Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруТекстовыхЗначений()
	
	СтруктураТекстовыхЗначений = Новый Структура("МассивLegalEntitiesName");
	
	СтруктураТекстовыхЗначений.МассивLegalEntitiesName = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаДанных, "Name");
	Возврат СтруктураТекстовыхЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруТаблиц(СтруктураТекстовыхЗначений)
	
	// Сформируем пакет запросов
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("МассивLegalEntitiesName", СтруктураТекстовыхЗначений.МассивLegalEntitiesName);
	СтруктураТекстов.Вставить("LegalEntities",
	    "ВЫБРАТЬ
	    |	LegalEntities.Ссылка КАК LegalEntity,
	    |	ВЫРАЗИТЬ(LegalEntities.Наименование КАК СТРОКА(100)) КАК Name
	    |ИЗ
	    |	Справочник.LegalEntities КАК LegalEntities
	    |ГДЕ
	    |	LegalEntities.Наименование В(&МассивLegalEntitiesName)");
		   	
	// Выполним пакет запросов
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	// Разберем результаты
	СтруктураОбъектовБазы = Новый Структура("ТаблицаLegalEntities");
	
	// LegalEntities
	СтруктураОбъектовБазы.Вставить("ТаблицаLegalEntities", СтруктураРезультатов.LegalEntities.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаLegalEntities, "Name");
	СтруктураОбъектовБазы.ТаблицаLegalEntities.Индексы.Добавить("Name");
			
	Возврат СтруктураОбъектовБазы;
	
КонецФункции

СоответствиеСинонимовИимен = Новый Соответствие;
СоответствиеСинонимовИимен.Вставить("Name", "Name");
СоответствиеСинонимовИимен.Вставить("SoldToAddress", "Sold to address");
СоответствиеСинонимовИимен.Вставить("SoldToAddressRus", "Sold to address (rus)");
СоответствиеСинонимовИимен.Вставить("CountryCode", "Country");
СоответствиеСинонимовИимен.Вставить("NameRus", "Name (rus)");


