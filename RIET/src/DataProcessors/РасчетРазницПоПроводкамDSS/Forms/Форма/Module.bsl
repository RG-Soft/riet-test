
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьФормуПоДаннымБазы();
	Объект.КоличествоЗаписейВПрогоне = 50;
	Объект.КоличествоПрогонов = 1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДаннымБазы()
	Объект.ДокументыСОшибками.Очистить();
	Объект.ПереченьТиповДокументов.Очистить();
	
	// Читаем данные регистра и заполняем реквизиты обработки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.InventoryПоступление
	|			ТОГДА ""Inventory Поступление""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.InventoryСписание
	|			ТОГДА ""Inventory Списание""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.InventoryКорректировка
	|			ТОГДА ""Inventory Корректировка""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.InventoryПеремещение
	|			ТОГДА ""Inventory Перемещение""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ""Реализация товаров и услуг""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.ПередачаОС
	|			ТОГДА ""Передача ОС""
	|		КОГДА ПересчетРазницПоДокументам.Документ ССЫЛКА Документ.СчетКнигиПокупок
	|			ТОГДА ""Счет книги покупок""
	|		ИНАЧЕ ""Прочие документы""
	|	КОНЕЦ КАК Тип,
	|	ПересчетРазницПоДокументам.Документ,
	|	ПересчетРазницПоДокументам.НаличиеОшибки,
	|	ПересчетРазницПоДокументам.КоличествоПопыток,
	|	ПересчетРазницПоДокументам.ТекстОшибки
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	РегистрСведений.ПересчетРазницПоДокументам КАК ПересчетРазницПоДокументам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.КоличествоКПересчету,
	|	ЕСТЬNULL(ВложенныйЗапрос1.КоличествоСОшибками, 0) КАК КоличествоОшибок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.Тип КАК Тип,
	|		КОЛИЧЕСТВО(ИсходнаяТаблица.Документ) КАК КоличествоКПересчету
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Тип) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Тип КАК Тип,
	|			КОЛИЧЕСТВО(ВложенныйЗапрос.Документ) КАК КоличествоСОшибками
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ИсходнаяТаблица.Тип КАК Тип,
	|				ИсходнаяТаблица.Документ КАК Документ
	|			ИЗ
	|				ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ГДЕ
	|				ИсходнаяТаблица.НаличиеОшибки) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Тип) КАК ВложенныйЗапрос1
	|		ПО ВложенныйЗапрос.Тип = ВложенныйЗапрос1.Тип
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ,
	|	ИсходнаяТаблица.КоличествоПопыток,
	|	ИсходнаяТаблица.ТекстОшибки
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.НаличиеОшибки";
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ПереченьТиповДокументов.Добавить();
		НоваяСтрока.ТипДокумента = Выборка.Тип;
		НоваяСтрока.КоличествоДокументовКПересчету = Выборка.КоличествоКПересчету;
		НоваяСтрока.КоличествоДокументовСОшибками = Выборка.КоличествоОшибок;
		НоваяСтрока.Пересчитать = Истина;
	КонецЦикла;
	
	Выборка1 = Результат[2].Выбрать();
	
	Пока Выборка1.Следующий() Цикл
		НоваяСтрока = Объект.ДокументыСОшибками.Добавить();
		НоваяСтрока.Документ = Выборка1.Документ;
		НоваяСтрока.КоличествоОшибок = Выборка1.КоличествоПопыток;
		НоваяСтрока.ТекстОшибки = Выборка1.ТекстОшибки;
	КонецЦикла;
	
	Объект.ПереченьТиповДокументов.Сортировать("КоличествоДокументовКПересчету Убыв");
	Объект.ДокументыСОшибками.Сортировать("КоличествоОшибок Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ПереченьТиповДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереченьТиповДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСОшибкамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСОшибкамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРазницы(Команда)
	ЗаполнитьСписокДокументовКПересчету();
	
	КолВоДокументов = ПолучитьКолВоОтмеченныхДокументов();
	
	Если НЕ КолВоДокументов = 0 Тогда
		КоличествоПрогоновДоЗавершения = КолВоДокументов/50;
		ПроцентЗаПрогон = 100/КоличествоПрогоновДоЗавершения;
	КонецЕсли; 
	
	
	ВыполнятьПересчет = Истина;
	Прогресс = 0;
	Пока ВыполнятьПересчет Цикл
		КоличествоДокументовНаПредыдущемШаге = Объект.ПереченьТиповДокументов.Итог("КоличествоДокументовКПересчету");
		ПересчетРазницСервер();
		ЗаполнитьФормуПоДаннымБазы();
		Прогресс = Прогресс + ПроцентЗаПрогон;
		Состояние("Выполняется расчет разниц. Прогресс: " + Окр(Прогресс) + "% Для прерывания нажмите Ctrl+Break.");
		ЭтаФорма.ОбновитьОтображениеДанных();
		КоличествоДокументовНаТекущемШаге = Объект.ПереченьТиповДокументов.Итог("КоличествоДокументовКПересчету");
		Если КоличествоДокументовНаПредыдущемШаге = КоличествоДокументовНаТекущемШаге Тогда
			ВыполнятьПересчет = Ложь;
		КонецЕсли; 
		ОбработкаПрерыванияПользователя();
	КонецЦикла;  
КонецПроцедуры

&НаСервере
Функция ПолучитьКолВоОтмеченныхДокументов()
    СтруктураПоискаОтмеченных = Новый Структура;
	СтруктураПоискаОтмеченных.Вставить("Пересчитать", Истина);
	МассивОтмеченныхСтрок = Объект.ПереченьТиповДокументов.НайтиСтроки(СтруктураПоискаОтмеченных);
	ТаблицаОтмеченных = Объект.ПереченьТиповДокументов.Выгрузить(МассивОтмеченныхСтрок);
	КолВоДокументов = ТаблицаОтмеченных.Итог("КоличествоДокументовКПересчету");
	Возврат КолВоДокументов;
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьСписокДокументовКПересчету()
	Объект.СписокПересчитываемыхДокументов.Очистить();
    Для каждого СтрокаДокумента Из Объект.ПереченьТиповДокументов Цикл
		Если СтрокаДокумента.Пересчитать Тогда
			Объект.СписокПересчитываемыхДокументов.Добавить(СтрокаДокумента.ТипДокумента);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПересчетРазницСервер()
    Для каждого СтрокаДокумента Из Объект.ПереченьТиповДокументов Цикл
		Если НЕ Объект.СписокПересчитываемыхДокументов.НайтиПоЗначению(СтрокаДокумента.ТипДокумента) = Неопределено  Тогда
			Если СтрокаДокумента.ТипДокумента = "Прочие документы" Тогда
				Сообщить("Рассчитать разницы по виду ""Прочие документы"" невозможно!");
			Иначе
				ОбработкаDSSСервер.ПересчитатьРазницыПоВидуДокумента(ИмяТаблицыПоТипуИзСписка(СтрокаДокумента.ТипДокумента), 50);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТаблицыПоТипуИзСписка(ТипИзСписка)
	ВозвращаемоеЗначение = "";
	Если ТипИзСписка = "Inventory Поступление" Тогда
		ВозвращаемоеЗначение = "Документ.InventoryПоступление";
	ИначеЕсли ТипИзСписка = "Inventory Списание" Тогда
		ВозвращаемоеЗначение = "Документ.InventoryСписание";
	ИначеЕсли ТипИзСписка = "Inventory Корректировка" Тогда
		ВозвращаемоеЗначение = "Документ.InventoryКорректировка";
	ИначеЕсли ТипИзСписка = "Inventory Перемещение" Тогда
		ВозвращаемоеЗначение = "Документ.InventoryПеремещение";
	ИначеЕсли ТипИзСписка = "Реализация товаров и услуг" Тогда
		ВозвращаемоеЗначение = "Документ.РеализацияТоваровУслуг";
	ИначеЕсли ТипИзСписка = "Передача ОС" Тогда
		ВозвращаемоеЗначение = "Документ.ПередачаОС";
	ИначеЕсли ТипИзСписка = "Счет книги покупок" Тогда
		ВозвращаемоеЗначение = "Документ.СчетКнигиПокупок";
	КонецЕсли; 
	Возврат ВозвращаемоеЗначение;
КонецФункции // ()

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьФормуПоДаннымБазы();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРасчетВФоновомРежиме(Команда)
	Порциями = Объект.ИспользоватьПорциальныйРасчет;
	СообщениеВопроса = "Вы действительно хотите запустить расчет разниц в фоновом режиме";
	Если Порциями Тогда
		СообщениеВопроса = СообщениеВопроса + " порциями " + Объект.КоличествоПрогонов + " раз по " + Объект.КоличествоЗаписейВПрогоне + " записей?";
	Иначе
	    СообщениеВопроса = СообщениеВопроса + "?";
	КонецЕсли; 
	Если Вопрос(СообщениеВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ЗапуститьФоновоеЗадание();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗадание()
	Если Объект.ИспользоватьПорциальныйРасчет Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Объект.КоличествоЗаписейВПрогоне);
		МассивПараметров.Добавить(Объект.КоличествоПрогонов);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбработкаDSSСервер.ПересчитатьРазницыПоДокументам", МассивПараметров);
	Иначе
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбработкаDSSСервер.ПересчитатьРазницыПоДокументам");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПорциальныйРасчетПриИзменении(Элемент)
	Элементы.КоличествоЗаписейВПрогоне.Доступность = Объект.ИспользоватьПорциальныйРасчет;
	Элементы.КоличествоПрогонов.Доступность = Объект.ИспользоватьПорциальныйРасчет;
КонецПроцедуры
