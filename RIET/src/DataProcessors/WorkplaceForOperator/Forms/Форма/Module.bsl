&НаКлиенте
Перем ДатаНач;
&НаКлиенте
Перем ДатаКон;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ API КАРТЫ

&НаСервереБезКонтекста
Функция ПоискКординатНаСервере(ТекстПоиска)
	
	Ответ = "";
	
	Попытка
		
		ЗаголовкиHTTP = Новый Соответствие;	
		ЗаголовкиHTTP.Вставить("Accept-Language", "ru-RU");
		ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
			
		ИмяВременногоФайла = ПолучитьимяВременногоФайла("json");
		Соединение = Новый HTTPСоединение("nominatim.openstreetmap.org", 443, , , , , Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows())); 	
		
		Ответ = Соединение.Получить(Новый HTTPЗапрос("search?q=" + EncodeURL(ТекстПоиска) + "&format=json", ЗаголовкиHTTP), ИмяВременногоФайла);
		
		ЧТ = Новый ЧтениеТекста(ИмяВременногоФайла);
		Текст = ЧТ.Прочитать();
		ЧТ.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		
		Ответ = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
		
		УдалитьФайлы(ИмяВременногоФайла);
		Соединение = Неопределено;	
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось геокодировать запрос """ + ТекстПоиска + """, по причине: " + ОписаниеОшибки();
		Сообщение.Сообщить(); 
		
	КонецПопытки;
	
	Возврат Ответ;	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция hex(Знач Значение) 
    Значение=Число(Значение);
    Если Значение<=0 Тогда 
        Результат="0";
    Иначе
        Значение=Цел(Значение);
        Результат="";
        Пока Значение>0 Цикл
            Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16 + 1,1)+Результат;
            Значение=Цел(Значение/16) ;
        КонецЦикла;
    КонецЕсли;
    Если СтрДлина(Результат) < 2 Тогда
    
        Результат = "0" + Результат;
    
    КонецЕсли; 
    Возврат "%" + Результат;
КонецФункции

&НаСервереБезКонтекста
Функция EncodeURL(URL)
    
   // отсюда: http://www.w3.org/International/URLUTF8Encoder.java 
    
    Рез = "";
    
    Для Сч = 1 По СтрДлина(URL) Цикл
        
        ch = Сред(URL,Сч,1);
        vch = КодСимвола(ch);
        
        Если ("A" <= ch ) И ( ch <= "Z") Тогда       // "A".."Z"
 
            Рез = Рез + ch;
        ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда   // "a".."z"
 
            Рез = Рез + ch;
        ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда   // "0".."9"
 
            Рез = Рез + ch;
        ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда           // space
 
            Рез = Рез + "+";
        ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_") Тогда       // unreserved
 
           // ch == '.' || ch == '!'
 
           // ch == '~' || ch == '*'
 
           // ch == '\'' || ch == '('
 
           // ch == ')') Тогда
 
            Рез = Рез + ch;
        ИначеЕсли (vch <= 127) Тогда       // other ASCII
 
            Рез = Рез + hex(vch);
        ИначеЕсли (vch <= 2047) Тогда       // non-ASCII <= 0x7FF
 
            Рез = Рез + hex(192 + Цел(vch / 64));
            Рез = Рез + hex(128 + (vch % 64));
        Иначе                   // 0x7FF < ch <= 0xFFFF
 
            Рез = Рез + hex(224 + Цел(vch / 4096));
            Рез = Рез + hex(128 + (Цел(vch / 64) % 64));
            Рез = Рез + hex(128 + (vch % 64));
        КонецЕсли;
         
    КонецЦикла; 
    
    Возврат Рез;

КонецФункции// ()

&НаСервереБезКонтекста
Функция СохранитьКоординатыСервер(Location, Latitude, Longitude)
	
	ЕстьОшибки = Ложь;
	
	Если Не ЗначениеЗаполнено(Latitude) Или Не ЗначениеЗаполнено(Longitude) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Координаты для установки точки не были получены!";
		Сообщение.Сообщить(); 	
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
	
		СпрОбъект = Location.ПолучитьОбъект();
		
		СпрОбъект.Latitude	= Число(Latitude);
		СпрОбъект.Longitude	= Число(Longitude);
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось сохранить координаты для " + Location + " с кодом " + Location.Код + "
			|по причине: " + ОписаниеОшибки();
			Сообщение.Сообщить();
			
			ЕстьОшибки = Истина;
			
		КонецПопытки;	
		
	КонецЕсли;	
		
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	
	Попытка
		мКартаЗагружена = Истина;
		Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	Исключение
		мКартаЗагружена = Ложь;
	    Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура УбратьВсеМаркерыСКарты()
	
	Если мКартаЗагружена Тогда
		
		ТекстСкрипта = "DeleteAllMarkers();";
		
		ВыполнитьСкрипт(ТекстСкрипта);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиTrip()
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи = "{
	|""type"": ""FeatureCollection"",
	|""features"": [";
							
	Для Каждого Строка Из Объект.TableTrip Цикл
								
		Строка.Flag = Истина;
		
		Если Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.Trip) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиMobileDevice()
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи = "{
	|""type"": ""FeatureCollection"",
	|""features"": [";
							
	Для Каждого Строка Из Объект.TableMobileDevice Цикл
								
		Строка.Flag = Истина;
		
		Если Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.MobileDevice) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиLocation()
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи = "{
	|""type"": ""FeatureCollection"",
	|""features"": [";
							
	Для Каждого Строка Из Объект.TableLocation Цикл
								
		Строка.Flag = Истина;
		
		Если Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.Location) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиTrip()
	
	Для Каждого Строка Из Объект.TableTrip Цикл
		Строка.Flag = Ложь;
	КонецЦикла;
	
	УбратьВсеМаркерыСКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиMobileDevice()
	
	Для Каждого Строка Из Объект.TableMobileDevice Цикл
		Строка.Flag = Ложь;
	КонецЦикла;
	
	УбратьВсеМаркерыСКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиLocation()
	
	Для Каждого Строка Из Объект.TableLocation Цикл
		Строка.Flag = Ложь;
	КонецЦикла;
	
	УбратьВсеМаркерыСКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВЦентрTrip(ТекСтрока = Неопределено)
	
	Если мКартаЗагружена Тогда
		
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = Элементы.TableTrip.ТекущиеДанные;
		КонецЕсли;
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Latitude <> 0 И ТекСтрока.Longitude <> 0 Тогда
		
			ТекстСкрипта = "SetCenter(" + Формат(ТекСтрока.Longitude, "ЧРД=.; ЧГ=0") + "," + Формат(ТекСтрока.Latitude, "ЧРД=.; ЧГ=0") + ");";
			
			ВыполнитьСкрипт(ТекстСкрипта);
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВЦентрMobileDevice(ТекСтрока = Неопределено)
	
	Если мКартаЗагружена Тогда
		
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = Элементы.TableMobileDevice.ТекущиеДанные;
		КонецЕсли;
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Latitude <> 0 И ТекСтрока.Longitude <> 0 Тогда
		
			ТекстСкрипта = "SetCenter(" + Формат(ТекСтрока.Longitude, "ЧРД=.; ЧГ=0") + "," + Формат(ТекСтрока.Latitude, "ЧРД=.; ЧГ=0") + ");";
			
			ВыполнитьСкрипт(ТекстСкрипта);
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВЦентрLocation(ТекСтрока = Неопределено)
	
	Если мКартаЗагружена Тогда
		
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = Элементы.TableLocation.ТекущиеДанные;
		КонецЕсли;
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Latitude <> 0 И ТекСтрока.Longitude <> 0 Тогда
		
			ТекстСкрипта = "SetCenter(" + Формат(ТекСтрока.Longitude, "ЧРД=.; ЧГ=0") + "," + Формат(ТекСтрока.Latitude, "ЧРД=.; ЧГ=0") + ");";
			
			ВыполнитьСкрипт(ТекстСкрипта);
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(ТекстСкрипта)
	
	Попытка
		
		Элементы.ApiКарта.Документ.parentWindow.execScript(ТекстСкрипта, "JavaScript");		
		
	Исключение
		
		Попытка
			
			Элементы.ApiКарта.Документ.parentWindow.eval(ТекстСкрипта, "JavaScript");		
			
		Исключение
			
			Попытка
				
				ДИВ = Элементы.ApiКарта.Документ.getElementById("TEST");
				ДИВ.setAttribute("onclick", ТекстСкрипта);
				ДИВ.click();
				
			Исключение
				
				Сообщить(ОписаниеОшибки());
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось выполнить скрипт";
				Сообщение.Сообщить(); 
				
			КонецПопытки;
			
		КонецПопытки; 
		
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТекущихТочекОСМ(ТекстДляПередачи, Сч)
	
	Если Объект.Mode = "Trip" Тогда
		
		ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [";
		
		Для Каждого Строка Из Объект.TableTrip Цикл
			
			Если Строка.Longitude = 0 Или Строка.Latitude = 0 Или Не Строка.Flag Тогда
				Продолжить;		
			КонецЕсли;
			
			ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
			|""type"": ""FeatureCollection"",
			|""features"": [", "", ", ") + "
			|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
			Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
			Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
			ПодготовитьПредставление(Строка.Trip) + """, ""color"": """ + Строка.Color + """}}";
			
			Сч = Сч + 1;	
		КонецЦикла;
		
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда	
		
		ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [";
		
		Для Каждого Строка Из Объект.TableMobileDevice Цикл
			
			Если Строка.Longitude = 0 Или Строка.Latitude = 0 Или Не Строка.Flag Тогда
				Продолжить;		
			КонецЕсли;
			
			ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
			|""type"": ""FeatureCollection"",
			|""features"": [", "", ", ") + "
			|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
			Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
			Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
			ПодготовитьПредставление(Строка.MobileDevice) + """, ""color"": """ + Строка.Color + """}}";
			
			Сч = Сч + 1;	
		КонецЦикла;
			
	ИначеЕсли Объект.Mode = "Location" Тогда	
		
		ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [";
		
		Для Каждого Строка Из Объект.TableLocation Цикл
			
			Если Строка.Longitude = 0 Или Строка.Latitude = 0 Или Не Строка.Flag Тогда
				Продолжить;		
			КонецЕсли;
			
			ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
			|""type"": ""FeatureCollection"",
			|""features"": [", "", ", ") + "
			|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
			Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
			Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
			ПодготовитьПредставление(Строка.Location) + """, ""color"": """ + Строка.Color + """}}";
			
			Сч = Сч + 1;	
		КонецЦикла;
		
	КонецЕсли;  	
	
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьРежим()
	
	Если Объект.Mode = "Location" Тогда
		ИмяМакета = "ApiOpenStreetMapLocations";
		Элементы.ФормаКомандаСохранитьКоординаты.Видимость = Истина;
	Иначе
		ИмяМакета = "ApiOpenStreetMap";
		Элементы.ФормаКомандаСохранитьКоординаты.Видимость = Ложь;
	КонецЕсли;
	
	ApiКарта = ПолучитьМакетНаСервере(ИмяМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
		
	Элементы.ДатаСрезаTrip.ТолькоПросмотр = Online;
	Элементы.ДатаСрезаMobileDevice.ТолькоПросмотр = Online;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиМаршрутыНаКарту()
	
	Если НЕ мКартаЗагружена Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Mode = "Trip" Тогда
		Таблица = Объект.TableTrip;
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда
		Таблица = Объект.TableMobileDevice;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Route", Истина));
	Если МассивСтрок.Количество() Тогда
		Trip = МассивСтрок[0].Trip;
		MobileDevice = МассивСтрок[0].MobileDevice;
	КонецЕсли;
			
	ВыполнитьСкрипт("DeleteAllMarkersArrow()");
	
	Если Trip <> Неопределено ИЛИ MobileDevice <> Неопределено Тогда
		
		ТекстСкрипта = ПолучитьТекстСкриптаДляМаршрутов(Trip, MobileDevice, ДатаНачалаМаршрут, ДатаСреза, Истина);
		
		Если ЗначениеЗаполнено(ТекстСкрипта) Тогда
			ВыполнитьСкрипт(ТекстСкрипта);
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстСкриптаДляМаршрутов(Trip, MobileDevice, ДатаНач, ДатаКон, ОСМ = Ложь)
	
	Если Не ЗначениеЗаполнено(ДатаНач) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить дату начала периода!");
		Возврат "";
	КонецЕсли;
	
	ТекстСкрипта = "";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	RouteOfTrip.Trip КАК Trip,
	|	RouteOfTrip.Trip КАК MobileDevice,
	|	RouteOfTrip.Latitude КАК Широта,
	|	RouteOfTrip.Longitude КАК Долгота,
	|	RouteOfTrip.Период КАК Период
	|ИЗ
	|	РегистрСведений.RouteOfTrip КАК RouteOfTrip
	|ГДЕ
	|	RouteOfTrip.Trip = &Trip
	|	И RouteOfTrip.MobileDevice = &MobileDevice
	|	И RouteOfTrip.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И RouteOfTrip.Latitude <> 0
	|	И RouteOfTrip.Longitude <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	MobileDevice,
	|	Trip,
	|	Период";
	
	Запрос.УстановитьПараметр("Trip",			Trip);
	Запрос.УстановитьПараметр("MobileDevice",	MobileDevice);
	Запрос.УстановитьПараметр("ДатаНач",		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",		ДатаКон);
	
	ТекTrip				= Неопределено;
	ТекMobileDevice		= Неопределено;
	ТекШирота			= Неопределено;
	ТекДолгота			= Неопределено;
	ПервыеКоординаты	= "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекTrip <> Выборка.Trip 
			ИЛИ ТекMobileDevice <> Выборка.MobileDevice
			ИЛИ ТекШирота <> Выборка.Широта
			ИЛИ ТекДолгота <> Выборка.Долгота Тогда
			
			Широта	= Формат(Выборка.Широта, "ЧРД=.; ЧГ=0");
			Долгота	= Формат(Выборка.Долгота, "ЧРД=.; ЧГ=0");
			Период	= Строка(Выборка.Период);
			
			Если ОСМ Тогда
				
				ТекстСкрипта = ТекстСкрипта + ?(ЗначениеЗаполнено(ТекстСкрипта), ",", "") + "[" + Долгота + "," + Широта + "]";
				
			Иначе
				
				Если ЗначениеЗаполнено(ПервыеКоординаты) Тогда
					ТекстСкрипта = ТекстСкрипта + "WriteArrow([" + ПервыеКоординаты + ",[" + Широта + "," + Долгота + "]],""" + Период + """);" + Символы.ПС;
					ПервыеКоординаты = "[" + Широта + "," + Долгота + "]";
				Иначе
					ПервыеКоординаты = "[" + Широта + "," + Долгота + "]";
				КонецЕсли;
				
			КонецЕсли;
			
			ТекTrip			= Выборка.Trip;
			ТекMobileDevice	= Выборка.MobileDevice;
			ТекШирота		= Выборка.Широта;
			ТекДолгота		= Выборка.Долгота;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОСМ И ЗначениеЗаполнено(ТекстСкрипта) Тогда
		
		ТекстСкрипта = " WriteArrow({
		|""type"": ""FeatureCollection"",
		|""features"": [
		|{""type"": ""Feature"", ""id"": 0, ""geometry"": {""type"": ""LineString"", ""coordinates"": [" + ТекстСкрипта + "]}, 
		|""properties"": {}}]
		|}, true);
		|updateDirection();";
		
	КонецЕсли;
	
	Возврат ТекстСкрипта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьСписокВыбораРежимов(СписокВыбораMode)
	
	СписокВыбораMode.Очистить();
	
	СписокВыбораMode.Добавить("Trip",			НСтр("ru = 'Поставки'; en = 'Trip'"));
	СписокВыбораMode.Добавить("MobileDevice",	НСтр("ru = 'Мобильные устройства'; en = 'Mobile device'"));
	СписокВыбораMode.Добавить("Location",		НСтр("ru = 'Склады'; en = 'Location'"));
	СписокВыбораMode.Добавить("Settings",		НСтр("ru = 'Настройки'; en = 'Settings'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораActivity(СписокВыбораActivity)
	
	СписокВыбораActivity.Очистить();
	
	СписокВыбораActivity.Добавить("Активные",	НСтр("ru = 'Активные'; en = 'Active'"));
	СписокВыбораActivity.Добавить("НеАктивные",	НСтр("ru = 'Не активные'; en = 'Not active'"));
	СписокВыбораActivity.Добавить("Все",		НСтр("ru = 'Все'; en = 'All'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные()
	
	Если Online Тогда
		ДатаСреза = ТекущаяДата();
		ДатаКон = ДатаСреза;
	КонецЕсли;
	
	Если Объект.Mode = "Trip" Тогда
		
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.СтраницаTrip;
		
		ОбновитьТаблицыTrip();
		
		ОпределитьТекущуюСтрокуTrip();
		
		ВывестиМаршрутыНаКарту();
		
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда
		
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.СтраницаMobileDevice;
		
		ОбновитьТаблицыMobileDevice();
		
		ОпределитьТекущуюСтрокуMobileDevice();
		
		ВывестиМаршрутыНаКарту();
		
	ИначеЕсли Объект.Mode = "Location" Тогда
		
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.СтраницаLocation;
		
		ОбновитьТаблицыLocation();
		
		ОпределитьТекущуюСтрокуLocation();
		
	ИначеЕсли Объект.Mode = "Settings" Тогда
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.СтраницаSettings;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыTrip()
		
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	TableTrip.Flag,
	|	TableTrip.Route,
	|	TableTrip.MobileDevice,
	|	TableTrip.Trip
	|ПОМЕСТИТЬ TableTrip
	|ИЗ
	|	&TableTrip КАК TableTrip
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripNonLawsonCompanies.Ссылка КАК Trip,
	|	TripNonLawsonCompanies.ServiceProvider КАК ServiceProvider,
	|	TripNonLawsonCompanies.Equipment КАК Equipment,
	|	TripNonLawsonCompanies.Specialist КАК Specialist,
	|	TripNonLawsonCompanies.Operator КАК Operator,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.MobileDevice, ЗНАЧЕНИЕ(Справочник.MobileDevices.ПустаяСсылка)) КАК MobileDevice,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Activity, ЛОЖЬ) КАК Activity,
	|	ЕСТЬNULL(StagesOfTripsNonLawsonCompanies.Stage, ЗНАЧЕНИЕ(Перечисление.TripNonLawsonCompaniesStages.ПустаяСсылка)) КАК Stage
	|ПОМЕСТИТЬ ТаблицаTrip
	|ИЗ
	|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ConnectionOfTrip.СрезПоследних КАК ConnectionOfTripСрезПоследних
	|		ПО TripNonLawsonCompanies.Ссылка = ConnectionOfTripСрезПоследних.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTripsNonLawsonCompanies КАК StagesOfTripsNonLawsonCompanies
	|		ПО TripNonLawsonCompanies.Ссылка = StagesOfTripsNonLawsonCompanies.Trip
	|ГДЕ
	|	НЕ TripNonLawsonCompanies.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.Ссылка КАК Trip,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Source)
	|				ТОГДА TripNonLawsonCompaniesStops.Location
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)
	|		КОНЕЦ) КАК LocationSource,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination)
	|				ТОГДА TripNonLawsonCompaniesStops.Location
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)
	|		КОНЕЦ) КАК LocationDestination
	|ПОМЕСТИТЬ ТаблицаStops
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаTrip КАК ТаблицаTrip
	|		ПО TripNonLawsonCompaniesStops.Ссылка = ТаблицаTrip.Trip
	|
	|СГРУППИРОВАТЬ ПО
	|	TripNonLawsonCompaniesStops.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаTrip.Trip,
	|	ТаблицаTrip.ServiceProvider,
	|	ТаблицаTrip.Equipment,
	|	ТаблицаTrip.Specialist,
	|	ТаблицаTrip.Operator,
	|	ТаблицаTrip.MobileDevice,
	|	ТаблицаTrip.Activity,
	|	ЕСТЬNULL(StatusOfTripСрезПоследних.Status, ЗНАЧЕНИЕ(Перечисление.JobStatus.ПустаяСсылка)) КАК Status,
	|	ЕСТЬNULL(StatusOfTripСрезПоследних.Body, ЗНАЧЕНИЕ(Перечисление.BodyStatus.ПустаяСсылка)) КАК Body,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ModificationDate,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Latitude, 0) КАК Latitude,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Longitude, 0) КАК Longitude,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Address, """") КАК Address,
	|	ЕСТЬNULL(TableTrip.Flag, ЛОЖЬ) КАК Flag,
	|	ЕСТЬNULL(TableTrip.Route, ЛОЖЬ) КАК Route,
	|	ЕСТЬNULL(ТаблицаStops.LocationSource, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК LocationSource,
	|	ЕСТЬNULL(ТаблицаStops.LocationDestination, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК LocationDestination
	|ПОМЕСТИТЬ ТаблицаКоординат
	|ИЗ
	|	ТаблицаTrip КАК ТаблицаTrip
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StatusOfTrip.СрезПоследних КАК StatusOfTripСрезПоследних
	|		ПО ТаблицаTrip.MobileDevice = StatusOfTripСрезПоследних.MobileDevice
	|			И ТаблицаTrip.Trip = StatusOfTripСрезПоследних.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.RouteOfTrip.СрезПоследних КАК RouteOfTripСрезПоследних
	|		ПО ТаблицаTrip.MobileDevice = RouteOfTripСрезПоследних.MobileDevice
	|			И ТаблицаTrip.Trip = RouteOfTripСрезПоследних.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ TableTrip КАК TableTrip
	|		ПО ТаблицаTrip.MobileDevice = TableTrip.MobileDevice
	|			И ТаблицаTrip.Trip = TableTrip.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаStops КАК ТаблицаStops
	|		ПО ТаблицаTrip.Trip = ТаблицаStops.Trip
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоординат.Trip,
	|	ТаблицаКоординат.ServiceProvider,
	|	ТаблицаКоординат.Equipment,
	|	ТаблицаКоординат.Specialist,
	|	ТаблицаКоординат.Operator,
	|	ТаблицаКоординат.MobileDevice,
	|	ТаблицаКоординат.Activity,
	|	ТаблицаКоординат.Status,
	|	ТаблицаКоординат.Body,
	|	ТаблицаКоординат.Address,
	|	ТаблицаКоординат.Latitude,
	|	ТаблицаКоординат.Longitude,
	|	ТаблицаКоординат.Flag,
	|	ТаблицаКоординат.Route,
	|	ТаблицаКоординат.ModificationDate,
	|	ТаблицаКоординат.LocationSource,
	|	ТаблицаКоординат.LocationDestination,
	|	ЕСТЬNULL(SettingsOfPointsColor.Color, ""#FF0000"") КАК Color
	|ИЗ
	|	ТаблицаКоординат КАК ТаблицаКоординат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SettingsOfPointsColor КАК SettingsOfPointsColor
	|		ПО ТаблицаКоординат.Body = SettingsOfPointsColor.Body
	|ГДЕ
	|	&УсловиеДляОтбора";
	
	ТекстДляОтбора = "";
	
	Если ЗначениеЗаполнено(Объект.ServiceProvider) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.ServiceProvider = &ServiceProvider";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Equipment) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Equipment = &Equipment";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Body) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Body = &Body";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Status) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Status = &Status";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Specialist) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Specialist = &Specialist";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Operator) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Operator = &Operator";
	КонецЕсли;
	
	Если Объект.Activity = "Активные" Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Activity";
	ИначеЕсли Объект.Activity = "НеАктивные" Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "НЕ ТаблицаКоординат.Activity";
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекстДляОтбора) Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляОтбора", ТекстДляОтбора);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ServiceProvider",	Объект.ServiceProvider);
	Запрос.УстановитьПараметр("Equipment",			Объект.Equipment);
	Запрос.УстановитьПараметр("Body",				Объект.Body);
	Запрос.УстановитьПараметр("Status",				Объект.Status);
	Запрос.УстановитьПараметр("Specialist",			Объект.Specialist);
	Запрос.УстановитьПараметр("Operator",			Объект.Operator);
	Запрос.УстановитьПараметр("УсловиеДляОтбора",	Истина);		
	Запрос.УстановитьПараметр("TableTrip",			Объект.TableTrip.Выгрузить());		
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Объект.TableTrip.Загрузить(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыMobileDevice()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	TableMobileDevice.Flag,
	|	TableMobileDevice.Route,
	|	TableMobileDevice.MobileDevice,
	|	TableMobileDevice.Trip	
	|ПОМЕСТИТЬ TableMobileDevice
	|ИЗ
	|	&TableMobileDevice КАК TableMobileDevice
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	MobileDevices.Ссылка КАК MobileDevice,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Trip, ЗНАЧЕНИЕ(Документ.TripNonLawsonCompanies.ПустаяСсылка)) КАК Trip,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Activity, ЛОЖЬ) КАК Activity,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Trip.ServiceProvider, ЗНАЧЕНИЕ(Справочник.ServiceProviders.ПустаяСсылка)) КАК ServiceProvider,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Trip.Equipment, ЗНАЧЕНИЕ(Справочник.Equipments.ПустаяСсылка)) КАК Equipment,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Trip.Specialist, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Specialist,
	|	ЕСТЬNULL(ConnectionOfTripСрезПоследних.Trip.Operator, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Operator
	|ПОМЕСТИТЬ ТаблицаMobileDevices
	|ИЗ
	|	Справочник.MobileDevices КАК MobileDevices
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ConnectionOfTrip.СрезПоследних КАК ConnectionOfTripСрезПоследних
	|		ПО MobileDevices.Ссылка = ConnectionOfTripСрезПоследних.MobileDevice
	|ГДЕ
	|	НЕ MobileDevices.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.Ссылка КАК Trip,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Source)
	|				ТОГДА TripNonLawsonCompaniesStops.Location
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)
	|		КОНЕЦ) КАК LocationSource,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination)
	|				ТОГДА TripNonLawsonCompaniesStops.Location
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)
	|		КОНЕЦ) КАК LocationDestination
	|ПОМЕСТИТЬ ТаблицаStops
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаMobileDevices КАК ТаблицаMobileDevices
	|		ПО TripNonLawsonCompaniesStops.Ссылка = ТаблицаMobileDevices.Trip
	|
	|СГРУППИРОВАТЬ ПО
	|	TripNonLawsonCompaniesStops.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаMobileDevices.MobileDevice,
	|	ТаблицаMobileDevices.Trip,
	|	ТаблицаMobileDevices.Activity,
	|	ТаблицаMobileDevices.ServiceProvider,
	|	ТаблицаMobileDevices.Equipment,
	|	ТаблицаMobileDevices.Specialist,
	|	ТаблицаMobileDevices.Operator,
	|	ЕСТЬNULL(StatusOfTripСрезПоследних.Status, ЗНАЧЕНИЕ(Перечисление.JobStatus.ПустаяСсылка)) КАК Status,
	|	ЕСТЬNULL(StatusOfTripСрезПоследних.Body, ЗНАЧЕНИЕ(Перечисление.BodyStatus.ПустаяСсылка)) КАК Body,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Latitude, 0) КАК Latitude,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Longitude, 0) КАК Longitude,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Address, """") КАК Address,
	|	ЕСТЬNULL(RouteOfTripСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ModificationDate,
	|	ЕСТЬNULL(TableMobileDevice.Flag, ЛОЖЬ) КАК Flag,
	|	ЕСТЬNULL(TableMobileDevice.Route, ЛОЖЬ) КАК Route,
	|	ЕСТЬNULL(ТаблицаStops.LocationSource, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК LocationSource,
	|	ЕСТЬNULL(ТаблицаStops.LocationDestination, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК LocationDestination
	|ПОМЕСТИТЬ ТаблицаКоординат
	|ИЗ
	|	ТаблицаMobileDevices КАК ТаблицаMobileDevices
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StatusOfTrip.СрезПоследних КАК StatusOfTripСрезПоследних
	|		ПО ТаблицаMobileDevices.MobileDevice = StatusOfTripСрезПоследних.MobileDevice
	|			И ТаблицаMobileDevices.Trip = StatusOfTripСрезПоследних.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.RouteOfTrip.СрезПоследних КАК RouteOfTripСрезПоследних
	|		ПО ТаблицаMobileDevices.MobileDevice = RouteOfTripСрезПоследних.MobileDevice
	|			И ТаблицаMobileDevices.Trip = RouteOfTripСрезПоследних.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ TableMobileDevice КАК TableMobileDevice
	|		ПО ТаблицаMobileDevices.MobileDevice = TableMobileDevice.MobileDevice
	|			И ТаблицаMobileDevices.Trip = TableMobileDevice.Trip
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаStops КАК ТаблицаStops
	|		ПО ТаблицаMobileDevices.Trip = ТаблицаStops.Trip
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоординат.MobileDevice,
	|	ТаблицаКоординат.Trip,
	|	ТаблицаКоординат.Activity,
	|	ТаблицаКоординат.ServiceProvider,
	|	ТаблицаКоординат.Equipment,
	|	ТаблицаКоординат.Specialist,
	|	ТаблицаКоординат.Operator,
	|	ТаблицаКоординат.Status,
	|	ТаблицаКоординат.Body,
	|	ТаблицаКоординат.Address,
	|	ТаблицаКоординат.Latitude,
	|	ТаблицаКоординат.Longitude,
	|	ТаблицаКоординат.Flag,
	|	ТаблицаКоординат.Route,
	|	ТаблицаКоординат.ModificationDate,
	|	ТаблицаКоординат.LocationSource,
	|	ТаблицаКоординат.LocationDestination,
	|	ЕСТЬNULL(SettingsOfPointsColor.Color, ""#FF0000"") КАК Color
	|ИЗ
	|	ТаблицаКоординат КАК ТаблицаКоординат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.SettingsOfPointsColor КАК SettingsOfPointsColor
	|		ПО ТаблицаКоординат.Body = SettingsOfPointsColor.Body
	|ГДЕ
	|	&УсловиеДляОтбора";
		
	ТекстДляОтбора = "";
	
	Если ЗначениеЗаполнено(Объект.ServiceProvider) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.ServiceProvider = &ServiceProvider";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Equipment) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Equipment = &Equipment";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Body) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Body = &Body";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Status) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Status = &Status";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Specialist) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Specialist = &Specialist";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Operator) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Operator = &Operator";
	КонецЕсли;
	
	Если Объект.Activity = "Активные" Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "ТаблицаКоординат.Activity";	
	ИначеЕсли Объект.Activity = "НеАктивные" Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "НЕ ТаблицаКоординат.Activity";
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекстДляОтбора) Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляОтбора", ТекстДляОтбора);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ServiceProvider",	Объект.ServiceProvider);
	Запрос.УстановитьПараметр("Equipment",			Объект.Equipment);
	Запрос.УстановитьПараметр("Body",				Объект.Body);
	Запрос.УстановитьПараметр("Status",				Объект.Status);
	Запрос.УстановитьПараметр("Specialist",			Объект.Specialist);
	Запрос.УстановитьПараметр("Operator",			Объект.Operator);
	Запрос.УстановитьПараметр("УсловиеДляОтбора",	Истина);		
	Запрос.УстановитьПараметр("TableMobileDevice",	Объект.TableMobileDevice.Выгрузить());		
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Объект.TableMobileDevice.Загрузить(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыLocation()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	TableLocation.Flag,
	|	TableLocation.Location
	|ПОМЕСТИТЬ TableLocation
	|ИЗ
	|	&TableLocation КАК TableLocation
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Warehouses.Ссылка КАК Location,
	|	Warehouses.Наименование КАК Name,
	|	Warehouses.NameRus,
	|	Warehouses.AddressRus КАК AddressRus,
	|	Warehouses.Latitude,
	|	Warehouses.Longitude,
	|	""#FF0000"" КАК Color,
	|	ЕСТЬNULL(TableLocation.Flag, ЛОЖЬ) КАК Flag
	|ИЗ
	|	Справочник.Warehouses КАК Warehouses
	|		ЛЕВОЕ СОЕДИНЕНИЕ TableLocation КАК TableLocation
	|		ПО Warehouses.Ссылка = TableLocation.Location
	|ГДЕ
	|	НЕ Warehouses.ПометкаУдаления
	|	И &УсловиеДляОтбора
	|	И &УсловиеДляДопОтбора
	|	И &УсловиеДляКоординат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Warehouses.Наименование";
		
	ТекстДляОтбора = "";
	
	Если ЗначениеЗаполнено(Объект.RCACountry) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "Warehouses.RCACountry = &RCACountry";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.City) Тогда
		ТекстДляОтбора = ТекстДляОтбора + ?(ЗначениеЗаполнено(ТекстДляОтбора), " И ", "") + "Warehouses.City = &City";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстДляОтбора) Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляОтбора", ТекстДляОтбора);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.DataSearchLocation) И ЗначениеЗаполнено(Объект.ValueSearchLocation) Тогда
		ТекстДляОтбора = "Warehouses." + Объект.DataSearchLocation + " Подобно &ЗначениеОтбора";
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляДопОтбора", ТекстДляОтбора);
	КонецЕсли;
	
	Если Объект.CoordinatesSearchLocation = "СКоординатами" Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляКоординат", "Warehouses.Latitude <> 0 И Warehouses.Longitude <> 0");
	ИначеЕсли Объект.CoordinatesSearchLocation = "БезКоординат" Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляКоординат", "(Warehouses.Latitude = 0 Или Warehouses.Longitude = 0)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("RCACountry",				Объект.RCACountry);		
	Запрос.УстановитьПараметр("City",					Объект.City);		
	Запрос.УстановитьПараметр("ЗначениеОтбора",			"%"+Объект.ValueSearchLocation+"%");
	Запрос.УстановитьПараметр("TableLocation",			Объект.TableLocation.Выгрузить());		
	Запрос.УстановитьПараметр("УсловиеДляОтбора",		Истина);		
	Запрос.УстановитьПараметр("УсловиеДляДопОтбора",	Истина);		
	Запрос.УстановитьПараметр("УсловиеДляКоординат",	Истина);		
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Объект.TableLocation.Загрузить(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущуюСтрокуTrip()
	
	Если ЗначениеЗаполнено(мТекTrip) Тогда
		
		МассивСтрок = Объект.TableTrip.НайтиСтроки(Новый Структура("Trip", мТекTrip));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.TableTrip.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			ПоместитьВЦентрTrip(МассивСтрок[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущуюСтрокуMobileDevice()
	
	Если ЗначениеЗаполнено(мТекMobileDevice) Тогда
		
		МассивСтрок = Объект.TableMobileDevice.НайтиСтроки(Новый Структура("MobileDevice", мТекMobileDevice));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.TableMobileDevice.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			ПоместитьВЦентрMobileDevice(МассивСтрок[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущуюСтрокуLocation()
	
	Если ЗначениеЗаполнено(мТекLocation) Тогда
		
		МассивСтрок = Объект.TableLocation.НайтиСтроки(Новый Структура("Location", мТекLocation));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.TableLocation.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			ПоместитьВЦентрLocation(МассивСтрок[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПредставление(ЗначениеПредставления)
	
	ЗначениеВозврата = "" + ЗначениеПредставления;
	
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, """", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "«", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "»", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "{", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "}", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "[", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "]", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "\", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "/", "");
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "|", "");
	
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Location", мТекLocation);
	
	// Режимы
	СписокВыбораMode = Элементы.Mode.СписокВыбора;
	ЗаполнитьСписокВыбораРежимов(СписокВыбораMode);
	
	// Активность Trip
	СписокВыбораActivity = Элементы.ActivityTrip.СписокВыбора;
	ЗаполнитьСписокВыбораActivity(СписокВыбораActivity);
	
	// Активность MobileDevice
	СписокВыбораActivity = Элементы.ActivityMobileDevice.СписокВыбора;
	ЗаполнитьСписокВыбораActivity(СписокВыбораActivity);
	
	Объект.Mode			= ?(ЗначениеЗаполнено(мТекLocation), "Location", "Trip");
	Объект.Activity 	= "Активные";
	Объект.Operator		= ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Объект.AutoUpdate	= Истина;
	Объект.PeriodUpdate	= 3;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Online = Истина;
	ДатаСреза = ТекущаяДата();
	ДатаНачалаМаршрут = ДатаСреза - 4*60*60;
	ДатаНач = ДатаНачалаМаршрут;
	ДатаКон = ДатаСреза;
	
	УстановитьВидимость();
	
	ОбновитьДанные();
	
	ПодключитьОбработчикОжидания("ОбновитьДанные", 600);
	
	УстановитьРежим();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПоказатьСкладНаКарте" Тогда
		
		Параметр.Свойство("Location", мТекLocation);
		
		Объект.Mode							= "Location";
		Объект.ValueSearchLocation			= "";
		Объект.CoordinatesSearchLocation	= "Все";
		
		ОбновитьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте           
Процедура ModeПриИзменении(Элемент)
	
	мКартаЗагружена = Ложь;
	
	ОбновитьДанные();
	
	УстановитьРежим();
	
	ПодключитьОбработчикОжидания("ОбновитьДанные", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ActivityПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура EquipmentПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ServiceProviderПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура BodyПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура StatusПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура SpecialistПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура OperatorПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура TypeOfTransportПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура AutoUpdateПриИзменении(Элемент)
	
	Если Объект.PeriodUpdate = 0 Тогда
		Объект.AutoUpdate = Ложь;
	КонецЕсли;
	
	Если Объект.AutoUpdate Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанные", Объект.PeriodUpdate*60);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьДанные");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PeriodUpdateПриИзменении(Элемент)
	
	Если Объект.PeriodUpdate = 0 Тогда
		Объект.AutoUpdate = Ложь;
	КонецЕсли;
	
	Если Объект.AutoUpdate Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанные", Объект.PeriodUpdate*60);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьДанные");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DataSearchLocationПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ValueSearchLocationПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура CoordinatesSearchLocationПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура RCACountryПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура CityПриИзменении(Элемент)

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура OnlineПриИзменении(Элемент)
	
	ОбновитьДанные();
	
	УстановитьВидимость();
	
	Если Online Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанные", 600);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьДанные");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаМаршрутПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСрезаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Отказ = Ложь;
	Если ЗначениеЗаполнено(ДатаНачалаМаршрут) И (День(ДатаСреза) - День(ДатаНачалаМаршрут)) > 2 Тогда
		Ответ = Вопрос("Указан период больше 2-х дней, отображение данных може потребовать значительного количества времени. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			ДатаНачалаМаршрут = ДатаНач;
			ДатаСреза = ДатаКон;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДатаНач = ДатаНачалаМаршрут;
		ДатаКон = ДатаСреза;
		ВывестиМаршрутыНаКарту();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

&НаКлиенте
Процедура КомандаОбновитьНажатие(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажкиНажатие(Команда)
	
	Если Объект.Mode = "Trip" Тогда
		УстановитьФлажкиTrip();
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда
		УстановитьФлажкиMobileDevice();
	ИначеЕсли Объект.Mode = "Location" Тогда
		УстановитьФлажкиLocation();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажкиНажатие(Команда)
	
	Если Объект.Mode = "Trip" Тогда
		СнятьФлажкиTrip();
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда
		СнятьФлажкиMobileDevice();
	ИначеЕсли Объект.Mode = "Location" Тогда
		СнятьФлажкиLocation();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоместитьВЦентрНажатие(Команда)
	
	Если Объект.Mode = "Trip" Тогда
		ПоместитьВЦентрTrip();
	ИначеЕсли Объект.Mode = "MobileDevice" Тогда
		ПоместитьВЦентрMobileDevice();
	ИначеЕсли Объект.Mode = "Location" Тогда
		ПоместитьВЦентрLocation();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайтиНаКартеНажатие(Команда)
	
	Если мКартаЗагружена Тогда
		
		ТекстСкрипта = "";
		
		Ответ = ПоискКординатНаСервере(SearchText);
		
		Сч = 0;
		
		Если ТипЗнч(Ответ) = Тип("Массив") И Ответ.Количество() Тогда
					
			ТекстДляПередачи = "";
			
			УстановкаТекущихТочекОСМ(ТекстДляПередачи, Сч);
			
			ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
			|""type"": ""FeatureCollection"",
			|""features"": [", "", ", ") + "
			|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
			Формат(Ответ[0].lon, "ЧРД=.; ЧГ=0") + ", " +
			Формат(Ответ[0].lat, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
			SearchText + """, ""color"": ""#FF0000""}}";
			
			ТекстСкрипта = "add(" + ТекстДляПередачи + "]
			|}" + ", true);
			|map.setCenter(new OpenLayers.LonLat(" + Ответ[0].lon + ", " + Ответ[0].lat + ").transform(epsg4326, epsg900913), 15);
			|document.getElementById(""TekXText"").value = " + Ответ[0].lon + ";
			|document.getElementById(""TekYText"").value = " + Ответ[0].lat + ";";
			
		Иначе
			
			ТекстДляПередачи = "";
			
			УстановкаТекущихТочекОСМ(ТекстДляПередачи, Сч);
			
			ТекстСкрипта = "add(" + ТекстДляПередачи + "]
			|}" + ", true);
			|document.getElementById(""TekXText"").value = """";
			|document.getElementById(""TekYText"").value = """";";
			
			ПоказатьПредупреждение(, "Адрес не найден!");
			
		КонецЕсли; 
		
		ВыполнитьСкрипт(ТекстСкрипта);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьКоординатыНажатие(Команда)
	
	ОтказПользователя = Ложь;
	
	Если Не мКартаЗагружена Тогда
		Возврат;
	КонецЕсли;
		
	Longitude	= Элементы.ApiКарта.Документ.getElementById("TekXText").value;
	Latitude	= Элементы.ApiКарта.Документ.getElementById("TekYText").value;
	
	Если Не ЗначениеЗаполнено(Longitude) Или Не ЗначениеЗаполнено(Latitude) Тогда
		ОтказПользователя = Истина;
	КонецЕсли; 
	
	Если ОтказПользователя Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Координаты для установки точки не были получены!";
		Сообщение.Сообщить(); 	
	КонецЕсли;	
		
	Если Не ОтказПользователя И Объект.Mode = "Location" Тогда
		
		ТекСтрока = Элементы.TableLocation.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			Если СохранитьКоординатыСервер(ТекСтрока.Location, Latitude, Longitude) Тогда
				ТекСтрока.Latitude	= Latitude;
				ТекСтрока.Longitude	= Longitude;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГеокодироватьНажатие(Команда)
	
	Если Объект.Mode <> "Location" Тогда
		ПоказатьПредупреждение(, "Выберите режим ""Location""");
		Возврат;
	КонецЕсли;
	
	ДействиеВопроса	= Новый ОписаниеОповещения("ДействиеВопросаГеокодировать", ЭтаФорма);

	ТекстВопроса = "Будет произведено геокодирование по всем элементам справочника ""Locations (former Warehouses)"", где не указаны координаты, это может занять продолжительное время, продолжить?";
	ПоказатьВопрос(ДействиеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТП "TableTrip"

&НаКлиенте
Процедура TableTripПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.TableTrip.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		мТекTrip = ТекСтрока.Trip;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableTripВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.TableTripMobileDevice Тогда
		ТекСтрока = Элементы.TableTrip.ТекущиеДанные;
		ПоказатьЗначение(, ТекСтрока.MobileDevice);
	ИначеЕсли Поле = Элементы.TableTripTrip Тогда
		ТекСтрока = Элементы.TableTrip.ТекущиеДанные;
		ПоказатьЗначение(, ТекСтрока.Trip);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableTripFlagПриИзменении(Элемент)

	Если НЕ мКартаЗагружена Тогда
	 	Возврат;	
	КонецЕсли; 
	
	УбратьВсеМаркерыСКарты();
	
	ТекСтрока = Элементы.TableTrip.ТекущиеДанные;
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи =
	"{
	|""type"": ""FeatureCollection"",
	|""features"": [";
	
	Для Каждого Строка Из Объект.TableTrip Цикл
		
		Если Не Строка.Flag Или Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.Trip) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
												
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Flag Тогда
			ПоместитьВЦентрTrip(ТекСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableTripRouteПриИзменении(Элемент)
	ВывестиМаршрутыНаКарту();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТП "TableMobileDevice"

&НаКлиенте
Процедура TableMobileDeviceПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.TableMobileDevice.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		мТекMobileDevice = ТекСтрока.MobileDevice;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableMobileDeviceВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.TableMobileDeviceMobileDevice Тогда
		ТекСтрока = Элементы.TableMobileDevice.ТекущиеДанные;
		ПоказатьЗначение(, ТекСтрока.MobileDevice);
	ИначеЕсли Поле = Элементы.TableMobileDeviceTrip Тогда
		ТекСтрока = Элементы.TableMobileDevice.ТекущиеДанные;
		ПоказатьЗначение(, ТекСтрока.Trip);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableMobileDeviceFlagПриИзменении(Элемент)

	Если НЕ мКартаЗагружена Тогда
	 	Возврат;	
	КонецЕсли; 
	
	УбратьВсеМаркерыСКарты();
	
	ТекСтрока = Элементы.TableMobileDevice.ТекущиеДанные;
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи =
	"{
	|""type"": ""FeatureCollection"",
	|""features"": [";
	
	Для Каждого Строка Из Объект.TableMobileDevice Цикл
		
		Если Не Строка.Flag Или Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.MobileDevice) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
												
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Flag Тогда
			ПоместитьВЦентрMobileDevice(ТекСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableMobileDeviceRouteПриИзменении(Элемент)
	ВывестиМаршрутыНаКарту();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТП "TableMobileDevice"

&НаКлиенте
Процедура TableLocationПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.TableLocation.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		мТекLocation	= ТекСтрока.Location;
		SearchText		= ТекСтрока.AddressRus;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableLocationВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.TableLocationName Или Поле = Элементы.TableLocationNameRus Тогда
		ТекСтрока = Элементы.TableLocation.ТекущиеДанные;
		ПоказатьЗначение(, ТекСтрока.Location);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TableLocationFlagПриИзменении(Элемент)
	
	Если НЕ мКартаЗагружена Тогда
	 	Возврат;	
	КонецЕсли; 
	
	УбратьВсеМаркерыСКарты();
	
	ТекСтрока = Элементы.TableLocation.ТекущиеДанные;
	
	Сч = 0;
	ВыполнитьСкрипт = Ложь;
	
	ТекстДляПередачи =
	"{
	|""type"": ""FeatureCollection"",
	|""features"": [";
	
	Для Каждого Строка Из Объект.TableLocation Цикл
		
		Если Не Строка.Flag Или Строка.Latitude = 0 Или Строка.Longitude = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		ВыполнитьСкрипт = Истина;
									
		ТекстДляПередачи = ТекстДляПередачи + ?(ТекстДляПередачи = "{
		|""type"": ""FeatureCollection"",
		|""features"": [", "", ", ") + "
		|{""type"": ""Feature"", ""id"": " + Сч + ", ""geometry"": {""type"": ""Point"", ""coordinates"": [" +
		Формат(Строка.Longitude, "ЧРД=.; ЧГ=0") + ", " +
		Формат(Строка.Latitude, "ЧРД=.; ЧГ=0") + "]}, ""properties"": {""name"": """ +
		ПодготовитьПредставление(Строка.Location) + """, ""color"": """ + Строка.Color + """}}";
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыполнитьСкрипт Тогда
		
		ТекстСкрипта = "add(" + ТекстДляПередачи + "]
		|}" + ", true);";
												
		ВыполнитьСкрипт(СтрЗаменить(ТекстСкрипта, Символы.НПП, ""));
		
		Если ТекСтрока <> Неопределено И ТекСтрока.Flag Тогда
			ПоместитьВЦентрLocation(ТекСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВопросаГеокодировать(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		Для Каждого Строка Из Объект.TableLocation Цикл
			
			ОбработкаПрерыванияПользователя();
			
			Если Строка.Longitude <> 0 Или Строка.Latitude <> 0 Или ПустаяСтрока(Строка.AddressRus) Тогда
				Продолжить;
			КонецЕсли;
				
			ТекстПоискаВApi = СокрЛП(Строка.AddressRus);
			
			ГеографическийОбъект = СтрЗаменить(ТекстПоискаВApi, " ", "+");
			Если ГеографическийОбъект = "Россия" Тогда
				Продолжить;			
			КонецЕсли; 
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
			
			Попытка
				
				HTTPЗапрос = Новый HTTPЗапрос("/1.x/", Заголовки);
				HTTPЗапрос.УстановитьТелоИзСтроки("geocode=" + ГеографическийОбъект + "&result=1", "windows-1251");
				HTTPСоединение = Новый HTTPСоединение("geocode-maps.yandex.ru",,,,, 5, Новый ЗащищенноеСоединениеOpenSSL());
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
				Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
				HTTPСоединение = Неопределено;
			
			Исключение
			    Продолжить;
			КонецПопытки; 
						
			ПозицияНачала	= Найти(Ответ, "<pos>");
			ПозицияКонца	= Найти(Ответ, "</pos>");
			
			Если ПозицияНачала <> 0 Тогда
				
				ПозицияНачала	= ПозицияНачала + СтрДлина("<pos>");
				Координаты		= Сред(Ответ, ПозицияНачала, ПозицияКонца - ПозицияНачала);
				НомерПробела	= Найти(Координаты, " ");
				Longitude		= Сред(Координаты, 0,  НомерПробела -1); //37 Долгота
				Latitude		= Сред(Координаты, НомерПробела + 1, СтрДлина(Координаты) - НомерПробела); //55 Широта
				
				Если ЗначениеЗаполнено(Longitude) И ЗначениеЗаполнено(Latitude) Тогда
					СохранитьКоординатыСервер(Строка.Location, Latitude, Longitude);
				КонецЕсли;
				
			КонецЕсли;			
				
		КонецЦикла;
		
		ПоказатьПредупреждение(, "Геокодирование завершено!");
		
	КонецЕсли;	
		
КонецПроцедуры


