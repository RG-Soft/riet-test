<!DOCTYPE html>
<html>
    <head>
        <META content="IE=9" http-equiv=X-UA-Compatible></META>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <style type="text/css">
            #map,
            body,
            html {
                padding: 0;
                margin: 0;
                width: 100%;
                height: 100%;
            }

        </style>
        <script src="http://www.openlayers.org/api/OpenLayers.js"></script>
        <script type="text/javascript">
            var map,
                drawControls,
                selectControl,
                selectedFeature,
                polygonLayer,
                objectManager,
                objectManagerQ,
                TekZoom = 10;
            var epsg4326 = new OpenLayers.Projection('EPSG:4326');
            var epsg900913 = new OpenLayers.Projection('EPSG:900913');
            var geojson_format = new OpenLayers
                .Format
                .GeoJSON({externalProjection: epsg4326, internalProjection: epsg900913});
            var features = [];
            function onPopupClose(evt) {
                try {
                    selectControl.unselect(selectedFeature);
                } catch (err) {
                    this.destroy()
                };
            }
            function onFeatureSelect(feature) {
                selectedFeature = undefined;
                if (feature.attributes.count == 1) {
                    selectedFeature = feature;
                    popup           = new OpenLayers
                        .Popup
                        .FramedCloud("chicken", feature.geometry.getBounds().getCenterLonLat(), null, "<div style='font-size:.8em'>" + feature.cluster[0].attributes.name + "</div>", null, true, onPopupClose);
                    feature.popup   = popup;
                    map.addPopup(popup);
                }
            }
            function onFeatureUnselect(feature) {
                if (selectedFeature !== undefined) {
                    map.removePopup(feature.popup);
                    feature
                        .popup
                        .destroy();
                    feature.popup = null;
                }
            }
            OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
                defaultHandlerOptions: {
                    'double'        : true,
                    'pixelTolerance': 0,
                    'single'        : false,
                    'stopDouble'    : true,
                    'stopSingle'    : false
                },
                initialize           : function (options) {
                    this.handlerOptions = OpenLayers
                        .Util
                        .extend({}, this.defaultHandlerOptions);
                    OpenLayers
                        .Control
                        .prototype
                        .initialize
                        .apply(this, arguments);
                    this.handler = new OpenLayers
                        .Handler
                        .Click(this, {
                            'click'   : this.onClick,
                            'dblclick': this.onDblclick
                        }, this.handlerOptions);
                },
                onClick              : function (evt) {
                    alert("Один " + evt.xy);
                },
                onDblclick           : function (evt) {
                    lonlat = map.getLonLatFromPixel(evt.xy);
                    tochka = new OpenLayers
                        .LonLat(lonlat.lon, lonlat.lat)
                        .transform(epsg900913, epsg4326);
                    document
                        .getElementById("TekXText")
                        .value = tochka.lon;
                    document
                        .getElementById("TekYText")
                        .value = tochka.lat;
                    json       = {
                        "features": [
                            {
                                "geometry"  : {
                                    "coordinates": [
                                        tochka.lon, tochka.lat
                                    ],
                                    "type"       : "Point"
                                },
                                "id"        : 0,
                                "properties": {
                                    "color": "#ff0000",
                                    "name" : tochka,
                                    "label" : "",
                                    "type": "",
                                    "radius": 75
                                },
                                "type"      : "Feature"
                            }
                        ],
                        "type"    : "FeatureCollection"
                    };
                    add(json, true);
                }
            });
            function init() {
                map = new OpenLayers.Map('map');
                map.addControl(new OpenLayers.Control.PanZoomBar());
                map.events.register("moveend", map, function(e) { 
                	document.getElementById("CentrLat").value = e.object.center.lat;
                	document.getElementById("CentrLon").value = e.object.center.lon;
                	document.getElementById("Zoom").value = e.object.zoom;
                	TekZoom = e.object.zoom;
                });
                
                var wmsLayer = new OpenLayers
                    .Layer
                    .OSM({layers: 'basic'});
                var style = new OpenLayers.Style({
                    fillColor    : "${color}",
                    fillOpacity  : 0.8,
                    fontSize     : 10,
                    label        : "${label}",
                    pointRadius  : "${radius}",
                    strokeColor  : "#cc6633",
                    strokeOpacity: 0.8,
                    strokeWidth  : "${width}"
                }, {
                    context: {
                        color : function (feature) {
                            return (feature.attributes.count > 1)
                                ? "#ffcc66"
                                : feature.cluster[0].attributes.color;
                        },
                        label : function (feature) {
                            return (feature.attributes.count > 1)
                                ? feature.attributes.count
                                : "";
                        },
                        radius: function (feature) {
                            var pix = (feature.attributes.count > 1)
                                ? Math.max(Math.min(feature.attributes.count, 10) + 2, 7)
                                : 7;
                            return pix;
                        },
                        width : function (feature) {
                            return (feature.attributes.count > 1)
                                ? 2
                                : 1;
                        }
                    }
                });
              
                var styleP = new OpenLayers.Style({
                    fillOpacity  : 0.2,
                    fillColor    : "#1E90FF",
                    pointRadius  : "${radius}",
                    //fontSize     : "${fontSize}",
                    //label        : "${label}",
                    strokeColor  : "#1E90FF",
                    strokeOpacity: 0.8,
                    strokeWidth  : 1
                }, {
                    context: {
                        radius: function (feature) {
                            var pix = (feature.attributes.count > 1)
                                ? Math.max(Math.min(feature.attributes.count, 10) + 2, 7)
                                : feature.cluster[0].attributes.radius * 2 / map.resolution;
                            return pix;
                        }
                    }
                });
              
                strategy           = new OpenLayers
                    .Strategy
                    .Cluster();
                strategy.distance  = 20;
                strategy.threshold = "null";
                polygonLayer       = new OpenLayers
                    .Layer
                    .Vector("Polygon Layer", {
                        strategies: [strategy],
                        styleMap  : new OpenLayers.StyleMap({
                            "default": styleP,
                            "select" : {
                                fillColor  : "#8aeeef",
                                strokeColor: "#32a8a9"
                            }
                        })
                    });
                map.addLayers([wmsLayer, polygonLayer]);
              
                strategyflag           = new OpenLayers
                    .Strategy
                    .Cluster();
                strategyflag.distance  = 20;
                strategyflag.threshold = "null";
                flagLayer       = new OpenLayers
                    .Layer
                    .Vector("flag Layer", {
                        strategies: [strategyflag],
                        styleMap  : new OpenLayers.StyleMap({
                            "default": style,
                            "select" : {
                                fillColor  : "#8aeeef",
                                strokeColor: "#32a8a9"
                            }
                        })
                    });
               map.addLayer(flagLayer);
              
                selectControl = new OpenLayers
                    .Control
                    .SelectFeature(flagLayer, {
                        onSelect  : onFeatureSelect,
                        onUnselect: onFeatureUnselect
                    });
                drawControls  = {
                    polygon: new OpenLayers
                        .Control
                        .DrawFeature(flagLayer, OpenLayers.Handler.Point),
                    select : selectControl
                };
                map.addControl(drawControls.select);
                drawControls
                    .select
                    .activate();
                var click = new OpenLayers
                    .Control
                    .Click();
                map.addControl(click);
                click.activate();
                map.setCenter(new OpenLayers.LonLat(76.092967, 61.021748).transform(epsg4326, epsg900913), TekZoom);
                
              
            }
            function add(data, DelMarker) {
                if (DelMarker) {
                    DeleteAllMarkers();
                };
                features = geojson_format.read(data, "FeatureCollection");
                flagLayer.addFeatures(features);
                //console.log(features)
                polygonLayer.addFeatures(features);
            };
            function DeleteAllMarkers() {
                polygonLayer.removeFeatures(polygonLayer.features);
                flagLayer.removeFeatures(flagLayer.features);
            };
			function SetCenter(Latitude, Longitude){
		        map.setCenter(new OpenLayers.LonLat(Latitude, Longitude).transform(epsg4326, epsg900913), TekZoom);
			};
        </script>
    </head>
    <body onload="init()">
        <div id="map" class="map"></div>
        <div id="CentrLat" />
        <div id="CentrLon" />
        <div id="Zoom" />
        <input id="TekXText" type="text" style="visibility: hidden; display: none"/>
        <input id="TekYText" type="text" style="visibility: hidden; display: none"/>
    </body>
</html>