
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

Перем Манифест Экспорт;

Перем КэшМодулей, КэшНаВремяВызова, КэшНаВремяСеанса, ПодключенныеОбработки, НеСуществующиеОбработки;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

Функция МетодСервера(Знач ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки;
	КонецЕсли;
	
	Если НРег(ИмяМетода) <> НРег("МанифестМодуляПовтИсп") Тогда // Условие необходимо чтобы исключить зацикливание, т.к. метод "МанифестМодуляПовтИсп" вызывается стандартно через встроенную платформу.
		
		МодульМанифест= МанифестМодуля(ИмяМодуля);
		Если МодульМанифест = Неопределено Тогда
			
			ВызватьИсключение "Модуль объекта не обнаружен ("+ИмяМодуля+")
			|	"+ИмяМодуля+"."+ИмяМетода+"()";
			
		ИначеЕсли НЕ МодульМанифест.Функции.Свойство(ИмяМетода) И НЕ МодульМанифест.Процедуры.Свойство(ИмяМетода) Тогда
			
			ВызватьИсключение "Метод объекта не обнаружен ("+ИмяМетода+")
			|	"+ИмяМодуля+"."+ИмяМетода+"()";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модуль= ПолучитьМодуль(ИмяМодуля);
	
	ПараметрыСтрокой= ПараметрыСтрокой(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Результат= ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Если Модуль <> ЭтотОбъект Тогда
		Модуль.ОчиститьПеременные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьМетод(Модуль, ИмяМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем СтруктураМетода, ПереопределениеВыполнено;
	
	Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			
			Если ПереопределениеВыполнено Тогда
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
			Возврат ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		КонецЕсли;
		
		Возврат Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			Результат= Переопределение(Модуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
			
			Если ПереопределениеВыполнено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМодуль(ИмяМодуля) Экспорт
	
	Если НРег(ИмяМодуля) = НРег(ПараметрыКлиентСервер.ИмяОбработки) Тогда // Вызывается текущий модуль
		
		// Если это первый вызов то нужно заполнить манифест
		Если Манифест = Неопределено Тогда
			ЗаполнитьМанифест(ЭтотОбъект, ПараметрыКлиентСервер.ИмяОбработки);
		КонецЕсли;
		
		Возврат ЭтотОбъект;
		
	КонецЕсли;
	
	Если НЕ ПараметрыКлиентСервер.РежимОтладкиСервера 
		И НеСуществующиеОбработки()[ИмяМодуля] = Истина Тогда // Модуль получить невозможно т.к. в сеансе не существует его обработки.
		Возврат Неопределено;
	КонецЕсли;
	
	// Кэш на время вызова сервера.
	Если КэшМодулей = Неопределено Тогда
		КэшМодулей= Новый Соответствие;
	КонецЕсли;
	
	Модуль= КэшМодулей[ИмяМодуля];
	
	Если Модуль = Неопределено Тогда // Модуль еще не создан
		
		Модуль= СоздатьМодуль(ИмяМодуля);
		
		Если Модуль <> Неопределено Тогда
			КэшМодулей.Вставить(ИмяМодуля, ?(Модуль = Неопределено, Ложь, Модуль));
		КонецЕсли;
		
	ИначеЕсли Модуль = Ложь Тогда // Модуль получить невозможно
		Модуль= Неопределено;
	Иначе
		// Повторная инициализация модуля
		Модуль.ОбработкаОбъект= 	  ЭтотОбъект;
		Модуль.ПараметрыКлиентСервер= ПараметрыКлиентСервер;
		Модуль.Инициализировать(ИмяМодуля);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция СоздатьМодуль(ИмяМодуля)
	
	Перем Модуль;
	
	// Подключаемый модуль всегда вызывается под именем "Модуль_ДиадокУФПереопределяемый", т.к. он сам может переопределять методы текущего модуля.
	Если ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль И НРег(ИмяМодуля) = НРег(ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый") Тогда
		 
		Если ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВСоставеКонфигурации" Тогда
			
			Попытка
				Модуль= Обработки[ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю].Создать();
			Исключение
			КонецПопытки;
			
		ИначеЕсли ПараметрыКлиентСервер.РежимОтладкиСервера И ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске" Тогда
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			Попытка
				Модуль= ВнешниеОбработки.Создать(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, Ложь);
			Исключение
			КонецПопытки;
			
		Иначе
			
			Попытка
				Модуль= ВнешниеОбработки.Создать("Диадок" + ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый", Ложь);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если выполняется отладка, то обработка модуля может находится в специальном каталоге на диске.
	Если Модуль = Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
		
		Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
			Возврат Модуль;
		КонецЕсли;
		
		НайденныеФайлы= НайтиФайлы(ПараметрыКлиентСервер.КаталогМодулейСервера, ИмяМодуля + ".epf", Истина);
		
		Если НайденныеФайлы.Количество() > 0 Тогда
			
			Попытка
				Модуль= ВнешниеОбработки.Создать(НайденныеФайлы[0].ПолноеИмя, Ложь);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Модуль = Неопределено Тогда
		
		// Попытка получения модуля если его обработка уже подключена к сеансу.
		Попытка
			Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
		Исключение
		КонецПопытки;
		
		Если Модуль <> Неопределено Тогда
			
			// Если полученный модуль это заглушка сбрасываем его и продолжаем поиск.
			Попытка
				Если Модуль.ЭтоЗаглушка Тогда 
					Модуль= Неопределено 
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		// Если мы ищем НЕ переопределяемый модуль, то возможно это его первый вызов и обработка еще не подключена к сеансу.
		// Попытаемся подключить обработку и снова получить модуль.
		Если Модуль = Неопределено И НРег(Прав(ИмяМодуля, 16)) <> "переопределяемый" Тогда
			
			Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
				Возврат Модуль;
			КонецЕсли;
			
			Попытка
				Обработка= ПолучитьМакет(ИмяМодуля);
			Исключение
			КонецПопытки;
			
			Если ТипЗнч(Обработка) = Тип("ДвоичныеДанные") Тогда
				
				АдресОбработки= ПоместитьВоВременноеХранилище(Обработка);
				Попытка
					ВнешниеОбработки.Подключить(АдресОбработки, "Диадок" + ИмяМодуля, Ложь);
					Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
				Исключение
				КонецПопытки;
				УдалитьИзВременногоХранилища(АдресОбработки);
				
				Если Модуль <> Неопределено Тогда
					// Запомним обработку для того чтобы удалить её из сеанса при закрытии Диадока или инициализации подключаемого модуля.
					ПодключенныеОбработки().Добавить(ИмяМодуля);
					ПоместитьВоВременноеХранилище(ПодключенныеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Модуль <> Неопределено Тогда
		// Инициализация модуля
		Попытка
			Модуль.ОбработкаОбъект= 	  ЭтотОбъект;
			Модуль.ПараметрыКлиентСервер= ПараметрыКлиентСервер;
			Модуль.Инициализировать(ИмяМодуля);
		Исключение
			Модуль = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Модуль = Неопределено И НЕ ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
		НеСуществующиеОбработки().Вставить(ИмяМодуля, Истина);
		СохранитьКоллекцию_НеСуществующиеОбработки();
	КонецЕсли;
	
	Если Модуль <> Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
		Модуль.ПриглашениеОтладки();
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции


Функция МанифестМодуля(ИмяМодуля) Экспорт
	
	// В период отладки модули могуть быть модифицированны, поэтому кэш манифеста использовать нельзя.
	Если ПараметрыКлиентСервер.РежимОтладкиСервера И ИмяМодуля <> ПараметрыКлиентСервер.ИмяОбработки Тогда
		ПовторноеИспользованиеСброситьЗначение(,"МанифестМодуляПовтИсп", ИмяМодуля);
	КонецЕсли;
	
	Возврат МетодСервера(,"МанифестМодуляПовтИсп", ИмяМодуля);
	
КонецФункции

Функция МанифестМодуляПовтИсп(ИмяМодуля) Экспорт
	
	Модуль= ПолучитьМодуль(ИмяМодуля);
	
	Если Модуль <> Неопределено Тогда
		
		Попытка
			
			МодульМанифест= Модуль.Манифест;
			
			Если Модуль <> ЭтотОбъект Тогда
				Модуль.ОчиститьПеременные();
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		Возврат МодульМанифест;
		
	КонецЕсли;
	
КонецФункции

Функция ШаблонМанифеста(ИмяМодуля) Экспорт
	
	Возврат Новый Структура("ИмяМодуля, Функции, Процедуры", ИмяМодуля, Новый Структура, Новый Структура);
	
КонецФункции


Функция Переопределение(СтандартныйМодуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	ПереопределениеВыполнено= Ложь;
	
	ИмяМодуляПереопределяемый= СтандартныйМодуль.Манифест.ИмяМодуля+"Переопределяемый";
	
	МодульПереопределяемыйМанифест= МанифестМодуля(ИмяМодуляПереопределяемый);
	
	Если МодульПереопределяемыйМанифест = Неопределено
		ИЛИ (НЕ МодульПереопределяемыйМанифест.Функции.Свойство(ИмяМетода) 
			 И НЕ МодульПереопределяемыйМанифест.Процедуры.Свойство(ИмяМетода)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульПереопределяемый= ПолучитьМодуль(ИмяМодуляПереопределяемый);
	
	МодульПереопределяемый.СтандартныйМодуль= 		 СтандартныйМодуль;
	МодульПереопределяемый.ПереопределениеВыполнено= ПереопределениеВыполнено;
	
	Результат= ВыполнитьМетодПереопределения(МодульПереопределяемый, ПереопределениеВыполнено, ИмяМетода, ПараметрыСтрокой,
											 Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
											 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	МодульПереопределяемый.ОчиститьПеременные();
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьМетодПереопределения(Модуль, ПереопределениеВыполнено, ИмяМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем СтруктураМетода, Результат;
	
	Если Модуль.Манифест.Функции.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Если СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
			Возврат ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
			Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
			Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		КонецЕсли;
		
		Результат= Вычислить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	ИначеЕсли Модуль.Манифест.Процедуры.Свойство(ИмяМетода, СтруктураМетода) Тогда
		
		Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		
	КонецЕсли;
	
	ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
	
	Возврат Результат;
	
КонецФункции


Функция ПовторноеИспользование(Модуль, СтруктураМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем Результат;
	
	МассивПараметров= МассивПараметров(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат.Результат;
	Иначе
		
		Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
		
		МассивПараметров= Неопределено;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ПовторноеИспользованиеПереопределения(ПереопределениеВыполнено, Модуль, СтруктураМетода, ПараметрыСтрокой,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Перем Результат;
	
	МассивПараметров= МассивПараметров(
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Получить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Результат);
	
	Если Результат <> Неопределено Тогда
		ПереопределениеВыполнено= Истина;
		Возврат Результат.Результат;
	Иначе
		
		Результат= Вычислить("Модуль."+СтруктураМетода.ИмяМетода+"("+ПараметрыСтрокой+")");
		
		ПереопределениеВыполнено= Модуль.ПереопределениеВыполнено;
		
		Если ПереопределениеВыполнено Тогда
			ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Обновить", Модуль.Манифест.ИмяМодуля, СтруктураМетода.ИмяМетода, МассивПараметров, Новый Структура("Результат", Результат));
		КонецЕсли;
		
		МассивПараметров= Неопределено;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Процедура ПовторноеИспользованиеДействияСКэшем(ВариантКэширования, Действие, ИмяМодуля, ИмяМетода, МассивПараметров, Результат= Неопределено)
	
	Если ВариантКэширования = "НаВремяСеанса" Тогда
		
		Если КэшНаВремяСеанса = Неопределено Тогда
			КэшНаВремяСеанса= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
			Кэш= КэшНаВремяСеанса;
		Иначе
			Кэш= КэшНаВремяСеанса; // Снижение издержек на чтение временного хранилища, при повторном обращении в одном серверном вызове.
		КонецЕсли;
		
	ИначеЕсли ВариантКэширования = "НаВремяВызова" Тогда
		Кэш= КэшНаВремяВызова;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш= Новый Структура;
	КонецЕсли;
	
	// Ветка модуля в дереве кэша
	Если НЕ Кэш.Свойство(ИмяМодуля) Тогда
		Кэш.Вставить(ИмяМодуля, Новый Структура); 
	КонецЕсли;
	
	// Ветка метода в ветке модуля в дереве кэша
	Если НЕ Кэш[ИмяМодуля].Свойство(ИмяМетода) Тогда
		Кэш[ИмяМодуля].Вставить(ИмяМетода, Новый Структура("МатрицаАдресов, Хранилище, НовыйКлюч", Новый Соответствие, Новый Соответствие, 1));
	КонецЕсли;
	
	КэшМетода= Кэш[ИмяМодуля][ИмяМетода];
	
	АдресКэша= "";
	Разделитель= "";
	
	МассивПараметровВГраница= МассивПараметров.ВГраница();
	
	Для ИндексПараметра=0 ПО МассивПараметровВГраница Цикл
		
		Параметр = МассивПараметров[ИндексПараметра];
		
		Если Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшМетода.МатрицаАдресов[ИндексПараметра] = Неопределено Тогда
			КэшМетода.МатрицаАдресов.Вставить(ИндексПараметра, Новый Соответствие); // Соответствие уникальных значений параметра и их ключей.
		КонецЕсли;
		
		// Если значение параметра не уникально, ключ уже есть в матрице адресов.
		КлючЯчейкиПараметра= КэшМетода.МатрицаАдресов[ИндексПараметра][Параметр]; 
		
		// Обновление матрицы адресов для уникального значения параметра.
		Если КлючЯчейкиПараметра = Неопределено Тогда
			КлючЯчейкиПараметра= Формат(КэшМетода.НовыйКлюч, "ЧГ="); // Новый ключ для уникального значения параметра.
			КэшМетода.НовыйКлюч= КэшМетода.НовыйКлюч + 1;			 // Инкрементация общего нумератора ключей для адресации следующего уникального значения любого параметра метода.
			КэшМетода.МатрицаАдресов[ИндексПараметра].Вставить(Параметр, КлючЯчейкиПараметра);
		КонецЕсли;
		
		// Полный адрес в хранилище результатов в соответствии с сигнатурой параметров метода.
		АдресКэша= АдресКэша + Разделитель + КлючЯчейкиПараметра;
		Разделитель= ".";
		
	КонецЦикла;
	
	Если Действие = "Получить" Тогда
		Результат = КэшМетода.Хранилище[АдресКэша];
	ИначеЕсли Действие = "Обновить" Тогда
		КэшМетода.Хранилище.Вставить(АдресКэша, Результат);
	ИначеЕсли Действие = "Удалить" Тогда
		КэшМетода.Хранилище.Удалить(АдресКэша);
	КонецЕсли;
	
	Если ВариантКэширования = "НаВремяСеанса" Тогда
		
		Если Действие <> "Получить" Тогда
			// Синхронизация копии кэша на время сеанса в оперативной памяти и во временном хранилище.
			ПоместитьВоВременноеХранилище(Кэш, ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторноеИспользованиеСброситьЗначение(ИмяМодуля= "", ИмяМетода,
		  Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		  Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Перем СтруктураМетода, СтруктураМетодаПереопределяемый;
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки;
	КонецЕсли;
	
	МодульМанифест= МанифестМодуля(ИмяМодуля);
	
	Если МодульМанифест = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульМанифест.Функции.Свойство(ИмяМетода, СтруктураМетода) И СтруктураМетода.ВариантКэширования <> "НеИспользовать" Тогда
		
		Если СтруктураМетода.Переопределение Тогда
			
			МодульПереопределяемыйМанифест= МанифестМодуля(ИмяМодуля+"Переопределяемый");
			
			Если МодульПереопределяемыйМанифест <> Неопределено Тогда
				Если МодульПереопределяемыйМанифест.Функции.Свойство(ИмяМетода, СтруктураМетодаПереопределяемый) Тогда
					Если СтруктураМетодаПереопределяемый.ВариантКэширования <> "НеИспользовать" Тогда
						
						МассивПараметров= МассивПараметров(
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						ПовторноеИспользованиеДействияСКэшем(СтруктураМетодаПереопределяемый.ВариантКэширования, "Удалить", МодульПереопределяемыйМанифест.ИмяМодуля, ИмяМетода, МассивПараметров);
						
						Возврат;
						
					Иначе // Это значит переопределяемая функция меняет входящие параметры продуктовой функции, придется её выполнить чтобы получить сигнатуру измененных параметров.
						
						ПараметрыСтрокой= ПараметрыСтрокой(
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						ПереопределениеВыполнено= Ложь;
						
						СтандартныйМодуль= ПолучитьМодуль(ИмяМодуля);
						
						Переопределение(СтандартныйМодуль, ИмяМетода, ПараметрыСтрокой, ПереопределениеВыполнено,
						Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
						
						СтандартныйМодуль.ОчиститьПеременные();
						
						Если ПереопределениеВыполнено Тогда // Функция все-же вернула результат, значит кэш продуктовой функции не существует.
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивПараметров= МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		ПовторноеИспользованиеДействияСКэшем(СтруктураМетода.ВариантКэширования, "Удалить", МодульМанифест.ИмяМодуля, ИмяМетода, МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры



Функция ПараметрыСтрокой(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	Разделитель= 			"";
	ПараметрыСтрокой= 		"";
	ДобавитьПустойПараметр= Ложь;
	
	Если Параметр9 <> NULL Тогда
		ПараметрыСтрокой= "Параметр9"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
		ИндексПоследнегоПараметра= 9;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр8 <> NULL Тогда
		ПараметрыСтрокой= "Параметр8"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр7 <> NULL Тогда
		ПараметрыСтрокой= "Параметр7"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр6 <> NULL Тогда
		ПараметрыСтрокой= "Параметр6"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр5 <> NULL Тогда
		ПараметрыСтрокой= "Параметр5"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр4 <> NULL Тогда
		ПараметрыСтрокой= "Параметр4"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр3 <> NULL Тогда
		ПараметрыСтрокой= "Параметр3"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр2 <> NULL Тогда
		ПараметрыСтрокой= "Параметр2"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр1 <> NULL Тогда
		ПараметрыСтрокой= "Параметр1"+Разделитель+ПараметрыСтрокой;
		Разделитель= ", ";
		ДобавитьПустойПараметр= Истина;
	Иначе
		Если ДобавитьПустойПараметр Тогда
			ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
			Разделитель= ",";
		Иначе
			Разделитель= "";
		КонецЕсли;
	КонецЕсли;
	
	Если Параметр0 <> NULL Тогда
		ПараметрыСтрокой= "Параметр0"+Разделитель+ПараметрыСтрокой;
	ИначеЕсли ДобавитьПустойПараметр Тогда
		ПараметрыСтрокой= Разделитель+ПараметрыСтрокой;
	КонецЕсли;
	
	//МассивПараметровВГраница= МассивПараметров.ВГраница();
	//Разделитель= "";
	//Для ИндексПараметра= 0 ПО МассивПараметровВГраница Цикл
	//	
	//	Если МассивПараметров[ИндексПараметра] = NULL Тогда
	//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель;
	//	Иначе
	//		ПараметрыСтрокой= ПараметрыСтрокой + Разделитель + "Параметр"+ИндексПараметра
	//	КонецЕсли;
	//	
	//	Разделитель= ", ";
	//	
	//КонецЦикла;
	
	Возврат ПараметрыСтрокой;
	
КонецФункции

Функция МассивПараметров(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
						 Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
	
	МассивПараметров= Новый Массив(10);
	МассивПараметров[0]= Параметр0; МассивПараметров[1]= Параметр1; МассивПараметров[2]= Параметр2; МассивПараметров[3]= Параметр3; МассивПараметров[4]= Параметр4;
	МассивПараметров[5]= Параметр5; МассивПараметров[6]= Параметр6; МассивПараметров[7]= Параметр7; МассивПараметров[8]= Параметр8; МассивПараметров[9]= Параметр9;
	
	ОбратныйИндекс= 9;
	Пока ОбратныйИндекс > -1 Цикл
		Если МассивПараметров[ОбратныйИндекс] = NULL Тогда
			МассивПараметров.Удалить(ОбратныйИндекс);
		Иначе
			Прервать;
		КонецЕсли;
		ОбратныйИндекс= ОбратныйИндекс-1;
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции


	
Процедура ЗаполнитьМанифест(Модуль, ИмяМодуля) Экспорт
	
	Модуль.Манифест= ШаблонМанифеста(ИмяМодуля);
	Модуль.Манифест.Функции=   Модуль.ФункцииМодуля();
	Модуль.Манифест.Процедуры= Модуль.ПроцедурыМодуля();
	
КонецПроцедуры

Функция ДобавитьФункциюВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", ВариантКэширования= "НеИспользовать", Переопределение= Ложь) Экспорт
	
	СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение", ИмяМетода, ПараметрыСтрокой, ВариантКэширования, Переопределение));
	
КонецФункции

Функция ДобавитьПроцедуруВМанифест(СтруктураМетодов, ИмяМетода, ПараметрыСтрокой= "", Переопределение= Ложь) Экспорт
	
	СтруктураМетодов.Вставить(ИмяМетода, Новый Структура("ИмяМетода, ПараметрыСтрокой, Переопределение", ИмяМетода, ПараметрыСтрокой, Переопределение));
	
КонецФункции


Функция ИнициализироватьПодключаемыйМодуль() Экспорт
	
	Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности, ПодключаемыйМодульПутьКФормам", Ложь, "", "", "");
	
	Если КэшМодулей <> Неопределено Тогда
		КэшМодулей.Очистить();
	КонецЕсли;
	
	УдалитьПодключенныеОбработки();
	
	НеСуществующиеОбработки().Очистить();
	СохранитьКоллекцию_НеСуществующиеОбработки();
	
	ИмяМодуля= ПараметрыКлиентСервер.ИмяОбработки+"Переопределяемый";
	
	РезультатИнициализации= ИнициализироватьОбработкуПодключаемогоМодуля(ИмяМодуля);
	
	Если РезультатИнициализации = Истина Тогда
		ИнициализироватьОбработкиСерверныхМодулейПодключаемогоМодуля(ИмяМодуля, Результат);
	Иначе
		Результат.Отказ= 		  Истина;
		Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
		Результат.Подробности= 	  РезультатИнициализации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьОбработкуПодключаемогоМодуля(ИмяМодуля)
	
	Результат= Истина;
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "НаДиске" Тогда
		
		Если ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			
			НайденныеФайлы= НайтиФайлы(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю,,Ложь);
			
			Если НайденныеФайлы.Количество() > 0 Тогда
				
				Попытка
					ВнешниеОбработки.Создать(НайденныеФайлы[0].ПолноеИмя, Ложь);
				Исключение
					Результат= ОписаниеОшибки();
				КонецПопытки;
				
			Иначе
				Результат= "Не найден файл подключаемого модуля! " + ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
			КонецЕсли;
			
		Иначе
			Результат= ПодключитьОбработку(ИмяМодуля, ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключаемыйМодуль);
		КонецЕсли;
		
	ИначеЕсли ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВБазеДанных" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю) Тогда
			
			МетаданныеРеквизиты= ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю.Метаданные().Реквизиты;
			
			Для Каждого МетаданныеРеквизит ИЗ МетаданныеРеквизиты Цикл
				
				Если МетаданныеРеквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
					
					Результат= ПодключитьОбработку(ИмяМодуля, ПолучитьНавигационнуюСсылку(ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, МетаданныеРеквизит.Имя));
					
					Если Результат = Истина Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля = "ВСоставеКонфигурации" Тогда
		
		Попытка
			Обработки[ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю].Создать();
		Исключение
			Результат= ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьОбработкиСерверныхМодулейПодключаемогоМодуля(ИмяМодуля, Результат)
	
	ПодключаемыйМодуль= ПолучитьМодуль(ИмяМодуля);
	
	Если ПодключаемыйМодуль= Неопределено Тогда
		Результат.Отказ= 		  Истина;
		Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
		Результат.Подробности= 	  "";
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодульМетаданные= ПодключаемыйМодуль.Метаданные();
	МетаданныеМакеты= 			  ПодключаемыйМодульМетаданные.Макеты;
	
	Для Каждого МетаданныеМакет Из МетаданныеМакеты Цикл
		
		ИмяМакета= МетаданныеМакет.Имя;
		
		Если НРег(Лев(ИмяМакета, 7)) = НРег("Модуль_") И НРег(Прав(ИмяМакета, 16)) = "переопределяемый" Тогда
			РезультатПодключения= ПодключитьОбработку(ИмяМакета, ПодключаемыйМодуль.ПолучитьМакет(ИмяМакета));
		КонецЕсли;
		
		Если РезультатПодключения <> Истина Тогда
			
			Результат.Отказ= 		  Истина;
			Результат.ОписаниеОшибки= "Не удалось инициализировать подключаемый модуль!";
			Результат.Подробности= 	  РезультатПодключения;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ПодключаемыйМодульПутьКФормам= ПодключаемыйМодульМетаданные.ПолноеИмя()+".Форма.";
	
	ПодключаемыйМодуль.ОчиститьПеременные();
	
КонецПроцедуры

Функция ПодключитьОбработку(ИмяМодуля, ДвоичныеДанныеСтрока)
	
	Перем Модуль;
	
	ОбработкаТипЗнч= ТипЗнч(ДвоичныеДанныеСтрока);
	
	Если ОбработкаТипЗнч = Тип("ДвоичныеДанные") Тогда
		
		Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
			Возврат Модуль;
		КонецЕсли;
		
		АдресОбработки= ПоместитьВоВременноеХранилище(ДвоичныеДанныеСтрока);
		
		Попытка
			ВнешниеОбработки.Подключить(АдресОбработки, "Диадок" + ИмяМодуля, Ложь);
		Исключение
			УдалитьИзВременногоХранилища(АдресОбработки);
			Возврат ОписаниеОшибки();
		КонецПопытки;
		
		УдалитьИзВременногоХранилища(АдресОбработки);
		
	ИначеЕсли ОбработкаТипЗнч = Тип("Строка") Тогда
		
		Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
			Возврат Модуль;
		КонецЕсли;
		
		Попытка
			ВнешниеОбработки.Подключить(ДвоичныеДанныеСтрока, "Диадок" + ИмяМодуля, Ложь);
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		Модуль= ВнешниеОбработки.Создать("Диадок" + ИмяМодуля, Ложь);
	Исключение
		
		Если НЕ МетодСервера(,"ДопустимыйРежимРаботы") Тогда
			Возврат Модуль;
		КонецЕсли;
		
		АдресМодульЗаглушка= ПоместитьВоВременноеХранилище(ПолучитьМакет("Модуль_Заглушка"));
		ВнешниеОбработки.Подключить(АдресМодульЗаглушка, "Диадок" + ИмяМодуля, Ложь);
		УдалитьИзВременногоХранилища(АдресМодульЗаглушка);
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
	Если Модуль <> Неопределено И ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
		Модуль.ПриглашениеОтладки()
	КонецЕсли;
	
	ПодключенныеОбработки().Добавить(ИмяМодуля);
	ПоместитьВоВременноеХранилище(ПодключенныеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
	
	Возврат Истина;
	
КонецФункции


Функция ПодключенныеОбработки()
	
	Если ПодключенныеОбработки = Неопределено Тогда
		
		ПодключенныеОбработки= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
		
		Если ПодключенныеОбработки = Неопределено Тогда
			ПодключенныеОбработки= Новый Массив;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодключенныеОбработки;
	
КонецФункции

Процедура УдалитьПодключенныеОбработки() Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПодключенныеОбработки().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресМодульЗаглушка= ПоместитьВоВременноеХранилище(ПолучитьМакет("Модуль_Заглушка"));
	
	Для Каждого ИмяМодуля ИЗ ПодключенныеОбработки Цикл
		
		Попытка
			ВнешниеОбработки.Подключить(АдресМодульЗаглушка, "Диадок" + ИмяМодуля, Ложь);
		Исключение
		КонецПопытки;
		
		ПовторноеИспользованиеСброситьЗначение(,"МанифестМодуляПовтИсп", ИмяМодуля);
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(АдресМодульЗаглушка);
	
	ПодключенныеОбработки().Очистить();
	УдалитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресПодключенныеОбработки);
	
КонецПроцедуры


Функция НеСуществующиеОбработки()
	
	Если НеСуществующиеОбработки = Неопределено Тогда
		
		НеСуществующиеОбработки= ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресНеСуществующиеОбработки);
		
		Если НеСуществующиеОбработки = Неопределено Тогда
			НеСуществующиеОбработки= Новый Соответствие;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеСуществующиеОбработки;
	
КонецФункции

Функция СохранитьКоллекцию_НеСуществующиеОбработки()
	
	ПоместитьВоВременноеХранилище(НеСуществующиеОбработки(), ПараметрыКлиентСервер.ВременноеХранилище.АдресНеСуществующиеОбработки);
	
КонецФункции

Функция ДопустимыйРежимРаботы() Экспорт
	
	ДопустимыйРежимРаботы= БезопасныйРежим() = Ложь;
	
	Если НЕ ДопустимыйРежимРаботы Тогда
		ВызватьИсключение
		"						Недопустимый режим работы модуля Диадок!
		|
		|Для работы модуля Диадок необходимо:
		|
		|Вариант №1: Поместить модуль в справочник ""Дополнительные отчеты и обработки"".
		|
		|Вариант №2: Поместить модуль в состав конфигурации программы.
		|
		|Вариант №3: Запускать модуль под пользователем с правами ""Администратор системы"" или ""Полные права""";
	КонецЕсли;
	
	Возврат ДопустимыйРежимРаботы;
	
КонецФункции

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть добавлены в соответствующую структуру!

Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВызова", Истина);
	//ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМодуль", "ИмяМодуля", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "МанифестМодуля", "ИмяМодуля", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "МанифестМодуляПовтИсп", "ИмяМодуля", "НаВремяСеанса", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ШаблонМанифеста", "ИмяМодуля", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ДопустимыйРежимРаботы",,"НаВремяСеанса", Ложь);
	
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьОбработкуПодключаемогоМодуля", "ИмяМодуля", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодключитьОбработку", "ИмяМодуля, ДвоичныеДанныеСтрока", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодключенныеОбработки", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НеСуществующиеОбработки",,, Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СохранитьКоллекцию_НеСуществующиеОбработки", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВерсияОбработкиДиадокСервер");
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ТребуемаяВерсияРасширенияДиадок");
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокСтатусовВзаимоотношений", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "РасшифровкаТекущегоСостоянияВзаимоотношений", "CurrentStatus", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КлассификаторВалютПолучитьНаименованиеПоКоду", "Код", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыделитьСлово", "ИсходнаяСтрока", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПутьКWEBСерверу", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьМассивСтруктурВТаблицуЗначений", "МассивСтруктур", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьТаблицуЗначенийВМассивСтруктур", "ТаблЗнач", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьСтруктуруВТаблицу", "Структура", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьПериферийныеБазы", "НаименованиеПланаОбмена", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтрокуПоМассиву", "Массив", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИмяКонфигурации", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаркерКонфигурации", "ПринудительныйВыбор = Ложь, ОбработчикВыбора = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьХарактеристикуКонфигурации", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПрофильКонфигурации", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьДоступКОбъектам", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьПраваНаПВХ", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьВозможностьИнициализацииВУзле", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьНеобходимыеСвойстваПВХ", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьИнициализациюСвойствПВХ", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПодготовкаКонфигурацииКРаботе", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЭтоПериферийнаяБД", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТекущегоПользователя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыОбъекты", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыПВХ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНеобходимыеДляРаботыРегистры", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитИлиСвойствоОбъекта", "Объект, ИмяРеквизита", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЕстьРеквизитыИлиСвойстваОбъекта", "Объект, КоллекцияИменРеквизитов", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаЗначений_2_МассивСтруктур", "ТаблицаЗначений", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПоместитьИнтеграционныйМодульВДополнительныеОбработки", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьДанныеОПомещаемомМодуле", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИмяФормыИнтеграции", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТитулПолучателяДляТорг12", "ПараметрыТитулаПолучателя", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТитулПолучателяДляАкта", "ПараметрыТитулаПолучателя", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеВизирующего", "ПараметрыПодписания, ИНН = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НоменклатураЯвляетсяУслугой", "Номенклатура", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыбратьОсновноеСоглашениеКонтрагента", "Контрагент, Организация", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыбратьОсновнойДоговорКонтрагента", "Контрагент, Организация, СписокВидовДоговоров", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьДанныеДокумента", "ДокументСсылка, DocumentDate, DocumentNumber", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьМеткиДокумента", "ДокументСсылка, РеквизитДата, РеквизитНомер, DocumentDate, DocumentNumber", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбновитьМеткуПолученияВЭлектронномВиде", "СчетФактура", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтавкуНДСДиадок", "TaxRate", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЕдиницуИзмерения", "КодЕИ, НаименованиеЕИ, Номенклатура", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокВидовДоговоров", "ДоговораПродажи = ложь", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСписокАссоциированныхКонтрагентовДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПользователя", "МассивНаименованийНастроек", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкуПользователя", "Наименование", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьНастройкиПользователей", "СтруктураНастроек", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНаличиеНастроекПользователя", "ВозможныеНастройкиПользователя", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМЗНастройкиПОльзователя", "Пользователь, НастройкаСсылка", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПрокси", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНазначениеСвойстваСтрокой", "СвойствоСтрокой", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиОбъектыПоТЗ", "ТаблицаПараметров", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиОбъект", "НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2=неопределено, ЗначениеСвойства2=неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СвойстваОбъектов_НайтиМассивОбъектов", "НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2 = неопределено, ЗначениеСвойства2 = неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиОбъект", "НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиМассивОбъектов", "НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеСвойства", "Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = """"", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМЗСвойстваОбъектов", "Объект, СвойствоСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиПодобныеСвойства", "Наименование", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойство", "Наименование", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойствоПовтИсп", "Наименование", "НаВремяСеанса", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиСвойстваПоСтруктуре", "СтруктураСвойствОбъектов", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиПодобныеСвойстваПоСтруктуре", "СтруктураСвойствОбъектов", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НайтиНастройкиПользователейИзБП20", "Наименование", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьНеобходимыеСвойстваВПВХ", "ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьСвойство", "ОписаниеСвойства", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьСвойстваОбъектов", "СтруктураСвойствОбъектов", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьВозможныеНастройки", "ВозможныеНастройки", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьВозможныеСвойства", "ВозможныеСвойстваОбъектов", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НеобходимоИнициализироватьСтарыеСвойстваИз20", "СтарыеСвойстваОбъектовИз20", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНеобходимостьИнициализацииСвойств", "ВозможныеНастройки, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеНастройкиПользователя", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВозможныеСвойстваОбъектов", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтарыеСвойстваОбъектовИз20", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьНаличиеСвойствОбъектов", "ВозможныеСвойстваОбъектов", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереместитьЗначенияСтарыхСвойств", "ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереместитьНастройкиПользователей", "ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереписатьНовыеЗначенияНеправильныхСвойств", "МассивПереписанныхСвойств", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбработатьНеправильныеСвойства", "ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПереименоватьСтарыеНастройкиИз20", "СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбработатьСвойстваОбъектовИз20", "ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СведенияОВнешнейОбработке", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуКоманд", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикОрганизации", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПодразделениеОрганизации", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикОрганизацииПредставление", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЯщикКонтрагентаПрефикс", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента", "BoxId", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИДПодразделенияКонтрагента", "BoxId", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторДокументаВДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСертификатПользователя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПредставлениеСертификатаПользователя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваАдреспроксиСервера", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПользовательПроксиСервера", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПарольПроксиСервера", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособПодписанияТ12", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДолжностьПодписанта", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПечатнаяФормаДляТоваров", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПечатнаяФормаДляУслуг", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваОтправлятьНеПроведенные", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаСчета", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваФормироватьСчетНаОсновании", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаАкта", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособФормированияАкта", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСпособФормированияАктаСверки", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваПодставлятьКППГрузоотправителя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификатрСвойстваТекстКомментарияДиадок", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваIdПодписантаСогласование", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваДолжностьПодписантаСогласование", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСтатусОтправляемыхВПФ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваНомерВПФ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИдентификаторСвойстваСписокДопВПФ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "DocumentID_2_ДокументМассовое", "ТЗИд", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "DocumentID_2_Документ", "DocumentID, BoxID", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Документ_2_DocumentID", "СсылкаНаОбъект, ИспользоватьИдентификаторСчета=ложь", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Организация_2_BoxID", "Организация", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Установить_BoxID_для_Организация", "Организация, BoxID, НаименованиеЯщика, DepartmentKpp = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "BoxID_2_Организация", "BoxID, DepartmentKpp = """"", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "CounteragentBoxID_2_МассивКонтрагентов", "CounteragentID, BoxID = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "CounteragentBoxID_2_Контрагент", "CounteragentID, BoxID = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Контрагент_2_CounteragentBoxID", "Контрагент, BoxID = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьПараметрыМаршрутизацииДляКонтрагента", "Контрагент, BoxID = Неопределено, НаименованиеПодразделения, ИДПодразделения", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьПараметрыМаршрутизацииДляДоговора", "Договор, НаименованиеПодразделения, ИДПодразделения", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗначениеКонстанты", "НаименованиеКонстанты", "НаВремяВызова", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОбъектКонстант", "", "НаВремяСеанса", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ДобавитьНулиВПредставлениеЧисла", "чс, длина", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаПерекодировки", "", "НаВремяСеанса", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло64ИзЧисла16", "число", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло16ИзГуида", "Гуид", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьГуидИзЧисла16", "Число16", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло2изЧисла64", "Число64", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЧисло16изЧисла2", "Число", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КонвертироватьГуидВЧисло64", "гуид", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КонвертироватьЧисло64вГуид", "число64", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОформитьОшибкиВHTML", "ОшибкиСтруктуры, Заголовок", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "РазобратьДопПоле_СтарыйФормат", "AdditionalInfo", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "РазобратьДопПоле", "StructedAdditionalInfos", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ДобавитьРазделитель", "Стр, Префикс = """"", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НаименованиеРегиона", "code", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ТолькоЦифры", "строкаПроверки", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ОтрезатьПравуюЗапятую", "стр", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКЕИ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКСМ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОКВ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КлассификаторыДляДиадок", "", "НаВремяСеанса", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СтруктураКонтентаЗаполнена", "СтруктураКонтента", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Эквивалентны", "стр1, стр2", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СтрокаЧтоМенять", "ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЧисловойКодЕИ", "Знач КодЕИ", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьЕИ", "ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСтрану", "СтранаПроисхождения, КодПроисх, СписокПроверенныхСтран, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьВалюту", "валюта, ВалютаКод, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНаименованиеЕИПоКоду", "КодЕИ", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуСчета", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАкта", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАктаСверки", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормСчета", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАкта", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАктаСверки", "ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьНеСтандартнуюПечатнуюФорму", "ИдПечатнойФормы, ДокументСсылка", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТитулПолучателя", "СтруктураПодписи, Type, DocumentDate", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеСтавкиНДС", "TaxRate", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьSigner", "ПодписантСФ=ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентАдреса", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентКонтрагента", "КонтентДляСФ = Ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьПодписанта", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентГрузо", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруItemsXmlTorg12", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруItemsXmlAcceptanceCertificate", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруItemsInvoice", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруAdditionalInfos", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруItemsInvoiceCorrection", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруOriginalInvoices", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруPaymentDocuments", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентДляXmlTorg12", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентДляInvoice", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентДляInvoiceCorrection", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Инициализировать_AmountsDec_AmountsInc", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Инициализировать_OriginalValues_CorrectedValues", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьДоверенность", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентДляXmlAcceptanceCertificate", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьКонтентДляXmlAcceptanceCertificate_ТитулПолучателя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеАдресаПоContent", "AddressContent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеИННКПП", "Inn, Kpp", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПредставлениеКонтрагентаПоContent", "CounteragentContent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОПоКонтенту", "official", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеДоверенностьВыдана", "attorney", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеДоверенностьПолучена", "attorney", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоXmlTorg12Content", "Знач Content, Знач ВизуализироватьДопПоля", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьФИОСИнициалами", "ФИО", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВизуализироватьПолеСВладельцем", "SignatureStructure, ЭтоСФ = Ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьОбласть_ВизуализироватьДанныеПодписи", "SignatureStructure, Макет, ЭтоСФ=ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьМаксимальнуюДлинуПрото", "ЗначениеПоля, ПредставлениеПоля, МаксимальнаяДлина, род=""м"", ОбязательноеЗаполнение = ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьФорматДатыПрото", "ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение = ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "УмножитьВектора", "ИНН, Множители", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННЮЛСовпадает", "ИНН", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННФЛСовпадает", "ИНН", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСтруктуруКонтрагентаДляТОРГ12", "OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=ложь", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияXmlTorg12Content", "Знач XmlTorg12Content", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеИННКПП", "CounteragentContent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредставлениеГОП", "Counteragent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНаименованиеСтраныПоКоду", "КодОКСМ", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоInvoiceContent", "Знач Content, Знач ВизуализироватьДопПоля", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьОшибкиВСтрокеСФ", "item", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьСсылкуНаДокумент", "ИдЯщика, ИдДокумента, ТекстСсылки", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСвязиИСФ", "InvoiceContent, ДокументСсылка", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьКлассификаторыСФ", "InvoiceContent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияInvoiceContent", "InvoiceContent, ДокументСсылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "Заполнитьпустое", "зн", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоInvoiceCorrectionContent", "Content, ВизуализироватьДопПоля", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьОшибкиВСтрокеКСФ", "Item", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСвязиКСФ", "InvoiceContent, ДокументСсылка", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьКлассификаторыКСФ", "InvoiceCorrectionContent", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияInvoiceCorrectionContent", "InvoiceCorrectionContent, ДокументССылка", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьРеквизитыКонтрагентаДляАкта", "OrgInfo", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent", "Content, ВизуализироватьДопПоля", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияXmlAcceptanceCertificateContent", "xmlAcceptanceCertificateContent", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуДокументовПоИдДиадока", "ТаблицаИД", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПараметрыПодписанияТ12вДиадок", "ФИОПодписанта", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьНастройкиПодписантаСогласование", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруОшибкиВнешнейКомпоненты", "Подробности", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВСтрокеНРегЕстьСлова", "стрПар, слово1, слово2 = """", слово3 = """", слово4 = """"", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСправа", "стр, маркер", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "КраткоеСообщениеОбОшибке", "текстОшибки", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьТекстОшибкиДиадок", "ТекстОшибки, СловарьWL", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СклеитьПредставлениеОрганизацииДиадок", "Строка", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОтпечатокСертификатаДляДиадок", "Организация", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьТаблицуЯщиковДиадокОрганизации", "Организация = неопределено, КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком = Неопределено,КонтекстРаботаССерверомДиадок_ПредставлениеПользователя= неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов", "ТаблицаКонтрагентов", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуМаршрутизацииПоДоговорам", "Организация, Контрагент", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаршрутизациюПоДоговору", "ДоговорКонтрагента", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМаршрутизациюПоКонтрагенту", "Контрагент", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ТочностьЦеныСФ", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком", "ДанныеOrganizationDepartment", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарь", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьЛайф", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьСеоДок", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьНФК", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИспользоватьКастомныеДопПоля", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИспользоватьКастомныйАдресГрузополучателя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКастомныеДопПоля", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьШаблонКлючейДопСведений", "ИдКонтрагента, DocumentType", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСловарьШаблоновКлючейДопСведений", "", "НеИспользовать", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "НужноФормироватьДопИнфоПоШаблону", "ИдКонтрагента", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьСтрокуДопИнфоПоШаблону", "ДопСведения", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьКастомныйАдресГрузополучателя", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ПреобразоватьСтрокуВМассивПодстрок", "Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ДопустимыеМаркерыКонфигураций", "", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СтранаЧленТС", "КодСтраны", "НеИспользовать", Истина);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИнициализироватьПодключаемыйМодуль",,,Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "ИмяТипаОбъекта", "ОбъектСсылка",,Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СуществуетОбъектМетаданных", "ПолноеИмяОбъекта", "НаВремяСеанса", Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СсылкаСуществует", "Ссылка",, Ложь);
	ДобавитьФункциюВМанифест(СтруктураМетодов, "СравнитьВерсии", "Знач ПерваяВерсия, Знач ВтораяВерсия");
	
	Возврат СтруктураМетодов;
	
КонецФункции

Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьМанифест", "Модуль, ИмяМодуля", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УдалитьПодключенныеОбработки", "", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "СоздатьНовыйЭлементДополнительныеОбработки", "ДанныеДляЗаполнения, Результат", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкуПользователя", "Наименование, Значение", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкиПрокси", "СтруктураНастроек", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьЗначениеСвойства", "Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = """", ЗначениеСвойства", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Установить_DocumentID_Для_Документ", "Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Установить_CounteragentBoxID_для_Контрагент", "Контрагент, CounteragentID, BoxID = Неопределено", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьЗначениеКонстанты", "НаименованиеКонстанты, Знач ЗначениеКонстанты", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьПодписантаДляXmlTorg12", "Official,  Визирующий", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьФИОПодписанта", "official, фио", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьStructedAdditionalInfos", "StructedAdditionalInfos, ДопСведения", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьПараметрыПодписанияТ12вДиадок", "ПараметрыПодписания", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "УстановитьНастройкиПодписантаСогласование", "ФИОПодписантаПолучателя, ДолжностьПодписанта", Истина);
	ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПовторноеИспользованиеСброситьЗначение", "ИмяМодуля= "", ИмяМетода, Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

//{ ВЕРСИЯ
	
	Функция ВерсияОбработкиДиадокСервер() Экспорт
		
		// { RGS TChubarova 22.05.2016 20:57:41 - 
		//Возврат "UF_5_09_06";
		Возврат "UF_5_09_06_sli";
		// } RGS TChubarova 22.05.2016 20:57:49 - 
		
	КонецФункции
	
	Функция ТребуемаяВерсияРасширенияДиадок() Экспорт
		
		Возврат "1.0.1.11";
		
	КонецФункции
	
//} ВЕРСИЯ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаСервере
	Функция ПолучитьСписокСтатусовВзаимоотношений() Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СписокСтатусов=	Новый СписокЗначений;
		
		СписокСтатусов.Добавить("IsMyCounteragent", 		"Партнерские отношения");
		СписокСтатусов.Добавить("InvitesMe", 				"Получен запрос");
		СписокСтатусов.Добавить("IsInvitedByMe", 			"Ожидается ответ");
		СписокСтатусов.Добавить("RejectsMe", 				"Заблокировал меня");
		СписокСтатусов.Добавить("IsRejectedByMe", 			"Заблокирован мной");
		СписокСтатусов.Добавить("NotInCounteragentList", 	"Есть в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("IsOrganization", 			"Совпадает с организацией");
		СписокСтатусов.Добавить("Unknown", 					"Нет в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("InnNotValid", 				"ИНН неверный");
		
		Возврат СписокСтатусов;
		
	КонецФункции
	
	&НаСервере
	Функция РасшифровкаТекущегоСостоянияВзаимоотношений(CurrentStatus) Экспорт
		
		СписокСтатусов=	ПолучитьСписокСтатусовВзаимоотношений();
		
		НайденныйСтатус=	СписокСтатусов.НайтиПоЗначению(CurrentStatus);
		Если НЕ НайденныйСтатус = Неопределено Тогда
			Возврат НайденныйСтатус.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	&Насервере
	Функция КлассификаторВалютПолучитьНаименованиеПоКоду(Код) Экспорт
		
		Если СокрЛП(Строка(Код)) = "643" Тогда
			Возврат "RUB";
		ИначеЕсли СокрЛП(Строка(Код)) = "978" Тогда
			Возврат "EUR";
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, " ");
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьПутьКWEBСерверу() Экспорт
		
		ТекстURL = "https://diadoc.kontur.ru/";
		Возврат ТекстURL;
		
	КонецФункции
	
	&НаСервере
	Функция ПреобразоватьМассивСтруктурВТаблицуЗначений(МассивСтруктур) Экспорт
		
		Результат=	Новый ТаблицаЗначений;
		
		Для Каждого ЯчейкаМассива Из МассивСтруктур Цикл
			НоваяСтрока=	Результат.Добавить();
			Для Каждого ЯчейкаСтруктуры Из ЯчейкаМассива Цикл
				Если Результат.Колонки.Найти(ЯчейкаСтруктуры.Ключ) = Неопределено Тогда
					КлючКолонки=	Результат.Колонки.Добавить(ЯчейкаСтруктуры.Ключ).Имя;
				Иначе
					КлючКолонки=	ЯчейкаСтруктуры.Ключ;
				КонецЕсли;
				НоваяСтрока[КлючКолонки]=	ЯчейкаСтруктуры.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблЗнач) Экспорт
		
		Результат = Новый Массив;
		
		СтрокаКлючей = "";
		
		Для Каждого Колонка из ТаблЗнач.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей),"",",") + Колонка.Имя;
		КонецЦикла;
		
		Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Стр Из ТаблЗнач Цикл
				ЭлементСписка = Новый  Структура(СтрокаКлючей);
				ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
				Результат.Добавить(ЭлементСписка);             
			КонецЦикла;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПреобразоватьСтруктуруВТаблицу(Структура)
		
		ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)); 
				
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Ключ", ОписаниеСтроки);
		Таблица.Колонки.Добавить("Значение", ОписаниеСтроки);
		
		Для каждого Стр Из Структура Цикл
			Строка = Таблица.Добавить();
			Строка.Ключ 	= Стр.Ключ;
			Строка.Значение = Стр.Значение;
		КонецЦикла;
		
		Возврат Таблица;
	
	КонецФункции 	
	&НаСервере
	Функция ЕстьПериферийныеБазы(НаименованиеПланаОбмена)
		
		Если Метаданные.ПланыОбмена.Найти(НаименованиеПланаОбмена) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПланОбмена.Ссылка
		|ИЗ
		|	ПланОбмена."+НаименованиеПланаОбмена+" КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.ПометкаУдаления = ЛОЖЬ";
		Возврат (запрос.Выполнить().Выгрузить().Количество()>1)			   
		
	КонецФункции
	
	&НаСервере
	Процедура ПрисоединитьМассив(МассивПриемник, МассивИсточник)
		
		Для Каждого ЭлементМассива Из МассивИсточник Цикл
			МассивПриемник.Добавить(ЭлементМассива);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСтрокуПоМассиву(Массив)
		
		Результат=	"";
		Для Каждого СтрокаДляВключения Из Массив Цикл
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + СтрокаДляВключения.Ключ;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьИмяКонфигурации()
		Возврат Метаданные.Синоним;
	КонецФункции
	
	&НаСервере
	Функция ПолучитьМаркерКонфигурации(ПринудительныйВыбор = Ложь, ОбработчикВыбора = Неопределено) Экспорт
		
		// { RGS  13.06.2016 23:26:22 - 
		Возврат "БП30";
		// } RGS  13.06.2016 23:26:24 - 
		
		Если (Найти(Метаданные.Синоним, "Управление торговлей") <> 0) И (Найти(Метаданные.Синоним, "редакция 11.")<>0) ИЛИ
			Найти(Метаданные.Синоним, "Управление торговлей и взаимоотношениями с клиентами (CRM), редакция 2.")<>0 Тогда
			Возврат "УТ11";
		ИначеЕсли (Найти(Метаданные.Синоним, "Бухгалтерия") <> 0) и (Найти(Метаданные.Синоним, "предприятия") <> 0) и (Найти(Метаданные.Синоним, "редакция 3.") <> 0) Тогда
			Возврат "БП30";
		ИначеЕсли (Найти(Метаданные.Синоним, "Управление холдингом") <> 0) Тогда
			Возврат "БП30";
		ИначеЕсли Найти(Метаданные.Синоним, "Бухгалтерия государственного учреждения, редакция 2.") <> 0 Тогда
			Возврат "БГУ20";
		ИначеЕсли (Найти(Метаданные.Синоним, "ERP") <> 0)  Тогда
			Возврат "УТ11";
		ИначеЕсли (Найти(Метаданные.Синоним, "Бухгалтерия строительной организации") <> 0) и (Найти(Метаданные.Синоним, "редакция 3.") <> 0) 
			ИЛИ (Найти(Метаданные.Синоним, "1С-Рарус:Учет ценных бумаг") <> 0) и (Найти(Метаданные.Синоним, "редакция 3 для 1С:Бухгалтерии 8") <> 0) Тогда
			Возврат "БП30";
		ИначеЕсли Метаданные.Имя = "КомплекснаяАвтоматизация" И ЛЕВ(Метаданные.Версия, 3) = "2.0" Тогда
			Возврат "УТ11";
		КонецЕсли;
		
		Выборка= ХранилищеОбщихНастроек.Выбрать(Новый Структура("КлючОбъекта, КлючНастроек", "МодульДиадок", "МаркерКонфигурации"));
		Если Выборка.Следующий() Тогда
			
			ЭлементДопустимогоМаркера= ДопустимыеМаркерыКонфигураций().НайтиПоЗначению(Выборка.Настройки);
			
			Если ЭлементДопустимогоМаркера <> Неопределено Тогда
				Возврат ЭлементДопустимогоМаркера.Значение;
			Иначе
				ХранилищеОбщихНастроек.Удалить("МодульДиадок", "МаркерКонфигурации", ИмяПользователя());
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат "";
		
	КонецФункции
	
	&НаСервере
	Функция СформироватьХарактеристикуКонфигурации()Экспорт
		
		Характеристика= Новый Структура();

		Характеристика.Вставить("Конфигурация", ПолучитьМаркерКонфигурации());
		Характеристика.Вставить("ИмяКонфигурации", ПолучитьИмяКонфигурации());
		Характеристика.Вставить("ПрофильКонфигурации", СформироватьПрофильКонфигурации());
		Характеристика.Вставить("ИмяФормыИнтеграции", ИмяФормыИнтеграции());
		Характеристика.Вставить("НастройкиПрокси", ПолучитьНастройкиПрокси());
		
		Возврат Характеристика;
		
	КонецФункции
	
	&НаСервере
	Функция СформироватьПрофильКонфигурации() Экспорт
		
		стПрофильКонфигурации=	Новый Структура;
		
		стПрофильКонфигурации.Вставить("ХранениеНоменклатурыПоставщиков", Новый Структура("Вариант", "Справочник_НоменклатураПоставщиков"));
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			стПрофильКонфигурации.Вставить("Услуги", Новый Структура("Вариант", "ПоПеречислению"));
		Иначе
			стПрофильКонфигурации.Вставить("Услуги", Новый Структура("Вариант", "ПоРеквизиту"));
		КонецЕсли;
		
		стПрофильКонфигурации.Вставить("ЕстьАртикул", НЕ Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул") = Неопределено);
		
		стПрофильКонфигурации.Вставить("ХранениеНастроекПользователей", Новый Структура("Вариант", "1С_УФ"));
		
		стОперацииПоступления = Новый Структура;
		стОперацииПоступления.Вставить("ПоступлениеОборудования",Истина );
		стОперацииПоступления.Вставить("ПоступлениеНМА", Истина);
		
		стПрофильКонфигурации.Вставить("НастройкиПоступления",  стОперацииПоступления);
		
		Возврат стПрофильКонфигурации;
		
	КонецФункции
	
	&НаСервере
	Функция ПроверитьДоступКОбъектам()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		МассивНеобходимыхОбъектов=	ПолучитьНеобходимыеДляРаботыОбъекты();
		Для каждого ОбъектБД Из МассивНеобходимыхОбъектов Цикл
			Если НЕ ПравоДоступа(ОбъектБД.Право, ОбъектБД.Объект) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
				|" + ОбъектБД.Раздел + " " + ОбъектБД.Объект + " - на " + НРег(ОбъектБД.Право);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"Под правами текущего пользователя невозможно получить свойства объектов и их значения.
											|
											|Обратитесь к администраторам и получите доступ к следующим объектам:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПроверитьПраваНаПВХ()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		Для каждого НеобходимыйПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			Если НЕ ПравоДоступа("Добавление", НеобходимыйПВХ) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
									|План видов характеристик: " + НеобходимыйПВХ.Синоним + " - на добавление";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"В модуле добавлены новые свойства, но у вас отсутствуют права на запись их в базу данных.
										|
										|Обратитесь к администраторам или выполните запуск от имени пользователя имеющему следующие права:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НедостающиеСвойстваОбъектов=		ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов);
		НедостающиеНастройкиПользователя= 	ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(НедостающиеСвойстваОбъектов, НедостающиеНастройкиПользователя);
		
		Если НедостающиеСвойстваОбъектов.Количество() <> 0 Тогда
			ВозможныеПланыОбмена = ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов();
			Если НЕ ВозможныеПланыОбмена.Количество() = 0 Тогда
				Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
				Результат.Подробности=		"В периферийной базе данных не проинициализированы свойства объектов. 
											|
											|Необходимо запустить обработку в центральной базе данных, после чего выполнить обмен данными.
											|Выполните обмен по одному из следующих планов обмена:";
											Для каждого ПланОбмена Из ВозможныеПланыОбмена Цикл
												Результат.Подробности = Результат.Подробности + "
												|	" + Строка(ПланОбмена);
											КонецЦикла;
											Результат.Подробности = Результат.Подробности + "
											|
											|Отладочная информация: " + ПолучитьСтрокуПоМассиву(НедостающиеСвойстваОбъектов);
				
				Результат.Отказ=	Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НаличиеПравНаПВХ=	ПроверитьПраваНаПВХ();
		Если НаличиеПравНаПВХ.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, НаличиеПравНаПВХ);
			Возврат Результат;
		КонецЕсли;
		
		ЗафиксированаРеструктуризация=	Ложь;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			РезультатОбработкиСвойств=	ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация);
			Если РезультатОбработкиСвойств.Отказ = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатОбработкиСвойств);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		РезультатРеструктуризации=	ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация);
		Если РезультатРеструктуризации.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатРеструктуризации);
			Возврат Результат;
		КонецЕсли;
		
		РезультатСозданияСвойств=	СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация);
		Если РезультатСозданияСвойств.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатСозданияСвойств);
			Возврат Результат;
		КонецЕсли;
		
		Если ЗафиксированаРеструктуризация = Истина 
			И НЕ ЭтоПериферийнаяБД()
			И (ЕстьПериферийныеБазы("Полный") ИЛИ ЕстьПериферийныеБазы("ПоОрганизации")) Тогда
			
			Результат.ОписаниеОшибки=	"Ошибка реструктуризации свойств объектов";
			Результат.Подробности=		"В конфигурации проинициализированы свойства объектов, необходимые для работы с системой "+ МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы +".
										|Для корректной работы в периферийной базе данных выполните обмен данными.";
			Результат.Отказ=			Истина;
			
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПроверитьИнициализациюСвойствПВХ()
		
		Результат=		Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ВозможныеНастройкиПользователя=	ПолучитьВозможныеНастройкиПользователя();
		ВозможныеСвойстваОбъектов=		ПолучитьВозможныеСвойстваОбъектов();
		СтарыеСвойстваОбъектовИз20=		ПолучитьСтарыеСвойстваОбъектовИз20();
		Если ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20) = Истина Тогда
			
			Если ЭтоПериферийнаяБД() Тогда
				РезультатПроверкиИнициализацииВУзле=	ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя);
				Если РезультатПроверкиИнициализацииВУзле.Отказ = Истина Тогда
					ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииВУзле);
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			РезультатИнициализации=	ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20);
			ЗаполнитьЗначенияСвойств(Результат, РезультатИнициализации);
				
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПодготовкаКонфигурацииКРаботе() Экспорт
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		РезультатПроверкиДоступаКОбъектам=	ПроверитьДоступКОбъектам();
		Если РезультатПроверкиДоступаКОбъектам.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиДоступаКОбъектам);
			Возврат Результат;
		КонецЕсли;
		
		РезультатПроверкиИнициализацииСвойствПВХ=	ПроверитьИнициализациюСвойствПВХ();
		Если РезультатПроверкиИнициализацииСвойствПВХ.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииСвойствПВХ);
			Возврат Результат;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ЭтоПериферийнаяБД()
		
		Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьТекущегоПользователя()  Экспорт
		
		ТекущийПользователь = Неопределено;
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Выполнить("ТекущийПользователь =  ПользователиКлиентСервер.ТекущийПользователь()");;
		Иначе 
			Выполнить("ТекущийПользователь =  Пользователи.ТекущийПользователь()");
		КонецЕсли;	
		
		Возврат ТекущийПользователь;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНеобходимыеДляРаботыОбъекты()
		
		МассивНеобходимыхОбъектов=	Новый Массив();
		
		Для каждого РегистрСведений Из ПолучитьНеобходимыеДляРаботыРегистры() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Регистр сведений:", РегистрСведений, "Изменение"));
		КонецЦикла;
		
		Для каждого ПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Планы видов характеристик:", ПВХ, "Чтение"));
		КонецЦикла;
		
		Возврат МассивНеобходимыхОбъектов;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНеобходимыеДляРаботыПВХ() Экспорт
		НеобходимыеДляРаботыПВХ = Новый Массив;
		НеобходимыеДляРаботыПВХ.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
		Возврат НеобходимыеДляРаботыПВХ;
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНеобходимыеДляРаботыРегистры() Экспорт
		НеобходимыеДляРаботыРегистры = Новый Массив;
		НеобходимыеДляРаботыРегистры.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
		Возврат НеобходимыеДляРаботыРегистры;
	КонецФункции
	
	&НаСервере
	Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
		
		КлючУникальности   = Новый УникальныйИдентификатор;
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
		
		Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
		
	КонецФункции
	
	&НаСервере
	Функция ЕстьРеквизитыИлиСвойстваОбъекта(Объект, КоллекцияИменРеквизитов) Экспорт
		
		СтруктураРеквизитов= Новый Структура;
		КлючУникальности= 	 Новый УникальныйИдентификатор;
		
		Если ТипЗнч(КоллекцияИменРеквизитов) = Тип("Массив") Тогда
			
			Для Каждого ИмяРеквизита ИЗ КоллекцияИменРеквизитов Цикл
				СтруктураРеквизитов.Вставить(ИмяРеквизита, КлючУникальности);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
			
			ОбратныйИндекс= КоллекцияИменРеквизитов.ВГраница();
			Пока ОбратныйИндекс > -1 Цикл
				Если СтруктураРеквизитов[КоллекцияИменРеквизитов[ОбратныйИндекс]] = КлючУникальности Тогда
					КоллекцияИменРеквизитов.Удалить(ОбратныйИндекс);
				КонецЕсли;
				ОбратныйИндекс= ОбратныйИндекс - 1;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(КоллекцияИменРеквизитов) = Тип("Структура") Тогда
			
			Для Каждого КлючИЗначение ИЗ КоллекцияИменРеквизитов Цикл
				СтруктураРеквизитов.Вставить(КлючИЗначение.Ключ, КлючУникальности);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
			
			Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
				Если КлючИЗначение.Значение = КлючУникальности Тогда
					КоллекцияИменРеквизитов.Удалить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат КоллекцияИменРеквизитов.Количество() > 0;
		
	КонецФункции
	
	Функция ТаблицаЗначений_2_МассивСтруктур(ТаблицаЗначений) Экспорт
		
		КоличествоСтрок= ТаблицаЗначений.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		МассивСтруктур= Новый Массив(КоличествоСтрок);
		
		СтрокаКлючей= "";
		Разделитель=  "";
		Для Каждого Колонка из ТаблицаЗначений.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей + Разделитель + Колонка.Имя;
			Разделитель= ", ";
		КонецЦикла;                                                        
		
		Для ИндексЦикла= 0 ПО КоличествоСтрок-1 Цикл
		
			МассивСтруктур[ИндексЦикла]= Новый Структура(СтрокаКлючей);
			ЗаполнитьЗначенияСвойств(МассивСтруктур[ИндексЦикла], ТаблицаЗначений[ИндексЦикла]);
			
		КонецЦикла;
		
		Возврат МассивСтруктур;
		
	КонецФункции
	
	
	Функция ПоместитьИнтеграционныйМодульВДополнительныеОбработки() Экспорт
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		СтруктураДанные = ЗаполнитьДанныеОПомещаемомМодуле();
		ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Истина;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка,
		|	ВЫБОР
		|		КОГДА Т.Версия = &ВерсияОбработки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТекущаяВерсия
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
		|ГДЕ
		|	Т.ИмяОбъекта = &ИмяОбъекта
		|	И Т.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И НЕ Т.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ИмяОбъекта"	   , СтруктураДанные.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВерсияОбработки", СтруктураДанные.ВерсияОбработки);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоТекущаяВерсия Тогда
				ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Ложь;
			Иначе
				
				ДополнительнаяОбработкаОбъект= Выборка.Ссылка.ПолучитьОбъект();
				ДополнительнаяОбработкаОбъект.Публикация= ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена");
				
				Попытка
					ДополнительнаяОбработкаОбъект.Записать();
				Исключение
					Результат.Отказ= Истина;
					Результат.ОписаниеОшибки= "Ошибка записи отключения старого интеграционного модуля в справочнике дополнительных обработок!";
					Результат.Подробности= ОписаниеОшибки();
					Возврат Результат;
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ПоместитьИнтеграционныйМодульВДополнительныеОбработки Тогда
			СоздатьНовыйЭлементДополнительныеОбработки(СтруктураДанные, Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЗаполнитьДанныеОПомещаемомМодуле() Экспорт
		
		СтруктураДанные = Новый Структура("АдресОбработки, НаименованиеОбработки, ВерсияОбработки, ИмяОбъекта, ИмяФайла, НаименованиеСистемы");
		
		НаименованиеСистемы 				= МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
		СтруктураДанные.НаименованиеСистемы	= НаименованиеСистемы;
		
		НаименованиеИнтеграционногоМодуля 		= "Модуль работы с электронными первичными документами через " + НаименованиеСистемы;
		СтруктураДанные.НаименованиеОбработки 	= НаименованиеИнтеграционногоМодуля;
		
		
		ВерсияОбработкиДиадок 			= МетодСервера(,"ВерсияОбработкиДиадокСервер");
		ВерсияОбработкиДиадок 			= СтрЗаменить(ВерсияОбработкиДиадок, "_", ".");
		СтруктураДанные.ВерсияОбработки = ВерсияОбработкиДиадок;
		
		
		ОбработкаОбъектСтрокой 		= Строка(ЭтотОбъект);
		ИмяОбъекта 					= Сред(ОбработкаОбъектСтрокой, Найти(ОбработкаОбъектСтрокой, "ВнешняяОбработкаОбъект.")+23, СтрДлина(ОбработкаОбъектСтрокой));
		СтруктураДанные.ИмяОбъекта 	= ИмяОбъекта;
		
		АдресОбработки 					= Вычислить("ИспользуемоеИмяФайла");
		СтруктураДанные.АдресОбработки 	= АдресОбработки;
		
		МассивСтрок 				= МетодСервера(,"ПреобразоватьСтрокуВМассивПодстрок", АдресОбработки, "\");
		ПоследнийЭлементМассива 	= МассивСтрок.ВГраница();
		ИмяФайлаОбработки 			= МассивСтрок[ПоследнийЭлементМассива];
		СтруктураДанные.ИмяФайла 	= ИмяФайлаОбработки;
		
		
		Возврат СтруктураДанные; 
		
	КонецФункции
	
	Процедура СоздатьНовыйЭлементДополнительныеОбработки(ДанныеДляЗаполнения, Результат) Экспорт
		
		НоваяВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		
		НоваяВнешняяОбработка.Наименование		= ДанныеДляЗаполнения.НаименованиеОбработки;
	
		НоваяВнешняяОбработка.БезопасныйРежим 	= Ложь;
		НоваяВнешняяОбработка.Версия 			= ДанныеДляЗаполнения.ВерсияОбработки;
		НоваяВнешняяОбработка.Вид				= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		НоваяВнешняяОбработка.ИмяОбъекта		= ДанныеДляЗаполнения.ИмяОбъекта;
		НоваяВнешняяОбработка.ИмяФайла			= ДанныеДляЗаполнения.ИмяФайла;
		НоваяВнешняяОбработка.Информация		= "Дополнительная внешняя обработка для работы с ЭДО через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяВнешняяОбработка.Публикация		= Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	
		ТЧКоманды = НоваяВнешняяОбработка.Команды;
	
		НоваяКоманда = ТЧКоманды.Добавить();
	
		НоваяКоманда.Идентификатор 			= "Форма_Основная";
		НоваяКоманда.ВариантЗапуска 		= Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		НоваяКоманда.Представление 			= "Открыть модуль работы с электронными первичными документами через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяКоманда.ПоказыватьОповещение 	= Ложь;
		НоваяКоманда.Модификатор			= "";
	
		НоваяВнешняяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ДанныеДляЗаполнения.АдресОбработки));
	
		Попытка
			НоваяВнешняяОбработка.Записать();
			Результат.ОписаниеОшибки= "Интеграционный модуль помещен в справочник дополнительных обработок.";
		Исключение
			Результат.Отказ= Истина;
			Результат.ОписаниеОшибки= "Ошибка записи интеграционного модуля в справочник дополнительных обработок!";
			Результат.Подробности= ОписаниеОшибки();
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция ИмяТипаОбъекта(ОбъектСсылка) Экспорт
		
		XMLТип= XMLТипЗнч(ОбъектСсылка);
		
		Если XMLТип = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		НачальнаяПозиция= Найти(XMLТип.ИмяТипа, ".");
		Если НачальнаяПозиция > 0 Тогда
			НачальнаяПозиция= НачальнаяПозиция + 1;
		КонецЕсли;
		
		Возврат Сред(XMLТип.ИмяТипа, НачальнаяПозиция);
		
	КонецФункции
	
	Функция СуществуетОбъектМетаданных(ПолноеИмяОбъекта) Экспорт
		
		Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) <> Неопределено;
		
	КонецФункции
	
	Функция СсылкаСуществует(Ссылка) Экспорт
		
		Запрос= Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ "+Ссылка.Метаданные().ПолноеИмя()+" ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции
	
	Функция СравнитьВерсии(Знач ПерваяВерсия, Знач ВтораяВерсия) Экспорт
		
		Пока НЕ ПустаяСтрока(ПерваяВерсия) ИЛИ НЕ ПустаяСтрока(ВтораяВерсия) Цикл
			
			ПозицияРазделителя= Найти(ПерваяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерПервойВерсии= Число(Лев(ПерваяВерсия, ПозицияРазделителя-1));
				ПерваяВерсия= Сред(ПерваяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерПервойВерсии= Число(?(ПустаяСтрока(ПерваяВерсия), 0, ПерваяВерсия));
				ПерваяВерсия= "";
			КонецЕсли;
			
			ПозицияРазделителя= Найти(ВтораяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерВторойВерсии=	Число(Лев(ВтораяВерсия, ПозицияРазделителя-1));
				ВтораяВерсия= Сред(ВтораяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерВторойВерсии= Число(?(ПустаяСтрока(ВтораяВерсия), 0, ВтораяВерсия));
				ВтораяВерсия= "";
			КонецЕсли;
			
			Если НомерПервойВерсии > НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияСтарше";
			ИначеЕсли НомерПервойВерсии < НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияМладше";
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ПерваяВерсия) И ПустаяСтрока(ВтораяВерсия) Тогда
			Возврат "ВерсииРавны";
		ИначеЕсли ПустаяСтрока(ВтораяВерсия) Тогда
			Возврат "ПерваяВерсияСтарше";
		Иначе
			Возврат "ПерваяВерсияМладше";
		КонецЕсли;
		
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{ ИНТЕГРАЦИЯ
	
	&НаСервере
	функция ИмяФормыИнтеграции() Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Возврат "Модуль_ИнтеграцияБП30";
		ИначеЕсли 	ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Возврат "Модуль_ИнтеграцияУТ11";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Возврат "Модуль_ИнтеграцияБГУ20";
		КонецЕсли;
		
	конецфункции 
	
	&НаСервере
	функция СформироватьТитулПолучателяДляТорг12(ПараметрыТитулаПолучателя) Экспорт
		
		Torg12BuyerTitleInfo=	Новый Соответствие;
		Torg12BuyerTitleInfo.Вставить("ShipmentReceiptDate", Формат(ПараметрыТитулаПолучателя.ДатаПолученияГруза, "ДФ=dd.MM.yyyy"));
		
		ПараметрыПодписания=	Новый Структура;
		ПараметрыПодписания.Вставить("ФиоПодписанта", ПараметрыТитулаПолучателя.ФИО);
		ПараметрыПодписания.Вставить("ДолжностьПодписанта", ПараметрыТитулаПолучателя.Должность);
		
		Torg12BuyerTitleInfo.Вставить("ReceivedBy",     ПредставлениеВизирующего(ПараметрыПодписания));
		
		Signer=	Новый Соответствие;
		Signer.Вставить("SignerDetails", ПредставлениеВизирующего(ПараметрыПодписания,  ПараметрыТитулаПолучателя.ИНН));
		Torg12BuyerTitleInfo.Вставить("Signer", Signer);
		
		Возврат  Torg12BuyerTitleInfo;
		
	КонецФункции	
	
	&НаСервере
	Функция СформироватьТитулПолучателяДляАкта(ПараметрыТитулаПолучателя) Экспорт 
		
		AcceptanceCertificateBuyerTitleInfo=	Новый Соответствие;
		
		ПараметрыПодписания=	Новый Структура;
		ПараметрыПодписания.Вставить("ФиоПодписанта", ПараметрыТитулаПолучателя.ФИО);
		ПараметрыПодписания.Вставить("ДолжностьПодписанта", ПараметрыТитулаПолучателя.Должность);
		
		AcceptanceCertificateSignatureInfo=	Новый Соответствие;
		AcceptanceCertificateSignatureInfo.Вставить("Official",    ПредставлениеВизирующего(ПараметрыПодписания));
		AcceptanceCertificateBuyerTitleInfo.Вставить("Signature",   AcceptanceCertificateSignatureInfo );
		
		Signer=	Новый Соответствие;
		Signer.Вставить("SignerDetails",  ПредставлениеВизирующего(ПараметрыПодписания,  ПараметрыТитулаПолучателя.ИНН));
		AcceptanceCertificateBuyerTitleInfo.Вставить("Signer",Signer);
		
		Возврат    AcceptanceCertificateBuyerTitleInfo;
		
	КонецФункции 
	
	&НаСервере
	функция  ПредставлениеВизирующего(ПараметрыПодписания, ИНН = Неопределено) Экспорт
		
		ФИО=		ПараметрыПодписания.ФиоПодписанта;
		
		Official=	Новый Структура;
		Official.Вставить("Surname", ВыделитьСлово(Фио));
		Official.Вставить("FirstName", ВыделитьСлово(фио));
		Official.Вставить("Patronymic", ВыделитьСлово(фио));
		
		Official.Вставить("JobTitle" , ПараметрыПодписания.ДолжностьПодписанта);
		Если НЕ ИНН = Неопределено Тогда
			Official.Вставить("Inn" , ИНН);
		КонецЕсли;	
		
		Возврат   Official;
		
	КонецФункции 
	
	&НаСервере
	Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт
		
		стПрофильКонфигурации=	СформироватьПрофильКонфигурации();
		Если стПрофильКонфигурации.Услуги.Вариант = "ПоРеквизиту" Тогда
			Если НЕ Номенклатура.ПолучитьОбъект().Метаданные().Реквизиты.Найти("Услуга") = Неопределено Тогда
				Возврат Номенклатура.Услуга;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли стПрофильКонфигурации.Услуги.Вариант = "ПоПеречислению" Тогда
			Возврат ?(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"), Истина, Ложь);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ВыбратьОсновноеСоглашениеКонтрагента(Контрагент, Организация) Экспорт
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СоглашенияСПоставщиками.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Партнер = &Партнер
		|	И СоглашенияСПоставщиками.Контрагент = &Контрагент
		|	И СоглашенияСПоставщиками.Организация = &Организация";
		Запрос.УстановитьПараметр("Партнер", Контрагент.Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	&НаСервере
	Функция ВыбратьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
		
		Запрос= Новый Запрос; 
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка КАК Договор,
			|	ВЫБОР
			|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетДоговора
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ДоговорыКонтрагентов.Контрагент = Контрагенты.Ссылка
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Владелец
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ТипДоговора В(&СписокДоговоров)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетДоговора";
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") = Неопределено Тогда	//начиная с 3.0.43.29 рекизит удален, вместо него ввели регистр сведений
				Запрос.Текст = "ВЫБРАТЬ                                                                                         
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА ОсновныеДоговорыКонтрагентов.Договор ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагентов
					|		ПО ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагентов.Контрагент
					|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагентов.Договор
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|  	
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
			Иначе
				
				Запрос.Текст = "ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
					|			И ДоговорыКонтрагентов.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
				
			КонецЕсли;
									
		Иначе	
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка КАК Договор,
			|	ВЫБОР
			|		КОГДА СпрКонтрагенты.Ссылка ЕСТЬ НЕ NULL 
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетДоговора
			|ИЗ
			|	Справочник.Договоры КАК ДоговорыКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
			|		ПО ДоговорыКонтрагентов.Контрагент = СпрКонтрагенты.Ссылка
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Владелец
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетДоговора";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СписокДоговоров", СписокВидовДоговоров);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	&НаСервере
	Функция ОбновитьДанныеДокумента(ДокументСсылка, DocumentDate, DocumentNumber) Экспорт
		
		Результат=	Новый Структура("ДанныеОбновлены, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ИзмененыДатаИНомер=		Ложь;
		ИзмененыМеткиПолучения=	Ложь;
		КраткоеНаименованиеСистемыРодительныйПадеж = МетодСервера(,"ПолучитьСловарь").КраткоеНаименованиеСистемыРодительныйПадеж;
		
		Если НЕ Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер=			ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки=	"Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеДопРасходов") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер=			ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки=	"Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеУслугПрочихАктивов") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			Если НЕ НачалоДня(ДокументСсылка.ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер=			ОбновитьМеткиДокумента(ДокументСсылка, "ДатаВходящегоДокумента", "НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки=	"Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПоступлениеМЗ") = Неопределено
			И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеМЗ") Тогда
			Если НЕ НачалоДня(ДокументСсылка.ДатаПервичногоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(ДокументСсылка.НомерПервичногоДокумента) = СокрЛП(DocumentNumber) Тогда
				ИзмененыДатаИНомер=			ОбновитьМеткиДокумента(ДокументСсылка, "ДатаПервичногоДокумента", "НомерПервичногоДокумента", DocumentDate, DocumentNumber);
				Если НЕ ИзмененыДатаИНомер Тогда
					Результат.ОписаниеОшибки=	"Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
				КонецЕсли;			
			КонецЕсли;
		ИначеЕсли  ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.Дата;
				НомерВходящегоДокумента=	ДокументСсылка.Номер;
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.ДатаВходящегоДокумента;
				НомерВходящегоДокумента=	ДокументСсылка.НомерВходящегоДокумента;
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДатаВходящегоДокумента=		ДокументСсылка.ДатаПервичногоДокумента;
				НомерВходящегоДокумента=	ДокументСсылка.НомерПервичногоДокумента;
			КонецЕсли;
			
			Если НЕ НачалоДня(ДатаВходящегоДокумента) = НачалоДня(DocumentDate) ИЛИ НЕ СокрЛП(НомерВходящегоДокумента) = СокрЛП(DocumentNumber) Тогда
				Результат.ОписаниеОшибки=	"Входящий номер или дата в документе 1С не совпадают с номером или датой сопоставляемого документа из "+КраткоеНаименованиеСистемыРодительныйПадеж+"!";
			КонецЕсли;
			ИзмененыМеткиПолучения=	ОбновитьМеткуПолученияВЭлектронномВиде(ДокументСсылка);
		КонецЕсли;
		
		Результат.ДанныеОбновлены=	(ИзмененыДатаИНомер ИЛИ ИзмененыМеткиПолучения);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ОбновитьМеткиДокумента(ДокументСсылка, РеквизитДата, РеквизитНомер, DocumentDate, DocumentNumber) Экспорт
		
		ВсеОк=	Ложь;
		
		Попытка
			ДокументОбъект=					ДокументСсылка.ПолучитьОбъект();
			
			ДокументОбъект[РеквизитДата]=	DocumentDate;
			ДокументОбъект[РеквизитНомер]= 	DocumentNumber;
			ДокументОбъект.Записать();
			
			ТекстСообщения=	"";
			ВсеОк=	Истина;
		Исключение
			ТекстСообщения=	"Не удалось изменить реквизиты: номер и дата входящего документа у документа: " + ДокументСсылка + Символы.ПС + ОписаниеОшибки();
			ВсеОк=	Ложь;
		КонецПопытки;
		
		Если НЕ ТекстСообщения = "" Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	ТекстСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Возврат ВсеОк;
		
	КонецФункции
	
	&НаСервере
	Функция ОбновитьМеткуПолученияВЭлектронномВиде(СчетФактура) Экспорт
		
		ВсеОк=				Ложь;
		ЗаписатьДокумент=	Ложь;
		
		ОбъектСФ=	СчетФактура.ПолучитьОбъект();
		//УТ
		Если НЕ ОбъектСФ.Метаданные().Реквизиты.Найти("ПолученВЭлектронномВиде") = Неопределено тогда
			Если ОбъектСФ.ПолученВЭлектронномВиде = Ложь Тогда
				ОбъектСФ.ПолученВЭлектронномВиде=	Истина;
				ЗаписатьДокумент=					Истина;
			КонецЕсли;
			//БП
		ИначеЕсли НЕ ОбъектСФ.Метаданные().Реквизиты.Найти("КодСпособаПолучения") = Неопределено тогда 
			Если НЕ ОбъектСФ.КодСпособаПолучения = 2 Тогда
				ОбъектСФ.КодСпособаПолучения=	2;
				ЗаписатьДокумент=				Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьДокумент Тогда
			
			Попытка
				Если ОбъектСФ.Проведен Тогда
					ОбъектСФ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ОбъектСФ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				ТекстСообщения=	"";
				ВсеОк=			Истина;
			Исключение
				ТекстСообщения=	"Не удалось изменить реквизит документа: ""Получен в электронном виде"" у документа" + СчетФактура + Символы.ПС + ОписаниеОшибки();
				ВсеОк=			Ложь;
			КонецПопытки;
			
			Если НЕ ТекстСообщения = "" Тогда
				СообщениеПользователю=			Новый СообщениеПользователю;
				СообщениеПользователю.Текст=	ТекстСообщения;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
			Возврат ВсеОк;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если TaxRate = "10" Тогда
				Возврат Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли TaxRate = "18" Тогда
				Возврат Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли TaxRate = "0" Тогда
				Возврат Перечисления.СтавкиНДС.НДС0;
			КонецЕсли;
			
		Иначе
			
			Если TaxRate = "10" Тогда
				Возврат Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли TaxRate = "18" Тогда
				Возврат Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли TaxRate = "0" Тогда
				Возврат Перечисления.СтавкиНДС.НДС0;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Наименование = &Наименование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Код = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)");
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеЕИ);
			Запрос.УстановитьПараметр("Код", КодЕИ);
			
			Если Метаданные.Имя = "КомплекснаяАвтоматизация" ИЛИ Лев(Метаданные.Версия, 4) = "11.2" Тогда
				Запрос.Текст= СтрЗаменить(Запрос.Текст, "Справочник.ЕдиницыИзмерения", "Справочник.УпаковкиЕдиницыИзмерения");
			КонецЕсли;
				
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
			
		Иначе
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Наименование", НаименованиеЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Код", КодЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСписокВидовДоговоров(ДоговораПродажи = ложь) Экспорт
		
		//Закладка делал вид операции
		СписокВидовДоговоров=	Новый СписокЗначений;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"), "С поставщиком");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"), "С комитентом");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"), "С комиссионером");
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			если ДоговораПродажи тогда 
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"), "С покупателем");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"), "С комиссионером (агентом) на продажу");
			//	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"), "С комиссионером (агентом) на закупку");
			Иначе 	
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"), "С комитентом (принципалом) на продажу");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"), "С комиссионером (агентом) на закупку");
			КонецЕсли;	
		Иначе
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
		КонецЕсли;
		
		Возврат	СписокВидовДоговоров;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСписокАссоциированныхКонтрагентовДиадок() Экспорт 
		
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ  различные
		|	ДополнительныеСведения.Объект как Контрагент
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект  ССЫЛКА Справочник.Контрагенты
		|	И ДополнительныеСведения.Значение <> """"
		|	И ПОДСТРОКА(ДополнительныеСведения.Свойство.Наименование, 1, " 
		+ СтрДлина(ИдентификаторСвойстваЯщикКонтрагентаПрефикс()) 
		+ ") = &НаименованиеСвойстваПрефикс";
		Запрос.УстановитьПараметр("НаименованиеСвойстваПрефикс", ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		сп = новый СписокЗначений;
		сп.ЗагрузитьЗначения(мас);
		
		Возврат сп;
		
	КонецФункции
	
//} ИНТЕГРАЦИЯ

//{ УПРАВЛЕНИЕ НАСТРОЙКАМИ
	
	&НаСервере
	Функция ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов()
		
		НеобходимыеДляРаботыПВХ = ПолучитьНеобходимыеДляРаботыПВХ();
		
		ВозможныеПланыОбмена = Новый Массив;
		Для каждого ПланОбмена Из ПланыОбмена Цикл
			ПланОбменаСодержитВсеНеобходимыеТипы = Истина;
			Для каждого необходимыйТип Из НеобходимыеДляРаботыПВХ Цикл
				Если НЕ планОбмена.ПолучитьСсылку().Метаданные().Состав.Содержит(необходимыйТип) Тогда
					ПланОбменаСодержитВсеНеобходимыеТипы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПланОбменаСодержитВсеНеобходимыеТипы Тогда
				ВозможныеПланыОбмена.Добавить(ПланОбмена);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВозможныеПланыОбмена;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНастройкиПользователя(МассивНаименованийНастроек)  Экспорт
		
		//На входе массив
		Результат = Новый Структура;
		Для Каждого Наименование из МассивНаименованийНастроек Цикл
			Настройка = ПолучитьНастройкуПользователя(Наименование);
			Результат.Вставить(Наименование, Настройка);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНастройкуПользователя(Наименование) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			Возврат Неопределено;
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если МЗ.Выбран() Тогда
			Возврат МЗ.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция УстановитьНастройкиПользователей(СтруктураНастроек) Экспорт
		
		Для Каждого Стр из СтруктураНастроек Цикл
			УстановитьНастройкуПользователя(Стр.Ключ, Стр.Значение);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьНастройкуПользователя(Наименование, Значение) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			
			Если ПустаяСтрока(Значение) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись настройки пользователя:""" + Наименование + """ невозможна. Настройка не создана";
			
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если НЕ МЗ.Выбран() Тогда
			МЗ.Объект = ПолучитьТекущегоПользователя();
			МЗ.Свойство = НастройкаСсылка;
		КонецЕсли;
		МЗ.Значение = Значение;
		МЗ.Записать();
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя) Экспорт
		
		НенайденныеНастройки = Новый Массив;
		Для каждого ОписаниеНастройки Из ВозможныеНастройкиПользователя Цикл
			Если НайтиСвойство(ОписаниеНастройки.Ключ) = Неопределено Тогда
				НенайденныеНастройки.Добавить(ОписаниеНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Возврат НенайденныеНастройки;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьМЗНастройкиПОльзователя(Пользователь, НастройкаСсылка)
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Пользователь;
		МЗ.Свойство = НастройкаСсылка;
		МЗ.Прочитать();
		
		Возврат МЗ;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок()   Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		ГруппаНастроекСсылка= планыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы));
		
		Если ЗначениеЗаполнено(ГруппаНастроекСсылка) Тогда 
			Возврат ГруппаНастроекСсылка;
		КонецЕсли;
		
		ГруппаНастроекОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьГруппу();
		ГруппаНастроекОбъект.Наименование =  "Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы);
		ГруппаНастроекОбъект.УстановитьНовыйКод();
		ГруппаНастроекОбъект.Записать();
		
		Возврат ГруппаНастроекОбъект.Ссылка;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьНастройкиПрокси() Экспорт
		
		МассивНаименованийНастроек= Новый Массив;
		МассивНаименованийНастроек.Добавить("ДиадокНастройкиПрокси");
		МассивНаименованийНастроек.Добавить("ДиадокАдресПроксиСервера");
		МассивНаименованийНастроек.Добавить("ДиадокПользовательПроксиСервера");
		МассивНаименованийНастроек.Добавить("ДиадокПарольПроксиСервера");
		
		НастройкиПрокси= ПолучитьНастройкиПользователя(МассивНаименованийНастроек);
		
		Возврат Новый Структура("ВариантИспользования, Адрес, Логин, Пароль",
		?(ЗначениеЗаполнено(НастройкиПрокси.ДиадокНастройкиПрокси), НастройкиПрокси.ДиадокНастройкиПрокси, "ИспользоватьНастройкиIE"),
		НастройкиПрокси.ДиадокАдресПроксиСервера,
		НастройкиПрокси.ДиадокПользовательПроксиСервера,
		НастройкиПрокси.ДиадокПарольПроксиСервера);
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьНастройкиПрокси(НастройкиПрокси) Экспорт
		
		УстановитьНастройкуПользователя("ДиадокНастройкиПрокси", НастройкиПрокси.ВариантИспользования);
		
		Если НастройкиПрокси.ВариантИспользования = "ИспользоватьПроксиСервер" Тогда
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера", 		НастройкиПрокси.Адрес);
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", 	НастройкиПрокси.Логин);
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера", 		НастройкиПрокси.Пароль);
		Иначе 
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера"		 , "");
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", "");
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера"		 , "");
		КонецЕсли;
		
	КонецПроцедуры	
	
//} УПРАВЛЕНИЕ НАСТРОЙКАМИ

//{ УПРАВЛЕНИЕ СВОЙСТВАМИ
	
	&НаСервере
	функция ПолучитьНазначениеСвойстваСтрокой(СвойствоСтрокой)
		Назначение =   ПолучитьВозможныеСвойстваОбъектов()[СвойствоСтрокой];
		
		если (назначение = неопределено) и (найти(СвойствоСтрокой, "ДДНомКонтр_") = 0 ) тогда
			вызватьИсключение("Неизвестное свойство объекта "+СвойствоСтрокой);
		КонецЕсли;
		
		возврат Назначение;
	КонецФункции	

	&НаСервере
	Функция СвойстваОбъектов_НайтиОбъектыПоТЗ(ТаблицаПараметров) Экспорт
		//на входе  массив структур
		Результат = Новый Массив;
		
		Сч = 0;
		Пока Сч < ТаблицаПараметров.Количество() Цикл
			Стр = ТаблицаПараметров[Сч];
			Если ПустаяСтрока(Стр.НаименованиеСвойства) ИЛИ ПустаяСтрока(Стр.НаименованиеСвойства2) Тогда
				ТаблицаПараметров.Удалить(Стр);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.НаименованиеСвойства КАК НаименованиеСвойства,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ТаблицаПараметров.НаименованиеСвойства2 КАК НаименованиеСвойства2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ НаименованияИЗначенияСвойств
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеСвойства2,
		|	НаименованиеСвойства2,
		|	ЗначениеСвойства,
		|	НаименованиеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоСсылка,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ДополнительныеРеквизитыИСведения2.Ссылка КАК СвойствоСсылка2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ СсылкиНаСвойстваИЗначенияСвойств
		|ИЗ
		|	НаименованияИЗначенияСвойств КАК ТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаПараметров.НаименованиеСвойства = ДополнительныеРеквизитыИСведения.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения2
		|		ПО ТаблицаПараметров.НаименованиеСвойства2 = ДополнительныеРеквизитыИСведения2.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СвойствоСсылка,
		|	ЗначениеСвойства2,
		|	СвойствоСсылка2,
		|	ЗначениеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству1
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству2
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка2 = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства2 = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыПоСвойству1.Объект
		|ИЗ
		|	ОбъектыПоСвойству1 КАК ОбъектыПоСвойству1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыПоСвойству2 КАК ОбъектыПоСвойству2
		|		ПО ОбъектыПоСвойству1.Объект = ОбъектыПоСвойству2.Объект";
		
		Запрос.УстановитьПараметр("ТаблицаПараметров",ТаблицаПараметров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Объект);
		КонецЦикла;

		Возврат Результат;
	КонецФункции
	
	&НаСервере
	Функция СвойстваОбъектов_НайтиОбъект(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2=неопределено, ЗначениеСвойства2=неопределено) Экспорт
		Если ЗначениеЗаполнено(НаименованиеСвойства2) тогда 
			Возврат НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
		Иначе 
			Возврат НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
		КонецЕсли;
	КонецФункции

	&НаСервере
	Функция СвойстваОбъектов_НайтиМассивОбъектов(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2 = неопределено, ЗначениеСвойства2 = неопределено) Экспорт
		
		Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
		Иначе 
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция НайтиОбъект(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено) Экспорт
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Следующий(), Выборка.Объект, Неопределено);
	КонецФункции
	
	&НаСервере
	Функция НайтиМассивОбъектов(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = неопределено ,ЗначениеСвойства2 = Неопределено) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
		КонецЕсли;
		
		ТаблицаДанных= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаДанных.ВыгрузитьКолонку("Объект");
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваФормироватьСчетНаОсновании());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Число") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "СЧЕТНАОПЛАТУ" Тогда
							МЗ.Значение=	0;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "РЕАЛИЗАЦИЯТОВАРОВ" Тогда
							МЗ.Значение=	1;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "НЕФОРМИРОВАТЬ" Тогда
							МЗ.Значение=	2;
						КонецЕсли;
					Иначе
						МЗ.Значение=	0;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьПравильноеЗначениеСвойстваОтправлятьНеПроведенные(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваОтправлятьНеПроведенные());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Булево") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "ДА" Тогда
							МЗ.Значение=	Истина;
						Иначе
							МЗ.Значение=	Ложь;
						КонецЕсли;
					Иначе
						МЗ.Значение=	Ложь;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МЗ.Объект=		ЗаписьНабора.Объект;
				МЗ.Свойство=	ЗаписьНабора.Свойство;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаписьНабора.Значение));
					Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
						МЗ.Значение=	"";
						МЗ.Записать();
						МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					КонецЕсли;
					
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					МЗ.Значение=	"";
					МЗ.Записать();
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МЗ.Объект=		ЗаписьНабора.Объект;
				МЗ.Свойство=	ЗаписьНабора.Свойство;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаписьНабора.Значение));
					Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
						МЗ.Значение=	"";
						МЗ.Записать();
						МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					КонецЕсли;
					
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					МЗ.Значение=	"";
					МЗ.Записать();
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = "") Экспорт
		Если НЕ ЗначениеЗаполнено(Объект) ИЛИ ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МЗ = ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка);
		Если МЗ.Выбран() Тогда
			Возврат МЗ.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции

	&НаСервере
	Функция ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка)ЭКспорт
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Объект;
		МЗ.Свойство = СвойствоСсылка;
		МЗ.Прочитать();
		
		Возврат МЗ;
		
	КонецФункции

	&НаСервере
	Функция НайтиПодобныеСвойства(Наименование) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Свойства.Ссылка Свойство
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
			|ГДЕ
			|	Свойства.Наименование ПОДОБНО &ПодобноеНаименованиеСвойства
			|	И НЕ Свойства.Наименование = &НаименованиеСвойства";
		
		Запрос.УстановитьПараметр("ПодобноеНаименованиеСвойства", Наименование + " (%)");
		Запрос.УстановитьПараметр("НаименованиеСвойства", Наименование);
		ТаблицаСвойств= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаСвойств;
		
	КонецФункции
	
	&НаСервере
	Функция НайтиСвойство(Наименование) Экспорт
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Если Свойство = Неопределено Тогда
			МетодСервера(,"ПовторноеИспользованиеСброситьЗначение",,"НайтиСвойствоПовтИсп", Наименование);
		КонецЕсли;
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Возврат Свойство;
		
	КонецФункции
	
	Функция НайтиСвойствоПовтИсп(Наименование) Экспорт
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Т
		|ГДЕ
		|	Т.Наименование = &Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка= Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 3 Тогда
			ВызватьИсключение "В плане видов характеристик ""Дополнительные реквизиты и сведения"" обнаружено несколько свойств с одинаковым наименованием """ + Наименование + """!";
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;

	КонецФункции
		
	
	&НаСервере
	Функция НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
		
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("Ссылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК Ключ,
			|	ТаблицаСвойствОбъектов.Значение КАК Значение
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Значение,
			|	Ключ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.Наименование
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО ТаблицаСвойствОбъектов.Ключ = ДополнительныеРеквизитыИСведения.Наименование";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаДопРеквизитов.Добавить();
				
				Строка.Наименование = Выборка.Наименование;
				Строка.Ссылка = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;
	
	КонецФункции // ()
	
	Функция НайтиПодобныеСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
	
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("НаименованиеПодобногоСвойства");
		ТаблицаДопРеквизитов.Колонки.Добавить("ПодобноеСвойствоСсылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.Ключ + "" (%)"" КАК НаименованиеПодобногоСвойства
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НаименованиеПодобногоСвойства,
			|	НаименованиеСвойства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства,
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК ПодобноеСвойствоСсылка
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО (ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства)
			|			И (НЕ ДополнительныеРеквизитыИСведения.Наименование = ТаблицаСвойствОбъектов.НаименованиеСвойства)";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаДопРеквизитов.Добавить();
				
				Строка.Наименование 					= Выборка.НаименованиеСвойства;
				Строка.НаименованиеПодобногоСвойства 	= Выборка.НаименованиеПодобногоСвойства;
				Строка.ПодобноеСвойствоСсылка 			= Выборка.ПодобноеСвойствоСсылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;

	
	КонецФункции // НайтиПодобныеСвойстваПоСтруктуре()

	&НаСервере
	Функция НайтиНастройкиПользователейИзБП20(Наименование)ЭКспорт
		
		Если Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Свойства.Ссылка Свойство
		|ИЗ
		|	ПланВидовХарактеристик.УдалитьНастройкиПользователей КАК Свойства
		|ГДЕ
		|	Свойства.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Свойство, Неопределено);
		
	КонецФункции
	
	&НаСервере
	Функция СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		Попытка
			СозданныеСвойстваОбъектов=			СоздатьСвойстваОбъектов(ВозможныеСвойстваОбъектов);
			СозданныеНастройкиПользователей=	СоздатьСвойстваОбъектов(ВозможныеНастройкиПользователя);
			ПрисоединитьМассив(СозданныеСвойстваОбъектов, СозданныеНастройкиПользователей);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
			Результат.Подробности= 		"Не удалось проинициализировать свойства объектов.
										| " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если СозданныеСвойстваОбъектов.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция СоздатьСвойство(ОписаниеСвойства)
		
		СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Если СвойствоОбъект.Метаданные().Иерархический Тогда
			СвойствоОбъект.Родитель = ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок();
		КонецЕсли;
		
		Если НЕ Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") = Неопределено И
			НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
			СвойствоОбъект.НаборСвойств=	Вычислить("Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка()");
		КонецЕсли;
		СвойствоОбъект.Наименование = ОписаниеСвойства.ключ;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		СвойствоОбъект.УстановитьНовыйКод();
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = ОписаниеСвойства.ключ;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
		Возврат СвойствоОбъект;
		
	КонецФункции
	
	&НаСервере
	Процедура ПереименоватьСвойство(СвойствоСсылка, НовоеНаименование)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.Наименование = НовоеНаименование;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = НовоеНаименование;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ПометитьНаУдалениеСвойство(СвойствоСсылка)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.УстановитьПометкуУдаления(Истина);
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ОчиститьНаборУСвойства(СвойствоСсылка, ЗафиксированаРеструктуризация)
		
		ДополнительныеРеквизитыИСведения = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
		
		Если НЕ СвойствоСсылка = Неопределено
			И НЕ ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено
			И ЗначениеЗаполнено(СвойствоСсылка.НаборСвойств) Тогда
			
			ОсновноеСвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
			ОсновноеСвойствоОбъект.НаборСвойств=	Вычислить("ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка()");
			ОсновноеСвойствоОбъект.Записать();
			
			ЗафиксированаРеструктуризация=	Истина;
			
		КонецЕсли;
	
	КонецПроцедуры
	
	&НаСервере
	Функция СоздатьСвойстваОбъектов(СтруктураСвойствОбъектов) экспорт 
		
		СозданныеСвойства 	= Новый Массив;
		СвойстваОбъектов 	= НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов);
		
		Для каждого ОписаниеСвойства Из СтруктураСвойствОбъектов Цикл
			Если СвойстваОбъектов.Найти(ОписаниеСвойства.Ключ, "Наименование") = Неопределено Тогда
				НовоеСвойство=	СоздатьСвойство(ОписаниеСвойства);
				СозданныеСвойства.Добавить(НовоеСвойство);
			КонецЕсли;
		КонецЦикла;
		
		Возврат СозданныеСвойства;
		
	КонецФункции	
	
	&НаСервере
	Функция НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеНастройки);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеНастройки);
		
		Для каждого Настройка Из ВозможныеНастройки Цикл
			
			СтрокаСвойств = СвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденнаяНастройка=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяНастройка) = Истина Тогда
				Возврат Истина;
			ИначеЕсли ЗначениеЗаполнено(НайтиНастройкиПользователейИзБП20(Настройка.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденнаяНастройка.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеНастройки = ПодобныеСвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
				Если НайденныеПодобныеНастройки <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаСервере
	Функция НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		
		Для каждого Свойство Из ВозможныеСвойстваОбъектов Цикл
			
			НайденноеСвойство = "";
			СтрокаСвойств = СвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденноеСвойство) = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденноеСвойство.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеСвойства=	ПодобныеСвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
				Если НайденныеПодобныеСвойства <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаСервере
	Функция НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20)
		
		Для каждого Свойство Из СтарыеСвойстваОбъектовИз20 Цикл
			Если НЕ ЗначениеЗаполнено(НайтиСвойство(Свойство.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаСервере
	Функция ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройки, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20)
		
		Если НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" И НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВозможныеНастройкиПользователя()
		
		ВозможныеНастройкиПользователя = Новый Структура;
		
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнийСертификатПользователя", 			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнееПредставлениеПользователя",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСпособПодписанияТ12",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокИдентификаторСвойстваДолжностьПодписанта",	"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокАдресПроксиСервера",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПользовательПроксиСервера",					"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПарольПроксиСервера",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокНастройкиПрокси",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьНакладные",				"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьСчетаФактуры",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСтраницаВыбораПериодаПоУмолчанию",			"Пользователь");
		
		//Свойства отправки на согласование
		ВозможныеНастройкиПользователя.Вставить("ДиадокIDПодписантаОтправкаНаСогласование",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокДолжностьПодписантаОтправкаНаСогласование",	"Пользователь");
		
		//Расширение
		ВозможныеНастройкиПользователя.Вставить("ДиадокНеИспользоватьРасширениеВерсия",				"Пользователь");
				
		Возврат ВозможныеНастройкиПользователя;
		
	КонецФункции
	
	&НаСервере
	функция ПолучитьВозможныеСвойстваОбъектов()ЭКспорт
		
		ВозможныеСвойстваОбъектов = Новый Структура;
		
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДопДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДопДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадокСчет", 	""); //ИдентификаторДокументаВДиадокСч
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадокСч", 	"");
		
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление1", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление2", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление3", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление4", 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг", 		"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ПодрДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокОтправкаНепроведенных", 							"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаСчета", 						"Организация"); //ДиадокВнешняяПечатнаяФорма
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьСчетНаОсновании", 						"Организация"); //ДиадокСпособОтправкиСчета
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАкта", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАкта",			 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокПодставлятьКППГрузоотправителя", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСписокДополнительныхВПФ", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ТекстКомментарияДиадок", 								"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДДКонтр_", 	"Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДНП_", 	"Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДИДП_", 	"Контрагент");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокЕдиницаИзмеренияНоменклатуры", 	"Номенклатура");
		
		ВозможныеСвойстваОбъектов.Вставить("DDPact", 				"Договор контрагента");
		ВозможныеСвойстваОбъектов.Вставить("DDContract", 			"Договор контрагента");
		
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentName", 	"Подразделение");
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentID", 		"Подразделение");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокНомерВПФ", 					""); 
		ВозможныеСвойстваОбъектов.Вставить("СтатусОтправляемыхВПФ_Диадок", 		"");
		
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыСНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("РазрешенныйПериодКорректировки",	"Организация");
					
		
		Возврат ВозможныеСвойстваОбъектов;
		
	КонецФункции
	
	&НаСервере
	функция ПолучитьСтарыеСвойстваОбъектовИз20()ЭКспорт
		
		СтарыеСвойстваОбъектовИз20=	Новый Структура();
		СтарыеСвойстваОбъектовИз20.Вставить("ИдентификаторДокументаВДиадокСч", 	"ИдентификаторДокументаВДиадокСчет");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокСпособОтправкиСчета", 		"ДиадокФормироватьСчетНаОсновании");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокВнешняяПечатнаяФорма", 		"ДиадокВнешняяПечатнаяФормаСчета");
		
		Возврат СтарыеСвойстваОбъектовИз20;
		
	КонецФункции
	
	&НаСервере
	функция ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов) экспорт 
		
		НенайденныеСвойства = Новый Массив;
		Для каждого ОписаниеСвойства из ВозможныеСвойстваОбъектов цикл 
			Если НайтиСвойство(ОписаниеСвойства.Ключ) = Неопределено Тогда
				НенайденныеСвойства.Добавить(ОписаниеСвойства);
			КонецЕсли;
		КонецЦикла;
		
		возврат  НенайденныеСвойства
		
	КонецФункции	
	
	&НаСервере
	Функция ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация)
		
		НаборСтарыхСвойств=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборСтарыхСвойств.Отбор.Свойство.Установить(СтароеСвойство);
		НаборСтарыхСвойств.Прочитать();
		
		Для каждого НаборСтарогоСвойства Из НаборСтарыхСвойств Цикл
			
			ЗаписьОсновногоСвойства=			РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
			ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
			ЗаписьОсновногоСвойства.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(ЗаписьОсновногоСвойства.Значение) Тогда
				ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
				ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
				ЗаписьОсновногоСвойства.Значение=	НаборСтарогоСвойства.Значение;
				ЗаписьОсновногоСвойства.Записать();
				
				ЗафиксированаРеструктуризация=		Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецФункции
	
	&НаСервере
	Функция ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек)
		
		Для каждого Настройка Из ВозможныеНастройкиПользователя Цикл
			СтараяНастройка=	НайтиНастройкиПользователейИзБП20(Настройка.Ключ);
			Если ЗначениеЗаполнено(СтараяНастройка) Тогда
				
				ПравильнаяНастройка=	НайтиСвойство(Настройка.Ключ);
				Если НЕ ЗначениеЗаполнено(ПравильнаяНастройка) Тогда
					Попытка
						ПравильнаяНастройка=	СоздатьСвойство(Настройка);
					Исключение
						ВызватьИсключение "Не удалось создать новое свойства " + Настройка.Ключ + " " + ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			
				Попытка
					НаборСтарыхНастроек=	РегистрыСведений.УдалитьНастройкиПользователей.СоздатьНаборЗаписей();
					НаборСтарыхНастроек.Отбор.Настройка.Установить(СтараяНастройка);
					НаборСтарыхНастроек.Прочитать();
					Для каждого ЗаписьНабора Из НаборСтарыхНастроек Цикл
						
						МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МЗ.Объект=		ЗаписьНабора.Пользователь;
						МЗ.Свойство=	ПравильнаяНастройка.Ссылка;
						МЗ.Значение=	ЗаписьНабора.Значение;
						МЗ.Записать();
						
						МассивПеремещенныхНастроек.Добавить(ПравильнаяНастройка);
						
					КонецЦикла;
				Исключение
					ВызватьИсключение  "Не удалось переместить старые значения свойств " + Настройка.Ключ + " в регистр ДополнительныеСведения " + ОписаниеОшибки();
				КонецПопытки;
				
				Попытка
					ПереименоватьСвойство(СтараяНастройка, "Удалить" + СтараяНастройка.Наименование);
				Исключение
					ВызватьИсключение "Не удалось переименовать свойство " + СтараяНастройка.Наименование + "
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
				КонецПопытки;

			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивПеремещенныхНастроек;
		
	КонецФункции
	
	&НаСервере
	Функция ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств)
		
		УстановитьПравильноеЗначениеСвойстваОтправлятьНеПроведенные(МассивПереписанныхСвойств);
		УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств);
			
		Возврат МассивПереписанныхСвойств;
		
	КонецФункции
	
	&НаСервере
	Процедура РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств)
		
		Для каждого СтрокаТаблицы Из ТаблицаНайденныхСвойств Цикл
			
			СтароеСвойство=		СтрокаТаблицы.Свойство;
			Если ОсновноеСвойство = Неопределено Тогда
				ПереименоватьСвойство(СтароеСвойство, НаименованиеСвойства);
				ОсновноеСвойство=	СтароеСвойство;
			Иначе
				ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация);
				ОчиститьНаборУСвойства(СтароеСвойство, ЗафиксированаРеструктуризация);
				ПереименоватьСвойство(СтароеСвойство, "Удалить" + НаименованиеСвойства);
				ПометитьНаУдалениеСвойство(СтароеСвойство);
			КонецЕсли;
			
			ЗафиксированаРеструктуризация=	Истина;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ОбрабатываемыеСвойстваОбъектов=	Новый Массив();
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеСвойстваОбъектов);
		
		НачатьТранзакцию();
		
		ТаблицаСвойств = НайтиСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		ТаблицаПодобныхСвойств = НайтиПодобныеСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		Для каждого Свойство Из ОбрабатываемыеСвойстваОбъектов Цикл
			
			НаименованиеСвойства=	Свойство.Ключ;
			СтрокаСвойств 		= ТаблицаСвойств.Найти(НаименованиеСвойства, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				ОсновноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			ТаблицаНайденныхСвойств = Новый ТаблицаЗначений;         
			ТаблицаНайденныхСвойств.Колонки.Добавить("Свойство");
			
			ПараметрыОтбора = Новый Структура("Наименование", НаименованиеСвойства);
			СтрокиПодобныхСвойств = ТаблицаПодобныхСвойств.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиПодобныхСвойств <> Неопределено Тогда
				Для каждого Стр Из СтрокиПодобныхСвойств Цикл
					НовСтр = ТаблицаНайденныхСвойств.Добавить();
					НовСтр.Свойство = Стр.ПодобноеСвойствоСсылка;
				КонецЦикла;			
			КонецЕсли;
			
			Попытка
				ОчиститьНаборУСвойства(ОсновноеСвойство, ЗафиксированаРеструктуризация);
				РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств);
			Исключение
				Результат.ОписаниеОшибки=	"Ошибка реструктуризации неправильных свойств объектов";
				Результат.Подробности=		"Не удалось реструктуризировать неправильное свойство " + НаименованиеСвойства + "
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек)
		
		Для каждого РеинициализируемоеСвойство Из СтарыеСвойстваОбъектовИз20 Цикл
			
			СтароеНаименованиеСвойства=		РеинициализируемоеСвойство.Ключ;
			НаименованиеСвойства30=			РеинициализируемоеСвойство.Значение;
			
			СтароеСвойствоСсылка=	НайтиСвойство(СтароеНаименованиеСвойства);
			Если ЗначениеЗаполнено(СтароеСвойствоСсылка) Тогда
				Свойство30Ссылка=	НайтиСвойство(НаименованиеСвойства30);
				Если НЕ ЗначениеЗаполнено(Свойство30Ссылка) Тогда
					ПереименоватьСвойство(СтароеСвойствоСсылка, НаименованиеСвойства30);
					МассивПереименованныхНастроек.Добавить(СтароеСвойствоСсылка);
				Иначе
					ВызватьИсключение 	"Старое свойство """ + СтароеНаименованиеСвойства + """ нельзя реинициализировать, 
										|так как в базе уже определено свойство """ + НаименованиеСвойства30 + """
										|Обратитесь к системному администратору:  
										|Требуется перенести значения свойства """ + СтароеНаименованиеСвойства + """ в """ + НаименованиеСвойства30 + """";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивПереименованныхНастроек;
		
	КонецФункции
			
	&НаСервере
	Функция ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		МассивПереименованныхНастроек=	Новый Массив();
		МассивПеремещенныхНастроек=		Новый Массив();
		МассивПереписанныхСвойств=		Новый Массив();
		
		НачатьТранзакцию();
		
		Попытка
			МассивПереименованныхНастроек=	ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек);
		Исключение
			
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
			Результат.Подробности=		"Не удалось выполнить переименование старых свойств.
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если НЕ Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей") = Неопределено Тогда
			
			Попытка
				МассивПеремещенныхНастроек=	ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек);
			Исключение
				
				Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
				Результат.Подробности=		"Не удалось выполнить перемещение старых настроек пользователей.
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Попытка
			МассивПереписанныхСвойств=	ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП 20 на БП30";
			Результат.Подробности= 		"Не удалось обновить некорректные значения свойств на правильные
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();

			Возврат Результат;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		Если МассивПереименованныхНастроек.Количество() > 0 
			ИЛИ МассивПеремещенныхНастроек.Количество() > 0 
			ИЛИ МассивПереписанныхСвойств.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;

		Возврат Результат;

	КонецФункции
	
	&НаСервере
	Процедура УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = "", ЗначениеСвойства) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) Тогда
			Возврат;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			Если ПустаяСтрока(ЗначениеСвойства) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись свойства объекта: """ + НаименованиеСвойства + """ невозможна. Свойство не создано";
			
		КонецЕсли;
		
		МЗ = ПолучитьМЗСвойстваОбъектов(Объект, СвойствоСсылка);
		Если НЕ МЗ.Выбран() Тогда
			МЗ.Объект = Объект;
			МЗ.Свойство = СвойствоСсылка;
		КонецЕсли;
		
		МЗ.Значение = ЗначениеСвойства;
		МЗ.Записать();
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ СВОЙСТВАМИ

//{ ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
	&Насервере
	Функция СведенияОВнешнейОбработке() Экспорт
		
		СловарьWL= ПолучитьСловарь();
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
		ПараметрыРегистрации.Вставить("Наименование", 		"Модуль работы с электронными первичными документами через " + СловарьWL.НаименованиеСистемы);
		ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
		ПараметрыРегистрации.Вставить("Версия", 			СтрЗаменить(ВерсияОбработкиДиадокСервер(), "_", "."));
		ПараметрыРегистрации.Вставить("Информация", 		"Дополнительная внешняя обработка для работы с ЭДО через " + СловарьWL.НаименованиеСистемы);
		
		ТаблицаКоманд = ПолучитьТаблицуКоманд();
		ДобавитьКоманду(ТаблицаКоманд, "Модуль работы с электронными первичными документами через " + СловарьWL.НаименованиеСистемы, "Форма_Основная", "ОткрытиеФормы", Ложь, "");
		
		ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
		
		Возврат ПараметрыРегистрации;
		
	КонецФункции
	
	&Насервере
	Функция ПолучитьТаблицуКоманд()
		
		Команды = Новый ТаблицаЗначений;
		
		Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
		Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
		Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
		Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
		Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
		
		Возврат Команды;
		
	КонецФункции
	
	&Насервере
	Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
		
		НоваяКоманда=						ТаблицаКоманд.Добавить();
		НоваяКоманда.Представление=			Представление;
		НоваяКоманда.Идентификатор=			Идентификатор;
		НоваяКоманда.Использование=			Использование;
		НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
		НоваяКоманда.Модификатор=			Модификатор;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ НАСТРОЙКАМИ

//{ ИДЕНТИФИКАТОРЫ
	
	&НаСервере
	функция ИдентификаторСвойстваЯщикОрганизации() Экспорт 
		возврат "ЯщикДиадокДляОрганизации"
	КонецФункции	
	
	&НаСервере
	функция ИдентификаторСвойстваПодразделениеОрганизации() Экспорт 
		возврат "ПодрДиадокДляОрганизации"
	КонецФункции	
	
	&НаСервере
	функция ИдентификаторСвойстваЯщикОрганизацииПредставление() Экспорт 
		возврат "ЯщикДиадокДляОрганизацииПредставление"
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору() Экспорт
		Возврат "Дог_DepartmentName";
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору() Экспорт
		Возврат "Дог_DepartmentID";
	КонецФункции
	
	&НаСервере
	функция ИдентификаторСвойстваЯщикКонтрагентаПрефикс() Экспорт
		Возврат "ДДКонтр_";
	КонецФункции
	
	&НаСервере
	функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() Экспорт
		возврат "ДДНП_";
	КонецФункции	
	
	&НаСервере
	функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента(BoxId) Экспорт 
		возврат ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции	
	
	&НаСервере
	функция ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() Экспорт
		Возврат "ДДИДП_";
	КонецФункции
	
	&НаСервере
	функция ИдентификаторСвойстваИДПодразделенияКонтрагента(BoxId) Экспорт 
		возврат ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок() Экспорт 
		Возврат "ИдентификаторДокументаВДиадок"
	Конецфункции 
	
	&НаСервере
	Функция ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок()Экспорт 
		Возврат "ИдентификаторДопДокументаВДиадок"
	Конецфункции 
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок() Экспорт
		Возврат "ИдентификаторЯщикДопДокументаВДиадок"
	Конецфункции 
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок() Экспорт 
		Возврат "ИдентификаторЯщикДокументаВДиадок"
	Конецфункции 
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет() Экспорт
		Возврат "ИдентификаторДокументаВДиадокСчет";
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()
		Возврат "ИдентификаторЯщикДокументаВДиадокСч";
	КонецФункции
	
	&НаСервере
	функция ИдентификаторСвойстваСертификатПользователя()Экспорт 
		возврат "ДиадокСертификатПользователя"
	Конецфункции 	
	
	&НаСервере
	Функция ИдентификаторСвойстваПредставлениеСертификатаПользователя() Экспорт 
		Возврат "ДиадокПредставлениеСертификатаПользователя"
	Конецфункции
	
	&НаСервере
	Функция ИдентификаторСвойстваАдреспроксиСервера() Экспорт 
		Возврат "ДиадокАдресПроксиСервера"
	Конецфункции
	
	&НаСервере
	Функция ИдентификаторСвойстваПользовательПроксиСервера() Экспорт 
		Возврат "ДиадокПользовательПроксиСервера"
	Конецфункции
	
	&НаСервере
	Функция ИдентификаторСвойстваПарольПроксиСервера() Экспорт 
		Возврат "ДиадокПарольПроксиСервера"
	Конецфункции
	
	&НаСервере
	Функция ИдентификаторСвойстваСпособПодписанияТ12() Экспорт
		Возврат "ДиадокСпособПодписанияТ12"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваДолжностьПодписанта() Экспорт
		Возврат "ДиадокИдентификаторСвойстваДолжностьПодписанта"
	КонецФункции	
	
	&НаСервере 
	Функция ИдентификаторСвойстваПечатнаяФормаДляТоваров()Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваПечатнаяФормаДляУслуг() Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваОтправлятьНеПроведенные()Экспорт
		Возврат "ДиадокОтправкаНепроведенных"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаСчета()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаСчета"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваФормироватьСчетНаОсновании()Экспорт
		Возврат "ДиадокФормироватьСчетНаОсновании"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАкта()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаАкта"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваСпособФормированияАкта()Экспорт
		Возврат "ДиадокСпособФормированияАкта"
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки()Экспорт
		Возврат "ДиадокВнешняяПечатнаяФормаАктаСверки"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваСпособФормированияАктаСверки()Экспорт
		Возврат "ДиадокСпособФормированияАктаСверки"
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваПодставлятьКППГрузоотправителя() Экспорт
		Возврат "ДиадокПодставлятьКППГрузоотправителя";
	КонецФункции
	
	&НаСервере 
	Функция ИдентификатрСвойстваТекстКомментарияДиадок() Экспорт
		Возврат "ТекстКомментарияДиадок";
	КонецФункции	
	
	&НаСервере 
	Функция ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры()Экспорт
		Возврат "ДиадокЕдиницаИзмеренияНоменклатуры";
	КонецФункции
	
	&НаСервере 
	Функция ИдентификаторСвойстваIdПодписантаСогласование() Экспорт
		Возврат "ДиадокIDПодписантаОтправкаНаСогласование";
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваДолжностьПодписантаСогласование() Экспорт
		Возврат "ДиадокДолжностьПодписантаОтправкаНаСогласование";
	КонецФункции

	&НаСервере
	Функция ИдентификаторСвойстваСтатусОтправляемыхВПФ() Экспорт
		Возврат "СтатусОтправляемыхВПФ_Диадок";
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваНомерВПФ() Экспорт
		Возврат "ДиадокНомерВПФ";
	КонецФункции
	
	&НаСервере
	Функция ИдентификаторСвойстваСписокДопВПФ() Экспорт
		
		Возврат "ДиадокСписокДополнительныхВПФ";
		
	КонецФункции
	
//} ИДЕНТИФИКАТОРЫ

//{ АДАПТЕР
	
	&НаСервере
	Функция DocumentID_2_ДокументМассовое(ТЗИд) Экспорт
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		ТаблицаПерекодировки.Индексы.Добавить("Число16");
		
		ТЗИд.колонки.Добавить("DocumentId64",   Новый ОписаниеТипов("Строка"));
		ТЗИд.колонки.Добавить("BoxId", 			Новый ОписаниеТипов("Строка")); //на всяк, вдруг там тип неопределенный, чтоб запрос егг сжевал
		
		Для Каждого Стр из ТЗИд Цикл
			Стр.DocumentId64 =  КонвертироватьГуидВЧисло64(Стр.DocumentID);
			Стр.BoxId 	  	 =  Стр.OrganizationId;
		КонецЦикла;
		ИдентификаторСвойстваИдентификаторДокументаВДиадок 		= ИдентификаторСвойстваИдентификаторДокументаВДиадок();
		ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок 	= ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок();
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	выразить(ТЗ.DocumentId64 как строка(150))  как DocumentId64,
		|	выразить(ТЗ.DocumentId как строка(150)) как DocumentId,
		|	выразить(ТЗ.BoxId как строка(150)) как BoxId
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойствоDocumentId.Объект,
		|	ТЗ.DocumentId,
		|	ТЗ.BoxId
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|		ПО СвойствоDocumentId.Объект = СвойствоBoxId.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО СвойствоDocumentId.Значение = ТЗ.DocumentId64
		|			И (СвойствоDocumentId.Свойство.Наименование = &НаименованиеDocumentId)
		|			И (СвойствоBoxId.Свойство.Наименование = &НаименованиеBoxId)
		|			И (СвойствоBoxId.Значение = ТЗ.BoxId)";
		Запрос.УстановитьПараметр("ТЗ", ТЗИд);
		//Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		//Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		
		результат = Новый Соответствие;
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Новый Структура("DocumentId,BoxId", Выборка.DocumentId,Выборка.BoxId), Выборка.Объект);
		КонецЦикла;
		
		//мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат Результат;
		
	КонецФункции	
	
	&НаСервере
	Функция DocumentID_2_Документ(DocumentID, BoxID) Экспорт 
		
		DocumentId64 = КонвертироватьГуидВЧисло64(DocumentID);
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СвойствоDocumentId.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId,
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|ГДЕ
		|	СвойствоDocumentId.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет)
		|	И СвойствоDocumentId.Значение = &ЗначениеDocumentId
		|	И СвойствоBoxId.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет)
		|	И СвойствоBoxId.Значение = &ЗначениеBoxId
		|	И СвойствоDocumentId.Объект = СвойствоBoxId.Объект";
		
		Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
		Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
		
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат ?(мас.Количество() = 0, Неопределено, мас[0]);
		
	КонецФункции	
	
	&НаСервере
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь) Экспорт 
		
		base64DocId=	КонвертироватьГуидВЧисло64(DocumentID);
		
		Если ИспользоватьИдентификаторСчета Тогда
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(), , base64DocId); 
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет(), , BoxID); 
		Иначе
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторДокументаВДиадок(), , base64DocId); 
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(), , BoxID); 
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция Документ_2_DocumentID(СсылкаНаОбъект, ИспользоватьИдентификаторСчета=ложь) Экспорт 
		
		ИдентификаторСвойстваДокумент = ?(ИспользоватьИдентификаторСчета , ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(),ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		число64 =   ПолучитьЗначениеСвойства(СсылкаНаОбъект,  ИдентификаторСвойстваДокумент);
		если ЗначениеЗаполнено( число64) тогда
			возврат  КонвертироватьЧисло64вГуид(число64)
		Иначе 
			возврат ""
		КонецЕсли;	
	КонецФункции	
	
	&НаСервере
	Функция Организация_2_BoxID(Организация) экспорт 
		возврат ПолучитьЗначениеСвойства(Организация,  ИдентификаторСвойстваЯщикОрганизации());
	КонецФункции
	
	&НаСервере
	Функция Установить_BoxID_для_Организация(Организация, BoxID, НаименованиеЯщика, DepartmentKpp = Неопределено) Экспорт 
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваЯщикОрганизации(), , BoxID);
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПодразделениеОрганизации(), , DepartmentKpp);
		
		
		Длина_на_30 = СтрДлина(НаименованиеЯщика) / 30;
		Кол = Цел(Длина_на_30) + ?(Длина_на_30 - Цел(Длина_на_30) > 0, 1, 0);
		Для Инд = 1 По Кол Цикл
			Текст = Сред(НаименованиеЯщика, 30 * (Инд - 1) + 1, 30);
			Постфикс = ?(Инд = 1, "", Инд);
			УстановитьЗначениеСвойства(Организация,ИдентификаторСвойстваЯщикОрганизацииПредставление() + Постфикс, ,Текст);
		КонецЦикла;
		УстановитьЗначениеСвойства(Организация,ИдентификаторСвойстваЯщикОрганизацииПредставление() + Строка(Кол + 1), ,"");
		
		Возврат Истина;
		
	КонецФункции
		
	&НаСервере
	Функция BoxID_2_Организация(BoxID, DepartmentKpp = "") Экспорт 
		
		Возврат СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикОрганизации(), BoxID, ИдентификаторСвойстваПодразделениеОрганизации(), DepartmentKpp);
		
	КонецФункции
	
	&НаСервере
	Функция CounteragentBoxID_2_МассивКонтрагентов(CounteragentID, BoxID = Неопределено) экспорт 
		
		Возврат СвойстваОбъектов_НайтиМассивОбъектов(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);

	КонецФункции
	
	&НаСервере
	Функция CounteragentBoxID_2_Контрагент(CounteragentID, BoxID = Неопределено) экспорт 
		КонтрагентСсылка = СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Возврат КонтрагентСсылка;
		Иначе
			возврат неопределено;
		КонецЕсли;
	КонецФункции
	
	&НаСервере
	Функция Контрагент_2_CounteragentBoxID(Контрагент, BoxID = Неопределено) Экспорт 
		CounteragentID = ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		Возврат CounteragentID;
		
	КонецФункции
	
	&НаСервере
	Процедура Установить_CounteragentBoxID_для_Контрагент(Контрагент, CounteragentID, BoxID = Неопределено) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), , CounteragentID);
	КонецПроцедуры	
	
	&НаСервере
	функция УстановитьПараметрыМаршрутизацииДляКонтрагента(Контрагент, BoxID = Неопределено, НаименованиеПодразделения, ИДПодразделения) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс(), , ИДПодразделения);
	КонецФункции	
	
	&НаСервере
	функция УстановитьПараметрыМаршрутизацииДляДоговора(Договор, НаименованиеПодразделения, ИДПодразделения)    экспорт 
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору(), , ИДПодразделения);
	КонецФункции	
	
	Процедура УстановитьЗначениеКонстанты(НаименованиеКонстанты, Знач ЗначениеКонстанты) Экспорт
		
		Если НайтиСвойство(НаименованиеКонстанты) = Неопределено Тогда
			СоздатьСвойство(Новый Структура("Ключ", НаименованиеКонстанты));
		КонецЕсли;
		
		XMLТип= XMLТипЗнч(ЗначениеКонстанты);
		
		Если XMLТип <> Неопределено И Найти(НРег(XMLТип.ИмяТипа), НРег("Ref.")) > 0 Тогда
			
			ЗаписьXML= Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписатьXML(ЗаписьXML, ЗначениеКонстанты);
			
			ЗначениеКонстанты= ЗаписьXML.Закрыть();
			
		КонецЕсли;
		
		УстановитьЗначениеСвойства(МетодСервера(,"ОбъектКонстант"), НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеКонстанты(НаименованиеКонстанты) Экспорт
		
		ЗначениеКонстанты= ПолучитьЗначениеСвойства(МетодСервера(,"ОбъектКонстант"), НаименованиеКонстанты, "Константа");
		
		Если ТипЗнч(ЗначениеКонстанты) = Тип("Строка") И Лев(ЗначениеКонстанты, 1) = "<" Тогда
			
			ЧтениеXML= Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ЗначениеКонстанты);
			
			Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				ЗначениеКонстанты= ПрочитатьXML(ЧтениеXML);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ЗначениеКонстанты;
		
	КонецФункции
	
	Функция ОбъектКонстант() Экспорт
		
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
		
	КонецФункции
	
//} АДАПТЕР

//{ РАБОТАСBASE64
	
	&НаСервере 
	функция ДобавитьНулиВПредставлениеЧисла(чс, длина)
		
		результат = Формат(чс,"ЧН=; ЧГ=");
		Пока стрДлина(результат) < Длина Цикл 
			результат = "0"+результат
		Конеццикла;
		
		Возврат результат;
		
	конецФункции
	
	&НаСервере 
	функция ТаблицаПерекодировки() Экспорт
		
		//Формируем таблицу соответствия 3-хсимвольных 16-ричных слов и 2-х символьных 64-ричных слов
		//Готовую сформированную таблицу берем из подготовленного макета
		
		МассивТ = Новый Массив;
		МассивТ.Добавить(Тип("Строка"));
		
		Макет=			ПолучитьМакет("ТаблицаПерекодировки");
		ОбластьТела=	Макет.ПолучитьОбласть("ТелоМакета");
		
		ТабДок=			Новый ТабличныйДокумент;
		ТабДок.Вывести(ОбластьТела);
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Число2", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число16", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число64", Новый ОписаниеТипов(МассивТ));
		ТЗ.Индексы.Добавить("Число16");
		
		Для НомерСтроки = 1 По 4096 Цикл
			СтрокаТЗ=			ТЗ.Добавить();
			СтрокаТЗ.Число2=	ТабДок.Область(НомерСтроки, 1).Текст;
			СтрокаТЗ.Число16=	ТабДок.Область(НомерСтроки, 2).Текст;
			СтрокаТЗ.Число64=	ТабДок.Область(НомерСтроки, 3).Текст;
		КонецЦикла;
		
		Возврат ТЗ;
		
	КонецФункции	
	
	&НаСервере 
	Функция ПолучитьЧисло64ИзЧисла16(число)
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		Число16 = Число;
		Число64 = "";
		
		пока стрДлина(Число16)>0 цикл 
			разряд = ДобавитьНулиВПредставлениеЧисла(прав(Число16, 3),3);
			Число16 = ?(  стрДлина(Число16)<4  , "" , лев(Число16, стрДлина(Число16)-3)    );
			выборкаСтрок = ТаблицаПерекодировки.НайтиСтроки(Новый Структура("Число16", разряд));
			Если выборкаСтрок.количество()>0 тогда 
				Число64 =  выборкаСтрок[0].Число64+Число64
			Иначе 
				вызватьИсключение("Не удается перекодировать число "+число+"из 16-х в 64-х")
			КонецЕсли; 	  
		КонецЦикла;	
		
		возврат Число64;
	КонецФункции 
	
	&НаСервере 
	Функция ПолучитьЧисло16ИзГуида(Гуид)
		возврат стрЗаменить(гуид, "-", "");
	конецфункции	
	
	&НаСервере 
	Функция ПолучитьГуидИзЧисла16(Число16);
		возврат сред(Число16, 1, 8)+"-"+сред(Число16, 9, 4)+"-"+сред(Число16, 13, 4)+"-"+сред(число16, 17, 4)+"-"+сред(число16, 21, 20)+"-"+сред(число16, 41, 4)+"-"+
		сред(число16, 45, 4)+"-"+сред(число16, 49, 4)+"-"+сред(число16, 53, 12);
	КонецФункции
	
	&НаСервере 
	функция ПолучитьЧисло2изЧисла64(Число64)
		Число64_ =   Формат(число64,"ЧН=;  ЧГ=");
		Число2 = "";
		Для ц = 1 по стрДлина(Число64_) цикл 
			символ64 = сред(число64, ц,1);
			Если символ64="A" тогда 
				Символ2 = "000000"
			ИначеЕсли символ64="B" тогда 
				Символ2 = "000001"
			ИначеЕсли символ64="C" тогда 
				Символ2 = "000010"
			ИначеЕсли символ64="D" тогда 
				Символ2 = "000011"
			ИначеЕсли символ64="E" тогда 
				Символ2 = "000100"
			ИначеЕсли символ64="F" тогда 
				Символ2 = "000101"
			ИначеЕсли символ64="G" тогда 
				Символ2 = "000110"
			ИначеЕсли символ64="H" тогда 
				Символ2 = "000111"
			ИначеЕсли символ64="I" тогда 
				Символ2 = "001000"
			ИначеЕсли символ64="J" тогда 
				Символ2 = "001001"
			ИначеЕсли символ64="K" тогда 
				Символ2 = "001010"
			ИначеЕсли символ64="L" тогда 
				Символ2 = "001011"
			ИначеЕсли символ64="M" тогда 
				Символ2 = "001100"
			ИначеЕсли символ64="N" тогда 
				Символ2 = "001101"
			ИначеЕсли символ64="O" тогда 
				Символ2 = "001110"
			ИначеЕсли символ64="P" тогда 
				Символ2 = "001111"
			ИначеЕсли символ64="Q" тогда 
				Символ2 = "010000"
			ИначеЕсли символ64="R" тогда 
				Символ2 = "010001"
			ИначеЕсли символ64="S" тогда 
				Символ2 = "010010"
			ИначеЕсли символ64="T" тогда 
				Символ2 = "010011"
			ИначеЕсли символ64="U" тогда 
				Символ2 = "010100"
			ИначеЕсли символ64="V" тогда 
				Символ2 = "010101"
			ИначеЕсли символ64="W" тогда 
				Символ2 = "010110"
			ИначеЕсли символ64="X" тогда 
				Символ2 = "010111"
			ИначеЕсли символ64="Y" тогда 
				Символ2 = "011000"
			ИначеЕсли символ64="Z" тогда 
				Символ2 = "011001"
			ИначеЕсли символ64="a" тогда 
				Символ2 = "011010"
			ИначеЕсли символ64="b" тогда 
				Символ2 = "011011"
			ИначеЕсли символ64="c" тогда 
				Символ2 = "011100"
			ИначеЕсли символ64="d" тогда 
				Символ2 = "011101"
			ИначеЕсли символ64="e" тогда 
				Символ2 = "011110"
			ИначеЕсли символ64="f" тогда 
				Символ2 = "011111"
			ИначеЕсли символ64="g" тогда 
				Символ2 = "100000"
			ИначеЕсли символ64="h" тогда 
				Символ2 = "100001"
			ИначеЕсли символ64="i" тогда 
				Символ2 = "100010"
			ИначеЕсли символ64="j" тогда 
				Символ2 = "100011"
			ИначеЕсли символ64="k" тогда 
				Символ2 = "100100"
			ИначеЕсли символ64="l" тогда 
				Символ2 = "100101"
			ИначеЕсли символ64="m" тогда 
				Символ2 = "100110"
			ИначеЕсли символ64="n" тогда 
				Символ2 = "100111"
			ИначеЕсли символ64="o" тогда 
				Символ2 = "101000"
			ИначеЕсли символ64="p" тогда 
				Символ2 = "101001"
			ИначеЕсли символ64="q" тогда 
				Символ2 = "101010"
			ИначеЕсли символ64="r" тогда 
				Символ2 = "101011"
			ИначеЕсли символ64="s" тогда 
				Символ2 = "101100"
			ИначеЕсли символ64="t" тогда 
				Символ2 = "101101"
			ИначеЕсли символ64="u" тогда 
				Символ2 = "101110"
			ИначеЕсли символ64="v" тогда 
				Символ2 = "101111"
			ИначеЕсли символ64="w" тогда 
				Символ2 = "110000"
			ИначеЕсли символ64="x" тогда 
				Символ2 = "110001"
			ИначеЕсли символ64="y" тогда 
				Символ2 = "110010"
			ИначеЕсли символ64="z" тогда 
				Символ2 = "110011"
				
			ИначеЕсли символ64="0" тогда 
				Символ2 = "110100"
			ИначеЕсли символ64="1" тогда 
				Символ2 = "110101"
			ИначеЕсли символ64="2" тогда 
				Символ2 = "110110"
			ИначеЕсли символ64="3" тогда 
				Символ2 = "110111"
			ИначеЕсли символ64="4" тогда 
				Символ2 = "111000"
			ИначеЕсли символ64="5" тогда 
				Символ2 = "111001"
			ИначеЕсли символ64="6" тогда 
				Символ2 = "111010"
			ИначеЕсли символ64="7" тогда 
				Символ2 = "111011"
			ИначеЕсли символ64="8" тогда 
				Символ2 = "111100"
			ИначеЕсли символ64="9" тогда 
				Символ2 = "111101"
			ИначеЕсли символ64="+" тогда 
				Символ2 = "111110"
			ИначеЕсли символ64="/" тогда 
				Символ2 = "111111"
			Иначе 
				вызватьИсключение("ошибочный символ "+символ64+" в 64-ричном представлении числа")
			КонецЕсли; 
			Число2 = Число2+ Символ2;
		КонецЦикла;
		Возврат Число2;
	КонецФункции	
	
	&НаСервере 
	Функция ПолучитьЧисло16изЧисла2(Число)
		Число2 = Формат(Число,"ЧН=; ЧВН=; ЧГ=");
		ОстатокСимволов = (4 - стрДлина(Число2) % 4) % 4;
		Пока остатокСимволов>0 цикл 
			число2 = "0"+Число2;
			ОстатокСимволов = ОстатокСимволов - 1; 
		КонецЦикла;
		
		Число16 = "";
		//отрезаем слева куски по 4 бит и делаем число-16
		Пока число2<>"" цикл 
			Символ2 = лев(Число2, 4);
			Если Символ2 = "0000" тогда 
				Символ16 = "0"
			ИначеЕсли Символ2 = "0001" тогда 
				Символ16  = "1"
			ИначеЕсли Символ2 = "0010" тогда 
				Символ16  = "2"
			ИначеЕсли Символ2 = "0011" тогда 
				Символ16  = "3"
			ИначеЕсли Символ2 = "0100" тогда 
				Символ16  = "4"
			ИначеЕсли Символ2 = "0101" тогда 
				Символ16  = "5"
			ИначеЕсли Символ2 = "0110" тогда 
				Символ16  = "6"
			ИначеЕсли Символ2 = "0111" тогда 
				Символ16  = "7"
			ИначеЕсли Символ2 = "1000" тогда 
				Символ16  = "8"
			ИначеЕсли Символ2 = "1001" тогда 
				Символ16  = "9"
			ИначеЕсли Символ2 = "1010" тогда 
				Символ16  = "a"
			ИначеЕсли Символ2 = "1011" тогда 
				Символ16  = "b"
			ИначеЕсли Символ2 = "1100" тогда 
				Символ16  = "c"
			ИначеЕсли Символ2 = "1101" тогда 
				Символ16  = "d"
			ИначеЕсли Символ2 = "1110" тогда 
				Символ16  = "e"
			ИначеЕсли Символ2 = "1111" тогда 
				Символ16  = "f"
			Иначе 
				вызватьИсключение("ошибочный символ "+Символ2+" в двоичном представлении числа") 
			КонецЕсли;
			
			Число16 = Число16 + Символ16;
			
			Число2 = прав(число2 , стрДлина(Число2)-4);	
		КонецЦикла;
		
		возврат число16;
		
		
	КонецФункции 	
	
	&НаСервере 
	функция КонвертироватьГуидВЧисло64(гуид) экспорт 
		
		Число16 =   ПолучитьЧисло16ИзГуида(гуид);
		Число64  =  ПолучитьЧисло64ИзЧисла16(Число16);
		
		Число64 = Прав(Число64, Окр(СтрДлина(Число16) / 1.5));
		
		Возврат   Число64;
		
	КонецФункции	
	
	&НаСервере 
	Функция КонвертироватьЧисло64вГуид(число64) экспорт 
		число16 = ПолучитьЧисло16изЧисла2(ПолучитьЧисло2изЧисла64(Число64));
		если стрДлина(число16)>64 тогда 
			число16 = прав(Число16, 64);
		КонецЕсли;
		
		возврат  ПолучитьГуидИзЧисла16(Число16);
		
	КонецФункции
	
//} РАБОТАСBASE64

&НаСервере
Функция ОформитьОшибкиВHTML(ОшибкиСтруктуры, Заголовок)
	
	Если ОшибкиСтруктуры <> "" тогда 
		
		Возврат  
		
		"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|
		|<html xmlns=""http://www.w3.org/1999/xhtml"">
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
		|<style type=""text/css"">
		| h3 {
		|  margin-top: 0.5em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		| p {
		|  margin-top: 0.2em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		|</style>
		|</head>
		|<body>
		|<h2>"+Заголовок+"</h2>"+ОшибкиСтруктуры+"
		|</body>
		|</html>";
		
	Иначе 
		возврат "";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодписантаДляXmlTorg12(Official,  Визирующий) Экспорт
	
	Official.Surname 	=  Визирующий.Surname;
	Official.FirstName  =  Визирующий.FirstName;
	Official.Patronymic =  Визирующий.Patronymic;
	Official.JobTitle   =  Визирующий.JobTitle;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьФИОПодписанта(official, фио) Экспорт
	
	ф = фио;
	
	Official.Surname =		ВыделитьСлово(ф);
	Official.FirstName=		ВыделитьСлово(ф);
	Official.Patronymic=	ВыделитьСлово(ф);
	
КонецПроцедуры

&НаСервере
Функция РазобратьДопПоле_СтарыйФормат(AdditionalInfo)
	
	СтруктураДопПолей=    Новый Структура("head, top, bottom, ground");
	
	НашлиТег=    Ложь;
	
	Для каждого ДопПоле Из СтруктураДопПолей Цикл
		
		ОткрывающийТег= "<" + ДопПоле.Ключ + ">";
		ЗакрывающийТег=	"</" + ДопПоле.Ключ + ">";
		
		Если НЕ Найти(AdditionalInfo, ОткрывающийТег) = 0
			И НЕ Найти(AdditionalInfo, ЗакрывающийТег) = 0 Тогда
			
			НачалоДопПоля=    Найти(ВРег(AdditionalInfo), ВРег(ОткрывающийТег)) + СтрДлина(ОткрывающийТег);
			
			ТекстДопПоля=    Сред(AdditionalInfo, НачалоДопПоля, СтрДлина(AdditionalInfo));
			
			ТекстДопПоля= 	Сред(ТекстДопПоля, 0, Найти(ТекстДопПоля, "</") - 1);
			СтруктураДопПолей.Вставить(ДопПоле.Ключ, СокрЛП(ТекстДопПоля));
			
			НашлиТег=    	Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НашлиТег И ЗначениеЗаполнено(AdditionalInfo) Тогда
		СтруктураДопПолей.Вставить("top", СокрЛП(AdditionalInfo));
	КонецЕсли;
	
	Возврат СтруктураДопПолей;
	
КонецФункции

&НаСервере
Функция РазобратьДопПоле(StructedAdditionalInfos)
		
	СтруктураДопПолей	= Новый Структура("head, top, bottom, ground");
	СтрокаДопПолей 		= "";
	Сч = 1;
	
	Для Каждого Стр Из StructedAdditionalInfos Цикл
		Если Стр.Key <> "_" Тогда
			СтрокаДопПолей = СтрокаДопПолей + Стр.Key + ": " + Стр.Value;
			Если Сч <> StructedAdditionalInfos.Количество() Тогда
				СтрокаДопПолей = СтрокаДопПолей + ", ";
			КонецЕсли;
			Сч = Сч + 1;
		Иначе
			СтрокаДопПолей = СтрокаДопПолей + Стр.Value;
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураДопПолей.Вставить("top", СокрЛП(СтрокаДопПолей));
	
	Возврат СтруктураДопПолей;
	
КонецФункции

&НаСервере
функция ДобавитьРазделитель(Стр, Префикс = "") 
	возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
конецфункции

&НаСервере
Функция НаименованиеРегиона(code)
	
	если code = "##" ТОГДА
		возврат ""
	КонецЕсли;	
	попытка 	
		code = число(code);
	исключение конецПопытки;
	Если (code=1	) Тогда возврат "Республика Адыгея"
	ИначеЕсли (code=2	) Тогда возврат "Республика Башкортостан"
	ИначеЕсли (code=3	) Тогда возврат "Республика Бурятия"
	ИначеЕсли (code=4	) Тогда возврат "Республика Алтай"
	ИначеЕсли (code=5	) Тогда возврат "Республика Дагестан"
	ИначеЕсли (code=6) Тогда возврат "Республика Ингушетия"
	ИначеЕсли (code=7	) Тогда возврат "Кабардино-Балкарская республика"
	ИначеЕсли (code=8	) Тогда возврат "Республика Калмыкия"
	ИначеЕсли (code=9	) Тогда возврат "Карачаево-Черкесская республика"
	ИначеЕсли (code=10	) Тогда возврат "Республика Карелия"
	ИначеЕсли (code=11	) Тогда возврат "Республика Коми"
	ИначеЕсли (code=12	) Тогда возврат "Республика Марий Эл"
	ИначеЕсли (code=13	) Тогда возврат "Республика Мордовия"
	ИначеЕсли (code=14	) Тогда возврат "Республика Саха (Якутия)"
	ИначеЕсли (code=15	) Тогда возврат "Республика Северная Осетия — Алания"
	ИначеЕсли (code=16	) Тогда возврат "Республика Татарстан"
	ИначеЕсли (code=17	) Тогда возврат "Республика Тыва"
	ИначеЕсли (code=18	) Тогда возврат "Удмуртская республика"
	ИначеЕсли (code=19	) Тогда возврат "Республика Хакасия"
	ИначеЕсли (code=20	) Тогда возврат "Чеченская республика"
	ИначеЕсли (code=21	) Тогда возврат "Чувашская республика"
	ИначеЕсли (code=22	) Тогда возврат "Алтайский край"
	ИначеЕсли (code=75 ) Тогда возврат "Забайкальский край"
	ИначеЕсли (code= 80	) Тогда возврат "Забайкальский край"
	ИначеЕсли (code=41	) Тогда возврат "Камчатский край"
	ИначеЕсли (code=23	) Тогда возврат "Краснодарский край"
	ИначеЕсли (code=24	) Тогда возврат "Красноярский край"
	ИначеЕсли (code=59 ) Тогда возврат "Пермский край"
	ИначеЕсли (code= 81	) Тогда возврат "Пермский край"
	ИначеЕсли (code=25	) Тогда возврат "Приморский край"
	ИначеЕсли (code=26	) Тогда возврат "Ставропольский край"
	ИначеЕсли (code=27	) Тогда возврат "Хабаровский край"
	ИначеЕсли (code=28	) Тогда возврат "Амурская область"
	ИначеЕсли (code=29	) Тогда возврат "Архангельская область"
	ИначеЕсли (code=30	) Тогда возврат "Астраханская область"
	ИначеЕсли (code=31	) Тогда возврат "Белгородская область"
	ИначеЕсли (code=32	) Тогда возврат "Брянская область"
	ИначеЕсли (code=33	) Тогда возврат "Владимирская область"
	ИначеЕсли (code=34	) Тогда возврат "Волгоградская область"
	ИначеЕсли (code=35	) Тогда возврат "Вологодская область"
	ИначеЕсли (code=36	) Тогда возврат "Воронежская область"
	ИначеЕсли (code=37	) Тогда возврат "Ивановская область"
	ИначеЕсли (code=38	) Тогда возврат "Иркутская область"
	ИначеЕсли (code=39	) Тогда возврат "Калининградская область"
	ИначеЕсли (code=40	) Тогда возврат "Калужская область"
	ИначеЕсли (code=42	) Тогда возврат "Кемеровская область"
	ИначеЕсли (code=43	) Тогда возврат "Кировская область"
	ИначеЕсли (code=44	) Тогда возврат "Костромская область"
	ИначеЕсли (code=45	) Тогда возврат "Курганская область"
	ИначеЕсли (code=46	) Тогда возврат "Курская область"
	ИначеЕсли (code=47	) Тогда возврат "Ленинградская область"
	ИначеЕсли (code=48	) Тогда возврат "Липецкая область"
	ИначеЕсли (code=49	) Тогда возврат "Магаданская область"
	ИначеЕсли (code=50	) Тогда возврат "Московская область"
	ИначеЕсли (code=51	) Тогда возврат "Мурманская область"
	ИначеЕсли (code=52	) Тогда возврат "Нижегородская область"
	ИначеЕсли (code=53	) Тогда возврат "Новгородская область"
	ИначеЕсли (code=54	) Тогда возврат "Новосибирская область"
	ИначеЕсли (code=55	) Тогда возврат "Омская область"
	ИначеЕсли (code=56	) Тогда возврат "Оренбургская область"
	ИначеЕсли (code=57	) Тогда возврат "Орловская область"
	ИначеЕсли (code=58	) Тогда возврат "Пензенская область"
	ИначеЕсли (code=60	) Тогда возврат "Псковская область"
	ИначеЕсли (code=61	) Тогда возврат "Ростовская область"
	ИначеЕсли (code=62	) Тогда возврат "Рязанская область"
	ИначеЕсли (code=63	) Тогда возврат "Самарская область"
	ИначеЕсли (code=64	) Тогда возврат "Саратовская область"
	ИначеЕсли (code=65	) Тогда возврат "Сахалинская область"
	ИначеЕсли (code=66	) Тогда возврат "Свердловская область"
	ИначеЕсли (code=67	) Тогда возврат "Смоленская область"
	ИначеЕсли (code=68	) Тогда возврат "Тамбовская область"
	ИначеЕсли (code=69	) Тогда возврат "Тверская область"
	ИначеЕсли (code=70	) Тогда возврат "Томская область"
	ИначеЕсли (code=71	) Тогда возврат "Тульская область"
	ИначеЕсли (code=72	) Тогда возврат "Тюменская область"
	ИначеЕсли (code=73	) Тогда возврат "Ульяновская область"
	ИначеЕсли (code=74	) Тогда возврат "Челябинская область"
	ИначеЕсли (code=76	) Тогда возврат "Ярославская область"
	ИначеЕсли (code=77	) Тогда возврат "г. Москва"
	ИначеЕсли (code=78	) Тогда возврат "г. Санкт-Петербург"
	ИначеЕсли (code=79	) Тогда возврат "Еврейская автономная область"
	ИначеЕсли (code=83	) Тогда возврат "Ненецкий автономный округ"
	ИначеЕсли (code=86	) Тогда возврат "Ханты-Мансийский автономный округ - Югра"
	ИначеЕсли (code=87	) Тогда возврат "Чукотский автономный округ"
	ИначеЕсли (code=89	) Тогда возврат "Ямало-Ненецкий автономный округ"
		
	ИначеЕсли (code=91	) Тогда возврат "Республика Крым"
	ИначеЕсли (code=92	) Тогда возврат "г. Севастополь"
	
		
	Иначе возврат ""
	конецЕсли; 
	
КонецФункции	 

&НаСервере
Функция ТолькоЦифры(строкаПроверки)
	ПослеЗамены = стрЗаменить(строкаПроверки, "1", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "2", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "3", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "4", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "5", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "6", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "7", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "8", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "9", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "0", "");
	
	возврат (послеЗамены = "");
	
Конецфункции

//{Загрузка классификаторов
	&НаСервере
	функция ОтрезатьПравуюЗапятую(стр)
		результат = сокрЛП(стр);
		пока прав(результат, 1)="," цикл 
			Результат = лев(результат, стрДлина(результат)-1);
		КонецЦикла;	
		
		возврат результат;
	КонецФункции
	
	&НаСервере
	процедура ДобавитьВОКЕИ(ОКЕИ, код, наименованиеПолное, наименованиеКраткое)
		
		стр = ОКЕИ.Добавить();
		стр.код 				  = код;
		стр.НаименованиеПолное   = наименованиеПолное;
		стр.НаименованиеКраткое  = наименованиеКраткое;
		
	конецПроцедуры	
	
	&НаСервере
	Процедура ДобавитьВОКСМ(ОКСМ, код, НаименованиеПолное, наименованиеКраткое)	
		стр = ОКСМ.Добавить();
		стр.код 				  = код;
		стр.НаименованиеПолное   = наименованиеПолное;
		стр.НаименованиеКраткое  = наименованиеКраткое;	
		
	КонецПроцедуры	
	
	&НаСервере
	Процедура ЗаполнитьОКЕИПоТабличномуДокументу(ОКЕИ)
		Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Для ц = 1 по 500 цикл 
			
			код 			    = Макет.Область(ц, 2, ц, 2).Текст;
			НаименованиеПолное = Макет.Область(ц, 3, ц, 3).Текст;
			НаименованиеКраткое= Макет.Область(ц, 4, ц, 4).Текст;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код) и ЗначениеЗаполнено(НаименованиеКраткое) тогда
				
				ЧислоСтрок = макс(СтрЧислоСтрок(НаименованиеПолное),  СтрЧислоСтрок(НаименованиеКраткое));
				Для цц = 1 по ЧислоСтрок цикл 
					ДобавитьВОКЕИ(ОКЕИ, код,
					?(цц <=СтрЧислоСтрок(НаименованиеПолное), СтрПолучитьСтроку(НаименованиеПолное, цц), ""),
					?(цц <=СтрЧислоСтрок(НаименованиеКраткое), СтрПолучитьСтроку(НаименованиеКраткое, цц), ""));
				КонецЦикла;	
			КонецЕсли;	 
		конеццикла;	
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьОКЕИПоДереву(ОКЕИ)
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			ИмяСправочникаКлассификатора=	"КлассификаторЕдиницИзмерения";
		
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда					
				ИмяСправочникаКлассификатора = "УпаковкиЕдиницыИзмерения"; //УТ 11.2
			Иначе
				ИмяСправочникаКлассификатора = "ЕдиницыИзмерения";
			КонецЕсли;
		
		Иначе
			ИмяСправочникаКлассификатора=	"ЕдиницыИзмерения";
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Макет = Справочники[ИмяСправочникаКлассификатора].ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Макет.Записать(ИмяВременногоФайла);
		
		попытка 
			Дерево = ЗначениеИзФайла(ИмяВременногоФайла);
			
		Исключение 
			Чтение=	Новый ЧтениеXML;
			Чтение.ОткрытьФайл(ИмяВременногоФайла);
			Дерево=	СериализаторXDTO.ПрочитатьXML(Чтение);
		КонецПопытки;
		
		для каждого строка1 из Дерево.строки цикл 
			Для каждого строка2 из Строка1.строки цикл
				Для каждого строка3 из строка2.строки цикл 
					ДобавитьВОКЕИ(ОКЕИ, строка3.кодчисловой, строка3.наименование, строка3.УсловноеОбозначениеНациональное);
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
		
		ок = истина;
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьОКЕИ() Экспорт
		
		ОКЕИ = Новый ТаблицаЗначений;
		ОКЕИ.Колонки.Добавить("Код");
		ОКЕИ.Колонки.Добавить("НаименованиеПолное");
		ОКЕИ.Колонки.Добавить("НаименованиеКраткое");
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			ЗаполнитьОКЕИПоТабличномуДокументу(ОКЕИ)
		Иначе 
			ЗаполнитьОКЕИПоДереву(ОКЕИ)
		КонецЕсли;	 
		
		ДобавитьВОКЕИ(ОКЕИ, "715", "Пара", "Пар");
		ДобавитьВОКЕИ(ОКЕИ, "778", "Упаковка", "Уп");
		ДобавитьВОКЕИ(ОКЕИ, "778", "Упаковка", "Уп");
		ДобавитьВОКЕИ(ОКЕИ, "449", "Тонно - километр", "тонна/км");
		ДобавитьВОКЕИ(ОКЕИ, "449", "Тонно - километр", "т/км");
		ДобавитьВОКЕИ(ОКЕИ, "168", "Тонна", "тн");
		ДобавитьВОКЕИ(ОКЕИ, "163", "Грамм", "гр");
		ДобавитьВОКЕИ(ОКЕИ, "018", "Погонный метр", "пм");
		// { RGS TChubarova 09.05.2016 23:14:20 - TCS-0002911
		ДобавитьВОКЕИ(ОКЕИ, "186", "Фут", "Фут");
		// } RGS TChubarova 09.05.2016 23:32:17 - TCS-0002911
		Возврат ОКЕИ;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьОКСМ() Экспорт
		
		ОКСМ = Новый ТаблицаЗначений;
		ОКСМ.Колонки.Добавить("Код");
		ОКСМ.Колонки.Добавить("НаименованиеПолное");
		ОКСМ.Колонки.Добавить("НаименованиеКраткое");
		
		КлассификаторXML = Справочники.СтраныМира.ПолучитьМакет("Классификатор").ПолучитьТекст();
		Попытка
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		Исключение 	
			
			Чтение=	Новый ЧтениеXML;
			Чтение.УстановитьСтроку(КлассификаторXML);
			КлассификаторТаблица=	СериализаторXDTO.ПрочитатьXML(Чтение);
			
			КлассификаторТаблица.колонки.Код.Имя = "Code";
			КлассификаторТаблица.колонки.Наименование.Имя = "ShortName";
			КлассификаторТаблица.колонки.НаименованиеПолное.Имя = "FullName";
			
		КонецПопытки;	
		
		Для каждого стр из КлассификаторТаблица цикл 
			код 			     = стр.Code;
			НаименованиеКраткое = стр.ShortName;
			НаименованиеПолное  = стр.FullName;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код)  тогда
				ДобавитьВОКСМ(ОКСМ,  код,  НаименованиеПолное,  НаименованиеКраткое);
			КонецЕсли;	 
		конеццикла;	
		
		ДобавитьВОКСМ(ОКСМ, "156", "Китайская Народная Республика", "КНР");
		ДобавитьВОКСМ(ОКСМ, "158", "Китай (Тайвань)", "Тайвань");
		ДобавитьВОКСМ(ОКСМ, "826", "Соединенное Королевство Великобритании и Северной Ирландии", "Великобритания");
		ДобавитьВОКСМ(ОКСМ, "840", "Соединенные Штаты Америки", "США");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "Евросоюз");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "ЕС");
		ДобавитьВОКСМ(ОКСМ, "980", "Европейский союз", "Европейский союз");
		ДобавитьВОКСМ(ОКСМ, "981", "Евразийский экономический союз", "ЕАЭС");
		
		Возврат ОКСМ;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьОКВ() Экспорт
		
		ОКВ = Новый таблицаЗначений;
		ОКВ.Колонки.Добавить("Код");
		ОКВ.Колонки.Добавить("КодСимвольный");
		ОКВ.Колонки.Добавить("Наименование");
		
		// { RGS  14.06.2016 1:00:44 - 
		//КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		КлассификаторXML = ЭтотОбъект.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		// } RGS  14.06.2016 1:00:45 - 
		
		попытка
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		Исключение 	
			
			Чтение=	Новый ЧтениеXML;
			Чтение.УстановитьСтроку(КлассификаторXML);
			КлассификаторТаблица=	СериализаторXDTO.ПрочитатьXML(Чтение);
			
			КлассификаторТаблица.колонки.Код.Имя = "Code";
			КлассификаторТаблица.колонки.КодСимвольный.Имя = "CodeSymbol";
			КлассификаторТаблица.колонки.Наименование.Имя = "Name";
			
		КонецПопытки;	
		
		Для каждого стр из КлассификаторТаблица цикл 
			код 			    = стр.Code;
			КодСимвольный 		= стр.CodeSymbol;
			Наименование		= стр.Name;
			
			Если (код<>"Код") и ЗначениеЗаполнено(Код) и ЗначениеЗаполнено(КодСимвольный) тогда
				стр = ОКВ.Добавить();
				стр.код 			= код;
				стр.КодСимвольный = КодСимвольный;
				стр.Наименование  = Наименование;
			КонецЕсли;	 
		конеццикла;
		
		стр = ОКВ.Добавить();
		стр.код 			= "643";
		стр.КодСимвольный = "руб";
		стр.Наименование  = "Российский рубль";
		
		Возврат ОКВ;
		
	КонецФункции
	
	&НаСервере
	Функция КлассификаторыДляДиадок() Экспорт 
		
		Результат=	Новый Структура;
		Результат.Вставить("ОКЕИ",	ПолучитьОКЕИ());
		Результат.Вставить("ОКСМ",  ПолучитьОКСМ());
		Результат.Вставить("ОКВ", 	ПолучитьОКВ());
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	функция СтруктураКонтентаЗаполнена(СтруктураКонтента)
		естьЗаполненноеПоле = ложь;
		Для каждого Элемент из  СтруктураКонтента цикл 
			если ТипЗнч(Элемент.значение) = тип("Структура") тогда
				естьЗаполненноеПоле = естьЗаполненноеПоле или  СтруктураКонтентаЗаполнена(Элемент.значение)
			Иначе 
				естьЗаполненноеПоле = естьЗаполненноеПоле или  (ЗначениеЗаполнено(Элемент.значение) и (Элемент.значение<> ложь)) 
			КонецЕсли;
		КонецЦикла;	
		
		возврат  естьЗаполненноеПоле
		
	КонецФункции
	
	&НаСервере
	Функция Эквивалентны(стр1, стр2) 
		Если (ЗначениеЗаполнено(стр1)=Ложь) или (ЗначениеЗаполнено(стр2)=Ложь) тогда 
			возврат ложь
		иначе 	
			возврат (врег(стрЗаменить(сокрЛП(стр1), ".", ""))=врег(стрЗаменить(сокрЛП(стр2), ".","") ))
		конецЕсли;	
	КонецФункции
	
	&НаСервере
	Функция СтрокаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
		если ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод=ложь тогда
			возврат "наименования"
		ИначеЕсли 	ОшибкаВалютыНеНайдена=ложь и   ОшибкаВалютыНеТотКод тогда
			возврат "коды"
		ИначеЕсли 	ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод тогда
			возврат "наименования и коды"
		Иначе 
			возврат ""
		конецЕсли;	
		
	КонецФункции
	
	&НаСервере
	Функция ЧисловойКодЕИ(Знач КодЕИ)
		
		КодЕИ=	СтрЗаменить(КодЕИ, "0", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "1", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "2", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "3", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "4", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "5", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "6", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "7", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "8", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "9", "");
		
		Если СокрЛП(КодЕИ) = "" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	
	// { RGS TChubarova 22.05.2016 23:19:04 - 
	//функция	ПроверитьЕИ(ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь) 
	функция	ПроверитьЕИ(ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь) Экспорт		
		// } RGS TChubarova 22.05.2016 23:19:05 - Экспорт
		
		ОКЕИ= МетодСервера(,"КлассификаторыДляДиадок").ОКЕИ;
		
		СписокНайденныхКодовЕИ = новый СписокЗначений;
		
		НайденнаяВПроверенныхЕИ=	списокПроверенныхЕИ.НайтиПоЗначению(ЕИ.Ссылка);
		Если ((Не ЭтоАкт) И (ЗначениеЗаполнено(кодЕИ) И  НайденнаяВПроверенныхЕИ = неопределено))
			ИЛИ ((ЭтоАкт) И (ЗначениеЗаполнено(ЕИ) И НЕ ПустаяСтрока(ЕИ.Наименование) И НайденнаяВПроверенныхЕИ = неопределено)) Тогда
			
			списокПроверенныхЕИ.Добавить(ЕИ.Ссылка);
			
			нашлиЕИ = ложь;
			СписокНайденныхЕИ = новый СписокЗначений;
			Для каждого запись из ОКЕИ цикл 
				если Эквивалентны(запись.НаименованиеПолное, ЕИ.наименование) или Эквивалентны(Запись.НаименованиеКраткое, ЕИ.наименование) тогда 
					если запись.код = КодЕИ тогда 
						НашлиЕИ = истина  ;
					ИначеЕсли    	СписокНайденныхКодовЕИ.НайтиПоЗначению(запись.код )=неопределено тогда 
						СписокНайденныхЕИ.Добавить(запись);
						СписокНайденныхКодовЕИ.Добавить(запись.код );
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			если НашлиЕИ=Ложь тогда
				Если НЕ ЧисловойКодЕИ(КодЕИ) Тогда
					возврат "
					|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+" не корректный</br>";
					//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
					ОшибкаЕИНеТотКод = истина;
				ИначеЕсли  СписокНайденныхЕИ.Количество()=0 тогда
					возврат "
					|Единица измерения  «<a href=""ЕДИНИЦА:"  + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>»
					|не найдена в <b>ОКЕИ</b></br>";
					//		|не найдена в <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a></br>";
					ОшибкаЕИНеНайдена = истина;
				ИначеЕсли 	 СписокНайденныхЕИ.Количество()=1 тогда
					возврат "
					|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
					|не соответствует коду по <b>ОКЕИ</b> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
					//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
					ОшибкаЕИНеТотКод = истина;
				Иначе 
					//	сообщить(еи);
					//	сообщить(ЕИ.уникальныйИдентификатор());
					списокОш =  "
					|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
					|не соответствует коду по <b>ОКЕИ</b> </br>";
					//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> </br>";
					для каждого элемент из СписокнайденныхЕИ цикл 
						списокОш = списокОш+ "
						|Единице измерения «"+Элемент.Значение.НаименованиеПолное+"», ("+Элемент.Значение.НаименованиеКраткое+") соответствует код ОКЕИ "+ Элемент.Значение.код+"</br>";
					КонецЦикла;	
					возврат списокОш;
					ОшибкаЕИНеТотКод = истина;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	функция ПроверитьСтрану(СтранаПроисхождения, КодПроисх, СписокПроверенныхСтран, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод)
		
		ОКСМ= МетодСервера(,"КлассификаторыДляДиадок").ОКСМ;
		
		СписокНайденныхКодовСтран = новый СписокЗначений;
		СписокОшибокСтран = "";
		если ЗначениеЗаполнено(СтранаПроисхождения) и (СписокПроверенныхСтран.НайтиПоЗначению(СтранаПроисхождения) = неопределено ) тогда 
			//проверяем код страны
			НашлиСтрану = ложь;
			СписокПроверенныхСтран.Добавить(СтранаПроисхождения);
			СписокНайденныхСтран = новый СписокЗначений;
			Для каждого Запись из ОКСМ цикл 
				если Эквивалентны(запись.наименованиеКраткое, СтранаПроисхождения)  или   Эквивалентны(Запись.наименованиеПолное, СтранаПроисхождения) тогда 
					если запись.код = КодПроисх тогда 
						НашлиСтрану = истина;
					иначеЕсли СписокНайденныхКодовСтран.НайтиПоЗначению(запись.код )=неопределено тогда  
						СписокНайденныхСтран.Добавить(запись);
						СписокНайденныхКодовСтран.Добавить(запись.код );
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
			
			если НашлиСтрану=Ложь тогда
				если  СписокНайденныхСтран.Количество()=0 тогда
					СписокОшибокСтран = СписокОшибокСтран+"
					|Страна происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>»
					|не найдена в <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a></br>";
					ОшибкаСтраныНеНайдена = истина;
				ИначеЕсли 	 СписокНайденныхСтран.Количество()=1 тогда
					СписокОшибокСтран = СписокОшибокСтран+"
					|Код страны происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>» - "+КодПроисх+"
					|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> - "+СписокНайденныхСтран[0].Значение.код+"</br>";
					ОшибкаСтраныНеТотКод = истина;
				Иначе 
					СписокОшибокСтран = СписокОшибокСтран+"
					|Код страны происхождения «<a href=""СТРАНА:"+СтранаПроисхождения.уникальныйИдентификатор()+""">"+СтранаПроисхождения+"</a>» - "+КодПроисх+"
					|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> </br>";
					для каждого элемент из СписокНайденныхСтран цикл 
						СписокОшибокСтран = СписокОшибокСтран+ "
						|Стране «"+Элемент.Значение.НаименованиеКраткое+"» соответствует код ОКСМ "+ Элемент.Значение.код+"</br>";
					КонецЦикла;	
					ОшибкаСтраныНеТотКод = истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
		возврат СписокОшибокСтран;
	КонецФункции
	
	&НаСервере
	функция ПроверитьВалюту(валюта, ВалютаКод, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
		
		ОКВ= МетодСервера(,"КлассификаторыДляДиадок").ОКВ;
		СписокОшибокВалюта = "";
		СписокНайденныхВалют 	  = новый СписокЗначений;
		СписокНайденныхКодовВалют = новый СписокЗначений;
		НашлиВалюту=Ложь;
		
		Для каждого запись из ОКВ цикл 
			если Эквивалентны(запись.КодСимвольный, валюта.наименование) или Эквивалентны(запись.Наименование, Валюта.наименованиеПолное) тогда 
				если запись.код = ВалютаКод тогда 
					НашлиВалюту = истина
				ИначеЕсли СписокНайденныхКодовВалют.НайтиПоЗначению(запись.код)=неопределено тогда 
					СписокНайденныхВалют.Добавить(запись);
					списокНайденныхКодовВалют.Добавить(Запись.код);
				КонецЕсли;	
			КонецЕсли;	
		конецЦикла;	
		
		Если НашлиВалюту=Ложь тогда
			
			если  СписокНайденныхВалют.Количество()=0 тогда
				СписокОшибокВалюта = "
				|Валюта «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» 
				|не найдена в <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a></br>";
				ОшибкаВалютыНеНайдена  = истина;
			ИначеЕсли 	 СписокНайденныхВалют.Количество()=1 тогда
				СписокОшибокВалюта = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a> -"+СписокНайденныхВалют[0].Значение.код+"</br>";
				ОшибкаВалютыНеТотКод = истина;
			Иначе 
				СписокОшибокВалюта = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a><br>";
				для каждого элемент из СписокНайденныхВалют цикл 
					СписокОшибокВалюта = СписокОшибокВалюта+ "
					|Валюте «"+Элемент.Значение.Наименование+"» соответствует код ОКВ "+Элемент.Значение.код+"</br>";
				КонецЦикла;	
				ОшибкаВалютыНеТотКод = истина;
			КонецЕсли;
			
		конецЕсли;	
		
		возврат СписокОшибокВалюта;
	КонецФункции		
	
	&НаСервере
	функция ПолучитьНаименованиеЕИПоКоду(КодЕИ)
		
		ОКЕИ= МетодСервера(,"КлассификаторыДляДиадок").ОКЕИ;
		
		Если ЗначениеЗаполнено(СокрЛП(КодЕИ)) тогда 
			ВыборкаИзКлассификатора = ОКЕИ.найтиСтроки(Новый Структура("Код",СокрЛП(КодЕИ) ));
			Если выборкаИзКлассификатора.количество()>0 тогда
				возврат  ВыборкаИзКлассификатора[0].НаименованиеКраткое
			КонецЕсли;	
		КонецЕсли;	
		возврат "";
	КонецФункции		
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка) Экспорт
		
		Возврат	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыСчета=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		Если ЗначениеЗаполнено(ИдПечатнойФормыСчета) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыСчета, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыАкта=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		Если ЗначениеЗаполнено(ИдПечатнойФормыАкта) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыАкта, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАктаСверки(ДокументСсылка) Экспорт
		
		ИдПечатнойФормыАктаСверки=	ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		Если ЗначениеЗаполнено(ИдПечатнойФормыАктаСверки) Тогда
			РезультатФормирования=	СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормыАктаСверки, ДокументСсылка);
		Иначе
			РезультатФормирования=	Новый Структура();
			РезультатФормирования.Вставить("Таблица", 		Новый ТабличныйДокумент);
			РезультатФормирования.Вставить("СписокОшибок", 	"");
		КонецЕсли;
		
		Возврат РезультатФормирования;
		
	КонецФункции
	
	&НаСервере
	Функция СформироватьНеСтандартнуюПечатнуюФорму(ИдПечатнойФормы, ДокументСсылка)
		
		ТабличныйДокумент=	Новый ТабличныйДокумент;
		
		СписокОшибок=	"";
		
		ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПечатнойФормы));
		Если ВнешняяПечатнаяФорма.Команды.Количество() > 0 Тогда
			
			ИдентификаторКоманды=	ВнешняяПечатнаяФорма.Команды[0].Идентификатор;
			
			ОБъектыНазначения = новый массив;
			ОБъектыНазначения.Добавить(ДокументСсылка);
			
			ПараметрыИсточника=	Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
			ПараметрыИсточника.Вставить("ОбъектыНазначения", 	ОБъектыНазначения);
			
			КоллекцияПечатныхФорм=	Неопределено;
			ОбъектыПечати=			Неопределено;
			ПараметрыВывода=		Неопределено;
			
			Попытка
				ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФорма, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			Исключение
				СписокОшибок=	"<H3>Ошибка формирования печатной формы </H3><p>" + ОписаниеОшибки() + "</p>";
			КонецПопытки;
			
			Если НЕ КоллекцияПечатныхФорм = Неопределено 
				И КоллекцияПечатныхФорм.Количество() = 0 Тогда
				СписокОшибок=	"<H3>Не найденны сформированные печатные формы</H3>";
			КонецЕсли;
			
			Если СписокОшибок = "" Тогда
				ТабличныйДокумент=	КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
			
		Иначе
			СписокОшибок=	"<H3>Неверно подключена внешняя печатная форма</H3>";
		КонецЕсли;
		
		СписокОшибок=	оформитьОшибкиВHTML(СписокОшибок, "При формировании внешней печтатной формы обнаружены ошибки");
		
		Результат=	Новый Структура();
		Результат.Вставить("Таблица", 		ТабличныйДокумент);
		Результат.Вставить("СписокОшибок", 	СписокОшибок);
		
		Возврат Результат;
		
	КонецФункции
	
//}

//{ CONTENT

	&НаСервере
	Функция СформироватьТитулПолучателя(СтруктураПодписи, Type, DocumentDate) Экспорт
		
		TitleInfo=	Новый Соответствие;
		
		ТипПодписи =  Type;
		Если ТипПодписи =  "XmlTorg12" Тогда
			
			//Если СтруктураПодписи.ТипДатыПолучения = "ДатаПолученияГруза" Тогда
			TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
			//Иначе
			//	TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(DocumentDate));
			//КонецЕсли;
			
			TitleInfo.Вставить("Receiver", ПредставлениеВизирующего(СтруктураПодписи));
			
			//Если СтруктураПодписи.ГрузПринял Тогда
			//	ПараметрыПодписанияПринявшего=	Новый Соответствие;
			//	ПараметрыПодписанияПринявшего.Вставить("Surname", 		СтруктураПодписи.ФамилияГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("FirstName", 	СтруктураПодписи.ИмяГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("Patronymic", 	СтруктураПодписи.ОтчествоГрузПринял);
			//	ПараметрыПодписанияПринявшего.Вставить("JobTitle" , 	СтруктураПодписи.ДолжностьГрузПринял);
			//	TitleInfo.Вставить("Accepter", ПараметрыПодписанияПринявшего);
			//Иначе
			TitleInfo.Вставить("Accepter", "");
			TitleInfo.Вставить("Attorney", "");
			//КонецЕсли;
			
		Иначе
			TitleInfo.Вставить("SignatureDate", НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
			TitleInfo.Вставить("Official", 		ПредставлениеВизирующего(СтруктураПодписи));
		КонецЕсли;
		
		TitleInfo.Вставить("Signer", ПредставлениеВизирующего(СтруктураПодписи,  СтруктураПодписи.ИНН));
		
		//Если СтруктураПодписи.ПоДоверенности Тогда
		//	TitleInfo.Вставить("Attorney", СтруктурироватьСведенияОДоверенности(СтруктураПодписи));
		//Иначе
		TitleInfo.Вставить("Attorney", "");
		//КонецЕсли;
		
		Возврат TitleInfo;
		
	КонецФункции
	
	&НаСервере
	Функция ПредставлениеСтавкиНДС(TaxRate)
		
		ПредставлениеСтавки=	TaxRate;
		Если ВРег(TaxRate) = "БЕЗ НДС" 
			ИЛИ НЕ ЗначениеЗаполнено(TaxRate) Тогда
			Возврат "без НДС";
		Иначе
			Если Найти(TaxRate, "/") > 0 Тогда
				Возврат СокрЛП(TaxRate);
			Иначе
				Возврат СокрЛП(TaxRate) + "%";
			КонецЕсли;			
		КонецЕсли;
		
	КонецФункции
	
	//{ ОБЩИЕ ИНИЦАЛИЗАЦИИ
	
		&НаСервере
		функция  ИнициализироватьSigner(ПодписантСФ=ложь)
			Возврат новый структура("JobTitle, Surname, FirstName, Patronymic, inn"+?(ПодписантСФ,", IsSoleProprietor, SoleProprietorRegistrationCertificate" ,"" ));
		КонецФункции
		
		функция ИнициализироватьКонтентАдреса()
			Возврат Новый Структура("IsForeign, ZipCode, RegionCode, Territory, City, Locality, Street, Building, Block, Apartment, CountryCode, AddressText, AddressString");
		КонецФункции	
		
		&НаСервере
		Функция ИнициализироватьКонтентКонтрагента(КонтентДляСФ = Ложь)
			СписокПолей = "IsSoleProprietor, Name, Inn, Kpp,  Address";
			Если КонтентДляСФ=Ложь Тогда 
				СписокПолей=СписокПолей+", BankAccountNumber, BankName, BankId, Phone, Fax, Okopf, Okpo";
			КонецЕсли;
			Результат = Новый Структура(СписокПолей);
			Результат.Address = ИнициализироватьКонтентАдреса();
			
			Возврат Результат;
			
		КонецФункции
		
		&НаСервере
		функция ИнициализироватьПодписанта() Экспорт
			Возврат Новый Структура("JobTitle, Surname, FirstName, Patronymic");
		КонецФункции
		
		&НаСервере
		функция ИнициализироватьКонтентГрузо()
			результат = новый структура("Name, Address, IsSoleProprietor, SameAsSellerOrBuyer, Ссылка");
			результат.address = ИнициализироватьКонтентАдреса();
			возврат результат;
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsXmlTorg12() Экспорт
			
			Возврат Новый Структура("Product, UnitCode, Quantity, Price, TaxRate, TotalWithVatExcluded, Vat, Total, Feature, Sort, Article, ProductCode, UnitName, ParcelType, ParcelCapacity, ParcelsQuantity, GrossQuantity, AdditionalInfo, СсылкаНаЕИ"); 
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsXmlAcceptanceCertificate() Экспорт
			Возврат Новый Структура("Name, Description, UnitCode, UnitName, Quantity, Price, TotalWithVatExcluded, Vat, Total, AdditionalInfo, СсылкаНаЕИ"); 
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsInvoice() Экспорт
			
			content = Новый Структура("Product, UnitCode, ЕдиницаИзмеренияСсылка, Quantity, Price, CountriesOfOrigin, СтранаПроисхожденияСсылка, CustomsDeclarationNumbers, Excise, TaxRate, TotalWithVatExcluded, Vat, Total, СсылкаНаЕИ, StructedAdditionalInfos"); 
			content.StructedAdditionalInfos = Новый Массив;
			
			Возврат content;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруAdditionalInfos() Экспорт
			
			Возврат Новый Структура("Key, Value"); 
			
		КонецФункции
		
		&НаСервере
		Процедура ЗаполнитьStructedAdditionalInfos(StructedAdditionalInfos, ДопСведения)Экспорт
			
			МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);	
			
			Для Каждого Стр Из МассивДопСведений Цикл
				СтруктураAdditionalInfo = ПолучитьСтруктуруAdditionalInfos();
				 
				// {RGS  29.03.2016 16:16:10 - OPS-0000406
				Если СтрНайти(Стр,"=")>0 Тогда 
				// }RGS  29.03.2016 16:18:01 - OPS-0000406
				МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "=");
				// {RGS  29.03.2016 16:16:10 - OPS-0000406
				ИначеЕсли СтрНайти(Стр,":")>0 Тогда 
					МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, ":");
				Иначе
					Продолжить;
				КонецЕсли;
				// }RGS  29.03.2016 16:18:01 - OPS-0000406
				
				СтруктураAdditionalInfo.Key 	= МассивКлючЗначение[0];
				СтруктураAdditionalInfo.Value 	= МассивКлючЗначение[1];
				
				Если ЗначениеЗаполнено(СтруктураAdditionalInfo.Value) Тогда
					StructedAdditionalInfos.Добавить(СтруктураAdditionalInfo);
				КонецЕсли;
								
			КонецЦикла;
			
		КонецПроцедуры
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsInvoiceCorrection() Экспорт
			
			content = Новый Структура("Product, AmountsDec, AmountsInc, OriginalValues, CorrectedValues, StructedAdditionalInfos"); 
			content.StructedAdditionalInfos = Новый Массив;
			
			Возврат content;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруOriginalInvoices() Экспорт
			
			Возврат Новый Структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber"); 
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруPaymentDocuments() Экспорт
			
			СтруктураPaymentDocuments= новый структура("Date, Number"); 
			
			Возврат СтруктураPaymentDocuments;
			
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlTorg12() Экспорт
			
			content = новый структура("Date, Number, WaybillDate, WaybillNumber, OperationCode, GroundName, GroundDate,	GroundNumber, Seller, Buyer, Shipper, Consignee, ShipperDepartment, ShipperOkdp, SupplyDate, AttachmentSheetsQuantity, ChiefAccountant, AdditionalInfo, SupplyAllowedBy, ChiefAccountant, SupplyPerformedBy, Commons, Totals, Items");
			content.Seller 		= ИнициализироватьКонтентКонтрагента();
			content.Buyer 		= ИнициализироватьКонтентКонтрагента();
			content.Shipper 	= ИнициализироватьКонтентКонтрагента();
			content.Consignee 	= ИнициализироватьКонтентКонтрагента();
			content.SupplyAllowedBy		= ИнициализироватьПодписанта();
			content.ChiefAccountant		= ИнициализироватьПодписанта();
			content.SupplyPerformedBy	= ИнициализироватьПодписанта();
			content.Commons     = Новый структура("TotalGrossQuantity, TotalGrossQuantityInWords, TotalParcelsQuantity, TotalParcelsQuantityInWords, TotalQuantity, TotalQuantityInWords, TotalSum, TotalSumInWords");
			content.Totals      = Новый структура("GrossQuantity, Quantity, ParcelsQuantity, TotalWithVatExcluded, Total, Vat");
			
			content.items 		= Новый Массив;
			
			возврат Content;
			
		КонецФункции	
		
		&НаСервере
		Функция ИнициализироватьКонтентДляInvoice() Экспорт
			
			content = новый структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber, Currency, ВалютаСсылка, PaymentDocuments, Seller, Shipper, Consignee, Buyer, Signer, Totals, Items, StructedAdditionalInfos");
			content.Seller 	  = ИнициализироватьКонтентКонтрагента(истина);
			content.Buyer     = ИнициализироватьКонтентКонтрагента(истина);
			content.Consignee = ИнициализироватьКонтентГрузо();
			content.Shipper   = ИнициализироватьКонтентГрузо();
			
			content.items 	  				= Новый Массив;
			content.StructedAdditionalInfos = Новый Массив;
			content.PaymentDocuments 		= Новый Массив;
			
			content.Totals = Новый структура("TotalWithVatExcluded, Total, Vat");
			content.Signer    = ИнициализироватьSigner(истина);
			
			Возврат content;
			
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляInvoiceCorrection() Экспорт
			
			content = новый структура("InvoiceCorrectionDate, InvoiceCorrectionNumber,  InvoiceCorrectionRevisionDate, InvoiceCorrectionRevisionNumber, Currency, ВалютаСсылка, Seller, Buyer, Signer, Items, TotalsDec, TotalsInc, OriginalInvoices, StructedAdditionalInfos");
			content.Seller 	  		= ИнициализироватьКонтентКонтрагента(истина);
			content.Buyer     		= ИнициализироватьКонтентКонтрагента(истина);
			
			content.items 	  				= Новый Массив;
			content.OriginalInvoices		= Новый Массив;
			content.StructedAdditionalInfos = Новый Массив;
			
			content.Signer    		= ИнициализироватьSigner(истина);
			content.TotalsDec 		= Новый структура("TotalWithVatExcluded, Total, Vat");
			content.TotalsInc 		= Новый структура("TotalWithVatExcluded, Total, Vat");
			
			Возврат content;
			
		КонецФункции
		
		&НаСервере
		Функция Инициализировать_AmountsDec_AmountsInc()  экспорт 
			возврат новый структура("Excise, TotalWithVatExcluded, Vat, Total");
		конецФункции	
		
		&НаСервере
		Функция Инициализировать_OriginalValues_CorrectedValues() экспорт 
			возврат новый структура("Excise, TotalWithVatExcluded, Vat, Total, Quantity, Price, UnitCode, ЕдиницаИзмеренияСсылка, Taxrate");
		конецФункции	
		
		&НаСервере
		Функция ИнициализироватьДоверенность() Экспорт
			результат =  новый структура("Date, Number, Issuer, IssuerOrganizationName,  IssuerAdditionalInfo, Recipient, RecipientAdditionalInfo");
			результат.Issuer =  ИнициализироватьПодписанта();
			результат.Recipient =  ИнициализироватьПодписанта();
			
			возврат результат;
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlAcceptanceCertificate() Экспорт
			content = новый структура("Date, Number, Title, SignatureDate, Official, Attorney,  Seller, Items, AdditionalInfo, SignatureDate");
			content.seller =  ИнициализироватьКонтентКонтрагента();
			content.Official =  ИнициализироватьПодписанта();
			content.Attorney =  ИнициализироватьДоверенность();
			content.items = Новый Массив;//ПолучитьПустуюТЗдляItemsXmlAcceptanceCertificate();
			
			возврат content;
		КонецФункции	
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlAcceptanceCertificate_ТитулПолучателя() Экспорт
			результат = новый структура("Signer, Attorney, Complaints, SignatureDate, AdditionalInfo"); 
			результат.signer =  ИнициализироватьПодписанта();
			результат.Attorney = ИнициализироватьДоверенность();
			возврат результат;
		КонецФункции
		
	//} ОБЩИЕ ИНИЦАЛИЗАЦИИ
	
	//{ Torg12
		
		//{ Визуализация Torg12
			
			Функция СформироватьПредставлениеАдресаПоContent(AddressContent)
				
				Если AddressContent.IsForeign = Ложь И ЗначениеЗаполнено(AddressContent.RegionCode) = Истина Тогда
					
					КодРегиона 	= AddressContent.RegionCode;
					Индекс 		= AddressContent.ZipCode;
					Район 		= AddressContent.Territory;
					Город 		= AddressContent.City;
					НаселПункт  = AddressContent.Locality;
					Улица       = AddressContent.Street;
					Дом         = AddressContent.Building;
					Корпус      = AddressContent.Block;
					Кварт       = AddressContent.Apartment;
					
					ПредставлениеАдреса = ДобавитьРазделитель(Индекс)+ДобавитьРазделитель(НаименованиеРегиона(КодРегиона))+ДобавитьРазделитель(Район)+
					ДобавитьРазделитель(Город) + ДобавитьРазделитель(НаселПункт)+ДобавитьРазделитель(Улица)+
					ДобавитьРазделитель(Дом, "дом №") + ДобавитьРазделитель(Корпус, "корпус ") + ДобавитьРазделитель(Кварт,"кв ");
					                                   
					Возврат Лев(ПредставлениеАдреса, СтрДлина(ПредставлениеАдреса)-2);
					
				ИначеЕсли ЗначениеЗаполнено(AddressContent.AddressText) = Истина Тогда
					
					Страна = Справочники.СтраныМира.НайтиПоКоду(AddressContent.CountryCode);
					// { RGS TChubarova 19.02.2016 15:17:58 - 
					//Возврат ?(ЗначениеЗаполнено(Страна), Страна.Наименование, Строка(AddressContent.CountryCode)) + ", " + AddressContent.AddressText;
					Возврат ?(ЗначениеЗаполнено(Страна), Страна.Наименование + ", ","")  + AddressContent.AddressText;
					// } RGS TChubarova 19.02.2016 15:18:00 - 
		
				Иначе
					
					Возврат AddressContent.AddressString;
					
				КонецЕсли;
				
			КонецФункции	
			
			&НаСервере
			функция СформироватьПредставлениеИННКПП(Inn, Kpp)
				Если ЗначениеЗаполнено(Kpp) тогда 
					возврат "ИНН/КПП: "+Inn+"/"+Kpp
				ИначеЕсли ЗначениеЗаполнено(inn) тогда 
					возврат "ИНН: "+Inn
				Иначе 
					возврат ""
				КонецЕсли;	
			конецФункции
			
			Функция СформироватьПредставлениеКонтрагентаПоContent(CounteragentContent)
				
				Наименование 	= CounteragentContent.name; 
				ИННКПП          = СформироватьПредставлениеИННКПП(CounteragentContent.Inn, CounteragentContent.Kpp); 
				Адрес 			= СформироватьПредставлениеАдресаПоContent(CounteragentContent.Address);
				
				Телефон 		=  CounteragentContent.Phone ;
				Факс    		=  CounteragentContent.Fax ;
				БИК     		=  CounteragentContent.BankId ;
				НаименБанк		=  CounteragentContent.BankName ;
				РСчет     		=  CounteragentContent.BankAccountNumber ;
				
				возврат  ОтрезатьПравуюЗапятую(ДобавитьРазделитель(Наименование) + ДобавитьРазделитель(ИННКПП)+ДобавитьРазделитель(Адрес) +
				Добавитьразделитель(Телефон, "тел: ") + Добавитьразделитель(факс, "факс: ") + Добавитьразделитель(РСчет, "р/с: ") +
				Добавитьразделитель(НаименБанк, "в банке ") + Добавитьразделитель(БИК, "БИК "));
				
			КонецФункции 	
			
			&НаСервере
			функция ПолучитьФИОПоКонтенту(official)
				возврат  строка(official.Surname)+" "+official.FirstName+" "+official.Patronymic;
			конецфункции	
			
			&НаСервере
			функция ПредставлениеДоверенностьВыдана(attorney)
				НаимОргКем 	= attorney.IssuerOrganizationName;
				ДолжнКем	 	= attorney.Issuer.JobTitle;
				ФИОКем     	= ПолучитьФИОПоКонтенту(attorney.Issuer);
				возврат ДолжнКем+" "+ ФИОКем+", "+ НаимОргКем
			КонецФункции	
			
			&НаСервере
			функция ПредставлениеДоверенностьПолучена(attorney)
				ДолжнКому	 	= attorney.Recipient.JobTitle;
				ФИОКому     	= ПолучитьФИОПоКонтенту(attorney.Recipient);
				возврат  ДолжнКому+" "+ФИОКому
			КонецФункции
			
			&НаСервере
			функция СформироватьПечатнуюФормуПоXmlTorg12Content(Знач Content, Знач ВизуализироватьДопПоля) Экспорт
				
				XmlTorg12Content=				?(Content.Свойство("XmlTorg12Content"), Content.XmlTorg12Content, Неопределено);
				XmlTorg12BuyerContent=			?(Content.Свойство("XmlTorg12BuyerContent"), Content.XmlTorg12BuyerContent, Неопределено);
				XmlTorg12SignatureStructure=	?(Content.Свойство("XmlTorg12SignatureStructure"), Content.XmlTorg12SignatureStructure, Неопределено);
				
				СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(XmlTorg12Content.AdditionalInfo);
				
				Таб   = Новый ТабличныйДокумент;
				Макет = ЭтотОбъект.ПолучитьМакет("ТОРГ12");
				
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				ДопИнфо = Макет.ПолучитьОбласть("ДопПоле"); 
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) тогда 
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.head;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				Шапка1 = Макет.ПолучитьОбласть("ШапкаДокумента1");
				
				Шапка1.параметры.Грузоотправитель 			= СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Shipper);
				Шапка1.параметры.подразделение 				= XmlTorg12Content.ShipperDepartment;
				шапка1.Параметры.ГрузоотправительПоОКПО 	= XmlTorg12Content.Shipper.Okpo;
				шапка1.параметры.ВидДеятельностиПоОКДП 		= XmlTorg12Content.ShipperOkdp;
				
				шапка1.параметры.Грузополучатель 			= СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Consignee);
				шапка1.Параметры.ГрузополучательПоОКПО 		= XmlTorg12Content.Consignee.Okpo;
				Таб.Вывести(Шапка1);
				
				Шапка3 = Макет.ПолучитьОбласть("ШапкаДокумента3");
				Шапка3.Параметры.поставщик 					= СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Seller);
				Шапка3.параметры.ПоставщикПоОКПО 			= XmlTorg12Content.Seller.Okpo;
				Шапка3.Параметры.Плательщик 				= СформироватьПредставлениеКонтрагентаПоContent(XmlTorg12Content.Buyer);
				Шапка3.параметры.ПлательщикПоОКПО 			= XmlTorg12Content.Buyer.Okpo;
				Шапка3.Параметры.ДоговорОснование 			= XmlTorg12Content.GroundName;
				Шапка3.Параметры.ОснованиеНомер				= XmlTorg12Content.GroundNumber;
				
				Таб.Вывести(Шапка3);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ШапкаДокумента4= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ШапкаДокумента4.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
				Иначе
					ШапкаДокумента4= Макет.ПолучитьОбласть("ШапкаДокумента4");
				КонецЕсли;
				ШапкаДокумента4.Параметры.ОснованиеДата=	XmlTorg12Content.GroundDate;
				
				Таб.Вывести(ШапкаДокумента4);
				
				ШапкаДокумента5= Макет.ПолучитьОбласть("ШапкаДокумента5");
				
				ШапкаДокумента5.Параметры.Номер=						XmlTorg12Content.Number;
				ШапкаДокумента5.Параметры.Дата=							XmlTorg12Content.Date;
				ШапкаДокумента5.Параметры.ТранспортнаяНакладнаяНомер=	XmlTorg12Content.WaybillNumber;
				ШапкаДокумента5.Параметры.ТранспортнаяНакладнаяДата=	XmlTorg12Content.WaybillDate;
				ШапкаДокумента5.Параметры.ВидОперации=					XmlTorg12Content.OperationCode;
				Таб.Вывести(ШапкаДокумента5);
				
				ШапкаТаблицы = Макет.получитьобласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				
				ц = 0;
				для каждого Item Из XmlTorg12Content.items Цикл
					ц = ц+1;
					Если ЗначениеЗаполнено(Item.AdditionalInfo) и ВизуализироватьДопПоля тогда 
						СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыДопПоля");
						СтрокаТаблицы.Параметры.ДопСведенияСтроки = Item.AdditionalInfo
					Иначе 	
						СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
					КонецЕсли;	
					СтрокаТаблицы.Параметры.НомерПП =  ц;
					Наименование 	= Item.Product;
					Характеристика 	= Item.Feature;
					Сорт 			= Item.Sort;
					Артикул  		= Item.Article;
					СтрокаТаблицы.Параметры.Товар 					= ОтрезатьПравуюЗапятую(ДобавитьРазделитель(Наименование)+ДобавитьРазделитель(Характеристика)+ДобавитьРазделитель(Сорт)+ДобавитьРазделитель(Артикул));
					СтрокаТаблицы.Параметры.КодТовара 				= Item.ProductCode;
					СтрокаТаблицы.Параметры.ЕдиницаИзмерения 		= Item.UnitName;
					СтрокаТаблицы.Параметры.КодЕдиницыИзмерения 	= Item.UnitCode;
					СтрокаТаблицы.Параметры.ВидУпаковки 			= Item.ParcelType;
					СтрокаТаблицы.Параметры.КоличествоВОдномМесте 	= формат(Item.ParcelCapacity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.КоличествоМест 			= формат(Item.ParcelsQuantity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Масса 					= формат(Item.GrossQuantity, "ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Количество 				= формат(Item.Quantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.Цена 					= формат(Item.Price, "ЧДЦ=2; ЧН=' '; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СуммаБезНДС 			= формат(Item.TotalWithVatExcluded, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СтавкаНДС 				= ПредставлениеСтавкиНДС(Item.TaxRate);
					СтрокаТаблицы.Параметры.СуммаНДС 				= формат(Item.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					СтрокаТаблицы.Параметры.СуммаСНДС 				= формат(Item.Total, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					Таб.Вывести(СтрокаТаблицы);
					
					
				КонецЦикла;
				
				Подвал = Макет.ПолучитьОбласть("ПодвалВсегоПоНакладной");
				Подвал.Параметры.КоличествоМест = формат(XmlTorg12Content.Totals.ParcelsQuantity, "ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.Масса 			= формат(XmlTorg12Content.Totals.GrossQuantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.Количество 	= формат(XmlTorg12Content.Totals.Quantity, "ЧДЦ=3; ЧН=' '; ЧГ=3,0");
				Подвал.Параметры.СуммаБезНДС 	= формат(XmlTorg12Content.Totals.TotalWithVatExcluded, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.СуммаНДС 		= формат(XmlTorg12Content.Totals.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.СуммаСНДС 		= формат(XmlTorg12Content.Totals.Total, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				таб.Вывести(подвал);
				
				
				Если ЗначениеЗаполнено(СтруктураДопПоля.bottom)  и ВизуализироватьДопПоля тогда 
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.bottom;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				подвал = макет.ПолучитьОбласть("ПодвалДокумента");
				подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(XmlTorg12Content.items.Количество() , , ",,,м ,,,,,0");
				подвал.Параметры.ВсегоМестПрописью							= XmlTorg12Content.commons.TotalParcelsQuantityInWords;
				
				подвал.Параметры.МассаНеттоПрописью 						= XmlTorg12Content.commons.TotalQuantityInWords;
				подвал.Параметры.МассаНетто			 						= формат(XmlTorg12Content.commons.TotalQuantity,"ЧДЦ=3; ЧН=' '; ЧГ=3,0" );
				
				подвал.Параметры.МассаГрузаПрописью 						= XmlTorg12Content.commons.TotalGrossQuantityInWords;
				подвал.Параметры.МассаГруза									= формат(XmlTorg12Content.commons.totalGrossQuantity,"ЧДЦ=3; ЧН=' '; ЧГ=3,0" );
				
				подвал.Параметры.СуммаПрописью 								= XmlTorg12Content.commons.TotalSumInWords;
				
				подвал.параметры.КоличествоПриложений 						= формат(XmlTorg12Content.AttachmentSheetsQuantity,"ЧН=' '; ЧГ=3,0");;
				
				подвал.Параметры.ДолжностьРуководителя 					= XmlTorg12Content.SupplyAllowedBy.JobTitle;
				подвал.Параметры.ФИОРуководителя						= ПолучитьФИОПоКонтенту(XmlTorg12Content.SupplyAllowedBy);
				
				подвал.Параметры.ФИОГлавБухгалтера						=  ПолучитьФИОПоКонтенту(XmlTorg12Content.ChiefAccountant);
				
				подвал.Параметры.ДолжностьКладовщика 					= XmlTorg12Content.SupplyPerformedBy.JobTitle;
				подвал.Параметры.ФИОКладовщика							= ПолучитьФИОПоКонтенту(XmlTorg12Content.SupplyPerformedBy);
				
				если  значениеЗаполнено(XmlTorg12Content.SupplyDate) тогда 
					подвал.Параметры.ДатаДокументаМесяц = формат(XmlTorg12Content.SupplyDate,"ДФ=dd.MM.yyyy");
				КонецЕсли;	
				
				
				Если    XmlTorg12BuyerContent<>Неопределено тогда
					подвал.Параметры.ДолжностьГрузПринял 						= XmlTorg12BuyerContent.Accepter.JobTitle;
					подвал.Параметры.ФИОГрузПринял								= ПолучитьФИОПоКонтенту(XmlTorg12BuyerContent.Accepter);
					подвал.Параметры.ДолжностьГрузПолучил 						= XmlTorg12BuyerContent.Receiver.JobTitle;
					подвал.Параметры.ФИОГрузПолучил								= ПолучитьФИОПоКонтенту(XmlTorg12BuyerContent.Receiver);
					подвал.Параметры.ДатаПолученияГруза							= формат(XmlTorg12BuyerContent.ShipmentReceiptDate, "ДФ=dd.MM.yyyy; ДП='  '");
					//ПараметрыДоверенности =   ПолучитьПредставлениеДоверенности(ТитулПолучателя, "Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ложь);
					//Если параметрыДоверенности <> неопределено тогда 
					подвал.Параметры.ДоверенностьНомер 		= XmlTorg12BuyerContent.attorney.Number;
					подвал.Параметры.ДоверенностьДата  		= формат(XmlTorg12BuyerContent.attorney.Date,"ДФ=dd.MM.yyyy; ДП='  '");
					
					подвал.Параметры.ДоверенностьВыдана  	= ПредставлениеДоверенностьВыдана(XmlTorg12BuyerContent.attorney);
					подвал.Параметры.ДоверенностьПолучена   = ПредставлениеДоверенностьПолучена(XmlTorg12BuyerContent.attorney);
					
				КонецЕсли;	
				
				таб.Вывести(подвал);
				
				Если ЗначениеЗаполнено(СтруктураДопПоля.ground)  и ВизуализироватьДопПоля тогда 
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.ground;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;	
				
				Если НЕ XmlTorg12SignatureStructure = Неопределено Тогда
					Таб.Вывести(ВернутьОбласть_ВизуализироватьДанныеПодписи(XmlTorg12SignatureStructure, Макет));
				КонецЕсли;	
				
				возврат таб;
				
			КонецФункции
			
			&НаСервере
			Функция ПолучитьФИОСИнициалами(ФИО) Экспорт
				
				СтрокаФИОСИнициалами=	"";
				
				ИсходнаяСтрока=			ФИО;
				ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
				Фамилия=				Лев(ИсходнаяСтрока, ПозицияПослПробела);
				
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
				Имя=					Лев(ИсходнаяСтрока, ПозицияПослПробела);
				
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				Отчество=				ИсходнаяСтрока;
				ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
				
				Если НЕ ПустаяСтрока(Фамилия) Тогда
					СтрокаФИОСИнициалами=	Фамилия + 
					?(НЕ ПустаяСтрока(Имя), Лев(Имя, 1) + ".", "") +
					?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", "");
				КонецЕсли;
				
				Возврат СтрокаФИОСИнициалами;
				
			КонецФункции
			
			&НаСервере
			Функция ВизуализироватьПолеСВладельцем(SignatureStructure, ЭтоСФ = Ложь)
				
				ФИОSellerSigner=	СокрЛП(SignatureStructure.SellerSigner.Surname) + " " + СокрЛП(SignatureStructure.SellerSigner.FirstName) + " " + СокрЛП(SignatureStructure.SellerSigner.Patronymic);
				ФИОBuyerSigner=		СокрЛП(SignatureStructure.BuyerSigner.Surname) + " " + СокрЛП(SignatureStructure.BuyerSigner.FirstName) + " " + СокрЛП(SignatureStructure.BuyerSigner.Patronymic);
				
				Если НЕ СокрЛП(SignatureStructure.SenderSignature.Certificate.Name) = СокрЛП(ФИОSellerSigner) Тогда
					Возврат Истина;
				ИначеЕсли НЕ ЭтоСФ И НЕ СокрЛП(SignatureStructure.RecipientSignature.Certificate.Name) = СокрЛП(ФИОBuyerSigner) Тогда
					Возврат	Истина;
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецФункции
			
			&НаСервере
			Функция ВернутьОбласть_ВизуализироватьДанныеПодписи(SignatureStructure, Макет, ЭтоСФ=ложь)
				Если ВизуализироватьПолеСВладельцем(SignatureStructure, ЭтоСФ) Тогда
					ВизуализацияЭЦП=	Макет.ПолучитьОбласть("ВизуализацияПодписей");
					ВизуализацияЭЦП.Параметры.ВладелецСертОтправитель=		ПолучитьФИОСИнициалами(SignatureStructure.SenderSignature.Certificate.Name);
					ВизуализацияЭЦП.Параметры.ВладелецСертПолучатель=		ПолучитьФИОСИнициалами(SignatureStructure.RecipientSignature.Certificate.Name);
				Иначе
					ВизуализацияЭЦП=	Макет.ПолучитьОбласть("ВизуализацияПодписейБезВладельца");
				КонецЕсли;
				
				ВизуализацияЭЦП.Параметры.ДатаВыставления=	Формат(SignatureStructure.DocumentMetaData.Timestamp, "ДФ=dd.MM.yyyy");
				ВизуализацияЭЦП.Параметры.ВремяВыставления=	Формат(SignatureStructure.DocumentMetaData.Timestamp, "ДФ=ЧЧ:мм:сс");
				ВизуализацияЭЦП.Параметры.ИДДокумента=		Прав(SignatureStructure.DocumentMetaData.DocumentID, 36);
				
				ВизуализацияЭЦП.Параметры.ПодтверждениеОтправитель=		?(SignatureStructure.SenderSignature.SignatureAuthenticityDate = Неопределено, "Не подтверждена", "Подтверждена");
				ВизуализацияЭЦП.Параметры.ДатаПодписанияОтправитель=	Формат((SignatureStructure.SenderSignature.SignatureAuthenticityDate), "ДФ=dd.MM.yyyy");
				ВизуализацияЭЦП.Параметры.ОрганизацияОтправитель=		SignatureStructure.SenderSignature.Certificate.OrganizationName;
				
				ПредставлениеПодписантаОтправителя=	ПолучитьФИОСИнициалами(ПолучитьФИОПоКонтенту(SignatureStructure.SellerSigner));
				
				ВизуализацияЭЦП.Параметры.ПодписантОтправитель=				ПредставлениеПодписантаОтправителя;
				ВизуализацияЭЦП.Параметры.ПодписантОтправительДолжность=	СокрЛП(SignatureStructure.SellerSigner.JobTitle);
				
				Если ЗначениеЗаполнено(SignatureStructure.RecipientSignature.Certificate.Name) Тогда
					
					ВизуализацияЭЦП.Параметры.ПодтверждениеПолучатель=	?(SignatureStructure.RecipientSignature.SignatureAuthenticityDate = Неопределено, "Не подтверждена", "Подтверждена");
					ВизуализацияЭЦП.Параметры.ДатаПодписанияПолучатель=	Формат((SignatureStructure.RecipientSignature.SignatureAuthenticityDate), "ДФ=dd.MM.yyyy");
					ВизуализацияЭЦП.Параметры.ОрганизацияПолучатель=	SignatureStructure.RecipientSignature.Certificate.OrganizationName;
					
					ПредставлениеПодписантаПолучателя=	ПолучитьФИОСИнициалами(?(ЭтоСФ,SignatureStructure.RecipientSignature.Certificate.Name  ,ПолучитьФИОПоКонтенту(SignatureStructure.BuyerSigner)));
					
					ВизуализацияЭЦП.Параметры.ПодписантПолучатель=			ПредставлениеПодписантаПолучателя;
					ВизуализацияЭЦП.Параметры.ПодписантПолучательДолжность=	СокрЛП(SignatureStructure.BuyerSigner.JobTitle);
					
				КонецЕсли;
				
				возврат ВизуализацияЭЦП;
			КонецФункции
			
		//} Визуализация Torg12
		
		//{ Валидация Torg12
		
			&НаСервере
			функция ПроверитьМаксимальнуюДлинуПрото(ЗначениеПоля, ПредставлениеПоля, МаксимальнаяДлина, род="м", ОбязательноеЗаполнение = ложь)
				если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
					если род = "ж" тогда 
						глагол = "указана"
					ИначеЕсли род="с" тогда 
						глагол = "указано"
					Иначе 
						глагол = "указан"
					КонецЕсли;
					возврат  "<p>не "+глагол+" "+ПредставлениеПоля+"</p>
					|"
				конецЕсли;
				
				если род = "ж" тогда 
					глагол = "должна"
				ИначеЕсли род="с" тогда 
					глагол = "должно"
				Иначе 
					глагол = "должен"
				КонецЕсли;	
				
				Если стрДлина(сокрЛП(ЗначениеПоля))>МаксимальнаяДлина тогда 
					возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") не "+глагол+" быть длиннее "+МаксимальнаяДлина+" символов</p>"
				иначе 
					возврат ""
				КонецЕсли;	
			КонецФункции
			
			&НаСервере
			функция ПроверитьФорматДатыПрото(ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение = ложь)  
				если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
					возврат  "<p>не указана "+ПредставлениеПоля+"</p>
					|"
				конецЕсли;
				
				Если ТипЗнч(ЗначениеПоля) = тип("Дата") тогда 
					Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') тогда 
						возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") тогда 	
					ДатаГод = прав(ЗначениеПоля, 4);
					Если (ДатаГод <"1800") или (ДатаГод >"2099") тогда 
						возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
					КонецЕсли;
				КонецЕсли;
				
				возврат ""
			КонецФункции
			
			&НаСервере
			функция УмножитьВектора(ИНН, Множители)
				Результат = 0;
				н=0;
				пока найти(Множители, ":")>0 цикл 
					н = н+1;
					Множитель = число(лев(Множители, найти(Множители, ":")-1));
					Множители = прав(Множители, СтрДлина(Множители)- найти(Множители, ":"));
					
					Результат = Результат + Множитель * число(сред(ИНН, н, 1));
				КонецЦикла;	
				
				возврат Результат;
				
			КонецФункции
			
			&НаСервере
			функция КонтрольнаяСуммаИННЮЛСовпадает(ИНН)
				КС = умножитьВектора(ИНН, "2:4:10:3:5:9:4:6:8:");
				возврат ((кс % 11) % 10)=число(сред(ИНН, 10, 1))
			конецфункции
			
			&НаСервере
			функция КонтрольнаяСуммаИННФЛСовпадает(ИНН)
				КС1 = УмножитьВектора(ИНН, "7:2:4:10:3:5:9:4:6:8:");
				КС2 = УмножитьВектора(ИНН, "3:7:2:4:10:3:5:9:4:6:8:");
				возврат  (((кс1 % 11) % 10)=число(сред(ИНН, 11, 1))) и (((кс2 % 11) % 10)=число(сред(ИНН, 12, 1)))
			КонецФункции
			
			&НаСервере
			функция ПроверитьСтруктуруКонтрагентаДляТОРГ12(OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=ложь)
				//ТипСтруктуры =1 : юридический адрес
				//ТипСтруктуры =2 : фактический адрес
				НаименованиеСистемы = МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
				списокОшибок = "";
				
				//проверяем наименование
				Если ЗначениеЗаполнено(OrganizationInfo.Name)=ложь тогда 
					СписокОшибок = СписокОшибок +"<p>не указано название организации</p>";
				ИначеЕсли (OrganizationInfo.IsSoleProprietor=истина) и (найти(OrganizationInfo.Name, " ")=0) тогда 
					СписокОшибок = СписокОшибок +"<p>не указано имя индивудуального предпринимателя</p>";
				Иначе 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Name, "наименование контрагента", 1000, "с");
				КонецЕсли; 
				
				если не(ПроверкаДляСФ и (типСтруктуры=2) ) тогда 
					//проверяем ИНН
					Если ЗначениеЗаполнено(OrganizationInfo.Inn) тогда 
						ИНН = OrganizationInfo.Inn;
						если OrganizationInfo.IsSoleProprietor=ложь тогда 
							//ЮЛ
							Если стрДлина(ИНН)<>10 тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен иметь длину 10 цифр</p>
								|";		
							ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2)="00"	тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли  КонтрольнаяСуммаИННЮЛСовпадает(ИНН)  =ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						Иначе 
							//ФЛ
							Если стрДлина(ИНН)<>12 тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента-индивидуального предпринимателя ("+ИНН+") должен иметь длину 12 цифр</p>
								|";		
							ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
								|";	
							ИначеЕсли лев(ИНН, 2)="00"	тогда 
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
								|";	
							ИначеЕсли  КонтрольнаяСуммаИННФЛСовпадает(ИНН)  =ложь тогда
								списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
								|";	
							КонецЕсли;	
						КонецЕсли;
					ИначеЕсли ТипСтруктуры = 1 тогда 
						списокОшибок = списокОшибок +"<p>ИНН контрагента не указан</p>";
						
					конецЕсли;	
					
					//проверяем КПП
					Если ЗначениеЗаполнено(OrganizationInfo.Kpp) тогда 
						КПП = OrganizationInfo.Kpp;
						Если стрДлина(КПП)<>9 тогда 
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен иметь длину 9 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(КПП) = ложь тогда
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2)="00"	тогда 
							списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") не должен начинаться с двух нулей</p>
							|";	
						КонецЕсли;
					ИначеЕсли OrganizationInfo.IsSoleProprietor=ложь
						// {RGS  09.02.2016 16:52:47 - 
						И OrganizationInfo.Ссылка.СтранаРегистрации.Код = "643"
						// }RGS  09.02.2016 16:52:49 - 
						И ПроверкаДляСФ тогда
						списокОшибок = списокОшибок +"<p>КПП контрагента не указано</p>";
					КонецЕсли;
				КонецЕсли;
				//проверяем адрес
				ТекстОшибкиАдрес = "";
				Если СтруктураКонтентаЗаполнена(OrganizationInfo.Address) тогда 
					Address = OrganizationInfo.Address;
					
					если Address.IsForeign=ложь тогда 
						ZipCode  = Address.ZipCode;
						Если ЗначениеЗаполнено( ZipCode) = ложь тогда 
						Иначеесли СтрДлина(сокрЛП(ZipCode))<>6 тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен иметь длину 6 цифр</p>
							|";		
						ИначеЕсли  ТолькоЦифры(сокрЛП(ZipCode)) = ложь тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен состоять из цифр</p>
							|";	
						КонецЕсли; 
						
						Region  =Address.RegionCode;
						Если ЗначениеЗаполнено(Region)=ложь тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан регион</p>
							|";		
						ИначеЕсли Region = "##" тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Наименование региона указано не по классификатору</p>
							|";		
						ИначеЕсли (стрДлина(Region)>2)  или (стрДлина(Region)=0) тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен иметь длину 2 символа</p>
							|";		
						ИначеЕсли ТолькоЦифры(Region)=ложь тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен состоять из цифр</p>
							|";		
						КонецЕсли;	
						
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Territory,"наименование района", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.City,"наименование города", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Locality,"наименование населенного пункта", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Street,"наименование улицы", 50, "с");
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Building,"номер дома", 20);
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Block,"номер корпуса", 20);
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Apartment,"номер квартиры", 20);
						
					ИначеЕсли СтруктураКонтентаЗаполнена(Address) тогда 
						Country  = Address.CountryCode;
						AddressName  = Address.AddressText;
						
						Если ЗначениеЗаполнено(Country) тогда 
							Если стрДлина(Country)<>3 тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен иметь длину 3 символа</p>
								|";		
							ИначеЕсли толькоцифры(Country)=ложь тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен состоять из цифр</p>
								|";
							ИначеЕсли Country = "643" Тогда
								// { RGS TChubarova 25.12.2015 14:23:49 - 
								//ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Российский адрес задан как иностранный</p>
								//|";
								Region  =Address.RegionCode;
								rgsЕстьОшибкаКодаРегиона = Ложь;
								Если ЗначениеЗаполнено(Region)=ложь 
									ИЛИ Region = "##" 
									ИЛИ (стрДлина(Region)>2)  или (стрДлина(Region)=0) 
									ИЛИ ТолькоЦифры(Region)=ложь тогда 
									rgsЕстьОшибкаКодаРегиона = Истина;		
								КонецЕсли;	
								Если rgsЕстьОшибкаКодаРегиона Тогда 
									ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан код региона в российском адресе</p>
									|";
								КонецЕсли;
								// } RGS TChubarova 25.12.2015 14:30:45 - 
								
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(AddressName) = ложь  тогда 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан адрес внутри страны</p>
								|";	
							Иначе 
								ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(AddressName,"строковое представление адреса", 255, "с");
							КонецЕсли;	
						Иначе 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Адрес должен быть указан как ""Российский адрес""</p>
							|";	
						КонецЕсли;	
					Иначе 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
					КонецЕсли;	
				ИначеЕсли ПроверкаДляСФ тогда	
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
				КонецЕсли;	
				
				Если ТекстОшибкиАдрес <> "" тогда 
					списокОшибок = списокОшибок + "<p><b>Ошибки в "+?(ТипСтруктуры=1, "юридическом", "фактическом")+" адресе:</b></p>"+ТекстОшибкиАдрес;
				КонецЕсли; 
				
				если ПроверкаДляСФ=ложь тогда
					
					Если ЗначениеЗаполнено(OrganizationInfo.Okopf) тогда 
						ОКОПФ = OrganizationInfo.Okopf;
						Если стрДлина(ОКОПФ)<>2 тогда 
							списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
							|";		
						ИначеЕсли ТолькоЦифры(ОКОПФ) = ложь тогда
							списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Okpo) тогда 
						ОКПО = OrganizationInfo.Okpo;
						Если стрДлина(ОКПО)<>8 и стрДлина(ОКПО)<>10 тогда 
							списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен иметь длину 8 или 10 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(ОКПО) = ложь тогда
							списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Phone) тогда 
						ОшибкиТелефона = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Phone, "Номер телефона контрагента", 20);
						Если ОшибкиТелефона <>"" тогда 
							списокОшибок = списокОшибок +  ОшибкиТелефона +"<p>Для передачи через "+НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.Fax) тогда 
						ОшибкиФакса = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Fax, "Номер факса контрагента", 20);
						Если ОшибкиФакса <>"" тогда 
							списокОшибок = списокОшибок +  ОшибкиФакса +"<p>Для передачи через "+НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(OrganizationInfo.BankId) тогда 
						BankId = OrganizationInfo.BankId;
						Если стрДлина(BankId)<>9 тогда 
							списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен иметь длину 9 цифр</p>
							|";		
						ИначеЕсли ТолькоЦифры(BankId) = ложь тогда
							списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен состоять из цифр</p>
							|";	
						КонецЕсли;
						
					КонецЕсли;
					
				конецЕсли;
				
				Возврат СписокОшибок;
				
			КонецФункции	
			
			&НаСервере
			функция ВалидацияXmlTorg12Content(Знач XmlTorg12Content) Экспорт
				
				СписокОшибок = "";
				
				Если ЗначениеЗаполнено(XmlTorg12Content.Date) = Ложь  Тогда 
					СписокОшибок = СписокОшибок +  "<p>Не указана дата документа</p>";
				Иначе 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(XmlTorg12Content.Date, "дата документа");
				КонецЕсли;
				
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(XmlTorg12Content.Number, "номер документа", 256);
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Seller) тогда 
					
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Seller, 1);
					если ОшибкиКонтрагента <> "" тогда
						Поставщик =  XmlTorg12Content.Seller.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
					
					параметрыПодписания = ПолучитьПараметрыПодписанияТ12вДиадок(XmlTorg12Content.Seller.Ссылка);
					Если (НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) И НЕ ПараметрыПодписания.СпособПодписания = "2")
						ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
						СписокОшибок = СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
							СписокОшибок = списокОшибок +  "<p>Отсутствует должность подписанта</p>";
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
							СписокОшибок = списокОшибок +  "<p>Отсутствует ФИО подписанта</p>";
						КонецЕсли;
						
						СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						
					КонецЕсли;
				Иначе
					СписокОшибок = списокОшибок +  "<p>Отсутствуют данные о поставщике</p>";
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Shipper) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Shipper, 2);
					если ОшибкиКонтрагента <> "" тогда
						Грузоотправитель =  XmlTorg12Content.Shipper.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="""+?(типЗнч(Грузоотправитель)=тип("СправочникСсылка.Контрагенты"), "КОНТРАГЕНТ:", "ОРГАНИЗАЦИЯ:")+Грузоотправитель.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Buyer) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Buyer, 1);
					если ОшибкиКонтрагента <> "" тогда
						Покупатель =  XmlTorg12Content.Buyer.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Покупатель.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Consignee) тогда 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Consignee, 2);
					если ОшибкиКонтрагента <> "" тогда
						Грузополучатель =  XmlTorg12Content.Consignee.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Грузополучатель.УникальныйИдентификатор()+""">грузополучателе</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;	
				КонецЕсли;		
				
				Если ЗначениеЗаполнено( XmlTorg12Content.GroundDate) тогда 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(XmlTorg12Content.GroundDate, "дата договора");
				КонецЕсли;
				
				Если (XmlTorg12Content.Items.Количество()=0) тогда
					СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
				Иначе 
					СписокОшибокВКлассификаторах = "";
					ц = 0;
					ОшибкаЕИНеНайдена = ложь;
					ОшибкаЕИНеТотКод = ложь;
					СписокПроверенныхЕИ = новый СписокЗначений;
					
					для каждого Item из  XmlTorg12Content.Items цикл 
						ОшибкиВСтроке = "";
						ц = ц+1;
						если ЗначениеЗаполнено(Item.Product)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано наименование товара</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.UnitName)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано наименование единицы измерения товара</p>"
						КонецЕсли;	
						
						Если ЗначениеЗаполнено(Item.UnitCode) тогда 
							СписокОшибокВКлассификаторах = СписокОшибокВКлассификаторах+ ПроверитьЕИ(Item.СсылкаНаЕИ, сокрЛП(Item.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
						КонецЕсли;	  
						Если (ЗначениеЗаполнено(Item.Quantity)) И (Item.Quantity<0) тогда 
							ОшибкиВСтроке = ОшибкиВСтроке + 
							"<p>Количество не может быть отрицательным</p>
							|";
						КонецЕсли;	
						если ЗначениеЗаполнено(Item.Quantity)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указано количество товара</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.TaxRate)=Ложь Тогда
							//		  ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана ставка налога</p>"
						ИначеЕсли Item.TaxRate = "##"	  тогда 
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>указана недопустимая ставка налога</p>"
						КонецЕсли;	  
						если ЗначениеЗаполнено(Item.Total)=Ложь Тогда
							ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана общая сумма по строке</p>"
						КонецЕсли;	  
						
						если ОшибкиВСтроке <> "" тогда 
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в строке "+ц+" табличной части</h3>
							|"+ОшибкиВСтроке
						КонецЕсли;	
						
					КонецЦикла;	  
					Если 	СписокОшибокВКлассификаторах <> "" тогда 
						СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
						|<p>"+СписокОшибокВКлассификаторах+"</p>
						|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
					конецЕсли;	
				КонецЕсли;
				
				если (СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyAllowedBy)= ложь) И (СтруктураКонтентаЗаполнена(XmlTorg12Content.ChiefAccountant)=ложь)  
					И (СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyPerformedBy)=ложь) тогда 
					списокОшибок = списокОшибок + "<p>Не указано ни одного лица, подписавшего документ. Заполните ответственных лиц организации: руководителя или главного бухгалтера. </p>"		;
				КонецЕсли;	
				
				списокОшибок = ОформитьОшибкиВHTML(списокОшибок, "При формировании накладной обнаружены ошибки");
				
				Возврат СписокОшибок;
				
			Конецфункции	
			
		//} Валидация Torg12
		
	//} Torg12
	
	//{ Invoice
		
		//{ Визуализация Invoice
		
			&НаСервере
			Функция ПредставлениеИННКПП(CounteragentContent)
				ИНН =   CounteragentContent.inn;
				КПП =   CounteragentContent.kpp;
				Если стрДлина(ИНН)=10  тогда 
					возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/"+?(ЗначениеЗаполнено(КПП), КПП, "-");
				Иначе 
					возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/-";    
				КонецЕсли;
			КонецФункции	
			
			&НаСервере
			функция ПредставлениеГОП(Counteragent);
				если  СтруктураКонтентаЗаполнена(Counteragent) тогда
					НаимОрг = Counteragent.name;                                  	
					Адрес =  СформироватьПредставлениеАдресаПоContent(Counteragent.address);
					
					возврат НаимОрг + ?(ЗначениеЗаполнено(Адрес), ", "+Адрес, Адрес);
				иначе 
					возврат ""
				конецЕсли;	
			конецФункции	
			
			&НаСервере
			Функция ПолучитьНаименованиеСтраныПоКоду(КодОКСМ)
				
				ОКСМ= МетодСервера(,"КлассификаторыДляДиадок").ОКСМ;
				
				если ЗначениеЗаполнено(КодОКСМ) тогда
					ВыборкаИзКлассификатора = ОКСМ.найтиСтроки(Новый Структура("Код",КодОКСМ ));
					Если выборкаИзКлассификатора.количество()>0 тогда
						возврат ВыборкаИзКлассификатора[0].НаименованиеКраткое
					КонецЕсли;
				КонецЕсли;		
				возврат ""	
			КонецФункции				
			
			&НаСервере
			Функция СформироватьПечатнуюФормуПоInvoiceContent(Знач Content, Знач ВизуализироватьДопПоля) Экспорт
				
				InvoiceContent=				Content.InvoiceContent;
				InvoiceSignatureStructure=	?(Content.Свойство("InvoiceSignatureStructure"), Content.InvoiceSignatureStructure, Неопределено);
				
				Если InvoiceContent.Свойство("AdditionalInfo") Тогда
					СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(InvoiceContent.AdditionalInfo);
				Иначе
					СтруктураДопПоля=	РазобратьДопПоле(InvoiceContent.StructedAdditionalInfos);
				КонецЕсли;
				
				Макет = ЭтотОбъект.ПолучитьМакет("СФ1137");
				Таб   = Новый ТабличныйДокумент;
				
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка = Макет.ПолучитьОбласть("Шапка");
				
				Шапка.Параметры.ДатаСФ  				= формат(InvoiceContent.date, "ДФ=dd.MM.yyyy");
				Шапка.Параметры.НомерСФ 				= InvoiceContent.Number;
				Шапка.Параметры.ДатаИсправления  		= ?(ЗначениеЗаполнено(InvoiceContent.InvoiceRevisiondate),формат(InvoiceContent.InvoiceRevisiondate, "ДФ=dd.MM.yyyy"), "-") ;
				Шапка.Параметры.НомерИсправления 		= ?(ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber),InvoiceContent.InvoiceRevisionNumber, "-") ;
				
				Шапка.Параметры.НаименованиеПродавца 	= InvoiceContent.seller.name;
				Шапка.Параметры.АдресПродавца 			=  СформироватьПредставлениеАдресаПоContent(InvoiceContent.seller.address);
				Шапка.Параметры.ИННКПППродавца  		= ПредставлениеИННКПП(InvoiceContent.seller );
				
				ПРС = "";
				Для каждого  стр из   InvoiceContent.PaymentDocuments цикл 
					ДатаПРД								=   стр.Date;
					НомерПРД							=   стр.Number;
					ПРС = ?(ПРС="", "", ПРС+", ")+  ?(ЗначениеЗаполнено(НомерПРД) или ЗначениеЗаполнено(ДатаПРД),  "№ "+НомерПРД+" от "+формат(ДатаПРД, "ДФ=dd.MM.yyyy"), "");
				КонецЦикла;	
				Шапка.параметры.ПРС = ПРС;
				Если InvoiceContent.Shipper.SameAsSellerOrBuyer=истина тогда 
					Шапка.Параметры.Грузоотправитель = "он же"
				Иначе  
					Шапка.Параметры.Грузоотправитель = ПредставлениеГОП(InvoiceContent.Shipper); 
				КонецЕсли;
				
				
				Шапка.Параметры.Грузополучатель = ПредставлениеГОП(InvoiceContent.Consignee); 
				Шапка.Параметры.НаименованиеПокупателя =InvoiceContent.Buyer.name;
				Шапка.Параметры.АдресПокупателя =   СформироватьПредставлениеАдресаПоContent(InvoiceContent.Buyer.address);
				Шапка.Параметры.ИННКПППокупателя =  ПредставлениеИННКПП(InvoiceContent.Buyer );
				
				если значениеЗаполнено(InvoiceContent.валютаСсылка) тогда 
					//если валюта заполнена - передаем наименование как в справочнике 1С
					НаименованиеВалюты  =   InvoiceContent.валютаСсылка.наименованиеПолное;
				Иначе 	
					ВыборкаВалют =  МетодСервера(,"КлассификаторыДляДиадок").ОКВ.найтиСтроки(Новый Структура("Код", InvoiceContent.currency));
					НаименованиеВалюты = ?(ВыборкаВалют.количество()=0, "", ВыборкаВалют[0].Наименование);
				КонецЕсли;	
				Шапка.Параметры.Валюты = ?(ЗначениеЗаполнено(НаименованиеВалюты),НаименованиеВалюты, "-")+", "+?(ЗначениеЗаполнено(InvoiceContent.currency), InvoiceContent.currency, "-");
				
				Если ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПродавца)=Ложь тогда 
					Шапка.Параметры.НаименованиеПродавца = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.АдресПродавца)=Ложь тогда 
					Шапка.Параметры.АдресПродавца = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.Грузоотправитель)=Ложь тогда 
					Шапка.Параметры.Грузоотправитель = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.Грузополучатель)=Ложь тогда 
					Шапка.Параметры.Грузополучатель = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.НаименованиеПокупателя)=Ложь тогда 
					Шапка.Параметры.НаименованиеПокупателя = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.АдресПокупателя)=Ложь тогда 
					Шапка.Параметры.АдресПокупателя = "-";
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.Параметры.ПРС)=Ложь тогда 
					Шапка.Параметры.ПРС = "-";
				КонецЕсли;
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				ц = 0;
				для каждого Item из InvoiceContent.Items цикл 
					
					Если ВизуализироватьДопПоля Тогда
						
						Если Item.Свойство("AdditionalInfo") Тогда
							Если ЗначениеЗаполнено(Item.AdditionalInfo) Тогда
								Строка = Макет.ПолучитьОбласть("СтрокаСДопПолем");
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(Item.AdditionalInfo);
							Иначе
								Строка = Макет.ПолучитьОбласть("Строка");	
							КонецЕсли;
						ИначеЕсли Item.Свойство("StructedAdditionalInfos") Тогда
							Если Item.StructedAdditionalInfos.Количество() >0 Тогда
								Строка = Макет.ПолучитьОбласть("СтрокаСДопПолем");
								
								СтруктураДопПоляТЧ = РазобратьДопПоле(Item.StructedAdditionalInfos);
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(СтруктураДопПоляТЧ.top);
							Иначе
								Строка = Макет.ПолучитьОбласть("Строка");
							КонецЕсли;
						КонецЕсли; 
						
					Иначе	
						Строка = Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
					
					ц=ц+1;
					Строка.Параметры.НаимТов 			= ?(ЗначениеЗаполнено(Item.Product) , Item.Product, "-");
					Строка.Параметры.ОКЕИ_Тов 			= ?(ЗначениеЗаполнено(Item.UnitCode), Item.UnitCode, "-");
					НаименованиеЕИ =  ?(ЗначениеЗаполнено(Item.UnitCode),ПолучитьНаименованиеЕИПоКоду(СокрЛП(Item.UnitCode)), "");
					Строка.Параметры.НаимЕИ				= ?(ЗначениеЗаполнено(НаименованиеЕИ), НаименованиеЕИ, "-");
					строка.Параметры.КолТов 			= ?(ЗначениеЗаполнено(Item.Quantity), Формат(Число(Item.Quantity),"ЧН=; ЧГ=3,0"), "-");
					строка.Параметры.ЦенаТов 			= ?(ЗначениеЗаполнено(Item.Price), Формат(Число(Item.Price),"ЧН=; ЧГ=3,0"), "-");
					строка.Параметры.СтТовБезНДС 		= ?(ЗначениеЗаполнено(Item.TotalWithVatExcluded), формат(Item.TotalWithVatExcluded,  "ЧДЦ=2; ЧН=; ЧГ=3,0" ), "-");
					Если ЗначениеЗаполнено(Item.Vat) = Истина ИЛИ Item.Vat = 0 Тогда
						строка.Параметры.СуммаНДС		= формат(Item.Vat,  "ЧДЦ=2; ЧН=; ЧГ=3,0" );
					Иначе
						строка.Параметры.СуммаНДС		= "без НДС";
					КонецЕсли;
					строка.Параметры.СтТовУчНал 		= ?(ЗначениеЗаполнено(Item.Total), формат(Item.Total,  "ЧДЦ=2; ЧН=; ЧГ=3,0" ), "-");
					строка.Параметры.Акциз              = ?(ЗначениеЗаполнено(Item.Excise) , Item.Excise, "без акциза");
					строка.Параметры.НалСт              = ПредставлениеСтавкиНДС(Item.TaxRate) ;
					строка.Параметры.КодПроисх          = ?(ЗначениеЗаполнено(Item.CountriesOfOrigin), Item.CountriesOfOrigin, "-");
					СтранаПроисх 						= ПолучитьНаименованиеСтраныПоКоду(Item.CountriesOfOrigin);
					строка.Параметры.СтранаПроисх		= ?(ЗначениеЗаполнено( СтранаПроисх), СтранаПроисх, "-");
					строка.Параметры.НомерТД            = ?(ЗначениеЗаполнено(Item.CustomsDeclarationNumbers), Item.CustomsDeclarationNumbers, "-");
					Таб.Вывести(Строка);
					
				КонецЦикла;
				
				Подвал = Макет.ПолучитьОбласть("Подвал");
				
				Подвал.Параметры.ВсегоСтТовБезНалВс = формат(InvoiceContent.Totals.TotalWithVatExcluded,  "ЧДЦ=2; ЧН=-; ЧГ=3,0" );
				Если ЗначениеЗаполнено(InvoiceContent.Totals.Vat) ИЛИ InvoiceContent.Totals.Vat = 0 Тогда
					Подвал.Параметры.ВсегоСумНДСВс = формат(InvoiceContent.Totals.Vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Иначе
					Подвал.Параметры.ВсегоСумНДСВс = "без НДС";
				КонецЕсли;
				Подвал.Параметры.ВсегоСтТовУчНалВс = формат(InvoiceContent.Totals.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				
				Таб.вывести(Подвал);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подписи= Макет.ПолучитьОбласть("Подписи");
				
				если InvoiceContent.Signer.IsSoleProprietor тогда 
					Подписи.параметры.ПодписантФЛ  = ПолучитьФИОПоКонтенту(InvoiceContent.Signer);
					Подписи.Параметры.НомерСВ	  = InvoiceContent.Signer.SoleProprietorRegistrationCertificate;
					Подписи.Параметры.ЭПФЛ = "Электронная подпись";
				Иначе 
					Подписи.параметры.ПодписантЮЛ  = ПолучитьФИОПоКонтенту(InvoiceContent.Signer);
					Подписи.Параметры.ЭПЮЛ = "Электронная подпись";
				КонецЕсли;	
				
				Таб.вывести(Подписи);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ InvoiceSignatureStructure = Неопределено Тогда
					
					Таб.Вывести(ВернутьОбласть_ВизуализироватьДанныеПодписи(InvoiceSignatureStructure, Макет, истина));
					
				КонецЕсли;	
				
				Возврат Таб;
				
			КонецФункции	 
			
		//} Визуализация Invoice
		
		//{ Валидация INVOICE
		
			&НаСервере
			функция  ПроверитьОшибкиВСтрокеСФ(item) 
				СписокОшибокСтроки = "";
				
				Если значениеЗаполнено(Item.Product)=ложь тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Не указано наименование товара</p>
					|";
				Иначе 
					СписокОшибокСтроки = СписокОшибокСтроки +ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с");
				КонецЕсли;
				
				Если item.TaxRate = "##"	  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
				КонецЕсли;
				
				Если ЗначениеЗаполнено(item.unitCode) тогда 
					если стрДлина(сокрЛП(item.unitCode))<3 
						ИЛИ стрДлина(сокрЛП(item.unitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+item.unitCode+") указан код недопустимой длины</p>   
						|";
					ИначеЕсли 	ТолькоЦифры(СокрЛП(item.unitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+item.unitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Item.quantity) и (Item.quantity<0)  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки + 
					"<p>Количество не может быть отрицательным</p>
					|";
				КонецЕсли;	
								
				если ЗначениеЗаполнено(Item.Total)=Ложь Тогда
					СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
				КонецЕсли;	
				
				если Найти(Строка(item.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС не указана</p>
					|";
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Item.СтранаПроисхожденияСсылка)
					И НЕ ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Не заполнен номер ГТД</p>
					|";
				КонецЕсли;				
				
				Если (стрДлина(сокрЛП(Item.CustomsDeclarationNumbers))>29)  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Длина номера ГТД превышает максимальное органичение в 29 символов</p>
					|";
				КонецЕсли;		
				
				возврат СписокОшибокСтроки ;
			конецфункции 
			
			&НаСервере
			функция СформироватьСсылкуНаДокумент(ИдЯщика, ИдДокумента, ТекстСсылки) 
				возврат "<a href=""КАРТОЧКА:"+ИдЯщика+":"+ИдДокумента+"""a>"+ТекстСсылки+"</a>"
			конецФункции
			
			&НаСервере
			функция ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка) 
				Возврат "";
				////если у нас есть основание в ДД- проверяем совпадение реквизитов
				////на нет - и суда нет. 
				//Докоснование =  ПолучитьОснованиеКСФ(ДокументСсылка) ;
				//Если ЗначениеЗаполнено(Докоснование)=Ложь тогда
				//	возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
				//КонецЕсли;
				//
				//docId =     Документ_2_DocumentID(Докоснование);
				//Если ЗначениеЗаполнено(DocId)=Ложь тогда 
				//	возврат ""; //"Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы
				//КонецЕсли;
				//
				//Organization = ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
				//Document =  Organization.getDocumentById(docId);
				//
				//ТекстОшибки = "";
				//если  НачалоДня(Document.DocumentDate)<>началоДня(InvoiceContent.date) тогда 
				//	ТекстОшибки = ТекстОшибки + "
				//	|Дата исправляемого счета-фактуры: " +  формат(Document.DocumentDate, "ДФ=dd.MM.yyyy")+"</p>";
				//КонецЕсли;
				//если  Document.DocumentNumber<>InvoiceContent.Number тогда 
				//	ТекстОшибки = ТекстОшибки + "
				//	|Номер исправляемого счета-фактуры: " +  Document.DocumentNumber+"</p>";
				//КонецЕсли;
				//
				//Если ТекстОшибки<>"" тогда 
				//	ТекстОшибки = 
				//	" <h3>В исправлении неверно указаны реквизиты исправляемого"+ СформироватьСсылкуНаДокумент(Organization.Id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//КонецЕсли;
				//
				//возврат ТекстОшибки;
				
			КонецФункции	
			
			&НаСервере
			функция ПроверитьКлассификаторыСФ(InvoiceContent)
				
				СписокОшибокЕИ = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				СписокОшибокВСтранах = "";
				ОшикбаСтраныНеНайдена = ложь;
				ОшибкаСтраныНетотКод = ложь;
				СписокПроверенныхСтран = новый СписокЗначений;
				
				Для каждого item из InvoiceContent.Items цикл 
					
					Если ЗначениеЗаполнено(Item.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ(Item.ЕдиницаИзмеренияССылка, СокрЛП(Item.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Item.CountriesOfOrigin) тогда 
						СписокОшибокВСтранах = СписокОшибокВСтранах+ ПроверитьСтрану( Item.СтранаПроисхожденияССылка, Item.CountriesOfOrigin, СписокПроверенныхСтран, ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод);
					КонецЕсли;	
					
				конецЦикла;	
				
				ОшибкаВалютыНеНайдена = ложь;
				ОшибкаВалютыНеТотКод = ложь;	
				СписокОшибокВалюта =  ПроверитьВалюту(InvoiceContent.ВалютаСсылка, InvoiceContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
				
				Если  СписокОшибокВалюта<>"" тогда 
					СписокОшибокВалюта = "
					//|<h3>При указании валюты документа: </h3>
					|<p>"+СписокОшибокВалюта+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
				КонецЕсли;
				
				
				Если 	СписокОшибокЕИ <> "" тогда 
					СписокОшибокЕИ = "
					|<p>"+СписокОшибокЕИ+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	  
				
				Если  СписокОшибокВСтранах<>"" тогда 
					СписокОшибокВСтранах = "
					//|<h3>При указании Страны происхождения: </h3>
					|<p>"+СписокОшибокВСтранах+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКСТРАН"">справочник стран мира</a> и приведите "+строкаЧтоМенять(ОшикбаСтраныНеНайдена, ОшибкаСтраныНетотКод)+" стран в соответствие с классификатором</p>";
				КонецЕсли;
				
				Если СписокОшибокЕИ<>""  или 	 СписокОшибокВСтранах<>""  Или  СписокОшибокВалюта<>""  тогда 
					возврат  "<h3>Ошибки в классификаторах: </h3> 
					|"+	СписокОшибокЕИ+СписокОшибокВСтранах+ СписокОшибокВалюта;
				Иначе 
					возврат "";
				КонецЕсли;	
				
			конецФункции
			
			&НаСервере
			функция ВалидацияInvoiceContent(InvoiceContent, ДокументСсылка) Экспорт
				
				списокОшибок = "";
				
				Если InvoiceContent.Signer.IsSoleProprietor Тогда
					Если НЕ ЗначениеЗаполнено(InvoiceContent.Signer.SoleProprietorRegistrationCertificate) Тогда
						СписокОшибок = СписокОшибок + 
						"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации)</p>";						
					КонецЕсли;
				КонецЕсли;
				
				если InvoiceContent.items.Количество()=0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Отсутствует табличная часть документа</p> ";
				КонецЕсли;
				
				если  СтруктураКонтентаЗаполнена(InvoiceContent.seller ) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Seller, 1, истина);
					если ошибка <> "" тогда
						ТипПродавца =?(ТипЗнч(InvoiceContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
				КонецЕсли;	
				
				если  СтруктураКонтентаЗаполнена(InvoiceContent.Shipper) тогда 
					если  InvoiceContent.Shipper.SameAsSellerOrBuyer =ложь тогда
						ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Shipper, 2, истина);
						если ошибка <> "" тогда
							ТипГрузоотправителя =?(ТипЗнч(InvoiceContent.Shipper.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в данных о <a href="+ТипГрузоотправителя+InvoiceContent.Shipper.Ссылка.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
							|"+ ошибка;
						КонецЕсли;	
					КонецЕсли;	
					
				КонецЕсли;	
				
				если     СтруктураКонтентаЗаполнена(InvoiceContent.Buyer) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Buyer, 1, истина);
					если ошибка <> "" тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
				КонецЕсли;	
				
				Если ИспользоватьКастомныйАдресГрузополучателя() = Ложь Тогда
					Если СтруктураКонтентаЗаполнена(InvoiceContent.Consignee) Тогда 
						Ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Consignee, 2, истина);
						Если Ошибка <> "" Тогда
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Consignee.Ссылка.УникальныйИдентификатор()+""">грузополучателе</a></h3>
							|"+ Ошибка;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
				если ЗначениеЗаполнено(InvoiceContent.Number)=Ложь тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не указан номер счета-фактуры</p>
					|";
				Иначе  
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.Number,"номер счета-фактуры", 256, "м");
				КонецЕсли;
				
				если ЗначениеЗаполнено(InvoiceContent.date)=Ложь тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не укзана дата счета-фактуры</p>
					|";
				Иначе	
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceContent.date,"дата счета-фактуры");
				КонецЕсли;
				
				Если значениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  значениеЗаполнено(InvoiceContent.InvoiceRevisionNumber) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.InvoiceRevisionNumber,"номер исправления счета-фактуры", 3, "м"); 
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceContent.InvoiceRevisionDate,"дата исправления счета-фактуры");
				КонецЕсли; 	
				
				Если ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber)
					И ТолькоЦифры(сокрЛП(InvoiceContent.InvoiceRevisionNumber))=ложь Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Номер исправления счета-фактуры может состоять только из цифр</p>
					|";
				КонецЕсли;
				
				Если InvoiceContent.PaymentDocuments.Количество() > 10 Тогда
					СписокОшибок = СписокОшибок + 
					"<p>В счет-фактуре указано более 10 платежно-расчетных документов</p>
					|";
				КонецЕсли;
				
				Для каждого стр из InvoiceContent.PaymentDocuments цикл 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(стр.Number,"номер платежно-расчетного документа", 30, "м");
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(стр.Date,"дата платежно-расчетного документа");
				КонецЦикла;	
				
				если ЗначениеЗаполнено(InvoiceContent.Currency)=Ложь  тогда 
					СписокОшибок = СписокОшибок + 
					"<p>Не указан код валюты счета-фактуры</p>
					|";
				ИначеЕсли СтрДлина(сокрЛП(InvoiceContent.Currency))<>3 тогда
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.СвСчФакт.КодОКВ+") должен иметь длину 3 символа</p>
					|";
				Иначеесли ТолькоЦифры(сокрЛП(InvoiceContent.Currency))=ложь тогда		
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.СвСчФакт.КодОКВ+") должен состоять из цифр</p>
					|";	
				КонецЕсли;
				
				ц = 0;
				Для каждого item из InvoiceContent.Items цикл 
					ц = ц+1;
					ОшибкиВСтроке = ПроверитьОшибкиВСтрокеСФ(item);
					если ОшибкиВСтроке <> "" тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке;
					КонецЕсли;	
				конецЦикла;	
				
				СписокОшибок = СписокОшибок+ ПроверитьКлассификаторыСФ(InvoiceContent);
				
				Если  значениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  значениеЗаполнено(InvoiceContent.InvoiceRevisionNumber)  тогда 
					СписокОшибок = СписокОшибок +  ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка); 
				КонецЕсли;
				
				СписокОшибок = ОформитьОшибкиВHTML(СписокОшибок, "При формировании счета-фактуры обнаружены ошибки");
				
				Возврат СписокОшибок;
				
			конецФункции
			
		//} Валидация Invoice
		
	//} Invoice
	
	//{ InvoiceCorrection
		
		//{ Визуализация InvoiceCorrection
		
			&НаСервере	
			Функция Заполнитьпустое(зн)
				возврат ?(ЗначениеЗаполнено(зн) и (зн<>"0"), зн, "-");
			КонецФункции	
			
			&НаСервере
			функция СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Content, ВизуализироватьДопПоля) Экспорт
				
				InvoiceCorrectionContent	= Content.InvoiceCorrectionContent;
				OriginalInvoice 			= InvoiceCorrectionContent.OriginalInvoices[0];
				InvoiceSignatureStructure	= ?(Content.Свойство("InvoiceSignatureStructure"), Content.InvoiceSignatureStructure, Неопределено);
				
				Если InvoiceCorrectionContent.Свойство("AdditionalInfo") Тогда
					СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(InvoiceCorrectionContent.AdditionalInfo);
				Иначе
					СтруктураДопПоля=	РазобратьДопПоле(InvoiceCorrectionContent.StructedAdditionalInfos);
				КонецЕсли;
				
				Макет = ЭтотОбъект.ПолучитьМакет("КСФ1137");
				Таб   = Новый ТабличныйДокумент;
				
				Колонтитул= Макет.ПолучитьОбласть("Колонтитул");
				Таб.Вывести(Колонтитул);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.head) Тогда
					ДопПолеШапка= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеШапка.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.head);
					Таб.Вывести(ДопПолеШапка);
				КонецЕсли;
				
				Шапка = Макет.ПолучитьОбласть("Шапка");
				
				НомерКСФ 								= InvoiceCorrectionContent.InvoiceCorrectionNumber;
				ДатаКСФ 								= InvoiceCorrectionContent.InvoiceCorrectionDate;
				Шапка.Параметры.ДатаКСФ 				= ЗаполнитьПустое(формат(ДатаКСФ, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НомерКСФ				= ЗаполнитьПустое(НомерКСФ);
				шапка.параметры.НомерИКСФ       		= ЗаполнитьПустое(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber);
				шапка.параметры.ДатаИКСФ        		= ЗаполнитьПустое(формат(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.параметры.НомерСФ        			= ЗаполнитьПустое(OriginalInvoice.Number);
				Шапка.параметры.ДатаСФ         			= ЗаполнитьПустое(формат(OriginalInvoice.Date, "ДФ=dd.MM.yyyy; ДП=' '"));
				шапка.параметры.НомерИСФ        		= ЗаполнитьПустое(OriginalInvoice.InvoiceRevisionNumber);
				шапка.параметры.ДатаИСФ         		= ЗаполнитьПустое(формат(OriginalInvoice.InvoiceRevisionDate, "ДФ=dd.MM.yyyy; ДП=' '"));
				Шапка.Параметры.НаименованиеПродавца 	= ЗаполнитьПустое(InvoiceCorrectionContent.seller.name);
				Шапка.Параметры.АдресПродавца 			= СформироватьПредставлениеАдресаПоContent(InvoiceCorrectionContent.seller.address);
				Шапка.Параметры.ИННКПППродавца			= ПредставлениеИННКПП(InvoiceCorrectionContent.seller);
				Шапка.Параметры.НаименованиеПокупателя  = ЗаполнитьПустое(InvoiceCorrectionContent.Buyer.name);
				Шапка.Параметры.АдресПокупателя			= СформироватьПредставлениеАдресаПоContent(InvoiceCorrectionContent.Buyer.address); 
				Шапка.Параметры.ИННКПППокупателя 		= ПредставлениеИННКПП(InvoiceCorrectionContent.Buyer);
				
				
				если значениеЗаполнено(InvoiceCorrectionContent.валютаСсылка) тогда 
					//если валюта заполнена - передаем наименование как в справочнике 1С
					НаименованиеВалюты  =   InvoiceCorrectionContent.валютаСсылка.наименованиеПолное;
				Иначе 	
					ВыборкаВалют =  МетодСервера(,"КлассификаторыДляДиадок").ОКВ.найтиСтроки(Новый Структура("Код", InvoiceCorrectionContent.currency));
					НаименованиеВалюты = ?(ВыборкаВалют.количество()=0, "", ВыборкаВалют[0].Наименование);
				КонецЕсли;	
				
				Шапка.Параметры.Валюты = ?(ЗначениеЗаполнено(НаименованиеВалюты),НаименованиеВалюты, "-")+", "+?(ЗначениеЗаполнено(InvoiceCorrectionContent.currency), InvoiceCorrectionContent.currency, "-");
				
				Таб.Вывести(Шапка);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.top) Тогда
					ДопПолеПередТаблицей= Макет.ПолучитьОбласть("ДопПолеПередТаблицей");
					ДопПолеПередТаблицей.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.top);
					Таб.Вывести(ДопПолеПередТаблицей);
				КонецЕсли;
				
				ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
				Таб.Вывести(ШапкаТаблицы);
				
				Для каждого item из InvoiceCorrectionContent.items цикл 
					
					Если ВизуализироватьДопПоля Тогда
						
						Если Item.Свойство("AdditionalInfo") Тогда
							Если ЗначениеЗаполнено(Item.AdditionalInfo) Тогда
								Строка = Макет.ПолучитьОбласть("СтрокаСДопПолем");
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(Item.AdditionalInfo);
							Иначе
								Строка = Макет.ПолучитьОбласть("Строка");	
							КонецЕсли;
						ИначеЕсли Item.Свойство("StructedAdditionalInfos") Тогда
							Если Item.StructedAdditionalInfos.Количество() >0 Тогда
								Строка = Макет.ПолучитьОбласть("СтрокаСДопПолем");
								
								СтруктураДопПоляТЧ = РазобратьДопПоле(Item.StructedAdditionalInfos);
								Строка.Параметры.ДопСведенияСтроки=	СокрЛП(СтруктураДопПоляТЧ.top);
							Иначе
								Строка = Макет.ПолучитьОбласть("Строка");
							КонецЕсли;
						КонецЕсли; 
						
					Иначе	
						Строка = Макет.ПолучитьОбласть("Строка");
					КонецЕсли;
					
					строка.параметры.НаимТов 		= item.Product;
					
					строка.параметры.ОКЕИ_ТовДо 	= ЗаполнитьПустое(item.OriginalValues.UnitCode);
					строка.параметры.НаимЕИДо	 	= ЗаполнитьПустое( ?(ЗначениеЗаполнено(Item.OriginalValues.UnitCode),ПолучитьНаименованиеЕИПоКоду(Item.OriginalValues.UnitCode), ""));
					строка.параметры.КолТовДо 		= ЗаполнитьПустое(Число(item.OriginalValues.Quantity));
					строка.параметры.НалСтДо 		= ПредставлениеСтавкиНДС(item.OriginalValues.Taxrate);
					строка.параметры.ЦенаТовДо   	= ?(ЗначениеЗаполнено(item.OriginalValues.Price), Формат(Число(item.OriginalValues.Price), "ЧН=-; ЧГ=3,0"), "-");
					строка.параметры.СтТовБезНДСДо  = формат(item.OriginalValues.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					строка.параметры.СуммаНДСДо   	= формат(item.OriginalValues.vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					строка.параметры.СтТовУчНалДо   = формат(item.OriginalValues.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					
					строка.параметры.ОКЕИ_ТовПосле 	= ЗаполнитьПустое(item.CorrectedValues.UnitCode);
					строка.параметры.НаимЕИПосле 	= ЗаполнитьПустое( ?(ЗначениеЗаполнено(Item.CorrectedValues.UnitCode),ПолучитьНаименованиеЕИПоКоду(Item.CorrectedValues.UnitCode), ""));
					строка.параметры.КолТовПосле	= ЗаполнитьПустое(Число(item.CorrectedValues.Quantity));
					строка.параметры.НалСтПосле		= ПредставлениеСтавкиНДС(item.CorrectedValues.Taxrate);
					строка.параметры.ЦенаТовПосле  	= ?(ЗначениеЗаполнено(item.CorrectedValues.Price), Формат(Число(item.CorrectedValues.Price), "ЧН=-; ЧГ=3,0"), "-");
					строка.параметры.СтТовБезНДСПосле=формат(item.CorrectedValues.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					строка.параметры.СуммаНДСПосле 	= формат(item.CorrectedValues.vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					строка.параметры.СтТовУчНалПосле= формат(item.CorrectedValues.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					
					строка.параметры.СтТовБезНДСУв	= формат(item.AmountsInc.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					строка.параметры.СуммаНДСУв	 	= формат(item.AmountsInc.vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					строка.параметры.СтТовУчНалУв	= формат(item.AmountsInc.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					
					строка.параметры.СтТовБезНДСУм	= формат(item.AmountsDec.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					строка.параметры.СуммаНДСУм	 	= формат(item.AmountsDec.vat, "ЧДЦ=2; ЧН=; ЧГ=3,0");
					строка.параметры.СтТовУчНалУм	= формат(item.AmountsDec.Total, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
					
					Таб.вывести(строка);
				КонецЦикла;	
				
				//выводим подвал
				Подвал = Макет.ПолучитьОбласть("Подвал");
				Подвал.Параметры.ВсегоСтТовБезНалВсУв =  формат(InvoiceCorrectionContent.TotalsInc.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				Подвал.Параметры.ВсегоСумНДСВсУв 	  =  формат(InvoiceCorrectionContent.TotalsInc.Vat				   , "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.ВсегоСтТовУчНалВсУв  =  формат(InvoiceCorrectionContent.TotalsInc.Total               , "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				
				Подвал.Параметры.ВсегоСтТовБезНалВсУм =  формат(InvoiceCorrectionContent.TotalsDec.TotalWithVatExcluded, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				Подвал.Параметры.ВсегоСумНДСВсУм 	  =  формат(InvoiceCorrectionContent.TotalsDec.Vat				   , "ЧДЦ=2; ЧН=; ЧГ=3,0");
				Подвал.Параметры.ВсегоСтТовУчНалВсУм  =  формат(InvoiceCorrectionContent.TotalsDec.Total               , "ЧДЦ=2; ЧН=-; ЧГ=3,0");
				
				Таб.вывести(Подвал);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.bottom) Тогда
					ДопПолеПослеТаблицы= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПослеТаблицы.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.bottom);
					Таб.Вывести(ДопПолеПослеТаблицы);
				КонецЕсли;
				
				Подписи= Макет.ПолучитьОбласть("Подписи");
				
				если InvoiceCorrectionContent.Signer.IsSoleProprietor тогда 
					Подписи.параметры.ПодписантФЛ  = ПолучитьФИОПоКонтенту(InvoiceCorrectionContent.Signer);
					Подписи.Параметры.НомерСВ	  = InvoiceCorrectionContent.Signer.SoleProprietorRegistrationCertificate;
					Подписи.Параметры.ЭПФЛ = "Электронная подпись";
				Иначе 
					Подписи.параметры.ПодписантЮЛ  = ПолучитьФИОПоКонтенту(InvoiceCorrectionContent.Signer);
					Подписи.Параметры.ЭПЮЛ = "Электронная подпись";
				КонецЕсли;	
				Таб.вывести(Подписи);
				
				Если ВизуализироватьДопПоля И ЗначениеЗаполнено(СтруктураДопПоля.ground) Тогда
					ДопПолеПодвал= Макет.ПолучитьОбласть("ДопПоле");
					ДопПолеПодвал.Параметры.ДопСведения=	СокрЛП(СтруктураДопПоля.ground);
					Таб.Вывести(ДопПолеПодвал);
				КонецЕсли;
				
				Если НЕ InvoiceSignatureStructure = Неопределено Тогда
					Таб.Вывести(ВернутьОбласть_ВизуализироватьДанныеПодписи(InvoiceSignatureStructure, Макет, истина));
				КонецЕсли;
				
				возврат таб; 
			КонецФункции
			
		//} Визуализация InvoiceCorrection
		
		//{ Валидация InvoiceCorrection
		
			&НаСервере
			функция ПроверитьОшибкиВСтрокеКСФ(Item) 
				
				СписокОшибокСтроки  = "";
				СписокОшибокСтроки = СписокОшибокСтроки +ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с", истина);
				
				Если ЗначениеЗаполнено(Item.OriginalValues.UnitCode) тогда 
					Если стрДлина(сокрЛП(Item.OriginalValues.UnitCode))<3 
						ИЛИ стрДлина(сокрЛП(Item.OriginalValues.UnitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+Item.OriginalValues.UnitCode+") указан код недопустимой длины</p>
						|";
					ИначеЕсли 	ТолькоЦифры(сокрЛП(Item.OriginalValues.UnitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+Item.OriginalValues.UnitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				Если Item.AmountsDec.Total = 0 И Item.AmountsInc.Total = 0 Тогда
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Нет изменения стоимости товаров (работ, услуг), имущественных прав с налогом - всего</p>
					|";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Item.CorrectedValues.UnitCode) тогда 
					если стрДлина(сокрЛП(Item.CorrectedValues.UnitCode))<3 
						ИЛИ стрДлина(сокрЛП(Item.CorrectedValues.UnitCode))>4 тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для единицы измерения ("+Item.CorrectedValues.UnitCode+") указан код недопустимой длины</p>
						|";
					ИначеЕсли 	ТолькоЦифры(сокрЛП(Item.CorrectedValues.UnitCode)) = ложь тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Код единицы измерения ("+Item.CorrectedValues.UnitCode+") должен состоять из цифр</p>
						|";
					КонецЕсли;
				КонецЕсли;
				
				если Найти(Строка(Item.OriginalValues.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС до изменения</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.OriginalValues.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС до изменения не указана</p>
					|";
				КонецЕсли;	
				
				если Найти(Строка(Item.CorrectedValues.TaxRate), "20/120") > 0 тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Указана недопустимая ставка НДС после изменения</p>
					|";
				ИначеЕсли ЗначениеЗаполнено(Item.CorrectedValues.Taxrate) = ложь  тогда 
					СписокОшибокСтроки = СписокОшибокСтроки +
					"<p>Ставка НДС после изменения не указана</p>
					|";
				КонецЕсли;
				
				Возврат СписокОшибокСтроки;
				
			КонецФункции	
			
			&НаСервере
			функция ПроверитьСвязиКСФ(InvoiceContent, ДокументСсылка) 
				Возврат "";
				////если у нас есть основание в ДД- проверяем совпадение реквизитов
				////на нет - и суда нет. 
				//Докоснование =  ПолучитьОснованиеКСФ(ДокументСсылка) ;
				//Если ЗначениеЗаполнено(Докоснование)=Ложь тогда
				//	возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
				//КонецЕсли;
				//
				//docId =     ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Докоснование);
				//Если ЗначениеЗаполнено(DocId)=Ложь тогда 
				//	возврат ""; //  "Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы
				//КонецЕсли;
				//
				//Organization = получитьМодульПрог("Модуль_Диадок_РаботаССерверомДиадока").ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
				//Document =  Organization.getDocumentById(docId);
				//
				//Если (ЗначениеЗаполнено(InvoiceContent.InvoiceCorrectionrevisionDate)=ложь) и (ЗначениеЗаполнено(InvoiceContent.InvoiceCorrectionrevisionNumber)=Ложь) тогда 
				//	//это ксф
				//	Если Найти(Document.Type, "Correction")>0 тогда 
				//		возврат "Корректировочный счет-фактура не может выставляться на основании другого "+ СформироватьСсылкуНаДокумент(Organization.id, docId, "корректировочного счета-фактуры")+"</p>"
				//	КонецЕсли;
				//	
				//	Если Document.type = "Invoice"  тогда 
				//		ДатаСФОриг  = Document.DocumentDate ;
				//		НомерСФОриг = Document.DocumentNumber;
				//		ЕстьИсправленияОриг =    Ложь;
				//	Иначе 	
				//		//смотрим реквизиты в нынешнем и предыдущем документе 
				//		ДатаСФОриг  = Document.OriginalDocumentDate;
				//		НомерСФОриг = Document.OriginalDocumentNumber;
				//		ЕстьИсправленияОриг =    ЗначениеЗаполнено(Document.DocumentNumber);
				//	КонецЕсли;	
				//	
				//	ДатаСФ 		= InvoiceContent.Date;
				//	НомерСФ     = InvoiceContent.Number;
				//	ЕстьИсправления     =   (ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber));
				//	
				//	ТекстОшибки = "";
				//	если  (ДатаСФОриг)<>ДатаСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата корректируемого счета-фактуры: " +  формат(ДатаСФОриг,"ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерСФОриг<>НомерСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер корректируемого счета-фактуры: " +  НомерСФОриг+"</p>";
				//	КонецЕсли;
				//	если ЕстьИсправленияОриг и  ЕстьИсправления=ложь тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
				//	Иначеесли ЕстьИсправленияОриг=Ложь и  ЕстьИсправления тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура не исправлялся, что не соотвкетствует данным, указанным в корректировочном счете-фактуре</p>";
				//	ИначеЕсли ЕстьИсправленияОриг и  ЕстьИсправления тогда 
				//		//проверим что данные исправления совпадают
				//		ДатаИСФОриг  =Document.DocumentDate;
				//		НомерИСФОриг = Document.DocumentNumber;
				//		ДатаИСФ 	 = InvoiceContent.InvoiceRevisionDate;
				//		НомерИСФ     = InvoiceContent.InvoiceRevisionNumber;
				//		
				//		если  ДатаИСФОриг<>ДатаИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Дата исправления корректируемого счета-фактуры: " + формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//		КонецЕсли;
				//		если  НомерИСФОриг<>НомерИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Номер исправления корректируемого счета-фактуры: " +  НомерИСФОриг+"</p>";
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//	Если ТекстОшибки<>"" тогда 
				//		ТекстОшибки = 
				//		"<h3>В документе неверно указаны реквизиты корректируемого"+ СформироватьСсылкуНаДокумент(Organization.id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//	КонецЕсли;
				//	
				//	возврат ТекстОшибки;
				//Иначе 
				//	//это ИКСФ
				//	Если Найти(Document.Type, "Correction")=0 тогда 
				//		возврат "Исправление корректировочного счета-фактуры может выставляться только на основании корректировочного счета-фактуры</p>"
				//	КонецЕсли;
				//	
				//	//смотрим реквизиты в нынешнем и предыдущем документе 
				//	ДатаСФОриг  = Document.OriginalDocumentDate;
				//	НомерСФОриг = Document.OriginalDocumentNumber;
				//	ДатаСФ 		= InvoiceContent.date;
				//	НомерСФ     = InvoiceContent.Number;
				//	
				//	ДатаКСФОриг  = Document.DocumentDate;
				//	НомерКСФОриг = Document.DocumentNumber;
				//	ДатаКСФ 	 = InvoiceContent.InvoiceCorrectionDate;
				//	НомерКСФ     = InvoiceContent.InvoiceCorrectionNumber;
				//	
				//	ЕстьИсправленияОриг =    ЗначениеЗаполнено(Document.OriginalInvoiceRevisionNumber);     //поле пока не заполняется
				//	ЕстьИсправления     =    (ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) или  ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber));;
				//	
				//	ТекстОшибки = "";
				//	если  (ДатаСФОриг)<>(ДатаСФ) тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата корректируемого счета-фактуры: " +  формат(ДатаСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерСФОриг<>НомерСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер корректируемого счета-фактуры: " +  НомерСФОриг+"</p>";
				//	КонецЕсли;
				//	если  (ДатаКСФОриг)<>(ДатаКСФ) тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Дата исправляемого корректировочного счета-фактуры: " +  формат(ДатаСФОриг,"ДФ=dd.MM.yyyy")+"</p>";
				//	КонецЕсли;
				//	если  НомерКСФОриг<>НомерКСФ тогда 
				//		ТекстОшибки = ТекстОшибки + "
				//		|Номер исправляемого корректировочного счета-фактуры: " +  НомерКСФОриг+"</p>";
				//	КонецЕсли;
				//	
				//	если ЕстьИсправленияОриг и  ЕстьИсправления=ложь тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
				//	Иначеесли ЕстьИсправленияОриг=Ложь и  ЕстьИсправления тогда 
				//		текстОшибки = текстОшибки + "
				//		|Корректируемый счет-фактура не исправлялся, что не соотвкетствует данным, указанным в корректировочном счете-фактуре</p>";
				//	ИначеЕсли ЕстьИсправленияОриг и  ЕстьИсправления тогда 
				//		//проверим что данные исправления совпадают
				//		ДатаИСФОриг  = Document.OriginalInvoiceRevisionDate;
				//		НомерИСФОриг = Document.OriginalInvoiceRevisionNumber;
				//		ДатаИСФ 	 = InvoiceContent.InvoiceRevisionDate;
				//		НомерИСФ     = InvoiceContent.InvoiceRevisionNumber;
				//		
				//		если  ДатаИСФОриг<>ДатаИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Дата исправления корректируемого счета-фактуры: " +  формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
				//		КонецЕсли;
				//		если  НомерИСФОриг<>НомерИСФ тогда 
				//			ТекстОшибки = ТекстОшибки + "
				//			|Номер исправления корректируемого счета-фактуры: " +  НомерИСФОриг+"</p>";
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//	Если ТекстОшибки<>"" тогда 
				//		ТекстОшибки = 
				//		"<h3>В документе неверно указаны реквизиты исправляемого"+  СформироватьСсылкуНаДокумент(Organization.id, docId, " корректировочного счета-фактуры")+"</h3></p>" +ТекстОшибки;
				//	КонецЕсли;
				//	
				//	возврат ТекстОшибки;
				//КонецЕсли;
			КонецФункции	
			
			&НаСервере
			функция ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent)
				
				СписокОшибокЕИ = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				Для каждого item из InvoiceCorrectionContent.Items цикл 
					
					Если ЗначениеЗаполнено(Item.OriginalValues.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ(Item.OriginalValues.ЕдиницаИзмеренияССылка, СокрЛП(Item.OriginalValues.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Item.CorrectedValues.UnitCode) тогда 
						СписокОшибокЕИ = СписокОшибокЕИ+ ПроверитьЕИ( Item.CorrectedValues.ЕдиницаИзмеренияССылка, СокрЛП(Item.CorrectedValues.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					КонецЕсли;
					
					
				конецЦикла;	
				
				ОшибкаВалютыНеНайдена = ложь;
				ОшибкаВалютыНеТотКод = ложь;	
				СписокОшибокВалюта =  ПроверитьВалюту(InvoiceCorrectionContent.ВалютаСсылка, InvoiceCorrectionContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
				
				Если  СписокОшибокВалюта<>"" тогда 
					СписокОшибокВалюта = "
					//|<h3>При указании валюты документа: </h3>
					|<p>"+СписокОшибокВалюта+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
				КонецЕсли;
				
				
				Если 	СписокОшибокЕИ <> "" тогда 
					СписокОшибокЕИ = "
					|<p>"+СписокОшибокЕИ+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	  
				
				Если СписокОшибокЕИ<>""  или 	СписокОшибокВалюта<>""  тогда 
					возврат  "<h3>Ошибки в классификаторах: </h3> 
					|"+	СписокОшибокЕИ+ СписокОшибокВалюта;
				Иначе 
					возврат "";
				КонецЕсли;	
				
			конецФункции
			
			&НаСервере
			Функция ВалидацияInvoiceCorrectionContent(InvoiceCorrectionContent, ДокументССылка) Экспорт
				
				СписокОшибок = "";
				
				если InvoiceCorrectionContent.items.Количество()=0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Нет строк, по которым происходит корректировка суммовых или количественных показателей</p> ";
				КонецЕсли;
				
				если InvoiceCorrectionContent.TotalsDec.Total = 0 
					И InvoiceCorrectionContent.TotalsInc.Total = 0 Тогда
					СписокОшибок = СписокОшибок+ "<p>Нет увеличения или уменьшения суммы всего по документу</p> ";
				КонецЕсли;
				
				Если InvoiceCorrectionContent.Signer.IsSoleProprietor Тогда
					Если НЕ ЗначениеЗаполнено(InvoiceCorrectionContent.Signer.SoleProprietorRegistrationCertificate) Тогда
						СписокОшибок = СписокОшибок + 
						"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации)</p>";						
					КонецЕсли;
				КонецЕсли;
				
				//проверяем сведения об участниках сделки
				если  СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.seller ) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Seller, 1, истина);
					если ошибка <> "" тогда
						ТипПродавца =?(ТипЗнч(InvoiceCorrectionContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceCorrectionContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
				КонецЕсли;	
				
				если     СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.Buyer) тогда 
					ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Buyer, 1, истина);
					если ошибка <> "" тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceCorrectionContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ ошибка;
					КонецЕсли;	
				Иначе 
					СписокОшибок = СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
				КонецЕсли;	
				
				OriginalInvoice = InvoiceCorrectionContent.OriginalInvoices[0];
				
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionNumber,"номер корректировочного счета-фактуры", 256, "м", истина);
				СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionDate, "дата корректировочного счета-фактуры", истина);
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.Number,"номер счета-фактуры", 256, "м", истина);
				СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(OriginalInvoice.date,"дата счета-фактуры", истина);
				
				Если ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber) 
					или ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber,"номер исправления корректировочного счета-фактуры", 3, "м", истина);		
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate,"дата исправления корректировочного счета-фактуры", истина);
				конецЕсли;	
				
				Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber) 
					или ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionDate) тогда 
					СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.InvoiceRevisionNumber,"номер исправления счета-фактуры", 3, "м", истина);		
					СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(OriginalInvoice.InvoiceRevisionDate,"дата исправления счета-фактуры", истина);
				конецЕсли;	
				
				Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber)
					И ТолькоЦифры(сокрЛП(OriginalInvoice.InvoiceRevisionNumber))=ложь Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Номер исправления счета-фактуры может состоять только из цифр</p>
					|";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(InvoiceCorrectionContent.Currency)=Ложь  тогда 
					СписокОшибок = СписокОшибок + 
					"<p>Не указан код валюты счета-фактуры</p>
					|";
				ИначеЕсли СтрДлина(сокрЛП(InvoiceCorrectionContent.Currency))<>3 тогда
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен иметь длину 3 символа</p>
					|";
				Иначеесли ТолькоЦифры(сокрЛП(InvoiceCorrectionContent.Currency))=ложь тогда		
					СписокОшибок = СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен состоять из цифр</p>
					|";	
				КонецЕсли;
				
				ц = 0 ;
				Для каждого item из InvoiceCorrectionContent.items цикл 
					ц = ц+1;
					ОшибкиВСтроке = ПроверитьОшибкиВСтрокеКСФ(Item);
					если ОшибкиВСтроке <> "" тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке
					КонецЕсли;	
					
				Конеццикла;
				
				СписокОшибок = СписокОшибок +  ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent);
				СписокОшибок = СписокОшибок +  ПроверитьСвязиКСФ(InvoiceCorrectionContent, ДокументСсылка); 
				
				СписокОшибок = ОформитьОшибкиВHTML(СписокОшибок, "При формировании счета-фактуры обнаружены ошибки");
				
				возврат СписокОшибок;
				
				
			КонецФункции	
			
		//} Валидация InvoiceCorrection
		
	//} InvoiceCorrection
	
	//{ XmlAcceptanceCertificate
		
		//{ Визуализация XmlAcceptanceCertificate
		
			&НаСервере	
			функция СформироватьРеквизитыКонтрагентаДляАкта(OrgInfo)
				
				Наименование 	= OrgInfo.Name ;
				ИНН 		= OrgInfo.Inn ;
				КПП 		= OrgInfo.Kpp ;
				Адрес 			= СформироватьПредставлениеАдресаПоContent(OrgInfo.Address) ;
				Телефон 		= OrgInfo.Phone ;
				Факс    		= OrgInfo.Fax ;
				БИК     		= OrgInfo.BankId ;
				НаименБанк		= OrgInfo.BankName ;
				РСчет     		= OrgInfo.BankAccountNumber ;
				
				результат = новый Структура;
				результат.Вставить("Наименование", наименование);
				результат.Вставить("ИНН", ИНН);
				результат.Вставить("КПП", КПП);
				результат.Вставить("Адрес", ОтрезатьПравуюЗапятую( ДобавитьРазделитель(Адрес)+Добавитьразделитель(Телефон, "тел: ")+Добавитьразделитель(факс, "факс: ")) );
				результат.Вставить("БанковскиеРеквизиты", ОтрезатьПравуюЗапятую(Добавитьразделитель(РСчет, "р/с: ")+Добавитьразделитель(НаименБанк, "в банке ")+Добавитьразделитель(БИК, "БИК ")) );
				
				возврат Результат;	
				
			КонецФункции
			
			&НаСервере
			Функция СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Content, ВизуализироватьДопПоля) Экспорт
				
				XmlAcceptanceCertificateContent=			?(Content.Свойство("XmlAcceptanceCertificateContent"), Content.XmlAcceptanceCertificateContent, Неопределено);
				XmlAcceptanceCertificateBuyerContent=		?(Content.Свойство("XmlAcceptanceCertificateBuyerContent"), Content.XmlAcceptanceCertificateBuyerContent, Неопределено);
				XmlAcceptanceCertificateSignatureStructure=	?(Content.Свойство("XmlAcceptanceCertificateSignatureStructure"), Content.XmlAcceptanceCertificateSignatureStructure, Неопределено);
				
				Макет = ЭтотОбъект.ПолучитьМакет("АктВыполненныхРабот");
				
				СтруктураДопПоля=	РазобратьДопПоле_СтарыйФормат(xmlAcceptanceCertificateContent.AdditionalInfo);
				ДопИнфо = Макет.ПолучитьОбласть("ДопИнфо"); 
				
				Шапка = ?(ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.top), Макет.ПолучитьОбласть("ШапкаДопПоля") ,  Макет.ПолучитьОбласть("Шапка"));
				Таб   = Новый ТабличныйДокумент;
				
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.head) тогда
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.head;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Шапка.Параметры.ДатаАкта =  формат(xmlAcceptanceCertificateContent.Date,"ДФ=dd.MM.yy; ДП=' '" );
				Шапка.Параметры.НомерАкта =  xmlAcceptanceCertificateContent.Number;
				Шапка.Параметры.ТекстШапкиАкта =  xmlAcceptanceCertificateContent.Title;
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.top) тогда
					Шапка.Параметры.ДопСведения =  СтруктураДопПоля.top
				КонецЕсли;	
				
				Таб.Вывести(шапка);
				
				Итоги  = Макет.ПолучитьОбласть("Итоги");
				МассивСтрок =  xmlAcceptanceCertificateContent.Items;
				
				н=0;
				
				totalWithVatExcluded = 0;
				Vat = 0;
				total = 0;
				Для каждого СтрокаАкта из МассивСтрок цикл 
					н = н+1;
					Если ВизуализироватьДопПоля и ЗначениеЗаполнено(строкаАкта.AdditionalInfo) тогда 
						Строка = Макет.ПолучитьОбласть("СтрокаДопИнфо");
						Строка.Параметры.ДопСведения =  строкаАкта.AdditionalInfo;
					Иначе 
						Строка = Макет.ПолучитьОбласть("Строка");
					КонецЕсли;	
					строка.параметры.н = н;
					
					строка.Параметры.Наименование = СтрокаАкта.Name;
					строка.Параметры.Наименование = ?(ЗначениеЗаполнено(строка.Параметры.Наименование ),   строка.Параметры.Наименование,   СтрокаАкта.Description);
					
					строка.Параметры.ЕИ =  ?(ЗначениеЗаполнено(строкаАкта.UnitName), строкаАкта.UnitName, "-");
					строка.Параметры.Количество = ?(ЗначениеЗаполнено(строкаАкта.Quantity), формат(строкаАкта.Quantity,"ЧДЦ=3; ЧГ=3,0"), "-");
					строка.Параметры.Цена = ?(ЗначениеЗаполнено(строкаАкта.Price), формат(строкаАкта.Price, "ЧДЦ=2; ЧГ=3,0"), "-");
					строка.Параметры.СуммаБезНДС = ?(ЗначениеЗаполнено(строкаАкта.totalWithVatExcluded), формат(строкаАкта.totalWithVatExcluded, "ЧДЦ=2; ЧГ=3,0"), "-");
					строка.Параметры.СуммаНДС = ?(ЗначениеЗаполнено(строкаАкта.Vat), формат(строкаАкта.Vat, "ЧДЦ=2; ЧГ=3,0"), "-");
					строка.Параметры.СуммаВсего = ?(ЗначениеЗаполнено(строкаАкта.total), формат(строкаАкта.total, "ЧДЦ=2; ЧГ=3,0"), "-");
					
					Таб.Вывести(строка);
					
					totalWithVatExcluded = totalWithVatExcluded + ?(ЗначениеЗаполнено(строкаАкта.totalWithVatExcluded), строкаАкта.totalWithVatExcluded, 0);
					Vat		 			 = Vat 					+ ?(ЗначениеЗаполнено(строкаАкта.Vat), строкаАкта.Vat, 0);
					total 				 = total 				+ ?(ЗначениеЗаполнено(строкаАкта.total), строкаАкта.total, 0);
					
				конецЦикла;	
				
				Итоги.параметры.СумБезНДСИт  =  формат(totalWithVatExcluded, "ЧДЦ=2; ЧГ=3,0");
				Итоги.параметры.СумНДСИт	 =  формат(Vat, "ЧДЦ=2; ЧГ=3,0");
				Итоги.параметры.СумУчНДСИт   =  формат(total, "ЧДЦ=2; ЧГ=3,0");
				Таб.Вывести(Итоги);
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.bottom) тогда
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.bottom;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Подвал = макет.ПолучитьОбласть("Подвал");
				
				РеквизитыИсполнителя = СформироватьРеквизитыКонтрагентаДляАкта(xmlAcceptanceCertificateContent.Seller);
				
				Подвал.Параметры.НаименованиеИсполнителя 		 = РеквизитыИсполнителя.Наименование;
				Подвал.Параметры.ИННИсполнителя 		 		 = РеквизитыИсполнителя.ИНН;
				Подвал.Параметры.КППИсполнителя 		 		 = РеквизитыИсполнителя.КПП;
				Подвал.Параметры.АдресИсполнителя 		 		 = РеквизитыИсполнителя.Адрес;
				Подвал.Параметры.БанковскиеРеквизитыИсполнителя  = РеквизитыИсполнителя.БанковскиеРеквизиты;
				
				//	ДанныеПодписи =   xmlAcceptanceCertificateContent.Signature;
				если СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Attorney) тогда
					ПредставлениеДоверенности  = "Доверенность №"+xmlAcceptanceCertificateContent.Attorney.Number + " от "+формат(xmlAcceptanceCertificateContent.Attorney.Date,"ДФ=dd.MM.yy; ДП=' '" ) +"
					|выдал "+ПредставлениеДоверенностьВыдана(xmlAcceptanceCertificateContent.Attorney);
					Подвал.Параметры.ДоверенностьИсполнителя = ПредставлениеДоверенности; // ПредставлениеДоверенностьВыдана(xmlAcceptanceCertificateContent.Attorney)+" "+ ПредставлениеДоверенностьПолучена(xmlAcceptanceCertificateContent.Attorney);
				КонецЕсли;	
				
				подвал.Параметры.ДолжностьИсполнителя  = xmlAcceptanceCertificateContent.Official.JobTitle;
				подвал.Параметры.ФИОисполнителя        =  ПолучитьФИОПоКонтенту(xmlAcceptanceCertificateContent.Official);
				Если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.SignatureDate) тогда 
					подвал.Параметры.ДатаПодписанияИсполнителем =  формат(xmlAcceptanceCertificateContent.SignatureDate, "ДФ=dd.MM.yy; ДП=' '");
					подвал.Параметры.НадписьДатаПодписанияИсполнителем = "Дата подписания: ";
				КонецЕсли;	
				
				Если XmlAcceptanceCertificateBuyerContent <> неопределено тогда 
					если СтруктураКонтентаЗаполнена(XmlAcceptanceCertificateBuyerContent.Attorney) тогда
						ПредставлениеДоверенности  = "Доверенность №"+XmlAcceptanceCertificateBuyerContent.Attorney.Number + " от "+формат(XmlAcceptanceCertificateBuyerContent.Attorney.Date,"ДФ=dd.MM.yy; ДП=' '" ) +"
						|выдал "+ПредставлениеДоверенностьВыдана(XmlAcceptanceCertificateBuyerContent.Attorney);
						Подвал.Параметры.ДоверенностьЗаказчика = ПредставлениеДоверенности; 
					КонецЕсли;	
					подвал.Параметры.ДолжностьЗаказчика  = XmlAcceptanceCertificateBuyerContent.Signer.JobTitle;
					подвал.Параметры.ФИОЗаказчика        =  ПолучитьФИОПоКонтенту(XmlAcceptanceCertificateBuyerContent.Signer);
					
					Если ЗначениеЗаполнено(XmlAcceptanceCertificateBuyerContent.SignatureDate) тогда 
						подвал.Параметры.ДатаПодписанияЗаказчиком =  формат(XmlAcceptanceCertificateBuyerContent.SignatureDate, "ДФ=dd.MM.yy; ДП=' '");
						подвал.Параметры.НадписьДатаПодписанияЗаказчиком = "Дата приема: ";
					КонецЕсли;
				КонецЕсли;
				
				Таб.Вывести(Подвал);
				
				Если ВизуализироватьДопПоля и ЗначениеЗаполнено(СтруктураДопПоля.ground) тогда
					ДопИнфо.Параметры.ДопСведения =  СтруктураДопПоля.ground;
					Таб.Вывести(ДопИнфо);
				КонецЕсли;
				
				Если НЕ XmlAcceptanceCertificateSignatureStructure = Неопределено Тогда
					Таб.Вывести(ВернутьОбласть_ВизуализироватьДанныеПодписи(XmlAcceptanceCertificateSignatureStructure, Макет));
				КонецЕсли;
				
				возврат Таб; 
				
			конецФункции
			
		//} Визуализация XmlAcceptanceCertificate
		
		//{ Валидация XmlAcceptanceCertificate
		
			&НаСервере
			функция ВалидацияXmlAcceptanceCertificateContent(xmlAcceptanceCertificateContent) Экспорт
				
				списокОшибок = "";
				
				если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Date)=ложь  тогда 
					СписокОшибок = списокОшибок +  "<p>Не указана дата документа</p>";
				иначе 
					СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(xmlAcceptanceCertificateContent.Date, "дата документа");
				конецЕсли;
				
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Number, "номер документа", 256);
				
				если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Title)=ложь  тогда 
					СписокОшибок = списокОшибок +  "<p>Не указан заголовок документа</p>";
				иначе 
					СписокОшибок = СписокОшибок +  ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Title, "заголовок документа", 2000);
				конецЕсли;
				
				если ( СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Seller)=ложь)  тогда 
					СписокОшибок = СписокОшибок +  "<p>отсутствуют данные о продавце</p>";
				Иначе 
					ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(xmlAcceptanceCertificateContent.Seller, 1);
					если ОшибкиКонтрагента <> "" тогда
						Поставщик =  xmlAcceptanceCertificateContent.Seller.Ссылка;
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
						|"+ ОшибкиКонтрагента;
					КонецЕсли;
					
					параметрыПодписания =  ПолучитьПараметрыПодписанияТ12вДиадок(xmlAcceptanceCertificateContent.Seller.Ссылка);
					Если ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) = Ложь Тогда
						СписокОшибок = СписокОшибок + 
						"<h3>Не настроены параметры подписания документа</h3>";
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
							СписокОшибок = списокОшибок +  "<p>Отсутствует должность подписанта</p>";
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
							СписокОшибок = списокОшибок +  "<p>Отсутствует ФИО подписанта</p>";
						КонецЕсли;
						
						СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						
					КонецЕсли;
					
				КонецЕсли; 
				
				//валидируем строки 
				номерСтроки = 0;
				
				СписокОшибокВКлассификаторах = "";
				ОшибкаЕИНеНайдена = ложь;
				ОшибкаЕИНеТотКод = ложь;
				СписокПроверенныхЕИ = новый СписокЗначений;
				
				Если (xmlAcceptanceCertificateContent.Items.Количество()=0) тогда
					СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
				Иначе
					
					для каждого Строка из xmlAcceptanceCertificateContent.Items	 цикл 
						НомерСтроки = НомерСтроки +1; 
						СписокОшибокСтроки = "";
						
						//если ЗначениеЗаполнено(строка.получить("UnitName"))=ложь тогда 
						//	СписокОшибокСтроки = СписокОшибокСтроки +
						//	"<p>Не указано наименование единицы измерения</p>
						//	|";
						//КонецЕсли;
						
						Если ЗначениеЗаполнено(строка.UnitCode) ИЛИ ЗначениеЗаполнено(строка.UnitName) тогда 
							СписокОшибокВКлассификаторах = СписокОшибокВКлассификаторах+ ПроверитьЕИ( строка.СсылкаНаЕИ, сокрЛП(строка.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
						КонецЕсли;	
						//Если строка.TaxRate = "##"	  тогда 
						//  СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
						//КонецЕсли;
												
						//Если ЗначениеЗаполнено(строка.Quantity) И (строка.Quantity<0)  тогда 
						//	СписокОшибокСтроки = СписокОшибокСтроки + 
						//	"<p>Количество не может быть отрицательным</p>
						//	|";
						//КонецЕсли;	
												
						если ЗначениеЗаполнено(строка.Total)=Ложь Тогда
							СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
						КонецЕсли;	
						
						если СписокОшибокСтроки <> "" тогда 
							СписокОшибок = СписокОшибок + 
							"<h3>Ошибки в строке "+номерСтроки+" табличной части</h3>
							|"+СписокОшибокСтроки;
						КонецЕсли;	
					Конеццикла;	
				КонецЕсли;
				
				
				Если 	СписокОшибокВКлассификаторах <> "" тогда 
					СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
					|<p>"+СписокОшибокВКлассификаторах+"</p>
					|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
				конецЕсли;	
				
				//если (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer"))=Ложь)   или (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails"))=Ложь) тогда 
				//	ОшибкиВСтроке = ОшибкиВСтроке + "<p>не указано лицо, подписывающее документ</p>"
				//Иначе 
				//	SignerDetails  = AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails");
				//	если (значениеЗаполнено(SignerDetails.получить("JobTitle"))=ложь) тогда 
				//		если ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Seller")) тогда 
				//		 	Поставщик =   AcceptanceCertificateSellerTitleInfo.получить("Seller").Получить("OrgInfo").получить("Ссылка");
				//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"+Поставщик.УникальныйИдентификатор()+""">не указана должность лица, подписывающего документ</a></p>"
				//		Иначе 
				//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"++""">не указана должность лица, подписывающего документ</a></p>"
				//		КонецЕсли;	
				//	КонецЕсли;
				//	если (значениеЗаполнено(SignerDetails.получить("Surname"))=ложь)тогда 
				//		списокОшибок = списокОшибок + "<p>не указана фамилия лица, подписывающего документ</p>"
				//	КонецЕсли;
				//	если (значениеЗаполнено(SignerDetails.получить("FirstName"))=ложь) тогда 
				//		списокОшибок = списокОшибок + "<p>не указано имя лица, подписывающего документ</p>"
				//	КонецЕсли;
				//КонецЕсли;	
				
				списокОшибок = ОформитьОшибкиВHTML(списокОшибок, "При формировании файла акта выполненных работ обнаружены ошибки");
				
				возврат СписокОшибок;
				
			КонецФункции	                                                         
			
		//} Валидация XmlAcceptanceCertificate
		
	//} XmlAcceptanceCertificate
	
//} CONTENT

&НаСервере
Функция ПолучитьТаблицуДокументовПоИдДиадока(ТаблицаИД) экспорт 
	
	ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
	
	ТаблицаПерекодировки.Индексы.Добавить("Число16");
	ТаблицаПерекодировки.Индексы.Добавить("Число64");
		
	Если ТаблицаИД.Количество()= 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	//таблица ИД - таблица с колонками    DocumentId,  BoxId
	ТабИдентификаторов=	ТаблицаИД.скопировать();
	
	КС=	Новый КвалификаторыСтроки(150);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КС);
	
	ТабИдентификаторов.Колонки.Добавить("DocumentId_64", ОписаниеТипов);
	Для каждого стр из ТабИдентификаторов цикл 
		Стр.DocumentId_64 = КонвертироватьГуидВЧисло64(Стр.DocumentId);
	КонецЦикла;
	
	Запрос = Новый Запрос;	 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ.DocumentId КАК СТРОКА(150)) КАК DocumentId,
	|	ТЗ.DocumentId_64,
	|	ВЫРАЗИТЬ(ТЗ.BoxId КАК СТРОКА(150)) КАК BoxId
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.DocumentId,
	|	ВТ.DocumentId_64,
	|	ВТ.BoxId,
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ Таблица1
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.DocumentId_64 = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица1.DocumentId,
	|	Таблица1.DocumentId_64,
	|	Таблица1.BoxId,
	|	Таблица1.Объект КАК ссылка
	|ИЗ
	|	Таблица1 КАК Таблица1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО Таблица1.BoxId = ЗначенияСвойствОбъектов.Значение
	|			И Таблица1.Объект = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет))";
	
	Запрос.УстановитьПараметр("ТЗ", ТабИдентификаторов);
	Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
	Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
	Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
	Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
	
	РезультатЗапроса= Запрос.ВыполнитьПакет()[2].Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	

&НаСервере
Функция ПолучитьПараметрыПодписанияТ12вДиадок(ФИОПодписанта) экспорт 
	
	СпособПодписания = ПолучитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12());
	СпособПодписания = ?(СпособПодписания="", "1", СпособПодписания);
	
	ДолжностьПодписанта=	ПолучитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписанта());
	
	Результат = новый Структура;
	Результат.Вставить("СпособПодписания", СпособПодписания);
	Результат.Вставить("ДолжностьПодписанта",  ДолжностьПодписанта);
	Результат.Вставить("ФИОПодписанта", ФИОПодписанта);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыПодписанияТ12вДиадок(ПараметрыПодписания) экспорт 
	Если ПараметрыПодписания.Свойство("СпособПодписания") Тогда 
		УстановитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12(), ПараметрыПодписания.СпособПодписания)  
	КонецЕсли;
	
	Если параметрыПодписания.Свойство("ДолжностьПодписанта") Тогда
		УстановитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписанта(), ПараметрыПодписания.ДолжностьПодписанта)  
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПодписантаСогласование(ФИОПодписантаПолучателя, ДолжностьПодписанта) Экспорт
	УстановитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование(), 		ФИОПодписантаПолучателя);
	УстановитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование(), ДолжностьПодписанта);
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПодписантаСогласование() Экспорт
	
	НастройкиПодписантаСогласование = Новый Структура();
	
	НастройкиПодписантаСогласование.Вставить("ИдентификаторКонечногоПодписанта",	ПолучитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование()));  
	НастройкиПодписантаСогласование.Вставить("ДолжностьКонечногоПодписанта",		ПолучитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование()));  
	
	Возврат НастройкиПодписантаСогласование;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности) Экспорт
	стРасшифровкаОшибки = Новый Структура;
	
	Поз = Найти(Подробности, "##");
	
	ТекстОшибкиCOM = Сред(Подробности, Поз);
	КодОшибкиCOM = Сред(ТекстОшибкиCOM, 3, 3);
	ПояснениеКодаОшибкиCOM = Сред(ТекстОшибкиCOM, 7, Найти(ТекстОшибкиCOM, "]") - 7);
	ПояснениеОшибкиCOM = Сред(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, "]") + 1);
	
	стРасшифровкаОшибки.Вставить("Заголовок", ПояснениеКодаОшибкиCOM);
	стРасшифровкаОшибки.Вставить("ОписаниеОшибки", ПояснениеОшибкиCOM);
	стРасшифровкаОшибки.Вставить("Подробности", Подробности);
	стРасшифровкаОшибки.Вставить("Спецификатор");
	
	Если Поз = 0 Тогда
		
		ТекстОшибкиCOM = СокрЛП(СтрЗаменить(Сред(Подробности, Найти(Подробности, "}:")), "}:", ""));
		ТекстОшибкиCOM = Лев(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, ":"));
		
		стРасшифровкаОшибки.Вставить("Заголовок", 		"Ошибка работы модуля");
		стРасшифровкаОшибки.Вставить("ОписаниеОшибки", 	ТекстОшибкиCOM);
		стРасшифровкаОшибки.Вставить("Спецификатор", 	"UnknownError");
		
		Возврат стРасшифровкаОшибки;
		
	КонецЕсли;
	
	Если Лев(КодОшибкиCOM, 1) = "1" Тогда 
		
		СловарьWL = МетодСервера(,"ПолучитьСловарь");
		
		// Ошибка сервера диадок
		HttpCode = Сред(ПояснениеОшибкиCOM, 6, 3);
		ПояснениеОшибкиCOM = Сред(ПояснениеОшибкиCOM, 11);
		
		Если HttpCode = "401" Тогда
			// Ошибка авторизации на сервере
			Если ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "certificate", "not", "valid") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не возможно войти в "+СловарьWL.НаименованиеСистемы+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadCertificate";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "login", "not", "found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным логином";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadLogin";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "wrong", "password") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Неправильная пара логин/пароль";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "not found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			Иначе
				стРасшифровкаОшибки.ОписаниеОшибки = "Ошибка входа в " + СловарьWL.НаименованиеСистемы;
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBad";
			КонецЕсли;
		ИначеЕсли HttpCode = "407" Тогда
			// Ошибка авторизации на прокси
			стРасшифровкаОшибки.Спецификатор = "InternetError";
			стРасшифровкаОшибки.Заголовок = "Ошибка прокси-сервера";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неправильный логин или пароль для прокси-сервера";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "already", "signed") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Данный документ уже подписан";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "requested", "signature", "rejection")
			ИЛИ ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "RequestedSignatureRejection", "document", "already", "has") Тогда
			
			стРасшифровкаОшибки.ОписаниеОшибки = "По данному документу уже сформирован отказ в подписи";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "access", "box", "denied") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Отсутствует доступ к данному ящику " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "fns", "box", "not", "sent") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Сертификат не зарегистрирован в ФНС";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "failed", "unauthorized", "wrong", "password") Тогда
			стРасшифровкаОшибки.Заголовок=	"Ошибка входа";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неверная пара логин/пароль";
		КонецЕсли;
	ИначеЕсли Лев(КодОшибкиCOM, 1) = "2" Тогда 
		стРасшифровкаОшибки.Спецификатор = "InternetError";
	КонецЕсли;
	
	Возврат стРасшифровкаОшибки;
КонецФункции

&НаСервере
Функция ВСтрокеНРегЕстьСлова(стрПар, слово1, слово2 = "", слово3 = "", слово4 = "")
	стр = НРег(стрПар);
	Если Найти(стр, слово1) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово2) И Найти(стр, слово2) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово3) И Найти(стр, слово3) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово4) И Найти(стр, слово4) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
функция ПолучитьСправа(стр, маркер)
	если найти(стр, маркер)=0 тогда 
		возврат стр 
	иначе 	
		возврат прав(стр, стрДлина(стр) - найти(стр, маркер)-стрДлина(маркер)+1);
	конецЕсли;	
конецфункции	

&НаСервере
Функция  КраткоеСообщениеОбОшибке(текстОшибки) 
	Подстрока = ПолучитьСправа(ТекстОшибки, "##");
	Подстрока = ПолучитьСправа(Подстрока, "[");
	Подстрока = ПолучитьСправа(Подстрока, "]");
	
	Возврат подстрока;
	
	
	
КонецФункции	

&НаСервере
Функция СформироватьТекстОшибкиДиадок(ТекстОшибки, СловарьWL) экспорт
	
	КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
	Если (найти( КраткоеСообщение, "is not registered in FNS for box")>0)  тогда
		ИДЯщика = прав(КраткоеСообщение, стрДлина(КраткоеСообщение) - найти( КраткоеСообщение, "is not registered in FNS for box")-32);
		ИДЯщика = лев(ИдЯщика, найти(ИдЯщика, ".")-1);
		
		ИдСертификата = лев(КраткоеСообщение, найти( КраткоеСообщение, "is not registered in FNS for box")-1);
		ИДСертификата = прав(ИдСертификата, стрДлина(ИдСертификата) - найти( ИдСертификата, "Signer certificate")-18);
		ТекстОшибки = "Сертификат, которым подписано сообщение, не зарегистрирован в ФНС.
		|Для решения данной проблемы обратитесь в техподдержку.
		|Отладочная информация: 
		|отпечаток сертификата: "+ИдСертификата+ "
		|идентификатор ящика организации: "+ИДЯщика;
	Иначеесли найти(ТекстОшибки, "##3")>0 тогда
		текстОшибки = ("Произошла ошибка при работе с КриптоПро:
		|"+  КраткоеСообщениеОбОшибке(ТекстОшибки));
	ИначеЕсли найти(ТекстОшибки, "##1")>0 тогда 
		КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
		Если (найти(текстОшибки, "Код ошибки: 500")>0)	 и (найти(текстОшибки, "GetTokenByCertificate")>0) тогда 
			текстОшибки = ("При работе программы произошла ошибка:
			|Выбранный сертификат не имеет доступа в " + СловарьWL.НаименованиеСистемы);
		ИначеЕсли (найти( КраткоеСообщение, "407")>0) или  (найти( КраткоеСообщение, "401")>0) тогда 
			текстОшибки = ("Настройки прокси-сервера не позволяют установить соединение с сервером "+СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж+"
			|("+КраткоеСообщение+")");
		ИначеЕсли 	(найти(ТекстОшибки, "for entity that already signed")> 0) или 
			(найти(ТекстОшибки, "Receipt for document which already has one")> 0) 
			тогда 
			текстОшибки = ("При работе программы произошла ошибка:
			|данный документ уже подписан");
		ИначеЕсли 	(найти(ТекстОшибки, "for entity that has requested signature rejection")> 0) или 
			(найти(ТекстОшибки, "RequestedSignatureRejection for document that already has one")> 0) или 
			(найти(ТекстОшибки, "for entity that already have requested signature rejection")> 0) тогда    
			текстОшибки = ("При работе программы произошла ошибка:
			|по данному документу уже сформирован отказ в подписи");
		ИначеЕсли (найти(ТекстОшибки, "Access to Box")> 0) и 
			(найти(ТекстОшибки, "is denied")> 0) тогда 
			текстОшибки = ("При работе программы произошла ошибка:
			|у пользователя отсутствует доступ к ящику " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж);
			//Access to Box c19b1b8c-75ab-4ca3-a2ab-8ea3771631ab is denied
			//ИначеЕсли (найти( КраткоеСообщение, "FNS reg message was not sent for box")>0)  тогда 
			//	результат = "Для работы с формализованными документами 
			//	|необходимо сформировать заявление участника электронного документооборота.
			//	|Для этого необходимо перейти на сайт по следующей ссылке: 
			//	|";
			//	ИДЯщика = прав(КраткоеСообщение, стрДлина(КраткоеСообщение) - найти( КраткоеСообщение, "FNS reg message was not sent for box")-37);
			//	ИДЯщика = лев(ИдЯщика, найти(ИдЯщика, ".")-1);
			//	
			//	ТекстОшибки = результат +  ИДЯщика;
		Иначе                                                             
			текстОшибки = ("Произошла ошибка при работе с сервером "+СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж+":
			|"+  КраткоеСообщение);
		КонецЕсли;	
	ИначеЕсли найти(ТекстОшибки, "##2")>0 тогда
		КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
		Если (найти( КраткоеСообщение, "407")>0) или  (найти( КраткоеСообщение, "401")>0) тогда 
			текстОшибки = ("Настройки прокси-сервера не позволяют установить соединение с сервером "+СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж+"
			|("+  КраткоеСообщение+")");
		иначе 	
			текстОшибки = ("Невозможно установить соединение с сервером "+СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж+" по причине:
			|"+  КраткоеСообщениеОбОшибке(ТекстОшибки));
		КонецЕсли;	
	ИначеЕсли найти(ТекстОшибки, "##9")>0 тогда
		текстОшибки = КраткоеСообщениеОбОшибке(ТекстОшибки);
	КонецЕсли;	
	
	возврат текстОшибки;
КонецФункции	

&НаСервере
функция ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку() экспорт 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	подзапрос.Организация,
	|	ЕСТЬNULL(подзапрос.idBox, """") КАК idBox,
	|	подзапрос.Организация.ИНН КАК ИНН,
	|	подзапрос.Организация.КПП КАК КПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		ЗначенияСвойствОбъектов.Значение КАК idBox
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|			ПО Организации.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство.Наименование = &наименованиеСвойства)
	|	ГДЕ
	|		НЕ Организации.ПометкаУдаления) КАК подзапрос
	|ГДЕ	ЕСТЬNULL(подзапрос.idBox, """") = """" или подзапрос.idBox = неопределено";
	Запрос.УстановитьПараметр("НаименованиеСвойства", ИдентификаторСвойстваЯщикОрганизации());
	ТаблицаНеподключенныхОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТаблицаНеподключенныхОрганизаций Цикл
		Стр.ИНН = СокрЛП(Стр.ИНН);
		Стр.КПП = СокрЛП(Стр.КПП);
	КонецЦикла;
	
	Возврат ТаблицаНеподключенныхОрганизаций;
	
КонецФункции	

&НаСервере
Функция СклеитьПредставлениеОрганизацииДиадок(Строка)
	Результат = СокрЛП(Строка.Представление);
	Если НЕ ПустаяСтрока(Строка.Представление2) Тогда
		Результат = Результат + СокрЛП(Строка.Представление2);
		Если НЕ ПустаяСтрока(Строка.Представление3) Тогда
			Результат = Результат + СокрЛП(Строка.Представление3);
			Если НЕ ПустаяСтрока(Строка.Представление4) Тогда
				Результат = Результат + СокрЛП(Строка.Представление4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	возврат Результат
КонецФункции 

&НаСервере
функция ПолучитьОтпечатокСертификатаДляДиадок(Организация) экспорт 
	ОтпечатокСертификата = ПолучитьНастройкуПользователя(ИдентификаторСвойстваСертификатПользователя());
	Если ПустаяСтрока(ОтпечатокСертификата) Тогда
		Возврат ПолучитьНастройкуПользователя(ИдентификаторСвойстваСертификатПользователя() + Организация.УникальныйИдентификатор());
	Иначе
		Возврат ОтпечатокСертификата;
	КонецЕсли;
	
КонецФункции

&НаСервере
функция ПолучитьТаблицуЯщиковДиадокОрганизации(Организация = неопределено, КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком = Неопределено, 
	КонтекстРаботаССерверомДиадок_ПредставлениеПользователя= неопределено) экспорт 
	//ахтунг. поправить . некрасив
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Орг.Наименование,
	|	подзапрос.Объект,
	|	подзапрос.Значение,
	|	подзапрос.КПППодразделения,
	|	ВЫРАЗИТЬ(подзапрос.представление КАК СТРОКА(500)) представление,
	|	подзапрос.представление2,
	|	подзапрос.представление3,
	|	подзапрос.представление4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.Объект КАК Объект,
	|		МАКСИМУМ(Подзапрос.Значение) КАК Значение,
	|		МАКСИМУМ(Подзапрос.КПППодразделения) КАК КПППодразделения,
	|		МАКСИМУМ(Подзапрос.представление) КАК представление,
	|		МАКСИМУМ(Подзапрос.представление2) КАК представление2,
	|		МАКСИМУМ(Подзапрос.представление3) КАК представление3,
	|		МАКСИМУМ(Подзапрос.представление4) КАК представление4
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Объект,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение,
	|			"""" КАК КПППодразделения,
	|			"""" КАК представление,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			ЗначенияСвойствОбъектов.Значение КАК КПППодразделения,
	|			"""",
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПодразделение
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" представление,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление3,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление2
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" КАК представление,
	|			"""" КАК представление2,
	|			ЗначенияСвойствОбъектов.Значение,
	|			"""" КАК представление4
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление3
	|			И ЗначенияСвойствОбъектов.Объект = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект,
	|			"""",
	|			"""" КАК КПППодразделения,
	|			"""" представление,
	|			"""" КАК представление2,
	|			"""" КАК представление3,
	|			ЗначенияСвойствОбъектов.Значение
	|		ИЗ
	|			РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление4
	|			И ЗначенияСвойствОбъектов.Объект = &Организация) КАК Подзапрос
	|
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.Объект) КАК подзапрос,
	|	Справочник.Организации КАК Орг
	|ГДЕ
	|	подзапрос.Значение <> """"
	|	И Орг.Ссылка = подзапрос.Объект";
	Запрос.УстановитьПараметр("Свойство", ИдентификаторСвойстваЯщикОрганизации());
	Запрос.УстановитьПараметр("СвойствоПодразделение", ИдентификаторСвойстваПодразделениеОрганизации());
	Запрос.УстановитьПараметр("СвойствоПредставление", ИдентификаторСвойстваЯщикОрганизацииПредставление());
	Запрос.УстановитьПараметр("СвойствоПредставление2", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "2");
	Запрос.УстановитьПараметр("СвойствоПредставление3", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "3");
	Запрос.УстановитьПараметр("СвойствоПредставление4", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "4");
	
	Если НЕ ЗначениеЗаполнено(организация) тогда 
		Запрос.Текст = стрЗаменить(запрос.Текст, "И ЗначенияСвойствОбъектов.Объект = &Организация", "");
	Иначе 
		Запрос.УстановитьПараметр("Организация", организация);
	КонецЕсли;	
	
	Результат =  Запрос.Выполнить().выгрузить();
	
	
	Результат.Колонки.добавить("ПредставлениеСертификата");
	Результат.Колонки.добавить("ОтпечатокСертификата");
	
	ц = 0;
	Пока ц < Результат.Количество() цикл 
		строка = результат[ц];
		Если (КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком<>неопределено) и КонтекстОрганизации_ОрганизацииФилиалыСопоставленныеСДиадоком.Найти(Строка.Объект) = Неопределено Тогда
			Результат.Удалить(ц)
		Иначе
			ц = ц+1;	
			Строка.Представление 				= СклеитьПредставлениеОрганизацииДиадок(Строка);
			Строка.ОтпечатокСертификата  		= ПолучитьОтпечатокСертификатаДляДиадок(Строка.Объект);
			Строка.ПредставлениеСертификата		= КонтекстРаботаССерверомДиадок_ПредставлениеПользователя;
			//КонтекстРаботаССерверомДиадок.ПредставлениеПользователя
		КонецЕсли;	
	конецЦикла;	
	
	возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(Результат);
конецфункции

&НаСервере
Функция ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов(ТаблицаКонтрагентов) Экспорт
	
	Запрос=	Новый Запрос;
	Запрос.Текст=
		
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ID КАК СТРОКА(50)) КАК ИдКонтрагента
		|ПОМЕСТИТЬ ИДКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Контрагент,
		|	ДополнительныеСведения.Свойство,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50)) КАК Значение
		|ПОМЕСТИТЬ ДопСвойства
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты
		|	И ДополнительныеСведения.Свойство = &СвойствоЯщикКонтрагента
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Объект,
		|	ДополнительныеСведения.Свойство,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопСвойства.Контрагент КАК Контрагент,
		|	ДопСвойства.Значение КАК ID
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	ИДКонтрагентов КАК ИДКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДопСвойства КАК ДопСвойства
		|		ПО ИДКонтрагентов.ИдКонтрагента = ДопСвойства.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Контрагент,
		|	Контрагенты.ID,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, """") КАК ПодразделениеКонтрагента,
		|	ЕСТЬNULL(ДополнительныеСведения2.Значение, """") КАК ToDepartmentID
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО Контрагенты.Контрагент = ДополнительныеСведения1.Объект
		|			И (ДополнительныеСведения1.Свойство = &СвойствоНаименованиеПодразделения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
		|		ПО Контрагенты.Контрагент = ДополнительныеСведения2.Объект
		|			И (ДополнительныеСведения2.Свойство = &СвойствоИДПодразделения)";
		
	СвойствоЯщикКонтрагентаПрефикс		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
	СвойствоНаименованиеПодразделения	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс());
	СвойствоИДПодразделения				= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс());
	
	Запрос.УстановитьПараметр("СвойствоЯщикКонтрагента", 			СвойствоЯщикКонтрагентаПрефикс);
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", 				ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СвойствоНаименованиеПодразделения", 	СвойствоНаименованиеПодразделения);
	Запрос.УстановитьПараметр("СвойствоИДПодразделения", 			СвойствоИДПодразделения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ВернутьТаблицуМаршрутизацииПоДоговорам(Организация, Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Владелец = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.Договоры КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ПОМЕСТИТЬ ТаблицаДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДоговоров.Ссылка КАК Договор,
			|	ДополнительныеСведения.Значение КАК ToDepartmentID,
			|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
			|ИЗ
			|	ТаблицаДоговоров КАК ТаблицаДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
			|			И (ДополнительныеСведения.Значение <> """")
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
			|		ПО ТаблицаДоговоров.Ссылка = ДополнительныеСведения1.Объект
			|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)";
	КонецЕсли;
	
	СвойствоИдПодразделения=			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору());
	СвойствоНаименованиеПодразделения=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору());
	
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("Контрагент", 				Контрагент);
	Запрос.УстановитьПараметр("ИдПодразделения", 			СвойствоИдПодразделения);
	Запрос.УстановитьПараметр("НаименованиеПодразделения", 	СвойствоНаименованиеПодразделения);
	
	Возврат Запрос.ВыполнитьПакет()[1].Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьМаршрутизациюПоДоговору(ДоговорКонтрагента) Экспорт
	
	СтруктураМашрутизацииДоговора=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииДоговора.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору()));
	СтруктураМашрутизацииДоговора.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору()));
	
	Возврат СтруктураМашрутизацииДоговора;
	
КонецФункции

&НаСервере
Функция ПолучитьМаршрутизациюПоКонтрагенту(Контрагент) Экспорт
	
	СтруктураМашрутизацииКонтрагента=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииКонтрагента.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс()));
	СтруктураМашрутизацииКонтрагента.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс()));
	
	Возврат СтруктураМашрутизацииКонтрагента;
	
КонецФункции

&НаСервере
Функция ТочностьЦеныСФ() Экспорт 

	ТочностьЦеныСФ = ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок");
	Если ЗначениеЗаполнено(ТочностьЦеныСФ) Тогда
		ТочностьЦеныСФ = ТочностьЦеныСФ;
	Иначе
		ТочностьЦеныСФ = 2;
	КонецЕсли;
	Возврат ТочностьЦеныСФ;

КонецФункции 

Функция ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком(ДанныеOrganizationDepartment) Экспорт
	
	ТаблицаПараметров 	= Новый ТаблицаЗначений;
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)); 
	
	ТаблицаПараметров.Колонки.Добавить("НаименованиеСвойства", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("ЗначениеСвойства", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("НаименованиеСвойства2", ОписаниеСтроки);
	ТаблицаПараметров.Колонки.Добавить("ЗначениеСвойства2", ОписаниеСтроки);
	
	
	Для каждого Данные Из данныеOrganizationDepartment Цикл
		Стр = ТаблицаПараметров.Добавить();
		
		Стр.НаименованиеСвойства 	= "ЯщикДиадокДляОрганизации";
		Стр.ЗначениеСвойства 		= Данные.OrganizationId; 
		Стр.НаименованиеСвойства2 	= "ПодрДиадокДляОрганизации"; 
		Стр.ЗначениеСвойства2 		= Данные.DepartmentKpp; 
	КонецЦикла;
	
	Возврат СвойстваОбъектов_НайтиОбъектыПоТЗ(ТаблицаПараметров);
	
КонецФункции // ПолучитьОрганизацииФилиалыСопоставленныеСДиадоком()



//{WL 
	&НаСервере
	Функция ПолучитьСловарь() Экспорт
		
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Диадок";
		Результат.КраткоеНаименованиеСистемы = "Диадок";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Диадока";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Диадоку";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Диадоке";
		Результат.ТочкаВходаВеб = "diadoc.kontur.ru";
		Результат.ТелефонТехподдержки = "8 800 500-10-18";
		Результат.ИспользоватьИконкуСистемы = Истина;
		
		Возврат Результат;	
		
	КонецФункции

	&НаСервере
	Функция ПолучитьСловарьЛайф() 
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Лайф Факторинг";
		Результат.КраткоеНаименованиеСистемы = "Лайф";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Лайфа";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Лайфу";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Лайфе";
		Результат.ТочкаВходаВеб = "life.kontur.ru";
		Результат.ТелефонТехподдержки = "8 (495) 645-10-51";
		Результат.ИспользоватьИконкуСистемы = Ложь;
		Возврат Результат;	
	КонецФункции	

	&НаСервере
	Функция ПолучитьСловарьСеоДок()
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "Сеодок";
		Результат.КраткоеНаименованиеСистемы = "Сеодок";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "Сеодока";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "Сеодоку";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Сеодоке";
		Результат.ТочкаВходаВеб = "ceodoc.kontur.ru";
		Результат.ТелефонТехподдержки = "8 351 309-38-43";
		Результат.ИспользоватьИконкуСистемы = Истина;
		Возврат Результат;	
	КонецФункции

	&НаСервере
	Функция ПолучитьСловарьНФК()
		Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, КраткоеНаименованиеСистемыРодительныйПадеж, КраткоеНаименованиеСистемыДательныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
		Результат.НаименованиеСистемы = "ЭДО-Факторинг";
		Результат.КраткоеНаименованиеСистемы = "ЭДО-Факторинг";
		Результат.КраткоеНаименованиеСистемыРодительныйПадеж = "ЭДО-Факторинга";
		Результат.КраткоеНаименованиеСистемыДательныйПадеж = "ЭДО-Факторингу";
		Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "ЭДО-Факторинге";
		Результат.ТочкаВходаВеб = "edifactoring.ru";
		Результат.ТелефонТехподдержки = "Если у Вас возникли какие-либо сложности при обмене электронными документами с НФК и последующим получением факторинговых услуг, обратитесь к вашему клиентскому менеджеру в НФК";
		Результат.ИспользоватьИконкуСистемы = Ложь;
		Возврат Результат;	
	КонецФункции	

//}

//{ КАСТОМИЗАЦИЯ

	//{ ПЕРЕКЛЮЧАТЕЛИ

		// Функция включает/выключает механизм кастомного формирования содержимого доп. полей
		//
		&НаСервере
		Функция ИспользоватьКастомныеДопПоля() Экспорт
			// { RGS TChubarova2 24.11.2015 9:14:10 - SVS-0000487 OPS-0000380
			Возврат Истина;
			//Возврат Ложь;
			// } RGS TChubarova2 24.11.2015 9:18:05 - SVS-0000487 OPS-0000380
		КонецФункции

		// Функция включает/выключает механизм кастомного формирования адреса грузополучателя
		//
		&НаСервере
		Функция ИспользоватьКастомныйАдресГрузополучателя() Экспорт
		//Возврат Истина;
		Возврат Ложь;
	КонецФункции
	
	//} ПЕРЕКЛЮЧАТЕЛИ

	//{ РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
		&НаСервере
		Функция ЗаполнитьКастомныеДопПоля() Экспорт
			
			// заполняем алгоритмом для формирования кастомного доп.поля
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьШаблонКлючейДопСведений(ИдКонтрагента, DocumentType) Экспорт
			
			СловарьШаблоновКлючейДопСведений = ПолучитьСловарьШаблоновКлючейДопСведений();
			
			ОтборСтрок=			Новый Структура("ИдКонтрагента, DocumentType", ИдКонтрагента, DocumentType);
			НайденныеСтроки=	СловарьШаблоновКлючейДопСведений.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ШаблонКлючей = НайденныеСтроки[0].ШаблонКлючей;
			Иначе
				ШаблонКлючей = "";
			КонецЕсли;
			
			Возврат ШаблонКлючей;
			
		КонецФункции // ШаблонДопСвойств()
		
		&НаСервере
		Функция ПолучитьСловарьШаблоновКлючейДопСведений() 
			
			СловарьШаблонов = Новый ТаблицаЗначений;
			
			СловарьШаблонов.Колонки.Добавить("ИдКонтрагента");
			СловарьШаблонов.Колонки.Добавить("DocumentType");
			СловарьШаблонов.Колонки.Добавить("ШаблонКлючей");
			
			//проктер
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//авто
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//апатит
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//апатит (балаковский ф-л)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//метахим
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро (череповец)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Папирус (для тестирования группы Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №6786861 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №9219153 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			Возврат СловарьШаблонов;
			
		КонецФункции // ()
		
		&НаСервере		
		Процедура ДобавитьСтрокуВСловарь(СловарьШаблонов, ИдКонтрагента, DocumentType, ШаблонКлючей)
			
			НоваяСтрока = СловарьШаблонов.Добавить();
			
			НоваяСтрока.ИдКонтрагента = ИдКонтрагента; 
			НоваяСтрока.DocumentType = DocumentType;
			НоваяСтрока.ШаблонКлючей = ШаблонКлючей;
			
		КонецПроцедуры // ДобавитьСтрокуВСловарь()
		
		&НаСервере
		Функция НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) Экспорт 
			
			Если ИдКонтрагента = "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru" //апатит
				ИЛИ ИдКонтрагента = "aa1b1962b50d42349d310acb27fa5760@diadoc.ru" //апатит (балаковский ф-л)
				ИЛИ ИдКонтрагента = "64d1058f69f74ab4bee0e15567860044@diadoc.ru" //фосагро
				ИЛИ ИдКонтрагента = "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru" //метахим
				ИЛИ ИдКонтрагента = "200ad0208fe84e488ef4575dac492b65@diadoc.ru" //фосагро (череповец)
				ИЛИ ИдКонтрагента = "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru" //Тестовая организация №6786861 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "183c060a51c1483fa31acc29a50451d7@diadoc.ru" //Тестовая организация №9219153 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru" Тогда  //Папирус
				КонвертироватьДопСвойста = Истина;
			Иначе
				КонвертироватьДопСвойста = Ложь;
			КонецЕсли;
			
			Возврат КонвертироватьДопСвойста;
			
		КонецФункции // 
		
		&НаСервере
		Функция СформироватьСтрокуДопИнфоПоШаблону(ДопСведения)Экспорт 
			
			ДопСведенияПошаблону = "";
			
			Если ЗначениеЗаполнено(ДопСведения) = Истина Тогда
				ДопСведенияПошаблону = "<Данные> "; 
				МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);
				Для Каждого Строка Из МассивДопСведений Цикл
					МассивОтСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "=", Истина);
					Если МассивОтСтроки.Количество() > 0 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + "<Реквизит Имя="""+МассивОтСтроки[0]+"""";
					КонецЕсли;
					Если МассивОтСтроки.Количество() > 1 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение="""+МассивОтСтроки[1]+"""/> ";
					Иначе
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение=""""/>"
					КонецЕсли;
				КонецЦикла;
				ДопСведенияПошаблону = ДопСведенияПошаблону + " </Данные>"
			КонецЕсли;
			
			Возврат ДопСведенияПошаблону;
			
		КонецФункции // 
		
	//} РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
	&НаСервере
	Функция ПолучитьКастомныйАдресГрузополучателя() Экспорт
		
		// заполняем алгоритмом для получения адреса Грузополучателя из кастомного места
		
	КонецФункции
	
	
//} КАСТОМИЗАЦИЯ

Функция ПреобразоватьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
		
	Массив = Новый Массив;
	
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Массив.Добавить("");
			КонецЕсли;
			Возврат Массив;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияРазделителя = Найти(Строка, Разделитель);
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока ПозицияРазделителя > 0 Цикл
		ТекущаяСтрока = Лев(Строка, ПозицияРазделителя - 1);
		Строка = Прав(Строка, СтрДлина(Строка)- ПозицияРазделителя - ?(ДлинаРазделителя > 0, ДлинаРазделителя - 1, 0));
		ПозицияРазделителя = Найти(Строка, Разделитель);
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Массив.Добавить(ТекущаяСтрока);
		Иначе
			Если ПропускатьПустыеСтроки = Ложь Тогда
				Массив.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Массив.Добавить(Строка);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Функция ДопустимыеМаркерыКонфигураций() Экспорт
	
	СписокМаркеров=	Новый СписокЗначений;
	СписокМаркеров.Добавить("УТ11" , "Управление торговлей 11");
	СписокМаркеров.Добавить("БП30" , "Бухгалтерия предприятия 3.0");
	СписокМаркеров.Добавить("БГУ20", "Бухгалтерия государственного учреждения 2.0");
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция СтранаЧленТС(КодСтраны) Экспорт
	возврат  (КодСтраны = "643") или  //Россия
	(КодСтраны = "051") или  //Армения
	(КодСтраны = "112") или  //Беларусь
	(КодСтраны = "398") или  //Казахстан
	(КодСтраны = "417")      //Киргизия
КонецФункции	
