////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем ОбщееКоличествоДокументов;
	&НаКлиенте
	Перем НомерДокумента;
	&НаКлиенте
	Перем ResolutionRequestType;
	
	&НаКлиенте
	Перем СтруктураПараметрыДокументаРасширение Экспорт;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ
	
	&НаКлиенте
	функция SendNonformalizedDocument(Organization, ПутьКФайлу, ИмяФайла, Комментарий, CounteragentId, ДатаДокумента, НомерДокумента, ТребуетсяПодпись, InitialDocumentId, SubordinateDocumentId="", ToDepartmentId="", DelaySend, IsTest)
		
		SendTask = Organization.CreateSendTaskFromFile(ПутьКФайлу, "NonformilizedDocumentContent");
		SendTask.CounterAgentId = CounteragentId;
		SendTask.Comment = Комментарий;
		SendTask.ToDepartmentId = ToDepartmentId;
		SendTask.DelaySend = DelaySend;
		SendTask.FileName = ИмяФайла;
		
		Если ЗначениеЗаполнено(InitialDocumentId) тогда 
			SendTask.AddInitialDocument(InitialDocumentId)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SubordinateDocumentId) тогда 
			SendTask.AddSubordinateDocument(SubordinateDocumentId)
		КонецЕсли;
		
		SendTask.Content.date =  ДатаДокумента;
		SendTask.Content.Number  =  номерДокумента;
		SendTask.Content.NeedRecipientSignature  =  ТребуетсяПодпись;
		
		Doc = SendTask.Send();
		
		Возврат Doc.DocumentId;
		
	КонецФункции
	
	// { RGS TChubarova 23.05.2016 12:53:40 - адаптация  Диадок Безводинских Согласование файлов 
	&НаКлиенте
	функция rgsSendNonformalizedDocument(Organization, ПутьКФайлу, ИмяФайла, Комментарий, CounteragentId, ДатаДокумента, НомерДокумента, ТребуетсяПодпись, InitialDocumentId, SubordinateDocumentId="", ToDepartmentId="", DelaySend, IsTest)
		
		SendTask = Organization.CreateSendTaskFromFile(ПутьКФайлу, "NonformilizedDocumentContent");
		SendTask.CounterAgentId = CounteragentId;
		SendTask.Comment = Комментарий;
		SendTask.ToDepartmentId = ToDepartmentId;
		SendTask.DelaySend = DelaySend;
		SendTask.FileName = ИмяФайла;
		
		Если ЗначениеЗаполнено(InitialDocumentId) тогда 
			SendTask.AddInitialDocument(InitialDocumentId)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SubordinateDocumentId) тогда 
			SendTask.AddSubordinateDocument(SubordinateDocumentId)
		КонецЕсли;
		
		SendTask.Content.date =  ДатаДокумента;
		SendTask.Content.Number  =  номерДокумента;
		SendTask.Content.NeedRecipientSignature  =  ТребуетсяПодпись;
		
		Doc = SendTask.Send();
		
		//Возврат Doc.DocumentId;
		Возврат Doc;
		
	КонецФункции  // } RGS TChubarova 23.05.2016 12:53:41 - адаптация  Диадок Безводинских Согласование файлов	
	
	&НаКлиенте
	// { RGS TChubarova 16.05.2016 0:49:36 - Диадок Безводинских Согласование файлов
	//Функция ОтправитьНеформализованныеДокументы(CounteragentId, ПодразделениеКонтрагента =  Неопределено, МассивФайлов, ОтправкаДокументаНаСогласование = Ложь) Экспорт
	Функция ОтправитьНеформализованныеДокументы(CounteragentId, ПодразделениеКонтрагента =  Неопределено, МассивФайлов, ОтправкаДокументаНаСогласование, ПараметрыОтправкиНаСогласование) Экспорт
	// } RGS TChubarova 16.05.2016 0:50:11 - Диадок Безводинских Согласование файлов
		
		InitialDocumentID = ?(ЗначениеЗаполнено(параметры.InitialDocumentID), параметры.InitialDocumentID, "");
		
		МассивИД=	Новый Массив();
		
		OrganizationId=	Организация_2_BoxID_Форма(ОрганизацияОтправитель);
		Если OrganizationId = "" Тогда
			СообщениеПользователю=	Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Организация " + ОрганизацияОтправитель + " не сопоставлена с организацией в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
			СообщениеПользователю.Сообщить();
			Возврат МассивИД;
		КонецЕсли;
		
		Organization=	МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ОрганизацияОтправитель,,OrganizationId);
		
		Counteragent=	Organization.GetCounteragentById(CounteragentId);
		
		isTest = ?(Organization.isTest ИЛИ Organization.isPilot ИЛИ Counteragent.IsTest ИЛИ Counteragent.IsPilot, Истина, Ложь);
		
		Если НЕ ОтправкаДокументаНаСогласование Тогда 
			Если НЕ isTest И Organization.AuthenticateType <> "Certificate" Тогда
				ВызватьИсключение "Пользователь под логином может отправлять только тестовые документы";
			КонецЕсли;
		КонецЕсли;
		
		НомерДокумента=	0;
		ОбщееКоличествоДокументов=	МассивФайлов.Количество();
		
		НомерДокумента=				НомерДокумента + 1;
		Состояние("Отправка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов), "Отправлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
		
		Попытка
			// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
			//InitialDocumentID = SendNonformalizedDocument(Organization, МассивФайлов[0].ПутьКФайлу, МассивФайлов[0].ИмяФайла, МассивФайлов[0].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ",МассивФайлов[0].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,,,isTest);
			Document 			= rgsSendNonformalizedDocument(Organization, МассивФайлов[0].ПутьКФайлу, МассивФайлов[0].ИмяФайла, МассивФайлов[0].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ",МассивФайлов[0].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,,ОтправкаДокументаНаСогласование,isTest);
			InitialDocumentID 	= Document.DocumentId;
			// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
			МассивИД.Добавить(InitialDocumentID);
			
			// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
			Если ОтправкаДокументаНаСогласование Тогда
				// { RGS TChubarova 16.05.2016 1:42:08 - TCS-0002911
				//Модуль_Клиент.ОтправитьНаОбработку(Document, ПараметрыОтправкиНаСогласование);
				Если (НЕ ПараметрыОтправкиНаСогласование = Неопределено) И (НЕ Document = Неопределено) Тогда
					МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", Document, ПараметрыОтправкиНаСогласование);
				КонецЕсли;
				// } RGS TChubarova 16.05.2016 1:42:22 - TCS-0002911
			КонецЕсли;
			// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если Найти(ТекстОшибки, "MessageToPost.FromBoxId and MessageToPost.ToBoxId properties should differ")>0 Тогда 
				ВызватьИсключение "ОтправительПолучательСовпадают";
			Иначе 
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецПопытки;
		
		Если МассивФайлов.Количество() > 1 Тогда
			Для К = 1 по МассивФайлов.Количество()-1 Цикл
				
				НомерДокумента=				НомерДокумента + 1;
				Состояние("Отправка документов", НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Отправлено " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
				
				Попытка
					
					Если ПодразделениеКонтрагента = Неопределено Тогда
						// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
						//ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,, ОтправкаДокументаНаСогласование, isTest);
						Document = rgsSendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,,, ОтправкаДокументаНаСогласование, isTest);
						ID 		 = Document.DocumentId;
						// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
					Иначе
						// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
						//ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,, ПодразделениеКонтрагента, ОтправкаДокументаНаСогласование, isTest);
						Document = rgsSendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", МассивФайлов[К].ЗапрашиватьОтветнуюПодпись, InitialDocumentID,, ПодразделениеКонтрагента, ОтправкаДокументаНаСогласование, isTest);
						ID 		 = Document.DocumentId;
						// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
					КонецЕсли;
					
					МассивИД.Добавить(ID);
					
					// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
					Если ОтправкаДокументаНаСогласование Тогда
						// { RGS TChubarova 16.05.2016 1:42:08 - TCS-0002911
						//Модуль_Клиент.ОтправитьНаОбработку(Document, ПараметрыОтправкиНаСогласование);
						Если (НЕ ПараметрыОтправкиНаСогласование = Неопределено) И (НЕ Document = Неопределено) Тогда
							МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", Document, ПараметрыОтправкиНаСогласование);
						КонецЕсли;
						// } RGS TChubarova 16.05.2016 1:42:22 - TCS-0002911
					КонецЕсли;
					// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов

					
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "MessageToPost.FromBoxId and MessageToPost.ToBoxId properties should differ")>0 Тогда 
						ВызватьИсключение "ОтправительПолучательСовпадают";
					Иначе 
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат МассивИД;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВвестиКомментарийВСтроку(СтрокаСпискаФайлов)
		
		Если НЕ СтрокаСпискаФайлов = Неопределено Тогда
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок",	"Комментарий к файлу");
			ПараметрыФормы.Вставить("Комментарий", 	СтрокаСпискаФайлов.Комментарий);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияКФайлу", СтрокаСпискаФайлов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ИдентификаторСвойстваНомерВПФ()
		Возврат "ДиадокНомерВПФ";
	КонецФункции
	
	&НаСервере
	Функция УстановитьDocumentIDДляДокумента1С(ДокументСсылка)
		Возврат МетодСервера(,"Документ_2_DocumentID", ДокументСсылка);
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьЯщикДиадокОрганизации(ТекущаяОрганизация)
		
		Для Каждого Стр Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			Если Стр.Организация = ТекущаяОрганизация Тогда
				Возврат Стр.Box;
			КонецЕсли;
		КонецЦикла;
		
		ВызватьИсключение("Организация не сопоставлена с ящиком в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		
	КонецФункции
	
	&НаКлиенте
	процедура ОбновитьСписокСтраницыОтправкиВДиадок() Экспорт
		
		Состояние("Обновление списка документов для отправки в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		//ПредставлениеПериода=								МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", ДатаНачала, Датаокончания);
		//Элементы.НадписьОтправленныеСчетаФактуры.Заголовок=	"Список документов для отправки через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + ?(ЗначениеЗаполнено(ПредставлениеПериода), "(" + ПредставлениеПериода + ")", ПредставлениеПериода);
		ТаблицаОтношенийОрганизацийКонтрагентов= 			МетодКлиента("Модуль_Выгрузка","ВернутьТаблицуОтношенийОрганизацииКонтрагентов", Организация);
		
		//обновим статусы контрагентов 
		Для каждого КонтекстЯщика из Платформа.ПараметрыКлиент.КонтекстДиадока цикл 
			CounteragentList = КонтекстЯщика.Box.GetCounteragentListByStatus("IsMyCounteragent");
			Для Индекс = 0 По CounteragentList.Count - 1 Цикл
				Counteragent=	CounteragentList.GetItem(Индекс);
				Для каждого Элемент из  ТаблицаОтношенийОрганизацийКонтрагентов цикл 
					Если Элемент.Организация = КонтекстЯщика.Организация Тогда
						Если Элемент.ИдКонтрагента = Counteragent.id тогда 
							Элемент.Статус = Counteragent.GetStatus();
							Элемент.ЭтоТестовыйКонтрагент = (Counteragent.isTest или Counteragent.isPilot);
						КонецЕсли;	
					КонецЕсли;
					Если (Элемент.Организация = КонтекстЯщика.Организация) тогда 
						Элемент.ЭтоТестоваяОрганизация = (КонтекстЯщика.Box.isTest ИЛИ КонтекстЯщика.Box.isPilot);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
		ТаблицаКонтрагентовДляВыгрузки=	Новый Массив();
		Для каждого СтрокаКонтрагента Из ТаблицаОтношенийОрганизацийКонтрагентов Цикл
			Если СтрокаКонтрагента.Статус = "IsMyCounteragent" Тогда
				ТаблицаКонтрагентовДляВыгрузки.Добавить(СтрокаКонтрагента);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Организация) Тогда 
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.Добавить(Организация);
		Иначе 
			СписокОрганизаций = ПолучитьСписокАктивныхОрганизаций();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокКонтрагентов = новый СписокЗначений;
			СписокКонтрагентов.Добавить(Контрагент);
		Иначе 	
			масКонтрагентов =   ВыгрузитьКолонкуМассиваСтруктур(ТаблицаОтношенийОрганизацийКонтрагентов, "Контрагент");
			списокконтрагентов = новый списокЗначений;
			списокКонтрагентов.ЗагрузитьЗначения(масКонтрагентов);
		КонецЕсли;
		
		СформироватьТаблицуЗначенийДокументовДляОтправкиДиадок(
		ДатаНачала, 
		ДатаОкончания, 
		СписокОрганизаций,
		списокконтрагентов, 
		ТаблицаКонтрагентовДляВыгрузки);
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		
		Состояние("Обновление списка документов завершено");
		
	КонецПроцедуры 	
		
	&НаКлиенте
	Функция ПолучитьСписокАктивныхОрганизаций()
		результат = новый СписокЗначений;
		Для каждого стр из Платформа.ПараметрыКлиент.КонтекстДиадока цикл 
			результат.Добавить(стр.Организация);
		КонецЦикла;
		
		возврат результат;
	КонецФункции
	
	&НаСервере
	Процедура СформироватьТаблицуЗначенийДокументовДляОтправкиДиадок(ДатаНачала, ДатаОкончания, СписокОрганизаций, списокконтрагентов, ТаблицаОтношенийОрганизацийКонтрагентов)
		
		МассивОрганизаций= Новый Массив;
		
		Для Каждого Элем Из СписокОрганизаций Цикл
			
			Стр=							Новый Структура("Организация, ОтпрНеПроведенные, ФормироватьСчетНаОсновании");
			Стр.Организация=				Элем.Значение;
			ДиадокОтправкаНепроведенных=	МетодСервера(,"ПолучитьЗначениеСвойства", Элем.Значение, "ДиадокОтправкаНепроведенных");
			Стр.ОтпрНеПроведенные=			?(ЗначениеЗаполнено(ДиадокОтправкаНепроведенных), ДиадокОтправкаНепроведенных, Ложь);
			
			ФормироватьСчетНаОсновании=		МетодСервера(,"ПолучитьЗначениеСвойства", Элем.Значение, "ДиадокФормироватьСчетНаОсновании");
			Стр.ФормироватьСчетНаОсновании=	?(ЗначениеЗаполнено(ФормироватьСчетНаОсновании), ФормироватьСчетНаОсновании, 0);
			
			МассивОрганизаций.Добавить(Стр);
			
		КонецЦикла;
		
		ТЗВыгрузкиВДиадок= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьТЗВыгрузкиВДиадок", ДатаНачала, ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), КонецДня(ТекущаяДата())), ТипыДокументов, МассивОрганизаций, СписокКонтрагентов, ТаблицаОтношенийОрганизацийКонтрагентов);
		
		СписокДокументов.Загрузить(МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ДополнитьТаблицуВнешнимиПФ", ТаблицаОтношенийОрганизацийКонтрагентов, ТЗВыгрузкиВДиадок));
		
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура НачатьВыгрузку(ПараметрыВыгрузки) Экспорт
		
		Организация=			ПараметрыВыгрузки.Организация;
		ОрганизацияОтправитель= ПараметрыВыгрузки.Организация;
		
		Если ПараметрыВыгрузки.свойство("ОписаниеКонтрагента") Тогда 
			Контрагент= 			ПараметрыВыгрузки.ОписаниеКонтрагента.Контрагент;
			КонтрагентПолучатель= 	ПараметрыВыгрузки.ОписаниеКонтрагента.CounteragentName;
			КонтрагентПолучательID= ПараметрыВыгрузки.ОписаниеКонтрагента.CounteragentID;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(параметры.InitialDocumentID) Тогда 
			Элементы.Организация.Доступность= 			 Ложь;
			Элементы.Контрагент.Доступность= 			 Ложь;
			Элементы.ОрганизацияОтправитель.Доступность= Ложь;
			Элементы.КонтрагентПолучатель.Доступность= 	 Ложь;
		КонецЕсли;
		
		Открыть();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьОшибку(Organization, Документ1С, ОписаниеОшибки)
		
		Если Найти(ОписаниеОшибки, "FNS reg message was not sent for box") > 0 Тогда
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("OrganizationId",	Organization.Id);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаСообщенияОбОтсутствииРегистрацииФНС", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли Найти(ОписаниеОшибки, "<head>") = 0 Тогда
			ТекстОшибки=	"Ошибка отправки документа " + Документ1С;
			Подробности=	"Документ: " + Документ1С + " 
							|Описание ошибки:"+ Символы.ПС + МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки);
			
			Результат=	Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
			Результат.Вставить("Подробности",		Подробности);
			ОткрытьФормуВыводаОшибки(Результат);
		Иначе
			ТекстОшибки=	"Ошибка отправки документа " + Документ1С;
			Подробности=	"При формировании файла для " + Документ1С + " обнаружены ошибки. Перейдите в карточку просмотра документа для получения подробной информации.";

			Результат=	Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
			Результат.Вставить("Подробности",		Подробности);
			ОткрытьФормуВыводаОшибки(Результат);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьОтправку(ТекущиеДанные, ПараметрыОтправкиНаСогласование = Неопределено)
		
		Документ1С=			ТекущиеДанные.Документ;
		ТипДокумента=		ТекущиеДанные.ТипДокумента;
		ТекущаяОрганизация=	ТекущиеДанные.Организация;
		CounteragentID=		ТекущиеДанные.CounteragentID;
		ЭтоТестовыйДок=		ТекущиеДанные.ЭтоТестовыйДок;
		ДопПоле=			ТекущиеДанные.ДопПоле;
		IdОтправленого=		ТекущиеДанные.Id;
		
		Organization = ПолучитьЯщикДиадокОрганизации(ТекущаяОрганизация);
		
		ИспользоватьИдентификаторСчета=	Ложь;
		
		Если ПустаяСтрока(IdОтправленого) Тогда
			
			МассивInitialDocumentID = Новый массив;
			Если ЗначениеЗаполнено(Параметры.InitialDocumentID) тогда 
				МассивInitialDocumentID.Добавить(Параметры.InitialDocumentID);
			КонецЕсли;	
			
			Попытка 
				
				ПараметрыSendTask=	Новый Структура();
				
				ПараметрыSendTask.Вставить("ДокументСсылка", 					ТекущиеДанные.Документ);
				ПараметрыSendTask.Вставить("DocumentType", 						ТекущиеДанные.DocumentType);
				ПараметрыSendTask.Вставить("Получатель", 						ТекущиеДанные.Контрагент);
				
				ПараметрыSendTask.Вставить("DocumentType", 						ТекущиеДанные.DocumentType);
				ПараметрыSendTask.Вставить("Organization", 						Organization);
				
				ПараметрыSendTask.Вставить("CounteragentId", 					Строка(Organization.GetCounteragentById(CounteragentId).id));
				ПараметрыSendTask.Вставить("МассивInitialDocumentID", 			МассивInitialDocumentID);
				ПараметрыSendTask.Вставить("IsTest", 							ТекущиеДанные.ЭтоТестовыйДок);
				
				ПараметрыSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
				ПараметрыSendTask.Вставить("НомерЗаказа", 						"");
				ПараметрыSendTask.Вставить("ДопСведения", 						ТекущиеДанные.ДопПоле);
				ПараметрыSendTask.Вставить("IdОтправленого", 					"");
				
				ПараметрыSendTask.Вставить("ВнешняяПечатнаяФорма", 				ТекущиеДанные.ВнешняяПечатнаяФорма);
				ПараметрыSendTask.Вставить("ВыгружатьEXEL", 					ТекущиеДанные.ВыгружатьExcel);
				ПараметрыSendTask.Вставить("ТекущаяОрганизация", 				ТекущиеДанные.Организация);
								
				ПараметрыSendTask.Вставить("ФИОПодписанта ",                    МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization));
				ПараметрыSendTask.Вставить("ReceiverDepartmentId",				ТекущиеДанные.ToDepartmentID);
				
				ЗаполненныйSendTask= МетодКлиента("Модуль_Выгрузка","ПолучитьЗаполненныйSendTask", ПараметрыSendTask, ПараметрыОтправкиНаСогласование);
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ВнешняяПечатнаяФорма) = Ложь Тогда
					ЗаписатьИнформациюОСпискеДополнительныхВПФ(ТекущиеДанные.Документ);
				Иначе
					МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","УстановитьПризнакУсловноОтправленныйДляДокумента", ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма);
				КонецЕсли;
								
				Document = ЗаполненныйSendTask.SendTask.Send();
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ВнешняяПечатнаяФорма) = Истина Тогда
					МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ОбнулитьПризнакУсловноОтправленныйДляДокумента", ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма, "В"); 	
				КонецЕсли;
								
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				ОбработатьОшибку(Organization, Документ1С, ТекстОшибки);
				Если Найти(ТекстОшибки, "##200")=0 И Найти(ТекстОшибки, "##400") = 0 Тогда
					МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ОбнулитьПризнакУсловноОтправленныйДляДокумента", ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма, "Н");
				КонецЕсли;
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		МетодКлиента("Модуль_Выгрузка", "ПослеОтправкиДокумента", Документ1С, Document.DocumentId, Organization.Id, ТекущиеДанные.DocumentType, ТекущаяОрганизация); 
		
		Если (НЕ ПараметрыОтправкиНаСогласование = Неопределено) И (НЕ Document = Неопределено) Тогда
			МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", Document, ПараметрыОтправкиНаСогласование);
		КонецЕсли;
		
		ТекущиеДанные.Вкл = Ложь;
		ТекущиеДанные.ДокВыгружен = Истина;
		
		//ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента", 0.1, Истина);
		
		ВыполнитьВыгрузкуДокумента();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаписатьИнформациюОСпискеДополнительныхВПФ(Документ)
		
		МассивДополинтельныхВПФ = Новый Массив;
		ВыборкаСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Для каждого СтрокаВыбоки из ВыборкаСтрок цикл 
			Если ЗначениеЗаполнено(СтрокаВыбоки.ВнешняяПечатнаяФорма) Тогда
				МассивДополинтельныхВПФ.Добавить(СтрокаВыбоки.ВнешняяПечатнаяФорма);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДополинтельныхВПФ.Количество()>0 Тогда
			МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ЗафиксироватьСписокДополинтельныхВПФПоДокументу", Документ, МассивДополинтельныхВПФ);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьИОтправитьДокумент(ТекущиеДанные, ResolutionRequestType = Неопределено)
		
		ПараметрыОтправкиНаСогласование=	Неопределено;
		Если НЕ ResolutionRequestType = Неопределено Тогда
			ПараметрыОтправкиНаСогласование=	ПолучитьПараметрыОтправки(ТекущиеДанные.Организация, ResolutionRequestType);
			Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
				МетодКлиента("Модуль_Клиент","ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, ТекущиеДанные, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
			Иначе
				ВыполнитьОтправку(ТекущиеДанные, ПараметрыОтправкиНаСогласование);
			КонецЕсли;
		Иначе
			ВыполнитьОтправку(ТекущиеДанные);
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьПометкиСоСкрытыхСтрок()
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
			Если Элементы.СписокДокументов.ПроверитьСтроку(СтрокаСпискаДокументов.ПолучитьИдентификатор())=ложь Тогда 
				СтрокаСпискаДокументов.Вкл=	Ложь;
			КонецЕсли;
		КонецЦикла;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапуститьВыгрузку()
		
		СнятьПометкиСоСкрытыхСтрок();
		НомерДокумента=				0;
		ОбщийМассив=				СписокДокументов.НайтиСтроки(Новый Структура("Вкл, ДокВыгружен", Истина, Ложь));
		ОбщееКоличествоДокументов=	ОбщийМассив.Количество();
		
		ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьВыгрузкуДокумента() Экспорт
		
		ОтключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента");
		
		ИсходнаяОрганизация = Организация;
				
		InitialDocumentID = ?(ЗначениеЗаполнено(Параметры.InitialDocumentID), Параметры.InitialDocumentID, "");
		ТекДанные = Элементы.СписокДокументов.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Документ1С = Текданные.Документ;
		
		ОставшиесяКВыгрузке=	СписокДокументов.НайтиСтроки(Новый Структура("Вкл, ДокВыгружен", Истина, Ложь));
		Если ОставшиесяКВыгрузке.Количество() > 0 Тогда
			СтрокаСписка=	ОставшиесяКВыгрузке[0];
			НомерДокумента=	НомерДокумента + 1;
			Состояние("Производится отправка документов в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, НомерДокумента*100/?(ОбщееКоличествоДокументов = 0, 1, ОбщееКоличествоДокументов) , "Отправлено документов " + НомерДокумента + " из " + ОбщееКоличествоДокументов);
			ПодписатьИОтправитьДокумент(СтрокаСписка, ResolutionRequestType);
		Иначе
			
			Если СтруктураПараметрыДокументаРасширение <> Неопределено Тогда
				ОбновитьСписокСтраницыОтправкиВДиадокРасширение();
			Иначе
				ОбновитьСписокСтраницыОтправкиВДиадок();
			КонецЕсли;
            
			ОбработатьПометки(Истина);
			
			Если Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
				Оповестить("РасширениеДиадокОтправкаДокумента");
				СтруктураПараметрыДокументаРасширение= Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Организация = ИсходнаяОрганизация Тогда
			Если ИсходнаяОрганизация = Неопределено Тогда
				Организация = ИсходнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьПараметрыОтправки(Организация, ResolutionRequestType)
		
		ПараметрыОтправки=	Неопределено;
		
		НайденныеПараметрыОтправки=	ТаблицаКэшПараметровОтправки.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НайденныеПараметрыОтправки.Количество() = 0 Тогда
			
			Organization=		МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
			UserPermissions= 	Organization.GetUserPermissions();
			
			Если UserPermissions.CanRequestResolutions Тогда
				Если Organization.GetUsers().Count = 0 Тогда
					ТекстОшибки=	"Отсутствуют пользователи с необходимым правом";
					Подробности=	"В организации " + Организация.Наименование + " нет пользователей с правом " + ?(ResolutionRequestType = "ApprovementRequest", "согласования", "подписи");
					
					Результат=	Новый Структура();
					Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
					Результат.Вставить("Подробности",		Подробности);
					ОткрытьФормуВыводаОшибки(Результат);
				КонецЕсли;
			Иначе
				ТекстОшибки=	"Недостаточно прав";
				Подробности=	"У пользователя в организации " + Организация + " отсутствует право передачи на подпись или согласование.";
				
				Результат=	Новый Структура();
				Результат.Вставить("ОписаниеОшибки", 	ТекстОшибки);
				Результат.Вставить("Подробности",		Подробности);
				ОткрытьФормуВыводаОшибки(Результат);
			КонецЕсли;
			
		Иначе
			
			КэшированныеПараметрыОтправки=	НайденныеПараметрыОтправки.Получить(0);
			
			ПараметрыОтправкиНаСогласование=	Новый Структура();
			
			ПараметрыОтправкиНаСогласование.Вставить("Организация", 			КэшированныеПараметрыОтправки.Организация);
			ПараметрыОтправкиНаСогласование.Вставить("ФИОПолучателя",			КэшированныеПараметрыОтправки.ФИОПолучателя);
			ПараметрыОтправкиНаСогласование.Вставить("ДолжностьПолучателя",		КэшированныеПараметрыОтправки.ДолжностьПолучателя);
			ПараметрыОтправкиНаСогласование.Вставить("TargetUserID",			КэшированныеПараметрыОтправки.TargetUserID);
			ПараметрыОтправкиНаСогласование.Вставить("TargetDepartmentID",		КэшированныеПараметрыОтправки.TargetDepartmentID);
			ПараметрыОтправкиНаСогласование.Вставить("ResolutionRequestType",	КэшированныеПараметрыОтправки.ResolutionRequestType);
			ПараметрыОтправкиНаСогласование.Вставить("Комментарий",				КэшированныеПараметрыОтправки.Комментарий);
			
			ПараметрыОтправкиНаСогласование.Вставить("ФИОПодписанта",			КэшированныеПараметрыОтправки.ФИОПодписанта);
			ПараметрыОтправкиНаСогласование.Вставить("ДолжностьПодписанта",		КэшированныеПараметрыОтправки.ДолжностьПодписанта);
			
			ПараметрыОтправки=	ПараметрыОтправкиНаСогласование;
			
		КонецЕсли;
		
		Возврат ПараметрыОтправки;
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаКлиенте
	Процедура ОткрытьФормуВыводаОшибки(Результат, ЗакрытьФорму = Ложь)
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с модулем " +Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	Результат.ОписаниеОшибки);
		ПараметрыФормы.Вставить("Подробности", 		Результат.Подробности);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытияФормыОшибки", ЗакрытьФорму);
		
	КонецПроцедуры
	
	&НаСервере
	Функция Организация_2_BoxID_Форма(Организация)
		Возврат МетодСервера(,"Организация_2_BoxID", Организация);
	КонецФункции
	
	&НаКлиенте
	Функция  ВыгрузитьКолонкуМассиваСтруктур(МассивСтруктур, ИмяКолонки)
		результат = новый массив;
		Для Каждого стр из МассивСтруктур цикл
			Если стр.Свойство(ИмяКолонки) Тогда
				Результат.Добавить(стр[ИмяКолонки]);
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;	
	КонецФункции
	
	&НаСервере
	Функция ПолучитьЗначениеСвойства(Знач ОбъектВладелецСвойства, Знач НаименованиеСвойства)
		
		Возврат МетодСервера(,"ПолучитьЗначениеСвойства", ОбъектВладелецСвойства, НаименованиеСвойства);
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ТаблицаЗначений_2_МассивСтруктур(ТаблЗнач)
		Результат = Новый Массив;
		СтрокаКлючей = "";
		Для Каждого Колонка из ТаблЗнач.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей +?(ПустаяСтрока(СтрокаКлючей),"",",")+ Колонка.Имя;
		КонецЦикла;                                                        
		Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") тогда
			
			Для Каждого Стр Из ТаблЗнач Цикл
				ЭлементСписка = Новый  Структура(СтрокаКлючей);
				ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
				Результат.Добавить(ЭлементСписка);             
			КонецЦикла;
		КонецЕсли;
		Возврат Результат;
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТиповСтрокой(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа = "Не определено" Тогда
			ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
		КонецЕсли;
		
		возврат  ПолноеИмяТипа
	КонецФункции	
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораТипыДокументов(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Очистить();
		
		Элемент.СписокВыбора.Добавить("1", "Накладные"	    );
		Элемент.СписокВыбора.Добавить("2", "Счета-фактуры"  );
		Элемент.СписокВыбора.Добавить("3", "Счета на оплату");
		Элемент.СписокВыбора.Добавить("4", "Акты сверки"	);
		
	КонецПроцедуры
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, ТекущиеДанные) Экспорт
		
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			
			НовыеКэшированныеПараметрыОтправки=							ТаблицаКэшПараметровОтправки.Добавить();
			НовыеКэшированныеПараметрыОтправки.Организация=				ПараметрыОтправкиНаСогласование.Организация;
			НовыеКэшированныеПараметрыОтправки.ФИОПолучателя=			ПараметрыОтправкиНаСогласование.ФИОПолучателя;
			НовыеКэшированныеПараметрыОтправки.ДолжностьПолучателя=		ПараметрыОтправкиНаСогласование.ДолжностьПолучателя;
			НовыеКэшированныеПараметрыОтправки.TargetUserID=			ПараметрыОтправкиНаСогласование.TargetUserID;
			НовыеКэшированныеПараметрыОтправки.TargetDepartmentID=		ПараметрыОтправкиНаСогласование.TargetDepartmentID;
			НовыеКэшированныеПараметрыОтправки.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
			НовыеКэшированныеПараметрыОтправки.Комментарий=				ПараметрыОтправкиНаСогласование.Комментарий;
			
			НовыеКэшированныеПараметрыОтправки.ДолжностьПодписанта=		ПараметрыОтправкиНаСогласование.ДолжностьПодписанта;
			НовыеКэшированныеПараметрыОтправки.ФИОПодписанта	=		ПараметрыОтправкиНаСогласование.ФИОПодписанта;
			
			ВыполнитьОтправку(ТекущиеДанные, ПараметрыОтправкиНаСогласование);
			
		Иначе
			ОтключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента");
			Возврат;
		КонецЕсли;
		
	КонецПроцедуры

	// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателяНеформализ(ПараметрыОтправкиНаСогласование, ТекущиеДанные) Экспорт
		
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			
			НовыеКэшированныеПараметрыОтправки=							ТаблицаКэшПараметровОтправки.Добавить();
			НовыеКэшированныеПараметрыОтправки.Организация=				ПараметрыОтправкиНаСогласование.Организация;
			НовыеКэшированныеПараметрыОтправки.ФИОПолучателя=			ПараметрыОтправкиНаСогласование.ФИОПолучателя;
			НовыеКэшированныеПараметрыОтправки.ДолжностьПолучателя=		ПараметрыОтправкиНаСогласование.ДолжностьПолучателя;
			НовыеКэшированныеПараметрыОтправки.TargetUserID=			ПараметрыОтправкиНаСогласование.TargetUserID;
			НовыеКэшированныеПараметрыОтправки.TargetDepartmentID=		ПараметрыОтправкиНаСогласование.TargetDepartmentID;
			НовыеКэшированныеПараметрыОтправки.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
			НовыеКэшированныеПараметрыОтправки.Комментарий=				ПараметрыОтправкиНаСогласование.Комментарий;
			
			НовыеКэшированныеПараметрыОтправки.ДолжностьПодписанта=		ПараметрыОтправкиНаСогласование.ДолжностьПодписанта;
			НовыеКэшированныеПараметрыОтправки.ФИОПодписанта	=		ПараметрыОтправкиНаСогласование.ФИОПодписанта;
			
			ВыполнитьОтправкуНеформализованных(ПараметрыОтправкиНаСогласование);
			
		Иначе
			ОтключитьОбработчикОжидания("ВыполнитьВыгрузкуДокумента");
			Возврат;
		КонецЕсли;
		
	КонецПроцедуры
	// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыФормаВводаТаблицыЗначений(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ТекущиеДанные.ДопПоле=	РезультатЗакрытия;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущиеДанные.ToDepartmentID ИЛИ РезультатЗакрытия.УстановитьДляВсех Тогда
				УстановитьПараметрыПодразделения(ТекущиеДанные, РезультатЗакрытия.DepartmentName, РезультатЗакрытия.DepartmentID, РезультатЗакрытия.УстановитьДляВсех);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикВыборОрганизацииОтправителя(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено тогда 
			ОрганизацияОтправитель= РезультатВыбора.Значение;
			ТаблицаОтношенийОрганизацийКонтрагентов=	Неопределено;
			УправлениеФормой();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораИнтервала(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено
			 И (ДатаНачала <> РезультатЗакрытия.ДатаНачала
				ИЛИ ДатаОкончания <> РезультатЗакрытия.ДатаОкончания)
		Тогда
		
			СписокДокументов.Очистить();
			
			ДатаНачала=		РезультатЗакрытия.ДатаНачала;
			ДатаОкончания=	РезультатЗакрытия.ДатаОкончания;
			
			Элементы.СписокДокументовУстановитьИнтервал.Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", ДатаНачала, ДатаОкончания);
			
			ОбновитьСписокСтраницыОтправкиВДиадок();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораКонтрагента(ВыбранныйКонтрагент, ДополнительныеПараметры) Экспорт
		
		Если НЕ ВыбранныйКонтрагент = Неопределено Тогда
			КонтрагентПолучатель=	ВыбранныйКонтрагент.Представление;
			КонтрагентПолучательID=	ВыбранныйКонтрагент.ID;
			УправлениеФормой();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментарияДопПоля(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			ТекущиеДанные.ДопПоле=	РезультатЗакрытия.Комментарий;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментарияКФайлу(РезультатЗакрытия, СтрокаСпискаФайлов) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			СтрокаСпискаФайлов.Комментарий=	РезультатЗакрытия.Комментарий;
		КонецЕсли;
		
	КонецПроцедуры
	
//} ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаСервере
	Функция ПроверитьПометкиДокументов()
		
		СтруктураИзменений=	Новый Структура;
		СтруктураИзменений.Вставить("НужноМенять", Ложь);
		СтруктураИзменений.Вставить("Вкл", Ложь);
		
		ТабДанные=	СписокДокументов.Выгрузить(, "Вкл");
		ТабДанные.Свернуть("Вкл");
		
		Если ТабДанные.Количество() = 1 Тогда
			СтруктураИзменений.Вставить("НужноМенять", Истина);
			СтрокаТаблицы=	ТабДанные.Получить(0);
			СтруктураИзменений.Вставить("Вкл", СтрокаТаблицы.Вкл);
		КонецЕсли;
		
		Возврат СтруктураИзменений;
		
	КонецФункции
	
	&НаКлиенте
	Процедура СписокДокументовВклПриИзменении(Элемент)
		
		ТекущаяСтрока = Элементы.СписокДокументов.ТекущиеДанные;
		Документ = ТекущаяСтрока.Документ;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ID)=Ложь Тогда
		
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Истина И ТекущаяСтрока.Вкл=Истина Тогда
							
				НаборСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
				
				Для каждого Строка из НаборСтрок Цикл
					
					Если НеобходимоОграничениеНаОтправку(Строка) Тогда
						ОтработатьОграничениеПоВалютномуДокументу(Строка);
					Иначе
						Строка.Вкл = ?(ЗначениеЗаполнено(Строка.ID)=Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
										
			ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Ложь И ТекущаяСтрока.Вкл=Ложь Тогда
									
				НаборСтрок = СписокДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
									
				Для каждого Строка из НаборСтрок Цикл
					Если ЗначениеЗаполнено(Строка.ВнешняяПечатнаяФорма) = Истина Тогда
						Строка.Вкл = Ложь;
					КонецЕсли;
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Ложь И ТекущаяСтрока.Вкл=Истина Тогда
			Если НеобходимоОграничениеНаОтправку(ТекущаяСтрока) Тогда
				ОтработатьОграничениеПоВалютномуДокументу(ТекущаяСтрока);	
			КонецЕсли;
		КонецЕсли;
								
		СтруктураИзменений=	ПроверитьПометкиДокументов();
		
		Если СтруктураИзменений.НужноМенять Тогда
			УстановитьКартинкуИЗаголовокКнопкиПометки(СтруктураИзменений.Вкл);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НеобходимоОграничениеНаОтправку(СтрокаТаблицы)
		
		ВозвращаемоеЗначение = Ложь;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВнешняяПечатнаяФорма)=Истина Тогда //внешняя печатная форма всегда не проведена
				
				ДокументВалютный = МетодСервераБезКонтекста("Модуль_ИнтеграцияБП30","ЭтоВалютныйДокумент", СтрокаТаблицы.Документ);
				Если ДокументВалютный И НЕ ДокументПроведен(СтрокаТаблицы.Документ) Тогда
					ВозвращаемоеЗначение = Истина;	
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Проведен)=Истина И СтрокаТаблицы.Проведен=Ложь Тогда
				
				// { RGS TChubarova 12.06.2016 23:09:51 - отправка непроведенных валютных документов
				//ДокументВалютный = МетодСервераБезКонтекста("Модуль_ИнтеграцияБП30","ЭтоВалютныйДокумент", СтрокаТаблицы.Документ);
				//Если ДокументВалютный = Истина Тогда
				//	ВозвращаемоеЗначение = Истина;	
				//КонецЕсли;
				// } RGS TChubarova 12.06.2016 23:10:25 - отправка непроведенных валютных документов
				
			КонецЕсли;
			
		Иначе
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
					
	КонецФункции
	
	&НаКлиенте
	Процедура ОтработатьОграничениеПоВалютномуДокументу(ТекущаяСтрока)
		ТекущаяСтрока.Вкл = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма)=Истина Тогда
			Сообщить("Документ "+ТекущаяСтрока.Документ+" валютный и не проведен.");
		Иначе
			Сообщить("Документ "+ТекущаяСтрока.ТипДокумента+" № "+СокрЛП(ТекущаяСтрока.Номер)+" от "+Формат(ТекущаяСтрока.Дата, "ДЛФ=Д")+" валютный и не проведен.");
		КонецЕсли;
		
		Сообщить("Для отправки валютного документа, необходимо выполнить его проведение.");	
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ДокументПроведен(ДокументНаПроверку)
		Возврат ДокументНаПроверку.Проведен; 	
	КонецФункции
	
	&НаКлиенте
	Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		УстановитьНаименованиеСистемыНаСервере();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ДатаНачала=    НачалоДня(ТекущаяДата());
		ДатаОкончания= КонецДня(ТекущаяДата());
		
		Если СтруктураПараметрыДокументаРасширение <> Неопределено Тогда
			Элементы.ГруппаОтбор.Видимость 			= Ложь;
			Элементы.ОтправкаСДиска.Видимость 	= Ложь;
			Элементы.СписокДокументовУстановитьИнтервал.Видимость = Ложь;
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			ОбновитьСписокСтраницыОтправкиВДиадокРасширение();
		Иначе
			ОбновитьСписокСтраницыОтправкиВДиадок();
		КонецЕсли;
		
		Элементы.СписокДокументовУстановитьИнтервал.Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", ДатаНачала, ДатаОкончания);
				
		УправлениеФормой();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.ЗагрузитьЗначения(Платформа.ПараметрыКлиент.ОрганизацииФилиалыСопоставленныеСДиадоком);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		ТаблицаОтношенийОрганизацийКонтрагентов= Неопределено;
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		ДобавленныеЗначения= Новый Соответствие;
		ТаблицаОтношенийОрганизацииКонтрагентов= МетодКлиента("Модуль_Выгрузка","ВернутьТаблицуОтношенийОрганизацииКонтрагентов", Организация);
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаОтношенийОрганизацииКонтрагентов Цикл 
			
			Если ДобавленныеЗначения[СтрокаТаблицы.Контрагент] <> Истина Тогда 
				Элемент.СписокВыбора.Добавить(СтрокаТаблицы.Контрагент);
				ДобавленныеЗначения.Вставить(СтрокаТаблицы.Контрагент, Истина);
			КонецЕсли;
			
		КонецЦикла;	
		
		ДобавленныеЗначения= Неопределено;
		Элемент.СписокВыбора.СортироватьПоПредставлению();

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Контрагент);
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	
	&НаКлиенте
	Процедура ТипыДокументовПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, ТипыДокументов);
		
		ПодключитьОбработчикОжидания("ОбновитьСписокСтраницыОтправкиВДиадок", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокДокументовПередУдалением(Элемент, Отказ)
		отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Функция УстановитьПараметрыПодразделения(ТекущиеДанные, DepartmentName, DepartmentID, УстановитьДляВсех = Ложь)
		
		ТекущиеДанные.НаименованиеПодразделения=	DepartmentName;
		ТекущиеДанные.ToDepartmentID=				DepartmentID;
		
		Если УстановитьДляВсех Тогда
			ОтборСтрок=	Новый Структура("Контрагент", ТекущиеДанные.Контрагент);
			НайденныеСтроки=	СписокДокументов.НайтиСтроки(ОтборСтрок);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.НаименованиеПодразделения=	DepartmentName;
				НайденнаяСтрока.ToDepartmentID=				DepartmentID;
			КонецЦикла;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
		
		ТекущиеДанные=	Элементы.СписокДокументов.ТекущиеДанные;
		
		Если Элемент.ТекущийЭлемент.имя = "СписокДокументовДопПоле" Тогда
			
			Отказ=	Истина;
			
			Если ТекущиеДанные.ТребуетсяКлючЗначение = Истина Тогда
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("СтрокаКлючЗначение", 	ТекущиеДанные.ДопПоле);
				ПараметрыФормы.Вставить("DocumentType", 		ТекущиеДанные.DocumentType);
				ПараметрыФормы.Вставить("Организация", 			ТекущиеДанные.Организация);
				ПараметрыФормы.Вставить("IDОрганизации", 		ТекущиеДанные.CounteragentID);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаТаблицыЗначений", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыФормаВводаТаблицыЗначений", ТекущиеДанные);
			Иначе
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок",	"Дополнительное поле");
				ПараметрыФормы.Вставить("Комментарий", 	Элементы.СписокДокументов.ТекущиеДанные.ДопПоле);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияДопПоля", ТекущиеДанные);
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокДокументовНаименованиеПодразделения" Тогда
			
			Отказ=	Истина;
			
			Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ТекущиеДанные.Организация);
			Если Organization = Неопределено Тогда 
				Отказ=	Истина;
				ПоказатьПредупреждение(, "Не удалось получить Организацию " +Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы , 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("DepartmentId", 	ТекущиеДанные.ToDepartmentID);
			ПараметрыФормы.Вставить("OrganizationId", 	Organization.Id);
			ПараметрыФормы.Вставить("CounteragentID", 	ТекущиеДанные.CounteragentID);

			ПараметрыФормы.Вставить("Режим", 			"УстановитьДляВсех");
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущиеДанные);
			
		ИначеЕсли Элемент.ТекущийЭлемент.имя <>  "СписокДокументовВкл" тогда
			Отказ = истина;
			ПросмотрФормы("");
		ИначеЕсли Элементы.СписокДокументов.ТекущиеДанные.ДокВыгружен тогда 
			отказ = истина;
			ПоказатьПредупреждение(, "Этот документ уже выгружен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		ИначеЕсли (Найти(Элементы.СписокДокументов.ТекущиеДанные.типДокумента, "тестовый")=0) и (ПолучитьЯщикДиадокОрганизации(Элементы.СписокДокументов.ТекущиеДанные.Организация).certificate="") тогда
			//пытаемся отправить нетестовый документ, используя логин-парольного пользователя
			отказ = истина;
			ПоказатьПредупреждение(, "Отправка данного документа невозможна.
			|Отправка юридически значимого документа возможна только по сертификату.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометки(Пометка)
		
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
			Если Пометка  Тогда
				Если НЕ СтрокаСпискаДокументов.ДокВыгружен Тогда
					
					Если НеобходимоОграничениеНаОтправку(СтрокаСпискаДокументов) Тогда
						ОтработатьОграничениеПоВалютномуДокументу(СтрокаСпискаДокументов);
					Иначе
						СтрокаСпискаДокументов.Вкл=	Пометка;	
					КонецЕсли;
									
				КонецЕсли;
			Иначе
				СтрокаСпискаДокументов.Вкл=	Пометка;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКартинкуИЗаголовокКнопкиПометки(Пометка)
		
		Если Пометка Тогда
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.УстановитьФлажки;
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Заголовок=	"Снять пометку со всех документов";
		Иначе
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.СнятьФлажки;
			Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Заголовок=	"Пометить все документы";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПометки(СбросПометок = Ложь)
		
		Если Элементы.СписокДокументов.КоманднаяПанель.ПодчиненныеЭлементы.СписокДокументовПометитьСнятьПометку.Картинка= 	БиблиотекаКартинок.СнятьФлажки 
			И НЕ СбросПометок Тогда
			УстановитьКартинкуИЗаголовокКнопкиПометки(Истина);
			СнятьУстановитьПометки(Истина);
		Иначе
			УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
			СнятьУстановитьПометки(Ложь);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель) Тогда
			ПоказатьПредупреждение(, "Выберите отправителя", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("ОрганизацияОтправитель", ОрганизацияОтправитель);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораКонтрагента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораКонтрагента");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = ложь;
		
		СписокОрг = новый СписокЗначений;
		Для каждого ЭлементКонтекста из Платформа.ПараметрыКлиент.КонтекстДиадока цикл 
			СписокОрг.Добавить(ЭлементКонтекста.Организация);
		КонецЦикла;
		
		ОбработчикВыборОрганизацииОтправителя=	Новый ОписаниеОповещения("ОбработчикВыборОрганизацииОтправителя", ЭтаФорма);
		СписокОрг.СортироватьПоЗначению();
		ПоказатьВыборИзСписка(ОбработчикВыборОрганизацииОтправителя, СписокОрг);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		Если ЗначениеЗаполнено(ОрганизацияОтправитель) И НЕ ПустаяСтрока(КонтрагентПолучательID) Тогда
			
			Organization=	МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ОрганизацияОтправитель);
			Counteragent=	Organization.GetCounteragentById(КонтрагентПолучательID);
			
			ЭтоТестовый = ?(Organization.isTest ИЛИ Organization.isPilot ИЛИ Counteragent.isTest ИЛИ Counteragent.isPilot, Истина, Ложь);
			
			Если НЕ ЭтоТестовый И Organization.AuthenticateType <> "Certificate" Тогда
				Элементы.ДекорацияПредупреждение.Заголовок=		"Отправка юридически значимого документа возможна только по сертификату.";
				Элементы.ДекорацияПредупреждение.Видимость=		Истина;
				Элементы.ВыгрузитьСДиска.Доступность=			Ложь;
			ИначеЕсли ЭтоТестовый Тогда
				Элементы.ДекорацияПредупреждение.Заголовок=		"Отправляемые файлы будут тестовыми.";
				Элементы.ДекорацияПредупреждение.Видимость=		Истина;
				Элементы.ВыгрузитьСДиска.Доступность=			Истина;
			Иначе
				Элементы.ДекорацияПредупреждение.Видимость=		Ложь;
				Элементы.ВыгрузитьСДиска.Доступность=			Истина;
			КонецЕсли;
			
		Иначе
			Элементы.ДекорацияПредупреждение.Видимость=		Ложь;
			Элементы.ВыгрузитьСДиска.Доступность=			Истина;
		КонецЕсли;
		
		УстановитьНаименованиеСистемы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьНаименованиеСистемы()
		
		Заголовок = "Отправка документов через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		//Элементы.НадписьОтправленныеСчетаФактуры.Заголовок = "Список Документов для отправки через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		//Элементы.НадписьОтправленныеФайлы.Заголовок = "Список файлов для отправки через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры // ЗаполнитьЗаголовкиФормы()

	&НаСервере
	Процедура УстановитьНаименованиеСистемыНаСервере()
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		Этаформа.Команды.Выгрузить.Подсказка = "Подписать и отправить помеченные документы через " + СловарьWL.НаименованиеСистемы;	
		Этаформа.Команды.УстановитьИнтервал.Подсказка = "Установить интервал даты учета документов, предназначенных для отправки через " + СловарьWL.НаименованиеСистемы;	
		Этаформа.Команды.Обновить.Подсказка = "Обновить список документов, предназначенных для отправки через " + СловарьWL.НаименованиеСистемы;	
		
	КонецПроцедуры // УстановитьНаименованиеСистемыНаСервере()
	
	&НаКлиенте
	Процедура Контрагент1Очистка(Элемент, СтандартнаяОбработка)
		
		КонтрагентПолучательID=	"";
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокФайловНаОтправкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		Если Элементы.СписокФайловНаОтправку.ТекущийЭлемент.Имя = "СписокФайловНаОтправкуФайл" Тогда
			ЗапуститьПриложение(Элементы.СписокФайловНаОтправку.ТекущиеДанные.ПутьКФайлу);
		ИначеЕсли Элементы.СписокФайловНаОтправку.ТекущийЭлемент.Имя = "СписокФайловНаОтправкуКомментарий" Тогда
			ВвестиКомментарийВСтроку(Элементы.СписокФайловНаОтправку.ТекущиеДанные);	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокФайловНаОтправкуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияОтправительОчистка(Элемент, СтандартнаяОбработка)
		УправлениеФормой();
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура ПросмотрФормы(Команда)
		
		ТекДанные=	Элементы.СписокДокументов.ТекущиеДанные;
		
		Если ТекДанные = Неопределено Тогда
			ПоказатьПредупреждение(,"Не выбран документ!", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID",				Организация_2_BoxID_Форма(ТекДанные.Организация));
		ПараметрыФормы.Вставить("DocumentType",			ТекДанные.DocumentType);
		ПараметрыФормы.Вставить("Документ1С", 			Текданные.Документ);
		ПараметрыФормы.Вставить("ТипДокумента", 		Текданные.ТипДокумента);
		ПараметрыФормы.Вставить("ДопСведения", 			ТекДанные.ДопПоле);
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма", ТекДанные.ВнешняяПечатнаяФорма);

		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометкиКоманда(Команда)
		
		ОбработатьПометки();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьДокумент1С(Команда)
		
		ТекущиеДанные= Элементы.СписокДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ТекущиеДанные.Документ);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Обновить(Команда)
		
		Если СтруктураПараметрыДокументаРасширение <> Неопределено Тогда
			ОбновитьСписокСтраницыОтправкиВДиадокРасширение();
		Иначе
			ОбновитьСписокСтраницыОтправкиВДиадок();
		КонецЕсли;
		
		ОбработатьПометки(Истина);
						
	КонецПроцедуры
		
	&НаКлиенте
	Процедура Выгрузить(Команда)
		
		ResolutionRequestType=	Неопределено;
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"   , ДатаНачала);
		ПараметрыФормы.Вставить("Датаокончания", Датаокончания);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыгрузитьСДиска(Команда)
		
		// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		ВыгрузитьНеформализованныеДокументы(Ложь)
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласованиеНеформализ(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"ApprovementRequest";
		ВыгрузитьНеформализованныеДокументы(Истина, ResolutionRequestType);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПередатьНаПодписаниеНеформализ(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"SignatureRequest";
		ВыгрузитьНеформализованныеДокументы(Истина, ResolutionRequestType);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыгрузитьНеформализованныеДокументы(РежимСогласования, ResolutionRequestType = "")
		// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель) Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Выберите отправителя";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(КонтрагентПолучательID) Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Выберите получателя";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если СписокФайловНаОтправку.Количество() = 0 Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Нет файлов, предназначенных для отправки";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		ПараметрыОтправкиНаСогласование = Неопределено;
		
		Если РежимСогласования Тогда
			ПараметрыОтправкиНаСогласование=	ПолучитьПараметрыОтправки(ОрганизацияОтправитель, ResolutionRequestType);
			Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
				// { RGS TChubarova 16.05.2016 1:42:08 - TCS-0002911
				//Модуль_Клиент.ВыбратьПараметрыПолучателяПриОтправкеНаСогласованиеНеформализ(ЭтотОбъект, ОрганизацияОтправитель, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
				МетодКлиента("Модуль_Клиент","ВыбратьПараметрыПолучателяПриОтправкеНаСогласованиеНеформализ", ЭтаФорма, ОрганизацияОтправитель, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
				// } RGS TChubarova 16.05.2016 1:42:22 - TCS-0002911
			Иначе 
				ВыполнитьОтправкуНеформализованных(ПараметрыОтправкиНаСогласование);
			КонецЕсли;
		Иначе
			ПараметрыОтправкиНаСогласование = Неопределено;
			ВыполнитьОтправкуНеформализованных(ПараметрыОтправкиНаСогласование);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьОтправкуНеформализованных(ПараметрыОтправкиНаСогласование = Неопределено)
		// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		
		ДанныеФайловДляОтправки = Новый Массив;
		Для Каждого СтрокаТаблицы Из СписокФайловНаОтправку Цикл
			ДанныеФайловДляОтправки.Добавить(Новый Структура("ИмяФайла, ПутьКФайлу, Комментарий, ЗапрашиватьОтветнуюПодпись", СтрокаТаблицы.Файл, СтрокаТаблицы.ПутьКФайлу, СтрокаТаблицы.Комментарий, СтрокаТаблицы.ЗапрашиватьответнуюПодпись));
		КонецЦикла;
		
		// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			РежимСогласования = Истина
		Иначе 
			РежимСогласования = Ложь;
		КонецЕсли;
		// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		
		Попытка 
			// { RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
			//Результат=	ОтправитьНеформализованныеДокументы(КонтрагентПолучательID, , ДанныеФайловДляОтправки);
			Результат=	ОтправитьНеформализованныеДокументы(КонтрагентПолучательID, , ДанныеФайловДляОтправки,РежимСогласования, ПараметрыОтправкиНаСогласование);
			// } RGS TChubarova 16.05.2016 0:53:03 - Диадок Безводинских Согласование файлов
		Исключение 
							
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка отправки");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Ошибка отправки неформализованного документа");
			ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);

			Возврат;
		КонецПопытки;
		
		КоличествоОтправлено=	Результат.Количество();
		Если КоличествоОтправлено > 0 Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Успешно отправлено " + КоличествоОтправлено + ?(КоличествоОтправлено >= 2 И КоличествоОтправлено <= 4, " файла", " файлов") + " из " + СписокФайловНаОтправку.Количество();
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		СписокФайловНаОтправку.Очистить();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайл(Команда)
		
		МассивВыбранныхФайлов=	МетодКлиента("Модуль_Клиент","ВернутьМассивВыбранныхФайлов", Истина);
		Если МассивВыбранныхФайлов.Количество() > 0 Тогда		
			
			МасБольшиеФайлы = Новый Массив;
			Для Каждого ЭлементМассива Из МассивВыбранныхФайлов Цикл
				
				ФайлДанных = Новый Файл(ЭлементМассива);
				Если ФайлДанных.Размер() > (5*1024*1024) Тогда
					МасБольшиеФайлы.Добавить(ФайлДанных);
					Продолжить;
				КонецЕсли;
				
				ТекДанные=				СписокФайловНаОтправку.Добавить();
				ТекДанные.Файл=			ФайлДанных.Имя;  
				ТекДанные.ПутьКФайлу=	ФайлДанных.ПолноеИмя;
				ТекДанные.ЗапрашиватьОтветнуюПодпись=Истина;
			КонецЦикла;
			
			Если МасБольшиеФайлы.Количество() > 0 Тогда
				
				СтрПредупреждения = "Размер отправляемого файла не должен превышать 5Мб.
				|Невозможно добавить следующие файлы:";
				Для каждого большойФайл Из масБольшиеФайлы Цикл
					СтрПредупреждения = СтрПредупреждения + "
					|- " + большойФайл.Имя;
				КонецЦикла;
				
				СообщениеПользователю=			Новый СообщениеПользователю;
				СообщениеПользователю.Текст=	СтрПредупреждения;
				СообщениеПользователю.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"ApprovementRequest";
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		ТаблицаКэшПараметровОтправки.Очистить();
		ResolutionRequestType=	"SignatureRequest";
		ЗапуститьВыгрузку();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФайла(Команда)
		
		Если НЕ Элементы.СписокФайловНаОтправку.ТекущиеДанные = Неопределено Тогда
			ЗапуститьПриложение(Элементы.СписокФайловНаОтправку.ТекущиеДанные.ПутьКФайлу);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКомментарий(Команда)
		
		ВвестиКомментарийВСтроку(Элементы.СписокФайловНаОтправку.ТекущиеДанные);
		
	КонецПроцедуры
	
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

	&НаКлиенте
	Процедура ОбновитьСписокСтраницыОтправкиВДиадокРасширение()
		
		Состояние("Обновление списка документов для отправки в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		МассивОтношенийОрганизацийКонтрагентов = МетодКлиента("Модуль_Выгрузка","ВернутьТаблицуОтношенийОрганизацииКонтрагентов", СтруктураПараметрыДокументаРасширение.Организация);
		
		Для каждого КонтекстЯщика из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			Если КонтекстЯщика.Организация = СтруктураПараметрыДокументаРасширение.Организация Тогда
				ИндексЭлементаМассива = 0;
				Пока ИндексЭлементаМассива<МассивОтношенийОрганизацийКонтрагентов.Количество() Цикл
					
					ЭлементМассива = МассивОтношенийОрганизацийКонтрагентов[ИндексЭлементаМассива]; 
					
					Если ЭлементМассива.Контрагент = СтруктураПараметрыДокументаРасширение.КонтрагентСсылка Тогда
						ЭлементМассива.ЭтоТестоваяОрганизация = (КонтекстЯщика.Box.isTest ИЛИ КонтекстЯщика.Box.isPilot);
						
						Counteragent = КонтекстЯщика.Box.GetCounteragentById(ЭлементМассива.ИдКонтрагента);
						Если НЕ Counteragent = Неопределено Тогда
							ЭлементМассива.Статус = Counteragent.GetStatus();
							ЭлементМассива.ЭтоТестовыйКонтрагент = (Counteragent.isTest или Counteragent.isPilot);
						КонецЕсли;
						
						ИндексЭлементаМассива = ИндексЭлементаМассива + 1;
						
					Иначе
						МассивОтношенийОрганизацийКонтрагентов.Удалить(ИндексЭлементаМассива);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
					
		КонецЦикла;
		
		
		СформироватьТаблицуЗначенийДокументовДляОтправкиДиадокРасширение(
		?(ЗначениеЗаполнено(Организация), Организация, Неопределено),
		?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено), 
		МассивОтношенийОрганизацийКонтрагентов,
		СтруктураПараметрыДокументаРасширение);
			
		УстановитьКартинкуИЗаголовокКнопкиПометки(Ложь);
		
		//Состояние("Обновление списка документов завершено");
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СформироватьТаблицуЗначенийДокументовДляОтправкиДиадокРасширение(СписокОрганизаций, СписокКонтрагентов, МассивОтношенийОрганизацийКонтрагентов, СтруктураПараметрыДокументаРасширение)
		
		МассивОрганизаций =	Новый Массив;
		 			
		Стр = Новый Структура("Организация, ОтпрНеПроведенные, ФормироватьСчетНаОсновании");
		
		Стр.Организация = СтруктураПараметрыДокументаРасширение.Организация;
		
		ДиадокОтправкаНепроведенных = ПолучитьЗначениеСвойства(СтруктураПараметрыДокументаРасширение.Организация, "ДиадокОтправкаНепроведенных");
		Стр.ОтпрНеПроведенные 		= ?(ЗначениеЗаполнено(ДиадокОтправкаНепроведенных), ДиадокОтправкаНепроведенных, Ложь);
			
		ФормироватьСчетНаОсновании 		= ПолучитьЗначениеСвойства(СтруктураПараметрыДокументаРасширение.Организация, "ДиадокФормироватьСчетНаОсновании");
		Стр.ФормироватьСчетНаОсновании 	= ?(ЗначениеЗаполнено(ФормироватьСчетНаОсновании), ФормироватьСчетНаОсновании, 0);
			
		МассивОрганизаций.Добавить(Стр);
		
		СтруктураПараметровЗапроса = Новый Структура;
		СтруктураПараметровЗапроса.Вставить("РТУСсылка", СтруктураПараметрыДокументаРасширение.РеализацияСсылка);
		СтруктураПараметровЗапроса.Вставить("СчетСсылка", СтруктураПараметрыДокументаРасширение.СчетНаОплатуСсылка);
		СтруктураПараметровЗапроса.Вставить("СФСсылка", СтруктураПараметрыДокументаРасширение.СФСсылка);
		
		ТЗВыгрузкиВДиадок= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьТЗВыгрузкиВДиадок",,,,МассивОрганизаций,,МассивОтношенийОрганизацийКонтрагентов, СтруктураПараметровЗапроса, Истина);
		
		СписокДокументов.Загрузить(МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","ДополнитьТаблицуВнешнимиПФ", МассивОтношенийОрганизацийКонтрагентов, ТЗВыгрузкиВДиадок));
		
	КонецПроцедуры

//} РАСШИРЕНИЕ КОНФИГУРАЦИИ	