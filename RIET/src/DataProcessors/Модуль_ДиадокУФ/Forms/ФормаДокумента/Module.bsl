////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем UserPermissions;
	&НаКлиенте
	Перем Organization Экспорт; 
	&НаКлиенте
	Перем ЭДОбъект Экспорт; 
	
	&НаКлиенте
	Перем МассивСсылокРНК Экспорт;
	&НаКлиенте
	Перем ПодходящаяСФ;
	
	&НаКлиенте
	Перем НомерЗаказа Экспорт;
	
	&НаКлиенте
	Перем ПредставлениеСтатусаРоуминг, ПредставлениеСтатусаРоумингДетали;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ РАБОТА С КОНТЕНТОМ

	////////////////////////////////////////////////////////////////////////////////
	//{ ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		
		&НаКлиентеНаСервереБезКонтекста
		Функция СкопироватьСтруктуру(Знач СтруктураИсходник)
			
			СтруктураПриемник=	Новый Структура;
			Для каждого ЭлементИсходник Из СтруктураИсходник Цикл
				Если ТипЗнч(ЭлементИсходник.Значение) = Тип("Массив") Тогда
					СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Новый Массив);	
				Иначе
					СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Неопределено);	
				КонецЕсли;
			КонецЦикла;
			
			Возврат СтруктураПриемник;
			
		КонецФункции
		
		&НаКлиенте
		Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, описаниеСтруктурыДанных = "") Экспорт
			
			Если типЗнч(СтруктураДанных) = тип("Структура") Тогда
				Для Каждого Элемент Из СтруктураДанных Цикл
					Если типЗнч(Элемент.значение)=тип("Структура") Тогда
						Попытка
							ЭлементКонтента =  content[Элемент.Ключ];
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента, Элемент.Значение, описаниеСтруктурыДанных+"."+Элемент.Ключ);
					ИначеЕсли Элемент.Ключ = "AddressString" Тогда
						Попытка
							СтруктураДанных.Вставить(Элемент.Ключ, content.GetAddressString());
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
						КонецПопытки			
					ИначеЕсли Элемент.Ключ = "Items" Тогда 
						
						Если Content.Type = "InvoiceContent" Тогда
							СтруктураItem=	ПолучитьСтруктуруItemsInvoice();
						ИначеЕсли Content.Type = "InvoiceCorrectionContent" Тогда
							СтруктураItem=	ПолучитьСтруктуруItemsInvoiceCorrection();
						ИначеЕсли Content.Type = "XmlAcceptanceCertificateContent" Тогда
							СтруктураItem=	ПолучитьСтруктуруItemsXmlAcceptanceCertificate();
						Иначе
							СтруктураItem=	ПолучитьСтруктуруItemsXmlTorg12();
						КонецЕсли;
						
						Для ц = 0 По content.Items.Count-1 Цикл
							ContentItem=	СкопироватьСтруктуру(СтруктураItem);
							Попытка 
								item =content.Items.getItem(ц);  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
							КонецПопытки;
							ЗаполнитьСтруктуруПоКонтенту(item, ContentItem, описаниеСтруктурыДанных+".Items");
							СтруктураДанных.Items.Добавить(ContentItem);
						КонецЦикла;
						
					ИначеЕсли Элемент.Ключ = "AmountsDec" Или Элемент.Ключ = "AmountsInc" Или Элемент.Ключ = "OriginalValues" Или Элемент.Ключ = "CorrectedValues" Тогда
						
						СтруктураДанных[Элемент.Ключ] = ?(Элемент.Ключ = "AmountsDec" ИЛИ Элемент.Ключ = "AmountsInc",  Инициализировать_AmountsDec_AmountsInc(),  Инициализировать_OriginalValues_CorrectedValues());
						попытка 
							ЭлементКонтента =  content[Элемент.Ключ];
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента, СтруктураДанных[Элемент.Ключ], описаниеСтруктурыДанных + "." + Элемент.Ключ);
						
					ИначеЕсли Элемент.Ключ = "PaymentDocuments"  тогда 
						
						СтруктураPaymentDocuments=	ПолучитьСтруктуруPaymentDocuments();
						
						для ц = 0 по  content.PaymentDocuments.Count-1 цикл
							
							ContentPaymentDocuments=	СкопироватьСтруктуру(СтруктураPaymentDocuments);
							
							попытка 
								PaymentDocument =content.PaymentDocuments.getItem(ц);  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьСтруктуруПоКонтенту(PaymentDocument, ContentPaymentDocuments, описаниеСтруктурыДанных+".PaymentDocuments");
							СтруктураДанных.PaymentDocuments.Добавить(ContentPaymentDocuments);
						конеццикла;
						
					ИначеЕсли Элемент.Ключ = "StructedAdditionalInfos" Тогда 
						
						СтруктураAdditionalInfo = ПолучитьСтруктуруAdditionalInfos();
						
						Для ц = 0 По content.StructedAdditionalInfos.Count-1 Цикл
							ContentAdditionalInfo=	СкопироватьСтруктуру(СтруктураAdditionalInfo);
							Попытка 
								AdditionalInfo =content.StructedAdditionalInfos.getItem(ц);  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьСтруктуруПоКонтенту(AdditionalInfo, ContentAdditionalInfo, описаниеСтруктурыДанных+".Items");
							СтруктураДанных.StructedAdditionalInfos.Добавить(ContentAdditionalInfo);	
						КонецЦикла;

					ИначеЕсли Элемент.Ключ = "OriginalInvoices" Тогда 
						
						СтруктураOriginalInvoice = ПолучитьСтруктуруOriginalInvoices();
						
						Для ц = 0 По content.OriginalInvoices.Count-1 Цикл
							ContentInvoice =	СкопироватьСтруктуру(СтруктураOriginalInvoice);
							Попытка 
								Invoice =content.OriginalInvoices.getItem(ц);  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьСтруктуруПоКонтенту(Invoice, ContentInvoice, описаниеСтруктурыДанных+".OriginalInvoices");
							СтруктураДанных.OriginalInvoices.Добавить(ContentInvoice);
						КонецЦикла;
						
					ИначеЕсли найти(Элемент.Ключ, "Ссылка")=0 тогда  
						Попытка
							СтруктураДанных.вставить(Элемент.Ключ, content[Элемент.Ключ]);
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.Ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаСервере
		Функция ПолучитьСтруктуруPaymentDocuments()
			Возврат МетодСервера(,"ПолучитьСтруктуруPaymentDocuments");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsXmlTorg12()
			Возврат МетодСервера(,"ПолучитьСтруктуруItemsXmlTorg12");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsXmlAcceptanceCertificate()
			Возврат МетодСервера(,"ПолучитьСтруктуруItemsXmlAcceptanceCertificate");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsInvoice()
			Возврат МетодСервера(,"ПолучитьСтруктуруItemsInvoice");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруItemsInvoiceCorrection()
			Возврат МетодСервера(,"ПолучитьСтруктуруItemsInvoiceCorrection");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруAdditionalInfos()
			Возврат МетодСервера(,"ПолучитьСтруктуруAdditionalInfos");
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтруктуруOriginalInvoices()
			Возврат МетодСервера(,"ПолучитьСтруктуруOriginalInvoices");
		КонецФункции
		
				
	//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////
	//{ ИНИЦИАЛИЗАЦИЯ
		
		&НаСервере
		Функция Инициализировать_AmountsDec_AmountsInc() 
			Возврат МетодСервера(,"Инициализировать_AmountsDec_AmountsInc");
		конецФункции	
		
		&НаСервере
		Функция Инициализировать_OriginalValues_CorrectedValues()
			Возврат МетодСервера(,"Инициализировать_OriginalValues_CorrectedValues");
		конецФункции	
		
		&НаКлиентеНаСервереБезКонтекста
		Функция ИнициализироватьДанныеЭЦП()
			
			Результат=	Новый Структура("Certificate, SignDate, SignatureAuthenticityDate");
			Результат.Certificate=	ИнициализироватьСертификат();
			
			Возврат Результат;
			
		КонецФункции
		
		&НаКлиентеНаСервереБезКонтекста
		функция  ИнициализироватьSigner(ПодписантСФ=ложь)
			возврат новый структура("Surname, FirstName, Patronymic, inn"+?(ПодписантСФ,", IsSoleProprietor, SoleProprietorRegistrationCertificate" , ", JobTitle" ));
		КонецФункции

		&НаКлиентеНаСервереБезКонтекста
		Функция  ИнициализироватьDocumentMetaData()
			возврат новый структура("Timestamp, DocumentID");
		КонецФункции	
			
		&НаКлиентеНаСервереБезКонтекста
		Функция ИнициализироватьСтруктуруДанныхПодписей()
			
			Результат=	Новый Структура("SellerSigner, BuyerSigner, SenderSignature, RecipientSignature, DocumentMetaData");
			
			Результат.SellerSigner=			ИнициализироватьSigner();
			Результат.BuyerSigner=			ИнициализироватьSigner();
			Результат.SenderSignature=		ИнициализироватьДанныеЭЦП();
			Результат.RecipientSignature=	ИнициализироватьДанныеЭЦП();
			Результат.DocumentMetaData  =   ИнициализироватьDocumentMetaData();

			
			Возврат Результат;
			
		КонецФункции

		&НаКлиентеНаСервереБезКонтекста
		Функция ИнициализироватьСертификат()
			Возврат Новый Структура("Name, OrganizationName, IssuerName, IsQualifiedElectronicSignature");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlTorg12_ТитулПолучателя() 
			результат = новый структура("Accepter, Attorney, Receiver, ShipmentReceiptDate, AdditionalInfo"); 
			результат.Accepter = ИнициализироватьПодписанта();
			результат.Receiver = ИнициализироватьПодписанта();
			результат.Attorney = ИнициализироватьДоверенность();
			возврат результат;
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьДоверенность()
			Возврат МетодСервера(,"ИнициализироватьДоверенность");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьПодписанта()
			Возврат МетодСервера(,"ИнициализироватьПодписанта");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляInvoice()
			Возврат МетодСервера(,"ИнициализироватьКонтентДляInvoice");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляInvoiceCorrection()
			Возврат МетодСервера(,"ИнициализироватьКонтентДляInvoiceCorrection");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlAcceptanceCertificate()
			Возврат МетодСервера(,"ИнициализироватьКонтентДляXmlAcceptanceCertificate");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlAcceptanceCertificate_ТитулПолучателя()
			Возврат МетодСервера(,"ИнициализироватьКонтентДляXmlAcceptanceCertificate_ТитулПолучателя");
		КонецФункции
		
		&НаСервере
		Функция ИнициализироватьКонтентДляXmlTorg12()
			Возврат МетодСервера(,"ИнициализироватьКонтентДляXmlTorg12");
		КонецФункции
		
	//} ИНИЦИАЛИЗАЦИЯ
	////////////////////////////////////////////////////////////////////////////////
	
//} РАБОТА С КОНТЕНТОМ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)
		
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуСчета", ДокументСсылка);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАктаСверки", ДокументСсылка);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка)
		
		Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументСсылка);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАкта(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАкта", СсылкаНаОбъект);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормСчета(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормСчета", СсылкаНаОбъект);
	КонецФункции
	
	&НаСервере
	Функция ПолучитьСтруктуруПечатныхФормАктаСверки(Знач СсылкаНаОбъект)
		Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАктаСверки", СсылкаНаОбъект);
	КонецФункции
	
	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля)
		
		Если DocumentType = "XmlTorg12" Тогда
			
			DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlTorg12Content", Документ1С, Неопределено, НомерЗаказа, ДопСведения, ФИОПодписанта);
			
			ТабПоле=	СформироватьПечатнуюФормуПоXmlTorg12Content(Новый Структура("XmlTorg12Content", DocumentContent), ВизуализироватьДопПоля);
			Ошибки=		МетодСервераБезКонтекста(,"ВалидацияXmlTorg12Content", DocumentContent);
			
		ИначеЕсли DocumentType  = "Invoice" Тогда
			
			Если МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ЭтоКСФ", Документ1С) Тогда
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceCorrectionContent", Документ1С, Неопределено, ДопСведения, ФИОПодписанта);
				ТабПоле=			СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Новый Структура("InvoiceCorrectionContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияInvoiceCorrectionContent", DocumentContent, Документ1С);
			Иначе
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
				ТабПоле=			СформироватьПечатнуюФормуПоInvoiceContent(Новый Структура("InvoiceContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияInvoiceContent", DocumentContent, Документ1С);
			КонецЕсли;
			
		ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАкта(Документ1С)) Тогда
				DocumentContent=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlAcceptanceCertificateContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
				ТабПоле=			СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Новый Структура("XmlAcceptanceCertificateContent", DocumentContent), ВизуализироватьДопПоля);
				Ошибки=				МетодСервераБезКонтекста(,"ВалидацияXmlAcceptanceCertificateContent", DocumentContent);
			Иначе
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАкта(Документ1С);
				ТабПоле=				РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли;
			
		ИначеЕсли DocumentType = "NonformalizedProforma" Тогда	
			
			Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				ТабПоле= МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","СформироватьВнешнююПечатнуюФормуДляДиадокаПоСсылкеВПФ", Документ1С, ВнешняяПечатнаяФорма,,,Организация).Таблица;
				Ошибки="";
			ИначеЕсли НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуСчета(Документ1С)) Тогда
				РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуСчетаНаОплату", Документ1С, Неопределено, ФИОПодписанта);
				ТабПоле=				РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			Иначе 
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормСчета(Документ1С);
				ТабПоле=				РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли;
			
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда
			
			Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАктаСверки(Документ1С)) Тогда
				РезультатВизуализации=	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуАктаСверки", Документ1С, Неопределено, ФИОПодписанта);
				ТабПоле=				РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;	
			Иначе
				РезультатВизуализации=	ПолучитьСтруктуруПечатныхФормАктаСверки(Документ1С);
				ТабПоле=				РезультатВизуализации.Таблица;
				Ошибки=					РезультатВизуализации.СписокОшибок;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Знач XmlAcceptanceCertificateContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent", XmlAcceptanceCertificateContent, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоXmlTorg12Content(Знач XmlTorg12Content, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоXmlTorg12Content", XmlTorg12Content, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Знач InvoiceContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоInvoiceCorrectionContent", InvoiceContent, ВизуализироватьДопПоля);
	КонецФункции
	
	&НаСервере
	Функция СформироватьПечатнуюФормуПоInvoiceContent(Знач InvoiceContent, Знач ВизуализироватьДопПоля)
		Возврат МетодСервера(,"СформироватьПечатнуюФормуПоInvoiceContent", InvoiceContent, ВизуализироватьДопПоля);
	КонецФункции

	&НаКлиенте
	Функция ПолучитьПечатнуюФормуКорректировочногоСчетаФактурыЭДОбъекту(Document, ВизуализироватьДопПоля, Content)
		
		СтруктураКонтента =  ИнициализироватьКонтентДляInvoiceCorrection();
		ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураКонтента, "InvoiceCorrectionContent");
		
		СтруктураКонтентаПодписей = СформироватьДанныеОПодписях(Document, Content);

		Content=	Новый Структура("InvoiceCorrectionContent, InvoiceSignatureStructure", СтруктураКонтента, СтруктураКонтентаПодписей);
		
		возврат СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуСчетаФактурыЭДОбъекту(Document, ВизуализироватьДопПоля, DocumentContent)
		
	    СтруктураКонтента =  ИнициализироватьКонтентДляInvoice();
		ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "InvoiceContent");
		
		СтруктураКонтентаПодписей = СформироватьДанныеОПодписях(Document, DocumentContent);

		
		Content=	Новый Структура("InvoiceContent, InvoiceSignatureStructure", СтруктураКонтента, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуПоInvoiceContent(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуАктаПоЭДОбъекту(Document, ВизуализироватьДопПоля) экспорт 
		
		Content =  Document.GetContent();
		BuyerContent =  Document.GetBuyerContent();
		СтруктураКонтента =  ИнициализироватьКонтентДляXmlAcceptanceCertificate();
		ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураКонтента, "XmlAcceptanceCertificate");
		
		СтруктураКонтентаПодписей=	СформироватьДанныеОПодписях(Document, Content, BuyerContent);
		
		Если  BuyerContent<>Неопределено тогда 
			СтруктураКонтентаПолучателя  =  ИнициализироватьКонтентДляXmlAcceptanceCertificate_ТитулПолучателя();
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent, СтруктураКонтентаПолучателя, "XmlAcceptanceCertificate");
		Иначе 
			СтруктураКонтентаПолучателя  =  неопределено
		КонецЕсли;	 
		
		Content=	Новый Структура("XmlAcceptanceCertificateContent, XmlAcceptanceCertificateBuyerContent, XmlAcceptanceCertificateSignatureStructure", СтруктураКонтента, СтруктураКонтентаПолучателя, СтруктураКонтентаПодписей);
		
		возврат СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Content, ВизуализироватьДопПоля(Document));
		
	КонецФункции
	
	
	&НаКлиенте
	Функция СформироватьДанныеОПодписях(Document, DocumentContent, BuyerContent=неопределено)
		СтруктураКонтентаПодписей=	ИнициализироватьСтруктуруДанныхПодписей();
		СтруктураКонтентаПодписей.DocumentMetaData.DocumentID = Document.DocumentID;
		СтруктураКонтентаПодписей.DocumentMetaData.TimeStamp  = Document.TimeStamp;
		
		ЗаполнитьСтруктуруПоКонтенту(DocumentContent.Signer, СтруктураКонтентаПодписей.SellerSigner);
			
		SenderSignatureContent=	Document.GetSenderSignature();
		Если НЕ SenderSignatureContent = Неопределено Тогда
			ЗаполнитьСтруктуруПоКонтенту(SenderSignatureContent, СтруктураКонтентаПодписей.SenderSignature);
		КонецЕсли;
			
		RecipientSignatureContent=	Document.GetRecipientSignature();
		Если НЕ RecipientSignatureContent = Неопределено Тогда
			ЗаполнитьСтруктуруПоКонтенту(RecipientSignatureContent, СтруктураКонтентаПодписей.RecipientSignature);
		КонецЕсли;
		
		Если BuyerContent <> неопределено тогда 
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent.Signer, СтруктураКонтентаПодписей.BuyerSigner);
		КонецЕсли;	 
		
		возврат  СтруктураКонтентаПодписей;
	КонецФункции	
	
	&НаКлиенте
	Функция ПолучитьПечатнуюФормуТорг12ПоЭДОбъекту(Document, ВизуализироватьДопПоля)
		
		DocumentContent =  Document.GetContent();
		BuyerContent =  Document.GetBuyerContent();
		
		СтруктураКонтента =  ИнициализироватьКонтентДляXmlTorg12();
		ЗаполнитьСтруктуруПоКонтенту(DocumentContent, СтруктураКонтента, "XmlTorg12Content");
			
		СтруктураКонтентаПодписей=	СформироватьДанныеОПодписях(Document, DocumentContent, BuyerContent);
		
		Если BuyerContent <> неопределено тогда 
			СтруктураКонтентаПолучателя =  ИнициализироватьКонтентДляXmlTorg12_ТитулПолучателя();
			ЗаполнитьСтруктуруПоКонтенту(BuyerContent, СтруктураКонтентаПолучателя, "XmlTorg12Content");
		Иначе 
			СтруктураКонтентаПолучателя = неопределено;
		КонецЕсли;	 
		
		Content=	Новый Структура("XmlTorg12Content, XmlTorg12BuyerContent, XmlTorg12SignatureStructure", СтруктураКонтента, СтруктураКонтентаПолучателя, СтруктураКонтентаПодписей);
		
		Возврат СформироватьПечатнуюФормуПоXmlTorg12Content(Content, ВизуализироватьДопПоля);
		
	КонецФункции
	
//} ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ
////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаКлиенте
	Процедура СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибки) экспорт 
		
		ИДЯщика=	Прав(ТекстОшибки, СтрДлина(ТекстОшибки) - Найти(ТекстОшибки, "FNS reg message was not sent for box")-36);
		ИДЯщика= 	Лев(ИдЯщика, Найти(ИдЯщика, ".")-1);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("OrganizationId",	ИДЯщика);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаСообщенияОбОтсутствииРегистрацииФНС", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры 	
	
	&НаКлиенте
	Процедура ОбновитьДокумент1С()
		
		Документ1С=	ПолучитьDocumentID_2_Документ(ЭДОбъект.DocumentID, ЭДОбъект.OrganizationID);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID);
		
	КонецФункции
	
	&НаСервере
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, DocumentType = Неопределено)
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", Документ, DocumentID, BoxID);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСвязаннуюОрганизацию(BoxID)
		
		Возврат МетодСервера(,"BoxID_2_Организация", BoxID);
		
	КонецФункции
	
	&НаКлиенте
	Процедура СообщениеОбОшибкеДиадок(текстОшибки) экспорт 
		ПоказатьПредупреждение(, МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ТекстОшибки), 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЭДОбъект()
		
		ЭДОбъект=	ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
		
		ПросмотрФормы();
		
		ОбновитьДокумент1С();
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаСервере
	Функция СформироватьТитулПолучателя(СтруктураПодписи, Type, DocumentDate) Экспорт
		Возврат МетодСервера(,"СформироватьТитулПолучателя", СтруктураПодписи, Type, DocumentDate);		
	КонецФункции	
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ

	&НаКлиенте
	Процедура СоздатьДокумент(Режим) Экспорт
		
		Если Режим = "Ввод" Тогда
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("Type",					ЭДОбъект.type);
			ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной");

		ИначеЕсли Режим = "Сопоставление" Тогда
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("Type", 				ЭДОбъект.Type);
			ПараметрыФормы.Вставить("CounteragentBoxID", 	ЭДОбъект.Counteragent.ID);
			ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Total",				ЭДОбъект.Total);
			ПараметрыФормы.Вставить("Режим", 				Режим);
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокумента");
			
		ИначеЕсли Режим = "ВводСВыборомОснований" Тогда
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("Type", 				ЭДОбъект.Type);
			ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
			ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 				Режим);
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
						
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием");
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОшибокВалидации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаНакладной(ПараметрыФормы, ДополнительныеПараметры) Экспорт
		
		Если НЕ ПараметрыФормы = Неопределено Тогда
			Если ЗначениеЗаполнено(ПараметрыФормы.Документ1С) Тогда
				ОбработчикСозданиеДокумента(ПараметрыФормы.Документ1С);
			Иначе
				СоздатьДокумент(ПараметрыФормы.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатЗакрытия.Документ1С) Тогда
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, РезультатЗакрытия.СписокСсылокРНК.ВыгрузитьЗначения());
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗакрытиеФормыСФ(РезультатЗакрытия, ДокументОбъект) Экспорт
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ОбработчикСозданиеДокумента(ДокументОбъект.Ссылка);
		КонецЕсли;
		
		МассивСсылокРНК=	Новый Массив;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка) Экспорт
		
		Если ЗначениеЗаполнено(ДокументССылка) Тогда
			МетодКлиента("Модуль_Клиент","ОбработчикСозданиеДокумента", ДокументССылка, ЭДОбъект);
			ОбновитьДокумент1С();
			ПросмотрФормы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущийDepartmentId Тогда
				
				ЭДОбъект.Move(РезультатЗакрытия.DepartmentID);
				
				ОбновитьЭДОбъект();
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", 			ЭДОбъект.OrganizationID);
				ПараметрыОповещения.Вставить("DocumentId", 		ЭДОбъект.DocumentID);
				ПараметрыОповещения.Вставить("DepartmentName", 	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Name));
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеПодразделения", ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, ТекущиеДанные) Экспорт
		
		МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", ЭДОбъект, ПараметрыОтправкиНаСогласование);
		ОбновитьЭДОбъект();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказаВПодписи(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ПодписатьВДиадоке(Ложь, ЭДОбъект.OrganizationID, ЭДОбъект.documentID, РезультатЗакрытия.Комментарий); 
				Элементы.ГруппаКнопокПодписания.Доступность=	Ложь;
				Элементы.ГруппаКнопокПодписания.Видимость= 		Истина;
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания = ОписаниеОшибки();
				Если Найти(ТекстОшибкиПодписания, "FNS reg message was not sent for box")>0 Тогда
					СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиПодписания);
				Иначе
					СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаСогласовать(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка 
				ЭДОбъект.Approve(РезультатЗакрытия.Комментарий);
				Элементы.ГруппаКнопокСогласования.Доступность=	Ложь;
				Элементы.ГруппаКнопокСогласования.Видимость= 	Истина;
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторное согласование не возможно", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете согласовать документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.DisApprove(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторный отказ в согласовании не возможен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете отказать в согласовании", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			ПараметрУдаляемогоДокумента=	Новый Структура();
			ПараметрУдаляемогоДокумента.Вставить("DocumentId", 	ЭДОбъект.DocumentId);
			ПараметрУдаляемогоДокумента.Вставить("BoxID", 		ЭДОбъект.Organization.Id);
			
			МассивДокументов=	Новый Массив();
			МассивДокументов.Добавить(ПараметрУдаляемогоДокумента);
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Установить_DocumentID_Для_Документ(Документ1С,,);
			КонецЕсли;
			
			Если НЕ ЭДОбъект.IsDeleted Тогда
				Попытка
					ЭДОбъект.Delete();
					ПоказатьПредупреждение(, "Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " перемещен в удаленные.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Исключение
					
					ОписаниеОшибки=	ОписаниеОшибки();
					ТекстОшибки=	ОписаниеОшибки;
					Если Найти(ТекстОшибки, "is already delete") Тогда
						ТекстОшибки=	"Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " уже был удален.";
					Иначе
						ТекстОшибки=	"Ошибка удаления документа";
					КонецЕсли;
					
					ПараметрыФормы=	Новый Структура();
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка удаления");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	ТекстОшибки);
					ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецПопытки;
				
			КонецЕсли;
			
			ПросмотрФормы();
			МетодКлиента(,"ОповеститьФормы","УдалениеДокументов", МассивДокументов);
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
			
			Установить_DocumentID_Для_Документ(Документ1С,,);
			Документ1С=	Неопределено;
			
			ОбновитьДокумент1С();
			ПросмотрФормы();
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
			ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
			ПараметрыОповещения.Вставить("Документ1С", Документ1С);
			
			МетодКлиента(,"ОповеститьФормы","ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если РезультатЗакрытия.ДокументПодписан = Истина Тогда
				Попытка  
					
					ПараметрыТитулаПолучателя=	Новый Структура();
					ПараметрыТитулаПолучателя.Вставить("ДатаПолученияГруза", 	РезультатЗакрытия.ДатаПолученияГруза);
					ПараметрыТитулаПолучателя.Вставить("ФИОПодписанта", 		Лев(РезультатЗакрытия.ФИОПодписанта,100));
					ПараметрыТитулаПолучателя.Вставить("ДолжностьПодписанта", 	Лев(РезультатЗакрытия.ДолжностьПодписанта,50));
					ПараметрыТитулаПолучателя.Вставить("ИНН", 					ЭДОбъект.Organization.INN);
					
					BuyerTitleInfo=	СформироватьТитулПолучателя(ПараметрыТитулаПолучателя, ЭДОбъект.Type, ЭДОбъект.DocumentDate);
					ПодписатьВДиадоке(Истина, ЭДОбъект.OrganizationID, ЭДОбъект.documentID,, BuyerTitleInfo); 
					
					Элементы.ГруппаКнопокПодписания.Доступность=	Ложь;
					Элементы.ГруппаКнопокПодписания.Видимость= 		Ложь;
					
					ОбновитьЭДОбъект();
					
				Исключение 
					
					ТекстОшибкиПодписания = ОписаниеОшибки();
					Если Найти(ТекстОшибкиПодписания, "FNS reg message was not sent for box")>0 тогда
						СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиПодписания);
					Иначе
						СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
					КонецЕсли;
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапросАннулирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.SendRevocationRequest(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиАннулирования = ОписаниеОшибки();
				Если Найти(ТекстОшибкиАннулирования, "FNS reg message was not sent for box")>0 Тогда
					СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиАннулирования);
				Иначе
					СообщениеОбОшибкеДиадок(ТекстОшибкиАннулирования);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаАннулироватьДокумент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка  
				ЭДОбъект.AcceptRevocationRequest();
				ОбновитьЭДОбъект();
			Исключение 
				ТекстОшибкиАннулирования= ОписаниеОшибки();
				Если найти(ТекстОшибкиАннулирования, "FNS reg message was not sent for box")>0 тогда
					СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиАннулирования);
				Иначе 
					СообщениеОбОшибкеДиадок(ТекстОшибкиАннулирования);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.RejectRevocationRequest(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиАннулирования = ОписаниеОшибки();
				Если Найти(ТекстОшибкиАннулирования, "FNS reg message was not sent for box")>0 Тогда
					СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиАннулирования);
				Иначе
					СообщениеОбОшибкеДиадок(ТекстОшибкиАннулирования);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройкиПодписи(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапроситьУточнение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.SendCorrectionRequest(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиАннулирования = ОписаниеОшибки();
				Если Найти(ТекстОшибкиАннулирования, "FNS reg message was not sent for box")>0 Тогда
					СообщитьОбОтсутствииРегистрацииВФНС(ТекстОшибкиАннулирования);
				Иначе
					СообщениеОбОшибкеДиадок(ТекстОшибкиАннулирования);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
//}	ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаКлиенте
	Процедура ДекорацияПодробноНажатие(Элемент)
		
		HTMLДокумент= МетодКлиента("Модуль_Клиент","СформироватьHTMLПредставлениеРезолюций", ЭДОбъект, Организация);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("HTMLДокумент",	HTMLДокумент);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "RoamingNotificationStatusError" Тогда
			
			СтандартнаяОбработка= Ложь;
			
			Если НРег(Лев(ПредставлениеСтатусаРоуминг, 6)) = "ошибка" Тогда
				
				ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоумингДетали);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				ОбновитьСтатусЭД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		Организация=		МетодСервера(,"BoxID_2_Организация", Параметры.BoxID, Параметры.DepartmentKpp);
		Контрагент=			МетодСервера(,"CounteragentBoxID_2_Контрагент", Параметры.CounteragentBoxID);
		
		Параметры.Свойство("DepartmentId", DepartmentId);
		Параметры.Свойство("ВнешняяПечатнаяФорма", ВнешняяПечатнаяФорма);
		
		BoxID=				Параметры.BoxID;
		CounteragentBoxID=	Параметры.CounteragentBoxID;
		DocumentType=		Параметры.DocumentType;
		Документ1С=			Параметры.Документ1С;
		ТипДокумента=		Параметры.ТипДокумента;
		ДопСведения=		Параметры.ДопСведения;
		НомерЗаказа=		Параметры.НомерЗаказа;
		
		
		DocumentID=			Параметры.DocumentID;
		isTest=				Параметры.isTest;
		
		Этаформа.Команды.ПерейтиВДиадок.Подсказка = "Перейти в " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПерейтиВДиадок(Команда)
		
		Если НЕ ЭдОбъект = Неопределено Тогда
			ПоказатьДокументВДиадоке(ЭдОбъект);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура  ПоказатьДокументВДиадоке(ДокументДиадока)
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	&НаКлиенте
	Функция ПоказатьКнопкуНастроитьПараметрыПодписи()
		
		Возврат Найти(типДокумента, "Торг-12")>0 ИЛИ (Найти(типДокумента, "Акт")>0 И Найти(типДокумента, "Акт сверки")=0);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуПерейтиВДиадок()
		
		Возврат НЕ ЭДОбъект = Неопределено;

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСтруктураПодчиненности()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтправитьСвязанныеДокументы()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокПодписания(UserPermissions)
		
		Если (НЕ ЭДОбъект = Неопределено И ЭДОбъект.Direction = "Inbound")
			И (НЕ ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" И НЕ ЭДОбъект.Type = "NonformalizedProforma")
			И ((ЭДОбъект.IsTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate") И UserPermissions.CanSignIncomingDocuments)
			И (ЭДОбъект.Status = "InboundWaitingForRecipientSignature" 
			ИЛИ ЭДОбъект.Status = "InboundInvalidRecipientSignature"
			ИЛИ (ЭДОбъект.Type = "Nonformalized" И ЭДОбъект.Status ="InboundNoRecipientSignatureRequest"))
			И ЭДОбъект.RevocationStatus = "RevocationStatusNone" Тогда
			Возврат Истина;
		КонецЕсли;
						
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтменитьСопоставление()
		
		Если  НЕ ЭДОбъект = Неопределено
			И (ЭДОбъект.Direction = "Inbound" ИЛИ ЭДОбъект.Direction = "Outbound")
			И ЗначениеЗаполнено(Документ1С) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокСогласования(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено
			И UserPermissions.CanAddResolutions
			И (ЭДОбъект.Type = "XmlTorg12" 
			ИЛИ ЭДОбъект.Type = "XmlAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "NonformalizedProforma"
			ИЛИ ЭДОбъект.Type = "Nonformalized") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокПередачиНаСогласование(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено
			И UserPermissions.CanRequestResolutions
			И (ЭДОбъект.Type = "XmlTorg12" 
			ИЛИ ЭДОбъект.Type = "XmlAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "NonformalizedProforma"
			ИЛИ ЭДОбъект.Type = "Nonformalized") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуУдалить(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено
			И НЕ ЭДОбъект.IsDeleted 
			И (UserPermissions.CanSignIncomingDocuments) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСоздатьДокумент1С()
		
		Если НЕ ЭДОбъект = Неопределено
			И НЕ ЗначениеЗаполнено(Документ1С) Тогда
			Возврат Истина
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаАннулирования(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено 
			И UserPermissions.CanSignIncomingDocuments 
			И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
			Если (ЭДОбъект.Status = "InboundWithRecipientSignature" 
				ИЛИ ЭДОбъект.Status = "InboundRecipientSignatureRequestRejected"
				ИЛИ ЭДОбъект.Status = "OutboundWithRecipientSignature" 
				ИЛИ ЭДОбъект.Status = "OutboundRecipientSignatureRequestRejected"
				ИЛИ ЭДОбъект.Status = "OutboundWaitingForRecipientSignature"
				ИЛИ ЭДОбъект.Status = "InboundFinished"
				ИЛИ ЭДОбъект.Status = "OutboundFinished"
				ИЛИ ЭДОбъект.Status = "Outbound"
				ИЛИ ЭДОбъект.Status = "Inbound"
				ИЛИ ЭДОбъект.Status = "OutboundWaitingForInvoiceReceipt")
				И (ЭДОбъект.RevocationStatus = "RevocationStatusNone"
				ИЛИ ЭДОбъект.RevocationStatus = "RevocationRejected") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуАннулирования(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			Если UserPermissions.CanSignIncomingDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
				Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуОтказаАннулирования(UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			Если UserPermissions.CanSignIncomingDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
				Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions)
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			Если ЭДОбъект.Direction = "Inbound" Тогда
				Если (ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" И ЭДОбъект.Organization.AuthenticateType = "Certificate")
					И (НЕ ЭДОбъект.Corrected 
					И НЕ ЭДОбъект.Revised 
					И НЕ ЭДОбъект.AmendmentRequested 
					И (ЭДОбъект.Status = "InboundFinished")) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьКнопкиКоманднойПанели()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			UserPermissions = ЭДОбъект.Organization.GetUserPermissions();
		КонецЕсли;
	
		Если ПоказатьКнопкуНастроитьПараметрыПодписи() Тогда
			Элементы.НастроитьПараметрыПодписи.Видимость=	Истина;
		Иначе
			Элементы.НастроитьПараметрыПодписи.Видимость=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуПерейтиВДиадок() Тогда
			Элементы.КнопкаПерейтиВДиадок.Видимость=	Истина;
			Элементы.КнопкаПерейтиВДиадок.Доступность=	Истина;
		Иначе
			Элементы.КнопкаПерейтиВДиадок.Видимость=	Ложь;
			Элементы.КнопкаПерейтиВДиадок.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуСтруктураПодчиненности() Тогда
			Элементы.ФормаСтруктураПодчиненности.Видимость=		Истина;
			Элементы.ФормаСтруктураПодчиненности.Доступность=	Истина;
		Иначе
			Элементы.ФормаСтруктураПодчиненности.Видимость=		Ложь;
			Элементы.ФормаСтруктураПодчиненности.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуОтправитьСвязанныеДокументы() Тогда
			Элементы.КнопкаОтправитьСвязанныйДокумент.Видимость = Истина;
			Элементы.КнопкаОтправитьСвязанныйДокумент.Доступность = Истина;
		Иначе
			Элементы.КнопкаОтправитьСвязанныйДокумент.Видимость = Ложь;
			Элементы.КнопкаОтправитьСвязанныйДокумент.Доступность = Ложь;
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокПодписания(UserPermissions) Тогда
			Элементы.ГруппаКнопокПодписания.Видимость=		Истина;
			Элементы.ГруппаКнопокПодписания.Доступность=	Истина;
		Иначе
			Элементы.ГруппаКнопокПодписания.Видимость=		Ложь;
			Элементы.ГруппаКнопокПодписания.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуОтменитьСопоставление() Тогда
			Элементы.КнопкаОтменитьСопоставление.Видимость=		Истина;
			Элементы.КнопкаОтменитьСопоставление.Доступность=	Истина;
		Иначе
			Элементы.КнопкаОтменитьСопоставление.Видимость=		Ложь;
			Элементы.КнопкаОтменитьСопоставление.Доступность=	Ложь;
		КонецЕсли;

		Если ПоказатьГруппуКнопокСогласования(UserPermissions) Тогда
			Элементы.ГруппаСогласование.Видимость=		Истина;
			Элементы.ГруппаСогласование.Доступность=	Истина;
		Иначе
			Элементы.ГруппаСогласование.Видимость=		Ложь;
			Элементы.ГруппаСогласование.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокПередачиНаСогласование(UserPermissions) Тогда
			Элементы.ГруппаПередачаНаСогласование.Видимость=	Истина;
			Элементы.ГруппаПередачаНаСогласование.Доступность=	Истина;
		Иначе
			Элементы.ГруппаПередачаНаСогласование.Видимость=	Ложь;
			Элементы.ГруппаПередачаНаСогласование.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуУдалить(UserPermissions) Тогда
			Элементы.КнопкаУдалить.Видимость=	Истина;
			Элементы.КнопкаУдалить.Доступность=	Истина;
		Иначе
			Элементы.КнопкаУдалить.Видимость=	Ложь;
			Элементы.КнопкаУдалить.Доступность=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуСоздатьДокумент1С() Тогда
			Элементы.КнопкаСоздатьДокумент1С.Видимость=	Истина;
		Иначе
			Элементы.КнопкаСоздатьДокумент1С.Видимость=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаАннулирования(UserPermissions) Тогда
			Элементы.КнопкаЗапроситьАннулирование.Доступность=	Истина;
			Элементы.КнопкаЗапроситьАннулирование.Видимость=	Истина;
		Иначе
			Элементы.КнопкаЗапроситьАннулирование.Доступность=	Ложь;
			Элементы.КнопкаЗапроситьАннулирование.Видимость=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуАннулирования(UserPermissions) Тогда
			Элементы.КнопкаАннулировать.Доступность=	Истина;
			Элементы.КнопкаАннулировать.Видимость=		Истина;
		Иначе
			Элементы.КнопкаАннулировать.Доступность=	Ложь;
			Элементы.КнопкаАннулировать.Видимость=		Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуОтказаАннулирования(UserPermissions) Тогда
			Элементы.КнопкаОтказатьВАннулировании.Доступность=	Истина;
			Элементы.КнопкаОтказатьВАннулировании.Видимость=	Истина;
		Иначе
			Элементы.КнопкаОтказатьВАннулировании.Доступность=	Ложь;
			Элементы.КнопкаОтказатьВАннулировании.Видимость=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions) Тогда
			Элементы.КнопкаЗапроситьУточнение.Доступность=	Истина;
			Элементы.КнопкаЗапроситьУточнение.Видимость=	Истина;
		Иначе
			Элементы.КнопкаЗапроситьУточнение.Доступность=	Ложь;
			Элементы.КнопкаЗапроситьУточнение.Видимость=	Ложь;
		КонецЕсли;
		
		Если ПоказатьКнопкуПеревыставить(ЭДОбъект, UserPermissions) Тогда
			Элементы.КнопкаПеревыставить.Видимость = Истина;
		КонецЕсли;
		
		Если ПоказатьКнопкуПодписатьИОтправить() Тогда
			Элементы.КнопкаПодписатьИОтправить.Видимость = Истина;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементыФормы()
		
		Элементы.Ошибки.Видимость = ЗначениеЗаполнено(Ошибки);
		
		Если ЭДОбъект <> Неопределено Тогда
			
			Элементы.ГруппаКоманднаяПанельПодвал.Видимость=	  Истина;
			
			Если ЭДОбъект.Direction = "Inbound" Тогда
				
				МассивСсылокРНК=	МетодКлиента("Модуль_Клиент","ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", ЭДОбъект);
				ПодходящаяСФ=		МетодКлиента("Модуль_Клиент","ПолучитьПодходящуюСФ", МассивСсылокРНК);
				
				ПредставлениеКнопкиСоздать=	МетодКлиента("Модуль_Клиент","СформироватьПредставлениеКнопкиСоздатьДокументВ1С", Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ);
				Если ЗначениеЗаполнено(ПредставлениеКнопкиСоздать) Тогда
					Элементы.КнопкаСоздатьДокумент1С.Заголовок=	ПредставлениеКнопкиСоздать;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.РамкаСтатуса.Видимость= Истина;
			Элементы.ДекорацияПодробно.Видимость= ЭДОбъект.Resolutions.Count > 0;
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Элементы.ДокументВ1С.Заголовок= Новый ФорматированнаяСтрока(Строка(Документ1С),,,,ПолучитьНавигационнуюСсылку(Документ1С));
			Иначе
				Элементы.ДокументВ1С.Заголовок= "";
			КонецЕсли;
			
			Элементы.ГруппаПодразделениеПодвал.Видимость= (ЗначениеЗаполнено(Документ1С));
			Элементы.ГруппаПодразделениеТело.Видимость=	  (НЕ ЗначениеЗаполнено(Документ1С));
			
			ПредставлениеПодразделения=	?(ЭДОбъект.Department = Неопределено, "Головное подразделение", ЭДОбъект.Department.Name);
			
		Иначе
			
			Элементы.РамкаСтатуса.Видимость= Ложь;
			Элементы.ГруппаКоманднаяПанельПодвал.Видимость=	  Ложь;
			
		КонецЕсли;
		
		ЭтаФорма.Элементы.КнопкаПерейтиВДиадок.Заголовок = "Перейти в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		ОбновитьСтатусЭД();
		НастроитьЗаголовок();
		НастроитьКнопкиКоманднойПанели();
		НастроитьЭлементыФормы();
		
	КонецПроцедуры	 
	
	&НаКлиенте
	Функция ОбновитьСтатусЭД()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			
			ПредставлениеСтатуса=		 МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса"			, ЭДОбъект);
			ПредставлениеСогласования=	 МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаСогласования", ЭДОбъект);
			
			ПредставлениеСтатусаРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг"		, ЭДОбъект);
			ПредставлениеСтатусаРоумингДетали= ?(ЭДОбъект.RoamingNotificationStatus = "RoamingNotificationStatusError", ЭДОбъект.RoamingNotificationStatusDescription, "");
			
			СводныйСтатус= Новый Массив;
			Разделитель= "";
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатусаРоуминг) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатусаРоуминг);
				Разделитель= " ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатуса);
				Разделитель= ". ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСогласования) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСогласования);
				Разделитель= ". ";
			КонецЕсли;
			
			Элементы.СтатусДокумента.Заголовок=	Новый ФорматированнаяСтрока(СводныйСтатус);
			
		Иначе
			
			Элементы.СтатусДокумента.Заголовок=	 ""; 
			
			ПредставлениеСтатусаРоуминг=	   "";
			ПредставлениеСтатусаРоумингДетали= "";
			
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьССылкуНаОбъект(ТекстСсылки)
		
		Если Найти(ТекстСсылки, "ВАЛЮТА") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-7);
			СсылкаНаЭлемент = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.ФормаОбъекта",  СсылкаНаЭлемент);
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКВАЛЮТ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.ФормаСписка",  "");
		ИначеЕсли Найти(ТекстСсылки, "ОКВ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",  "");
		ИначеЕсли Найти(Текстссылки, "ЕДИНИЦА") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 8);
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				СсылкаНаЭлемент = справочники.ЕдиницыИзмерения.ПолучитьСсылку(новый УникальныйИдентификатор(Гуид));
				Возврат Новый Структура("Форма, Объект", "Справочник.ЕдиницыИзмерения.ФормаОбъекта",  СсылкаНаЭлемент);
			Иначе
				СсылкаНаЭлемент = справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(новый УникальныйИдентификатор(Гуид));
				Возврат Новый Структура("Форма, Объект", "Справочник.КлассификаторЕдиницИзмерения.ФормаОбъекта",  СсылкаНаЭлемент);
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКЕДИНИЦ") > 0 Тогда
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Возврат Новый Структура("Форма, Объект", "Справочник.ЕдиницыИзмерения.ФормаСписка",  "");
			Иначе
				Возврат Новый Структура("Форма, Объект", "Справочник.КлассификаторЕдиницИзмерения.ФормаСписка",  "");
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "ОКЕИ") > 0 Тогда
			Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора",,ЭтаФорма).Открыть();
		ИначеЕсли найти(Текстссылки, "СТРАНА") > 0 Тогда 
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 7);
			СсылкаНаЭлемент = справочники.СтраныМира.ПолучитьСсылку(новый УникальныйИдентификатор(Гуид));
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаОбъекта",  СсылкаНаЭлемент);
			Иначе
				Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаОбъекта",  СсылкаНаЭлемент);
			КонецЕсли;
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКСТРАН") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.ФормаСписка",  "");
		ИначеЕсли Найти(текстСсылки, "ОКСМ") > 0 Тогда
			Возврат Новый Структура("Форма, Объект", "Справочник.СтраныМира.Форма.Классификатор", "");
		ИначеЕсли Найти(Текстссылки, "КОНТРАГЕНТ") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 11);
			СсылкаНаЭлемент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Возврат Новый Структура("Форма, Объект", "Справочник.Контрагенты.ФормаОбъекта",  СсылкаНаЭлемент);
		ИначеЕсли Найти(Текстссылки, "ОРГАНИЗАЦИЯ") > 0 Тогда 
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-12);
			СсылкаНаЭлемент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Возврат Новый Структура("Форма, Объект", "Справочник.Организации.ФормаОбъекта",  СсылкаНаЭлемент);
		ИначеЕсли Найти(Текстссылки, "СЧЕТФАКТУРАВЫДАННЫЙ") > 0 Тогда
			Гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 20);
			СсылкаНаЭлемент = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
				СсылкаНаЭлемент.ПолучитьФорму().Открыть();
			КонецЕсли;   
		ИначеЕсли Найти(ТекстСсылки, "КАРТОЧКА:") > 0 Тогда
			СтрокаИД = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-9);
			Если Найти(строкаИД, ":") > 0 Тогда
				BoxID = лев(строкаИД, найти(строкаИД, ":")-1);
				DocID = прав(строкаИД, стрДлина(СтрокаИД) - найти(строкаИД, ":"));
			КонецЕсли;
		Иначеесли Найти(Текстссылки, "НАСТРОЙКАПОДПИСИ") > 0 Тогда
			гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 17);
			СсылкаНаЭлемент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
				//если Найти(ТипДокумента, "Акт") <> 0  тогда 
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиАкт");
				//Иначе 	
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиТОРГ12");
				//КонецЕсли;	
				//фрм.ОткрытьКарточку(СсылкаНаЭлемент);
				//ОбновитьРНК();
			КонецЕсли;
		КонецЕсли;	
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьЗаголовок()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			Заголовок=	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
		ИначеЕсли ЗначениеЗаполнено(Документ1С) Тогда
			если (ТипДокумента = "Счет на оплату") тогда
				Заголовок=	"Счет на оплату (на основании " + Документ1С+")";
			Иначе	
				Заголовок=	"Документ " + Документ1С;
			КонецЕсли;	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита) Экспорт
		
		ЗначениеРеквизита=	Неопределено;
		
		ОбъектИзСсылки=	СсылкаНаОбъект.ПолучитьОбъект();
		Если НЕ ОбъектИзСсылки.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			ЗначениеРеквизита=	ОбъектИзСсылки[ИмяРеквизита];
		КонецЕсли;
		
		Возврат ЗначениеРеквизита;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер()
		
		СписокОрганизаций = новый списокЗначений;
		//Авто (тестовая)
		СписокОрганизаций.Добавить("c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	&НаСервере
	Функция Организация_2_BoxID_Форма(Организация)
		Возврат МетодСервера(,"Организация_2_BoxID", Организация);
	КонецФункции	
	
	&НаКлиенте
	Функция ВизуализироватьДопПоля(КакаяТоХняНаВходе) Экспорт
		
		ВизуализироватьДопПоля=	Истина;
		
		СписокОрганизацийНеТребующихВизуализацииДопПоля=	ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер();
		
		Если ТипЗнч(КакаяТоХняНаВходе) = Тип("COMОбъект") Тогда
			
			Если КакаяТоХняНаВходе.Direction = "Outbound"  тогда 
				ИДОтправителя=	КакаяТоХняНаВходе.Organization.Id;
			Иначе
				ИДОтправителя=	КакаяТоХняНаВходе.Counteragent.Id;
			КонецЕсли;
			
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		Иначе
			
			ИДОтправителя=	Организация_2_BoxID_Форма(ПолучитьРеквизитСсылки(КакаяТоХняНаВходе, "Организация"));
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВизуализироватьДопПоля;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВизуализацияПечатнойФормыПоСтруктуре()
		
		ПоказыватьПредупрежденияОСтаромФормате = Ложь;
				
		Если ЭДОбъект = Неопределено Тогда
			
			ВизуализироватьДопПоля=	ВизуализироватьДопПоля(Документ1С);
			
			ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
			
			СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля);
			
		Иначе
			
			ВизуализироватьДопПоля=	ВизуализироватьДопПоля(ЭДОбъект);
			Если ЭДОбъект.Type = "XmlTorg12" Тогда
				ТабПоле=	ПолучитьПечатнуюФормуТорг12ПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
			ИначеЕсли ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
				DocumentContent = ЭДОбъект.GetContent();
				InvoiceVersion 	= DocumentContent.InvoiceVersion;
				Если Найти(ЭДОбъект.Type, "Correction") = 0 Тогда
					ТабПоле=	ПолучитьПечатнуюФормуСчетаФактурыЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля, DocumentContent);
				Иначе 
					ТабПоле=	ПолучитьПечатнуюФормуКорректировочногоСчетаФактурыЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля, DocumentContent);
				КонецЕсли;
				
				ПоказыватьПредупрежденияОСтаромФормате = МетодКлиента("Модуль_ЛогикаПоведениеФорм","ПредупреждатьОСтаромФормате", ЭДОбъект.ConfirmationDate, InvoiceVersion);
				 
			ИначеЕсли ЭДОбъект.Type = "XmlAcceptanceCertificate" Тогда
				ТабПоле=	ПолучитьПечатнуюФормуАктаПоЭДОбъекту(ЭДОбъект, ВизуализироватьДопПоля);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = ПоказыватьПредупрежденияОСтаромФормате;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФормы()
		
		ВизуализацияПечатнойФормыПоСтруктуре();
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьПараметрыПодписи(Команда)
		
		Если Найти(ТипДокумента, "Торг-12") > 0 Тогда
						
			ФИО = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
									
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("ФИО", ФИО);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиТОРГ12", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи");
			
		ИначеЕсли Найти(типДокумента, "Акт")>0 Тогда

			ФИО = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
									
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("ФИО", ФИО);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация= МетодКлиента("Модуль_Клиент", "НайтиОрганизациюВИерархииОрганизацийDiadoc", BoxID, DepartmentId);
		КонецЕсли;
		
		Organization= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
		
		ПросмотрФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодразделениеНажатие(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка=	Ложь;
		
		ТекущийDepartmentId=	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Id);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
		ПараметрыФормы.Вставить("OrganizationId",	ЭДОбъект.Organization.Id);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущийDepartmentId);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОшибкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		Если (ДанныеСобытия.Anchor<> Неопределено) И ЗначениеЗаполнено(ДанныеСобытия.Anchor.NameProp) Тогда 
			Если Найти(ДанныеСобытия.Anchor.NameProp,"НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ" ) > 0 Тогда
				НастроитьПараметрыПодписи("");
			Иначе	
				ПараметрыСсылки = ПолучитьССылкуНаОбъект(ДанныеСобытия.Anchor.nameProp);
				МетодКлиента(,"ОткрытьФормуОбъектаИБМодально", ПараметрыСсылки.Объект, ПараметрыСсылки.Форма,,ЭтаФорма, "ОбработчикОткрытиеФормыОшибокВалидации");
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьВДиадоке(Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено)
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			МетодКлиента("Модуль_Клиент","ПодписатьВДиадоке", ЭДОбъект, Подписать, BoxID, DocumentID, ТекстОтказа, СтруктураДляТитула);
		КонецЕсли;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура Подписать(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("ФИО", 						ФИОПодписанта);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		ПараметрыФормы.Вставить("Организация", 				ПолучитьСвязаннуюОрганизацию(Organization.ID));
		ПараметрыФормы.Вставить("ЭДОбъектType", 			ЭдОбъект.Type);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВПодписи(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказаВПодписи");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Согласовать(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		2);
		ПараметрыФормы.Вставить("AuthenticateType", 		Organization.AuthenticateType);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаСогласовать");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		МетодКлиента("Модуль_Клиент","ОтправитьЭДОбъектНаСогласование", ЭтаФорма, ЭтаФорма, "ApprovementRequest", "ПередачаНаОбработку");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		МетодКлиента("Модуль_Клиент","ОтправитьЭДОбъектНаСогласование", ЭтаФорма, ЭтаФорма, "SignatureRequest", "ПередачаНаОбработку");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВСогласовании(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		3);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура Удалить(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикУдалитьДокумент", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтменитьСопоставление(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите отменить сопоставление с документом 1С?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтруктураПодчиненности(Команда)
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Режим", "СтруктураПодчиненности");
		
		ФормаСвязейДокументов= МетодКлиента(,"ПолучитьФормуОбработки", "ФормаСвязейДокументов", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
		ФормаСвязейДокументов.ЭДОбъект=		ЭДОбъект;
		ФормаСвязейДокументов.Organization=	Organization;
		
		ОткрытьФорму(ФормаСвязейДокументов);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокумент1С(Команда)
		
		Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice"  Тогда
			
			Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
				
				СозданныйДокумент=	ПодходящаяСФ;
				Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
					ОбработчикСозданиеДокумента(СозданныйДокумент);
				КонецЕсли;
				
			ИначеЕсли МассивСсылокРНК.Количество() > 0 И ЭДОбъект.Type = "Invoice" Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, МассивСсылокРНК);
			Иначе
				СоздатьДокумент("ВводСВыборомОснований");
			КонецЕсли;
			
		Иначе
			
			СоздатьДокумент("Ввод");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправитьСвязанныйДокумент(Команда)

		Если ЗначениеЗаполнено(Контрагент)=Ложь тогда
			ПоказатьПредупреждение(, "С "+ЭДОбъект.Counteragent.Name+" не сопоставлено ни одной карточки контрагента в 1С", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;		
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("InitialDocumentID", ЭДОбъект.DocumentID);
		
		Форма_Выгрузка = МетодКлиента(,"ПолучитьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма,  СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID) , Истина);
		ОписаниеКонтрагента = Новый структура("Контрагент, CounteragentName, CounteragentID",  Контрагент,ЭДОбъект.Counteragent.Name, ЭДОбъект.Counteragent.ID);
		Форма_Выгрузка.НачатьВыгрузку(Новый Структура("Организация, ОписаниеКонтрагента", Организация, ОписаниеКонтрагента));
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьАннулирование(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		5);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапросАннулирования");

	КонецПроцедуры

	&НаКлиенте
	Процедура АннулироватьДокумент(Команда)
				
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументуБезКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаАннулироватьДокумент");

	КонецПроцедуры

	&НаКлиенте
	Процедура ОтказатьВАннулировании(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		6);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании");

	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьУточнение(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		7);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапроситьУточнение");

	КонецПроцедуры

	&НаКлиенте
	Процедура Декорация4Нажатие(Элемент)
				
		ТекстИнформацииОНовомФормате= МетодКлиента("Модуль_Клиент","ТекстИнформацииОНовомФормате");
		ПараметрыФормы= Новый Структура("HTMLДокумент", ТекстИнформацииОНовомФормате);
		МетодКлиента(,"ОткрытьФормуОбработки","ФормаВыводаHTMLДокумента", ПараметрыФормы);
		
	КонецПроцедуры
	
	&НаКлиенте 
	функция ПропатчитьInvoice(DocumentType)
		Если Лев( DocumentType, 7) = "Invoice" Тогда 
			Возврат  Лев( DocumentType, 7)
		Иначе	
			Возврат  DocumentType;
		КонецЕсли;	
	КонецФункции	
	
	&НаКлиенте
	Процедура Перевыставить(Команда)

		Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
			
			ПоказатьПредупреждение(, "Для перевыставления следует создать документ в 1С.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
			
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID",				BoxID);
		ПараметрыФормы.Вставить("DepartmentID",			BoxID);
		ПараметрыФормы.Вставить("CounteragentBoxID",	CounteragentBoxID);
		ПараметрыФормы.Вставить("DocumentType",			ПропатчитьInvoice(DocumentType));
		ПараметрыФормы.Вставить("Документ1С", 			Документ1С);
		ПараметрыФормы.Вставить("ТипДокумента", 		ТипДокумента);
		ПараметрыФормы.Вставить("ДопСведения", 			ДопСведения);
		
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.documentID);
		ПараметрыФормы.Вставить("isTest", 				ЭДОбъект.isTest);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПоказатьКнопкуПеревыставить(ЭДОбъект, UserPermissions)
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если UserPermissions.CanSignIncomingDocuments
			И (ЭДОбъект.isTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate") Тогда 
			Если (ЭДОбъект.Direction = "Outbound") 
				И (ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ 
				ЭДОбъект.Type = "XmlTorg12" ИЛИ 
				ЭДОбъект.Type = "XmlAcceptanceCertificate" ИЛИ 
				ЭДОбъект.Type = "NonformalizedProforma") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьИОтправить()
		
		Если ЗначениеЗаполнено(DocumentID) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПодписатьИОтправить(Команда)
		
		ВыполнитьОтправку();
		
		МетодКлиента(,"ОповеститьФормы", "ДиадокЗакрытьФормуДокумента", DocumentID);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьОтправку(ПараметрыОтправкиНаСогласование = Неопределено)
		
		ИспользоватьИдентификаторСчета=	Ложь;
		
		Попытка 
				
				ПараметрыSendTask=	Новый Структура();
				
				ПараметрыSendTask.Вставить("ДокументСсылка", 					Документ1С);
				ПараметрыSendTask.Вставить("DocumentType", 						DocumentType);
				ПараметрыSendTask.Вставить("Получатель", 						Контрагент);
				
				ПараметрыSendTask.Вставить("Organization", 						Organization);
				
				ПараметрыSendTask.Вставить("CounteragentId", 					CounteragentBoxID);
				ПараметрыSendTask.Вставить("МассивInitialDocumentID", 			Новый Массив);
				
				ПараметрыSendTask.Вставить("IsTest", 							IsTest);
				
				ПараметрыSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
				ПараметрыSendTask.Вставить("НомерЗаказа", 						"");
				ПараметрыSendTask.Вставить("ДопСведения", 						ДопСведения);
				ПараметрыSendTask.Вставить("IdОтправленого", 					"");
				
				ПараметрыSendTask.Вставить("ВнешняяПечатнаяФорма", 				Неопределено);
				ПараметрыSendTask.Вставить("ВыгружатьEXEL", 					Ложь);
				ПараметрыSendTask.Вставить("ТекущаяОрганизация", 				Организация);
								
				ПараметрыSendTask.Вставить("ФИОПодписанта ",                    МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization));
				
				СтруктураПодразделения = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный","ПолучитьПодразделениеПолучателя", Документ1С, Контрагент);
				
				ПараметрыSendTask.Вставить("ReceiverDepartmentId", СтруктураПодразделения.ToDepartmentID);
				
				ЗаполненныйSendTask=	МетодКлиента("Модуль_Выгрузка","ПолучитьЗаполненныйSendTask", ПараметрыSendTask, ПараметрыОтправкиНаСогласование);
				
				//Если ЗначениеЗаполнено(ТекущиеДанные.ВнешняяПечатнаяФорма) = Ложь Тогда
				//	ЗаписатьИнформациюОСпискеДополнительныхВПФ(ТекущиеДанные.Документ);
				//Иначе
				//	Модуль_РаботаСВнешнимиПФ.УстановитьПризнакУсловноОтправленныйДляДокумента(ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма, Платформа.ПараметрыКлиент.СловарьWL);
				//КонецЕсли;
				
				Organization.GetDocumentById(DocumentId).Delete();
				
				Document = ЗаполненныйSendTask.SendTask.Send();
				
				//Если ЗначениеЗаполнено(ТекущиеДанные.ВнешняяПечатнаяФорма) = Истина Тогда
				//	Модуль_РаботаСВнешнимиПФ.ОбнулитьПризнакУсловноОтправленныйДляДокумента(ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма, "В"); 	
				//КонецЕсли;
								
			Исключение
				
				Сообщить(ОписаниеОшибки());
				
				//ТекстОшибки = ОписаниеОшибки();
				//ОбработатьОшибку(Organization, Документ1С, ТекстОшибки);
				//Если Найти(ТекстОшибки, "##200")=0 И Найти(ТекстОшибки, "##400") = 0 Тогда
				//	Модуль_РаботаСВнешнимиПФ.ОбнулитьПризнакУсловноОтправленныйДляДокумента(ТекущиеДанные.Документ, ТекущиеДанные.ВнешняяПечатнаяФорма, "Н");
				//КонецЕсли;
				Возврат;
			КонецПопытки;
			
		МетодСервераБезКонтекста(,"Установить_DocumentID_Для_Документ", Документ1С, Document.DocumentId, Organization.Id, DocumentType = "NonformalizedProforma");
		
		МетодКлиента("Модуль_Выгрузка","ОтразитьИзмененияВДокументе1С", Организация, Документ1С, DocumentType);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
		
		Если ИмяСобытия = "ДиадокЗакрытьФормуДокумента" Тогда
			
			Если ЭДОбъект <> Неопределено И Параметр = ЭДОбъект.DocumentID Тогда
				Закрыть();
			КонецЕсли;
			
		КонецЕсли;
			
	КонецПроцедуры

//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////