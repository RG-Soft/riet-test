
&НаКлиенте
Перем ФормаДокумента Экспорт;
&НаКлиенте
Перем ЭДОбъект Экспорт;
&НаКлиенте
Перем СтруктураЭДОбъект Экспорт;
&НаКлиенте
Перем ТекущийДоговорКонтрагента Экспорт;
&НаКлиенте
Перем ТекущееСоглашениеКонтрагента Экспорт;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаСервере
	Функция ЧислоИзXML(Значение)
		Если ПустаяСтрока(Значение) Тогда
			Возврат 0;
		Иначе
			Возврат Число(Значение);
		КонецЕсли;
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьСтрокуДанными1С(СтрокаТЧ)
		
		Item=	СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			//типизируем пустой ссылкой на объекты строительства
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				СтрокаТЧ.Номенклатура=		Справочники.ОбъектыСтроительства.ПустаяСсылка();
				СтрокаТЧ.ЕдиницаИзмерения=	"";
			Иначе
				СтрокаТЧ.Номенклатура=		Справочники.Номенклатура.ПустаяСсылка();
				СтрокаТЧ.ЕдиницаИзмерения=	"";
			КонецЕсли;
			
		Иначе
			
			//Сначала установим пустую ссылку на номенклатуру
			СтрокаТЧ.Номенклатура=	Справочники.Номенклатура.ПустаяСсылка();
			
			Если 	Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30"
				ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
				ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20"
			Тогда
				СтрокаТЧ.Номенклатура=	ПолучитьНоменклатуруПоставщика(Контрагент, Item.Code, Item.NomenclatureArticle, Item.Name);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) И ЗначениеЗаполнено(Item.NomenclatureArticle) Тогда
				СтрокаТЧ.Номенклатура=	ПолучитьНоменклатуруПоАртикулу(Item.NomenclatureArticle);
			КонецЕсли;
			
			Если ИспользоватьЕдиницуИзмерения И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				СтрокаGUID= МетодСервера(,"ПолучитьЗначениеСвойства", СтрокаТЧ.Номенклатура, МетодСервера(,"ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры"));
				Если ЗначениеЗаполнено(СтрокаGUID) Тогда
					
					
					Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.ЕдиницыИзмерения") Тогда
						ИмяСправочника = "ЕдиницыИзмерения";
					ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
						ИмяСправочника = "УпаковкиЕдиницыИзмерения";
					ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.КлассификаторЕдиницИзмерения") Тогда
						ИмяСправочника = "КлассификаторЕдиницИзмерения";
					Иначе
						ИмяСправочника= "";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(ИмяСправочника) Тогда
						
						ЕдиницаИзмерения= Вычислить("Справочники."+ИмяСправочника+".ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаGUID))");
						
						Если МетодСервера(,"СсылкаСуществует", ЕдиницаИзмерения) Тогда
							СтрокаТЧ.ЕдиницаИзмерения= ЕдиницаИзмерения;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
					СтрокаТЧ.ЕдиницаИзмерения= ItemStruct_2_ЕдиницаИзмерения(Item, СтрокаТЧ.Номенклатура);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Item.TaxRate) Тогда
			СтрокаТЧ.СтавкаНДС=	МетодСервера(,"ПолучитьСтавкуНДСДиадок", Item.TaxRate);
		Иначе
			СтрокаТЧ.СтавкаНДС=	Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Если НЕ СтрокаТЧ.Номенклатура.Метаданные().Реквизиты.Найти("Артикул") = Неопределено Тогда
				СтрокаТЧ.Артикул=	СтрокаТЧ.Номенклатура.Артикул;
			Иначе
				СтрокаТЧ.Артикул=	СтрокаТЧ.Номенклатура.Код;
			КонецЕсли;
		КонецЕсли;
		
		//ЗаполнитьСтрокуПоНоменклатуре(СтрокаТЧ);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьСоответствиеНоменклатуры()
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Item=	СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
			Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.НоменклатураПоставщиков") Тогда
				УстановитьНоменклатуруПоставщика(СтрокаТЧ.Номенклатура, Контрагент, Item.Code, Item.NomenclatureArticle, Item.Name);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
				МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТЧ.Номенклатура, МетодСервера(,"ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры"), , СокрЛП(СтрокаТЧ.ЕдиницаИзмерения.УникальныйИдентификатор()));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьСоответствиеСоглашения(УстанавливаемоеСоглашение, СоглашениеСвойство)
		
		МетодСервера(,"УстановитьЗначениеСвойства", УстанавливаемоеСоглашение, "DDPact", "Соглашение", СоглашениеСвойство);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьСоответствиеДоговора(УстанавливаемыйДоговор, ДоговорСвойство)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" И ЗначениеЗаполнено(Соглашение) Тогда
			УстановитьСоответствиеСоглашения(Соглашение, СокрЛП(Контрагент.УникальныйИдентификатор()));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УстанавливаемыйДоговор) Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", УстанавливаемыйДоговор, "DDContract", "Договор", ДоговорСвойство);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьСчетаРасчетовСКонтргаентом(ФормаДокумента)
		
		ДокументОбъект=	ФормаДокумента.Объект;
		
		СчетаРасчетов =  ПолучитьСчетаРасчетов(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаРасчетов.Поставки;
		ДокументОбъект.СчетУчетаРасчетовПоАвансам     = СчетаРасчетов.Авансы;
		
		ФормаДокумента.ТребуетсяСчетФактура = истина;
		//ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ФормаДокумента);
		если СокрЛП(ВидОперации) <> "Продажа, комиссия" тогда
			ФормаДокумента.Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.ГруппаЗарегистрироватьСчетФактуру;
		КонецЕсли;	
	КонецПроцедуры	
	
	&НаСервере
	Функция ПолучитьСчетаРасчетов(Организация, Контрагент, ДоговорКонтргагента)
		СчетаРасчетов =   Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтргагента)");
		ВидДоговора = ДоговорКонтрагента.ВидДоговора;
		
		Результат = новый Структура("Поставки, Авансы");
		Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")  тогда
			Результат.Поставки = СчетаРасчетов.СчетРасчетовСКомитентом;
		ИначеЕсли 	ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВПереработку")  тогда
			Результат.Поставки = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		Иначе 
			Результат.Поставки =  СчетаРасчетов.СчетРасчетов
		КонецЕсли;
		
		Результат.Авансы = СчетаРасчетов.СчетАвансов;
		
		возврат результат;
		
	КонецФункции	
	
	&НаСервере
	Функция БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
		Возврат Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад)");
	КонецФункции
	
	&НаСервере
	Функция БухгалтерскийУчетПереопределяемыйСчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства)
		Возврат Вычислить("БухгалтерскийУчетПереопределяемый.СчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства)");
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнениеТабличнойЧасти(ФормаДокумента)
		
		ДокументОбъект=	ФормаДокумента.Объект;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда 
				СтрОбъект=	ДокументОбъект.Товары.Добавить();
				СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
				СтрОбъект.Количество=		СтрокаТЧ.Количество;
				СтрОбъект.Цена=				СтрокаТЧ.Цена;
				Если СтрОбъект.свойство("Склад") тогда
					СтрОбъект.Склад=			ДокументОбъект.Склад;
				КонецЕсли;	
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда 
				
				Если ВидОперации = "ПоступлениеМЗ" Тогда
					
					СтрОбъект=	ДокументОбъект.Материалы.Добавить();
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					
				ИначеЕсли ВидОперации = "ПоступлениеУслугРабот" Тогда
					
					СтрОбъект=	ДокументОбъект.УслугиИРаботы.Добавить();
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					
				ИначеЕсли ВидОперации = "ПоступлениеОС" Тогда
					
					СтрОбъект=	ДокументОбъект.КапВложения.Добавить();
					СтрОбъект.ВнеоборотныйАктив= СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество= 		 СтрокаТЧ.Количество;
					
				КонецЕсли;
				
			Иначе
				Если СокрЛП(ВидОперации) = "В переработку" Тогда
					Если СтрокаТЧ.Тип = "Товар" Тогда
						СтрОбъект=					ДокументОбъект.Товары.Добавить();
						СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
						СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
						СтрОбъект.Количество=		СтрокаТЧ.Количество;
						СтрОбъект.КоличествоМест=	СтрокаТЧ.Количество;
						СтрОбъект.Цена=				СтрокаТЧ.Цена;
					КонецЕсли;
				ИначеЕсли СокрЛП(ВидОперации) = "Объекты строительства" Тогда
					Если СтрокаТЧ.Тип = "Услуга" Тогда
						СтрОбъект=					ДокументОбъект.Услуги.Добавить();
						СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
						СтрОбъект.Количество=		СтрокаТЧ.Количество;
						СтрОбъект.Цена=				СтрокаТЧ.Цена;
					ИначеЕсли СтрокаТЧ.Тип = "Объект стр" Тогда
						СтрОбъект=						ДокументОбъект.ОбъектыСтроительства.Добавить();
						СтрОбъект.ОбъектСтроительства=	СтрокаТЧ.Номенклатура;
					КонецЕсли;
				Иначе
					Если СтрокаТЧ.Тип = "Оборудование" Тогда
						СтрОбъект=					ДокументОбъект.Оборудование.Добавить();
						СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
					ИначеЕсли НЕ СокрЛП(ВидОперации) = "Услуги" 
						И ((СтрокаТЧ.Тип = "Товар") или (СокрЛП(ВидОперации) ="Продажа, комиссия")) Тогда
						СтрОбъект=					ДокументОбъект.Товары.Добавить();
						Если СтрОбъект.свойство("ЕдиницаИзмерения") тогда 
							СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
						КонецЕсли;	
					Иначе
						СтрОбъект=				ДокументОбъект.Услуги.Добавить();
						СтрОбъект.Содержание=	СтрокаТЧ.НоменклатураИзЭД;
					КонецЕсли;
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					СтрОбъект.Цена=				СтрокаТЧ.Цена;
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				СтрОбъект.КоличествоУпаковок=	СтрокаТЧ.Количество;
				Если СуммаВключаетНДС Тогда
					СтрОбъект.СуммаСНДС=		СтрокаТЧ.Всего//СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			СтрОбъект.Сумма=				СтрокаТЧ.Сумма;
			СтрОбъект.СуммаНДС=				СтрокаТЧ.СуммаНДС;
			СтрОбъект.СтавкаНДС=			СтрокаТЧ.СтавкаНДС;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				СтрОбъект.Всего=	СтрокаТЧ.Всего;
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда 
				СтрОбъект.Всего =	СтрОбъект.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрОбъект.СуммаНДС);
			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				ЗаполнитьСчетаУчетаНоменклатуры(ДокументОбъект, СтрОбъект, СтрокаТЧ);
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				Если ВидОперации = "ПоступлениеМЗ" Тогда
					ЗаполнитьСтрокуНоменклатуры(ДокументОбъект, СтрОбъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтрокуНоменклатуры(ДокументОбъект, СтрокаНоменклатуры)
		
		СтруктураДанных = ПолучитьДанныеНоменклатуры(СтрокаНоменклатуры.Номенклатура, ДокументОбъект.СчетУчета);
		
		СтрокаНоменклатуры.СтавкаНДС=			СтруктураДанных.СтавкаНДС;
		СтрокаНоменклатуры.ЕдиницаИзмерения=	СтруктураДанных.ЕдиницаИзмерения;
		СтрокаНоменклатуры.СчетУчета=			СтруктураДанных.СчетУчета;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьДанныеНоменклатуры(ТекНоменклатура, ТекущийСчетУчета)
		
		СтруктураДанных = Вычислить("ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекНоменклатура, ""СтавкаНДС, ЕдиницаИзмерения, СчетУчета"")");
		Если ТекущийСчетУчета <> ПланыСчетов.ЕПСБУ.МЗ Тогда
			СтруктураДанных.СчетУчета = ТекущийСчетУчета;
		Иначе
			Если ЗначениеЗаполнено(СтруктураДанных.СчетУчета) Тогда
				СтруктураДанных.СчетУчета = Вычислить("БухгалтерскийУчетПовтИсп.ПолучитьСчетПоКоду(СтруктураДанных.СчетУчета)");
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтруктураДанных;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьДоговорКонтрагентаВидДоговора(ДоговорКонтрагента)
		
		Возврат Вычислить("ДоговорКонтрагента.ВидДоговора");
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьСчетаУчетаНоменклатуры(ДокОбъект, СтрокаТаблицы, СтрЭД)
		
		Если СтрЭД.Тип = "Объект стр" тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСтроительства) Тогда
				Возврат;
			КонецЕсли;
			
			СчетаУчета=	БухгалтерскийУчетПереопределяемыйСчетаУчетаОбъектовСтроительства(ДокОбъект.Организация, СтрокаТаблицы.ОбъектСтроительства)
		Иначе
			СчетаУчета=	БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры(ДокОбъект.Организация, СтрокаТаблицы.Номенклатура, ДокОбъект.Склад);
		КонецЕсли;
		
		Если СтрЭД.Тип = "Оборудование" Тогда
			СтрокаТаблицы.СчетУчета    = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		ИначеЕсли СтрЭД.Тип = "ВозвратнаяТара" Тогда
			СтрокаТаблицы.СчетУчета    = СчетаУчета.СчетУчета;
		ИначеЕсли (СтрЭД.Тип = "Услуга") и (СокрЛП(ВидОперации)<>"Продажа, комиссия") Тогда
			СтрокаТаблицы.СчетЗатрат   = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			
			СтрокаТаблицы.Субконто1    = СчетаУчета.Субконто1;
			СтрокаТаблицы.Субконто2    = СчетаУчета.Субконто2;
			СтрокаТаблицы.Субконто3    = СчетаУчета.Субконто3;
			
			СтрокаТаблицы.СчетЗатратНУ = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СубконтоНУ1  = СчетаУчета.Субконто1;
			СтрокаТаблицы.СубконтоНУ2  = СчетаУчета.Субконто2;
			СтрокаТаблицы.СубконтоНУ3  = СчетаУчета.Субконто3;
		ИначеЕсли СтрЭД.Тип = "Объект стр" Тогда
			СтрокаТаблицы.СчетУчета    = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		Иначе
			Если ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
				Если Вычислить("ПолучитьДоговорКонтрагентаВидДоговора(ДокОбъект.ДоговорКонтрагента)") = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")
					И СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
					СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
				Иначе
					СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
					СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				КонецЕсли;
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			ИначеЕсли ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчетаДавСырья;
			Иначе
				Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
					СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
					СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				Иначе
					СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
				КонецЕсли;
				если строкаТаблицы.Свойство("СчетУчетаНДС") тогда 
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
					СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПроверитьВсеНеобходимыеДанные()
		
		ВсеОК = Истина;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Сообщить("Не указан контрагент");
			ВсеОК = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Не заполнена организация");
			ВсеОК = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Сообщить("Не указан вид операции");
			ВсеОК = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Если НЕ (СтрокаТЧ.Тип = "Услуга") Тогда
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана номенклатура");
				Иначе
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана услуга");
				КонецЕсли;
				ВсеОК = Ложь;
			КонецЕсли;
			
			Если ИспользоватьЕдиницуИзмерения Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) И СтрокаТЧ.Тип <> "Услуга" И СтрокаТЧ.Тип <> "Основное средство" Тогда
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана единица измерения");
					ВсеОК = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если (СокрЛп(ВидОперации) =  "В переработку") И (ТабличнаяЧасть.НайтиСтроки(Новый Структура("Тип", "Услуга")).Количество() > 0 ) Тогда
			Сообщить("Невозможно создание документа ""Возврат товаров от покупателя"", содержащего строки с услугами.");
			ВсеОК = Ложь;
		КонецЕсли;
		
		Возврат ВсеОК;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПерейтиКСозданиюДокумента1С()
		
		УстановитьСоответствиеНоменклатуры();
		УстановитьСоответствиеДоговора(ДоговорКонтрагента, ДоговорСвойство);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Если СокрЛП(ВидОперации) = "Продажа, комиссия" тогда 
				ФормаДокумента=		ПолучитьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокументаОбщая");
			Иначе
				ИмяФормыОбъекта=	ПолучитьИмяФормыПТУ(ВидОперации);
				
				СтруктураПараметров=	Новый Структура();
				ЗначенияЗаполнения=		Новый Структура();
				ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
				СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				
				ФормаДокумента=		ПолучитьФорму("Документ.ПоступлениеТоваровУслуг." + ИмяФормыОбъекта, СтруктураПараметров);
			КонецЕсли;	
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Если СокрЛП(ВидОперации) = "Возврат товаров от клиента" тогда 
				ФормаДокумента=		ПолучитьФорму("Документ.ВозвратТоваровОтКлиента.ФормаОбъекта");
			Иначе 	
				ФормаДокумента=		ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта");
			КонецЕсли	
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			ФормаДокумента= ПолучитьФорму("Документ."+ВидОперации+".ФормаОбъекта");
		КонецЕсли;
		
		ДокументОбъект=	ФормаДокумента.Объект;
		
		ДокументОбъект.Организация=	Организация;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			ДокументОбъект.ДатаПервичногоДокумента=		ЭДОбъект.DocumentDate;
			ДокументОбъект.НомерПервичногоДокумента=	ЭДОбъект.DocumentNumber;
		ИначеЕсли не  (СокрЛП(ВидОперации) = "Продажа, комиссия") тогда //если не возврат
			ДокументОбъект.ДатаВходящегоДокумента=		ЭДОбъект.DocumentDate;
			ДокументОбъект.НомерВходящегоДокумента=		ЭДОбъект.DocumentNumber;
		Иначе 
			ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия");
			ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = ложь;
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			ДокументОбъект.ЦенаВключаетНДС=		СуммаВключаетНДС;
		Иначе
			ДокументОбъект.СуммаВключаетНДС=	СуммаВключаетНДС;
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Партнер=	ПолучитьПартнера(Контрагент);
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				ДокументОбъект.Партнер=		Партнер;
				ДокументОбъект.Контрагент=	Контрагент;
			КонецЕсли;
			
			ДокументОбъект.ХозяйственнаяОперация=	ВидОперации;
			
			ДокументОбъект.Соглашение=				Соглашение;
			Если ИспользуютсяДоговорыКонтрагентов(Соглашение) Тогда
				ДокументОбъект.Договор=	ДоговорКонтрагента;
				ФормаДокумента.Элементы.Договор.Доступность=	Истина;
			Иначе
				ФормаДокумента.Элементы.Договор.Доступность=	Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				
				ДокументОбъект.Договор=	ДоговорКонтрагента;
				
				ДанныеДоговора=	ПолучитьДанныеПоДоговору(ДоговорКонтрагента);
				
				Если ДокументОбъект.БанковскийСчетОрганизации <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
					ДокументОбъект.БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
				КонецЕсли;
				
				Если ДокументОбъект.БанковскийСчетКонтрагента <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
					ДокументОбъект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДокументОбъект.ВидОперации=	ВидОперации;
			КонецЕсли;
			
			ДокументОбъект.Контрагент=	Контрагент;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					ДокументОбъект.ДоговорКонтрагента=	ДоговорКонтрагента;
				Иначе
					ДокументОбъект.Договор=				ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДокументОбъект.КратностьВзаиморасчетов=	1;
			КонецЕсли;
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДоговорУказан = ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента);
			Иначе
				ДоговорУказан = ЗначениеЗаполнено(ДокументОбъект.Договор);
			КонецЕсли;
			
			ЭтоКомиссия=	Ложь;
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ЭтоКомиссия = ДоговорУказан И Вычислить("ПолучитьДоговорКонтрагентаВидДоговора(ДокументОбъект.ДоговорКонтрагента) = ПредопределенноеЗначение(""Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"")");
			КонецЕсли;
			
			//Управление формой для БП
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаТовары") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаТовары.Видимость =
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
			КонецЕсли;
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				Если НЕ ФормаДокумента.Элементы.Найти("ГруппаВозвратнаяТара") = Неопределено Тогда
					ФормаДокумента.Элементы.ГруппаВозвратнаяТара.Видимость =
					ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
					И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаУслуги") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаУслуги.Видимость =
				(ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
				ИЛИ ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
				ИЛИ ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"))
				И НЕ ФормаДокумента.ЭтоКомиссия;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаАгентскиеУслуги") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаАгентскиеУслуги.Видимость = НЕ ЭтоКомиссия
				И ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаОборудование") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаОборудование.Видимость =
				ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
			КонецЕсли;	
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаОбъектыСтроительства") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаОбъектыСтроительства.Видимость =
				ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаСчетФактура") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаСчетФактура.Видимость = НЕ (ФормаДокумента.Элементы.Найти("УчетАгентскогоНДС")<>неопределено и  ФормаДокумента.УчетАгентскогоНДС) И НЕ ЭтоКомиссия
				И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаСчетаРасчетов") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаСчетаРасчетов.Видимость =
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаИтогиВсегоНДС") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаИтогиВсегоНДС.Доступность =
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
			КонецЕсли;	
			
			ЗачетПоДокументу   = Ложь;
			ЗачетАвтоматически = Ложь;
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ЗачетАвансовВозможен = НЕ ЭтоКомиссия
				И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
				
				Если НЕ ФормаДокумента.Элементы.Найти("ГруппаЗачетАвансов") = Неопределено Тогда
					Если ЗачетАвансовВозможен Тогда
						Если ДокументОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда
							ЗачетПоДокументу = Истина;
						ИначеЕсли ДокументОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически") Тогда
							ЗачетАвтоматически = Истина;
						КонецЕсли;
					КонецЕсли;
					
					ФормаДокумента.Элементы.ГруппаЗачетАвансов.Видимость = ЗачетПоДокументу;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
				ФормаДокумента.Элементы.СчетУчетаРасчетовПоАвансам.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("НадписьСчетФактура") = Неопределено Тогда
				ФормаДокумента.Элементы.НадписьСчетФактура.Гиперссылка = ФормаДокумента.ТребуетсяСчетФактура;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("НомерВходящегоСчетаФактуры") = Неопределено Тогда
				ФормаДокумента.Элементы.НомерВходящегоСчетаФактуры.Доступность = ДокументОбъект.ПредъявленСчетФактура;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ДатаВходящегоСчетаФактуры") = Неопределено Тогда
				ФормаДокумента.Элементы.ДатаВходящегоСчетаФактуры.Доступность  = ДокументОбъект.ПредъявленСчетФактура;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("КодВидаОперации") = Неопределено Тогда
				ФормаДокумента.Элементы.КодВидаОперации.Доступность = ДокументОбъект.ПредъявленСчетФактура;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("НДСПредъявленКВычету") = Неопределено Тогда
				ВерсияУчетаНДС = Вычислить("УчетНДСКлиентСервер.Версия(ДокументОбъект.Дата)");
				ФормаДокумента.Элементы.НДСПредъявленКВычету.Доступность       = ДокументОбъект.ПредъявленСчетФактура 
				И НЕ ДокументОбъект.НДСВключенВСтоимость 
				И (ФормаДокумента.УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2);
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("Склад") = Неопределено Тогда
				ФормаДокумента.Элементы.Склад.Доступность =
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ЦеныИВалюта") = Неопределено Тогда
				
				СтруктураНадписи = Новый Структура();
				СтруктураНадписи.Вставить("ТипЦен",           ДокументОбъект.ТипЦен);
				СтруктураНадписи.Вставить("ВалютаДокумента",  ДокументОбъект.ВалютаДокумента);
				СтруктураНадписи.Вставить("Курс",             ДокументОбъект.КурсВзаиморасчетов);
				СтруктураНадписи.Вставить("Кратность",        ДокументОбъект.КратностьВзаиморасчетов);
				Если ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
					СтруктураНадписи.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
				КонецЕсли;
				
				ФормаДокумента.ЦеныИВалюта = Вычислить("ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи)");
				
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ДоговорКонтрагента") = Неопределено Тогда
				ФормаДокумента.Элементы.ДоговорКонтрагента.Доступность = 
				ЗначениеЗаполнено(ДокументОбъект.Организация) И ЗначениеЗаполнено(ДокументОбъект.Контрагент);
			КонецЕсли;	
			
			Если НЕ ФормаДокумента.Элементы.Найти("ПодразделениеОрганизации") = Неопределено Тогда
				ФормаДокумента.Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(ДокументОбъект.Организация);
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("СпособЗачетаАвансов") = Неопределено Тогда
				ФормаДокумента.Элементы.СпособЗачетаАвансов.Доступность = ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И ЗачетАвансовВозможен;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ТоварыКонтрагент") = Неопределено Тогда
				ФормаДокумента.Элементы.ТоварыКонтрагент.Доступность =  НЕ ЭтоКомиссия;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ТоварыДоговорКонтрагента") = Неопределено Тогда
				ФормаДокумента.Элементы.ТоварыДоговорКонтрагента.Доступность =  НЕ ЭтоКомиссия;
			КонецЕсли;
			
			Если НЕ ФормаДокумента.Элементы.Найти("ТоварыСчетРасчетов") = Неопределено Тогда
				ФормаДокумента.Элементы.ТоварыСчетРасчетов.Доступность =  НЕ ЭтоКомиссия;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			
			Если ВидОперации = "ПоступлениеМЗ" Тогда
				
				ДокументОбъект.СчетУчета=	ПредопределенноеЗначение("ПланСчетов.ЕПСБУ.МЗ");
				
				ДанныеСчетовУчетаМЗ=	ПолучитьДанныеСчетовУчетаМЗ(ДокументОбъект.Организация);
				Для каждого СчетУчетаБГУ Из ДанныеСчетовУчетаМЗ.СписокСчетовУчета Цикл
					ФормаДокумента.Элементы.СчетУчета.СписокВыбора.Добавить(СчетУчетаБГУ.Значение, СчетУчетаБГУ.Представление);
				КонецЦикла;
				
				ФормаДокумента.ДополнительныеСубконтоСчетов = Новый ФиксированноеСоответствие(ДанныеСчетовУчетаМЗ.ВидыСубконтоСчетов);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Заполнение табличной части
		ЗаполнениеТабличнойЧасти(ФормаДокумента);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");
			
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги") Тогда
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Услуги", ",");
			
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,Товары,Услуги", ",");
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОбъектыСтроительства,Услуги", ",");
			ИначеЕсли СокрЛП(ВидОперации) = "Продажа, комиссия" тогда 
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
			Иначе
				МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,ОбъектыСтроительства,Товары,Услуги,АгентскиеУслуги", ",");
			КонецЕсли;
			
			СуммаИтогов=	0;
			СуммаНДСИтогов=	0;
			
			Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
				СуммаИтогов=	СуммаИтогов + ФормаДокумента.Объект[ТекущаяТабличнаяЧасть].Итог("Сумма");
				СуммаНДСИтогов=	СуммаНДСИтогов + ФормаДокумента.Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
			КонецЦикла;
			
			ФормаДокумента.ИтогиВсего=		СуммаИтогов;
			
			Если НЕ СокрЛП(ВидОперации)="Продажа, комиссия" И НЕ СокрЛП(ВидОперации)="Услуги" Тогда
				ФормаДокумента.ИтогиВсегоНДС=	СуммаНДСИтогов;
				ЕстьМатериальныеЦенности=		ФормаДокумента.Объект.Товары.Количество() > 0 ИЛИ ФормаДокумента.Объект.ВозвратнаяТара.Количество() > 0 ИЛИ ФормаДокумента.Объект.Оборудование.Количество() > 0;
				ФормаДокумента.ОтметкаНезаполненногоСклад = ЕстьМатериальныеЦенности;
				ФормаДокумента.ЕстьСтрокиВТабличныхЧастях = ЕстьМатериальныеЦенности ИЛИ ФормаДокумента.Объект.Услуги.Количество() > 0 ИЛИ ФормаДокумента.Объект.АгентскиеУслуги.Количество() > 0;
			
			ИначеЕсли СокрЛП(ВидОперации)="Услуги" Тогда
				ФормаДокумента.ИтогиВсегоНДС = СуммаНДСИтогов;
			
			КонецЕсли;
			
		КонецЕсли;
		
		//заполним счета учета для БП 30
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			УстановитьСчетаРасчетовСКонтргаентом(ФормаДокумента);
		КонецЕсли;
		
		ФормаДокумента.Модифицированность=	Истина;
		
		ФормаДокумента.РежимОткрытияОкна=			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ФормаДокумента.Открыть();
		
		ПодключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьСписокВыбораВидОперации(Элемент)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
			
			ВидОперации= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"));
			
			ВидОперации= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			
			Если Параметры.Type = "XmlAcceptanceCertificate" Тогда
				Элемент.СписокВыбора.Добавить("ПоступлениеУслугРабот", "Поступление услуг, работ");
				ВидОперации= "ПоступлениеУслугРабот";
			Иначе
				Элемент.СписокВыбора.Добавить("ПоступлениеМЗ"		 , "Поступление МЗ (М-4)");
				Элемент.СписокВыбора.Добавить("ПоступлениеОС"		 , "Поступление ОС, НМА, НПА");
				ВидОперации= "ПоступлениеМЗ";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
	
	&НаКлиенте
	Процедура НастройкаВидимости()
		
		Автозаголовок=	Ложь;
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
			ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Заголовок= "Создание поступления товаров и услуг";
		Иначе
			Заголовок= "Создание поступления МЗ";
		КонецЕсли;
		
		//Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
		//	Элементы.ВидОперации.Видимость=		Ложь;
		//	Элементы.ВидОперации.Доступность=	Ложь;
		//КонецЕсли;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа=	Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок=			"Объект строительства";
		ИначеЕсли ВидОперации = "ПоступлениеОС" Тогда
			
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа=	Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок=			"Основное средство";
			
			//СвязиПараметровВыбора = Новый Массив;
			//СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
			//Элементы.ТабличнаяЧастьНоменклатура.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		Иначе
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа=	Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок=			"Номенклатура";
		КонецЕсли;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" ИЛИ ЭДОбъект.Type = "XmlAcceptanceCertificate"ИЛИ ВидОперации = "ПоступлениеОС" Тогда
			Элементы.ТабличнаяЧастьЕдиницаИзЭД.Видимость=			Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзЭД.Доступность=			Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.Видимость=		Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.Доступность=	Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Элементы.ДоговорыКонтрагентов.Доступность=	Истина;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Элементы.Соглашение.Доступность=	Истина;
			КонецЕсли;
		Иначе
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДоговорКонтрагента=	ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
			Иначе
				ДоговорКонтрагента=	ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
			Элементы.ДоговорыКонтрагентов.Доступность=	Ложь;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Соглашение=	ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
				Элементы.Соглашение.Доступность=	Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ПредставлениеДокумента.Заголовок=	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Элементы.Соглашение.Видимость=		Истина;
			Если ИспользуютсяДоговорыКонтрагентов(Соглашение) Тогда
				Элементы.ДоговорыКонтрагентов.Доступность=	Истина;
			Иначе
				ДоговорКонтрагента=	ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				Элементы.ДоговорыКонтрагентов.Доступность=	Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьИспользованиеЕдиницыИзмерения();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ЭДОбъект=	ЭтаФорма.ВладелецФормы.ЭДОбъект;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Попытка
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
			Исключение
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"); //УТ 11.2
			КонецПопытки;
			
		Иначе
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа=	Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
		КонецЕсли;
		
		СтруктураЭДОбъект=	ЗаполнитьДанныеЭД();
		
		ПриИзмененииШапки(Истина);
		
		НастройкаВидимости();
		
		УстановитьПараметрыВыбораДоговора();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриИзмененииШапки(ПервоначальноеЗаполнениеТЧ = Ложь)
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДоговорКонтрагента=			УстановитьДоговорКонтрагента(Организация, Контрагент, СписокВидовДоговоров);
			ТекущийДоговорКонтрагента=	ДоговорКонтрагента;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Соглашение=						УстановитьСоглашениеКонтрагента(Организация, Контрагент);
				ТекущееСоглашениеКонтрагента=	Соглашение;
			КонецЕсли;
		КонецЕсли;
		
		Если ПервоначальноеЗаполнениеТЧ Тогда
			ЗаполнитьДанныеТЧЗначениямиИз1С(ЭДОбъект.Type);
		Иначе
			Оповещение=	Новый ОписаниеОповещения("ОбработчикВопросЗаполнитьТЧ", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Заполнить табличную часть значениями по умолчанию?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВопросЗаполнитьТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
			ЗаполнитьДанныеТЧЗначениямиИз1С(ЭДОбъект.Type);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаСервере
	Процедура ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(ИдентификаторТекущейСтроки, ТипОбъектаЭДО)
		
		СтрокаТЧ=		ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		
		ИндексСтроки=	ТабличнаяЧасть.Индекс(СтрокаТЧ);
		
		ТабДанных=				РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
		ИскомаяСтрока=			ТабДанных.Получить(ИндексСтроки);
		ЗаполнитьТипНоменклатуры(ИскомаяСтрока, ТипОбъектаЭДО);
		
		Если ЗначениеЗаполнено(ИскомаяСтрока.Номенклатура) И ИскомаяСтрока.Тип <> "Основное средство" Тогда
			ИскомаяСтрока.ЕдиницаИзмерения=	ИскомаяСтрока.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
		
		ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(Элементы.ТабличнаяЧасть.ТекущиеДанные.ПолучитьИдентификатор(), ЭДОбъект.Type);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДоговорыКонтрагентовПриИзменении(Элемент)
		УстановитьСоответствиеДоговора(ТекущийДоговорКонтрагента, "");
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСопоставитьС1СНажатие(Элемент)
		
		Параметры.Режим=	"Сопоставление";
		Закрыть(Параметры);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		ПриИзмененииШапки();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СуммаВключаетНДСПриИзменении(Элемент)
		
		СуммаВключаетНДСПриИзмененииНаСервере();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СуммаВключаетНДСПриИзмененииНаСервере()
		
		ТабДанных=	РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
		ПересчитатьПоляСУчетомНДС(ТабДанных);
		ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВидОперацииПриИзменении(Элемент)
		ИнициализироватьСписокВидовДоговоров();
		УстановитьПараметрыВыбораДоговора();
		НастройкаВидимости();
		ЗаполнитьДанныеТЧЗначениямиИз1С(ЭДОбъект.Type);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоглашениеПриИзменении(Элемент)
		
		УстановитьСоответствиеСоглашения(ТекущееСоглашениеКонтрагента, "");
		НастройкаВидимости();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПриИзменении(Элемент)
		
		ПриИзмененииШапки();
		НастройкаВидимости();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		Партнер= ПолучитьПартнера(Контрагент);
		ВыборСоглашенияСКонтрагентом(Партнер, Элемент);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		стПрофильКонфигурации=	МетодСервера(,"СформироватьПрофильКонфигурации");
		
		СуммаВключаетНДС= Истина;
		
		ЗаполнитьСписокВыбораВидОперации(Элементы.ВидОперации);
		
		ИнициализироватьСписокВидовДоговоров();
		
		Если СписокВидовОпераций.Количество() > 0 Тогда
			ВидОперации=	СписокВидовОпераций.Получить(0).Значение;
		КонецЕсли;
		
		МассивТипов=	Новый Массив();
		МассивТипов.Добавить("СправочникСсылка.ДоговорыКонтрагентов");
		ОписаниеТипов= 	Новый ОписаниеТипов(МассивТипов);
		Элементы.ДоговорыКонтрагентов.ОграничениеТипа=	ОписаниеТипов;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			ИспользоватьЕдиницуИзмерения=	Истина;
		Иначе
			Если НЕ СокрЛП(ВидОперации) = "Объекты строительства" Тогда
				ИспользоватьЕдиницуИзмерения=	Истина;
			Иначе
				ИспользоватьЕдиницуИзмерения=	Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ВалютаРегламентированногоУчета=	Константы.ВалютаРегламентированногоУчета.Получить();
		
		Контрагент=		Параметры.Контрагент;
		Организация=	Параметры.Организация;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура Создать(Команда)
		
		Если НЕ ПроверитьВсеНеобходимыеДанные() Тогда
			ПоказатьПредупреждение(, "Заполните все необходимые данные.", , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ПерейтиКСозданиюДокумента1С();
		
	КонецПроцедуры
	
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработчикЗакрытиеФормыНакладной() Экспорт
	
	Если НЕ ФормаДокумента.Открыта() 
		И ЗначениеЗаполнено(ФормаДокумента.Объект.Ссылка) Тогда
		ОтключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной");
		Параметры.Документ1С=	ФормаДокумента.Объект.Ссылка;
		ЭтаФорма.Закрыть(Параметры);
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоглашенияСКонтрагентом(Партнер, Элемент)
	
	ПарметрыФормы= Новый Структура("ДатаДокумента, ТекущаяСтрока, Отбор", ТекущаяДата(), Соглашение, Новый Структура);
	ПарметрыФормы.Отбор.Вставить("Партнер", Партнер);
	
	Если ВРег(СокрЛП(ВидОперации)) = ВРег("Возврат товаров от клиента")  Тогда
		ПарметрыФормы.Вставить("ДоступноДляПродажиКлиентам", Истина);
		ИмяФормыВыбора= "Справочник.СоглашенияСКлиентами.ФормаВыбора";
	Иначе
		ПарметрыФормы.Вставить("ДоступноДляЗакупки", Истина);
		ИмяФормыВыбора= "Справочник.СоглашенияСПоставщиками.ФормаВыбора";
	КонецЕсли;
	
	МетодКлиента(,"ОткрытьФормуОбъектаИБ",,ИмяФормыВыбора, ПарметрыФормы, Элемент);
	
	ТекущееСоглашениеКонтрагента= Соглашение;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтавкуНДСПоУслуге(СуммаБезНДС, СуммаНДС)
	
	Если СуммаБезНДС = 0 Тогда
		Возврат 0;
	Конецесли;
	
	расчетнаяСтавка = 100 * СуммаНДС / СуммаБезНДС;
	Если расчетнаяСтавка < 5 Тогда
		Возврат "0";
	ИначеЕсли расчетнаяСтавка < 14 Тогда
		Возврат "10";
	Иначе
		возврат "18";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруСодержанияДокумента(ЭДОбъект) Экспорт
	
	Если ЭДОбъект.Type = "XmlTorg12" Тогда
		
		ТитулОтправителя=	ПолучитьИмяВременногоФайла("xml");
		ТитулПолучателя=	ПолучитьИмяВременногоФайла("xml");
		
		ЭДОбъект.SaveSenderContent(ТитулОтправителя);
		ЭДОбъект.SaveRecipientContent(ТитулПолучателя);
		
		Выборка=	Новый ЧтениеXML;
		Выборка.ОткрытьФайл(ТитулОтправителя);
		
		ЕстьРеквизитыДоговора=	Ложь;
		
		стДокумент = Новый Структура("ЭДОбъект, Type, Items", ЭДОбъект, ЭДОбъект.Type);
		
		тзТабличнаяЧасть=	Новый Массив();
		
		Пока Выборка.Прочитать() Цикл
			
			Если (Выборка.ТипУзла = ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("СвТов")) Тогда
				
				СтрокаТЧ=	Новый Структура();
				СтрокаТЧ.Вставить("Name", Неопределено);
				СтрокаТЧ.Вставить("Code", Неопределено);
				СтрокаТЧ.Вставить("NomenclatureArticle", Неопределено);
				СтрокаТЧ.Вставить("Quantity", Неопределено);
				СтрокаТЧ.Вставить("UnitCode", Неопределено);
				СтрокаТЧ.Вставить("UnitName", Неопределено);
				СтрокаТЧ.Вставить("Price", Неопределено);
				СтрокаТЧ.Вставить("SubtotalWithVatExcluded", Неопределено);
				СтрокаТЧ.Вставить("Vat", Неопределено);
				СтрокаТЧ.Вставить("Subtotal", Неопределено);
				СтрокаТЧ.Вставить("TaxRate", Неопределено);

				НаимТов=					Выборка.ЗначениеАтрибута("НаимТов");
				СтрокаТЧ.Вставить("Name", ?(ЗначениеЗаполнено(НаимТов), НаимТов, Неопределено));
				Code=						Выборка.ЗначениеАтрибута("КодТов");
				СтрокаТЧ.Вставить("Code", ?(ЗначениеЗаполнено(Code), Code, Неопределено));
				NomenclatureArticle=		Выборка.ЗначениеАтрибута("АртикулТов");
				СтрокаТЧ.Вставить("NomenclatureArticle", ?(ЗначениеЗаполнено(NomenclatureArticle), NomenclatureArticle, Неопределено));
				UnitCode=					Выборка.ЗначениеАтрибута("ОКЕИ_Тов");
				СтрокаТЧ.Вставить("UnitCode", ?(ЗначениеЗаполнено(UnitCode), UnitCode, Неопределено));
				UnitName=					Выборка.ЗначениеАтрибута("НаимЕдИзм");
				СтрокаТЧ.Вставить("UnitName", ?(ЗначениеЗаполнено(UnitName), UnitName, Неопределено));
				Quantity=					ЧислоИзXML(Выборка.ЗначениеАтрибута("Нетто"));
				СтрокаТЧ.Вставить("Quantity", ?(ЗначениеЗаполнено(Quantity), Quantity, Неопределено));
				Price=						ЧислоИзXML(Выборка.ЗначениеАтрибута("Цена"));
				СтрокаТЧ.Вставить("Price", ?(ЗначениеЗаполнено(Price), Price, Неопределено));
				SubtotalWithVatExcluded=	ЧислоИзXML(Выборка.ЗначениеАтрибута("СумБезНДС"));
				СтрокаТЧ.Вставить("SubtotalWithVatExcluded", ?(ЗначениеЗаполнено(SubtotalWithVatExcluded), SubtotalWithVatExcluded, Неопределено));
				Vat=						ЧислоИзXML(Выборка.ЗначениеАтрибута("СумНДС"));
				СтрокаТЧ.Вставить("Vat", ?(ЗначениеЗаполнено(Vat), Vat, Неопределено));
				Subtotal=					ЧислоИзXML(Выборка.ЗначениеАтрибута("СумУчНДС"));
				СтрокаТЧ.Вставить("Subtotal", ?(ЗначениеЗаполнено(Subtotal), Subtotal, Неопределено));
				TaxRate=					Выборка.ЗначениеАтрибута("СтавкаНДС");
				СтрокаТЧ.Вставить("TaxRate", ?(ЗначениеЗаполнено(TaxRate), TaxRate, Неопределено));
				
				тзТабличнаяЧасть.Добавить(СтрокаТЧ);
				
			КонецЕсли;
			
			Если (Выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("Основание")) Тогда
				
				стДокумент.Вставить("ДатаДоговора", Выборка.ЗначениеАтрибута("ДатаОсн"));
				стДокумент.Вставить("НомерДоговора", Выборка.ЗначениеАтрибута("НомОсн"));
				стДокумент.Вставить("НаименованиеДоговора", Выборка.ЗначениеАтрибута("НаимОсн"));
				
				ЕстьРеквизитыДоговора=	Истина;
			
			КонецЕсли;
			
		КонецЦикла;	
		
		Если НЕ ЕстьРеквизитыДоговора Тогда
			стДокумент.Вставить("ДатаДоговора","");
			стДокумент.Вставить("НомерДоговора","");
			стДокумент.Вставить("НаименованиеДоговора","");	
		КонецЕсли;
		
		стДокумент.Items=	тзТабличнаяЧасть;
		стДокумент.Вставить("Total", ЭДОбъект.Total);
		стДокумент.Вставить("Vat", ЭДОбъект.Vat);
		
		Возврат стДокумент;
		
	ИначеЕсли ЭДОбъект.Type = "XmlAcceptanceCertificate" Тогда
		
		ТитулОтправителя=	ПолучитьИмяВременногоФайла("xml");
		ТитулПолучателя=	ПолучитьИмяВременногоФайла("xml");
		
		ЭДОбъект.SaveSenderContent(ТитулОтправителя);
		ЭДОбъект.SaveRecipientContent(ТитулПолучателя);
		
		Выборка=	Новый ЧтениеXML;
		Выборка.ОткрытьФайл(ТитулОтправителя);
		
		ЕстьРеквизитыДоговора=	Ложь;
		
		стДокумент = Новый Структура("ЭДОбъект, Type, Items", ЭДОбъект, ЭДОбъект.Type);
		
		тзТабличнаяЧасть=	Новый Массив();

		стДокумент = Новый Структура("ЭДОбъект, Type, Items", ЭДОбъект, "XmlAcceptanceCertificate");
		
		Пока Выборка.Прочитать() Цикл
			
			НоваяСтрока=	Ложь;
			
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("Работа")) тогда 
				
				//пришли на строку 
				СтрокаТЧ=	Новый Структура();
				СтрокаТЧ.Вставить("Name", Неопределено);
				СтрокаТЧ.Вставить("Code", Неопределено);
				СтрокаТЧ.Вставить("NomenclatureArticle", Неопределено);
				СтрокаТЧ.Вставить("Quantity", Неопределено);
				СтрокаТЧ.Вставить("UnitCode", Неопределено);
				СтрокаТЧ.Вставить("UnitName", Неопределено);
				СтрокаТЧ.Вставить("Price", Неопределено);
				СтрокаТЧ.Вставить("SubtotalWithVatExcluded", Неопределено);
				СтрокаТЧ.Вставить("Vat", Неопределено);
				СтрокаТЧ.Вставить("Subtotal", Неопределено);
				СтрокаТЧ.Вставить("TaxRate", Неопределено);
				
				НаимРабот=				Выборка.ЗначениеАтрибута("НаимРабот");
				СтрокаТЧ.Вставить("Name", ?(ЗначениеЗаполнено(НаимРабот), НаимРабот, Неопределено));
    			Код=					Лев(НаимРабот, 100);
				СтрокаТЧ.Вставить("Code", ?(ЗначениеЗаполнено(Код), Код, Неопределено));
    			ОКЕИ=					Выборка.ЗначениеАтрибута("ОКЕИ");
				СтрокаТЧ.Вставить("UnitCode", ?(ЗначениеЗаполнено(ОКЕИ), ОКЕИ, Неопределено));
    			НаимЕдИзм=				Выборка.ЗначениеАтрибута("НаимЕдИзм");
				СтрокаТЧ.Вставить("UnitName", ?(ЗначениеЗаполнено(НаимЕдИзм), НаимЕдИзм, Неопределено));
    			Количество=				ЧислоИзXML(Выборка.ЗначениеАтрибута("Количество"));
				СтрокаТЧ.Вставить("Quantity", ?(ЗначениеЗаполнено(Количество), Количество, Неопределено));
    			Цена=					ЧислоИзXML(Выборка.ЗначениеАтрибута("Цена"));
				СтрокаТЧ.Вставить("Price", ?(ЗначениеЗаполнено(Цена), Цена, Неопределено));
            	СумБезНДС=				ЧислоИзXML(Выборка.ЗначениеАтрибута("СумБезНДС"));
				СтрокаТЧ.Вставить("SubtotalWithVatExcluded", ?(ЗначениеЗаполнено(СумБезНДС), СумБезНДС, Неопределено));
            	СумНДС=					ЧислоИзXML(Выборка.ЗначениеАтрибута("СумНДС"));
				СтрокаТЧ.Вставить("Vat", ?(ЗначениеЗаполнено(СумНДС), СумНДС, Неопределено));
            	СумУчНДС=				ЧислоИзXML(Выборка.ЗначениеАтрибута("СумУчНДС"));
				СтрокаТЧ.Вставить("Subtotal", ?(ЗначениеЗаполнено(СумУчНДС), СумУчНДС, Неопределено));
            	СтавкаНДС=				ОпределитьСтавкуНДСПоУслуге(СумБезНДС, ?(ЗначениеЗаполнено(СумНДС), СумНДС, 0));
				СтрокаТЧ.Вставить("TaxRate", ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, Неопределено));

				НоваяСтрока=	Истина;
				
			ИначеЕсли  (Выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и (Врег(Выборка.имя) = Врег("Описание")) Тогда
				Выборка.Прочитать();
				Если (Выборка.ТипУзла =  ТипУзлаXML.Текст) Тогда 
					Если СтрокаТЧ.Свойство("Name") И ПустаяСтрока(СтрокаТЧ.Name) Тогда
						НаимРабот=				Выборка.Значение;
						СтрокаТЧ.Вставить("Name", ?(ЗначениеЗаполнено(НаимРабот), НаимРабот, Неопределено));
    					Код=					Лев(НаимРабот, 100);
						СтрокаТЧ.Вставить("Code", ?(ЗначениеЗаполнено(Код), Код, Неопределено));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (выборка.ТипУзла =   ТипУзлаXML.КонецЭлемента) и (врег(выборка.имя) = врег("Работа")) Тогда
				НоваяСтрока=	Ложь;
			КонецЕсли;
			
			Если НоваяСтрока Тогда
				тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;	
		
		стДокумент.Вставить("ДатаДоговора","");
		стДокумент.Вставить("НомерДоговора","");
		стДокумент.Вставить("НаименованиеДоговора","");
		
		стДокумент.Items = тзТабличнаяЧасть;
		стДокумент.Вставить("total", ЭДОбъект.total);
		стДокумент.Вставить("vat", ЭДОбъект.vat);
		
		Возврат стДокумент;
		
	Иначе
		ВызватьИсключение "Неизвестный Type объекта ЭДОбъект: """ + ЭДОбъект.Type + """";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьДанныеЭД()

	ТабличнаяЧасть.Очистить();
	
	НомерСтроки=	0;
	
	СтруктураЭДОбъект= ПолучитьСтруктуруСодержанияДокумента(ЭДОбъект);	
	Для Каждого СтрокаЭДОбъект Из СтруктураЭДОбъект.Items Цикл
		НомерСтроки=	НомерСтроки + 1;
		НоваяСтрока1С=	ТабличнаяЧасть.Добавить();
		НоваяСтрока1С.НомерСтроки=	НомерСтроки;
		ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(НоваяСтрока1С, СтрокаЭДОбъект);
	КонецЦикла;
	
	ДатаДоговора=			?(Строка(СтруктураЭДОбъект.ДатаДоговора) = "", "", Строка(СтруктураЭДОбъект.ДатаДоговора) + "_");
	НомерДоговора=			?(Строка(СтруктураЭДОбъект.НомерДоговора) = "", "", Строка(СтруктураЭДОбъект.НомерДоговора) + "_");
	НаименованиеДоговора=	?(Строка(СтруктураЭДОбъект.НаименованиеДоговора) = "", "", Строка(СтруктураЭДОбъект.НаименованиеДоговора));
		
	ДоговорСвойство=		Прав(СокрЛП(ДатаДоговора + НомерДоговора + НаименованиеДоговора),50);

	СтруктураЭДОбъект.Вставить("ДоговорСвойство", ДоговорСвойство);
	
	Возврат СтруктураЭДОбъект;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(СтрокаДля1С, СтрокаЭДОбъект)
	
	СтрокаДля1С.НоменклатураИзЭД=							СтрокаЭДОбъект.Name;
	СтрокаДля1С.ЕдиницаИзЭД=								СтрокаЭДОбъект.UnitName;
	СтрокаДля1С.Количество=									СтрокаЭДОбъект.Quantity;
	СтрокаДля1С.СуммаНДС=									СтрокаЭДОбъект.Vat;
	СтрокаДля1С.Всего=										СтрокаЭДОбъект.Subtotal;
	
	XmlTorg12_Item=	Новый СписокЗначений;
	XmlTorg12_Item.Добавить(СтрокаЭДОбъект, "СтрокаЭДОбъект");
	
	СтрокаДля1С.XmlTorg12_Item=								XmlTorg12_Item;
	
КонецПроцедуры

&НаСервере
Функция УстановитьСоглашениеКонтрагента(Организация, Контрагент)
	
	Запрос=	Новый Запрос;
	Запрос.Текст=
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Соглашение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Значение = &Значение";
		
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("DDPact"));
	Запрос.УстановитьПараметр("Значение", СокрЛП(Контрагент.УникальныйИдентификатор()));
		
	Выборка=	Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Соглашение;
	Иначе
		
		ВыборкаСоглашений=		МетодСервера(,"ВыбратьОсновноеСоглашениеКонтрагента", Контрагент, Организация);
		Если ВыборкаСоглашений.Следующий() Тогда
			Возврат ВыборкаСоглашений.Соглашение;
		КонецЕсли;
		
		Возврат Вычислить("Справочники.СоглашенияСПоставщиками.ПустаяСсылка()");
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция УстановитьДоговорКонтрагента(Организация, Контрагент, СписокВидовДоговоров)
	
	Запрос=	Новый Запрос;
	Запрос.Текст=
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Договор
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Значение = &Значение";
		
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("DDContract"));
	Запрос.УстановитьПараметр("Значение", ДоговорСвойство);
		
	Выборка=	Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Договор;
	Иначе
		
		ВыборкаДоговоров=		МетодСервера(,"ВыбратьОсновнойДоговорКонтрагента", Контрагент, Организация, СписокВидовДоговоров);
		Если ВыборкаДоговоров.Следующий() Тогда
			Если ВыборкаДоговоров.ПриоритетДоговора = 1 Тогда
				Возврат ВыборкаДоговоров.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Возврат Справочники.Договоры.ПустаяСсылка();
		Иначе
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговора()
	
	НовыйМассивПараметров=	Новый Массив();
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		МассивВидовДоговоров=	Новый ФиксированныйМассив(СписокВидовДоговоров.ВыгрузитьЗначения());
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Контрагент));
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Соглашение", Соглашение));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Партнер", ПолучитьПартнера(Контрагент)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Контрагент));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ВидОперации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	
	НовыеПараметрыВыбора=	Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорыКонтрагентов.ПараметрыВыбора=	НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоляСУчетомНДС(ТабДанных)

	Для Каждого СтрокаТЧ Из ТабДанных Цикл
		
		Item=	СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
		
		Если СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма=	Item.Subtotal;
		Иначе
			СтрокаТЧ.Сумма=	Item.SubtotalWithVatExcluded;
		КонецЕсли;
		
		СтрокаТЧ.Цена=	?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
		
	КонецЦикла;
	
	ИтогКоличество=	Табданных.Итог("Количество");
	ИтогСумма=		Табданных.Итог("Сумма");
	ИтогСуммаНДС=	Табданных.Итог("СуммаНДС");
	ИтогВсего=		Табданных.Итог("Всего");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТЧЗначениямиИз1С(ТипОбъектаЭДО)
	
	ТабДанных=	РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаТЧ Из ТабДанных Цикл
		ЗаполнитьСтрокуДанными1С(СтрокаТЧ);
		ЗаполнитьТипНоменклатуры(СтрокаТЧ, ТипОбъектаЭДО);
	КонецЦикла;
	
	ПересчитатьПоляСУчетомНДС(ТабДанных);
	
	ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипНоменклатуры(СтрокаТЧ, ТипОбъектаЭДО)
	
	Если НЕ ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЭтоУслуга=	Ложь;
	Иначе 	
		ЭтоУслуга=	?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура), МетодСервера(,"НоменклатураЯвляетсяУслугой", СтрокаТЧ.Номенклатура), Ложь);
	КонецЕсли;	
	
	Если  СокрЛП(ВидОперации) = "Оборудование" Тогда
		СтрокаТЧ.Тип=	"Оборудование";
	ИначеЕсли ВидОперации = "ПоступлениеОС" Тогда
		СтрокаТЧ.Тип= "Основное средство";
	ИначеЕсли СокрЛП(ВидОперации) = "Объекты строительства" Тогда
		СтрокаТЧ.Тип = "Объект стр";
		СтрокаТЧ.Номенклатура=	ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");
	ИначеЕсли ТипОбъектаЭДО = "XmlAcceptanceCertificate" ИЛИ ЭтоУслуга Тогда
		СтрокаТЧ.Тип=	"Услуга";
	Иначе 
		СтрокаТЧ.Тип=	"Товар";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоставщика(Направление, Контрагент, НоменклатураИзЭД=Неопределено, НоменклатураСсылка=Неопределено, КодНоменклатуры, АртикулНоменклатуры)
	
	Запрос=	Новый Запрос;
	Запрос.Текст=	
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
		|	НоменклатураПоставщиков.Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &НоменклатураИзЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Наименование = &НоменклатураИзЭД
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Номенклатура = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Идентификатор = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Идентификатор = &Идентификатор
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Артикул = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Артикул = &Артикул
		|		КОНЕЦ
		|	И НоменклатураПоставщиков.Владелец = &Владелец";
		
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		Владелец=	Вычислить("?(ЗначениеЗаполнено(Контрагент.Партнер), Контрагент.Партнер, Справочники.Партнеры.ПустаяСсылка())");
	Иначе
		Владелец=	Вычислить("?(ЗначениеЗаполнено(Контрагент), Контрагент, Справочники.Контрагенты.ПустаяСсылка())");
	КонецЕсли;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Если Направление = "ПолучитьНоменклатуру" Тогда
		
		НоменклатураИзЭД = ?(ЗначениеЗаполнено(НоменклатураИзЭД)=Истина, НоменклатураИзЭД, Неопределено);
		Запрос.УстановитьПараметр("НоменклатураИзЭД", НоменклатураИзЭД);
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);		
		
	ИначеЕсли Направление = "УстановитьНоменклатуру" Тогда
		
		НоменклатураСсылка = ?(ЗначениеЗаполнено(НоменклатураСсылка)=Истина, НоменклатураСсылка, Неопределено);
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
		Запрос.УстановитьПараметр("НоменклатураИзЭД", Неопределено);		
		
	Иначе
		Запрос.УстановитьПараметр("НоменклатураИзЭД", Неопределено);
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);		
	КонецЕсли;
	
	
	//Сначала поиск по идентификатору потом по артикулу
	Если ЗначениеЗаполнено(КодНоменклатуры) Тогда
		Запрос.УстановитьПараметр("Идентификатор", КодНоменклатуры);
		Запрос.УстановитьПараметр("Артикул", Неопределено);
	ИначеЕсли НЕ ЗначениеЗаполнено(КодНоменклатуры) И ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		Запрос.УстановитьПараметр("Идентификатор", Неопределено);
		Запрос.УстановитьПараметр("Артикул", АртикулНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("Идентификатор", Неопределено);
		Запрос.УстановитьПараметр("Артикул", Неопределено);
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура УстановитьНоменклатуруПоставщика(Номенклатура, Контрагент, КодНоменклатуры, АртикулНоменклатуры, Наименование) Экспорт
	
	Если НЕ ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;	
	
	Если стПрофильКонфигурации.ХранениеНоменклатурыПоставщиков.Вариант = "Справочник_НоменклатураПоставщиков" Тогда
		
		РезультатПоиска = НайтиНоменклатуруПоставщика("УстановитьНоменклатуру", Контрагент, , Номенклатура, КодНоменклатуры, АртикулНоменклатуры);
				
		Если НЕ РезультатПоиска.Пустой() Тогда
			Выборка=	РезультатПоиска.Выбрать();
			Выборка.Следующий();
			Если НЕ Выборка.Номенклатура = Номенклатура Тогда
				ЭлементОбъект=				Выборка.НоменклатураПоставщика.ПолучитьОбъект();
				ЭлементОбъект.Номенклатура=	Номенклатура;
				ЭлементОбъект.Записать();
			КонецЕсли;
		Иначе
			ЭлементОбъект=						Вычислить("Справочники.НоменклатураПоставщиков.СоздатьЭлемент()");
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				ЭлементОбъект.Владелец=			Вычислить("Контрагент.Партнер");
			Иначе
				ЭлементОбъект.Владелец=			Контрагент;
			КонецЕсли;
			ЭлементОбъект.Наименование=		Наименование; 
			ЭлементОбъект.Номенклатура=		Номенклатура;
			ЭлементОбъект.Идентификатор=	КодНоменклатуры;
			ЭлементОбъект.Артикул=			АртикулНоменклатуры;
			ЭлементОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоставщика(Контрагент, КодНоменклатуры, АртикулНоменклатуры, НоменклатураИзЭД=Неопределено) Экспорт
	
	КодНоменклатуры=		?(НЕ ЗначениеЗаполнено(КодНоменклатуры), Неопределено, КодНоменклатуры);
	АртикулНоменклатуры=	?(НЕ ЗначениеЗаполнено(АртикулНоменклатуры), Неопределено, АртикулНоменклатуры);
	
	НоменклатураИзЭД = ?(ЗначениеЗаполнено(НоменклатураИзЭД)=Ложь, Неопределено, НоменклатураИзЭД);	
	
	Если стПрофильКонфигурации.ХранениеНоменклатурыПоставщиков.Вариант = "Справочник_НоменклатураПоставщиков" Тогда
		
		РезультатПоиска=	НайтиНоменклатуруПоставщика("ПолучитьНоменклатуру", Контрагент, НоменклатураИзЭД, , КодНоменклатуры, АртикулНоменклатуры);
			
		Если НЕ РезультатПоиска.Пустой() Тогда
			Выборка=	РезультатПоиска.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Возврат Выборка.Номенклатура;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруПоАртикулу(АртикулНоменклатуры) Экспорт
	
	Если стПрофильКонфигурации.ЕстьАртикул Тогда
		
		Запрос=			Новый Запрос;
		Запрос.Текст=
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Артикул = &АртикулНоменклатуры";
		
		Запрос.УстановитьПараметр("АртикулНоменклатуры", АртикулНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ItemStruct_2_ЕдиницаИзмерения(XmlTorg12_Item, Номенклатура) Экспорт
	
	Если  XmlTorg12_Item = Неопределено Тогда
		Возврат МетодСервера(,"ПолучитьЕдиницуИзмерения", "", "", Номенклатура);
 	Иначе	
		Возврат МетодСервера(,"ПолучитьЕдиницуИзмерения", XmlTorg12_Item.UnitCode, XmlTorg12_Item.UnitName, Номенклатура);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИспользованиеЕдиницыИзмерения()
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		ИспользоватьЕдиницуИзмерения=	Истина;
	Иначе
		Если НЕ СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			ИспользоватьЕдиницуИзмерения=	Истина;
		Иначе
			ИспользоватьЕдиницуИзмерения=	Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокВидовДоговоров()
	
    СписокВидовДоговоров= МетодСервера(,"ПолучитьСписокВидовДоговоров", СокрЛП(ВидОперации)="Продажа, комиссия");

КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	Возврат ?(ЗначениеЗаполнено(Контрагент), Контрагент.Партнер, Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыПТУ(ВидОперации)
	
	Попытка
		ФормыДокументаНакладной=	Новый ФиксированноеСоответствие(Документы.ПоступлениеТоваровУслуг.ПолучитьСоответствиеВидовОперацийФормам());
		Возврат "Форма." + ФормыДокументаНакладной[ВидОперации];
	Исключение
		Возврат "ФормаОбъекта";
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетовУчетаМЗ(Организация)
	
	СписокСчетовУчета=	Новый СписокЗначений;
	ВидыСубконтоСчетов=	Вычислить("УправлениеМатериальнымиЗапасами.ПолучитьДанныеСчетовУчетаМЗ(Организация, СписокСчетовУчета)");

	Возврат Новый Структура("СписокСчетовУчета, ВидыСубконтоСчетов", СписокСчетовУчета, ВидыСубконтоСчетов);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоДоговору(ДоговорКонтрагента) Экспорт
	
	Попытка
		Возврат Вычислить("ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорКонтрагента, ""БанковскийСчет, БанковскийСчетКонтрагента"")");
	Исключение
		Возврат Вычислить("ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, ""БанковскийСчет, БанковскийСчетКонтрагента"")");
	КонецПопытки;
		
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуютсяДоговорыКонтрагентов(Соглашение)
	
	Возврат ?(ЗначениеЗаполнено(Соглашение), Соглашение.ИспользуютсяДоговорыКонтрагентов, Ложь);
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуПользователя(Наименование, Значение)
	
	МетодСервера(,"УстановитьНастройкуПользователя", Наименование, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВидОперации = "ПоступлениеОС" Тогда
		
		СтандартнаяОбработка= Ложь;
		
		ПараметрыФормы= Новый Структура("ТекущаяСтрока", Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("Справочник.ОсновныеСредства.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры
