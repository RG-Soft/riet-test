
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьЗаполненныйSendTask", "ПараметрыSendTask, ПараметрыОтправкиНаСогласование", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьИдентификаторОтправленнойВПФ", "DocumentID, ВнешняяПечатнаяФорма", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПорядковыйНомерВнешнейПечатнойФормы", "ВнешняяПечатнаяФорма", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВернутьТаблицуОтношенийОрганизацииКонтрагентов", "Организация = Неопределено", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВыделитьСлово", "ИсходнаяСтрока", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ВалидацияXmlAcceptanceCertificateContent", "xmlAcceptanceCertificateContent", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляInvoiceCorrection", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляInvoice", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаполнитьКонтентДляXmlTorg12", "Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, НомерЗаказа, ДопСведения, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьСтруктуруКонтрагентаДляТОРГ12", "OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=ложь", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуСчета", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАктаСверки", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВнешнююПечатнуюФормуАкта", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуАктаВыполненныхРабот", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуСчета", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПечатнуюФормуАктаСверки", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЗаменитьНедопустимыеСимволы", "НомерДокумента", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормСчета", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАктаСверки", "Знач СсылкаНаОбъект", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлСчетаНаОплату", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлАктаСверки", "ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьСтруктуруПечатныхФормАкта", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СформироватьФайлАктавыполненныхРабот", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПроверитьЕИ", "ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "Эквивалентны", "стр1, стр2", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СтрокаЧтоМенять", "ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ОформитьОшибкиВHTML", "ОшибкиСтруктуры, Заголовок", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ТолькоЦифры", "строкаПроверки", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННЮЛСовпадает", "ИНН", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "КонтрольнаяСуммаИННФЛСовпадает", "ИНН", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ЧисловойКодЕИ", "Знач КодЕИ", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "УмножитьВектора", "ИНН, Множители", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СтруктураКонтентаЗаполнена", "СтруктураКонтента", "НеИспользовать", Ложь);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "Инициализировать", "ИмяМодуля", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОчиститьПеременные", "", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ОтразитьИзмененияВДокументе1С", "Знач Организация, Знач ДокументСсылка, Знач DocumentType", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПослеОтправкиДокумента", "Знач Документ1С, Знач DocumentID, Знач BoxID, Знач DocumentType, Знач Организация", Истина);
	Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ЗаполнитьContentПоСтруктуре", "content, СтруктураДанных, описаниеСтруктурыДанных = """"", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

#Область ТЕЛО_МОДУЛЯ

&НаКлиенте
Функция ПолучитьЗаполненныйSendTask(ПараметрыSendTask, ПараметрыОтправкиНаСогласование) Экспорт
	
	Получатель=								ПараметрыSendTask.Получатель;
	Organization=							ПараметрыSendTask.Organization;
	CounteragentId=							ПараметрыSendTask.CounteragentId;
	ДокументСсылка=							ПараметрыSendTask.ДокументСсылка;
	DocumentType=							ПараметрыSendTask.DocumentType;
	ПараметрыОтправкиНаСогласование=		ПараметрыSendTask.ПараметрыОтправкиНаСогласование;
	isTest=									ПараметрыSendTask.isTest;
	МассивInitialDocumentID=				ПараметрыSendTask.МассивInitialDocumentID;
	НомерЗаказа=							ПараметрыSendTask.НомерЗаказа;
	ДопСведения=							ПараметрыSendTask.ДопСведения;
	IdОтправленого=							ПараметрыSendTask.IdОтправленого;
	ФИОПодписанта=							ПараметрыSendTask.ФИОПодписанта;
	ReceiverDepartmentId=					ПараметрыSendTask.ReceiverDepartmentId;
	
	Организация = 							ПараметрыSendTask.ТекущаяОрганизация;
	ВнешняяПечатнаяФорма =					ПараметрыSendTask.ВнешняяПечатнаяФорма;
	ВыгружатьEXEL =							ПараметрыSendTask.ВыгружатьEXEL;
	
	МассивSubordinateDocumentId=	Новый Массив;
	
	ЭтоКорректировкаИсправление = Ложь;
	
	Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
		
		СтДокумент = МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","СформироватьВнешнююПечатнуюФормуДляДиадокаПоСсылкеВПФ", ДокументСсылка, ВнешняяПечатнаяФорма,,ВыгружатьEXEL, Организация);
		
		ИмяВременногоФайла= ПолучитьИмяВременногоФайла(?(ВыгружатьEXEL, "xlsx", "pdf"));
		СтДокумент.Таблица.Записать(ИмяВременногоФайла, ?(ВыгружатьEXEL, ТипФайлаТабличногоДокумента.XLSX , ТипФайлаТабличногоДокумента.PDF));
		
		SendTask = Organization.CreateSendTaskFromFile(ИмяВременногоФайла, "NonformilizedDocumentContent");
		
		SendTask.Content.Date 	= СтДокумент.Дата;
		SendTask.Content.Number = СтДокумент.Номер;
		SendTask.Filename		= СтДокумент.ИмяФайла;
		SendTask.Content.NeedRecipientSignature = Истина;
		
	ИначеЕсли DocumentType = "XmlTorg12" Тогда
		
		SendTask=		Organization.CreateSendTask("XmlTorg12Content");
		ЗаполнитьКонтентДляXmlTorg12(SendTask.Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, НомерЗаказа, ДопСведения, ФИОПодписанта);
		Если isTest ИЛИ Organization.AuthenticateType<>"Certificate" Тогда 
			
			ЗаполнитьТестовогоПодписанта(SendTask.Content, Organization);
			
		КонецЕсли;
		
	ИначеЕсли DocumentType = "XmlAcceptanceCertificate" тогда
		
		Если НЕ ЗначениеЗаполнено(МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументСсылка)) Тогда
			
			SendTask = Organization.CreateSendTask("XmlAcceptanceCertificateContent");
			ЗаполнитьКонтентДляXmlAcceptanceCertificate(SendTask.Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта) ;
			Если isTest ИЛИ Organization.AuthenticateType<>"Certificate" Тогда
				
				ЗаполнитьТестовогоПодписанта(SendTask.Content, Organization);
				
			КонецЕсли
			
		Иначе
			
			РезультатВизуализации=	ПолучитьПечатнуюФормуАктаВыполненныхРабот(ДокументСсылка);
			Если ЗначениеЗаполнено(РезультатВизуализации.СписокОшибок) Тогда
				ВызватьИсключение "Ошибка формирования файла " + РезультатВизуализации.СписокОшибок;
			Иначе
				SendTask = Organization.CreateSendTaskFromFile(РезультатВизуализации.ИмяВременногоФайла, "AcceptanceCertificateContent");
				SendTask.Content.Date 	= РезультатВизуализации.Дата;
				SendTask.Content.Number = РезультатВизуализации.Номер;
				SendTask.Content.Total	= РезультатВизуализации.Сумма;
				SendTask.Content.Vat	= РезультатВизуализации.СуммаНДС;
				SendTask.Filename 		= РезультатВизуализации.ИмяФайла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
		
		РезультатВизуализации=	ПолучитьПечатнуюФормуСчета(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
		Если ЗначениеЗаполнено(РезультатВизуализации.СписокОшибок) Тогда
			ВызватьИсключение "Ошибка формирования файла " + РезультатВизуализации.СписокОшибок;
		Иначе
			SendTask = Organization.CreateSendTaskFromFile(РезультатВизуализации.ИмяВременногоФайла, "ProformaInvoiceContent");
			SendTask.Content.Date 	= РезультатВизуализации.Дата;
			SendTask.Content.Number = РезультатВизуализации.Номер;
			SendTask.Content.Total 	= РезультатВизуализации.Сумма;
			SendTask.Content.Vat	= РезультатВизуализации.СуммаНДС;
			SendTask.Filename 		= РезультатВизуализации.ИмяФайла;
		КонецЕсли;
	ИначеЕсли 	DocumentType = "ReconciliationAct"  Тогда
		РезультатВизуализации =	ПолучитьПечатнуюФормуАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
		Если ЗначениеЗаполнено(РезультатВизуализации.СписокОшибок) Тогда
			ВызватьИсключение "Ошибка формирования файла " + РезультатВизуализации.СписокОшибок;
		Иначе
			SendTask = Organization.CreateSendTaskFromFile(РезультатВизуализации.ИмяВременногоФайла,"ReconciliationAct");
			SendTask.Content.Date 		= РезультатВизуализации.Дата;
			SendTask.Content.Number 	= РезультатВизуализации.Номер;
			SendTask.Filename 			= РезультатВизуализации.ИмяФайла;
		КонецЕсли;	
	ИначеЕсли DocumentType  = "Invoice" Тогда
		Если МетодСервера("Модуль_ИнтеграцияУниверсальный","ЭтоКСФ", ДокументСсылка) Тогда
			
			SendTask = Organization.CreateSendTask("InvoiceCorrectionContent");
			ЗаполнитьКонтентДляInvoiceCorrection(SendTask.Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
			Если isTest ИЛИ Organization.AuthenticateType<>"Certificate" Тогда
				
				ЗаполнитьТестовогоПодписанта(SendTask.Content, Organization);
				
			КонецЕсли
			
		Иначе
			SendTask = Organization.CreateSendTask("InvoiceContent");
			ЗаполнитьКонтентДляInvoice(SendTask.Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта) ;
			Если isTest ИЛИ Organization.AuthenticateType<>"Certificate" Тогда
				
				ЗаполнитьТестовогоПодписанта(SendTask.Content, Organization);
				
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОбОснованииИСФ= МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьДанныеОбОснованииДляДиадок", ДокументСсылка);
		ДобавитьДанныеОбОснованииИСФВМассивInitialDocumentID(МассивInitialDocumentID, ДанныеОбОснованииИСФ);
		
	КонецЕсли;	
	
	SendTask.CounterAgentId = CounteragentId;
	
	Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) тогда 
		//установим ссылку на основной документ
		DocId = МетодСервера(,"Документ_2_DocumentID", ДокументСсылка);
		Если ЗначениеЗаполнено(DocID) тогда 
			SendTask.AddInitialDocument(DocId);
		Иначе
			вызватьисключение("Не определена ссылка на документ-основание для дополнительной печатной формы")
		КонецЕсли;	   
		//зададим идентификатор для поиска документа
		SendTask.CustomDocumentId = ПолучитьИдентификаторОтправленнойВПФ(DocId, ВнешняяПечатнаяФорма);
	Иначе	
		ЗаполнитьМассивSubordinateDocumentId(МассивSubordinateDocumentId, ДокументСсылка, DocumentType);
		Для Каждого SubordinateDocumentId Из МассивSubordinateDocumentId Цикл 
			SendTask.AddSubordinateDocument(SubordinateDocumentId);
		КонецЦикла;	
		
		ЗаполнитьМассивInitialDocumentID(МассивInitialDocumentID, ДокументСсылка, DocumentType);
		Для Каждого InitialDocumentId Из МассивInitialDocumentID Цикл
			SendTask.AddInitialDocument(InitialDocumentId);
		КонецЦикла;	
		
		SendTask.CustomDocumentId =строка(новый УникальныйИдентификатор()); 
	КонецЕсли;
	
	SendTask.DelaySend = (ПараметрыОтправкиНаСогласование <> Неопределено);
	
	SendTask.ToDepartmentId =  ReceiverDepartmentId;
	
	Возврат Новый Структура("SendTask, Organization", SendTask, Organization);
	
КонецФункции

&НаСервере
Процедура ОтразитьИзмененияВДокументе1С(Знач Организация, Знач ДокументСсылка, Знач DocumentType) Экспорт
	
	ТекстКомментарияДиадок = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
	
	Если типЗнч(ДокументСсылка) = тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Попытка 
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			записать = ложь;
			Реквизиты = ДокументОбъект.Метаданные().Реквизиты;
			если реквизиты.найти("Выставлен")<>неопределено тогда 
				ДокументОбъект.выставлен = истина;
				записать = истина;
			КонецЕсли;
			если реквизиты.найти("КодСпособаВыставления")<>неопределено тогда 
				ДокументОбъект.КодСпособаВыставления = 2;
				записать = истина;
			КонецЕсли;
			если реквизиты.найти("ДатаВыставления")<>неопределено тогда 
				ДокументОбъект.ДатаВыставления = ТекущаяДата();
				записать = истина;
			КонецЕсли;
			если реквизиты.найти("ВыставленВЭлектронномВиде")<>неопределено тогда 
				ДокументОбъект.ВыставленВЭлектронномВиде = Истина;
				записать = истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
				ДокументОбъект.Комментарий=	?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
				Записать = Истина;
			КонецЕсли;
			
			Если записать тогда 
				// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
				//Попытка
				//	ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				//Исключение
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
					ДокументОбъект.записать();
				// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
				//КонецПопытки;
				// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
			конецЕсли;
		исключение 
			сообщить("Не удалось установить данные о способе выставления для документа "+ ДокументСсылка);
		КонецПопытки;	 
		
	ИначеЕсли НЕ DocumentType = "NonformalizedProforma" Тогда
		
		Попытка 
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
				ДокументОбъект.Комментарий=	?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
				Записать = Истина;
			КонецЕсли;
			
			// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
			//Попытка
			//ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			//Исключение
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
				ДокументОбъект.записать();
			// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
			//КонецПопытки;
			// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
		исключение 
			сообщить("Не удалось обновить комментарий в документе "+ ДокументСсылка);
		КонецПопытки;	 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторОтправленнойВПФ(DocumentID, ВнешняяПечатнаяФорма)
	Возврат   DocumentID+":"+формат(ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма), "ЧГ=0");
КонецФункции

&НаСервере
Функция ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма)
	
	//получим список всех внешних печатных форм, которые исп в модуле 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Наименование = &Наименование
	|	И НЕ ДополнительныеСведения.Значение = """"";
	
	Запрос.УстановитьПараметр("Наименование", МетодСервера(,"ИдентификаторСвойстваНомерВПФ"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МаксЗначение = 0 ;
	Пока Выборка.Следующий() Цикл 
		ТекЗначение = Число(Выборка.Значение);
		Если Выборка.Объект = ВнешняяПечатнаяФорма Тогда 
			Возврат ТекЗначение;
		Иначе 
			МаксЗначение = Макс(ТекЗначение,МаксЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = МаксЗначение+1;
	
	МетодСервера(,"УстановитьЗначениеСвойства", ВнешняяПечатнаяФорма, МетодСервера(,"ИдентификаторСвойстваНомерВПФ"), формат(результат, "ЧГ=0"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеОтправкиДокумента(Знач Документ1С, Знач DocumentID, Знач BoxID, Знач DocumentType, Знач Организация) Экспорт
	
	МетодСервера(,"Установить_DocumentID_Для_Документ", Документ1С, DocumentID, BoxID, DocumentType = "NonformalizedProforma");
	
	Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ОтразитьСобытиеВыгрузкиВСчетФактуре(Документ1С, Организация);
	ИначеЕсли НЕ DocumentType = "NonformalizedProforma" Тогда
		ОтразитьСобытиеВыгрузкиВПрочемДокументе(Документ1С, Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВСчетФактуре(ДокументСсылка, Организация)
	
	ЗначенияРеквизитов= Новый Структура;
	ЗначенияРеквизитов.Вставить("Выставлен"					, Истина	   );
	ЗначенияРеквизитов.Вставить("КодСпособаВыставления"		, 2			   );
	ЗначенияРеквизитов.Вставить("ДатаВыставления"			, ТекущаяДата());
	ЗначенияРеквизитов.Вставить("ВыставленВЭлектронномВиде"	, Истина	   );
	
	ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
	Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
		ЗначенияРеквизитов.Вставить("Комментарий", ТекстКомментарияДиадок);
	КонецЕсли;
	
	Если МетодСервера(,"ЕстьРеквизитыИлиСвойстваОбъекта", ДокументСсылка, ЗначенияРеквизитов) Тогда
		
		ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
		
		Если ЗначенияРеквизитов.Свойство("Комментарий") И НЕ ПустаяСтрока(ДокументОбъект.Комментарий) Тогда
			ЗначенияРеквизитов.Комментарий= ДокументОбъект.Комментарий + " " + ЗначенияРеквизитов.Комментарий;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
			Если ДокументОбъект[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ДокументОбъект[КлючИЗначение.Ключ]= КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОбъект.Модифицированность() Тогда
			// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументСсылка, Организация)
	
	Если МетодСервера(,"ЕстьРеквизитИлиСвойствоОбъекта", ДокументСсылка, "Комментарий") Тогда
		
		ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
		
		Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
			
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
			
			ДокументОбъект.Комментарий= ?(НЕ ПустаяСтрока(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
			
			// { RGS TChubarova 16.05.2016 1:04:47 - TCS-0002911
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// } RGS TChubarova 16.05.2016 1:04:49 - TCS-0002911			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьТаблицуОтношенийОрганизацииКонтрагентов(Организация = Неопределено)
	
	//формируем мегазапрос
	//сначала получаем список организаций, подключенных к диадоку, для них берем ид-шники и настройки печатных форм
	//потом ищем свойства, которыми устанавливается "дружба" контрагентов с этими организациями 
	//затем получаем параметры этой дружбы 
	
	// Создание описателя типов для таблицы значений
	КС_строки = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС_строки); 
	
	запрос = новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство_ИдКонтрагента
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = &НаименованиеСвойстваЯщикКонтрагента";
	
	запрос.УстановитьПараметр("НаименованиеСвойстваЯщикКонтрагента", МетодСервера(,"ИдентификаторСвойстваЯщикКонтрагентаПрефикс"));
	таблицаСвойств = запрос.Выполнить().Выгрузить();
	таблицаСвойств.Колонки.Добавить("BoxID", ОписаниеТиповС);
	для каждого стр из таблицаСвойств цикл 
		стр.BoxID = прав(стр.Свойство_ИдКонтрагента, стрДлина(стр.Свойство_ИдКонтрагента)-стрДлина("ДДКонтр_"));
		//	стр.BoxID = лев(стр.BoxID, найти(стр.BoxID, "@")-1);
	КонецЦикла;	
	
	запрос = новый запрос(
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Организация,
	|	ДополнительныеСведения.Значение КАК ИдентификаторОрганизации,
	|	НастройкиПФДляТоваров.Значение КАК ПечатнаяФормаДляТоваров,
	|	НастройкиПФДляУслуг.Значение КАК ПечатнаяФормаДляУслуг
	|ПОМЕСТИТЬ ТаблицаДанныхОрганизаций
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляТоваров
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляТоваров.Объект
	|			И (НастройкиПФДляТоваров.Объект ССЫЛКА Справочник.Организации)
	|			И (НастройкиПФДляТоваров.Свойство.Наименование = &ПечатнаяФормаДляТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляУслуг
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляУслуг.Объект
	|			И (НастройкиПФДляУслуг.Объект ССЫЛКА Справочник.Организации)
	|			И (НастройкиПФДляУслуг.Свойство.Наименование = &ПечатнаяФормаДляУслуг)
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Организации
	|	И ДополнительныеСведения.Свойство.Наименование = &ИдентификаторОрганизации
	|	И ДополнительныеСведения.Значение <> """"
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДополнительныеСведения.Объект = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Свойство_ИдКонтрагента,
	|	ТЗ.BoxID
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Свойство_ИдКонтрагента,
	|	ВТ.BoxID,
	|	СвойстваОбъектов.Ссылка КАК Свойство_ИдПодразделенияКонтрагента,
	|	СвойстваОбъектов2.Ссылка КАК Свойство_НаименованиеПодразделенияКонтрагента
	|ПОМЕСТИТЬ ТаблицаСвойствКонтрагентов
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
	|		ПО (""ДДИДП_"" + ВТ.BoxID = СвойстваОбъектов.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов2
	|		ПО (""ДДНП_"" + ВТ.BoxID = СвойстваОбъектов2.Наименование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхОрганизаций.Организация,
	|	ТаблицаДанныхОрганизаций.ИдентификаторОрганизации,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляТоваров,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляУслуг,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСвойствИДКонтрагента.Объект КАК Контрагент,
	|	ТаблицаСвойствИДКонтрагента.Значение КАК ИдКонтрагента
	|ПОМЕСТИТЬ ТаблицаСКонтрагентами
	|ИЗ
	|	ТаблицаДанныхОрганизаций КАК ТаблицаДанныхОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствКонтрагентов КАК ТаблицаСвойствКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойствИДКонтрагента
	|			ПО ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента = ТаблицаСвойствИДКонтрагента.Свойство
	|				И (ТаблицаСвойствИДКонтрагента.Объект ССЫЛКА Справочник.Контрагенты)
	|				И (ТаблицаСвойствИДКонтрагента.Значение <> """")
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСКонтрагентами.Организация,
	|	ТаблицаСКонтрагентами.ИдентификаторОрганизации,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляТоваров, """") КАК ПечатнаяФормаДляТоваров,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляУслуг, """") КАК ПечатнаяФормаДляУслуг,
	|	ТаблицаСКонтрагентами.Свойство_ИдКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Контрагент,
	|	ТаблицаСКонтрагентами.ИдКонтрагента,
	|	ДополнительныеСведения.Значение КАК ИдПодразделенияКонтрагента,
	|	ДополнительныеСведения1.Значение КАК НаименованиеПодразделенияКонтрагента
	|ИЗ
	|	ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения.Объект
	|			И ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента = ДополнительныеСведения.Свойство
	|			И (ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения1.Объект
	|			И (ДополнительныеСведения1.Объект ССЫЛКА Справочник.Контрагенты)
	|			И ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента = ДополнительныеСведения1.Свойство");
	
	запрос.УстановитьПараметр("Организация",			  ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	запрос.УстановитьПараметр("ИдентификаторОрганизации", МетодСервера(,"ИдентификаторСвойстваЯщикОрганизации"));
	Запрос.УстановитьПараметр("ПечатнаяФормаДляТоваров",  МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляТоваров"));
	Запрос.УстановитьПараметр("ПечатнаяФормаДляУслуг",    МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляУслуг"));
	запрос.УстановитьПараметр("ТЗ", 					  ТаблицаСвойств);
	
	Результат =  Запрос.ВыполнитьПакет()[4].Выгрузить();
	
	Результат.колонки.добавить("Статус");
	Результат.колонки.добавить("ЭтоТестоваяОрганизация");
	Результат.колонки.добавить("ЭтоТестовыйКонтрагент");
	
	Возврат МетодСервера(,"ТаблицаЗначений_2_МассивСтруктур", Результат);
	
КонецФункции 

#КонецОбласти

# Область РАБОТА_С_КОНТЕНТОМ

# Область ОБЩИЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьContentПоСтруктуре(content, СтруктураДанных, описаниеСтруктурыДанных = "") экспорт 
	
	Для каждого Элемент из СтруктураДанных цикл 
		Если (Элемент.ключ="Totals") или (Элемент.ключ="TotalGrossQuantity") или (Элемент.ключ="TotalParcelsQuantity")  или (Элемент.ключ="TotalSum") 
			или (Элемент.ключ="TotalsInc")  или (Элемент.ключ="TotalsDec") тогда
			//итоги не инициализируем в объекте
		ИначеЕсли типЗнч(Элемент.значение) = тип("Структура") И Найти(Элемент.Ключ, "Ссылка") = 0 тогда
			
			Если (Элемент.ключ="AmountsDec") или (Элемент.ключ="AmountsInc") Тогда
				//итоги пропускаем	
			Иначе
				попытка
					ЭлементКонтента = Content[Элемент.ключ];
				Исключение
					ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(ЭлементКонтента, Элемент.Значение, описаниеСтруктурыДанных+"."+Элемент.ключ);
			КонецЕсли;
			
		ИначеЕсли Элемент.ключ = "Items"  тогда 
			для каждого стр из СтруктураДанных.items цикл 
				попытка 
					item =content.addItem();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(item, стр, описаниеСтруктурыДанных+".Items");
			конеццикла;
		ИначеЕсли Элемент.ключ = "PaymentDocuments"  тогда 
			для каждого стр из СтруктураДанных.PaymentDocuments цикл 
				попытка 
					PaymentDocument =content.addPaymentDocument();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(PaymentDocument, стр, описаниеСтруктурыДанных+".PaymentDocuments");
			конеццикла;
			
		ИначеЕсли Элемент.ключ = "StructedAdditionalInfos" Тогда 
			
			для каждого стр из СтруктураДанных.StructedAdditionalInfos цикл 
				попытка 
					AdditionalInfo =content.addStructedAdditionalInfo();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
			конеццикла;
			
		ИначеЕсли Элемент.ключ = "OriginalInvoices"  тогда 
			для каждого стр из СтруктураДанных.OriginalInvoices цикл 
				попытка 
					OriginalInvoice =content.addOriginalInvoice();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(OriginalInvoice, стр, описаниеСтруктурыДанных+".OriginalInvoices");
			конеццикла;
		ИначеЕсли (Элемент.ключ="AmountsDec") или (Элемент.ключ="AmountsInc") тогда 
			//итоги пропускаем
		ИначеЕсли (Элемент.ключ = "OriginalValues") или    (Элемент.ключ = "CorrectedValues") тогда 
			попытка
				ЭлементКонтента =  content[Элемент.ключ];
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
			КонецПопытки;
			ЗаполнитьContentПоСтруктуре(ЭлементКонтента,СтруктураДанных[Элемент.ключ], описаниеСтруктурыДанных+"."+Элемент.ключ);
			
		ИначеЕсли найти(Элемент.ключ, "Ссылка") = 0 И Элемент.Значение <> Неопределено тогда  
			попытка
				content[Элемент.ключ] =  ?(типЗнч(Элемент.Значение)=тип("Строка"), СокрЛП(СтрЗаменить(Элемент.Значение, Символы.НПП, "")), Элемент.Значение);
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
			КонецПопытки
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТестовогоПодписанта(Content, Organization)
	
	ФИОТекущегоПользователяДиадок = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization);
	
	Signer = Content.Signer;
	
	Signer.Surname		= ВыделитьСлово(ФИОТекущегоПользователяДиадок);
	Signer.FirstName	= ВыделитьСлово(ФИОТекущегоПользователяДиадок);
	Signer.Patronymic	= ВыделитьСлово(ФИОТекущегоПользователяДиадок);
	
КонецПроцедуры	 

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "XmlTorg12" Тогда
		Запрос = Новый запрос;
		Если метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования")<>неопределено тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
			|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Иначе 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ"
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", 	СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			docID =  МетодСервера(,"Документ_2_DocumentID", выборка.Ссылка);
			Если ЗначениеЗаполнено(docID) тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", СсылкаНаОбъект);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			
			docID =  МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект);
			
			Если ЗначениеЗаполнено(docID) тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;		
			
		ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" И МетодСервера(,"СуществуетОбъектМетаданных", "Документ.РеализацияТоваровУслуг.Реквизит.СчетНаОплатуПокупателю") Тогда 
		
			Запрос= Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.РеализацияТоваровУслуг КАК Т ГДЕ СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СсылкаНаОбъект);
			
			Выборка= Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				docID =  МетодСервера(,"Документ_2_DocumentID", выборка.Ссылка);
				Если ЗначениеЗаполнено(docID) тогда
					МассивSubordinateDocumentId.Добавить(docID);
				КонецЕсли;	 		
			КонецЦикла;

		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "Invoice" Тогда
		
		Запрос = Новый Запрос;
		если Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования")<>неопределено тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &Ссылка"
		КонецЕсли;							 
		
		Запрос.УстановитьПараметр("Ссылка", ссылкаНаОбъект);
		Выборка = запрос.Выполнить().Выбрать();
		
		Пока выборка.Следующий() Цикл
			docID =  МетодСервера(,"Документ_2_DocumentID", выборка.ДокументОснование);
			Если ЗначениеЗаполнено(docID) тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный","ЭтоНакладная", СсылкаНаОбъект) Тогда 
		
		//ищем ид счета в РНК
		docID =  МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект, Истина);
		Если ЗначениеЗаполнено(docID) тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
		
		
		//ищем ид счета в документе-основании
		Если (СсылкаНаОбъект.Метаданные().Реквизиты.Найти("СчетНаОплатуПокупателю")<>неопределено) и 
			ЗначениеЗаполнено(СсылкаНаОбъект.СчетНаОплатуПокупателю) 
			Тогда 
			docID =  МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект.СчетНаОплатуПокупателю, Истина);
			Если ЗначениеЗаполнено(docID) тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеОбОснованииИСФВМассивInitialDocumentID(МассивInitialDocumentID, ДанныеОбОснованииИСФ)
	
	Если ДанныеОбОснованииИСФ.Свойство("СФОснование")
		И ЗначениеЗаполнено(ДанныеОбОснованииИСФ.СФОснование) Тогда
		docID =  МетодСервера(,"Документ_2_DocumentID", ДанныеОбОснованииИСФ.СФОснование);
		Если ЗначениеЗаполнено(docID) тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделитьСлово(ИсходнаяСтрока)
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;	
КонецФункции

#КонецОбласти

# Область XmlAcceptanceCertificate

&НаКлиенте
Процедура ЗаполнитьКонтентДляXmlAcceptanceCertificate(Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта)
	
	XmlAcceptanceCertificateContent=	МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlAcceptanceCertificateContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
	СписокОшибок=						МетодКлиента("Модуль_Выгрузка","ВалидацияXmlAcceptanceCertificateContent", XmlAcceptanceCertificateContent);
	Если ЗначениеЗаполнено(СписокОшибок) тогда 
		ВызватьИсключение(СписокОшибок)
	КонецЕсли;	 
	ЗаполнитьContentПоСтруктуре(Content, XmlAcceptanceCertificateContent, "XmlAcceptanceCertificateContent");
	
КонецПроцедуры

&НаКлиенте
функция ВалидацияXmlAcceptanceCertificateContent(xmlAcceptanceCertificateContent) Экспорт
	
	списокОшибок = "";
	
	если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Date)=ложь  тогда 
		СписокОшибок = списокОшибок +  "<p>Не указана дата документа</p>";
	иначе 
		СписокОшибок = СписокОшибок + МетодКлиента("Модуль_Клиент","ПроверитьФорматДатыПрото", xmlAcceptanceCertificateContent.Date, "дата документа");
	конецЕсли;
	
	СписокОшибок = СписокОшибок + МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", xmlAcceptanceCertificateContent.Number, "номер документа", 256);
	
	если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Title)=ложь  тогда 
		СписокОшибок = списокОшибок +  "<p>Не указан заголовок документа</p>";
	иначе 
		СписокОшибок = СписокОшибок +  МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", xmlAcceptanceCertificateContent.Title, "заголовок документа", 2000);
	конецЕсли;
	
	если ( СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Seller)=ложь)  тогда 
		СписокОшибок = СписокОшибок +  "<p>отсутствуют данные о продавце</p>";
	Иначе 
		ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(xmlAcceptanceCertificateContent.Seller, 1);
		если ОшибкиКонтрагента <> "" тогда
			Поставщик =  xmlAcceptanceCertificateContent.Seller.Ссылка;
			СписокОшибок = СписокОшибок + 
			"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
			|"+ ОшибкиКонтрагента;
		КонецЕсли;
		
		параметрыПодписания =  МетодСервера(,"ПолучитьПараметрыПодписанияТ12вДиадок", xmlAcceptanceCertificateContent.Seller.Ссылка);
		Если ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) = Ложь Тогда
			СписокОшибок = СписокОшибок + 
			"<h3>Не настроены параметры подписания документа</h3>";
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
				СписокОшибок = списокОшибок +  "<p>Отсутствует должность подписанта</p>";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
				СписокОшибок = списокОшибок +  "<p>Отсутствует ФИО подписанта</p>";
			КонецЕсли;
			
			СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
			
		КонецЕсли;
		
	КонецЕсли; 
	
	//валидируем строки 
	номерСтроки = 0;
	
	СписокОшибокВКлассификаторах = "";
	ОшибкаЕИНеНайдена = ложь;
	ОшибкаЕИНеТотКод = ложь;
	СписокПроверенныхЕИ = новый СписокЗначений;
	
	Если (xmlAcceptanceCertificateContent.Items.Количество()=0) тогда
		СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
	Иначе
		
		для каждого Строка из xmlAcceptanceCertificateContent.Items	 цикл 
			НомерСтроки = НомерСтроки +1; 
			СписокОшибокСтроки = "";
			
			//если ЗначениеЗаполнено(строка.получить("UnitName"))=ложь тогда 
			//	СписокОшибокСтроки = СписокОшибокСтроки +
			//	"<p>Не указано наименование единицы измерения</p>
			//	|";
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(строка.UnitCode) ИЛИ ЗначениеЗаполнено(строка.UnitName) тогда 
				СписокОшибокВКлассификаторах = СписокОшибокВКлассификаторах+ ПроверитьЕИ( строка.СсылкаНаЕИ, сокрЛП(строка.UnitCode), СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
			КонецЕсли;	
			//Если строка.TaxRate = "##"	  тогда 
			//  СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
			//КонецЕсли;
			
			//Если ЗначениеЗаполнено(строка.Quantity) И (строка.Quantity<0)  тогда 
			//	СписокОшибокСтроки = СписокОшибокСтроки + 
			//	"<p>Количество не может быть отрицательным</p>
			//	|";
			//КонецЕсли;	
			
			если ЗначениеЗаполнено(строка.Total)=Ложь Тогда
				СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
			КонецЕсли;	
			
			если СписокОшибокСтроки <> "" тогда 
				СписокОшибок = СписокОшибок + 
				"<h3>Ошибки в строке "+номерСтроки+" табличной части</h3>
				|"+СписокОшибокСтроки;
			КонецЕсли;	
		Конеццикла;	
	КонецЕсли;
	
	
	Если 	СписокОшибокВКлассификаторах <> "" тогда 
		СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
		|<p>"+СписокОшибокВКлассификаторах+"</p>
		|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
	конецЕсли;	
	
	//если (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer"))=Ложь)   или (ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails"))=Ложь) тогда 
	//	ОшибкиВСтроке = ОшибкиВСтроке + "<p>не указано лицо, подписывающее документ</p>"
	//Иначе 
	//	SignerDetails  = AcceptanceCertificateSellerTitleInfo.получить("Signer").получить("SignerDetails");
	//	если (значениеЗаполнено(SignerDetails.получить("JobTitle"))=ложь) тогда 
	//		если ЗначениеЗаполнено(AcceptanceCertificateSellerTitleInfo.получить("Seller")) тогда 
	//		 	Поставщик =   AcceptanceCertificateSellerTitleInfo.получить("Seller").Получить("OrgInfo").получить("Ссылка");
	//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"+Поставщик.УникальныйИдентификатор()+""">не указана должность лица, подписывающего документ</a></p>"
	//		Иначе 
	//			списокОшибок = списокОшибок + "<p><a href=""НАСТРОЙКАПОДПИСИ:"++""">не указана должность лица, подписывающего документ</a></p>"
	//		КонецЕсли;	
	//	КонецЕсли;
	//	если (значениеЗаполнено(SignerDetails.получить("Surname"))=ложь)тогда 
	//		списокОшибок = списокОшибок + "<p>не указана фамилия лица, подписывающего документ</p>"
	//	КонецЕсли;
	//	если (значениеЗаполнено(SignerDetails.получить("FirstName"))=ложь) тогда 
	//		списокОшибок = списокОшибок + "<p>не указано имя лица, подписывающего документ</p>"
	//	КонецЕсли;
	//КонецЕсли;	
	
	списокОшибок = ОформитьОшибкиВHTML(списокОшибок, "При формировании файла акта выполненных работ обнаружены ошибки");
	
	возврат СписокОшибок;
	
КонецФункции	                                                         

#КонецОбласти

# Область InvoiceCorrection

&НаКлиенте
Функция ЗаполнитьКонтентДляInvoiceCorrection(Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта)
	
	InvoiceCorrectionContent= МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceCorrectionContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
	СписокОшибок= 			  МетодСервера(,"ВалидацияInvoiceCorrectionContent", InvoiceCorrectionContent, ДокументСсылка);
	Если ЗначениеЗаполнено(СписокОшибок) тогда
		ВызватьИсключение(СписокОшибок)
	КонецЕсли;	 
	ЗаполнитьContentПоСтруктуре(Content, InvoiceCorrectionContent, "InvoiceCorrectionContent");
	
КонецФункции	

#КонецОбласти

# Область Invoice

&НаКлиенте
Функция ЗаполнитьКонтентДляInvoice(Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта)
	
	InvoiceContent= МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceContent", ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения, ФИОПодписанта);
	СписокОшибок= 	МетодСервера(,"ВалидацияInvoiceContent", InvoiceContent, ДокументСсылка);
	Если ЗначениеЗаполнено(СписокОшибок) тогда
		ВызватьИсключение(СписокОшибок)
	КонецЕсли;	 
	ЗаполнитьContentПоСтруктуре(Content, InvoiceContent, "InvoiceContent");
	
КонецФункции	

#КонецОбласти

# Область Torg12

&НаКлиенте
Функция ЗаполнитьКонтентДляXmlTorg12(Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, НомерЗаказа, ДопСведения, ФИОПодписанта) 
	
	XmlTorg12Content= МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlTorg12Content", ДокументСсылка, ПараметрыОтправкиНаСогласование, НомерЗаказа, ДопСведения, ФИОПодписанта);
	СписокОшибок=	  МетодСервера(,"ВалидацияXmlTorg12Content", XmlTorg12Content);
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ВызватьИсключение(СписокОшибок);
	КонецЕсли; 
	ЗаполнитьContentПоСтруктуре(Content, XmlTorg12Content, "XmlTorg12Content");
	
КонецФункции	

&НаКлиенте
функция ПроверитьСтруктуруКонтрагентаДляТОРГ12(OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=ложь)
	//ТипСтруктуры =1 : юридический адрес
	//ТипСтруктуры =2 : фактический адрес
	
	СловарьWL= МетодСервера(,"ПолучитьСловарь");
	
	СписокОшибок = "";
	
	//проверяем наименование
	Если ЗначениеЗаполнено(OrganizationInfo.Name)=ложь тогда 
		СписокОшибок = СписокОшибок +"<p>не указано название организации</p>";
	ИначеЕсли (OrganizationInfo.IsSoleProprietor=истина) и (найти(OrganizationInfo.Name, " ")=0) тогда 
		СписокОшибок = СписокОшибок +"<p>не указано имя индивудуального предпринимателя</p>";
	Иначе 
		СписокОшибок = СписокОшибок + МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", OrganizationInfo.Name, "наименование контрагента", 1000, "с");
	КонецЕсли; 
	
	если не(ПроверкаДляСФ и (типСтруктуры=2) ) тогда 
		//проверяем ИНН
		Если ЗначениеЗаполнено(OrganizationInfo.Inn) тогда 
			ИНН = OrganizationInfo.Inn;
			если OrganizationInfo.IsSoleProprietor=ложь тогда 
				//ЮЛ
				Если стрДлина(ИНН)<>10 тогда 
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен иметь длину 10 цифр</p>
					|";		
				ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
					|";	
				ИначеЕсли лев(ИНН, 2)="00"	тогда 
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
					|";	
				ИначеЕсли  КонтрольнаяСуммаИННЮЛСовпадает(ИНН)  =ложь тогда
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
					|";	
				КонецЕсли;	
			Иначе 
				//ФЛ
				Если стрДлина(ИНН)<>12 тогда 
					списокОшибок = списокОшибок +"<p>ИНН контрагента-индивидуального предпринимателя ("+ИНН+") должен иметь длину 12 цифр</p>
					|";		
				ИначеЕсли ТолькоЦифры(ИНН) = ложь тогда
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
					|";	
				ИначеЕсли лев(ИНН, 2)="00"	тогда 
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
					|";	
				ИначеЕсли  КонтрольнаяСуммаИННФЛСовпадает(ИНН)  =ложь тогда
					списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
					|";	
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипСтруктуры = 1 тогда 
			списокОшибок = списокОшибок +"<p>ИНН контрагента не указан</p>";
			
		конецЕсли;	
		
		//проверяем КПП
		Если ЗначениеЗаполнено(OrganizationInfo.Kpp) тогда 
			КПП = OrganizationInfo.Kpp;
			Если стрДлина(КПП)<>9 тогда 
				списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен иметь длину 9 цифр</p>
				|";		
			ИначеЕсли ТолькоЦифры(КПП) = ложь тогда
				списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен состоять из цифр</p>
				|";	
			ИначеЕсли лев(ИНН, 2)="00"	тогда 
				списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") не должен начинаться с двух нулей</p>
				|";	
			КонецЕсли;
		ИначеЕсли OrganizationInfo.IsSoleProprietor=ложь
			И ПроверкаДляСФ тогда
			списокОшибок = списокОшибок +"<p>КПП контрагента не указано</p>";
		КонецЕсли;
	КонецЕсли;
	//проверяем адрес
	ТекстОшибкиАдрес = "";
	Если СтруктураКонтентаЗаполнена(OrganizationInfo.Address) тогда 
		Address = OrganizationInfo.Address;
		
		если Address.IsForeign=ложь тогда 
			ZipCode  = Address.ZipCode;
			Если ЗначениеЗаполнено( ZipCode) = ложь тогда 
			Иначеесли СтрДлина(сокрЛП(ZipCode))<>6 тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен иметь длину 6 цифр</p>
				|";		
			ИначеЕсли  ТолькоЦифры(сокрЛП(ZipCode)) = ложь тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен состоять из цифр</p>
				|";	
			КонецЕсли; 
			
			Region  =Address.RegionCode;
			Если ЗначениеЗаполнено(Region)=ложь тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан регион</p>
				|";		
			ИначеЕсли Region = "##" тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Наименование региона указано не по классификатору</p>
				|";		
			ИначеЕсли (стрДлина(Region)>2)  или (стрДлина(Region)=0) тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен иметь длину 2 символа</p>
				|";		
			ИначеЕсли ТолькоЦифры(Region)=ложь тогда 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен состоять из цифр</p>
				|";		
			КонецЕсли;	
			
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Territory,"наименование района", 50, "с");
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.City,"наименование города", 50, "с");
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Locality,"наименование населенного пункта", 50, "с");
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Street,"наименование улицы", 50, "с");
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Building,"номер дома", 20);
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Block,"номер корпуса", 20);
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", Address.Apartment,"номер квартиры", 20);
			
		ИначеЕсли СтруктураКонтентаЗаполнена(Address) тогда 
			Country  = Address.CountryCode;
			AddressName  = Address.AddressText;
			
			Если ЗначениеЗаполнено(Country) тогда 
				Если стрДлина(Country)<>3 тогда 
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен иметь длину 3 символа</p>
					|";		
				ИначеЕсли толькоцифры(Country)=ложь тогда 
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен состоять из цифр</p>
					|";
				ИначеЕсли Country = "643" Тогда
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Российский адрес задан как иностранный</p>
					|";
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(AddressName) = ложь  тогда 
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан адрес внутри страны</p>
					|";	
				Иначе 
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", AddressName,"строковое представление адреса", 255, "с");
				КонецЕсли;	
			Иначе 
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Адрес должен быть указан как ""Российский адрес""</p>
				|";	
			КонецЕсли;	
		Иначе 
			ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
		КонецЕсли;	
	ИначеЕсли ПроверкаДляСФ тогда	
		ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
	КонецЕсли;	
	
	Если ТекстОшибкиАдрес <> "" тогда 
		списокОшибок = списокОшибок + "<p><b>Ошибки в "+?(ТипСтруктуры=1, "юридическом", "фактическом")+" адресе:</b></p>"+ТекстОшибкиАдрес;
	КонецЕсли; 
	
	если ПроверкаДляСФ=ложь тогда
		
		Если ЗначениеЗаполнено(OrganizationInfo.Okopf) тогда 
			ОКОПФ = OrganizationInfo.Okopf;
			Если стрДлина(ОКОПФ)<>2 тогда 
				списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
				|";		
			ИначеЕсли ТолькоЦифры(ОКОПФ) = ложь тогда
				списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
				|";	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(OrganizationInfo.Okpo) тогда 
			ОКПО = OrganizationInfo.Okpo;
			Если стрДлина(ОКПО)<>8 и стрДлина(ОКПО)<>10 тогда 
				списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен иметь длину 8 или 10 цифр</p>
				|";		
			ИначеЕсли ТолькоЦифры(ОКПО) = ложь тогда
				списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен состоять из цифр</p>
				|";	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(OrganizationInfo.Phone) тогда 
			ОшибкиТелефона = МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", OrganizationInfo.Phone, "Номер телефона контрагента", 20);
			Если ОшибкиТелефона <>"" тогда 
				списокОшибок = списокОшибок +  ОшибкиТелефона +"<p>Для передачи через "+СловарьWL.НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(OrganizationInfo.Fax) тогда 
			ОшибкиФакса = МетодКлиента("Модуль_Клиент","ПроверитьМаксимальнуюДлинуПрото", OrganizationInfo.Fax, "Номер факса контрагента", 20);
			Если ОшибкиФакса <>"" тогда 
				списокОшибок = списокОшибок +  ОшибкиФакса +"<p>Для передачи через "+СловарьWL.НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(OrganizationInfo.BankId) тогда 
			BankId = OrganizationInfo.BankId;
			Если стрДлина(BankId)<>9 тогда 
				списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен иметь длину 9 цифр</p>
				|";		
			ИначеЕсли ТолькоЦифры(BankId) = ложь тогда
				списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен состоять из цифр</p>
				|";	
			КонецЕсли;
			
		КонецЕсли;
		
	конецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции	

#КонецОбласти

#КонецОбласти

# Область ФОРМИРОВАНИЕ_ПЕЧАТНЫХ_ФОРМ

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуСчета", ДокументСсылка);
	
КонецФункции

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАктаСверки", ДокументСсылка);
	
КонецФункции

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка)
	
	Возврат МетодСервера(,"ПолучитьВнешнююПечатнуюФормуАкта", ДокументСсылка);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуАктаВыполненныхРабот(ДокументСсылка)
	
	Результат=		СформироватьФайлАктавыполненныхРабот(ДокументСсылка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуСчета(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Результат=	СформироватьФайлСчетаНаОплату(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПечатнуюФормуАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Результат =	СформироватьФайлАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаменитьНедопустимыеСимволы(НомерДокумента)
	
	НедопустимыеЗнаки = "\/:*?""<>|";
	Пока СтрДлина(НедопустимыеЗнаки)>0 Цикл
		ТекСимвол = Лев(НедопустимыеЗнаки,1);
		Если Найти(НомерДокумента,ТекСимвол)<>0 Тогда
			НомерДокумента = СтрЗаменить(НомерДокумента,ТекСимвол,"_");
		КонецЕсли;
		НедопустимыеЗнаки = Сред(НедопустимыеЗнаки,2);
	КонецЦикла;
	
	Возврат НомерДокумента;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка)
	Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормСчета", ДокументСсылка);
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормАктаСверки(Знач СсылкаНаОбъект)
	Возврат МетодСервера(,"ПолучитьСтруктуруПечатныхФормАктаСверки", СсылкаНаОбъект);
КонецФункции

&НаКлиенте
Функция СформироватьФайлСчетаНаОплату(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка)) Тогда
		Результат= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуСчетаНаОплату", ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Иначе
		Результат= ПолучитьСтруктуруПечатныхФормСчета(ДокументСсылка);
	КонецЕсли;
	
	МетаСчета= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьМетуСчетаНаОплату", ДокументСсылка);
	Для каждого ЭлементМетыСчета Из МетаСчета Цикл
		Результат.Вставить(ЭлементМетыСчета.Ключ, ЭлементМетыСчета.Значение);
	КонецЦикла;
	
	Попытка
		
		ИмяВременногоФайла=		ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Счет №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьФайлАктаСверки(ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта)
	
	Если НЕ ЗначениеЗаполнено(ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка)) Тогда
		Результат= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьПечатнуюФормуАктаСверки", ДокументСсылка, ПараметрыОтправкиНаСогласование, ФИОПодписанта);
	Иначе
		Результат= ПолучитьСтруктуруПечатныхФормАктаСверки(ДокументСсылка);
	КонецЕсли;
	
	МетаАктаСверки=	МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьМетуАктаСверки", ДокументСсылка);
	Для каждого ЭлементМетыАктаСверки Из МетаАктаСверки Цикл
		Результат.Вставить(ЭлементМетыАктаСверки.Ключ, ЭлементМетыАктаСверки.Значение);
	КонецЦикла;
	
	Попытка
		
		ИмяВременногоФайла=		ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Акт сверки №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка)
	
	Возврат	МетодСервера(,"ПолучитьСтруктуруПечатныхФормАкта", ДокументСсылка);
	
КонецФункции

&НаКлиенте
Функция СформироватьФайлАктавыполненныхРабот(ДокументСсылка)
	
	Результат= ПолучитьСтруктуруПечатныхФормАкта(ДокументСсылка);
	
	МетаАкта= МетодСервера("Модуль_ИнтеграцияУниверсальный","СформироватьМетуАктаВыполненныхРабот", ДокументСсылка);
	Для каждого ЭлементМетыАкта Из МетаАкта Цикл
		Результат.Вставить(ЭлементМетыАкта.Ключ, ЭлементМетыАкта.Значение);
	КонецЦикла;
	
	Попытка
		
		ИмяВременногоФайла=		ПолучитьИмяВременногоФайла("pdf");
		Результат.Таблица.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		
		ИмяФайла = "Акт №" + ЗаменитьНедопустимыеСимволы(Результат.Номер) + " от " + Формат(Результат.Дата, "ДЛФ=Д") + ".pdf";
		Результат.Вставить("ИмяФайла",	ИмяФайла);
		
	Исключение
		
		Результат.Вставить("СписокОшибок", Результат.СписокОшибок + Символы.ПС + ОписаниеОшибки());
		
		Результат.Вставить("АдресДвоичныхДанныхФайла", 	"");
		Результат.Вставить("ИмяФайла",	"");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ФУНКЦИИ_И_ПРОЦЕДУРЫ

&НаКлиенте
функция	ПроверитьЕИ(ЕИ, КодЕИ, СписокПроверенныхЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод, ЭтоАкт = Ложь)
	
	ОКЕИ= МетодКлиента("Модуль_Клиент","КлассификаторыДляДиадок").ОКЕИ;
	
	СписокНайденныхКодовЕИ = новый СписокЗначений;
	
	НайденнаяВПроверенныхЕИ=	списокПроверенныхЕИ.НайтиПоЗначению(ЕИ.Ссылка);
	Если ((Не ЭтоАкт) И (ЗначениеЗаполнено(кодЕИ) И  НайденнаяВПроверенныхЕИ = неопределено))
		ИЛИ ((ЭтоАкт) И (ЗначениеЗаполнено(ЕИ) И НЕ ПустаяСтрока(ЕИ.Наименование) И НайденнаяВПроверенныхЕИ = неопределено)) Тогда
		
		списокПроверенныхЕИ.Добавить(ЕИ.Ссылка);
		
		нашлиЕИ = ложь;
		СписокНайденныхЕИ = новый СписокЗначений;
		Для каждого запись из ОКЕИ цикл 
			если Эквивалентны(запись.НаименованиеПолное, ЕИ.наименование) или Эквивалентны(Запись.НаименованиеКраткое, ЕИ.наименование) тогда 
				если запись.код = КодЕИ тогда 
					НашлиЕИ = истина  ;
				ИначеЕсли    	СписокНайденныхКодовЕИ.НайтиПоЗначению(запись.код )=неопределено тогда 
					СписокНайденныхЕИ.Добавить(запись);
					СписокНайденныхКодовЕИ.Добавить(запись.код );
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		если НашлиЕИ=Ложь тогда
			Если НЕ ЧисловойКодЕИ(КодЕИ) Тогда
				возврат "
				|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+" не корректный</br>";
				//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
				ОшибкаЕИНеТотКод = истина;
			ИначеЕсли  СписокНайденныхЕИ.Количество()=0 тогда
				возврат "
				|Единица измерения  «<a href=""ЕДИНИЦА:"  + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>»
				|не найдена в <b>ОКЕИ</b></br>";
				//		|не найдена в <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a></br>";
				ОшибкаЕИНеНайдена = истина;
			ИначеЕсли 	 СписокНайденныхЕИ.Количество()=1 тогда
				возврат "
				|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
				|не соответствует коду по <b>ОКЕИ</b> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
				//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> - "+СписокНайденныхЕИ[0].Значение.код+"</br>";
				ОшибкаЕИНеТотКод = истина;
			Иначе 
				//	сообщить(еи);
				//	сообщить(ЕИ.уникальныйИдентификатор());
				списокОш =  "
				|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.уникальныйИдентификатор+""">"+ЕИ.Наименование+"</a>» - "+КодЕИ+"
				|не соответствует коду по <b>ОКЕИ</b> </br>";
				//|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> </br>";
				для каждого элемент из СписокнайденныхЕИ цикл 
					списокОш = списокОш+ "
					|Единице измерения «"+Элемент.Значение.НаименованиеПолное+"», ("+Элемент.Значение.НаименованиеКраткое+") соответствует код ОКЕИ "+ Элемент.Значение.код+"</br>";
				КонецЦикла;	
				возврат списокОш;
				ОшибкаЕИНеТотКод = истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Эквивалентны(стр1, стр2) 
	Если (ЗначениеЗаполнено(стр1)=Ложь) или (ЗначениеЗаполнено(стр2)=Ложь) тогда 
		возврат ложь
	иначе 	
		возврат (врег(стрЗаменить(сокрЛП(стр1), ".", ""))=врег(стрЗаменить(сокрЛП(стр2), ".","") ))
	конецЕсли;	
КонецФункции

&НаКлиенте
Функция СтрокаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
	если ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод=ложь тогда
		возврат "наименования"
	ИначеЕсли 	ОшибкаВалютыНеНайдена=ложь и   ОшибкаВалютыНеТотКод тогда
		возврат "коды"
	ИначеЕсли 	ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод тогда
		возврат "наименования и коды"
	Иначе 
		возврат ""
	конецЕсли;	
	
КонецФункции

&НаКлиенте
Функция ОформитьОшибкиВHTML(ОшибкиСтруктуры, Заголовок)
	
	Если ОшибкиСтруктуры <> "" тогда 
		
		Возврат  
		
		"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|
		|<html xmlns=""http://www.w3.org/1999/xhtml"">
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
		|<style type=""text/css"">
		| h3 {
		|  margin-top: 0.5em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		| p {
		|  margin-top: 0.2em; /* Отступ сверху */
		|  margin-bottom: 0em; /* Отступ снизу */
		| }
		|</style>
		|</head>
		|<body>
		|<h2>"+Заголовок+"</h2>"+ОшибкиСтруктуры+"
		|</body>
		|</html>";
		
	Иначе 
		возврат "";
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(строкаПроверки)
	ПослеЗамены = стрЗаменить(строкаПроверки, "1", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "2", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "3", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "4", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "5", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "6", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "7", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "8", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "9", "");
	ПослеЗамены = стрЗаменить(ПослеЗамены 	, "0", "");
	
	возврат (послеЗамены = "");
	
Конецфункции

&НаКлиенте
функция КонтрольнаяСуммаИННЮЛСовпадает(ИНН)
	КС = умножитьВектора(ИНН, "2:4:10:3:5:9:4:6:8:");
	возврат ((кс % 11) % 10)=число(сред(ИНН, 10, 1))
конецфункции

&НаКлиенте
функция КонтрольнаяСуммаИННФЛСовпадает(ИНН)
	КС1 = УмножитьВектора(ИНН, "7:2:4:10:3:5:9:4:6:8:");
	КС2 = УмножитьВектора(ИНН, "3:7:2:4:10:3:5:9:4:6:8:");
	возврат  (((кс1 % 11) % 10)=число(сред(ИНН, 11, 1))) и (((кс2 % 11) % 10)=число(сред(ИНН, 12, 1)))
КонецФункции

&НаКлиенте
Функция ЧисловойКодЕИ(Знач КодЕИ)
	
	КодЕИ=	СтрЗаменить(КодЕИ, "0", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "1", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "2", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "3", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "4", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "5", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "6", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "7", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "8", "");
	КодЕИ=	СтрЗаменить(КодЕИ, "9", "");
	
	Если СокрЛП(КодЕИ) = "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
функция УмножитьВектора(ИНН, Множители)
	Результат = 0;
	н=0;
	пока найти(Множители, ":")>0 цикл 
		н = н+1;
		Множитель = число(лев(Множители, найти(Множители, ":")-1));
		Множители = прав(Множители, СтрДлина(Множители)- найти(Множители, ":"));
		
		Результат = Результат + Множитель * число(сред(ИНН, н, 1));
	КонецЦикла;	
	
	возврат Результат;
	
КонецФункции

&НаКлиенте		
функция СтруктураКонтентаЗаполнена(СтруктураКонтента)
	
	СтруктураКонтентаЗаполнена= Ложь;
	
	Для каждого КлючИЗначение Из СтруктураКонтента Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			СтруктураКонтентаЗаполнена= СтруктураКонтентаЗаполнена(КлючИЗначение.Значение);
		Иначе
			СтруктураКонтентаЗаполнена= КлючИЗначение.Значение <> Ложь И ЗначениеЗаполнено(КлючИЗначение.Значение);
		КонецЕсли;
		
		Если СтруктураКонтентаЗаполнена Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтруктураКонтентаЗаполнена;
	
КонецФункции

#КонецОбласти

