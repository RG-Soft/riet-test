
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

// Все функции и процедуры тела модуля должны быть экспортными и добавлены в соответствующую структуру!

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, <Имя функции>, <Параметры строкой>, <Вариант кэширования>, <Переопределение>);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НеИспользовать", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяВыполнения", Истина);
	//Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПримерФункции", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", "НаВремяСеанса", Истина);
	//...
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ТаблицаЗначений_2_МассивСтруктур", "ТаблЗнач", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента", "ДоговорКонтрагента,Контрагент, Организация, МассивВидовДоговоров", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента", "ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "УстановитьДоговорВСчетеФактуреДляДиадок", "ДоговорКонтрагента, Контрагент, Организация", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьВалютуОснованияСчетаФактуры", "ДокументОснование", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПараметрыСчетаФактурыДиадок", "СчетФактура", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПредставлениеКППКонтрагента", "Контрагент", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьДоговорКонтрагентаБГУ", "Организация, Контрагент", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивДанныхСтрок", "ДокументОснование", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьПредставлениеСФ", "Ссылка, ВидСчетаФактуры", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПолучитьМассивРасшифровкиПлатежа", "ДокументСсылка", "НеИспользовать", Ложь);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "СоздатьНовыйСчетФактуру", "МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК", "НеИспользовать", Истина);
	Платформа.ДобавитьФункциюВМанифест(СтруктураМетодов, "ПредупреждатьОСтаромФормате", "ConfirmationDate, InvoiceVersion", "НеИспользовать", Истина);
	
	Возврат СтруктураМетодов;
	
КонецФункции

&НаКлиенте
Функция ПроцедурыМодуля() Экспорт
	
	СтруктураМетодов= Новый Структура;
	
	// Шаблон: Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, <Имя процедуры>, <Параметры строкой>, <Переопределение>);
	//Платформа.ДобавитьПроцедуруВМанифест(СтруктураМетодов, "ПримерПроцедуры", "ОбязательныйПараметр, НеобязательныйПараметр= Неопределено", Истина);
	//...
	
	Возврат СтруктураМетодов;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ТаблицаЗначений_2_МассивСтруктур(ТаблЗнач)
	Результат = Новый Массив;
	СтрокаКлючей = "";
	Для Каждого Колонка из ТаблЗнач.Колонки Цикл
		СтрокаКлючей = СтрокаКлючей +?(ПустаяСтрока(СтрокаКлючей),"",",")+ Колонка.Имя;
	КонецЦикла;                                                        
	Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") тогда
		
		Для Каждого Стр Из ТаблЗнач Цикл
			ЭлементСписка = Новый  Структура(СтрокаКлючей);
			ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
			Результат.Добавить(ЭлементСписка);             
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента(ДоговорКонтрагента,
			Контрагент, Организация, МассивВидовДоговоров)
	Возврат Вычислить("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
			|Контрагент, Организация, МассивВидовДоговоров)");
КонецФункции

&НаСервере
Функция РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров)
	Возврат Вычислить("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров)");
КонецФункции


&НаКлиенте
Функция УстановитьДоговорВСчетеФактуреДляДиадок(ДоговорКонтрагента, Контрагент, Организация)
	
	МассивВидовДоговоров=	Новый Массив;
	
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	
	Попытка
		БухгалтерскийУчетПереопределяемыйУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров);
	Исключение
		РаботаСДоговорамиКонтрагентовБПУстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, МассивВидовДоговоров);	
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуОснованияСчетаФактуры(ДокументОснование)
	
	Возврат ДокументОснование.Валюта;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыСчетаФактурыДиадок(СчетФактура)
	
	ТабДокументыОснования=	СчетФактура.ДокументыОснования.Выгрузить();;
	
	НоваяСтруктура=	Новый Структура;
	НоваяСтруктура.Вставить("Ссылка", СчетФактура.Ссылка);
	НоваяСтруктура.Вставить("ВидСчетаФактуры", СчетФактура.ВидСчетаФактуры);
	НоваяСтруктура.Вставить("ДокументыОснования", ТабДокументыОснования);
	
	Попытка
		СтруктураПараметров= Вычислить("УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(НоваяСтруктура)");
	Исключение
		СтруктураПараметров= Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(НоваяСтруктура)");
	КонецПопытки;

	Если НЕ СтруктураПараметров = Неопределено Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
				СтруктураПараметров.Удалить(Параметр.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеКППКонтрагента(Контрагент)

	ЗначениеКППКонтрагента=	Вычислить("ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, ""КПП"")");
	
	Возврат Вычислить("СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'КПП %1'""), ?(ПустаяСтрока(ЗначениеКППКонтрагента), ""<не задан>"", ЗначениеКППКонтрагента))");
	
КонецФункции

&НаСервере
Функция ПолучитьДоговорКонтрагентаБГУ(Организация, Контрагент)
	
	СписокВидовДоговоров=	МетодСервера(,"ПолучитьСписокВидовДоговоров");
	
	ВыборкаДоговоров=		МетодСервера(,"ВыбратьОсновнойДоговорКонтрагента", Контрагент, Организация, СписокВидовДоговоров);
	Если ВыборкаДоговоров.Следующий() Тогда
		Если ВыборкаДоговоров.ПриоритетДоговора = 1 Тогда
			Возврат ВыборкаДоговоров.Договор;
		КонецЕсли;
	Иначе
		Возврат Вычислить("Справочники.Договоры.ПустаяСсылка()");
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьМассивДанныхСтрок(ДокументОснование)
	
	ТабДанные=	ДокументОснование.Материалы.Выгрузить();
	Возврат ТаблицаЗначений_2_МассивСтруктур(ТабДанные);
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСФ(Ссылка, ВидСчетаФактуры)
	
	Возврат Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Ссылка, ВидСчетаФактуры);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивРасшифровкиПлатежа(ДокументСсылка)
	
	МассивРасшифровки=	Новый Массив();
	
	Для каждого СтрокаРасшифровки Из ДокументСсылка.РасшифровкаПлатежа Цикл
		
		СтруктураПлатежа=	Новый Структура();
		
		СтруктураПлатежа.Вставить("Сумма", СтрокаРасшифровки.СуммаПлатежа);
		СтруктураПлатежа.Вставить("СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		СтруктураПлатежа.Вставить("СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);

		МассивРасшифровки.Добавить(СтруктураПлатежа);
		
	КонецЦикла;
	
	Возврат МассивРасшифровки;
	
КонецФункции

&НаКлиенте
функция СоздатьНовыйСчетФактуру(МодульВызова, Контрагент, Организация, Document, МассивСсылокРНК) Экспорт
	
	НаАванс=	Ложь;
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		ФормаСФ=						ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта");
		Попытка                            
			ФормаСФ.Объект.ТипСчетаФактуры = ПредопределенноеЗначение("Перечисление.ТипыПолученныхСчетовФактур.НаПоступление");
		Исключение
		КонецПопытки;
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		
		Если МассивСсылокРНК.Количество() = 1 Тогда
			ДокументОснование=	МассивСсылокРНК[0];
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				НаАванс=	Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НаАванс = Истина Тогда
			ФормаСФ=	ПолучитьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументаНаАванс");
			ФормаСФ.Объект.ВидСчетаФактуры=		ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАванс");
		Иначе
			ФормаСФ=	ПолучитьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументаНаПоступление");
			ФормаСФ.Объект.ВидСчетаФактуры=	ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаПоступление");
		КонецЕсли;
		
	Иначе
		ФормаСФ=	ПолучитьФорму("Документ.СчетФактураПолученный.ФормаОбъекта");
	КонецЕсли;
	
	Если Document.Direction = "Inbound" Тогда
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			ФормаСФ.Объект.Номер=						Document.DocumentNumber;
			ФормаСФ.Объект.Дата=						Document.DocumentDate;
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			ФормаСФ.Объект.НомерВходящегоДокумента= 	Document.DocumentNumber;
			ФормаСФ.Объект.ДатаВходящегоДокумента= 		Document.DocumentDate;
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			ФормаСФ.Объект.НомерПервичногоДокумента= 	Document.DocumentNumber;
			ФормаСФ.Объект.ДатаПервичногоДокумента= 	Document.DocumentDate;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		
		Для Каждого СсылкаНаРНК Из МассивСсылокРНК Цикл
			СтрокаОснования=					ФормаСФ.Объект.ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование=	СсылкаНаРНК;
		КонецЦикла;

		ФормаСФ.Объект.Организация=		Организация;
		ФормаСФ.Объект.Контрагент=		Контрагент;
		
		ФормаСФ.Объект.ПолученВЭлектронномВиде=					Истина;
		Если ФормаСФ.Объект.Свойство("ДатаПолучения") Тогда
			ФормаСФ.Объект.ДатаПолучения=	ТекущаяДата();
		Иначе
			ФормаСФ.Объект.Дата=			ТекущаяДата();
		КонецЕсли;
		
		Если НЕ ФормаСФ.Элементы.Найти("Получен") = Неопределено Тогда
			ФормаСФ.Получен=	Истина;
		КонецЕсли;
		
		Если НЕ ФормаСФ.Элементы.Найти("ДатаПолучения") = Неопределено Тогда
			ФормаСФ.Элементы.ДатаПолучения.Доступность=	Истина;
		КонецЕсли;
		
		Если НЕ ФормаСФ.Элементы.Найти("ПолученВЭлектронномВиде") = Неопределено Тогда
			ФормаСФ.Элементы.ПолученВЭлектронномВиде.Доступность=	Истина;
		КонецЕсли;
		
		Если ФормаСФ.Объект.ДокументыОснования.Количество() = 1 Тогда
			ФормаСФ.Объект.Валюта=											ПолучитьВалютуОснованияСчетаФактуры(ФормаСФ.Объект.ДокументыОснования[0].ДокументОснование);
			ФормаСФ.ДокументОснование=										ФормаСФ.Объект.ДокументыОснования[0].ДокументОснование;
			ФормаСФ.Элементы.СтраницыДокументыОснования.ТекущаяСтраница=	ФормаСФ.Элементы.СтраницаДокументОснование;
		ИначеЕсли ФормаСФ.Объект.ДокументыОснования.Количество() > 1 Тогда
			ФормаСФ.Объект.Валюта=											ПолучитьВалютуОснованияСчетаФактуры(ФормаСФ.Объект.ДокументыОснования[0].ДокументОснование);
			ФормаСФ.Элементы.СтраницыДокументыОснования.ТекущаяСтраница=	ФормаСФ.Элементы.СтраницаДокументыОснования;
			ФормаСФ.ТекстДокументыОснования = "";
			Для Каждого СтрокаТаблицы Из ФормаСФ.Объект.ДокументыОснования Цикл
				ФормаСФ.ТекстДокументыОснования = ФормаСФ.ТекстДокументыОснования + ?(ФормаСФ.ТекстДокументыОснования="","",", ") + СтрокаТаблицы.ДокументОснование;
			КонецЦикла;
		Иначе
			ФормаСФ.Элементы.СтраницыДокументыОснования.ТекущаяСтраница=	ФормаСФ.Элементы.СтраницаДокументОснованиеНеУказан;
		КонецЕсли;

		ФормаСФ.Объект.КодВидаОперации=	"01";
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		
		Если НаАванс = Истина Тогда
			ФормаСФ.Объект.ДокументОснование=	ДокументОснование;
			МассивРасшифровокПлатежа=	ПолучитьМассивРасшифровкиПлатежа(ДокументОснование);
			Для каждого ЭлементРасшифровки Из МассивРасшифровокПлатежа Цикл
				СтрокаАванса=			ФормаСФ.Объект.Авансы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАванса, ЭлементРасшифровки);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СсылкаНаРНК Из МассивСсылокРНК Цикл
			СтрокаОснования=					ФормаСФ.Объект.ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование=	СсылкаНаРНК;
		КонецЦикла;
		
		ФормаСФ.Объект.КодСпособаПолучения=		2;
		
		СтруктураДанныхСФ=	Новый Структура;
		СтруктураДанныхСФ.Вставить("Ссылка", 				ФормаСФ.Объект.Ссылка);
		СтруктураДанныхСФ.Вставить("ВидСчетаФактуры", 		ФормаСФ.Объект.ВидСчетаФактуры);
		СтруктураДанныхСФ.Вставить("ДокументыОснования", 	ФормаСФ.Объект.ДокументыОснования);
		
		Структура=	ПолучитьПараметрыСчетаФактурыДиадок(СтруктураДанныхСФ);
		ЗаполнитьЗначенияСвойств(ФормаСФ.Объект, Структура);
		
		ФормаСФ.Элементы.ДоговорКонтрагента.Доступность=	ЗначениеЗаполнено(ФормаСФ.Объект.Контрагент);
		
		Если НЕ ФормаСФ.Элементы.Найти("ПредставлениеКППКонтрагента") = Неопределено Тогда
			ФормаСФ.ПредставлениеКППКонтрагента=	ПолучитьПредставлениеКППКонтрагента(ФормаСФ.Объект.Контрагент);
		КонецЕсли;
		
		ВычетНеОтражается=	ФормаСФ.Объект.Исправление ИЛИ ФормаСФ.НаОснованииОтчетаКомитенту;
	 	ФормаСФ.Элементы.НДСПредъявленКВычету.Доступность=	Вычислить("УчетНДСКлиентСервер.Версия(ФормаСФ.Объект.Дата)") >1 И НЕ ВычетНеОтражается;
		Если ФормаСФ.Элементы.НДСПредъявленКВычету.Доступность Тогда
			ФормаСФ.Объект.НДСПредъявленКВычету=		Истина;
		КонецЕсли;
		
		Если НЕ ФормаСФ.Элементы.Найти("ЗаголовокПродавец") = Неопределено Тогда
			ФормаСФ.Элементы.ЗаголовокПродавец.Доступность=	ЗначениеЗаполнено(ФормаСФ.Объект.ДоговорКонтрагента);
		КонецЕсли;
		
		Если НЕ ФормаСФ.Элементы.Найти("Продавец") = Неопределено Тогда
			ФормаСФ.Элементы.Продавец.Доступность=			ЗначениеЗаполнено(ФормаСФ.Объект.ДоговорКонтрагента);
		КонецЕсли;

		Если НЕ ФормаСФ.Элементы.Найти("СтраницыПродавец") = Неопределено Тогда
			ФормаСФ.Элементы.СтраницыПродавец.ТекущаяСтраница=	ФормаСФ.Элементы.СтраницаВидДоговораДругой;
		КонецЕсли;
		
		ФормаСФ.Объект.Организация= Организация;
		ФормаСФ.Объект.Контрагент=	Контрагент;
		
		ПредставлениеСФ=	ПолучитьПредставлениеСФ(ФормаСФ.Объект.Ссылка, ФормаСФ.Объект.ВидСчетаФактуры).СчетФактураПредставление;
		ФормаСФ.Заголовок=	ПредставлениеСФ;
		
		УстановитьДоговорВСчетеФактуреДляДиадок(ФормаСФ.Объект.ДоговорКонтрагента, Контрагент, Организация);
		
		Если НаАванс = Истина Тогда
			ФормаСФ.Объект.КодВидаОперации=	"02";
			ФормаСФ.Объект.СуммаНДСДокумента=	ФормаСФ.Объект.Авансы.Итог("СуммаНДС");
		Иначе
			ФормаСФ.Объект.КодВидаОперации=	"01";
		КонецЕсли;

	Иначе
		
		Для Каждого СсылкаНаРНК Из МассивСсылокРНК Цикл
			СтрокаОснования=					ФормаСФ.Объект.ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование=	СсылкаНаРНК;
		КонецЦикла;

		ФормаСФ.Объект.Организация= Организация;
		ФормаСФ.Объект.Контрагент=	Контрагент;

		ФормаСФ.Объект.КодСпособаВыставления=	2;
		ФормаСФ.Объект.Договор=					ПолучитьДоговорКонтрагентаБГУ(Организация, Контрагент);
		
		Для каждого ДанныеДокументаОснования Из МассивСсылокРНК Цикл
			МассивДанныхСтрок=	ПолучитьМассивДанныхСтрок(ДанныеДокументаОснования);
			Для каждого СтрокаДокументаОснования Из МассивДанныхСтрок Цикл
				СтрокаНФА=	ФормаСФ.Объект.СоставНФА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНФА, СтрокаДокументаОснования);
				СтрокаНФА.ДокументОснование=	ДанныеДокументаОснования;
				СтрокаНФА.НФА=					СтрокаДокументаОснования.Номенклатура;
			КонецЦикла;
		КонецЦикла;
		
		ФормаСФ.Объект.КодВидаОперации=	"01";
		
	КонецЕсли;

	ФормаСФ.РежимОткрытияОкна=				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаСФ.ОписаниеОповещенияОЗакрытии=	Новый ОписаниеОповещения("ОбработчикЗакрытиеФормыСФ", МодульВызова, ФормаСФ.Объект);
	ФормаСФ.Открыть();

КонецФункции

&НаКлиенте
Функция ПредупреждатьОСтаромФормате(ConfirmationDate, InvoiceVersion) Экспорт
	
	//если нет подтверждения оператора  - то анализируем по текущей дате
	ДатаПрименения = ?(ConfirmationDate<'20010101', ТекущаяДата(), ConfirmationDate);
		
	НормативныйФормат = ?(ДатаПрименения<'20150414', "5.01", "5.02");
		
	Возврат (НормативныйФормат = "5.02") И (InvoiceVersion<>"5.02");
	
КонецФункции