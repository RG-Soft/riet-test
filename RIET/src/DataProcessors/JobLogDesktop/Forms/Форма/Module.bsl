        
////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	МассивUserSegments = ПараметрыСеанса.UserSegments;
	Производственник = ЭтоПроизводственник();
	БухгалтерAR = ЭтоБухгалтерAR();
	
	ДоступныВсеСегменты = ?(БухгалтерAR или РольДоступна("JobLogAdministrator"), Истина, Ложь);
	
	Если Не ДоступныВсеСегменты Тогда
		Элементы.SegmentSubSegment.РедактированиеТекста = Ложь;
		Объект.SegmentSubSegment = МассивUserSegments[0];
		Если Не ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
			Сообщить("Нет прав доступа ни к одному сегменту, обратитесь к администратору системы.");
		КонецЕсли;
		Элементы.СписокJobs.ПодчиненныеЭлементы.СписокJobsSegment.ТолькоПросмотр = Истина;
		Элементы.СписокJobs.ПодчиненныеЭлементы.СписокJobsSubSegment.РедактированиеТекста = Ложь;
		Элементы.СписокJobs.ПодчиненныеЭлементы.СписокJobsSubSubSegment.РедактированиеТекста = Ложь;
	КонецЕсли;
	
	SegmentРодитель = Объект.SegmentSubSegment.Родитель;
	SegmentРодительРодитель = Объект.SegmentSubSegment.Родитель.Родитель;
	
	СurrencySLB = Справочники.Валюты.НайтиПоНаименованию("SLB");
	ИдентификаторСтроки = -1;
	
	УстановитьВозможностьРедактированияКолонок();
	
	Элементы.ГруппаФильтры.ПодчиненныеЭлементы.FTLLoading.Видимость = ?(БухгалтерAR и Не РольДоступна("JobLogAdministrator") и Не РольДоступна("ПолныеПрава"), Ложь, Истина);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияКолонок()
	
	КолонкиТаблицы = Элементы.СписокJobs.ПодчиненныеЭлементы;
	
	Если Не Производственник Тогда  
		
		Для каждого Колонка Из КолонкиТаблицы Цикл
			Колонка.ТолькоПросмотр = Истина;
		КонецЦикла;
						
	КонецЕсли;	
	
	Если БухгалтерAR Тогда  
		
		КолонкиТаблицы.СписокJobsAccountant.ТолькоПросмотр = Ложь;
		КолонкиТаблицы.СписокJobsSiebelOrder.ТолькоПросмотр = Ложь;
		КолонкиТаблицы.СписокJobsCommentsForRevenueAccrual.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонок()
	
	Отказ = Ложь;
	Если ИдентификаторСтроки >= 0 Тогда 
		СохранитьИзмененияСтроки(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = -1;
	
	Объект.СписокJobs.Очистить();
	
	ЭлементыСпискаJob = Элементы.СписокJobs.ПодчиненныеЭлементы;
	       	
	Segment = Неопределено;
	ЭлементыСпискаJob.СписокJobsDCSPartOfRevenue.Видимость = Ложь;
	ВидимостьКолонокССуммами = Ложь;
	ЭлементыСпискаJob.СписокJobsType.Видимость = Истина;
	ЭлементыСпискаJob.СписокJobsJobDescription.Видимость = Истина;
	ЭлементыСпискаJob.СписокJobsOFSStoreCaddy.Видимость = Истина;
	
	МассивКолонокССуммами = Новый Массив();
	МассивКолонокССуммами.Добавить(ЭлементыСпискаJob.СписокJobsService);
	МассивКолонокССуммами.Добавить(ЭлементыСпискаJob.СписокJobsProductReimbursable);
	МассивКолонокССуммами.Добавить(ЭлементыСпискаJob.СписокJobsProduct);
	МассивКолонокССуммами.Добавить(ЭлементыСпискаJob.СписокJobsServiceReimbursable);
	              	
	Если ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
		Segment = СокрЛП(ПолучитьСегментДляОтбора());
	КонецЕсли;
	   		
	Если Segment = "ALS" или Segment = "WIS" Тогда 
		ЭлементыСпискаJob.СписокJobsType.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsJobDescription.Видимость = Ложь;
		ВидимостьКолонокССуммами = Истина;
	ИначеЕсли Segment = "WSV" Тогда 
		ЭлементыСпискаJob.СписокJobsJobDescription.Видимость = Ложь;
		ВидимостьКолонокССуммами = Истина;
	ИначеЕсли Segment = "DBM" или Segment = "REW" Тогда 
		ЭлементыСпискаJob.СписокJobsType.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsJobDescription.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsOFSStoreCaddy.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsDCSPartOfRevenue.Видимость = Истина;
	ИначеЕсли Segment = "CPS" Тогда 
		ЭлементыСпискаJob.СписокJobsType.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsJobDescription.Видимость = Ложь;
		ЭлементыСпискаJob.СписокJobsOFSStoreCaddy.Видимость = Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементМассива из МассивКолонокССуммами Цикл
		ЭлементМассива.Видимость = ВидимостьКолонокССуммами;
	КонецЦикла;
	        		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПроизводственник()
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("JobLogAdministrator")
		Или РольДоступна("SeniorEngineer") Или РольДоступна("FieldEngineer");	
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоБухгалтерAR()
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("JobLogAdministrator") Или РольДоступна("БухгалтерAR");	
	
КонецФункции

&НаКлиенте
Процедура SegmentSubSegmentНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ДоступныВсеСегменты Тогда 
		
		СтандартнаяОбработка = Ложь;
		 	            			
		СписокSegmentов = ПолучитьСписокSegmentов(МассивUserSegments);
		
		Результат = ВыбратьИзСписка(СписокSegmentов, Элемент);
		Если Результат <> Неопределено Тогда
						
			Объект.SegmentSubSegment = Результат.Значение;
			SegmentРодитель = ПолучитьРодителяСегмента(Объект.SegmentSubSegment);
			SegmentРодительРодитель = ПолучитьРодителяСегмента(SegmentРодитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура SegmentSubSegmentПриИзменении(Элемент)
	                  		
	Если Не ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
		SegmentРодитель = Неопределено;
		SegmentРодительРодитель = Неопределено;
	иначе
		SegmentРодитель = ПолучитьРодителяСегмента(Объект.SegmentSubSegment);
		SegmentРодительРодитель = ПолучитьРодителяСегмента(SegmentРодитель);
	КонецЕсли;
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокSegmentов(Segments)
	
	СписокSegmentов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сегменты.Ссылка
	               |ИЗ
	               |	Справочник.Сегменты КАК Сегменты
	               |ГДЕ
	               |	НЕ Сегменты.ПометкаУдаления
	               |	И (Сегменты.Родитель В ИЕРАРХИИ (&Segments)
	               |			ИЛИ Сегменты.Ссылка В (&Segments))";
	
	Запрос.УстановитьПараметр("Segments", Segments);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокSegmentов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	     		
	Возврат СписокSegmentов;

КонецФункции
     
&НаСервереБезКонтекста
Функция ПолучитьРодителяСегмента(SubSegment)
	
	Возврат SubSegment.Родитель;	
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ИдентификаторСтроки >= 0 Тогда 
		СохранитьИзмененияСтроки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияСтроки(Отказ)
	
	Ответ = Вопрос("Сохранить последние изменения?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		 Возврат;		
	КонецЕсли;
		
	ЗаписатьJobНаСервере(Отказ, ИдентификаторСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДатаСРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ДатаС = НачалоМесяца(ДобавитьМесяц(ДатаС, Направление));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ДатаПо = НачалоМесяца(ДобавитьМесяц(ДатаПо, Направление));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьJobLog(Команда)
	
	Отказ = Ложь;
	
	Если ИдентификаторСтроки >= 0 Тогда 
		СохранитьИзмененияСтроки(Отказ);
	КонецЕсли;
	
	Если Не ДоступныВсеСегменты И Не ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда
		Объект.SegmentSubSegment = МассивUserSegments[0];
		Если Не ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
			Предупреждение("Нет прав доступа, для просмотра Job Log нужен доступ к Сегменту!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	     	    		
	Если Не ЗначениеЗаполнено(ДатаС) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните ""Period""!",
			, "ДатаС",,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСписокJobsНаСервере();
	
КонецПроцедуры
  
&НаСервере
Процедура ЗагрузитьСписокJobsНаСервере()
	
	Объект.СписокJobs.Очистить();
	ИдентификаторСтроки = -1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаС", ДатаС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Job.Ссылка КАК Job,
	               |	Job.ПометкаУдаления КАК ForDeletion,
	               |	Job.Номер,
	               |	Job.Дата КАК JobEnd,
	               |	Job.Period,
	               |	Job.FTLNumber,
	               |	Job.Segment,
	               |	Job.SubSegment,
	               |	Job.SubSubSegment,
	               |	Job.Location,
	               |	Job.LocationName,
	               |	Job.AU,
	               |	Job.CANumber,
	               |	Job.ContractName,
	               |	Job.Client,
	               |	Job.Well,
	               |	Job.Engineer,
	               |	Job.AmountInContractCurrency,
	               |	Job.СurrencyRate,
	               |	Job.CurrencyOfContract,
	               |	Job.BaseСurrencyTotal,
	               |	Job.SIRNumber,
	               |	Job.Accountant,
	               |	Job.SiebelOrder,
	               |	Job.CommentsForRevenueAccrual,
	               |	Job.OFSStoreCaddy,
	               |	Job.Type,
	               |	Job.JobDescription,
	               |	Job.ServiceAccount,
	               |	Job.Service,
	               |	Job.ProductAccount,
	               |	Job.Product,
	               |	Job.ServiceReimbursableAccount,
	               |	Job.ServiceReimbursable,
	               |	Job.ProductReimbursableAccount,
	               |	Job.ProductReimbursable,
	               |	Job.DCSPartOfRevenue,
	               |	Job.CreatedBy
	               |ИЗ
	               |	Документ.Job КАК Job
	               |ГДЕ
	               |	Job.Period >= &ДатаС";
	
	Если ЗначениеЗаполнено(ДатаПо) Тогда
		Запрос.Текст = Запрос.Текст + "
		| И Job.Period <= &ДатаПо";
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
		
		Запрос.УстановитьПараметр("SegmentSubSegment", Объект.SegmentSubSegment);
		
		Если ЗначениеЗаполнено(SegmentРодительРодитель) Тогда
			Запрос.Текст = Запрос.Текст + "
			| И Job.SubSubSegment = &SegmentSubSegment";
		
		ИначеЕсли Не ЗначениеЗаполнено(SegmentРодительРодитель) И ЗначениеЗаполнено(SegmentРодитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			| И Job.SubSegment = &SegmentSubSegment";

		Иначе 
			Запрос.Текст = Запрос.Текст + "
			| И Job.Segment = &SegmentSubSegment";
		КонецЕсли;
        		
	КонецЕсли;
			
	Если NotForDeletion Тогда 
		Запрос.Текст = Запрос.Текст + "
		| И Не Job.ПометкаУдаления";
	КонецЕсли;
 		
	Если ЗначениеЗаполнено(Location) Тогда
		Запрос.Текст = Запрос.Текст + "
		| И Job.LocationName В ИЕРАРХИИ(&Location)";
		Запрос.УстановитьПараметр("Location", Location);  
	КонецЕсли;
	   		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.СписокJobs.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	   	
КонецПроцедуры

&НаКлиенте
Процедура FTLLoading(Команда)
	
	Отказ = Ложь;
	Если ИдентификаторСтроки >= 0 Тогда 
		СохранитьИзмененияСтроки(Отказ);
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.FTLLoading.Форма");
	
КонецПроцедуры
           
////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ И ЗАПИСЬ СТРОК
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура SaveCurrentJob(Команда)
	      	
	Если Элементы.СписокJobs.ТекущиеДанные = Неопределено 
		или ИдентификаторСтроки < 0 Тогда 
		Возврат;
	КонецЕсли;

	ЗаписатьJobНаСервере(Ложь, ИдентификаторСтроки);

КонецПроцедуры

&НаКлиенте
Процедура СписокJobsПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не ДоступныВсеСегменты И Не ЗначениеЗаполнено(Объект.SegmentSubSegment) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните ""Segment/SubSegment""!",
			, "Объект.SegmentSubSegment");
		ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
		Объект.СписокJobs.Удалить(ТекДанные);
		Возврат;
	КонецЕсли;
	
	ПриНачалеРедактированияJob(НоваяСтрока, Копирование);
    	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияJob(НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СписокJobs.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Не НоваяСтрока Тогда 
		ЗаблокироватьJobНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
		Возврат;
	КонецЕсли;
	        		
	Если Копирование Тогда 
		ТекущиеДанные.Job          = Неопределено;
		ТекущиеДанные.FTLNumber    = Неопределено;
		ТекущиеДанные.SiebelOrder  = Неопределено;
        ТекущиеДанные.CommentsForRevenueAccrual = Неопределено;
        ТекущиеДанные.Accountant   = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.JobEnd = ?(ЗначениеЗаполнено(ДатаПо), ДатаПо, ТекущаяДата()); 
	ЧислоМесяца = Число(Формат(ТекущиеДанные.JobEnd,"ДФ=dd"));
	ТекущиеДанные.Period = ?(ЧислоМесяца > 25, КонецМесяца(ТекущиеДанные.JobEnd)+1, НачалоМесяца(ТекущиеДанные.JobEnd)); 
	   		
	Если ЗначениеЗаполнено(SegmentРодительРодитель) Тогда 
		ТекущиеДанные.Segment       = SegmentРодительРодитель;
		ТекущиеДанные.SubSegment    = SegmentРодитель;
		ТекущиеДанные.SubSubSegment = Объект.SegmentSubSegment;
	ИначеЕсли Не ЗначениеЗаполнено(SegmentРодительРодитель) И ЗначениеЗаполнено(SegmentРодитель) Тогда 
		ТекущиеДанные.Segment       = SegmentРодитель;
		ТекущиеДанные.SubSegment    = Объект.SegmentSubSegment;
	Иначе 
		ТекущиеДанные.Segment       = Объект.SegmentSubSegment;
	КонецЕсли;
	
	ЗаполнитьСчетаLawsonПоУмолчанию(ТекущиеДанные.ПолучитьИдентификатор());
			
КонецПроцедуры
         
&НаСервере
Процедура ЗаблокироватьJobНаСервере(Идентификатор)
	
	СтрокаКоллекции = Объект.СписокJobs.НайтиПоИдентификатору(Идентификатор);
	
	Если Не ЗначениеЗаполнено(СтрокаКоллекции.Job) Тогда 
		Возврат;
	КонецЕсли; 
	
	Попытка
		ДокументОбъект = СтрокаКоллекции.Job.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
	Исключение
		Сообщить("Не удалось заблокировать Job для изменения: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура СписокJobsПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если ТекДанные <> Неопределено И НоваяСтрока И ТекДанные.ForDeletion Тогда 
		Объект.СписокJobs.Удалить(ТекДанные);
		Возврат;
	КонецЕсли;
	    		
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокJobs.ТекущиеДанные = Неопределено 
		или ИдентификаторСтроки < 0 Тогда 
		Возврат;
	КонецЕсли;

	ЗаписатьJobНаСервере(Ложь, ИдентификаторСтроки);
	          		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьJobНаСервере(Отказ = Ложь, Идентификатор)
	
	СтрокаКоллекции = Объект.СписокJobs.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаКоллекции = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	       			    	
	Если ЗначениеЗаполнено(СтрокаКоллекции.Job) Тогда 
		ДокументОбъект = СтрокаКоллекции.Job.ПолучитьОбъект();
	Иначе 
		ДокументОбъект = Документы.Job.СоздатьДокумент();
	КонецЕсли;
              	
	ДокументОбъект.Дата    = СтрокаКоллекции.JobEnd;
	
	Если БухгалтерAR И (ДокументОбъект.SiebelOrder <> СтрокаКоллекции.SiebelOrder 
		                или ДокументОбъект.CommentsForRevenueAccrual <> СтрокаКоллекции.CommentsForRevenueAccrual) Тогда
		ДокументОбъект.Accountant = ТекущийПользователь;
		СтрокаКоллекции.Accountant = ТекущийПользователь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаКоллекции);
	
	Попытка	
		
		Если СтрокаКоллекции.ForDeletion <> ДокументОбъект.ПометкаУдаления Тогда 
			ДокументОбъект.ПометкаУдаления = СтрокаКоллекции.ForDeletion;
		КонецЕсли;

		ДокументОбъект.Записать();
		СтрокаКоллекции.Job = ДокументОбъект.Ссылка;
				
	Исключение
		
		ДокументОбъект.Прочитать();
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ДокументОбъект);
		Сообщить("Не удалось сохранить изменения для строки №"+ СтрокаКоллекции.НомерСтроки +"!
		|" + ОписаниеОшибки());
		Отказ = Истина;
						
	КонецПопытки;
		  		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЦЫ JOBS
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СписокJobsPeriodРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	
	ТекДанные.Period = НачалоМесяца(ДобавитьМесяц(ТекДанные.Period, Направление));
		
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsJobEndПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;

	Если Не ЗначениеЗаполнено(ТекДанные.Period) и ЗначениеЗаполнено(ТекДанные.JobEnd) Тогда 
		ЧислоМесяца = Число(Формат(ТекДанные.JobEnd,"ДФ=dd"));
		ТекДанные.Period = ?(ЧислоМесяца > 25, КонецМесяца(ТекДанные.JobEnd)+1, НачалоМесяца(ТекДанные.JobEnd)); 
	КонецЕсли;
             	
КонецПроцедуры
                   
// СЕГМЕНТЫ

&НаКлиенте
Процедура СписокJobsSegmentОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;

	Если ВыбранноеЗначение <> ТекДанные.Segment Тогда
		
		ТекДанные.Segment = ВыбранноеЗначение;
		
		ЗаполнитьСчетаLawsonПоУмолчанию(ТекДанные.ПолучитьИдентификатор());
		
		ТекДанные.SubSegment    = Неопределено;
		ТекДанные.SubSubSegment = Неопределено;
		ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsSegmentПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;

	ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
		    	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsSubSegmentНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;

	НовыйПараметр = Новый ПараметрВыбора("Отбор.Родитель", 
							?(ЗначениеЗаполнено(ТекДанные.Segment), ТекДанные.Segment, ПолучитьМассивSegmentов()));
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СписокJobs.ПодчиненныеЭлементы.СписокJobsSubSegment.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры
                            
&НаКлиенте
Процедура СписокJobsSubSegmentПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	ТекДанные.SubSubSegment = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Segment) Тогда
		ТекДанные.Segment = ПолучитьРодителяСегмента(ТекДанные.SubSegment);
	КонецЕсли;
	
	ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
		
КонецПроцедуры
                 
&НаКлиенте
Процедура СписокJobsSubSubSegmentНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ТекДанные.SubSegment) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните ""SubSegment""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].SubSegment");
		Возврат;
	КонецЕсли;
	
	СписокSubSubSegment = ПолучитьСписокSubSubSegment(ТекДанные.SubSegment);
	
	Результат = ВыбратьИзСписка(СписокSubSubSegment, Элемент);
	Если Результат <> Неопределено Тогда
		ТекДанные.SubSubSegment = Результат.Значение;
		ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsSubSubSegmentПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;

	ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);

КонецПроцедуры

// Location

&НаКлиенте
Процедура СписокJobsLocationNameНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Результат = ОткрытьФормуМодально("Справочник.GeoMarkets.Форма.ФормаВыбора", Новый Структура("RCA"), ЭтаФорма);
	
	Если Результат <> Неопределено И Результат <> ТекДанные.LocationName Тогда
		ТекДанные.LocationName = Результат;
		
		ТекДанные.Location = ПолучитьLocationПоLocationName(ТекДанные.LocationName);
		ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsLocationNameПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
    ТекДанные.Location = ПолучитьLocationПоLocationName(ТекДанные.LocationName);
	ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура СписокJobsLocationНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ТекДанные.LocationName) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните поле ""Location name""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].LocationName");
		Возврат;
	КонецЕсли;

	СписокLocation = ПолучитьСписокLocation(ТекДанные.LocationName);
	
	Результат = ВыбратьИзСписка(СписокLocation, Элемент);
	Если Результат <> Неопределено Тогда
		ТекДанные.Location = Результат.Значение;
		ТекДанные.AU = ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные);
	КонецЕсли; 

КонецПроцедуры

// AU

&НаКлиенте
Процедура СписокJobsAUНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Segment) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните поле ""Segment""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].Segment",,Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекДанные.LocationName)Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните поле ""Location name""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].LocationName",,Отказ);
	КонецЕсли;

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СписокAU = ПолучитьСписокAU(ТекДанные.Segment, ТекДанные.SubSegment, 
								ТекДанные.SubSubSegment, ТекДанные.Location, ТекДанные.LocationName);
	
	Результат = ВыбратьИзСписка(СписокAU, Элемент);
	Если Результат <> Неопределено Тогда
		ТекДанные.AU = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокAU(Segment, SubSegment, SubSubSegment, Location, LocationName)
	
	СписокAU = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Segment", Segment);
	Запрос.Текст = "ВЫБРАТЬ
	|	КостЦентры.Ссылка
	|ИЗ
	|	Справочник.КостЦентры КАК КостЦентры
	|ГДЕ
	|	НЕ КостЦентры.ПометкаУдаления
	|	И КостЦентры.Segment = &Segment";
	
	Если ЗначениеЗаполнено(SubSegment) Тогда 
		Запрос.Текст = Запрос.Текст + "	
		|И КостЦентры.SubSegment = &SubSegment";
		Запрос.УстановитьПараметр("SubSegment", SubSegment);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Location) Тогда 
		Запрос.Текст = Запрос.Текст + "	
		|И КостЦентры.ПодразделениеОрганизации = &Location";
		Запрос.УстановитьПараметр("Location", Location);
	иначе 
		Запрос.Текст = Запрос.Текст + "	
		|И КостЦентры.ПодразделениеОрганизации.Geomarket = &LocationName";
		Запрос.УстановитьПараметр("LocationName", LocationName);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(SubSubSegment) Тогда 
		Запрос.Текст = Запрос.Текст + "	
		|И КостЦентры.Сегмент = &SubSubSegment";
		Запрос.УстановитьПараметр("SubSubSegment", SubSubSegment);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокAU.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокAU;

КонецФункции

&НаКлиенте
Функция ЗаполнитьAUеслиПодходитЕдинственноеЗначение(ТекДанные)
	
	СписокAU = ПолучитьСписокAU(ТекДанные.Segment, ТекДанные.SubSegment, 
								ТекДанные.SubSubSegment, ТекДанные.Location, ТекДанные.LocationName);
								
	Возврат ?(СписокAU.Количество() = 1, СписокAU[0].Значение, Неопределено);
     
КонецФункции
  
// СУММЫ

&НаКлиенте
Процедура BaseCurrencyTotal(Команда)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	      			
	Если Не ЗначениеЗаполнено(ТекДанные.AmountInContractCurrency) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните поле ""Amount In Contract Currency""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].AmountInContractCurrency");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.CurrencyOfContract) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Заполните поле ""Currency of contract""!",
			, "Объект.СписокJobs[" + (ТекДанные.НомерСтроки - 1) + "].CurrencyOfContract");
		Возврат;
	КонецЕсли;

	ПересчитатьСуммы(ТекДанные.ПолучитьИдентификатор());
	     	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsAmountInContractCurrencyПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.CurrencyOfContract) 
		И ЗначениеЗаполнено(ТекДанные.AmountInContractCurrency) Тогда
		ПересчитатьСуммы(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли; 
	
КонецПроцедуры
             
&НаКлиенте
Процедура СписокJobsCurrencyOfContractПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.CurrencyOfContract) 
		И ЗначениеЗаполнено(ТекДанные.AmountInContractCurrency) Тогда
		ПересчитатьСуммы(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsСurrencyRateПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.CurrencyOfContract) 
		И ЗначениеЗаполнено(ТекДанные.AmountInContractCurrency) Тогда
		ПересчитатьСуммы(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;            	
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммы(Идентификатор)
	
	ТекДанные = Объект.СписокJobs.НайтиПоИдентификатору(Идентификатор);
	  	
	Если Не ЗначениеЗаполнено(ТекДанные.СurrencyRate) Тогда 
		ТекДанные.СurrencyRate = ОбщегоНазначения.ПолучитьКурсВалюты(СurrencySLB, ТекДанные.Period).Курс;
	КонецЕсли;

	Если ТекДанные.CurrencyOfContract = Справочники.Валюты.НайтиПоНаименованию("USD") Тогда 
		ТекДанные.BaseСurrencyTotal = ТекДанные.AmountInContractCurrency;
	ИначеЕсли ТекДанные.CurrencyOfContract = Справочники.Валюты.НайтиПоКоду("643") Тогда
		ТекДанные.BaseСurrencyTotal = ?(ТекДанные.СurrencyRate = 0, 0,
									Окр(ТекДанные.AmountInContractCurrency / ТекДанные.СurrencyRate, 2)); 
	Иначе 
		СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ТекДанные.CurrencyOfContract, ТекДанные.Period);
		ТекДанные.BaseСurrencyTotal = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекДанные.AmountInContractCurrency, ТекДанные.CurrencyOfContract, 
								СurrencySLB, СтруктураКурса.Курс, ТекДанные.СurrencyRate, СтруктураКурса.Кратность);
	КонецЕсли;
							
КонецПроцедуры

//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

&НаСервере
Процедура ЗаполнитьСчетаLawsonПоУмолчанию(Идентификатор)
	
	Документы.Job.ЗаполнитьSubSegmentИСчетаLawsonПоУмолчаниюДляСегмента(Объект.СписокJobs.НайтиПоИдентификатору(Идентификатор));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивSegmentов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сегменты.Ссылка
	|ИЗ
	|	Справочник.Сегменты КАК Сегменты
	|ГДЕ
	|	НЕ Сегменты.ПометкаУдаления
	|	И Сегменты.Родитель = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)
	|	И Сегменты.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокSubSubSegment(SubSegment)
	
	СписокSubSubSegment = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сегменты.Ссылка
	|ИЗ
	|	Справочник.Сегменты КАК Сегменты
	|ГДЕ
	|	НЕ Сегменты.ПометкаУдаления
	|	И Сегменты.Родитель = &SubSegment
	|	И Не Сегменты.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("SubSegment", SubSegment);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокSubSubSegment.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокSubSubSegment;

КонецФункции
          
&НаСервереБезКонтекста
Функция ПолучитьСписокLocation(LocationName)
	
	СписокLocation = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	НЕ ПодразделенияОрганизаций.ПометкаУдаления
	               |	И ПодразделенияОрганизаций.GeoMarket = &LocationName";
	
	Запрос.УстановитьПараметр("LocationName", LocationName);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокLocation.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокLocation;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьLocationПоLocationName(LocationName)
	
	Если ЗначениеЗаполнено(LocationName) Тогда 
		Возврат Справочники.ПодразделенияОрганизаций.НайтиПоРеквизиту("GeoMarket", LocationName);
	иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСегментДляОтбора()
	
	Если ЗначениеЗаполнено(SegmentРодительРодитель) Тогда 
		Возврат SegmentРодительРодитель;
	ИначеЕсли ЗначениеЗаполнено(SegmentРодитель) Тогда 
		Возврат SegmentРодитель;
	иначе
		Возврат Объект.SegmentSubSegment;
	КонецЕсли;
		
КонецФункции

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура СписокJobsAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.СписокJobs.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата", текДанные.JobEnd);
		СтруктураПараметровОтбора = Новый Структура;
		СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
		СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.AU);
		ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsAUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		текДанные = Элементы.СписокJobs.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПолученияДанных.Вставить("Дата", текДанные.JobEnd);
			//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
			ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокJobsAUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		текДанные = Элементы.СписокJobs.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПолученияДанных.Вставить("Дата", текДанные.JobEnd);
			//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
			ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//<- RG-Soft VIvanov

   