
//Производит загрузку Activity codes из excel-файла "AUAC_OFS" с hub'a 

//регламентное задание
Процедура LoadActivityCodesFromHUB() Экспорт
	
	//http://www.hub.slb.com/display/index.do?id=id2501787
	//http://reports.lawson.slb.com/londonmis2/Lawson/MasterData/MasterDataTables/AUAC_OFS.zip
	
	//получим файл 
	СерверИсточник = "reports.lawson.slb.com";
	СтрокаПараметраПолучения = "londonmis2/Lawson/MasterData/MasterDataTables/AUAC_OFS.zip";
	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
                   	
	ВремКаталог = КаталогВременныхФайлов() + "tempACs";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог, "*.*");
	ИмяВходящегоФайла = "" + ВремКаталог + "\" + "AUAC_OFS.zip";
			
	Если ЗапроситьФайлыССервера(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла) <> Истина Тогда
		РГСофт.СообщитьИЗалоггировать(
			"Не удалось скачать файл AUAC_OFS.zip",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено);
		УдалитьФайлы(ВремКаталог,"*.*");
		Возврат;
	КонецЕсли; 
         	
	//разархивируем файл
	Попытка
		ZipЧтение = Новый ЧтениеZipФайла(ИмяВходящегоФайла);
		ЭлементZipФайла = ZipЧтение.Элементы[0];
	Исключение
		РГСофт.СообщитьИЗалоггировать("Не удалось разархивировать AUAC_OFS.zip!",
			"Не удалось скачать файл AUAC_OFS.zip",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено,
			ОписаниеОшибки());
		УдалитьФайлы(ВремКаталог,"*.*");
		Возврат;
	КонецПопытки;
	
	Если СтрНайти(ЭлементZipФайла.Имя, "xls") = 0 Тогда
		РГСофт.СообщитьИЗалоггировать("ZIP-файл AUAC_OFS.zip не содержит xls-file!",
			"Не удалось найти xls-файл в AUAC_OFS.zip",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено);
		УдалитьФайлы(ВремКаталог,"*.*");
		Возврат;
	КонецЕсли;
		
	ZipЧтение.Извлечь(ЭлементZipФайла, ВремКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
	ПолноеИмяФайла = ВремКаталог + "\" + ЭлементZipФайла.Имя;
	     		
	//загрузим файл
	Попытка
		ЗагрузитьДанныеИзФайла(ПолноеИмяФайла);
	Исключение
		РГСофт.СообщитьИЗалоггировать(
			"Не удалось загрузить файл AUAC_OFS.zip",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено,
			ОписаниеОшибки());
	КонецПопытки;

	УдалитьФайлы(ВремКаталог,"*.*");
       	
КонецПроцедуры // LoadActivityCodesFromHUB()

// Функция получает файлы с сервера с указанными параметрами и сохраняет на диск
//
// Параметры:
//  HTTP - HTTPСоединение, если приходится использовать данную функцию в цикле, то тут передается
//         переменная с созданным в предыдущей итерации цикла HTTPСоединением
// СерверИсточникПараметр - Строка, сервер, с которого необходимо получить файлы
// СтрокаПараметраПолученияПараметр - Строка, адрес ресурса на сервере.
// ИмяВходящегоФайлаПараметр - Имя файла, в который помещаются данные полученного ресурса.
//
// Возвращаемое значение:
//  Булево - Успешно получены файлы или нет.
//
Функция ЗапроситьФайлыССервера(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр, HTTP = Неопределено)

	СерверИсточник           = СерверИсточникПараметр;
	СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр;
	ИмяВходящегоФайла        = ИмяВходящегоФайлаПараметр;
	
	Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
		// { RGS VChaplygin 24.04.2018 15:42:26 - Исправление ошибки получения файла
		HTTP = Новый HTTPСоединение(СерверИсточник, , , , , , , Истина)
		// } RGS VChaplygin 24.04.2018 15:42:26 - Исправление ошибки получения файла
	КонецЕсли; 
	
	Попытка
		HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
		Возврат Истина;
	Исключение
		// { RGS VChaplygin 24.04.2018 15:42:26 - Регистрация ошибки получения файла
		РГСофт.СообщитьИЗалоггировать(
			"В ходе загрузки AUAC_OFS.xls возникли ошибки!",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено,
			ОписаниеОшибки());
		// } RGS VChaplygin 24.04.2018 15:42:26 - Регистрация ошибки получения файла
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

//загрузка AC из Excel-файла 
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла) Экспорт 
	
	ТекстОшибок = "";
	
	МассивСтруктурAUAC = ПолучитьМассивСтруктурAUИзФайла(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьAUAC(ТекстОшибок, МассивСтруктурAUAC);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда 
		РГСофт.СообщитьИЗалоггировать(
			"В ходе загрузки AUAC_OFS.xls возникли ошибки!",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ActivityCodesLoading,
			Неопределено,
			ТекстОшибок + ОписаниеОшибки());
	КонецЕсли;
		
КонецПроцедуры
     
Функция ПолучитьМассивСтруктурAUИзФайла(ТекстОшибок, ПолноеИмяФайла)
	
	МассивСтруктурAUAC = Новый Массив;
	
	МассивAUCodes = ПолучитьМассивAUCodes();
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  

	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры = "ACCT_UNIT,ACTIVITY,Activity_Description,BEGIN_DATE";
		СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = ЗначениеЯчейки;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(СтруктураЗначенийСтроки.ACCT_UNIT) Тогда 
				Прервать;
			КонецЕсли;
			
			Пока СтрДлина(СтруктураЗначенийСтроки.ACCT_UNIT) < 7 Цикл
				СтруктураЗначенийСтроки.ACCT_UNIT = "0" + СтруктураЗначенийСтроки.ACCT_UNIT;
			КонецЦикла;
			
			Если МассивAUCodes.Найти(СтруктураЗначенийСтроки.ACCT_UNIT) = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				СтруктураAUAC = Новый Структура(СвойстваСтруктуры);
				
				Для Каждого ЭлементСтруктурыЗначений из СтруктураЗначенийСтроки Цикл 
					СтруктураAUAC[ЭлементСтруктурыЗначений.Ключ] = ЭлементСтруктурыЗначений.Значение;	
				КонецЦикла;
				
				СтруктураAUAC.Вставить("НомерСтрокиФайла", НомерСтроки);
				
				МассивСтруктурAUAC.Добавить(СтруктураAUAC);
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось загрузить данные в строке №" + НомерСтроки + " в колонке '" + ЭлементСтруктурыЗначений.Ключ + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	Возврат МассивСтруктурAUAC;
	
КонецФункции

Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
		
		Если ТекстЯчейки = "ACCT_UNIT" Тогда
			СтруктураКолонокИИндексов.ACCT_UNIT = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "ACTIVITY" Тогда
			СтруктураКолонокИИндексов.ACTIVITY = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Activity_Description" Тогда
			СтруктураКолонокИИндексов.Activity_Description = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "BEGIN_DATE" Тогда
			СтруктураКолонокИИндексов.BEGIN_DATE = НомерКолонки;
		КонецЕсли;   
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + КлючИЗначение.Ключ + "'!";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции

Функция ПолучитьМассивAUCodes()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	СегментыКостЦентровСрезПоследних.Код КАК AUCode
	 |ИЗ
	 |	РегистрСведений.СегментыКостЦентров.СрезПоследних КАК СегментыКостЦентровСрезПоследних";
	 
	 Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("AUCode");
	 	
КонецФункции

//////////////////////////////////////////////////////////////
	
Процедура ЗагрузитьAUAC(ТекстОшибок, МассивСтруктурAUAC) 
	                  		     	
	Для Каждого СтруктураAC из МассивСтруктурAUAC Цикл 
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//Ищем AC по коду. Если не нашли - создаем.
		Попытка
			
			ACTIVITY = СокрЛП(СтруктураAC.ACTIVITY);
			
			ACссылка = Справочники.ActivityCodes.НайтиПоКоду(ACTIVITY);	
			
			Если Не ЗначениеЗаполнено(ACссылка) Тогда
				
				ACОбъект = Справочники.ActivityCodes.СоздатьЭлемент();
				ACОбъект.Код = ACTIVITY;
				ACОбъект.Наименование = СокрЛП(СтруктураAC.Activity_Description);
				ACОбъект.Записать();
				
				ACссылка = ACОбъект.Ссылка;
				
			КонецЕсли;
			
			Период = ПолучитьДатуИзСтроки(СокрЛП(СтруктураAC.BEGIN_DATE));
			AUCode = СокрЛП(СтруктураAC.ACCT_UNIT);
			
			МенеджерЗаписи = РегистрыСведений.AUsActivityCodes.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = Период;
			МенеджерЗаписи.AUCode = AUCode;
			МенеджерЗаписи.ActivityCode = ACссылка;
			МенеджерЗаписи.Прочитать();
			
			Если Не МенеджерЗаписи.Выбран() Тогда
				
				МенеджерЗаписи.Период = Период;
				МенеджерЗаписи.AUCode = AUCode;
				МенеджерЗаписи.ActivityCode = ACссылка;
				
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибок = ТекстОшибок + "
			|не удалось записать Activity Codes '"+ СтруктураAC.ACTIVITY + "' в строке №"+ СтруктураAC.НомерСтрокиФайла + ",
			|"+ ОписаниеОшибки();
			
			ОтменитьТранзакцию();
			
		КонецПопытки;   
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла; 	
		
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияAC(МассивСтруктурAUAC)
	
	Запрос = Новый Запрос;
	
	МассивКодов = Новый Массив;
	Для Каждого СтруктураAC из МассивСтруктурAUAC Цикл 
		МассивКодов.Добавить(СтруктураAC.ACTIVITY);
	КонецЦикла; 
	
    Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ActivityCodes.Ссылка КАК AU,
	               |	ActivityCodes.Наименование,
	               |	ActivityCodes.Код
	               |ИЗ
	               |	Справочник.ActivityCodes КАК ActivityCodes
	               |ГДЕ
	               |	ActivityCodes.Код В(&МассивКодов)";
	        		          				         	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьДатуИзСтроки(Знач ДатаСтрока) 
	   	
	ДатаСтрока = СокрЛП(ДатаСтрока);
	
	ПозицияРазделителя = СтрНайти(ДатаСтрока, "/");
	Если ПозицияРазделителя = 0 Тогда 
		ПозицияРазделителя = СтрНайти(ДатаСтрока, ".");
	КонецЕсли;
	
	МесяцСтрока = Лев(ДатаСтрока, ПозицияРазделителя-1);
	Попытка
		Месяц = Число(СокрЛП(МесяцСтрока));
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	ДатаСтрока = Сред(ДатаСтрока, ПозицияРазделителя+1);

	ПозицияРазделителя = СтрНайти(ДатаСтрока, "/");
	Если ПозицияРазделителя = 0 Тогда 
		ПозицияРазделителя = СтрНайти(ДатаСтрока, ".");
	КонецЕсли;
	
	ДеньСтрока = Лев(ДатаСтрока, ПозицияРазделителя-1);
	Попытка
		День = Число(СокрЛП(ДеньСтрока));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ГодСтрока = Прав(ДатаСтрока, 4);	
	Попытка
		Год = Число(ГодСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		ИтоговаяДата = Дата(Год, Месяц, День);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИтоговаяДата;
			
КонецФункции

