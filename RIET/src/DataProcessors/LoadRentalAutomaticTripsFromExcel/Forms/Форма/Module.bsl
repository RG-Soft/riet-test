
//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Load();
	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьФайл();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Files xlsx (*.xlsx)|*.xlsx|Files xls (*.xls)|*.xls";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load()
	
	Если ТаблицаServices.Количество() > 0 И Вопрос("Таблица будет очищена. Вы уверены?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаServices.Очистить();
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
	НастройкиДиалога.Вставить("Rental", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);	
КонецПроцедуры
                      
&НаСервере
Процедура СоздатьИЗаполнитьServices(Отказ) 
	
	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ТЧ.TotalNumOfParcels,
	|	ВТ_ТЧ.GrossWeightKG,
	//|	ВТ_ТЧ.TotalCostsSum,
	|	ВТ_ТЧ.BaseCostsSum,
	|	ВТ_ТЧ.TotalAccessorialCostsSum,
	//|	ВТ_ТЧ.Description,
	|	ВТ_ТЧ.ServiceProvider,
	|	ВТ_ТЧ.TRNumber,
	|	ВТ_ТЧ.EquipmentNo,
	|	ВТ_ТЧ.WaybillNo,
	|	ВТ_ТЧ.PlannedArrivalSource,
	|	ВТ_ТЧ.PlannedDepartureSource,
	|	ВТ_ТЧ.PlannedArrivalDestination,
	|	ВТ_ТЧ.PlannedDepartureDestination,
	|	ВТ_ТЧ.Mileage,
	|	ВТ_ТЧ.Comments
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ТЧ КАК ВТ_ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.TotalNumOfParcels,
	|	ВТ_ТЧ.GrossWeightKG,
	//|	ВТ_ТЧ.TotalCostsSum,
	|	ВТ_ТЧ.BaseCostsSum,
	|	ВТ_ТЧ.TotalAccessorialCostsSum,
	//|	ВТ_ТЧ.Description,
	|	ВТ_ТЧ.ServiceProvider,
	|	ВТ_ТЧ.TRNumber,
	|	ВТ_ТЧ.EquipmentNo,
	|	ВТ_ТЧ.WaybillNo КАК WaybillNo,
	|	ВТ_ТЧ.PlannedArrivalSource,
	|	ВТ_ТЧ.PlannedDepartureSource,
	|	ВТ_ТЧ.PlannedArrivalDestination,
	|	ВТ_ТЧ.PlannedDepartureDestination,
	|	ВТ_ТЧ.Mileage,
	|	ВТ_ТЧ.Comments,
	|	ЕСТЬNULL(TripNonLawsonCompanies.Ссылка, """") КАК TripRef
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
	|		ПО (ВЫРАЗИТЬ(ВТ_ТЧ.WaybillNo КАК СТРОКА(150)) ПОДОБНО ВЫРАЗИТЬ(TripNonLawsonCompanies.WaybillNo КАК СТРОКА(150)))
	|			И (TripNonLawsonCompanies.WaybillNo <> """"
	|				И TripNonLawsonCompanies.TypeOfTransport = ЗНАЧЕНИЕ(Перечисление.TypesOfTransport.RentalAutomatic))";
	
	Запрос.УстановитьПараметр("ТЧ",ТаблицаServices.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.TripRef) Тогда
			
			ДобавитьВСуществующийДокумент(ВыборкаДетальныеЗаписи);
			
		Иначе
			
			СоздатьНовыйДокумент(ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
		Отказ = Ложь;
	
	КонецЦикла;
	
	Для Каждого Элемент Из ТаблицаServices Цикл
		
		Если ЗначениеЗаполнено(Элемент.WaybillNo) И НЕ ЗначениеЗаполнено(Элемент.Trip) тогда
			Элемент.Trip = ЗаполнитьTripПоWB(Элемент.WaybillNo);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВСуществующийДокумент(СтрокаВыборки)
	
	ДокОбъект = СтрокаВыборки.TripRef.ПолучитьОбъект();
	
	Если ДокОбъект.Parcels.Количество() > 0 Тогда
		ДокОбъект.Parcels[0].NumOfParcels = СтрокаВыборки.TotalNumOfParcels;	
	КонецЕсли;
	
	// { RGS LKhristyuk 5/21/2018 11:04:09 AM
	//ДопСтатьяЗатрат = ПоискДобавлениеСтатьиЗатрат(СтрокаВыборки.Description);
	//СущСтатья = ДокОбъект.Costs.Найти(ДопСтатьяЗатрат,"CostType");
	//Если СущСтатья <> Неопределено Тогда
	//	СущСтатья.Sum = СтрокаВыборки.TotalAccessorialCostsSum;
	//Иначе	
	//	СтрокаCosts = ДокОбъект.Costs.Добавить();
	//	СтрокаCosts.CostType = ДопСтатьяЗатрат;
	//	СтрокаCosts.Description = СтрокаВыборки.Description;
	//	СтрокаCosts.Sum = СтрокаВыборки.TotalAccessorialCostsSum;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВыборки.TotalAccessorialCostsSum) Тогда
		СтрокаCosts = ДокОбъект.Costs.Добавить();
		СтрокаCosts.Sum = СтрокаВыборки.TotalAccessorialCostsSum;
	КонецЕсли;
	
	// } RGS LKhristyuk 5/21/2018 11:04:09 AM 

	
	ДокОбъект.Currency = Справочники.Валюты.НайтиПоКоду("643");
	ДокОбъект.BaseCostsSum = СтрокаВыборки.BaseCostsSum;
	// { RGS LKhristyuk 5/21/2018 10:33:03 AM
	//ДокОбъект.TotalCostsSum = СтрокаВыборки.TotalCostsSum;
	ДокОбъект.TotalCostsSum = СтрокаВыборки.BaseCostsSum + СтрокаВыборки.TotalAccessorialCostsSum;
	// } RGS LKhristyuk 5/21/2018 10:33:03 AM 
	
	
	Попытка
		ДокОбъект.Записать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обновлена информация в документе - " + ДокОбъект );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("не удалось обновить данные в документе - " + ДокОбъект);
	КонецПопытки
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйДокумент(СтрокаВыборки)
	
	//Сообщить("Создаем новый");
	НовыйДокумент = Документы.TripNonLawsonCompanies.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,СтрокаВыборки);
	НовыйДокумент.TypeOfTransport = Перечисления.TypesOfTransport.RentalAutomatic;
	
	Если ЗначениеЗаполнено(СтрокаВыборки.ServiceProvider) Тогда
		ServiceProvider = Справочники.ServiceProviders.НайтиПоНаименованию(СокрЛП(СтрокаВыборки.ServiceProvider));
		Если ServiceProvider <> Неопределено Тогда
			
			НовыйДокумент.ServiceProvider = ServiceProvider;
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаВыборки.TRNumber) Тогда 
		СтруктураПарсели = ПолучитьДанныеПоПарселям(СтрокаВыборки.TRNumber);
		Если СтруктураПарсели <> Неопределено Тогда
			СтрокаParcel =  НовыйДокумент.Parcels.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаParcel, СтруктураПарсели);
			СтрокаParcel.NumOfParcels = СтрокаВыборки.TotalNumOfParcels;
			
			МассивParcels = Новый Массив;
			МассивParcels.Добавить(СтруктураПарсели.Parcel);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено парселей по TR - " + СтрокаВыборки.TRNumber);
			Возврат;
		КонецЕсли;
		Результат = ОбновитьПодвалParcelsИТаблицуStopsНаСервере(МассивParcels,НовыйДокумент);
		
		//Source
		
		// { RGS LKhristyuk 5/21/2018 11:12:57 AM
		КолвоСекундВЧасе = 60*60;
		//НовыйДокумент.Stops[0].PlannedArrivalLocalTime = СтрокаВыборки.PlannedArrivalSource;
		НовыйДокумент.Stops[0].PlannedArrivalLocalTime = НачалоДня(СтрокаВыборки.PlannedArrivalSource) + КолвоСекундВЧасе * 7;		
		НовыйДокумент.Stops[0].PlannedArrivalUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
		НовыйДокумент.Stops[0].PlannedArrivalLocalTime, НовыйДокумент.Stops[0].Location);
		
		//НовыйДокумент.Stops[0].PlannedDepartureLocalTime = СтрокаВыборки.PlannedDepartureSource;
		НовыйДокумент.Stops[0].PlannedDepartureLocalTime = НачалоДня(СтрокаВыборки.PlannedDepartureSource) + КолвоСекундВЧасе * 8;
		НовыйДокумент.Stops[0].PlannedDepartureUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
		НовыйДокумент.Stops[0].PlannedDepartureLocalTime, НовыйДокумент.Stops[0].Location);
		// } RGS LKhristyuk 5/21/2018 11:12:57 AM 
		
		
		//Destination
		
		// { RGS LKhristyuk 5/21/2018 11:18:16 AM
		//НовыйДокумент.Stops[1].PlannedArrivalLocalTime = СтрокаВыборки.PlannedArrivalDestination;
		НовыйДокумент.Stops[1].PlannedArrivalLocalTime = НачалоДня(СтрокаВыборки.PlannedArrivalDestination) + КолвоСекундВЧасе * 22;
		НовыйДокумент.Stops[1].PlannedArrivalUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
		НовыйДокумент.Stops[1].PlannedArrivalLocalTime, НовыйДокумент.Stops[1].Location);
		
		//НовыйДокумент.Stops[1].PlannedDepartureLocalTime = СтрокаВыборки.PlannedDepartureDestination;
		НовыйДокумент.Stops[1].PlannedDepartureLocalTime = НачалоДня(СтрокаВыборки.PlannedDepartureDestination) + КолвоСекундВЧасе * 23;
		НовыйДокумент.Stops[1].PlannedDepartureUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
		НовыйДокумент.Stops[1].PlannedDepartureLocalTime, НовыйДокумент.Stops[1].Location);
		// } RGS LKhristyuk 5/21/2018 11:18:16 AM

		// { RGS LKhristyuk 5/21/2018 11:02:28 AM
		НовыйДокумент.Stops[1].Mileage =  СтрокаВыборки.Mileage;
		НовыйДокумент.Stops[1].Manually = Истина;
		// } RGS LKhristyuk 5/21/2018 11:02:28 AM 		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВыборки.TotalAccessorialCostsSum) Тогда
		СтрокаCosts = НовыйДокумент.Costs.Добавить();
		//ДопСтатьяЗатрат = ПоискДобавлениеСтатьиЗатрат(СтрокаВыборки.Description);
		////СтрокаCosts.CostType = Справочники.AccessorialCosts.НайтиПоНаименованию("АРЕНДА ТЕХНИКИ");
		//СтрокаCosts.CostType = ДопСтатьяЗатрат;
		//СтрокаCosts.Description = СтрокаВыборки.Description;
		СтрокаCosts.Sum = СтрокаВыборки.TotalAccessorialCostsSum;
	КонецЕсли;
	
	// { RGS AArsentev 15.05.2018
	НовыйДокумент.MOT = Справочники.MOTs.НайтиПоКоду("TRUCK");
	НовыйДокумент.Specialist = ПараметрыСеанса.ТекущийПользователь;
	Transport = ОпределитьEquipment(СтрокаВыборки.EquipmentNo);
	Если ЗначениеЗаполнено(Transport) Тогда
		НовыйДокумент.Transport = Transport.Ссылка;
		Если ЗначениеЗаполнено(Transport.Equipment) Тогда
			НовыйДокумент.Equipment = Transport.Equipment;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определён 'Equipment' для ТС - " + СтрокаВыборки.EquipmentNo);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определён 'Transport' для номера ТС - " + СтрокаВыборки.EquipmentNo);
	КонецЕсли;
	НовыйДокумент.Currency = Справочники.Валюты.НайтиПоКоду("643");
	НовыйДокумент.BaseCostsSum = СтрокаВыборки.BaseCostsSum;
	// { RGS LKhristyuk 5/21/2018 10:29:05 AM
	//НовыйДокумент.TotalCostsSum = СтрокаВыборки.TotalCostsSum;
	НовыйДокумент.TotalCostsSum = СтрокаВыборки.BaseCostsSum + СтрокаВыборки.TotalAccessorialCostsSum;
	// } RGS LKhristyuk 5/21/2018 10:29:05 AM 
	НовыйДокумент.CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual;
	
	// } RGS AArsentev 15.05.2018
	
	//НовыйДокумент.ОбменДанными.Загрузка = Истина;
	Попытка
		НовыйДокумент.Записать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан новый документ - " + НовыйДокумент);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать Trip к документу - " + СтрокаВыборки.TRNumber);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоПарселям(TR)
	
	Парсели = Новый Структура();
	TRСсылка = Документы.TransportRequest.НайтиПоНомеру(TR);
	Если TRСсылка <> Документы.TransportRequest.ПустаяСсылка() Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.Qty,
		|	ParcelsДетали.Ссылка
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.Ссылка.TransportRequest = &TransportRequest";
		
		Запрос.УстановитьПараметр("TransportRequest", TRСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Парсели.Вставить("Parcel", ВыборкаДетальныеЗаписи.Ссылка);	
			Парсели.Вставить("NumOfParcels", ВыборкаДетальныеЗаписи.Qty);
			Возврат Парсели;	
			
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьПодвалParcelsИТаблицуStopsНаСервере(МассивParcels, ТекОбъект=Неопределено)
	
	//Если ТекОбъект = Неопределено Тогда 
	//	Stops = Объект.Stops;
	//	ТекОбъект = Объект;
	//иначе
		Stops = ТекОбъект.Stops;
	//КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Parcels.Ссылка КАК Parcel,
	               |	Parcels.TransportRequest КАК TR
	               |ПОМЕСТИТЬ TRs
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |ГДЕ
	               |	Parcels.Ссылка В(&МассивParcels)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.TR,
	               |	TRs.TR.PickUpWarehouse КАК Location
	               |ИЗ
	               |	TRs КАК TRs
	               |ГДЕ
	               |	TRs.TR.PickUpWarehouse = TRs.TR.DeliverTo
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.TR
	               |ИЗ
	               |	TRs КАК TRs
	               |ГДЕ
	               |	НЕ TRs.TR.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TransportRequest.PickUpWarehouse КАК Location,
	               |	TransportRequest.ReadyToShipLocalTime КАК ReadyToShipLocalTime,
	               |	TransportRequest.ReadyToShipUniversalTime КАК ReadyToShipUniversalTime,
	               |	NULL КАК RequiredDeliveryLocalTime,
	               |	NULL КАК RequiredDeliveryUniversalTime
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Документ.TransportRequest КАК TransportRequest
	               |ГДЕ
	               |	TransportRequest.Ссылка В
	               |			(ВЫБРАТЬ
	               |				TRs.TR КАК TR
	               |			ИЗ
	               |				TRs)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	TransportRequest.DeliverTo,
	               |	NULL,
	               |	NULL,
	               |	TransportRequest.RequiredDeliveryLocalTime,
	               |	TransportRequest.RequiredDeliveryUniversalTime
	               |ИЗ
	               |	Документ.TransportRequest КАК TransportRequest
	               |ГДЕ
	               |	TransportRequest.Ссылка В
	               |			(ВЫБРАТЬ
	               |				TRs.TR КАК TR
	               |			ИЗ
	               |				TRs)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Location,
	               |	МАКСИМУМ(ВТ.ReadyToShipLocalTime) КАК MaximumReadyToShipLocalTime,
	               |	МАКСИМУМ(ВТ.ReadyToShipUniversalTime) КАК MaximumReadyToShipUniversalTime,
	               |	МИНИМУМ(ВТ.RequiredDeliveryLocalTime) КАК MinimumRequiredDeliveryLocalTime,
	               |	МИНИМУМ(ВТ.RequiredDeliveryUniversalTime) КАК MinimumRequiredDeliveryUniversalTime
	               |ИЗ
	               |	ВТ КАК ВТ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Location
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.Parcel.GrossWeightKG КАК GrossWeightKG,
	               |	TRs.Parcel.CubicMeters КАК CubicMeters,
	               |	TRs.Parcel.NumOfParcels КАК NumOfParcels,
	               |	TRs.Parcel
	               |ИЗ
	               |	TRs КАК TRs
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	TRs.TR.Loading КАК Loading,
	               |	TRs.TR.PickUpWarehouse КАК Location
	               |ИЗ
	               |	TRs КАК TRs";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// проверим, что все заявки приняты
	
	ТекстОшибкиNotAcceptedTRs = "";
	ВыборкаNotAcceptedTRs = Результат[2].Выбрать(); 
	Пока ВыборкаNotAcceptedTRs.Следующий() Цикл
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибкиNotAcceptedTRs = ТекстОшибкиNotAcceptedTRs + "
			|""" + СокрЛП(ВыборкаNotAcceptedTRs.TR) +""" не принята специалистом в работу: ";
		Иначе 	
			ТекстОшибкиNotAcceptedTRs = ТекстОшибкиNotAcceptedTRs + "
			|""" + СокрЛП(ВыборкаNotAcceptedTRs.TR) +""" is not accepted by specialist: ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибкиNotAcceptedTRs) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(ТекстОшибкиNotAcceptedTRs));
		Возврат Ложь;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// обновим STOPS
	
	// для Secondary charge (вторичные расходы, например для переупаковки на одной локации)
	// может быть одна локация и Source (PickUp) = Destination (DeliverTo)
	
	ТаблицаSourceРавноDestination = Результат[1].Выгрузить();
	ТаблицаNewLocations = Результат[4].Выгрузить();

	Если ТаблицаSourceРавноDestination.Количество() > 0 
		И ТаблицаNewLocations.Количество() > 1 Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не допустимо включать в поставку несколько Заявок с разными локациями, 
			|если хотя бы в одной заявке пункт отправления равен пункту назначения: ";
		Иначе 	
			ТекстОшибки = "It is not allowed to include several requests with differnet locations, 
			|in case at least in one request pick-up is equal to deliver-to: ";
		КонецЕсли;

		Для Каждого СтрTR из ТаблицаSourceРавноDestination Цикл 
			ТекстОшибки = ТекстОшибки + "
			|" + СокрЛП(СтрTR.TR) + ": " + СокрЛП(СтрTR.Location);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////
	
	ТаблицаOldLocations = Stops.Выгрузить();
	
	СтруктураПоиска = Новый Структура("Location");
	
	// добавим новые строки
	Для Каждого СтрокаТЗNew из ТаблицаNewLocations Цикл 
		
		СтруктураПоиска.Location = СтрокаТЗNew.Location;
		
		// ищем в старых локациях
		МассивСтрокТЗ = ТаблицаOldLocations.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокТЗ.Количество() = 0 Тогда 
			
			// если не нашли - добавляем строку
			СтрокаStop = Stops.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаStop, СтрокаТЗNew);
			Модифицированность = Истина;
			
		Иначе 
			
			// если нашли - обновляем все строки 
			//(может быть Source (PickUp) = Destination (DeliverTo)) и две строки с одной локацией
			МассивСтрок = Stops.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрStop Из МассивСтрок Цикл 
				ЗаполнитьЗначенияСвойств(СтрStop, СтрокаТЗNew);
			КонецЦикла;
			
			//удалим строки как обработанные, чтобы оставить только строки со старыми локациями для удаления
			Для Каждого Стр Из МассивСтрокТЗ Цикл
				ТаблицаOldLocations.Удалить(Стр);
			КонецЦикла;
			
		КонецЕсли;
		 	
	КонецЦикла;
	
	// удалим старые строки
	Для Каждого СтрокаТЗ из ТаблицаOldLocations Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		МассивСтрок = Stops.НайтиСтроки(СтруктураПоиска);
		
		Stops.Удалить(МассивСтрок[0]);
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	// если одна локация, то ставим type source и копируем как destination
	Если Stops.Количество() = 1 Тогда 
		
		Строка1 = Stops[0];		
		Строка2 = Stops.Добавить();
		ЗаполнитьЗначенияСвойств(Строка2, Строка1);
		
		Строка1.Type = Перечисления.StopsTypes.Source;
		Строка2.Type = Перечисления.StopsTypes.Destination;
		
		Модифицированность = Истина;
		// { RGS LKhristyuk 5/14/2018 3:34:01 PM
	Иначе
		Stops[0].Type = Перечисления.StopsTypes.Source;
		Stops[1].Type = Перечисления.StopsTypes.Destination;
		
		// } RGS LKhristyuk 5/14/2018 3:34:01 PM 
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////	 	
	// Loading
	
	ТЗLoading = Результат[6].Выгрузить();
	СтруктураОтбораLocation = Новый Структура("Location");
	Для Каждого Стр из Stops Цикл 
		
		СтруктураОтбораLocation.Location = Стр.Location;
		ТЗLocationLoading = ТЗLoading.Скопировать(СтруктураОтбораLocation);
		МассивLocationLoading = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗLocationLoading, "Loading");
		Стр.Loading = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивLocationLoading);
	
	КонецЦикла;

	/////////////////////////////////////////////////////////////	 	
	// обновим подвал parcels
	
	ТЗParcels = Результат[5].Выгрузить();
	
	ТЗОбъектParcels = ТекОбъект.Parcels.Выгрузить();
	
	ИтогGrossWeightKG = 0;
	ИтогCubicMeters = 0;
	Для Каждого Стр из ТЗParcels Цикл 
		СтрParcel = ТЗОбъектParcels.Найти(Стр.Parcel, "Parcel");
		ИтогGrossWeightKG = ИтогGrossWeightKG + (Стр.GrossWeightKG / Стр.NumOfParcels) * ?(СтрParcel=Неопределено,Стр.NumOfParcels,СтрParcel.NumOfParcels);
		ИтогCubicMeters = ИтогCubicMeters + (Стр.CubicMeters / Стр.NumOfParcels) * ?(СтрParcel=Неопределено,Стр.NumOfParcels,СтрParcel.NumOfParcels);
	КонецЦикла;
	
	ИтогGrossWeightKG = Окр(ИтогGrossWeightKG, 3);
	Если ТекОбъект.GrossWeightKG <> ИтогGrossWeightKG Тогда
		ТекОбъект.GrossWeightKG = ИтогGrossWeightKG;
		Модифицированность = Истина;
	КонецЕсли;
	
	ИтогCubicMeters = Окр(ИтогCubicMeters, 4);
	Если ТекОбъект.CubicMeters <> ИтогCubicMeters Тогда
		ТекОбъект.CubicMeters = ИтогCubicMeters;
		Модифицированность = Истина;
	КонецЕсли;

	ИтогTotalNumOfParcels = ТЗParcels.Количество();
	Если ТекОбъект.TotalNumOfParcels <> ИтогTotalNumOfParcels Тогда
		ТекОбъект.TotalNumOfParcels = ИтогTotalNumOfParcels;
		Модифицированность = Истина;
	КонецЕсли;

	//ОбновитьПредставлениеDuration();
	//
	//ОбновитьДинамическиеКолонкиStops(ТекОбъект);
	
	//Recharge.Параметры.УстановитьЗначениеПараметра("Parcels", МассивParcels);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоискДобавлениеСтатьиЗатрат(Статья)
	
	НоваяСтатья = СокрЛП(ВРег(Статья));
	Результат = Справочники.AccessorialCosts.НайтиПоНаименованию(НоваяСтатья);
	//Если Результат = Справочники.AccessorialCosts.ПустаяСсылка() Тогда
	//	Результат = Справочники.AccessorialCosts.СоздатьЭлемент();
	//	Результат.Наименование = НоваяСтатья;
	//	Результат.Код = НоваяСтатья;
	//	Результат.Записать();
	//	Сообщить("Дополнительная статья затрат " + НоваяСтатья + " отсутствует в справочнике, добавлена автоматически");
	//КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура CreateTrips(Команда)
	Состояние("Creating / updating services...");
	СоздатьИЗаполнитьServices(Ложь);
КонецПроцедуры

&НаСервере
Функция СтрВДату(Знач сДата)
	
	Перем п_мТЕМП; // массив временных переменных
	
	//-----для локализации ------------------------------
	Перем п_мФорматы;
	п_мФорматы = Новый Массив(4);
	п_мФорматы[0] = "г";	// знак года
	п_мФорматы[1] = "ЧЦ=2; ЧН=; ЧВН=";
	п_мФорматы[2] = "ЧГ=0";	
	п_мФорматы[3] = "ДФ=МММ";
	//---------------------------------------------------
	
	Если ПустаяСтрока(сДата) Тогда
		п_мТЕМП[6] =Дата("00010101000000");
		Возврат п_мТЕМП[6];
	КонецЕсли;
	
	сДата = Формат(сДата, п_мФорматы[2]);		//на случай если в формате 1с числом: 20150320220315. (+локализация)
	
	//Если использовать конструкцию "Если Найти(сДата,..." , то перебор букв строки будет происходить 2а раза: Найти и СтрЗаменить //Использование Найти в данном случае бессмысленно
	// можно добавить любой разделитель - @, #, %, и тд, неважно. Главное, заменить их на "."
	сДата = СтрЗаменить(сДата, "«", ""); 			//«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, "»", "");			//«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, п_мФорматы[0] + ".", "");   //1 Фев 05 г. 17:20:00 //просто "г" нельзя из-за "авГуст", например. Но в далее,после парсинга месяца, любое "г" в строке,  удаляется
	сДата = СтрЗаменить(сДата, "/", ".");			// 1/2/5
	сДата = СтрЗаменить(сДата, "\", ".");			// 1\02\05
	сДата = СтрЗаменить(сДата, "-", ".");			// 1-02-05
	сДата = СтрЗаменить(сДата, Символы.Таб, ".");		// 01.02.2005	17:20:00	
	сДата = СтрЗаменить(сДата, " ", ".");			// 1/02 2005 17:20:00
	сДата = СтрЗаменить(сДата, "..",  ".");			//Возможны, появление двойных точек из за "янв." в "янв" или из-за " г. ".	
	сДата = НРег(СокрЛП(сДата)); 				// строку в нижний регистр, чтоб проще было с Янв Январь янв и тд
	
	п_мТЕМП = Новый массив(7);//массив для временных переменных	
	
	п_мТЕМП[0] = Найти(сДата,".");
	
	Если п_мТЕМП[0] = 0 Тогда
		//если точек нет
		
		Если Найти(сДата,":") Тогда
			//только время (или ошибка)
			сДата = "01.01.0001." + сДата;
			п_мТЕМП[0] = Найти(сДата,".");
		иначе			
			//похоже на формат 1с. Можно добавить "попытку"...
			п_мТЕМП[6] = дата(сДата);
			Возврат п_мТЕМП[6];
			
		КонецЕсли;	
		
		
		//иначеЕсли п_мТЕМП[0] = 1 Тогда
		//		//например, месяц и год
	КонецЕсли;
	
	
	// ----- ДНИ -------------------------------------
	п_мТЕМП[0] = Лев(сДата, п_мТЕМП[0] - 1);//дни 
	п_мТЕМП[4] = Прав(сДата, СтрДлина(сДата) - СтрДлина(п_мТЕМП[0])-1);// месяц и все что справа
	п_мТЕМП[0] = Формат(Число(п_мТЕМП[0]),п_мФорматы[1]);//дни в формат двух чисел
	// ----- Месяц -----------------------------------
	п_мТЕМП[1] = Лев(п_мТЕМП[4], найти(п_мТЕМП[4],".") - 1);// месяц
	п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[1])-1);// год и все что справа
	//Возможны варианты месяца "янв" "янв." "январь" "января" 
	Если СтрДлина(п_мТЕМП[1]) > 2 Тогда // месяц в виде янв или январь
		
		п_мТЕМП[2] = 0;
		Пока п_мТЕМП[2] < 12 Цикл 
			
			п_мТЕМП[2] = п_мТЕМП[2]+1;
			// берем из "янв." только "янв"
			п_мТЕМП[3] = СтрЗаменить(Формат(Дата("2001" + Формат(п_мТЕМП[2],п_мФорматы[1]) + "01"), п_мФорматы[3]),".","");// + локализация
			
			п_мТЕМП[3] = найти(п_мТЕМП[1], п_мТЕМП[3]);
			
			Если п_мТЕМП[3] > 0 тогда
				п_мТЕМП[1] = Формат(п_мТЕМП[2],п_мФорматы[1]);
				прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		п_мТЕМП[1] = Формат(Число(п_мТЕМП[1]),п_мФорматы[1]);
	КонецЕсли;
	// ----- ГОД -----------------------------------
	//Если в строке было "г" без точки("г.")
	п_мТЕМП[4] = СтрЗаменить(п_мТЕМП[4], п_мФорматы[0], "");
	//ищем год. Дата может быть без времени, т.е. год последний в строке
	п_мТЕМП[2] = Найти(п_мТЕМП[4],".");
	
	Если п_мТЕМП[2]>0 Тогда
		п_мТЕМП[2] =  Лев(п_мТЕМП[4], п_мТЕМП[2] - 1);// год
		п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[2])-1);//время и все что справа
	Иначе
		п_мТЕМП[2] = п_мТЕМП[4];
		п_мТЕМП[4] = "";
	КонецЕсли;	
	
	//проверяем год
	п_мТЕМП[3] = СтрДлина(п_мТЕМП[2]);
	//если год из двух цыфр
	Если п_мТЕМП[3] = 2 или п_мТЕМП[3] = 1 Тогда
		п_мТЕМП[3] = Число(п_мТЕМП[2]);// год как число
		
		//что означает 15 в "20.03.15"? это 2015г или 1915г? (Настраиваем под себя или выдаём ошибку)
		// в моем варианте если  < 50 то это 2000г. иначе 1900г.
		Если п_мТЕМП[3] < 50 Тогда 
			п_мТЕМП[2] = "20" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		Иначе
			п_мТЕМП[2] = "19" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		КонецЕсли;	
		
	КонецЕсли;
	
	// =======================  Форматируем время ==============================
	п_мТЕМП[6] = СтрЗаменить(п_мТЕМП[4],":", ".");// если дата была, например: 17-30-10, то сейчас 17.30.10 
	//"попытка" на преобразование даты, по времени, занимает столько же, а по ресурсам больше, чем сам парсинг времени. 
	//поэтому, убиваем двух зайцев перебором часы/мин/сек сразу
	Если СтрДлина(п_мТЕМП[6]) > 0 Тогда
		
		п_мТЕМП[5] = найти(п_мТЕМП[6],".");
		Если п_мТЕМП[5] > 0 Тогда
			// ========= часы	=================
			п_мТЕМП[3] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);//часы 
			п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[3])-1);// минуты и все что справа
			
			Если п_мТЕМП[3] = "" тогда
				п_мТЕМП[3] = "00";		
			Иначе
				//при переводе в дату лидирующий 0 у часов удаляется. Т.е. след. строка бесполезна
				//п_мТЕМП[3] = Формат(Число(п_мТЕМП[3]),п_мФорматы[1]);//часы в формат двух чисел	 
			КонецЕсли;		
			
			п_мТЕМП[5] = найти(п_мТЕМП[6],".");
			Если п_мТЕМП[5] > 0 Тогда
				// ========= минуты	=================
				п_мТЕМП[4] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);
				п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[4])-1);// секунды и все что справа
				Если п_мТЕМП[4] = "" тогда
					п_мТЕМП[4] = "00";		
				Иначе
					п_мТЕМП[4] = Формат(Число(п_мТЕМП[4]),п_мФорматы[1]);//минуты в формат двух чисел	 
				КонецЕсли;
				
				// ========= секунды	=================
				Если СтрДлина(п_мТЕМП[6]) = 0 Тогда
					п_мТЕМП[5] = "00";		
				Иначе
					п_мТЕМП[5] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);//секунды в формат двух чисел	 
				КонецЕсли;
				
			Иначе
				п_мТЕМП[4] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);	
				п_мТЕМП[5] = "00";			
			КонецЕсли;	 
		Иначе
			п_мТЕМП[3] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);		
			п_мТЕМП[4] = "00";
			п_мТЕМП[5] = "00";
		КонецЕсли;
		
	Иначе
		п_мТЕМП[3] = "00";		
		п_мТЕМП[4] = "00";
		п_мТЕМП[5] = "00";			
	КонецЕсли;
	
	п_мТЕМП[6] = п_мТЕМП[0] + "." + п_мТЕМП[1] + "." + п_мТЕМП[2] + " " + п_мТЕМП[3] + ":" + п_мТЕМП[4] + ":" + п_мТЕМП[5];
	п_мТЕМП[6] = дата(п_мТЕМП[6]);
	
	Возврат п_мТЕМП[6];
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьEquipment(EquipmentNo)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Transport.Ссылка,
	|	Transport.Equipment
	|ИЗ
	|	Справочник.Transport КАК Transport
	|ГДЕ
	|	Transport.Код = &Код";
	Запрос.УстановитьПараметр("Код", СокрЛп(EquipmentNo));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьTripПоWB(WaybillNo)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompanies.Ссылка
	|ИЗ
	|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
	|ГДЕ
	|	TripNonLawsonCompanies.WaybillNo = &WaybillNo
	|	И TripNonLawsonCompanies.TypeOfTransport = ЗНАЧЕНИЕ(Перечисление.TypesOfTransport.RentalAutomatic)";
	Запрос.УстановитьПараметр("WaybillNo", WaybillNo);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ШаблонExcel(Команда)
	Адрес = ПолучитьАдрес();
	ИмяФайла = "Trip automatic template.xlsx";
	ПолучитьФайл(Адрес, ИмяФайла);
КонецПроцедуры

&НаСервере
Функция ПолучитьАдрес()
	Возврат ПоместитьВоВременноеХранилище(Обработки.LoadRentalAutomaticTripsFromExcel.ПолучитьМакет("ШаблонФайлаЗагрузки"));
КонецФункции

&НаКлиенте
Процедура LoadFile(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, AP)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, AP);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, AP)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	Если ЗначениеЗаполнено(ТекстОшибок) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибок);
		Возврат;
	Иначе
		Для каждого СтрокаТЗ Из ТаблицаExcel Цикл
			Если СтрокаТЗ.НомерСтрокиФайла < 3 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ServiceProvider) И НЕ ЗначениеЗаполнено(СтрокаТЗ.TRNumber) Тогда
				Продолжить
			КонецЕсли;
			СтрокаДобавляемая = ТаблицаServices.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемая, СтрокаТЗ);
			Если ЗначениеЗаполнено(СтрокаДобавляемая.WaybillNo) И НЕ ЗначениеЗаполнено(СтрокаДобавляемая.Trip) тогда
				СтрокаДобавляемая.Trip = ЗаполнитьTripПоWB(СтрокаДобавляемая.WaybillNo);
			КонецЕсли;
			СтрокаДобавляемая.PlannedArrivalSource = СтрВДату(СтрокаТЗ.PlannedArrivalSource);
			СтрокаДобавляемая.PlannedDepartureSource = СтрВДату(СтрокаТЗ.PlannedDepartureSource);
			СтрокаДобавляемая.PlannedArrivalDestination = СтрВДату(СтрокаТЗ.PlannedArrivalDestination);
			СтрокаДобавляемая.PlannedDepartureDestination = СтрВДату(СтрокаТЗ.PlannedDepartureDestination);	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры = "ServiceProvider, TRNumber, EquipmentNo, WaybillNo, TotalNumOfParcels, GrossWeightKG, Mileage, BaseCostsSum,
							|TotalAccessorialCostsSum, PlannedArrivalSource, PlannedDepartureSource, PlannedArrivalDestination, PlannedDepartureDestination, Comments";
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекстЯчейки = "ServiceProvider" Тогда
			СтруктураКолонокИИндексов.ServiceProvider = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "TR Number" Тогда
			СтруктураКолонокИИндексов.TRNumber = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "EquipmentNo" Тогда
			СтруктураКолонокИИндексов.EquipmentNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Waybill No" Тогда
			СтруктураКолонокИИндексов.WaybillNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "TotalNumOfParcels" Тогда
			СтруктураКолонокИИндексов.TotalNumOfParcels = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Mileage" Тогда
			СтруктураКолонокИИндексов.Mileage = НомерКолонки;	
		ИначеЕсли ТекстЯчейки = "GrossWeightKG" Тогда
			СтруктураКолонокИИндексов.GrossWeightKG = НомерКолонки;
		//ИначеЕсли ТекстЯчейки = "TotalCostsSum" Тогда
		//	СтруктураКолонокИИндексов.TotalCostsSum = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "BaseCostsSum" Тогда
			СтруктураКолонокИИндексов.BaseCostsSum = НомерКолонки;
		//ИначеЕсли ТекстЯчейки = "DescriptionAccessorialCosts" Тогда
		//	СтруктураКолонокИИндексов.Description = НомерКолонки;			
		ИначеЕсли ТекстЯчейки = "TotalAccessorialCostsSum" Тогда
			СтруктураКолонокИИндексов.TotalAccessorialCostsSum = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Planned Arrival Source" Тогда
			СтруктураКолонокИИндексов.PlannedArrivalSource = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Planned Departure Source" Тогда
			СтруктураКолонокИИндексов.PlannedDepartureSource = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Planned Arrival Destination" Тогда
			СтруктураКолонокИИндексов.PlannedArrivalDestination = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Planned Departure Destination" Тогда
			СтруктураКолонокИИндексов.PlannedDepartureDestination = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Comments" Тогда
			СтруктураКолонокИИндексов.Comments = НомерКолонки;
		КонецЕсли;
	
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции
