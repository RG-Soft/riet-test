
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура запускает сервисные функции необходимые для создания вопроса
//
Функция ОтправитьСообщениеНаСервере(КодВопроса, СообщениеХТМЛ, СообщениеТекст)
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		Возврат Прокси.ДобавитьСообщениеВВопрос(ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст, Ложь);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	
КонецФункции

&НаСервере
// Процедура получает данные для текста вопроса
//
Функция ПолучитьТекстОбсужденияВопроса()
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ПараметрВхода = Новый Структура;
		ПараметрВхода.Вставить("ГУИДВопроса", ГУИДВопроса);
		ПараметрВхода.Вставить("ПоказатьПолностью", Истина);
		ТекстВопросаИзБазы = Прокси.ТекстВопроса(ЗначениеВСтрокуВнутр(ПараметрВхода), ПравоЗакрытияТекВопроса);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат "";
	КонецПопытки; 

	Возврат ТекстВопросаИзБазы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиУчастниковВопроса()
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ТаблицаУчастниковОбсуждения = ЗначениеИзСтрокиВнутр(Прокси.ПолучитьТаблицуУчастниковОбсужденияВопроса(ГУИДВопроса));
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат;
	КонецПопытки; 
	
	ОтКого.Очистить();
	Кому.Очистить();
	СторонниеНаблюдатели.Очистить();
	Для Каждого СтрокаТЗ Из ТаблицаУчастниковОбсуждения Цикл
		Если СтрокаТЗ.СторонаПользователя = "Спрашивающий" Тогда
			ОтКого.Добавить(СтрокаТЗ.ИмяПользователя);
		КонецЕсли;
		Если СтрокаТЗ.СторонаПользователя = "Отвечающий" Тогда
			Кому.Добавить(СтрокаТЗ.ИмяПользователя);
		КонецЕсли; 
		Если СтрокаТЗ.СторонаПользователя = "Сторонний наблюдатель" Тогда
			СторонниеНаблюдатели.Добавить(СтрокаТЗ.ИмяПользователя);
		КонецЕсли;
	КонецЦикла; 
	
	Если СторонниеНаблюдатели.Количество() = 0  Тогда
		Элементы.СторонниеНаблюдатели.Видимость = Ложь;
	Иначе
		Элементы.СторонниеНаблюдатели.Видимость = Истина;
	КонецЕсли; 
	
	// ищем текущего пользователя в обсуждающих
	Массив = ТаблицаУчастниковОбсуждения.НайтиСтроки(Новый Структура("ГУИДПользователя", ГУИДТекПользователя));
	Если Массив.Количество()=0 Тогда
		Элементы.ГруппаНовогоСообщения.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуФайлов()
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ТаблицаПрисоединенныеФайлы.Загрузить(ЗначениеИзСтрокиВнутр(Прокси.ПолучитьТаблицуПрисоединенныхФайлов(ГУИДВопроса)));
		//Элементы.ТолькоДляСотрудниковТП.Видимость = Прокси.ПолучитьВидимостьТП(ГУИДВопроса);
		ГУИДПроекта = Прокси.ПолучитьГУИДПроекта(ГУИДВопроса);
		ВидимостьРедактирует = Ложь;
		Для Каждого СтрокаТЗ Из ТаблицаПрисоединенныеФайлы Цикл
			Если СтрокаТЗ.Редактирует <> "" Тогда
				ВидимостьРедактирует = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		//Элементы.ТаблицаПрисоединенныеФайлыРедактирует.Видимость = ВидимостьРедактирует;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьBASE64ПредставлениеКартинки(Картинка)
	
	Возврат Base64Строка(Картинка.ПолучитьДвоичныеДанные());
	
КонецФункции

&НаКлиенте
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'; en = 'The input string substitution string is malformed: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'; en = 'The input string substitution string is malformed: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Пользователь = Параметры.Пользователь;
	Объект.Пароль		= Параметры.Пароль;
	Объект.АдресБазы 	= Параметры.АдресБазы;
    КодВопроса			= Параметры.КодВопроса;
	ДатаВопроса			= Параметры.ДатаВопроса;
	Объект.Проект				= Параметры.Проект;
	ИсторияОбсуждения	= Параметры.ТекстФорума;
	ЭтаФорма.Заголовок	= Параметры.ТемаВопроса;
	ГУИДТекПользователя = Параметры.ГУИДТекПользователя;
	ГУИДВопроса			= Параметры.ГУИДВопроса;
	АвторВопроса		= Параметры.АвторВопроса;
	Приоритет			= Параметры.Приоритет;
	ТребуемаяДатаОтвета = Параметры.ТребуемаяДатаОтвета;
	НеПрочитан			= Параметры.НеПрочитан;
	
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	Администратор 						  = Параметры.Администратор;
	ПроектБазы 							  = Параметры.ПроектБазы;
	ЧасыПлан 							  = Параметры.ЧасыПлан;
	ЧасыФакт							  = Параметры.ЧасыФакт;
	ОцениватьВопросы 					  = Параметры.ОцениватьВопросы;
	ПроектОдин							  = Параметры.ПроектОдин;
	// { RGS Лунякин Иван 09.11.2015 15:36:44 
	Наименование 						  = Параметры.ТемаВопроса;
	// } RGS Лунякин Иван 09.11.2015 15:36:44   
	// { RGS Глебов Дмитрий 20.09.2016 - ОРР-0003215
	Если ПроектБазы = "Нет" Тогда
	 	ПроектБазы = "";
	КонецЕсли;
	// } RGS Глебов Дмитрий 20.09.2016 - ОРР-0003215	
	
	Элементы.Часы.Видимость 			  = ОцениватьВопросы;
	
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	Элементы.Проект.Видимость = ДанныеФормы.ВидимостьПроекта(ЗначениеЗаполнено(ПроектБазы), ПроектОдин);
	
	Элементы.ФормаИзменитьФорму.Видимость = Администратор;
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	// { RGS Лунякин Иван 09.11.2015 15:31:37 
	Элементы.ТемаВопроса.ТолькоПросмотр = НЕ Администратор;
	// } RGS Лунякин Иван 09.11.2015 15:31:37
	
	// { RGS Лунякин Иван 03.11.2015 16:29:30 
	ПолучитьНастройкиФормы();
	// } RGS Лунякин Иван 03.11.2015 16:29:30
	
	Элементы.ЗавершитьОбсуждение.Видимость = Параметры.ПравоЗакрытияТекВопроса;
	ЗаполнитьСпискиУчастниковВопроса();
	
	НадписьСтатусаВопроса = Параметры.НадписьСтатусаВопроса;
	КартинкаСтатусаВопроса = Параметры.КартинкаСтатусаВопроса;
	
	// присоединенные файлы
	ОбновитьТаблицуФайлов();
	Если Параметры.ВозможноДобавлениеСообщений = 3 Тогда
		Элементы.ГруппаНовогоСообщения.Видимость = Ложь;                                     		
	КонецЕсли; 
	
	Если НадписьСтатусаВопроса = "Закрыт" или НадписьСтатусаВопроса = "Отменен" Тогда
		Элементы.ЗавершитьОбсуждение.Видимость = Ложь;
	КонецЕсли;
  
КонецПроцедуры

// { RGS Лунякин Иван 03.11.2015 16:26:16


&НаСервере
Процедура ПолучитьНастройкиФормы()

	СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "НастройкаФорм");
	Если СтруктураНастроекФормы <> Неопределено Тогда
	   ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы + "/НастройкиФормы",,СтруктураНастроекФормы);
	КонецЕсли;
	СтруктураНастроекОкна = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "НастройкаОкна");
	Если СтруктураНастроекФормы <> Неопределено Тогда
	   ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы + "/НастройкиОкна",,СтруктураНастроекОкна);
	КонецЕсли;

КонецПроцедуры

// } RGS Лунякин Иван 03.11.2015 16:26:16

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
// Процедура запускает сервисные функции необходимые для создания вопроса
//
Процедура ДобавитьСообщение(Команда)
	
	СообщениеТекст = ТекстНовогоСообщения.ПолучитьТекст();
	СообщениеХТМЛ = "";
	СтруктураКартинок = Новый Структура;
	ТекстНовогоСообщения.ПолучитьHTML(СообщениеХТМЛ, СтруктураКартинок);
	Для Каждого ЭлСтруктуры Из СтруктураКартинок Цикл
		BASE64 = ПолучитьBASE64ПредставлениеКартинки(ЭлСтруктуры.Значение);
		СообщениеХТМЛ = СтрЗаменить(СообщениеХТМЛ, ЭлСтруктуры.Ключ, "data:image;base64,"+BASE64+"");  
	КонецЦикла;
	
	// пустые сообщения не добавляем
	СообщениеДляПроверки = СтрЗаменить(СообщениеТекст, Символы.ПС, "");
	Если СообщениеДляПроверки = "" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОтправитьСообщениеНаСервере(КодВопроса, СообщениеХТМЛ, СообщениеТекст);
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",Результат);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	ИначеЕсли Результат Тогда 
		ПоказатьОповещениеПользователя(,,  Символы.ПС + "Сообщение успешно добавлено");
		Оповестить("НужноОбновитьСписокВопросов", , ЭтаФорма);
	КонецЕсли; 
	
	ТекстНовогоСообщения.Удалить();
	ИсторияОбсуждения = ПолучитьТекстОбсужденияВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбсуждение(Команда)
	
	ТекстВопроса = НСтр("ru = 'После выполнения данной операции, добавление новых сообщений в вопрос будет невозможно! Продолжить?'; en = 'After pressing button ""Ok"" you cannot add new message to request. Do you want to continue?'");
	Структура = Новый Структура;
	Структура.Вставить("ТекстВопроса",ТекстВопроса);
	Структура.Вставить("РежимВопроса","ОкОтмена");
	Структура.Вставить("ГУИДВопроса", ГУИДВопроса);
	Структура.Вставить("ИмяСобытия","ЗавершениеВопросаИзДобавленияСообщения");
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	Структура.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	КонецПопытки; 

КонецПроцедуры

&НаСервере
// Функция возвращает результат закрытия вопроса
//
Функция ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса)
	
	ОбъектБаза = РеквизитФормыВЗначение("Объект");
	
	Результат = ОбъектБаза.ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса);
	
	Возврат Результат;
	
КонецФункции	


&НаКлиенте
Процедура КонтактнаяИнформация(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ГУИДВопроса",	ГУИДВопроса);
	СтруктураПараметров.Вставить("Объект",		Объект);
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	СтруктураПараметров.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
   	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаКИ", СтруктураПараметров);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаКИ", СтруктураПараметров);
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	ТекстДляПроверки = ТекстНовогоСообщения.ПолучитьТекст();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	СтруктураПараметров.Вставить("ИмяСобытия", "ПроверкаОрфографииФормаДобавленияСообщения");
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	СтруктураПараметров.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	ТекстХТМЛ = Неопределено;
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПравильноеХТМЛ(ТекстХТМЛ)
	
	ТекстНовогоСообщения.УстановитьHTML(ТекстХТМЛ, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВопроса(Команда)
	
	Элементы.Группа3.Видимость = Истина;
	Элементы.ГруппаПрисоединенныеФайлы.Видимость = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРИСОЕДИНЕННЫЕ ФАЙЛЫ

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	СтруктураДанных = Новый Структура("Пользователь, Пароль, АдресБазы, ГУИДВопроса, Администратор", Объект.Пользователь, Объект.Пароль, Объект.АдресБазы, ГУИДВопроса, Администратор);
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных);
	КонецПопытки; 
		
КонецПроцедуры

&НаКлиенте

&НаКлиенте
// Функция раскладывает строку в массив строк, используя "./\" как разделитель
//
Функция РазложитьСтрокуПоТочкамИСлэшам(Знач Представление) Экспорт
	
	Перем ТекущаяПозиция;
	
	Фрагменты = Новый Массив;
	
	НачальнаяПозиция = 1;
	
	Для ТекущаяПозиция = 1 По СтрДлина(Представление) Цикл
		ТекущийСимвол = Сред(Представление, ТекущаяПозиция, 1);
		Если ТекущийСимвол = "." Или ТекущийСимвол = "/" Или ТекущийСимвол = "\" Тогда
			ТекущийФрагмент = Сред(Представление, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
			НачальнаяПозиция = ТекущаяПозиция + 1;
			Фрагменты.Добавить(ТекущийФрагмент);
		КонецЕсли;
	КонецЦикла;
	
	Если НачальнаяПозиция <> ТекущаяПозиция Тогда
		ТекущийФрагмент = Сред(Представление, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
		Фрагменты.Добавить(ТекущийФрагмент);
	КонецЕсли;
	
	Возврат Фрагменты;
	
КонецФункции

 
&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	ТекСтрока = Элементы.ТаблицаПрисоединенныеФайлы.ТекущиеДанные;
	Если ТекСтрока = Неопределено  Тогда
		Возврат;
	КонецЕсли; 
	Состояние(НСтр("ru = 'Загрузка файла с сервера..'; en = 'Download the file from the server ..'"));
	АдресВоВременномХранилище = ПолучитьДанныеФайлаССервера(ТекСтрока.ГУИДФайла);
	Состояние(НСтр("ru = 'Загрузка файла завершена'; en = 'File Download completed'"));
	Результат = ПолучитьФайл(АдресВоВременномХранилище,ТекСтрока.Наименование + "."+ТекСтрока.Расширение,Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФайлаССервера(ГУИДФайла)
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ПолученныйФайл = ЗначениеИзСтрокиВнутр(Прокси.ПолучитьПрисоединенныйФайл(ГУИДФайла));
		Возврат ПоместитьВоВременноеХранилище(ПолученныйФайл);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки; 
 
КонецФункции
 

 
&НаСервере
Процедура УстановитьПометкуУдаленияСервер(ГУИДФайла, ПометкаУдаления)
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль 		= Объект.Пароль; 
		Прокси.УстановитьПометкуУдаленияФайла(ГУИДФайла, ПометкаУдаления);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаменитьИзФайлаНаДиске(Команда)

	ТекСтрока = Элементы.ТаблицаПрисоединенныеФайлы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Активизируйте строку с файлом'; en = 'Activate the line with the file'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	КонецЕсли;
	Если ТекСтрока.ФайлРедактируется И Не ТекСтрока.ФайлРедактируетТекущийПользователь Тогда
		ТекстПредупреждения = НСтр("ru = 'В настоящий момент данный файл редактируется пользователем 
						| и не может быть помечен на удаление.'; en = 'At the moment, this file is edited by the user
						| And can not be marked for deletion.'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ТекстВопроса", "Заменить присоединенный файл?");
	Структура.Вставить("РежимВопроса","ДаНет");
	Структура.Вставить("ГУИДФайла", ТекСтрока.ГУИДФайла);
	Структура.Вставить("ИмяСобытия","ЗаменитьПрисоединенныйФайл");
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	Структура.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлНаСервере(ГУИДФайла, ИмяФайла, АдресВременногоХранилищаФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Размер = Файл.Размер();
	Расширение = Файл.Расширение;
	ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		Результат = Прокси.ЗаменитьФайлВПрисоединенных(ГУИДФайла, ИмяФайлаБезРасширения, Размер, Расширение, ДвоичныеДанные);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Если Результат <> "true" Тогда
		Сообщить(Результат);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьСоставОбсуждающих(Команда)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ГУИДПроекта", ГУИДПроекта);
	СтруктураДанных.Вставить("Объект", Объект);
	СтруктураДанных.Вставить("ГУИДВопроса", ГУИДВопроса);
	СтруктураДанных.Вставить("ИмяСобытия", "ОбсуждающиеИзменение");
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	СтруктураДанных.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 12:51:08

	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаОбсуждающиеИзменение", СтруктураДанных, ЭтаФорма);
	Исключение
	    ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаОбсуждающиеИзменение", СтруктураДанных, ЭтаФорма);
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьНовоеСообщение(Команда)
	
	Если Элементы.РазвернутьСвернутьНовоеСообщение.Заголовок = НСтр("ru = 'Развернуть новое сообщение'; en = 'Open a new message'") Тогда
		Элементы.ИсторияОбсуждения.Видимость = Ложь;
		Элементы.РазвернутьСвернутьНовоеСообщение.Заголовок = НСтр("ru = 'Свернуть новое сообщение'; en = 'Hide new message'");
		ЭтаФорма.Высота=0;
	Иначе
		Элементы.ИсторияОбсуждения.Видимость = Истина;
	   	Элементы.РазвернутьСвернутьНовоеСообщение.Заголовок = НСтр("ru = 'Развернуть новое сообщение'; en = 'Open a new message'"); 
		ЭтаФорма.Высота=0;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура РазвернутьСвернутьФорум(Команда)
	
	Если Элементы.РазвернутьСвернутьФорум.Заголовок = НСтр("ru = 'Развернуть историю вопроса'; en = 'Expand background'") Тогда
		Элементы.ГруппаНовогоСообщения.Видимость = Ложь;
		Элементы.Группа2.Видимость = Ложь;
		Элементы.РазвернутьСвернутьФорум.Заголовок = НСтр("ru = 'Свернуть историю вопроса'; en = 'Hide background'");
		ЭтаФорма.Высота=0;
	Иначе
		Элементы.ГруппаНовогоСообщения.Видимость = Истина;
		Элементы.Группа2.Видимость = Истина;
		Элементы.РазвернутьСвернутьФорум.Заголовок = НСтр("ru = 'Развернуть историю вопроса'; en = 'Expand background'");
		ЭтаФорма.Высота=0;
   	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПрокси(Определение)
	
	Возврат Новый WSПрокси (Определение, "RemoteConnect", "RemoteConnect", "RemoteConnectSoap");
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НеПрочитан Тогда
		СписокВопросов = Новый Массив;
		СписокВопросов.Добавить(ГУИДВопроса);
		СделатьНеПрочитаннымСервер(СписокВопросов, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, НеПрочитан);
		Оповестить("НужноОбновитьСписокВопросов", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СделатьНеПрочитаннымСервер(СписокВопросов, АдресБазы, Пользователь, Пароль, ПризнакНепрочитанного)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Пользователь,  Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Пользователь;
		Прокси.Пароль = Пароль; 
		Возврат Прокси.УстановитьПризнакНепрочитанного(ПризнакНепрочитанного, ЗначениеВСтрокуВнутр(СписокВопросов));
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
		
КонецФункции	


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗавершениеВопросаИзДобавленияСообщения" Тогда
		Результат = ЗавершитьОбсуждениеВопросаСервер(Параметр); //Параметр.ГУИДВопроса);
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
			Структура = Новый Структура;
			Структура.Вставить("ТекстПредупреждения",Результат);
			// { RGS Лунякин Иван 27.10.2015 12:51:08 
			Структура.Вставить("Администратор", Администратор);
			// } RGS Лунякин Иван 27.10.2015 12:51:08
			Попытка
				ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
			Исключение
				ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
			КонецПопытки; 
			Возврат;
		Иначе
			ПоказатьОповещениеПользователя(,,  Символы.ПС + НСтр("ru = 'Вопрос """ + Наименование + """ закрыт'; en = 'Request """ + Наименование + """ closed'") , );
			Оповестить("НужноОбновитьСписокВопросов", , ЭтаФорма);
			ЭтаФорма.Закрыть();
		КонецЕсли; 
	ИначеЕсли ИмяСобытия = "ЗаменитьПрисоединенныйФайл" Тогда
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Результат = ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор);
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли; 
		ОбновитьФайлНаСервере(Параметр.ГУИДФайла, ИмяФайла, АдресВременногоХранилищаФайла);
		ОбновитьТаблицуФайлов();
	ИначеЕсли ИмяСобытия = "ОбсуждающиеИзменение" Тогда
		Если Параметр<>Неопределено Тогда
			ПоказатьОповещениеПользователя(,,  Символы.ПС + Параметр);
			ЗаполнитьСпискиУчастниковВопроса();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПроверкаОрфографииФормаДобавленияСообщения" Тогда
		Если Параметр <> Неопределено Тогда
			УстановитьПравильноеХТМЛ(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПометкаУдаленияНаФайл" Тогда
		УстановитьПометкуУдаленияСервер(Параметр.ГУИДФайла, Не Параметр.ПометкаУдаленияФайла);
		ОбновитьТаблицуФайлов();
	// { RGS Лунякин Иван 07.10.2015 13:53:17 	
	ИначеЕсли ИмяСобытия = "ОбработкаВыбора" Тогда
		  ОбработкаВыбора(Параметр);
	// } RGS Лунякин Иван 07.10.2015 13:53:17   

	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	УстановитьРежимВыбораТемы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыбораТемы()
	ЕстьПредопределенныеТемы = Ложь;
	Если НЕ ПустаяСтрока(Объект.Проект) Тогда
		ЕстьПредопределенныеТемы =  ПроверитьНаличиеТемВПроекте(Объект.Проект);
	КонецЕсли;
	Если НЕ ЕстьПредопределенныеТемы Тогда
		Элементы.ТемаВопроса.ПодсказкаВвода = НСтр("ru = 'Введите тему вопроса'; en = 'Input subject of request'");
	Иначе
		Элементы.ТемаВопроса.ПодсказкаВвода = "";
	КонецЕсли;
	Элементы.ТемаВопроса.РедактированиеТекста = НЕ ЕстьПредопределенныеТемы;
	Элементы.ТемаВопроса.КнопкаВыбора = ЕстьПредопределенныеТемы;

КонецПроцедуры
// } RGS Глебов Дмитрий 19.09.2016 - ОРР-0003215

 
// { RGS Лунякин Иван 02.11.2015 9:29:10 



&НаКлиенте
Процедура ТемаВопросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)  
	
	Если НЕ ПустаяСтрока(Объект.Проект) Тогда
		Если  ПроверитьНаличиеТемВПроекте(Объект.Проект) Тогда			
			// { RGS Лунякин Иван 27.10.2015 13:43:40 
			Структура = Новый Структура();
			Структура.Вставить("Администратор", Администратор);
			Структура.Вставить("Проект", Объект.Проект);
    		// } RGS Лунякин Иван 27.10.2015 13:43:40
			
			Попытка
				ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВыбораТемыНовогоВопроса", Структура, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
			Исключение
				//Сообщить(ОписаниеОшибки());
				ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВыбораТемыНовогоВопроса", Структура, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли; 	

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбора(Параметр, ДополнительныеПараметры = Неопределено) Экспорт
	
	Модифицированность = Истина;
	РезультатЗакрытия = Параметр.РезультатЗакрытия;
	
	Если РезультатЗакрытия = "Other" Тогда
		
        Элементы.ТемаВопроса.ПодсказкаВвода = НСтр("ru = 'Введите тему вопроса'; en = 'Input request'");
		Элементы.ТемаВопроса.РедактированиеТекста = Истина;
		
	Иначе
		
		Наименование = РезультатЗакрытия;
		Заголовок 	= РезультатЗакрытия;
		Элементы.ТемаВопроса.ПодсказкаВвода = "";
		Элементы.ТемаВопроса.РедактированиеТекста = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеТемВПроекте(Проект)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПроверитьНаличиеТемВПроекте(Проект)	
КонецФункции // ()


// { RGS Лунякин Иван 09.11.2015 17:47:32 
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьОбработкаОтвета", ЭтаФорма), НСтр("ru = 'Были внесены изменения, сохранить?'; en = 'Changes have been made, save?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Закрыть();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЧасыФактПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЧасыПланПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбработкаОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьВопросСервер();
		Оповестить("НужноОбновитьСписокВопросов", , ЭтаФорма);
	КонецЕсли;
	
	Закрыть();
	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВопросСервер()
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль 		= Объект.Пароль; 
		Прокси.ИзменитьВопрос(ПолучитьПараметрыИзмененияВопроса());
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыИзмененияВопроса()
	
	//Сформируем список свойств и заполним их
	ТестСвойств = "ГУИДВопроса";
	ТестСвойств = ТестСвойств + ?(ОцениватьВопросы, ", ЧасыПлан, ЧасыФакт", "");
	ТестСвойств = ТестСвойств + ?(Администратор, ", Наименование", "");
	
	ПараметрыПередачи = Новый Структура(ТестСвойств);
	ЗаполнитьЗначенияСвойств(ПараметрыПередачи, ЭтаФорма);
		
	//Преобразуем Во Внутренне Представление
	Возврат ЗначениеВСтрокуВнутр(ПараметрыПередачи);
	
КонецФункции // ()

&НаКлиенте
Процедура ТемаВопросаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	А = 1;
КонецПроцедуры


&НаКлиенте
Процедура ОтКогоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьСоставОбсуждающих(Неопределено);
КонецПроцедуры
 
