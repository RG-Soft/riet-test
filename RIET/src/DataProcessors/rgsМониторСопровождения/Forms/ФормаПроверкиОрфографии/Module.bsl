
&НаСервере
Процедура ПроверитьСервереВеб(ТекстДляПроверки, Отказ)
	
	Попытка
		СтруктурныйТип = ФабрикаXDTO.Тип("http://speller.yandex.net/services/spellservice", "SpellResult"); 
		ДлинаБлокаПроверки = 300;
		ФлагОшибок = Ложь;	
		
		Пока ТекстДляПроверки <> "" И ТекстДляПроверки <> Символы.ПС Цикл
			
			МассивНачалаОшибок = Новый Массив;
			МассивКонецОшибок = Новый Массив;
			СлужебноеСообщение = "";
			
			ТекущийТекстПроверки = ПолучитьТекущийТекстПроверки(ТекстДляПроверки, ДлинаБлокаПроверки);
			
			WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1"); 
			WinHttp.Option(2,"Windows-1251"); 
			WinHttp.Open("POST", "http://speller.yandex.net/services/spellservice/checkText",0); 
			WinHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");     
			WinHttp.Send("text="+ ПреобразоватьКURL(ТекущийТекстПроверки));
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(WinHttp.ResponseText());
			SpellResult = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СтруктурныйТип); 
			ТекущийТекстПроверкиТМП = ТекущийТекстПроверки;
			
			Если SpellResult.Свойства().Количество()>0 Тогда
				Если ТипЗнч(SpellResult.error) = Тип("ОбъектXDTO") Тогда // И SpellResult.Получить("error")  SpellResult.Свойства().Количество()=1 И
					Строка = SpellResult.error;
					
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ОшибочноеСлово = Строка.word;
									
					ПозицияНачалоОшибки = Найти(ТекущийТекстПроверкиТМП, Строка.word);
					ПозицияКонецОшибки = ПозицияНачалоОшибки+СтрДлина(Строка.word);
										
					МассивНачалаОшибок.Добавить(ПозицияНачалоОшибки);//Число(Строка.pos)+1);// ПозицияНачалаОшибки
					МассивКонецОшибок.Добавить(ПозицияКонецОшибки);//Число(Строка.pos) + Число(Строка.len));// ПозицияКонецОшибки
					
					ТекущийТекстПроверкиТМП = Лев(ТекущийТекстПроверкиТМП, ПозицияНачалоОшибки-1) + ПолучитьСтрокуДлиной(СтрДлина(Строка.word))+
											  Прав(ТекущийТекстПроверкиТМП, СтрДлина(ТекущийТекстПроверкиТМП)-ПозицияКонецОшибки+1);
					
					ВариантЗаменыСтрока = "";
					Если Строка.Свойства().Получить("s") <> Неопределено Тогда
						// Если вариант замены один
						Если ТипЗнч(Строка.s) = Тип("Строка") Тогда
							НоваяСтрока.ВариантЗамены = Строка.s; 
							// Если несколько
						Иначе
							Сч = 1;
							Для Каждого ВариантЗамены Из Строка.s Цикл
								НоваяСтрока.ВариантЗамены = ВариантЗамены;
								Если Сч<Строка.s.Количество() Тогда
									НоваяСтрока = ТаблицаОшибок.Добавить();
									НоваяСтрока.ОшибочноеСлово = Строка.word;
									Сч = Сч+1;
								КонецЕсли; 
							КонецЦикла; 
							ВариантЗаменыСтрока = Лев(ВариантЗаменыСтрока, СтрДлина(ВариантЗаменыСтрока)-2); 
						КонецЕсли; 
					Иначе
						НоваяСтрока.ВариантЗамены = НСтр("ru = 'вариантов замены не обнаружено'; en = 'replacement options not found'");
					КонецЕсли; 
					
					СлужебноеСообщение = СлужебноеСообщение + Символы.ПС + "<SPAN style=""COLOR: #ff0000"">" + НСтр("ru = 'Вариант замены:'; en = 'Replacement options :'") + " </SPAN> " + ВариантЗаменыСтрока;
					СлужебноеСообщение = СлужебноеСообщение + Символы.ПС;		
				Иначе
					Для Каждого Строка Из SpellResult.error Цикл
						НоваяСтрока = ТаблицаОшибок.Добавить();
						НоваяСтрока.ОшибочноеСлово = Строка.word;
						
						ПозицияНачалоОшибки = Найти(ТекущийТекстПроверкиТМП, Строка.word);
						ПозицияКонецОшибки = ПозицияНачалоОшибки+СтрДлина(Строка.word);
											
						МассивНачалаОшибок.Добавить(ПозицияНачалоОшибки);//Число(Строка.pos)+1);// ПозицияНачалаОшибки
						МассивКонецОшибок.Добавить(ПозицияКонецОшибки);//Число(Строка.pos) + Число(Строка.len));// ПозицияКонецОшибки
						
						ТекущийТекстПроверкиТМП = Лев(ТекущийТекстПроверкиТМП, ПозицияНачалоОшибки-1) + ПолучитьСтрокуДлиной(СтрДлина(Строка.word))+
												  Прав(ТекущийТекстПроверкиТМП, СтрДлина(ТекущийТекстПроверкиТМП)-ПозицияКонецОшибки+1);
					
						ВариантЗаменыСтрока = "";
						Если Строка.Свойства().Получить("s") <> Неопределено Тогда
							// Если вариант замены один
							Если ТипЗнч(Строка.s) = Тип("Строка") Тогда
								НоваяСтрока.ВариантЗамены = Строка.s; 
								// Если несколько
							Иначе
								Сч = 1;
								Для Каждого ВариантЗамены Из Строка.s Цикл
									НоваяСтрока.ВариантЗамены = ВариантЗамены;
									Если Сч<Строка.s.Количество() Тогда
										НоваяСтрока = ТаблицаОшибок.Добавить();
										НоваяСтрока.ОшибочноеСлово = Строка.word;
										Сч = Сч+1;
									КонецЕсли; 
								КонецЦикла; 
								ВариантЗаменыСтрока = Лев(ВариантЗаменыСтрока, СтрДлина(ВариантЗаменыСтрока)-2); 
							КонецЕсли; 
						Иначе
							НоваяСтрока.ВариантЗамены = НСтр("ru = 'вариантов замены не обнаружено'; en = 'replacement options not found'");
						КонецЕсли; 
						
						СлужебноеСообщение = СлужебноеСообщение + Символы.ПС + "<SPAN style=""COLOR: #ff0000"">" + НСтр("ru = 'Вариант замены:'; en = 'Replacement options:'") + " </SPAN> " + ВариантЗаменыСтрока;
						СлужебноеСообщение = СлужебноеСообщение + Символы.ПС;		
					КонецЦикла;
				КонецЕсли; 
				
			КонецЕсли; 
			
			ТекстДляПроверкиВывод = "";
			Если МассивНачалаОшибок.Количество()=0 Тогда
				ТекстПроверки = ТекстПроверки +ТекущийТекстПроверки;
			Иначе
				ФлагОшибок = Истина;
				Счетчик = 1;
				Пока Счетчик < СтрДлина(ТекущийТекстПроверки)+1 Цикл
					ТекСимвол = Сред(ТекущийТекстПроверки, Счетчик,1);
					Если МассивНачалаОшибок.Найти(Счетчик) <> Неопределено Тогда
						ТекстДляПроверкиВывод = ТекстДляПроверкиВывод + "<SPAN style=""COLOR: #ff0000"">" + ТекСимвол;
					ИначеЕсли МассивКонецОшибок.Найти(Счетчик) <> Неопределено Тогда 
						ТекстДляПроверкиВывод = ТекстДляПроверкиВывод + ТекСимвол + "</SPAN>";
					Иначе
						ТекстДляПроверкиВывод = ТекстДляПроверкиВывод + ТекСимвол;
					КонецЕсли; 
					Счетчик = Счетчик +1;	
				КонецЦикла; 
				ТекстПроверки = ТекстПроверки + ТекстДляПроверкиВывод;
			КонецЕсли; 
			Если Лев(ТекущийТекстПроверки,1)=" " Или Лев(ТекущийТекстПроверки,1)=Символы.ПС Тогда 
				ТекстДляПроверки = Прав(ТекстДляПроверки, СтрДлина(ТекстДляПроверки)-СтрДлина(ТекущийТекстПроверки)+1);
			Иначе
				ТекстДляПроверки = Прав(ТекстДляПроверки, СтрДлина(ТекстДляПроверки)-СтрДлина(ТекущийТекстПроверки));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФлагОшибок  Тогда 
			Элементы.ТаблицаОшибок.Видимость = Ложь;
			Элементы.ФормаЗаменитьВсе.Видимость = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Орфографических ошибок не обнаружено'; en = 'Spelling errors are not detected'");
			Сообщение.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			Сообщение.Сообщить(); 
		Иначе
			ПроставитьАктивность();
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуДлиной(ДлинаСтроки)
	
	СтрокаВозврат = "";
	Сч = 0;
	Пока Сч<ДлинаСтроки Цикл 
		СтрокаВозврат = СтрокаВозврат + "*";
		Сч = Сч +1;
	КонецЦикла;
	
	Возврат СтрокаВозврат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущийТекстПроверки(ТекстДляПроверки, ДлинаБлокаПроверки)
	
	СимволыРазделители = " .!,-" + Символы.ПС;
	ТекстВозврата = "";
	ТекстВозврата = Сред(ТекстДляПроверки,  0, ДлинаБлокаПроверки);
	
	Если Найти(СимволыРазделители, Лев(ТекстВозврата,1))=0 Тогда 
		Сч = 0;
		ТекСимвол = "";
		Пока Найти(СимволыРазделители, ТекСимвол)=0 И Сч>0 Цикл 
			ТекстВозврата = ТекСимвол+ТекстВозврата;
			Сч = Сч-1; 
			ТекСимвол = Сред(ТекстДляПроверки, Сч, 1);
		КонецЦикла;	
	КонецЕсли;
	
	Если  Найти(СимволыРазделители, Прав(ТекстВозврата,1))=0 Тогда 
		Сч = ДлинаБлокаПроверки;
		ТекСимвол = Сред(ТекстДляПроверки, Сч, 1);
		Пока Найти(СимволыРазделители, ТекСимвол)=0 И Сч>0 Цикл 
			Сч = Сч-1; 
			ТекСимвол = Сред(ТекстДляПроверки, Сч, 1);
		КонецЦикла;	
		ТекстВозврата = Лев(ТекстВозврата, Сч);
	КонецЕсли;
	
	Возврат ТекстВозврата;
	
КонецФункции

&НаСервере
Процедура ПроставитьАктивность()
	
	КопияТаблицы = ТаблицаОшибок.Выгрузить();
	КопияТаблицы.Свернуть("ОшибочноеСлово, ВариантЗамены, Активность");
	ТаблицаОшибок.Загрузить(КопияТаблицы);
	
	Сч = 0;
	СледИндекс = 0;
	Пока Сч < ТаблицаОшибок.Количество()-1 Цикл
		ТаблицаОшибок[СледИндекс].Активность = Истина;
		Пока Сч < ТаблицаОшибок.Количество()-1 И ТаблицаОшибок[Сч].ОшибочноеСлово = ТаблицаОшибок[Сч+1].ОшибочноеСлово Цикл
			Сч = Сч +1;
			СледИндекс = Сч;
		КонецЦикла; 
		Сч = Сч +1;
		СледИндекс = Сч;
	КонецЦикла; 
	
	Если ТаблицаОшибок.Количество()=1 Или ТаблицаОшибок[ТаблицаОшибок.Количество()-1].ОшибочноеСлово<>ТаблицаОшибок[ТаблицаОшибок.Количество()-2].ОшибочноеСлово Тогда
		ТаблицаОшибок[ТаблицаОшибок.Количество()-1].Активность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьвСистему(Число10,система)
	
	Если система > 36 или система < 2 тогда
		Сообщить(НСтр("ru = 'Выбранная система исчисления не поддерживается'; en = 'The chosen system of calculation is not supported'"));
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	//!!!!!!!!
	//[
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	//]
	Возврат СтрокаСистема;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьКURL(Стр)
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		Если ((Знак>="a")и(Знак<="z")) или
			((Знак>="A")и(Знак<="Z")) или
			((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура ОК(Команда)

	ТекстХТМЛ = Элементы.ТекстПроверкиHTML.Документ.body.innerHTML;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ,"<META name=GENERATOR content=""MSHTML 9.00.8112.16421"">","");
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<SPAN style=""COLOR: #ff0000"">","");
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "</SPAN>","");
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		Оповестить(ИмяСобытия, ТекстХТМЛ, ЭтаФорма);
	КонецЕсли;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	Если Отказ Тогда
		ТекстПредупреждения = НСтр("ru = 'Превышена максимальная длина сообщения для проверки!'; en = 'Exceeded the maximum message length for the test!'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 13:43:40

		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекстПроверкиСлуж = Параметры.ТекстДляПроверки;
	ПроверитьСервереВеб(ТекстПроверкиСлуж, Отказ);
  	ТекстПроверки = СтрЗаменить(ТекстПроверки, Символы.ПС, "<BR>");
	ТекстПроверки = Лев(ТекстПроверки, СтрДлина(ТекстПроверки)-4);
	Если Параметры.Свойство("ИмяСобытия") Тогда
		ИмяСобытия = Параметры.ИмяСобытия;
	КонецЕсли;
	Если Параметры.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = Параметры.ИмяРеквизита;
	КонецЕсли;
	
	// { RGS Лунякин Иван 27.10.2015 12:51:08 
	Администратор 		= Параметры.Администратор;
	Элементы.ФормаИзменитьФорму.Видимость = Администратор;
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	// { RGS Лунякин Иван 03.11.2015 16:29:30 
	ПолучитьНастройкиФормы();
	// } RGS Лунякин Иван 03.11.2015 16:29:30
	
КонецПроцедуры

// { RGS Лунякин Иван 03.11.2015 16:26:16

&НаСервере
Процедура ПолучитьНастройкиФормы()

	СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "НастройкаФорм");
	Если СтруктураНастроекФормы <> Неопределено Тогда
	   ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы + "/НастройкиФормы",,СтруктураНастроекФормы);
	КонецЕсли;
	СтруктураНастроекОкна = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "НастройкаОкна");
	Если СтруктураНастроекФормы <> Неопределено Тогда
	   ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы + "/НастройкиОкна",,СтруктураНастроекОкна);
	КонецЕсли;

КонецПроцедуры

// } RGS Лунякин Иван 03.11.2015 16:26:16

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	МассивИзСловаОшибки = ТаблицаОшибок.НайтиСтроки(Новый Структура("ОшибочноеСлово", Элемент.ТекущиеДанные.ОшибочноеСлово));
	Элемент.ТекущиеДанные.Активность = Истина;
	Для Каждого ЭлМассива Из МассивИзСловаОшибки Цикл
		Если ЭлМассива.ВариантЗамены <> Элемент.ТекущиеДанные.ВариантЗамены Тогда
			ЭлМассива.Активность = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ВариантЗамены = НСтр("ru = 'вариантов замены не обнаружено'; en = 'replacement options not found'")  Тогда
		Возврат;
	КонецЕсли; 
	ЗаменитьОшибочноеСлово(Элемент.ТекущиеДанные.ОшибочноеСлово, Элемент.ТекущиеДанные.ВариантЗамены);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОшибочноеСлово(ОшибочноеСлово, ВариантЗамены)

	Элементы.ТекстПроверкиHTML.Документ.Body.innerHTML = СтрЗаменить(Элементы.ТекстПроверкиHTML.Документ.Body.innerHTML, ОшибочноеСлово, ВариантЗамены);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВсе(Команда)
	
	ТекстВопроса = НСтр("ru = 'Заменить все ошибочные слова по выбранным в списке?'; en = 'Replace all the wrong word in the selected list?'");
	Структура = Новый Структура;
	Структура.Вставить("ТекстВопроса", ТекстВопроса);
	Структура.Вставить("РежимВопроса","ДаНет");
	// { RGS Лунякин Иван 27.10.2015 13:43:40 
	Структура.Вставить("Администратор", Администратор);
	// } RGS Лунякин Иван 27.10.2015 13:43:40

	Структура.Вставить("ИмяСобытия","ПроверкаОрфографииЗаменитьВсе");
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВопросаДокументСформирован(Элемент)
	
	Элементы.ТекстПроверкиHTML.Документ.Body.innerHTML = ТекстПроверки; 
   	Элементы.ТекстПроверкиHTML.Документ.Body.contentEditable = "true";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПроверкаОрфографииЗаменитьВсе" Тогда
		Для Каждого СтрокаТЗ Из ТаблицаОшибок Цикл
			Если СтрокаТЗ.Активность И СтрокаТЗ.ВариантЗамены <> НСтр("ru = 'вариантов замены не обнаружено'; en = 'replacement options not found'")  Тогда
				ЗаменитьОшибочноеСлово(СтрокаТЗ.ОшибочноеСлово, СтрокаТЗ.ВариантЗамены);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
