//&НаКлиенте
//Перем ЦветКнопкиОбщий;
//Перем ЦветКнопкиПометка;
&НаКлиенте
Перем УникальностьФормы;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Функция проверяет заполнение настройки подключения
//
//  Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗаполнениеРеквизитов()
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Возврат Ложь;
   	Иначе
		Возврат Истина;
   	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура выполняет необходимые действия для обновления
//
Процедура ОбновитьТаблицуВопросовСервер()
	
	ТаблицаВопросов.Очистить();	
	
	Попытка
		
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ВопросыПользователяПоПроекту(Объект.ЗагружатьЗакрытыеОтмененныеВопросы, Объект.ТолькоМои, ?(НаименованиеИБ = СтрокаСоединенияИнформационнойБазы(), ПроектБазы, ""), Объект.ГУИДТекПользователя, Объект.ИмяТекПользователя);//, ТолькоМои, Объект.ГУИДТекПользователя, Объект.ИмяТекПользователя);
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Если Найти(ТекстОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'; en = 'User authentication is not performed'"))<>0 Тогда
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>" + НСтр("ru = 'Ошибка:'; en = 'Error:'") + " </FONT><BR>" + Нстр("ru = 'пользователь с именем '; en = 'user with name '") + "<EM>"+ 
													Объект.Пользователь +"</EM> " + НСтр("ru = 'не найден в базе данных ""Монитора сопровождения"" или пароль указан неверно!'; en = 'is not found in the database ""Monitor support"" or the password is incorrect !'") + " </FONT>");
		Иначе
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>" + НСТР("ru = 'Ошибка:'; en = 'Error:'") + " </FONT><BR>"+ТекстОшибки+"</FONT>");
		КонецЕсли; 
		Возврат;
	КонецПопытки; 
		
	ТаблицаИзБазы = ЗначениеИзСтрокиВнутр(ИзБазы);
	
	ТаблицаВопросов.Загрузить(ЗаполнитьКолонкиСтатусовИПриоритетов(ТаблицаИзБазы, ПроверкаКодаЯзыка));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоЗадачам", Истина);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
	ТЗ_ТаблицаВопросовЗадач = ТаблицаВопросов.Выгрузить(МассивСтрок);
	ТаблицаВопросовЗадач.Загрузить(ТЗ_ТаблицаВопросовЗадач);
	Если ТаблицаВопросовЗадач.Количество() > 0 Тогда
		Элементы.МоиЗадачи.Доступность = Истина;
	Иначе
		Элементы.МоиЗадачи.Доступность = Ложь;
	КонецЕсли;
		  
	Если ОткрытыНепрочитанные Тогда
		//"активны" непрочитанные вопросы
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Непрочитан" , 1);
		МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
		ТЗ_НепрочитанныеВопросы = ТаблицаВопросов.Выгрузить(МассивСтрок);
		ТаблицаВопросов.Загрузить(ТЗ_НепрочитанныеВопросы);
		Если ТаблицаВопросов.Количество() = 0 Тогда
			ТекстВопроса = "";
			Элементы.ОтправитьСообщение.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// {Добавлено (изменено) РГ-Софт, Серяков А.А., 15.08.17  GHB-0000422
	//При изменении настроек формы - "Привязать базу к проекту" необходимо обновить реквизит ПроектОдин
	// поскольку было выполнено обновление таблицы вопросов.
	ПроверитьКоличествоДоступныхПроектов(); 
	// }Конец добавления (изменения)РГ-Софт, Серяков А.А.
КонецПроцедуры

// { RGS Лунякин Иван 12.11.2015 16:34:52 
&НаСервереБезКонтекста
Функция ЗаполнитьКолонкиСтатусовИПриоритетов(ТаблицаИзБазы, ПроверкаКодаЯзыка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таблица.СтатусВопроса КАК СТРОКА(30)) КАК СтатусВопроса,
	               |	ВЫРАЗИТЬ(Таблица.Приоритет КАК СТРОКА(30)) КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаПриоритетовИСтатусовВход
	               |ИЗ
	               |	&ТаблицаИзБазы КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Новый""
	               |			ТОГДА ""New""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Принят к рассмотрению""
	               |			ТОГДА ""Accepted""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Отвечен""
	               |			ТОГДА ""Answered""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Закрыт""
	               |			ТОГДА ""Closed""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Отменен""
	               |			ТОГДА ""Canceled""
	               |	КОНЕЦ КАК СтатусВопроса,
	               |	ВЫБОР
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.Приоритет = ""Критический""
	               |			ТОГДА ""Critical""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.Приоритет = ""Высокий""
	               |			ТОГДА ""High""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.Приоритет = ""Обычный""
	               |			ТОГДА ""Normal""
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.Приоритет = ""Низкий""
	               |			ТОГДА ""low""
	               |	КОНЕЦ КАК Приоритет,
	               |	ВЫБОР
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Закрыт""
	               |			ТОГДА 1
	               |		КОГДА ТаблицаПриоритетовИСтатусовВход.СтатусВопроса = ""Отменен""
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Закрыт
	               |ИЗ
	               |	ТаблицаПриоритетовИСтатусовВход КАК ТаблицаПриоритетовИСтатусовВход";
	
	Запрос.УстановитьПараметр("ТаблицаИзБазы", ТаблицаИзБазы);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ТаблицаИзБазы.Колонки.Добавить("Закрыт", Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой)));
	
	КолонкаЗакрыт = Результат.ВыгрузитьКолонку("Закрыт");
	ТаблицаИзБазы.ЗагрузитьКолонку(КолонкаЗакрыт, "Закрыт");
	
	Если Булево(ПроверкаКодаЯзыка) Тогда	
		
		КолонкаПриоритет = Результат.ВыгрузитьКолонку("Приоритет");
		ТаблицаИзБазы.ЗагрузитьКолонку(КолонкаПриоритет, "Приоритет");
		
		КолонкаСтатус = Результат.ВыгрузитьКолонку("СтатусВопроса");
		ТаблицаИзБазы.ЗагрузитьКолонку(КолонкаСтатус, "СтатусВопроса");
		
	КонецЕсли;
	
	Возврат ТаблицаИзБазы;
КонецФункции // ()

// } RGS Лунякин Иван 12.11.2015 16:34:52   


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстХТМЛДляВывода(ТекстВвода)
	
	ТекстВовзрата = 
	"<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 9.00.8112.16437""></HEAD><BODY>"
	+ ТекстВвода + "<BR></BODY></HTML>";
	Возврат ТекстВовзрата;
	
КонецФункции
 
&НаСервере
// Функция скачивает с интернет ресурса программу AMMYY
//
//  Возвращаемое значение:
//   Строка - адресс во временном хранилище
//
Функция СкачатьЭмиНаСервере()
	
	ФайлЭми = РеквизитФормыВЗначение("Объект").ПолучитьМакет("AMMYY");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлЭми);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

//&НаСервереБезКонтекста

// Процедура получает данные для текста вопроса
//
&НаСервере
Функция ПолучитьТекстОбсужденияВопроса(ГУИДВопроса, АдресБазы, Пользователь, Пароль, ПоказатьПолностью, ПравоЗакрытияТекВопроса, КодВопроса, ОтображатьКонтакты = Ложь)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl", Пользователь, Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Пользователь;
		Прокси.Пароль = Пароль;
		ПараметрВхода = Новый Структура;
		ПараметрВхода.Вставить("ГУИДВопроса", ГУИДВопроса);
		ПараметрВхода.Вставить("ПоказатьПолностью", ПоказатьПолностью);
		ТекстВопросаИзБазы = Прокси.ТекстВопроса(ЗначениеВСтрокуВнутр(ПараметрВхода), ПравоЗакрытияТекВопроса);
		
		// { RGS Лунякин Иван 02.10.2015 14:23:07
		ТекстВопроса = ПеревестиТекстВопросаСервер(ТекстВопросаИзБазы, ПроверкаКодаЯзыка);
		// } RGS Лунякин Иван 02.10.2015 14:23:07
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если Найти(ТекстОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'; en = 'User authentication is not performed'"))<>0 Тогда
			ТекстВопроса = "<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>" + НСтр("ru = 'пользователь с именем '; en = 'user name'") + " <EM>" + 
				Пользователь + "</EM> " + НСтр("ru = 'не найден в базе данных ""Монитора сопровождения"" или пароль указан неверно!'; en = 'is not found in the database ""Monitor of support"" or the password is incorrect!'") + " </FONT>";
		Иначе
			ТекстВопроса = "<FONT size=4><FONT color=#ff0000>" + НСтр("ru = 'Ошибка: '; en = 'Error: '") + " </FONT><BR>"+ТекстОшибки+"</FONT>"; 
		КонецЕсли;
	КонецПопытки; 
	
	Возврат ТекстВопроса;
	
КонецФункции

// { RGS Лунякин Иван 12.11.2015 13:43:48

&НаСервереБезКонтекста
Функция ПеревестиТекстВопросаСервер(ТекстВопросаИзБазы, ПроверкаКодаЯзыка)
	
	Если ПроверкаКодаЯзыка Тогда
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Дата: </SPAN>", 					?(ПроверкаКодаЯзыка, "Date: </SPAN>", 						"Дата: </SPAN>"));
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Отменен</FONT>", 					?(ПроверкаКодаЯзыка, "Canceled</FONT>", 					"Отменен</FONT>"));
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Закрыт</FONT>", 					?(ПроверкаКодаЯзыка, "Closed</Тег>", 						"Закрыт</FONT>"));
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Отвечен</FONT>", 					?(ПроверкаКодаЯзыка, "Answered</FONT>", 					"Отвечен</FONT>"));
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Принят к рассмотрению</FONT>", 	?(ПроверкаКодаЯзыка, "Accepted</FONT>", 	"Принят к рассмотрению</FONT>"));
		ТекстВопросаИзБазы = СтрЗаменить(ТекстВопросаИзБазы, "Новый</FONT>", 					?(ПроверкаКодаЯзыка, "New</FONT>", 							"Новый</FONT>")); 
	КонецЕсли;
	
	Возврат ТекстВопросаИзБазы; 
	
КонецФункции // ()
 
// } RGS Лунякин Иван 12.11.2015 13:43:48   


&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(АдресБазы, Пользователь, Пароль, ГУИДВопроса)
	
	Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl", Пользователь, Пароль);
	Прокси = ПолучитьПрокси(Определение);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль = Пароль;
	ТаблицаКИ.Загрузить(ЗначениеИзСтрокиВнутр(Прокси.ПолучитьТаблицуКИУчастниковОбсужденияВопроса(ГУИДВопроса)));
	
КонецПроцедуры

&НаСервере
// Процедура получает данные для текста вопроса
//
Функция ПолучитьПолныйТекстВопроса(ГУИДВопроса)
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ПараметрВхода = Новый Структура;
		ПараметрВхода.Вставить("ГУИДВопроса", ГУИДВопроса);
		ПараметрВхода.Вставить("ПоказатьПолностью", Истина);
		ТекстВопросаИзБазы = Прокси.ТекстВопроса(ЗначениеВСтрокуВнутр(ПараметрВхода), ПравоЗакрытияТекВопроса);
		ТекстВопросаИзБазы = ПеревестиТекстВопросаСервер(ТекстВопросаИзБазы, ПроверкаКодаЯзыка) 
	 Исключение
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>" + НСтр("ru = 'Ошибка: '; en = 'Error: '") + "</FONT><BR>"+ОписаниеОшибки()+"</FONT>");
		Возврат "";
	КонецПопытки; 
	
	Возврат ТекстВопросаИзБазы;
	
КонецФункции

&НаКлиенте
// Процедура обновляет таблицу вопросов
//
Процедура ОбновитьТаблицуВопросов()
	
	Состояние(,,НСтр("ru = 'Выполняется обновление списка вопросов..'; en = 'Performs the update of the list of requests..'"), АдресКартинки2);
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.НовоеСообщение Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Группа7;
	КонецЕсли;	
	
   	ОбновитьТаблицуВопросовСервер();
	ВосстановитьТекСтроку();
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.Группа7 Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.НовоеСообщение;
	КонецЕсли;	
	
	// Обновим/заполним реквизиты
	Для Каждого Строка Из ТаблицаВопросовЗадач Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ГУИДЗадачи",Строка.ГУИДЗадачи);
		МассивСтрок = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаСРеквизитами = Объект.РасшифровкаЗадач.Добавить();
			СтрокаСРеквизитами.ГУИДЗадачи = Строка.ГУИДЗадачи;
			СтрокаСРеквизитами.ВидЗадачи = Строка.ВидЗадачи;
			СтрокаСРеквизитами.ГУИДВидаЗадачи = Строка.ГУИДВидаЗадачи;
		КонецЕсли;
	КонецЦикла;
	
	Состояние(,,НСтр("ru = 'Обновление списка вопросов завершено'; en = 'Updating the list of requests is completed'") , АдресКартинки2);

КонецПроцедуры

&НаКлиенте
// Процедура активирует текущую строку таблицы вопросов
//
Процедура ВосстановитьТекСтроку()
	
	Структура = Новый Структура;
	Структура.Вставить("ГУИДВопроса", мТекСтрокаГУИД);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(Структура);
	
	Если МассивСтрок.Количество() = 0  Тогда
		НомерСтроки = Неопределено;
	Иначе
		НомерСтроки = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	Элементы.ТаблицаВопросов.ТекущаяСтрока = НомерСтроки;
	
	Если НомерСтроки <> Неопределено Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			ТекстВопроса = ПолучитьТекстОбсужденияВопроса(ТекДанные.ГУИДВопроса, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль,
			Объект.ПоказатьПолностью, ПравоЗакрытияТекВопроса, ТекДанные.Код);
			Если Объект.ОтображатьКонтакты Тогда
				ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ТекДанные.ГУИДВопроса);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет необходимые действия для добавления сообщения в вопрос
//
Процедура ДобавитьКВопросуКлиент(Элемент)
	
	Структура = Новый Структура;
	Структура.Вставить("Пользователь", Объект.Пользователь);
	Структура.Вставить("Пароль", Объект.Пароль);
	Структура.Вставить("АдресБазы", Объект.АдресБазы);
	Структура.Вставить("ГУИДВопроса", Элемент.ТекущиеДанные.ГУИДВопроса);
	Структура.Вставить("КодВопроса", Элемент.ТекущиеДанные.Код);
	Структура.Вставить("Проект", Элемент.ТекущиеДанные.Проект);
	Структура.Вставить("ТемаВопроса", Элемент.ТекущиеДанные.Ссылка);
	Структура.Вставить("ДатаВопроса", Элемент.ТекущиеДанные.ДатаВопроса);
	Структура.Вставить("ПравоЗакрытияТекВопроса", ПравоЗакрытияТекВопроса);
	Структура.Вставить("ГУИДТекПользователя", Объект.ГУИДТекПользователя);
	Структура.Вставить("АвторВопроса", Элемент.ТекущиеДанные.АвторВопроса);
    Структура.Вставить("Приоритет", Элемент.ТекущиеДанные.Приоритет);
    Структура.Вставить("ТребуемаяДатаОтвета", Элемент.ТекущиеДанные.ТребуемаяДатаОтвета);
	Структура.Вставить("ТекстФорума", ПолучитьПолныйТекстВопроса(Элемент.ТекущиеДанные.ГУИДВопроса));
	Структура.Вставить("ВозможноДобавлениеСообщений", Элемент.ТекущиеДанные.КартинкаСтатусаВопроса);
	Структура.Вставить("КартинкаСтатусаВопроса", Элемент.ТекущиеДанные.КартинкаСтатусаВопроса);
	Структура.Вставить("НадписьСтатусаВопроса", Элемент.ТекущиеДанные.СтатусВопроса);
	Структура.Вставить("НеПрочитан", Элемент.ТекущиеДанные.Непрочитан);
	// { RGS Лунякин Иван 27.10.2015 12:51:08
	Структура.Вставить("ПроектОдин", ПроектОдин);
	Структура.Вставить("Администратор", Администратор);
	Структура.Вставить("ПроектБазы", ПроектБазы);
	Структура.Вставить("ПроектБазы", ПроектОдин);
	Структура.Вставить("ЧасыПлан", Элемент.ТекущиеДанные.ЧасыПлан);
	Структура.Вставить("ЧасыФакт", Элемент.ТекущиеДанные.ЧасыФакт);
	Структура.Вставить("ОцениватьВопросы", Элемент.ТекущиеДанные.ОцениватьВопросы);
	// } RGS Лунякин Иван 27.10.2015 12:51:08
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаДобавленияСообщения", Структура, ЭтаФорма, Элемент.ТекущиеДанные.ГУИДВопроса);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаДобавленияСообщения", Структура, ЭтаФорма, Элемент.ТекущиеДанные.ГУИДВопроса);
	КонецПопытки; 
	
КонецПроцедуры

   

&НаСервере
// Функция возвращает результат закрытия вопроса
//
Функция ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса)
	
	ОбъектБаза = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектБаза.ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса);
	Возврат Результат;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
 	АдресКартинки1 = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Объект").ПолучитьМакет("КартинкаПрелоадера1"), Новый УникальныйИдентификатор);
	АдресКартинки2 = Новый Картинка(РеквизитФормыВЗначение("Объект").ПолучитьМакет("КартинкаПрелоадера2"));
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	Иконка_Кнопки_Галочка = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Галочка");
	Иконка_Кнопки_Домик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Домик");
	Иконка_Кнопки_Крестик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Крестик");
	Иконка_Кнопки_Крестик_Щит = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Крестик_Щит");
	Иконка_Кнопки_Смайлик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Смайлик");
	Иконка_Кнопки_Стрелочка = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Стрелочка");
	
	// { RGS Лунякин Иван 02.10.2015 11:36:23
	ПроверкаКодаЯзыка = Число(НСтр("ru = '0'; en = '1'"));
	
	Если ПроверкаКодаЯзыка = 0 Тогда
		Элементы.СтраницыКнопок.ТекущаяСтраница = Элементы.СтраницаОсновныхКнопок;
	ИначеЕсли ПроверкаКодаЯзыка = 1 Тогда	
	    Элементы.СтраницыКнопок.ТекущаяСтраница = Элементы.СтраницаОсновныхКнопокEN;
	КонецЕсли;
	
	Элементы.ОтправитьСообщение.Видимость = НЕ Булево(ПроверкаКодаЯзыка);
	Элементы.ОтправитьСообщениеEN.Видимость = Булево(ПроверкаКодаЯзыка);
	
	УстановитьЗаголовокИзМакетаНастроек();
	//СформироватьСписокВыбораОтборКолонка();
	
	Администратор = ПроверитьДоступностьПравАдминистратора();
	
	Элементы.ИзменитьФорму.Видимость = Администратор;
	// { RGS Козлов К.С. 08.02.2016 15:55:28
	Элементы.НастройкиПользователей.Видимость = Администратор;
	// } RGS Козлов К.С. 08.02.2016 15:55:28
	
	СоотвествиеКолонокОтбора 	= Новый ФиксированноеСоответствие(ЗаполнитьСоответствиеЗначенийКолонкиОтбора());
	СоотвествиеЗначенийОтбора 	= Новый ФиксированноеСоответствие(ЗаполнитьСоответствиеЗначенийОтбора());
	
	ПолучитьНастройкиФормы(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиФормы(Параметры)
	

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если Параметры.Свойство("КлючНастройки") Тогда
		КлючНастройки = Параметры.КлючНастройки;
		Пользователь = "";
	Иначе
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
		КлючНастройки = "";
	КонецЕсли;
	ОбработкаОбъект.ПолучитьНастройкиФормы(ЭтаФорма, КлючНастройки);

КонецПроцедуры
 

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии(Отказ)
	
	// { RGS LGoncharova 27.11.2018 Перенос Монитора в Расширение
	Если РасширениеАктивно() Тогда
		ОткрытьФорму("Обработка.rgsРасширениеМониторСопровождения.Форма");
		
		Отказ = Истина;
		Возврат;
		//ЭтаФорма.Закрыть();
	КонецЕсли;
	// } RGS LGoncharova 27.11.2018 Перенос Монитора в Расширение
	
	// {Добавлено (изменено) РГ-Софт, Серяков А.А., 08.08.17  GHB-0000422
	ПриОткрытииПереопределяемый(Отказ);
	// }Конец добавления (изменения)РГ-Софт, Серяков А.А.
	
	// Первое открытие
	Если Не ЗначениеЗаполнено(Объект.АдресБазы) Тогда                                                                                                                      
		// в этот параметр необходимо вписать адрес рабочей базы монитора
		// -----пример: Объект.АдресБазы = "http://89.188.108.154:6448/Monitor30"------
		Объект.АдресБазы = "http://89.188.108.154:6448/Monitor30"; 
		Объект.ТолькоМои = Истина;
		Объект.ПоказатьПолностью = Истина;
		Объект.ОтображатьКонтакты = Ложь;
		Объект.ОтображатьТекстВопросаСЗадержкой = Истина;
		Объект.ИспользоватьПомощник = Истина;
		Объект.ВремяОбновленияТекстаВопроса = 0.8;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Пользователь) Тогда
		
		// { RGS Глебов Дмитрий 24.02.2016 14:38:46 - заполнение логина и пароля представитеял в конфигурации Вывоз мусора
		ЗаполнитьЛогинПарольПредставителя();
		// } RGS Глебов Дмитрий 24.02.2016 14:39:28 - заполнение логина и пароля представитеял в конфигурации Вывоз мусора
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Объект.ОбновлятьАвтоматически = Ложь;
		Объект.ВремяОбновления = 60;
		Объект.ОтображатьТекстВопросаСЗадержкой = Истина;
		Объект.ВремяОбновленияТекстаВопроса = 0.8;
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4>" + НСтр("ru = 'Не заполнено имя пользователя!'; en = 'Not filled username !'") + "  
		|<BR>(для ввода имени пользователя и пароля используйте команду <FONT color=#536ac2><U>Настройки</U></FONT>)</FONT>");
		ОткрытьФормуНастроек();	 
	КонецЕсли; 
	
	// Добавлено RG-Soft, Черноус Елизавета, 27.11.17	 
	ОбновитьОтборПоПроектуПривязанномуКБазеНаОсновеНастроекВМакете(); 	
	// Конец добавления
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Если Объект.ОбновлятьАвтоматически Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов", Объект.ВремяОбновления);
		Иначе 
			ОбновитьТаблицуВопросов();
		КонецЕсли;
		ПодключитьОбработчикОжидания("ПроизвестиЗагрузкуНеобходимыхДанных",1,Истина);
	КонецЕсли;
	
	Элементы.ТаблицаКИ.Видимость = Объект.ОтображатьКонтакты;
	 
	// { RGS Лунякин Иван 10.11.2015 12:20:12   
    ПроверитьКоличествоДоступныхПроектов();
	ЭтаФорма.Заголовок = ЗаголовокФормы + Формат(ТекущаяДата(), НСтр("ru = 'Л=ru; '; en = 'Л=en; '") + "ДФ='dd ММММ yyyy'") + НСтр("ru = ' г. '; en = ' y. '") + ?(ЗначениеЗаполнено(НомерВерсии), НСтр("ru = ' Версия: '; en = ' Version: '")  + НомерВерсии , "");
	// } RGS Лунякин Иван 10.11.2015 12:20:12
	
	ПодключитьОбработчикОжидания("НарисоватьКнопкиПоУмолчаниюКлиент", 1, Истина);
	//НарисоватьКнопкиПоУмолчанию();
	
	// { RGS Лунякин Иван 02.10.2015 13:57:39
	Если ПроверкаКодаЯзыка Тогда
		Элементы.ПолныйСписокВопросовEN.ЦветФона = Новый Цвет(244,236,197);
	Иначе
	   	Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(244,236,197);
	КонецЕсли;
	
	УстановитьВидимостьКнопокВывестиСписок();
	УстановитьОтбор();
	// } RGS Лунякин Иван 02.10.2015 13:57:39
	
	Попытка
		Элементы.НовоеСообщение.ПодсказкаВВода = НСтр("ru = 'Введите текст сообщения...'; en = 'Enter your message ...'");
	Исключение
	КонецПопытки;
	
	//Фёдорова
	УникальностьФормы = ЭтаФорма.КлючУникальности;//ЭтаФорма.УникальныйИдентификатор; 
	//Фёдорова
	
	// { RGS Глебов Дмитрий 20.02.2016 - регистрация новых пользователей
	УстановитьВидимостьРегистрация();
	// } RGS Глебов Дмитрий 20.02.2016 - регистрация новых пользователей
	
КонецПроцедуры


// { RGS Глебов Дмитрий 24.02.2016  - заполнение логина и пароля представитеял в конфигурации Вывоз мусора
&НаСервере
Процедура ЗаполнитьЛогинПарольПредставителя()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЛогинПарольПредставителя = ОбработкаОбъект.ПолучитьЛогинПарольПредставителя();
	Если ЛогинПарольПредставителя.Логин <> Неопределено Тогда
	     Объект.Пользователь = ЛогинПарольПредставителя.Логин;
		 Объект.Пароль =  ЛогинПарольПредставителя.Пароль;
	КонецЕсли;
КонецПроцедуры

// регистрация доступна, если пользователь - представитель компании или не удалость подключиться и заполнен ключ защиты
&НаСервере
Процедура УстановитьВидимостьРегистрация()
	
	Элементы.Регистрация.Видимость = Ложь;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КлючЗащиты = ОбработкаОбъект.ПолучитьКлючЗащиты();
	Если КлючЗащиты = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЛогинПарольПредставителя = ОбработкаОбъект.ПолучитьЛогинПарольПредставителя();
	Если ЛогинПарольПредставителя.Логин = Объект.Пользователь Тогда
		Элементы.Регистрация.Видимость = Истина;
	КонецЕсли;
	
	Попытка 
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		
		Строка = "";
		ВерсияАктуальная = Прокси.ПроверитьВерсиюОбработки("",Строка);
	Исключение
		Элементы.Регистрация.Видимость = Истина;
	КонецПопытки;
	
КонецПроцедуры
// } RGS Глебов Дмитрий 24.02.2016  - заполнение логина и пароля представитеял в конфигурации Вывоз мусора




// { RGS Лунякин Иван 30.10.2015 14:19:09

// { RGS LGoncharova 27.11.2018 Перенос Монитора в Расширение
&НаСервере
Функция РасширениеАктивно()
	мРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", "РасширениеМониторСопровождения"));
	Если мРасширения.Количество() = 1
		И мРасширения[0].Активно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
// } RGS LGoncharova 27.11.2018 Перенос Монитора в Расширение

&НаСервере
Процедура ПроверитьКоличествоДоступныхПроектов()
	
	ТаблицаПроектов = ТаблицаВопросов.Выгрузить(,"Проект");
	ТаблицаПроектов.Свернуть(ТаблицаПроектов.Колонки.Проект.Имя);
	ПроектОдин = ?(ТаблицаПроектов.Количество() = 1, Истина, Ложь);
	
	//Если у пользователя один проект тогда скрываем Колонку "проект" из таблиц
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ВидимостьПроект = ДанныеФормы.ВидимостьПроекта(ЗначениеЗаполнено(ПроектБазы), ПроектОдин);
	Элементы.ТаблицаВопросовЗадачПроект.Видимость = ВидимостьПроект;
	Элементы.ТаблицаВопросовПроект.Видимость 	  = ВидимостьПроект;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораОтборКолонка()
	СписокВыбора = Элементы.ТаблицаОтбораКолонка.СписокВыбора;
	СписокВыбора.Очистить();	
	СписокВыбора.Добавить(НСтр("ru = 'Статус вопроса'; en = 'Request status'"));
	СписокВыбора.Добавить(НСтр("ru = 'Только непрочитанные'; en = 'Only unread'"));
    СписокВыбора.Добавить(НСтр("ru = 'Проект'; en = 'Project'"));
    СписокВыбора.Добавить(НСтр("ru = 'Дата вопроса'; en = 'Date of request'"));
    СписокВыбора.Добавить(НСтр("ru = 'Автор последнего сообщения'; en = 'Modified by'"));
    СписокВыбора.Добавить(НСтр("ru = 'Дата последнего сообщения'; en = 'Date of lastest post'"));
    СписокВыбора.Добавить(НСтр("ru = 'Автор вопроса'; en = 'The author of the request'"));
    СписокВыбора.Добавить(НСтр("ru = 'Приоритет'; en = 'Priority'"));
	СписокВыбора.Добавить(НСтр("ru = 'Требуемая дата ответа'; en = 'Requested date of reply'"));
	СписокВыбора.Добавить(НСтр("ru = 'Закрытые вопросы'; en = 'Resolved requests'"));
	Если Элементы.ТаблицаВопросовРучнойСтатусВопроса.Видимость Тогда
	    СписокВыбора.Добавить(НСтр("ru = 'Ручной статус вопроса'; en = 'Manual the status of the request'"));
	КонецЕсли; 
	// { RGS Глебов Дмитрий 12.09.2016 - S-I-0001846, 
	//если есть хотя бы 1 проект с предустановленными темами вопросов, дать возможность изменять тему
	Проекты = Объект.СписокПроектовИПользователей.Выгрузить(,"НаименованиеПроекта");
	Проекты.Свернуть("НаименованиеПроекта");	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	УстанавливатьОтборПоТеме = Ложь;
	ПроектыСВыборомТем.Очистить();
	Для каждого Строка Из Проекты Цикл
		Если ОбработкаОбъект.ПроверитьНаличиеТемВПроекте(Строка.НаименованиеПроекта) Тогда
			ПроектыСВыборомТем.Добавить(Строка.НаименованиеПроекта);
	    КонецЕсли;
	КонецЦикла;
	Если ПроектыСВыборомТем.Количество()>0 Тогда
		СписокВыбора.Добавить(НСтр("ru = 'Тема вопроса'; en = 'Request'"));
	КонецЕсли;
	// } RGS Глебов Дмитрий 12.09.2016 - S-I-0001846
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьКнопокВывестиСписок()

	Элементы.ВывестиСписокТаблицаВопросов.Видимость 	  = Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;
	Элементы.ВывестиСписокТаблицаВопросовИЗадач.Видимость = Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокИзМакетаНастроек()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетНастроек");
	ЯчейкаЗаголовкаФормыИзМакета = Макет.ПолучитьОбласть(1,1).ТекущаяОбласть;
	
	ЗаголовокФормы = "";
	
	Если ЯчейкаЗаголовкаФормыИзМакета <> Неопределено Тогда
		
		Попытка
			ЗаголовокФормы = НСтр(ЯчейкаЗаголовкаФормыИзМакета.Текст) + " ";
		Исключение
			ЗаголовокФормы = НСтр("ru = 'Монитор сопровождения '; en = 'Monitor of support '");
		Конецпопытки;
		
	КонецЕсли; 
	
	ЗаголовокФормы = ?(ЗначениеЗаполнено(ЗаголовокФормы), ЗаголовокФормы, НСтр("ru = 'Монитор сопровождения '; en = 'Monitor of support '"));
	
Конецпроцедуры 

&НаСервере
Процедура ПроверитьДоступностьWindowsАутентификации();

	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	    	  	
	Если ПользовательИБ.АутентификацияОС Тогда
		
		ИмяПользователя = ПользовательИБ.ПользовательОС;
		ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(ИмяПользователя);
		
		Пока ПозицияНедопустимогоСимвола > 0 Цикл
			НачалоИмени = ИмяПользователя + Лев(ИмяПользователя, ПозицияНедопустимогоСимвола - 1);
			КонецИмени = Сред(ИмяПользователя, ПозицияНедопустимогоСимвола + 1);
			ИмяПользователя = НачалоИмени + "_" + КонецИмени;
			ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(ИмяПользователя);	
		КонецЦикла;
		 
		Объект.Пользователь = ИмяПользователя;
		Объект.Пароль = ИмяПользователя + "pass!"; 
	
	КонецЕсли;             
	
КонецПроцедуры // ()

&НаСервере
Функция ЗаполнитьСпиокВыбораСервер(КолонкаВыгрузкиЗначений);

	ТаблицаРучныхСтатусов = ТаблицаВопросов.Выгрузить(,КолонкаВыгрузкиЗначений);
	ТаблицаРучныхСтатусов.Свернуть(КолонкаВыгрузкиЗначений);
	Возврат ТаблицаРучныхСтатусов.ВыгрузитьКолонку(КолонкаВыгрузкиЗначений);
	
КонецФункции 
// } RGS Лунякин Иван 30.10.2015 14:19:09   

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НужноОбновитьСписокВопросов" Тогда
		ОбновитьТаблицуВопросов();
	ИначеЕсли ИмяСобытия = "ОтключитьПомощникСозданияВопроса" Тогда
		Объект.ИспользоватьПомощник = Ложь;
	ИначеЕсли ИмяСобытия = "ВопросОкЗавершение" Тогда
		Результат = ЗавершитьОбсуждениеВопросаСервер(Параметр);
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
			Структура = Новый Структура;
			Структура.Вставить("ТекстПредупреждения",Результат);
			// { RGS Лунякин Иван 27.10.2015 12:51:08 
			Структура.Вставить("Администратор", Администратор);
			// } RGS Лунякин Иван 27.10.2015 12:51:08
			Попытка
				ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
			Исключение
				ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
			КонецПопытки; 
			Возврат;
		Иначе
			ПоказатьОповещениеПользователя(,,  Символы.ПС + НСтр("ru = 'Вопрос '; en = 'Request '") + Элементы.ТаблицаВопросов.ТекущиеДанные.Ссылка + НСтр("ru = ' закрыт'; en = ' closed'"), );
			ОбновитьТаблицуВопросовСервер();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НастройкиИзменены" Тогда
		СтруктураВозврата = Параметр;
		Объект.ТолькоМои = СтруктураВозврата.ТолькоМои;
		Объект.ПоказатьПолностью = СтруктураВозврата.ПоказатьПолностью;
		Если НЕ Объект.ОтображатьКонтакты = СтруктураВозврата.ОтображатьКонтакты Тогда
			Объект.ОтображатьКонтакты = СтруктураВозврата.ОтображатьКонтакты;
			ОтображатьКонтактыПриИзменении(Неопределено);
		КонецЕсли;
		Объект.ИспользоватьПомощник = СтруктураВозврата.ИспользоватьПомощник;
		Если НЕ Объект.Пользователь = СтруктураВозврата.Пользователь Тогда
			Объект.Пользователь = СтруктураВозврата.Пользователь;
			ПодключитьОбработчикОжидания("ПроизвестиЗагрузкуНеобходимыхДанных",1,Истина);
		КонецЕсли;
		
		Объект.Пароль = СтруктураВозврата.Пароль;
		Объект.АдресБазы = СтруктураВозврата.АдресБазы;
		// { RGS Лунякин Иван 27.10.2015 15:38:53    
		ПроектБазы = СтруктураВозврата.ПроектБазы;
		Если НЕ ПустаяСтрока(ПроектБазы) Тогда
			НаименованиеИБ = СтрокаСоединенияИнформационнойБазы();	
		КонецЕсли;
		
		Элементы.ТаблицаВопросовПроект.Видимость =?(ЗначениеЗаполнено(ПроектБазы), Ложь, НЕ ПроектОдин);
		// } RGS Лунякин Иван 27.10.2015 15:38:53
		
		//РГС Фёдорова 27.01.16  Добавлено
		//ОбновлениеСтруктуры(СтруктураВозврата);
		//РГС Фёдорова 27.01.16 Конец добавления
		
		Объект.ЗагружатьЗакрытыеОтмененныеВопросы = СтруктураВозврата.ЗагружатьЗакрытыеОтмененныеВопросы;
		Если СтруктураВозврата.ОбновлятьАвтоматически Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов", СтруктураВозврата.ВремяОбновления);
		Иначе
			ОтключитьОбработчикОжидания("ОбновитьТаблицуВопросов");
		КонецЕсли; 
		Объект.ОбновлятьАвтоматически = СтруктураВозврата.ОбновлятьАвтоматически;
		Объект.ВремяОбновления = СтруктураВозврата.ВремяОбновления;
		Объект.ОтображатьТекстВопросаСЗадержкой = СтруктураВозврата.ОтображатьТекстВопросаСЗадержкой;
		Объект.ВремяОбновленияТекстаВопроса = СтруктураВозврата.ВремяОбновленияТекстаВопроса;
		
		Если ПроверитьЗаполнениеРеквизитов() Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов",1, Истина);
		КонецЕсли; 
	ИначеЕсли ИмяСобытия = "ПроверкаОрфографииСообщения" Тогда
		УстановитьПравильноеХТМЛ(Параметр);
	ИначеЕсли ИмяСобытия = "СкачиваетсяНоваяВерсияОбработки" Тогда
		Закрыть();
	// { RGS Глебов Дмитрий 25.02.2016 - регистрация новых пользователей - установить нового
	ИначеЕсли ИмяСобытия = "ПользовательПарольИзменены" Тогда
		СтруктураВозврата = Параметр;
		Объект.Пользователь = СтруктураВозврата.Пользователь;
		Объект.Пароль = СтруктураВозврата.Пароль;
		Обновить(Неопределено);
	// } RGS Глебов Дмитрий 25.02.2016 - регистрация новых пользователей - установить нового	
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
// Процедура запускает сервисные механизмы обновления таблицы вопросов
//
Процедура Обновить(Команда)
	
	Если Не ПроверитьЗаполнениеРеквизитов()	Тогда
		Возврат;	
	КонецЕсли;
	ОбновитьТаблицуВопросов();	
	УстановитьОтбор();
	
КонецПроцедуры
 
&НаКлиенте
// Процедура запускает сервисные манизмы заврешения обсуждения
//
Процедура ЗавершитьОбсуждение(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТаблицаВопросов.ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо активизировать вопрос в таблице вопросов!'; en = 'It is necessary to step up the issue in a table of requests!'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
			
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ТаблицаВопросов.ТекущиеДанные.КартинкаСтатусаВопроса = 3 Тогда
		ТекстПредупреждения = НСтр("ru = 'Обсуждение данного вопроса уже завершено!'; en = 'Discussion of this issue has been completed!'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли;
	
	Если Не ПравоЗакрытияТекВопроса И НЕ Администратор Тогда
		ТекстПредупреждения = НСтр("ru = 'Вы не можете завершить обсуждение данного вопроса,'; en = 'You can not complete discussion,'") + Символы.ПС + НСтр("ru = 'т.к. не являетесь в нем спрашивающим!'; en = 'because you are not the requestor!'");
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		// { RGS Лунякин Иван 27.10.2015 12:51:08 
		Структура.Вставить("Администратор", Администратор);
		// } RGS Лунякин Иван 27.10.2015 12:51:08
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли; 
	
	Ответ = Неопределено;
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные; 
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	ТекстДляВопроса = НСтр("ru = 'После выполнения данной операции добавление новых сообщений в вопрос будет невозможно! Продолжить?'; en = 'After pressing button ""Ok"" you cannot add new message to request. Do you want to continue?'");
	Структура = Новый Структура;
	Структура.Вставить("ТекстВопроса",ТекстДляВопроса);
	Структура.Вставить("РежимВопроса","ОкОтмена");
	Структура.Вставить("ГУИДВопроса",ТекДанные.ГУИДВопроса);
	Структура.Вставить("ИмяСобытия","ЗавершениеВопроса");
	
	// { RGS Лунякин Иван 27.10.2015 13:43:40 
	Структура.Вставить("Администратор", Администратор);
    // } RGS Лунякин Иван 27.10.2015 13:43:40
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма, , ВариантоткрытияОкна.ОтдельноеОкно);
	КонецПопытки; 
	 
КонецПроцедуры

&НаКлиенте
// Процедура открывает окно
//
Процедура Настройки(Команда)
	
	ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек()

	Структура = Новый Структура;
	Структура.Вставить("Пользователь",								Объект.Пользователь);
	Структура.Вставить("Пароль", 									Объект.Пароль);
	Структура.Вставить("АдресБазы",									Объект.АдресБазы);
	Структура.Вставить("ЗагружатьЗакрытыеОтмененныеВопросы",		Объект.ЗагружатьЗакрытыеОтмененныеВопросы);
	Структура.Вставить("ОбновлятьАвтоматически",					Объект.ОбновлятьАвтоматически);
	Структура.Вставить("ВремяОбновления",							Объект.ВремяОбновления);
	Структура.Вставить("ОтображатьТекстВопросаСЗадержкой",			Объект.ОтображатьТекстВопросаСЗадержкой);
    Структура.Вставить("ВремяОбновленияТекстаВопроса",				Объект.ВремяОбновленияТекстаВопроса);
	Структура.Вставить("ТолькоМои",									Объект.ТолькоМои);
	Структура.Вставить("ПоказатьПолностью",							Объект.ПоказатьПолностью);
	Структура.Вставить("ОтображатьКонтакты",						Объект.ОтображатьКонтакты);
	Структура.Вставить("ИспользоватьПомощник",						Объект.ИспользоватьПомощник);
	
	// { RGS Лунякин Иван 27.10.2015 13:43:40 
	Структура.Вставить("Администратор",								Администратор);
	Структура.Вставить("ПроектБазы",								ПроектБазы);
	Структура.Вставить("ТаблицаОтбора",								ПолучитьМассивСтруктурИзТЗ());
    // } RGS Лунякин Иван 27.10.2015 13:43:40
	
	// { RGS Козлов К.С. 03.02.2016 10:44:44
	Структура.Вставить("КлючНастройки",								КлючНастройки);
	// } RGS Козлов К.С. 03.02.2016 10:44:44
		
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаНастройки", Структура, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаНастройки", Структура, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтруктурИзТЗ()
	ТЗ = ТаблицаОтбора.Выгрузить();
	МассивВозврата = Новый Массив;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		СтруктураСтроки = Новый Структура; 
		Для каждого Колонка Из ТЗ.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
		КонецЦикла;
	    МассивВозврата.Добавить(СтруктураСтроки);
	КонецЦикла; 
	
	Возврат МассивВозврата;
КонецФункции // ПолучитьМассивСтруктурИзТЗ()

//РГС Фёдорова 27.01.16 Добавлен функционал для работы с новыми элементами
&НаСервере
Функция ПолучитьМассивСтруктурИзТЗОбъекта()
	ТЗ = Объект.СохраненныеНастройки.Выгрузить();
	МассивВозврата = Новый Массив;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		СтруктураСтроки = Новый Структура; 
		Для каждого Колонка Из ТЗ.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
		КонецЦикла;
	    МассивВозврата.Добавить(СтруктураСтроки);
	КонецЦикла; 
	
	Возврат МассивВозврата;
КонецФункции // ПолучитьМассивСтруктурИзТЗ()

//РГС Фёдорова 27.01.16 Конец добавления

&НаКлиенте
// Процедура запускает сервисные механизмы обновления таблицы вопросов
//
Процедура ПерейтиВМонитор(Команда)
	
	Если Не ПроверитьЗаполнениеРеквизитов()	Тогда
		Возврат;	
	КонецЕсли;
	ЗапуститьПриложение(Объект.АдресБазы + "?&N=" + Объект.Пользователь + "&P=" + Объект.Пароль);
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает интерфейс скачивания программы AMMYY
//
Процедура СкачатьAmmyyAdmin(Команда)
	
	АдресВоВременномХранилище = СкачатьЭмиНаСервере();
   	Результат = ПолучитьФайл(АдресВоВременномХранилище,"AMMYY.exe",Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает сервисные механизмы создания нового вопроса
//
Процедура ЗадатьВопрос(Команда)
	
	Если Объект.ИспользоватьПомощник Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Пользователь", Объект.Пользователь);
		Структура.Вставить("Пароль", Объект.Пароль);
		Структура.Вставить("АдресБазы", Объект.АдресБазы);
		Структура.Вставить("Объект", Объект);
		
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		Структура.Вставить("Администратор", Администратор);
		Структура.Вставить("ПроектБазы", ПроектБазы);
		Структура.Вставить("ПроектОдин", ПроектОдин);
		// } RGS Лунякин Иван 27.10.2015 13:43:40
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПомощникаВводаВопроса", Структура, ЭтаФорма);
		Исключение
			//Сообщить(ОписаниеОшибки());
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПомощникаВводаВопроса", Структура, ЭтаФорма);
		КонецПопытки; 
		
	Иначе
		
		Структура = Новый Структура;
		Структура.Вставить("Пользователь", Объект.Пользователь);
		Структура.Вставить("Пароль", Объект.Пароль);
		Структура.Вставить("АдресБазы", Объект.АдресБазы);
		Структура.Вставить("Объект", Объект);
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		Структура.Вставить("Администратор", Администратор);
		Структура.Вставить("ПроектБазы", ПроектБазы);
		Структура.Вставить("ПроектОдин", ПроектОдин);
    	// } RGS Лунякин Иван 27.10.2015 13:43:40

		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаНовогоВопроса", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаНовогоВопроса", Структура, ЭтаФорма);
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗагрузкуНеобходимыхДанных()
	
	ПроизвестиЗагрузкуНеобходимыхДанныхНаСервере();
	// { RGS Глебов Дмитрий 14.09.2016  - S-I-0001846
	СформироватьСписокВыбораОтборКолонка();
	// } RGS Глебов Дмитрий 14.09.2016  - S-I-0001846
	
	
	ЭтаФорма.Заголовок = ЗаголовокФормы + Формат(ТекущаяДата(), НСтр("ru = 'Л=ru; '; en = 'Л=en; '") + "ДФ='dd ММММ yyyy'") + НСтр("ru = ' г. '; en = ' y.'")+ ?(ЗначениеЗаполнено(НомерВерсии), НСтр("ru = ' Версия: '; en = ' Version: '")  + НомерВерсии , "");	

	Если НЕ ВерсияАктуальная Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СсылкаНаСкачивание", СсылкаНаСкачивание);
		
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		СтруктураПараметров.Вставить("Администратор", Администратор);
    	// } RGS Лунякин Иван 27.10.2015 13:43:40

		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаКонтроляВерсий", СтруктураПараметров, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаКонтроляВерсий", СтруктураПараметров, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиЗагрузкуНеобходимыхДанныхНаСервере()
	
	// Получим список доступных проектов и доступных пользователей по ним
	Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
	Прокси = ПолучитьПрокси(Определение);
	Прокси.Пользователь = Объект.Пользователь;
	Прокси.Пароль = Объект.Пароль;
	Объект.СписокПроектовИПользователей.Загрузить(ЗначениеИзСтрокиВнутр(Прокси.СписокПроектовИПользователей()));
	
	Комментарий = РеквизитФормыВЗначение("Объект").Метаданные().Комментарий;
	Номер = Найти(Комментарий,"версия");
	НомерВерсии = Сред(Комментарий, Номер + 7, 7);
	ВерсияАктуальная = Прокси.ПроверитьВерсиюОбработки(НомерВерсии, СсылкаНаСкачивание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаВопросов"

&НаКлиенте
// Процедура - обработчик события "Выбор"
// табличной части "ТаблицаВопросов".
//
Процедура ТаблицаВопросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаВопросовРучнойСтатусВопроса" Тогда
		Возврат;
	КонецЕсли; 
	ДобавитьКВопросуКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличной части "ТаблицаВопросов".
//
Процедура ТаблицаВопросовПриАктивизацииСтроки(Элемент)
	
	Если Не ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
 
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		ИзмененаДоступностьЭлементов = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если ИзмененаДоступностьЭлементов Тогда
		ИзмененаДоступностьЭлементов = Ложь;
	КонецЕсли;
	
	Элементы.ОтправитьСообщение.Доступность = Ложь;
	Элементы.ВыполнитьЗадачу.Доступность = Ложь;
	
	Если Объект.ОтображатьТекстВопросаСЗадержкой Тогда
		Если ТекСтрока.ГУИДВопроса <> мТекСтрокаГУИД  Тогда
			ТекстВопроса = 
			"<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 9.00.8112.16421""></HEAD>
			|<BODY><P align=center>&nbsp;</P><P align=center>&nbsp;</P><P align=center>&nbsp;</P>
			|<P align=center><IMG align=middle src='" + АдресКартинки1 + "'></P><P align=center>" + НСтр("ru = 'Получение текста вопроса ..'; en = 'Receiving text subject ..'") + " </P></BODY></HTML>";	
		КонецЕсли; 
		ПодключитьОбработчикОжидания("ОтобразитьВопросКлиент", Объект.ВремяОбновленияТекстаВопроса, Истина);		
	Иначе
		ОтобразитьВопросКлиент();
	КонецЕсли;
	
	ИзменитьДоступностьПриАктивизацииВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьПриАктивизацииВопроса()
	
	ИзмененаДоступностьЭлементов = Ложь;
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если Элементы.ОтправитьСообщение.Доступность <> ТекСтрока.ВозможностьДобавлятьСообщение Тогда
		Элементы.ОтправитьСообщение.Доступность = ТекСтрока.ВозможностьДобавлятьСообщение;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;	
			
	//Если Элементы.ТолькоСотрудникамПоддержки.Доступность <> (ТекСтрока.ЯвляетсяРуководителем ИЛИ ТекСтрока.ЯвляетсяСотрудникомПоддержки) Тогда
	//	Элементы.ТолькоСотрудникамПоддержки.Доступность	=  (ТекСтрока.ЯвляетсяРуководителем ИЛИ ТекСтрока.ЯвляетсяСотрудникомПоддержки);
	//	ИзмененаДоступностьЭлементов = Истина;
	//КонецЕсли;	
	
	//Если НЕ Элементы.ТолькоСотрудникамПоддержки.Доступность Тогда
	//	ТолькоДляСотрудниковТП = Ложь;
	//	ИзмененаДоступностьЭлементов = Истина;
	//КонецЕсли;
	
	Если ТекСтрока.ПоЗадачам И НЕ Элементы.ВыполнитьЗадачу.Доступность Тогда
		Элементы.ВыполнитьЗадачу.Доступность = Истина;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;
	
	Если (ТекСтрока.СтатусВопроса = "Закрыт" или ТекСтрока.СтатусВопроса = "Отменен") И Элементы.ОтправитьСообщение.Доступность Тогда
		Элементы.ОтправитьСообщение.Доступность = Ложь;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;
		
	Элементы.ЗавершитьОбсуждение.Доступность = ?(Администратор, Администратор, ПравоЗакрытияТекВопроса);
	Элементы.ЗавершитьОбсуждение1.Доступность = ?(Администратор, Администратор, ПравоЗакрытияТекВопроса);
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач Тогда
		НарисоватьКнопкиПоЗадаче();
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОтобразитьВопросКлиент()
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ГУИДВопроса <> мТекСтрокаГУИД  Тогда
			Гуид = ТекСтрока.ГУИДВопроса;
			Код = ТекСтрока.Код;
			ТекстВопроса = ПолучитьТекстОбсужденияВопроса(Гуид, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль,
			Объект.ПоказатьПолностью, ПравоЗакрытияТекВопроса, Код);
			Если Объект.ОтображатьКонтакты Тогда
				ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, Гуид);
			КонецЕсли;
			
			мТекСтрокаГУИД = ТекСтрока.ГУИДВопроса;
		КонецЕсли; 
	Иначе
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("");
	КонецЕсли; 
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// СТАТУСЫ ВОПРОСОВ (ручные)

&НаКлиенте
Процедура ТаблицаВопросовРучнойСтатусВопросаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.ГУИДВопроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ПолучитьСписокВыбораВопросов();
	СписокВыбора.СортироватьПоЗначению(); 
	Для Каждого ЭлСписка Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораВопросов()
	
	ИзБазы = Новый СписокЗначений;
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ПолучитьСписокСтатусовВопросов();
	Исключение
	КонецПопытки; 
		
	Возврат ЗначениеИзСтрокиВнутр(ИзБазы);
	
КонецФункции
 
&НаКлиенте
Процедура ТаблицаВопросовРучнойСтатусВопросаПриИзменении(Элемент)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.ГУИДВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбновитьСтатусВопросаСервер(ТекСтрока.РучнойСтатусВопроса, ТекСтрока.ГУИДВопроса);
	ПоказатьОповещениеПользователя(,,Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусВопросаСервер(Статус, ГУИДВопроса)
	
	ИзБазы = "";
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ОбновитьСтатусВопроса(Статус, ГУИДВопроса);
	Исключение
	КонецПопытки; 
		
	Возврат ИзБазы;
	
КонецФункции 
    
&НаКлиенте
Процедура ОтображатьКонтактыПриИзменении(Элемент)
	
	Элементы.ТаблицаКИ.Видимость = Объект.ОтображатьКонтакты; //Глебов 10.09.2016 ОРР-0003215
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если Объект.ОтображатьКонтакты Тогда
		Если ТекДанные<>Неопределено  Тогда
			ТекстВопроса = ПолучитьТекстОбсужденияВопроса(ТекДанные.ГУИДВопроса,
			Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ПоказатьПолностью, ПравоЗакрытияТекВопроса, ТекДанные.Код);
			Если Объект.ОтображатьКонтакты Тогда
				ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ТекДанные.ГУИДВопроса);
			КонецЕсли;
			
			мТекСтрокаГУИД = ТекДанные.ГУИДВопроса;
		Иначе
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("");
		КонецЕсли; 
		НадписьСостояния = "";
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ДЛЯ РАБОТЫ С ВОПРОСОМ

&НаКлиенте
// Процедура - обработчик команды ОтправитьСообщение.
//
Процедура ОтправитьСообщение(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СообщениеТекст = НовоеСообщение.ПолучитьТекст();
	СообщениеХТМЛ = "";
	СтруктураКартинок = Новый Структура;
	НовоеСообщение.ПолучитьHTML(СообщениеХТМЛ, СтруктураКартинок);
	Для Каждого ЭлСтруктуры Из СтруктураКартинок Цикл
		BASE64 = ПолучитьBASE64ПредставлениеКартинки(ЭлСтруктуры.Значение);
		СообщениеХТМЛ = СтрЗаменить(СообщениеХТМЛ, ЭлСтруктуры.Ключ, "data:image;base64,"+BASE64+"");  
	КонецЦикла;
	
	// пустые сообщения не добавляем
	СообщениеДляПроверки = СтрЗаменить(СообщениеТекст, Символы.ПС, "");
	Если СообщениеДляПроверки = "" Тогда
		Возврат;
	КонецЕсли;
	                                                                                                                      
	Результат = ОтправитьСообщениеНаСервере(ТекСтрока.ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст);
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",Результат);
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		Структура.Вставить("Администратор", Администратор);
    	// } RGS Лунякин Иван 27.10.2015 13:43:40
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма,  ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма,  ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	ИначеЕсли Результат Тогда 
		НовоеСообщение.Удалить();
		ПоказатьОповещениеПользователя(,,  Символы.ПС + НСтр("ru = 'Сообщение успешно добавлено'; en = 'Message successfully added'") );
		ОбновитьТаблицуВопросов();
		УстановитьОтбор(); //Глебов 19.09.2016
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
// Процедура запускает сервисные функции необходимые для создания вопроса
//
Функция ОтправитьСообщениеНаСервере(ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст)
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы + "/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		Возврат Прокси.ДобавитьСообщениеВВопрос(ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст, Ложь);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
// Процедура - обработчик команды ПроверитьОрфографию.
//
Процедура ПроверитьОрфографию(Команда)
	
	ТекстДляПроверки = НовоеСообщение.ПолучитьТекст();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	СтруктураПараметров.Вставить("ИмяСобытия", "ПроверкаОрфографииСообщения");
	
	// { RGS Лунякин Иван 27.10.2015 13:43:40 
	СтруктураПараметров.Вставить("Администратор", Администратор);
    // } RGS Лунякин Иван 27.10.2015 13:43:40
	
	ТекстХТМЛ = Неопределено;
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	КонецПопытки; 
   
КонецПроцедуры

&НаСервере
Процедура УстановитьПравильноеХТМЛ(ТекстХТМЛ)
	
	НовоеСообщение.УстановитьHTML(ТекстХТМЛ, Новый Структура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьBASE64ПредставлениеКартинки(Картинка)
	
	Возврат Base64Строка(Картинка.ПолучитьДвоичныеДанные());
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьПрокси(Определение) Экспорт
	
	Возврат Новый WSПрокси (Определение, "RemoteConnect", "RemoteConnect", "RemoteConnectSoap");
	
КонецФункции

&НаКлиенте
// Процедура - обработчик команды СделатьНеПрочитанным.
//
Процедура СделатьНеПрочитанным(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ТаблицаВопросов.ВыделенныеСтроки;
		СписокВопросов = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СписокВопросов.Добавить(ТаблицаВопросов.НайтиПоИдентификатору(Строка).ГУИДВопроса);
		КонецЦикла;
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ТаблицаВопросовЗадач.ВыделенныеСтроки;
		СписокВопросов = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СписокВопросов.Добавить(ТаблицаВопросовЗадач.НайтиПоИдентификатору(Строка).ГУИДВопроса);
		КонецЦикла;
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
			
	ПризнакНепрочитанного = ТекДанные.Непрочитан = 1;
	Результат = СделатьНеПрочитаннымСервер(СписокВопросов, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ПризнакНепрочитанного);
	
	Если Результат <> "true" Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",Результат);
		// { RGS Лунякин Иван 27.10.2015 13:43:40 
		Структура.Вставить("Администратор", Администратор);
    	// } RGS Лунякин Иван 27.10.2015 13:43:40
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма, ,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецПопытки; 
		Возврат;
	Иначе
		ОбновитьТаблицуВопросов();
		УстановитьОтбор(); //Глебов 19.09.2016
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СделатьНеПрочитаннымСервер(СписокВопросов, АдресБазы, Пользователь, Пароль, ПризнакНепрочитанного)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Пользователь,  Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Пользователь;
		Прокси.Пароль = Пароль; 
		Возврат Прокси.УстановитьПризнакНепрочитанного(ПризнакНепрочитанного, ЗначениеВСтрокуВнутр(СписокВопросов));
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
		
КонецФункции	

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГУИД = ТекСтрока.ГУИДВопроса;
	СтруктураДанных = Новый Структура("Пользователь, Пароль, АдресБазы, ГУИДВопроса, Администратор", Объект.Пользователь, Объект.Пароль, Объект.АдресБазы, ГУИД, Администратор);
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных, ЭтаФорма);
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	
	ТекКолонка = Элементы.ТаблицаВопросов.ТекущийЭлемент;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Сред(ТекКолонка.Имя,16,СтрДлина(ТекКолонка.Имя) - 15);
	Если ИмяКолонки = "Картинка" Тогда
		ТаблицаВопросов.Сортировать("СтатусВопросаСортировка Возр");
	Иначе
		ТаблицаВопросов.Сортировать(ИмяКолонки + " Возр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУб(Команда)
	
	ТекКолонка = Элементы.ТаблицаВопросов.ТекущийЭлемент;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Сред(ТекКолонка.Имя,16,СтрДлина(ТекКолонка.Имя) - 15);
	Если ИмяКолонки = "Картинка" Тогда
		ТаблицаВопросов.Сортировать("СтатусВопросаСортировка Убыв");
	Иначе
		ТаблицаВопросов.Сортировать(ИмяКолонки + " Убыв");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗадачи(Команда)
	
	ОткрытыНепрочитанные = Ложь;
	// { RGS Лунякин Иван 02.10.2015 12:56:11 
	Если ПроверкаКодаЯзыка Тогда
	    Элементы.ПолныйСписокВопросовEN.ЦветФона = Новый Цвет(245,242,221);
		Элементы.НепрочитанныеВопрросыEN.ЦветФона = Новый Цвет(245,242,221);
	Иначе 
		Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(245,242,221);
		Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(245,242,221);
	КонецЕсли;    
    // } RGS Лунякин Иван 02.10.2015 12:56:11
	
	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач;
	ОбновитьТаблицуВопросов();
	
	//ОбновитьСписокЗадач();
	// { RGS Лунякин Иван 02.10.2015 12:57:35 
	   
	Если ПроверкаКодаЯзыка Тогда
	    Элементы.МоиЗадачиEN.ЦветФона = Новый Цвет(244,236,197);
	Иначе	
		Элементы.МоиЗадачи.ЦветФона = Новый Цвет(244,236,197);
	КонецЕсли; 
	УстановитьВидимостьКнопокВывестиСписок();

	// } RGS Лунякин Иван 02.10.2015 12:57:35
	
	ТаблицаВопросовПриАктивизацииСтроки(Неопределено);
	// { RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
	УстановитьОтбор();
	// } RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьКнопкиПоЗадаче()
	
	//Попытка
	//	Выполнить("Абракадабра");	
	//Исключение
	//КонецПопытки;

	ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	ТекстОписаниеЗадачи = СокрЛП(ТекСтрока.ЗадачаОписание) + НСтр("ru = ' Содержание: '; en = ' Contents: '") + СокрЛП(ТекСтрока.ЗадачаСодержание);
	
	ПолеРамка = Элементы.ДекорацияРеквизитыКЗаполнению;
	ПолеРамка.ЦветТекста = Новый Цвет(252,250,235);
	
	// проверить/открыть страницу с кнопками
	ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ТекСтрока.ВидЗадачи);
	
	СтраницаКнопок = Элементы.Найти("СтраницаКоманд" + ИмяВидаЗадачи + ?(ТекСтрока.НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
	
	//Если СтраницаКнопок = Неопределено Тогда
	//	НарисоватьСтраницу(ТекСтрока.ВидЗадачи, ТекСтрока.ГУИДВидаЗадачи, ТекСтрока.НеПрямаяАдресация);
	//КонецЕсли; 
	
	СтраницаКнопок = Элементы.Найти("СтраницаКоманд" + ИмяВидаЗадачи + ?(ТекСтрока.НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
	
	Если СтраницаКнопок = Неопределено Тогда
		НарисоватьСтраницу(ТекСтрока.ВидЗадачи, ТекСтрока.ГУИДВидаЗадачи, ТекСтрока.НеПрямаяАдресация);
		СтраницаКнопок = Элементы.Найти("СтраницаКоманд" + ИмяВидаЗадачи + ?(ТекСтрока.НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
		Если СтраницаКнопок = Неопределено Тогда
			СтраницаКнопок = Элементы.ГруппаПанельКомандЗадачСтраница1;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаПанельКомандЗадач.ТекущаяСтраница = СтраницаКнопок;
	
	// проверить/открыть страницу с полями
	СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи + ?(ТекСтрока.НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));     //	СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи); 
	Если СтраницаЭлементов = Неопределено Тогда
		НарисоватьСтраницу(ТекСтрока.ВидЗадачи, ТекСтрока.ГУИДВидаЗадачи, ТекСтрока.НеПрямаяАдресация);
		СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи + ?(ТекСтрока.НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
	КонецЕсли;
	
	Если СтраницаЭлементов = Неопределено Тогда
		Элементы.ГруппаПанельЭлементовПоЗадаче.ТекущаяСтраница = Элементы.ГруппаСтраница1;
		Возврат;
	КонецЕсли;
	Элементы.ГруппаПанельЭлементовПоЗадаче.ТекущаяСтраница = СтраницаЭлементов;
	ИмяСтраницы = "Страница" + СтраницаЭлементов.Заголовок;
	Для Каждого Строка Из Элементы Цикл 
		Если Найти(Строка.Имя,ИмяСтраницы)<>1 Тогда 
			Продолжить; 
		КонецЕсли;
		Если (Найти(Строка.Имя, "Поле1") <> 0 И ТипЗнч(Строка) = Тип("ДекорацияФормы")) ИЛИ (Найти(Строка.Имя, "Поле1КонтекстноеМеню") <> 0) Тогда
			Продолжить; // пустая надпись, на странице нет полей ввода
		КонецЕсли;
		// есть элементы на странице
		ПолеРамка.ЦветТекста = Новый Цвет(65,48,3);
		Прервать;
	КонецЦикла;
	
	// переключить текущую строку
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГУИДЗадачи",ТекСтрока.ГУИДЗадачи);
	ТекСтрока = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
	Если ТекСтрока.Количество() > 0 Тогда
		Элементы.РасшифровкаЗадач.ТекущаяСтрока = (ТекСтрока[0].НомерСтроки-1);//начало с 0
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьКнопкиПоУмолчаниюКлиент()
	НарисоватьКнопкиПоУмолчанию();	
КонецПроцедуры

&НаСервере
Процедура НарисоватьКнопкиПоУмолчанию()
		
	СписокВидовЗадач = ТаблицаВопросовЗадач.Выгрузить();
	СписокВидовЗадач.Свернуть("ВидЗадачи, ГУИДВидаЗадачи, НеПрямаяАдресация");
	
	Для Каждого Строка Из СписокВидовЗадач Цикл 
		НарисоватьСтраницу(Строка.ВидЗадачи, Строка.ГУИДВидаЗадачи, Строка.НеПрямаяАдресация);	
	КонецЦикла;
	
	Элементы.ГруппаПанельКомандЗадач.ТекущаяСтраница = Элементы.ГруппаПанельКомандЗадачСтраница1;

КонецПроцедуры

&НаСервере
Функция НарисоватьСтраницу(ВидЗадачи, ГУИДВидаЗадачи, НеПрямаяАдресация)
	
	//Попытка 
	//	Выполнить("Прпорп");
	//Исключение
	//КонецПопытки;
	Стр = Элементы.ГруппаПанельЭлементовПоЗадаче.ПодчиненныеЭлементы.Количество() + 1;
	
	Элементы.РасшифровкаЗадач.ТекущаяСтрока = 0;
	ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ВидЗадачи);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Массив);
	
	КС = Новый КвалификаторыСтроки(40);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрокаГУИД = Новый ОписаниеТипов(Массив, , КС);
	
	Если ЗначениеЗаполнено(ВидЗадачи) Тогда
		Попытка
			
			СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
			Если СтраницаЭлементов = Неопределено Тогда
				СтраницаЭлементов = Элементы.Добавить(ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"), Тип("ГруппаФормы"),Элементы.ГруппаПанельЭлементовПоЗадаче);
				
				СтраницаЭлементов.Заголовок = Стр;
				СтраницаЭлементов.РастягиватьПоВертикали = Истина;
				
			КонецЕсли;
			
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ГУИДВидаЗадачи",ГУИДВидаЗадачи);
				ЗадачиДанногоВида = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
				
				Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
				Прокси = ПолучитьПрокси(Определение);
				Прокси.Пользователь = Объект.Пользователь;
				Прокси.Пароль = Объект.Пароль;
				
				ИзБазы = Прокси.СписокРеквизитовИКнопокВидаЗадачи(ГУИДВидаЗадачи);
				СписокРеквизитовИКнопок = ЗначениеИзСтрокиВнутр(ИзБазы);
				
				Если СписокРеквизитовИКнопок.Количество() = 0 И НЕ НеПрямаяАдресация Тогда  // 
					допПоле = Элементы.Найти("Страница" + Стр + "Поле" + "1");
					Если допПоле = Неопределено Тогда
						допПоле = Элементы.Добавить("Страница" + Стр + "Поле" + "1", Тип("ДекорацияФормы"), СтраницаЭлементов);
						допПоле.Заголовок = "1";
						допПоле.ЦветТекста = Новый Цвет(252,250,235);
					КонецЕсли; 
					Возврат Истина;
				КонецЕсли;
			
			
				Если НЕ СписокРеквизитовИКнопок.Найти("Кнопка","ТипПоля") = Неопределено ИЛИ НеПрямаяАдресация Тогда
					// нарисуем страницу для кнопок
					
					Страница = Элементы.Найти("СтраницаКоманд" + ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"));
					Если Страница = Неопределено Тогда
						Страница = Элементы.Добавить("СтраницаКоманд" + ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация"), Тип("ГруппаФормы"), Элементы.ГруппаПанельКомандЗадач);
						Страница.Заголовок = Стр;
						Страница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					КонецЕсли; 
				КонецЕсли;
				
				//Создание элементов формы
				МассивРеквизитов = Новый Массив;
				
				Если НеПрямаяАдресация Тогда
					ИмяКнопки = "СтраницаКн" + Стр + "КнопкаПринятия";
					кнПример = Элементы.Найти(ИмяКнопки);  //("СтраницаКоманд" + ИмяВидаЗадачи + "НеПрямаяАдресация").ПодчиненныеЭлементы[ИмяКнопки];
					Если кнПример = Неопределено Тогда
						кнПример = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы["СтраницаКоманд" + ИмяВидаЗадачи + "НеПрямаяАдресация"]);
						кнПример.Заголовок = "Принять на исполнение";
						кнПример.ИмяКоманды = "ОбработкаНажатияКнопок";	
					КонецЕсли; 
				КонецЕсли; 
			
			
			Для Каждого ОписаниеЭлемента Из СписокРеквизитовИКнопок Цикл
				КодЭлемента = ОписаниеЭлемента.Код;
				
				Если ОписаниеЭлемента.ТипПоля = "Реквизит" Тогда
					
					ИмяПоляВвода = "Страница" + Стр + "Поле" + КодЭлемента;
					НоваяСтрокаСоответствие = СоответствиеРеквизитовИПолей.Добавить();
					НоваяСтрокаСоответствие.Наименование = ОписаниеЭлемента.ПредставлениеПоля;
					НоваяСтрокаСоответствие.ИмяПоляВвода = ИмяПоляВвода;
					НоваяСтрокаСоответствие.ПроверятьЗаполнение = ОписаниеЭлемента.Обязательный;
					
					Если ОписаниеЭлемента.ИмяТипа = "Строка" Тогда
						КС = Новый КвалификаторыСтроки(ОписаниеЭлемента.Длина);
						Массив = Новый Массив;
						Массив.Добавить(Тип("Строка"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив, , КС);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Число" Тогда
						КЧ = Новый КвалификаторыЧисла(ОписаниеЭлемента.Длина, ОписаниеЭлемента.Точность, ?(ОписаниеЭлемента.НеОтрицательное,ДопустимыйЗнак.Неотрицательный,ДопустимыйЗнак.Любой));
						Массив = Новый Массив;
						Массив.Добавить(Тип("Число"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив, КЧ);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Дата" Тогда
						КД = Новый КвалификаторыДаты(?(ОписаниеЭлемента.ДатаВремя,ЧастиДаты.ДатаВремя,ЧастиДаты.Дата));
						Массив = Новый Массив;
						Массив.Добавить(Тип("Дата"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив,,,КД);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Булево" Тогда
						ОписаниеТиповПоля = ОписаниеТиповБулево;
					КонецЕсли;
					
					Реквизит = Новый РеквизитФормы(ИмяПоляВвода, ОписаниеТиповПоля, , ОписаниеЭлемента.ПредставлениеПоля);
					МассивРеквизитов.Добавить(Реквизит);
					
					Реквизит = Новый РеквизитФормы(ИмяПоляВвода + "ГУИД", ОписаниеТиповСтрокаГУИД);
					МассивРеквизитов.Добавить(Реквизит);
					
				Иначе 
					
					ИмяКнопки = "СтраницаКн" + Стр + "Кнопка" + КодЭлемента;
					кнПример = Элементы.Найти(ИмяКнопки);
					Если кнПример = Неопределено Тогда
						кнПример = Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"),Элементы["СтраницаКоманд" + ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация")]);
						кнПример.Заголовок = ОписаниеЭлемента.ПредставлениеПоля;
						кнПример.ИмяКоманды = "ОбработкаНажатияКнопок";
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
			
			// Заполним ГУИДы
			Для Каждого ОписаниеЭлемента Из СписокРеквизитовИКнопок Цикл
				Если ОписаниеЭлемента.ТипПоля = "Реквизит" Тогда
					КодЭлемента = ОписаниеЭлемента.Код;
					ИмяПоляВвода = "Страница" + Стр + "Поле" + КодЭлемента + "ГУИД";
					Выполнить ("ЭтаФорма." + ИмяПоляВвода + " = ОписаниеЭлемента.ГУИДРеквизита");
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Реквизит Из МассивРеквизитов Цикл
				
				Если Найти(Реквизит.Имя, "ГУИД") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПолеФормы = Элементы.Добавить(Реквизит.Имя, Тип ("ПолеФормы"), СтраницаЭлементов);
				ПолеФормы.ПутьКДанным = Реквизит.Имя;
				Если Реквизит.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
					ПолеФормы.Вид = ВидПоляФормы.ПолеФлажка;
				Иначе
					ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
					Если Реквизит.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
						Если Реквизит.ТипЗначения.КвалификаторыСтроки.Длина > 50 Тогда
							ПолеФормы.Высота = 5;
							ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
							ПолеФормы.МногострочныйРежим = Истина;
							ПолеФормы.Ширина = 300;
						Иначе
							ПолеФормы.Ширина = 200;
						КонецЕсли;
						ПолеФормы.КнопкаВыбора = Ложь;
						ПолеФормы.АвтоПереносСтрок = Истина;
					ИначеЕсли Реквизит.ТипЗначения.СодержитТип(Тип("Число"))ИЛИ Реквизит.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
						ПолеФормы.КнопкаВыбора = Истина;
					КонецЕсли;
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ИмяПоляВвода",Реквизит.Имя);
					Строки = СоответствиеРеквизитовИПолей.НайтиСтроки(СтруктураОтбора);
					Если Строки.Количество() > 0 И Строки[0].ПроверятьЗаполнение Тогда
						ПолеФормы.АвтоОтметкаНезаполненного = Истина;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяВидаЗадачи(ВидЗадачи)
	
	ГотовоеНазвание = ВидЗадачи;
	
	// проверим на наличие специальных символов
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ВК,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ВТаб,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.НПП,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ПС,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ПФ,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.Таб,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "/" ," ");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "\" ," ");
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "." ,"");
	
	// уберем пробелы и добавим заглавные буквы
	Пока Найти(ГотовоеНазвание, " ") Цикл
		НомерПробела = Найти(ГотовоеНазвание, " ");
		ЛеваяЧасть = Лев(ГотовоеНазвание,НомерПробела - 1);
		Остаток = Прав(ГотовоеНазвание,СтрДлина(ГотовоеНазвание) - НомерПробела);
		БольшаяБуква = ВРег(Лев(Остаток,1));
		ОстатокБезБуквы = Прав(Остаток,СтрДлина(Остаток) - 1);
		ГотовоеНазвание = ЛеваяЧасть + БольшаяБуква + ОстатокБезБуквы;
	КонецЦикла;
	
	Возврат ГотовоеНазвание;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияКнопок(Команда)
	
	ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	
	Попытка 
		ИмяКнопки = ТекущийЭлемент.Имя;
		Счетчик = Найти(ИмяКнопки, "Кнопка");
		КоличествоСимволовВНомере = СтрДлина(ИмяКнопки)-СтрДлина(Лев(ИмяКнопки,Счетчик+5));
		Идентификатор = Прав(ИмяКнопки, КоличествоСимволовВНомере);
		Если Идентификатор = "Принятия" Тогда
			КодКнопки = "Принятия";
		Иначе
			КодКнопки = Число(Идентификатор);
		КонецЕсли; 
		
	Исключение
		КодКнопки = Неопределено;
	КонецПопытки;
	
	Если КодКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ОцениватьТрудозатраты И НЕ КодКнопки = "Принятия" Тогда
		Сообщить("Данную задачу через обработку выполнить нельзя!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу(ТекДанные.ВидЗадачи, ТекДанные.ГУИДЗадачи, ТекДанные.НеПрямаяАдресация, КодКнопки);
	ОбновитьТаблицуВопросов();
	УстановитьОтбор(); //Глебов 19.09.2016
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуКнопка()
	
	ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ОцениватьТрудозатраты Тогда
		Сообщить(НСтр("ru = 'Данную задачу через обработку выполнить нельзя!'; en = 'This task through the processing cannot be performed!'"));
		Возврат;
	КонецЕсли;

	ВыполнитьЗадачу(ТекДанные.ВидЗадачи, ТекДанные.ГУИДЗадачи);
	ОбновитьТаблицуВопросов();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоЗадачам", Истина);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;
	КонецЕсли;
	УстановитьОтбор(); //Глебов 19.09.2016

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачу(ВидЗадачи, ГУИДЗадачи, НеПрямаяАдресация = Неопределено, КодКнопки = Неопределено)
	
	Отказ = Ложь;
	ДанныеКЗаполнениюМассив = Новый Массив;
	
	// 1. Определим страницу
	Если ЗначениеЗаполнено(ВидЗадачи) Тогда
		
		ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ВидЗадачи);
		МассивПроверяемыхРеквизитов = Новый Массив;
		
		ЭлементыПодчиненные = Элементы[ИмяВидаЗадачи + ?(НеПрямаяАдресация, "НеПрямаяАдресация", "ПрямаяАдресация")].ПодчиненныеЭлементы;
		Для Каждого Строка Из ЭлементыПодчиненные Цикл 
			
			// есть элементы на странице
			ЗначениеРеквизита = Неопределено;
			Выполнить("ЗначениеРеквизита = " + Строка.Имя);
			
			ГУИДРеквизита = "";
			Выполнить("ГУИДРеквизита = " + Строка.Имя + "ГУИД");
			
			// Проверить заполнение
			Если Строка.Вид = ВидПоляФормы.ПолеВвода И Строка.АвтоОтметкаНезаполненного = Истина И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Отказ = Истина;
				ИмяПоля = Строка.Имя;
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ИмяПоляВвода",ИмяПоля);
				РезультатПоиска = СоответствиеРеквизитовИПолей.НайтиСтроки(СтруктураОтбора);
				Если РезультатПоиска.Количество() > 0 Тогда
					Сообщить(НСтр("ru = 'Необходимо заполнить ""'; en = 'You need to fill """)  + РезультатПоиска[0].Наименование + """");	 
				Иначе
					Сообщить(НСтр("ru = 'Необходимо заполнить отмеченные поля!'; en = 'You must fill in the fields marked with!'"));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			// если заполнено - будем передавать
			Если (Строка.Вид = ВидПоляФормы.ПолеФлажка И ЗначениеРеквизита = Истина) ИЛИ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
				ДанныеКЗаполнениюМассив.Добавить(Новый Структура("СвойствоГУИД,Значение", ГУИДРеквизита, ЗначениеРеквизита));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			
			// формируем структуру параметров
			СтруктураКВыполнению = Новый Структура;
			СтруктураКВыполнению.Вставить("ГУИДЗадачи",ГУИДЗадачи);
			
			Результат = Истина;
					
			Если ДанныеКЗаполнениюМассив.Количество() = 0 Тогда
				ДанныеКЗаполнению = Неопределено; //нет дополнительных реквизитов
			Иначе
				ДанныеКЗаполнению = ЗначениеВСтрокуВнутр(ДанныеКЗаполнениюМассив);
			КонецЕсли;	
			
			СтруктураКВыполнению.Вставить("ДанныеКЗаполнениюМассив",ДанныеКЗаполнению);
			
			// проверим код кнопки
			Если НЕ КодКнопки = Неопределено Тогда
				СтруктураЗаполнения = Новый Структура("ВремяВыполнения, ОписаниеЗадачи, ВремяВыполненияПотери, ПричинаПревышения, ВремяПоДоп", 0, "", 0, "", 0);		
				СтруктураКВыполнению.Вставить("СтруктураЗаполнения",СтруктураЗаполнения);
				СтруктураКВыполнению.Вставить("КодКнопки",КодКнопки);
			КонецЕсли;
			
			// выполняем задачу
			ВходнойПараметр = ЗначениеВСтрокуВнутр(СтруктураКВыполнению);
			Попытка
				Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
				Прокси = ПолучитьПрокси(Определение);
				Прокси.Пользователь = Объект.Пользователь;
				Прокси.Пароль = Объект.Пароль;
				
				Результат = Прокси.ВыполнениеЗадачи(ВходнойПараметр);
				Если Результат <> "true" И Результат <> Истина Тогда
					Сообщить(Результат);
				Иначе
					// удалять страницу и реквизиты не будем, будем очищать
					Для Каждого Строка Из ЭлементыПодчиненные Цикл
						// есть элементы на странице
						ЗначениеРеквизита = Неопределено;
						Выполнить("ЗначениеРеквизита = " + Строка.Имя);
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = """"");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = 0");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = ЛОЖЬ");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НепрочитанныеВопросы(Команда)
	
	ОткрытыНепрочитанные = Истина;
	ОбновитьТаблицуВопросов();
	Если ПроверкаКодаЯзыка Тогда
		Элементы.ПолныйСписокВопросовEN.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачиEN.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачиEN.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
		Элементы.НепрочитанныеВопрросыEN.ЦветФона = Новый Цвет(244,236,197);
	Иначе 	
		Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачи.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачи.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
		Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(244,236,197);
	КонецЕсли;
	
	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;	
	
	// { RGS Лунякин Иван 03.11.2015 9:50:28 
	УстановитьВидимостьКнопокВывестиСписок();
	// } RGS Лунякин Иван 03.11.2015 9:50:28   
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСписокВопросов(Команда)
	
	ОткрытыНепрочитанные = Ложь;
	ОбновитьТаблицуВопросов();
	
	// { RGS Лунякин Иван 02.10.2015 12:34:27 
	
	Если ПроверкаКодаЯзыка Тогда
		Элементы.ПолныйСписокВопросовEN.ЦветФона = Новый Цвет(244,236,197);
		Элементы.МоиЗадачиEN.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачиEN.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
		Элементы.НепрочитанныеВопрросыEN.ЦветФона = Новый Цвет(245,242,221);
	Иначе 	
		Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(244,236,197);
		Элементы.МоиЗадачи.ЦветФона = Новый Цвет(245,242,221);
		Элементы.МоиЗадачи.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
		Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(245,242,221);
	КонецЕсли;
	УстановитьВидимостьКнопокВывестиСписок();
	
	// } RGS Лунякин Иван 02.10.2015 12:34:27
	
	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;
	// { RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
	УстановитьОтбор();
	// } RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправку(Команда)
	
	ЭтаФорма.ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеСообщениеПриИзменении(Элемент)
	а = 1;
КонецПроцедуры


// { RGS Лунякин Иван 26.10.2015 12:08:11 

// Функция проверяет доступность текущему пользователю прав администратора по макету
&НаСервере
Функция ПроверитьДоступностьПравАдминистратора()

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетНастроек");
	ОбластьПоиска = Макет.Область("C1");
	ПравоАдминистрирования = Макет.НайтиТекст(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
    Возврат(ПравоАдминистрирования <> Неопределено);

КонецФункции // ()

&НаКлиенте
Процедура УстановитьОтбор()
	
	Отбор = Новый Структура();
	
	Для каждого Строка Из ТаблицаОтбора Цикл
		Если Строка.Использовать И ЗначениеЗаполнено(Строка.КолонкаТаблицы) И (ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число"))Тогда
			Если Не Отбор.Свойство(Строка.КолонкаТаблицы) Тогда
			    Отбор.Вставить(Строка.КолонкаТаблицы, Строка.Значение);
			//Иначе	
			//	Отбор[Строка.КолонкаТаблицы] = Новый Массив; //Неопределено не даёт пустой результат
				//Прервать; //Дальше устанавливать отбор смысла не имеет
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаДляОтбора = ?(Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов, "ТаблицаВопросов" , "ТаблицаВопросовЗадач");
	
	// { RGS Глебов Дмитрий 13.09.2016 - S-I-0001846
	УстановитьОтборСервер(Отбор);	
	Элементы.ТаблицаВопросов.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Скрывать",Ложь)); //Новый ФиксированнаяСтруктура(Отбор);
	Элементы.ТаблицаВопросовЗадач.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Скрывать",Ложь)); //Новый ФиксированнаяСтруктура(Отбор);
	// } RGS Глебов Дмитрий 13.09.2016 - S-I-0001846
	
	//Выполнить("Элементы." + ТаблицаДляОтбора + ".ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор)");
	
КонецПроцедуры

// { RGS Глебов Дмитрий 13.09.2016 - S-I-0001846

&НаСервере
Процедура УстановитьОтборСервер(СтруктураОтбора)
	
	ЗапросТаблицаВопросов = Новый Запрос;
	ЗапросТаблицаВопросовЗадач = Новый Запрос;
	
	
	ТЗТаблицаВопросов = РеквизитФормыВЗначение("ТаблицаВопросов");
	ТЗТаблицаВопросовЗадач = РеквизитФормыВЗначение("ТаблицаВопросовЗадач");
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьЗапросОтбора(ЗапросТаблицаВопросов,ТЗТаблицаВопросов,СтруктураОтбора, ПроектыСВыборомТем);
	ОбработкаОбъект.СформироватьЗапросОтбора(ЗапросТаблицаВопросовЗадач,ТЗТаблицаВопросовЗадач,СтруктураОтбора, ПроектыСВыборомТем);	

	РезультатЗапроса = ЗапросТаблицаВопросов.Выполнить();
	ТЗТаблицаВопросов =  РезультатЗапроса.Выгрузить();
	ТаблицаВопросов.Загрузить(ТЗТаблицаВопросов); 
	
	РезультатЗапроса = ЗапросТаблицаВопросовЗадач.Выполнить();
	ТЗТаблицаВопросовЗадач = РезультатЗапроса.Выгрузить();
	ТаблицаВопросовЗадач.Загрузить(ТЗТаблицаВопросовЗадач);
	
КонецПроцедуры


// } RGS Глебов Дмитрий 13.09.2016 - S-I-0001846


&НаКлиенте
Процедура ЗаполнитьСписокВыбораЗначенияотбора(КолонкаОтбора)	
	
	МассивСтрокТаблицыотбора = Таблицаотбора.НайтиСтроки(Новый Структура("КолонкаТаблицы", КолонкаОтбора)); 
	
	Если МассивСтрокТаблицыотбора = 0 Тогда
		Возврат;
	Иначе
		СписокВыбора = Элементы.ТаблицаОтбораЗначение.СписокВыбора;
		СписокВыбора.Очистить();
	КонецЕсли;
	
	СписокВыбора.ЗагрузитьЗначения(ЗаполнитьСпиокВыбораСервер(КолонкаОтбора));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодЯзыка()
	Возврат ?(ПроверкаКодаЯзыка = 1, "EN", "RU");
КонецФункции // ()
 

&НаКлиенте
Процедура ТаблицаОтбораПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСоответствиеЗначенийКолонкиОтбора();
	
	СоотвествиеЗначений = Новый Соответствие;
	
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Статус вопроса", "Request status"), 							"СтатусВопроса"); 
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Только непрочитанные", "Only unread"), 						"Непрочитан"); 
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Проект", "Project"), 											"Проект");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Дата вопроса", "Date of request"), 							"ДатаВопроса");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Автор последнего сообщения", "Modified by"), 					"АвторПоследнегоСообщения");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Дата последнего сообщения", "Date of lastest post"), 			"ДатаПоследнегоСообщения");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Автор вопроса", "The author of the request"), 					"АвторВопроса");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Приоритет", "Priority"), 										"Приоритет");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Требуемая дата ответа", "Requested date of reply"), 			"ТребуемаяДатаОтвета");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Ручной статус вопроса", "Manual the status of the request"), 	"РучнойСтатусВопроса");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Закрытые вопросы", "Resolved requests"), 						"Закрыт");
	// { RGS Глебов Дмитрий 13.09.2016 - S-I-0001846
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Тема вопроса", "Request"), 						            "Ссылка");	
	// } RGS Глебов Дмитрий 13.09.2016 - S-I-0001846
	
	Возврат СоотвествиеЗначений;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСоответствиеЗначенийОтбора()
	
	СоотвествиеЗначений = Новый Соответствие;
	
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Новый", "New"), 						"Новый"); 
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Принят к рассмотрению", "Accepted"), 	"Принят к рассмотрению");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Отвечен", "Answered"), 				"Отвечен");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Закрыт", "Closed"), 					"Закрыт");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Отменен", "Cancelled"), 				"Отменен");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Критический", "Critical"), 			"Критический");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Высокий", "High"), 					"Высокий");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Обычный", "Normal"), 					"Обычный");
	СоотвествиеЗначений.Вставить(ЗаполнитьЗначенияСтруктуры("Низкий", "Low"), 						"Низкий");
	
	Возврат СоотвествиеЗначений;
	
КонецФункции // ()
 
&НаСервереБезКонтекста
Функция ЗаполнитьЗначенияСтруктуры(RU, EN)
	
	СтруктураСоотвествия = Новый Структура("RU, EN");
	СтруктураСоотвествия.RU = RU; 
	СтруктураСоотвествия.EN = EN; 
	Возврат СтруктураСоотвествия;
	
КонецФункции // ()

&НаКлиенте
Процедура ТаблицаОтбораПриАктивизацииЯчейки(Элемент)
	Если Элементы.ТаблицаОтбора.ТекущийЭлемент.Имя  = "ТаблицаОтбораЗначение" Тогда
		УстановитьТипЗначения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// { RGS Козлов К.С. 02.02.2016 14:02:45
	//СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ДанныеФормы",);
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресХранилищаСтруктуры);
	// } RGS Козлов К.С. 02.02.2016 14:02:45
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		Объект.АдресБазы							= СтруктураНастроек.АдресБазы;
		Объект.ЗагружатьЗакрытыеОтмененныеВопросы	= СтруктураНастроек.ЗагружатьЗакрытыеОтмененныеВопросы;
		Объект.ВремяОбновления						= СтруктураНастроек.ВремяОбновления;
		Объект.ОбновлятьАвтоматически				= СтруктураНастроек.ОбновлятьАвтоматически;
		Объект.ОтображатьТекстВопросаСЗадержкой		= СтруктураНастроек.ОтображатьТекстВопросаСЗадержкой;
		Объект.ВремяОбновленияТекстаВопроса			= СтруктураНастроек.ВремяОбновленияТекстаВопроса;
		Объект.ТолькоМои							= СтруктураНастроек.ТолькоМои;
		Объект.ПоказатьПолностью					= СтруктураНастроек.ПоказатьПолностью;
		Объект.ОтображатьКонтакты					= СтруктураНастроек.ОтображатьКонтакты;
		Объект.ИспользоватьПомощник					= СтруктураНастроек.ИспользоватьПомощник;
		НастройкиБылиСкопированы					= СтруктураНастроек.НастройкиБылиСкопированы; 
		ЗаполнитьТаблицуОтбора(СтруктураНастроек.ТаблицаОтбора);
		//РГС Фёдорова 28.01.16 Добавлено заполнение новой структуры
		Если СтруктураНастроек.Свойство("СохраненныеНастройки") Тогда
			//ЗаполнитьТаблицуНастроек(СтруктураНастроек.СохраненныеНастройки);
		КонецЕсли;
		//РГС Фёдорова 28.01.16 Конец добавления
		НаименованиеИБ = СтрокаСоединенияИнформационнойБазы();
		Если НаименованиеИБ = СтруктураНастроек.НаименованиеИБ Тогда
			ПроектБазы = СтруктураНастроек.ПроектБазы;
		КонецЕсли; 
		
	КонецЕсли;
	
	Элементы.ТаблицаВопросовПроект.Видимость = НЕ ЗначениеЗаполнено(ПроектБазы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтбора(Массив)
	ТаблицаЗначенийОтборов = ТаблицаОтбора.Выгрузить();
	ТаблицаЗначенийОтборов.Очистить();
	Для каждого ЭлементМассива Из Массив Цикл
		СтрокаТЗ = ТаблицаЗначенийОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, ЭлементМассива);
	КонецЦикла;
	ЗаполнитьПредставленияОтборов(ТаблицаЗначенийОтборов, "КолонкаТаблицы", СоотвествиеКолонокОтбора, "Колонка");
	ЗаполнитьПредставленияОтборов(ТаблицаЗначенийОтборов, "ЗначениеТаблицы", СоотвествиеЗначенийОтбора, "Значение");
	ТаблицаОтбора.Загрузить(ТаблицаЗначенийОтборов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставленияОтборов(ТаблицаЗначенийОтборов, Колонка, Соответствие, КолонкаПредставления);
	
	МассивВариантовКолонки	= ТаблицаЗначенийОтборов.ВыгрузитьКолонку(Колонка);
	
	Язык = ?(ПроверкаКодаЯзыка = 1, "EN", "RU");
	
	Для каждого ЭлементСоответствия Из Соответствие Цикл
		РезультатПоиска = МассивВариантовКолонки.Найти(ЭлементСоответствия.Значение);
		Если РезультатПоиска <> Неопределено Тогда
			МассивСтрокТЗ = ТаблицаЗначенийОтборов.НайтиСтроки(Новый Структура(Колонка, МассивВариантовКолонки[РезультатПоиска]));
			Для каждого Строка Из МассивСтрокТЗ Цикл
				Выполнить("Строка." + КолонкаПредставления + " = ЭлементСоответствия.Ключ[Язык]");
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтбораКолонкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(ВыбранноеЗначение) Тогда
		Элементы.ТаблицаОтбора.ТекущиеДанные.КолонкаТаблицы = ПолучитьИзСоответствияЗначение(ВыбранноеЗначение, СоотвествиеКолонокОтбора); 
		УстановитьТипЗначения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзСоответствияЗначение(ТекущееЗначение, Соответствие)
	Язык = ПолучитьКодЯзыка();
	Для каждого Элемент Из Соответствие Цикл
		Если Элемент.Ключ[Язык] = ТекущееЗначение Тогда
			Возврат	Элемент.Значение;
		КонецЕсли; 
	КонецЦикла;
	Возврат ТекущееЗначение;
КонецФункции

&НаКлиенте
Процедура УстановитьТипЗначения()
	
	Если Элементы.ТаблицаОтбора.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаОтбора = Элементы.ТаблицаОтбора.ТекущиеДанные.КолонкаТаблицы;
	Значение = Элементы.ТаблицаОтбора.ТекущиеДанные.Значение;
	
	РежимВыбораИзСписка = Ложь;
	// { РГ-Софт, Татарников Иван, 27.02.2018 - ОРР-0006635
	ПоказыватьКнопкуВыбораИзСписка = Истина;
	// } РГ-Софт, Татарников Иван 27.02.2018
	Элементы.ТаблицаОтбораЗначение.СписокВыбора.Очистить();
	
	Если КолонкаОтбора = "СтатусВопроса" ИЛИ
		 КолонкаОтбора = "Приоритет" ИЛИ
		 КолонкаОтбора = "РучнойСтатусВопроса" ИЛИ
	 	 КолонкаОтбора = "АвторПоследнегоСообщения" ИЛИ
		 КолонкаОтбора = "АвторВопроса" ИЛИ 
		 КолонкаОтбора = "Проект" Тогда 
		
		РежимВыбораИзСписка = Истина;
		Элементы.ТаблицаОтбора.ТекущиеДанные.Значение = "";
		Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = "";
		ЗаполнитьСписокВыбораЗначенияотбора(КолонкаОтбора);
		
	ИначеЕсли КолонкаОтбора = "ДатаПоследнегоСообщения" ИЛИ
		
		КолонкаОтбора = "ДатаВопроса" ИЛИ 
		КолонкаОтбора = "ТребуемаяДатаОтвета" Тогда
		
		// { РГ-Софт, Татарников Иван, 27.02.2018 - ОРР-0006635
		ПоказыватьКнопкуВыбораИзСписка = Ложь;
		// } РГ-Софт, Татарников Иван 27.02.2018
		
		Если НЕ ТипЗнч(Значение) = Тип("Дата") Тогда
			Элементы.ТаблицаОтбора.ТекущиеДанные.Значение = Дата('00010101');
			Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = Дата('00010101');
		КонецЕсли;
		
	ИначеЕсли КолонкаОтбора = "Непрочитан"  ИЛИ КолонкаОтбора = "Закрыт" Тогда 
		
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
			Элементы.ТаблицаОтбора.ТекущиеДанные.Значение = Ложь;
			Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = 0;
		КонецЕсли; 		
	Иначе
		
		Если НЕ ТипЗнч(Значение) = Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
			
			Элементы.ТаблицаОтбора.ТекущиеДанные.Значение = "";
			Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = "";
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// { RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
	Элементы.ТаблицаОтбораЗначение.КнопкаВыбора = (КолонкаОтбора = "Ссылка");
	// } RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
	
	Элементы.ТаблицаОтбораЗначение.РежимВыбораИзСписка = РежимВыбораИзСписка;
	
	// { РГ-Софт, Татарников Иван, 27.02.2018 - ОРР-0006635
	Элементы.ТаблицаОтбораЗначение.КнопкаВыпадающегоСписка = ПоказыватьКнопкуВыбораИзСписка;
	// } РГ-Софт, Татарников Иван 27.02.2018
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтбораЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = ВыбранноеЗначение; //?(Элементы.ТаблицаОтбораЗначение.РежимВыбораИзСписка , ПолучитьИзСоответствияЗначение(ВыбранноеЗначение, СоотвествиеЗначенийОтбора), ВыбранноеЗначение);
	Элементы.ТаблицаОтбора.ТекущиеДанные.Использовать = Истина;
	
	Если ТипЗнч(Элементы.ТаблицаОтбора.ТекущиеДанные.Значение) = Тип("Булево") Тогда 
		Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = Число(ВыбранноеЗначение);
	КонецЕсли;
	
	//УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтбораЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеТаблицы = Текст;
		Элементы.ТаблицаОтбора.ТекущиеДанные.Использовать = Истина;
	КонецЕсли; 
	//УстановитьОтбор();
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// { RGS Козлов К.С. 02.02.2016 15:08:02
	СкопироватьНаСервере();
	// } RGS Козлов К.С. 02.02.2016 15:08:02
КонецПроцедуры

&НаСервере
Процедура СкопироватьНаСервере()
	
	МассивНастроекДляКопирования = ПолучитьМассивНастроек();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	ПользователиПриемник = Новый Массив;
	ПользователиПриемник.Добавить(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	Обработка.СкопироватьНастройкиФорм(ПользователиПриемник, МассивНастроекДляКопирования,  ПроектБазы, ПолучитьМассивСтруктурИзТЗ(),ПолучитьМассивСтруктурИзТЗОбъекта(),"");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивНастроек()

	Массив = Новый Массив;
	НаименованиеФормыНастроек = ЭтаФорма.ИмяФормы;
	Наименованиеобработки = ЛЕВ(НаименованиеФормыНастроек, СтрДлина(НаименованиеФормыНастроек) - 11);
	Массив.Добавить(Наименованиеобработки + "Форма.Форма");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаВопроса");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаВыбораТемыНовогоВопроса");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаДобавленияСообщения");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаКИ");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаКонтроляВерсий");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаНастройки");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаНовогоВопроса");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаОбсуждающие");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаОбсуждающиеИзменение");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаПомощникаВводаВопроса");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаПредупреждения");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаПрикрепленныхФайлов");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаПроверкиОрфографии");
	Массив.Добавить(Наименованиеобработки + "Форма.ФормаВводаПланФактЧасов");
	
	Возврат Массив;
	
КонецФункции // ()

//Фёдорова 01.02.16
&НаКлиенте
Процедура ПриЗакрытии()
//Фёдорова Изменено копирование при закрытие 01.02.16	
//	СкопироватьНаСервере();
//Фёдорова Конец изменения	
КонецПроцедуры

&НаКлиенте
// RGS Козлов К.С. 08.02.2016 15:48:15
Процедура НастройкиПользователей(Команда)
	
	Структура = Новый Структура;
	Структура.Вставить("Пользователь",								Объект.Пользователь);
	Структура.Вставить("Администратор",								Администратор);
	Структура.Вставить("ТаблицаОтбора",								ПолучитьМассивСтруктурИзТЗ());
	Структура.Вставить("КлючНастройки",								КлючНастройки);
	// { RGS Глебов Дмитрий 01.07.2016   
	Структура.Вставить("АдресБазы",									Объект.АдресБазы);
	Структура.Вставить("ЗагружатьЗакрытыеОтмененныеВопросы",		Объект.ЗагружатьЗакрытыеОтмененныеВопросы);
	Структура.Вставить("ОбновлятьАвтоматически",					Объект.ОбновлятьАвтоматически);
	Структура.Вставить("ВремяОбновления",							Объект.ВремяОбновления);
	Структура.Вставить("ОтображатьТекстВопросаСЗадержкой",			Объект.ОтображатьТекстВопросаСЗадержкой);
    Структура.Вставить("ВремяОбновленияТекстаВопроса",				Объект.ВремяОбновленияТекстаВопроса);
	Структура.Вставить("ТолькоМои",									Объект.ТолькоМои);
	Структура.Вставить("ПоказатьПолностью",							Объект.ПоказатьПолностью);
	Структура.Вставить("ОтображатьКонтакты",						Объект.ОтображатьКонтакты);
	Структура.Вставить("ИспользоватьПомощник",						Объект.ИспользоватьПомощник);
	// } RGS Глебов Дмитрий 01.07.2016  
	
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаНастроекФормы", Структура, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаНастроекФормы", Структура, ЭтаФорма);
	КонецПопытки; 
	
КонецПроцедуры

// { RGS Глебов Дмитрий 24.02.2016  - регистрация новых пользователей
&НаКлиенте
Процедура Регистрация(Команда)
	ОткрытьФормуРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегистрации()
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ПредставлениеМонитора",ЗаголовокФормы);
	ПараметрыПередачи.Вставить("АдресБазы",Объект.АдресБазы);
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаРегистрации", ПараметрыПередачи, ЭтаФорма, ЭтаФорма.КлючУникальности);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаРегистрации", ПараметрыПередачи, ЭтаФорма, ЭтаФорма.КлючУникальности);
	КонецПопытки; 

КонецПроцедуры

// } RGS Глебов Дмитрий 24.02.2016  - регистрация новых пользователей

// } RGS Лунякин Иван 26.10.2015 12:08:11

// { RGS Глебов Дмитрий 14.09.2016 - S-I-0001846
&НаКлиенте
Процедура ТаблицаОтбораЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаОтбора.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//при выбор темы:   1) проект с выборм темы 1 - окно выбора темы
	//					2)несколько таких проектов  - окно выбора проекта, после - пункт 1.
	
	КолонкаОтбора = ТекДанные.КолонкаТаблицы;
	Если КолонкаОтбора = "Ссылка" Тогда
		ПроектыСВыборомТем.ЗаполнитьПометки(Ложь);
		Значение = ТекДанные.Значение;
		СтандартнаяОбработка = Ложь;
		Если ПроектыСВыборомТем.Количество()> 1 Тогда
			Оповещение  = Новый ОписаниеОповещения("ПослеВыбораПроектаТемы",ЭтаФорма,Элемент);
			ПоказатьВыборИзСписка(Оповещение,ПроектыСВыборомТем,Элемент);
		Иначе
			ПроектыСВыборомТем[0].Пометка = Истина;
		    НачалоВыбораТемы(ПроектыСВыборомТем[0].Значение,Элемент)
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПроектаТемы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Проект = Результат.Значение;
	ЭлементСписка = ПроектыСВыборомТем.НайтиПоЗначению(Проект);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Пометка = Истина;
	Иначе
		Сообщить("Для выбранного проекта недоступен отбор по предопределенным темам!");
		Возврат;
	КонецЕсли;
	
	НачалоВыбораТемы(Проект, ДополнительныеПараметры);

КонецПроцедуры


&НаКлиенте
Процедура НачалоВыбораТемы(Проект,Элемент)
	Структура = Новый Структура; 
	Структура.Вставить("Администратор", Администратор);
	Структура.Вставить("Проект", Проект);
	Структура.Вставить("МожноВыбиратьГруппы", Истина);
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВыбораТемыНовогоВопроса", Структура, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВыбораТемыНовогоВопроса", Структура, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецПопытки;	
	
КонецПроцедуры

// } RGS Глебов Дмитрий 14.09.2016 - S-I-0001846

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕОПРЕДЕЛЯЕМЫЕ

//  Процедура ПриОткрытииПереопределяемый
//  Процедура предназначена для переопределения
//  агоритма заполнения реквизита - Пользователь
//
&НаКлиенте
Процедура ПриОткрытииПереопределяемый(Отказ)

	ПриОткрытииНаСервере(Отказ);	

КонецПроцедуры // ПриОткрытии_Переопределяемый()

&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетНастроек");
	Ключ = Макет.ПолучитьОбласть(1,4).ТекущаяОбласть.Текст;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресБазы) Тогда
		Объект.АдресБазы = "http://89.188.108.154:6448/Monitor30"; 	
	КонецЕсли;
	
	// { RGS Машьянов Алексей 30.05.2018
	//Проверка валидности пользователя по тек. настройкам
	ПользовательНастроекВалидный = Ложь;
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Попытка
			Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
			Прокси =  Новый WSПрокси (Определение, "RemoteConnect", "RemoteConnect", "RemoteConnectSoap");
			ПользовательНастроекВалидный = Истина;
		Исключение
			ош = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	// Создаем нового, затем подключаемся
	Если НЕ ПользовательНастроекВалидный Тогда
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Если ПользовательИБ.АутентификацияОС Тогда
			
			ИмяПользователя = ПользовательИБ.ПользовательОС;
			ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(ИмяПользователя);
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

			Пока ПозицияНедопустимогоСимвола > 0 Цикл
				НачалоИмени = ИмяПользователя + Лев(ИмяПользователя, ПозицияНедопустимогоСимвола - 1);
				КонецИмени = Сред(ИмяПользователя, ПозицияНедопустимогоСимвола + 1);
				ИмяПользователя = НачалоИмени + "_" + КонецИмени;
				ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(ИмяПользователя);	
			КонецЦикла;
			
			//+ Параметры для web-сервиса
			Пользователь = ИмяПользователя;
			ПолноеИмя = ПользовательИБ.ПолноеИмя;
			Пароль = ИмяПользователя + "pass!"; 
			АдресБазы = "http://89.188.108.154:6448/Monitor30";
			КлючПроекта = ОбработкаОбъект.ПолучитьКлючЗащиты();
			Email = "";
			
			Если ЗначениеЗаполнено(Объект.Пользователь) И Объект.Пользователь <> Пользователь  
				ИЛИ (ЗначениеЗаполнено(Объект.Пароль) И Объект.Пароль <> Пароль) Тогда 
				Возврат;
			КонецЕсли;
			
			// Реквизит пользователя
			Попытка
				Email = ТекущийПользователь.EMail; 
			Исключение
				// ТЧ КонтактнаяИнформация
				Попытка
					НайденнаяСтрока = ТекущийПользователь.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,"Тип");
					Если НайденнаяСтрока <> Неопределено Тогда
						Email = НайденнаяСтрока. АдресЭП;
					КонецЕсли;
				Исключение
					Попытка
						// РС КонтактнаяИнформация
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	КонтактнаяИнформация.Представление
						|ИЗ
						|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
						|ГДЕ
						|	КонтактнаяИнформация.Объект = &Объект
						|	И КонтактнаяИнформация.Тип = &Тип";
						
						Запрос.УстановитьПараметр("Объект", ТекущийПользователь);
						Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
						
						ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
						
						Если ВыборкаДетальныеЗаписи.Следующий() Тогда
							Email = ВыборкаДетальныеЗаписи.Представление;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецПопытки;
			КонецПопытки;
			
			//- Параметры для web-сервиса
			
			Попытка
				Определение = Новый WSОпределения(АдресБазы+"_rs/ws/UserRegistration?wsdl");
				Прокси =  Новый WSПрокси (Определение, "UserRegistration", "UserRegistration", "UserRegistrationSoap");
				
				ПараметрыПользователя = Новый Структура();
				ПараметрыПользователя.Вставить("Логин", Пользователь);
				ПараметрыПользователя.Вставить("Пароль", Пароль);
				ПараметрыПользователя.Вставить("Email", Email);
				ПараметрыПользователя.Вставить("ПолноеИмя", ПолноеИмя);
				ПараметрыПользователя.Вставить("Ключ", КлючПроекта);
				
				ПараметрыВебСервиса = ЗначениеВСтрокуВнутр(ПараметрыПользователя);
				
				ОписаниеОшибки = Прокси.VerifyValidUser(ПараметрыВебСервиса);
				
				Объект.Пользователь = Пользователь;
				Объект.Пароль = Пароль;
				Объект.Email = Email;
				Объект.ИмяТекПользователя = ПолноеИмя;
				
			Исключение
				ОписаниеОшибки =  НСтр("ru = 'Веб-сервис автоматической регистрации пользователя недоступен.'; en = ' Аutomatic user registration service is unavailable!'");
			КонецПопытки;
			
		КонецЕсли;             
	КонецЕсли;
	// } RGS Машьянов Алексей 30.05.2018

 КонецПроцедуры // ПриОткрытииПереопределяемыйНаСервере()
 
 // Добавлено RG-Soft, Черноус Елизавета, 20.11.17
 Процедура ОбновитьОтборПоПроектуПривязанномуКБазеНаОсновеНастроекВМакете()
	 
	ПроектОтбора = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетНастроек").ПолучитьОбласть("ПроектОтбора").ТекущаяОбласть.Текст;
		
	Если (НЕ ПустаяСтрока(ПроектОтбора) И ПроектОтбора <> "<ПроектОтбора>") И НЕ ЗначениеЗаполнено(ПроектБазы) Тогда
	
		 ПроектБазы = ПроектОтбора;
	
	КонецЕсли;	 
	 
КонецПроцедуры

 // Конец добавления
 
