#Если Клиент тогда
Перем мВалютаРегламентированногоУчета;

Процедура ВыполнитьПереход() Экспорт
	
	
	Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Установить(ДатаПерехода);
	СформироватьВводНачальныхОстатковНДС();
	Сообщить("Выполнено формирование документов вида <Ввод начальных остатков НДС> для перехода с редакции 1.0 в части учета НДС");
	СФормироватьВводНачальныхОстатковНДСпоПартиям();
	Сообщить("Выполнено формирование документов вида <Ввод начальных остатков НДС по партиям> для перехода с редакции 1.0 в части учета НДС");
	

КонецПроцедуры

// Процедура для заполнения счетов учета НДС по записям, информация о которых отсутствует.
Процедура ОпределитьСчетаУчетаНДС(Записи_НезаполненыСчетаУчета,ТЧ_ДопСведения,Записи_ЗаменяемыеСтрокиДопСведений, РаспределяемыеКолонки)
	
	Если Записи_НезаполненыСчетаУчета.Количество()=0  Тогда
	    Возврат;
	КонецЕсли; 
	
	БазисРаспределения = ТЧ_ДопСведения.Выгрузить();
	БазисРаспределения.Свернуть("КлючСтроки,ВидЦенности,СтавкаНДС, СчетУчетаНДС", "СуммаБезНДС,НДС");
	СтрокиКУдалению = Новый Массив;
	Для каждого Строка Из БазисРаспределения Цикл
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Строка.СчетУчетаНДС) или (Строка.СуммаБезНДС = 0 и Строка.НДС = 0) Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		БазисРаспределения.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Распределение = Новый Структура();
	Для каждого Колонка Из РаспределяемыеКолонки Цикл
		Если Колонка = "СуммаБезНДС" или Колонка = "НДС" тогда
			Продолжить;
		КонецЕсли;
		
		Если Врег(Лев(Колонка,3)) = "НДС" Тогда
			Распределение.Вставить(Колонка,"НДС");
		Иначе
			Распределение.Вставить(Колонка,"СуммаБезНДС");
		КонецЕсли; 
	КонецЦикла;
	
	ОтменаУдаленияСтроки = Новый Массив();
	БазисПоОтбору = Новый ТаблицаЗначений();
	БазисПоОтбору.Колонки.Добавить("СтавкаНДС");
	БазисПоОтбору.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	БазисПоОтбору.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ДополняемыеЗаписи = новый Массив;
	
	Для Счетчик = 0 по Записи_НезаполненыСчетаУчета.Количество()-1 Цикл
		
		БазисПоОтбору.Очистить();
		ДополняемыеЗаписи.Очистить();
		
		Строка = Записи_НезаполненыСчетаУчета[Счетчик];
		Отбор = Новый Структура("КлючСтроки,ВидЦенности,СтавкаНДС",Строка.КлючСтроки,Строка.ВидЦенности,Строка.СтавкаНДС);
		СтрокиБазиса = БазисРаспределения.НайтиСтроки(Отбор);
		Если СтрокиБазиса.Количество() = 0  Тогда
		    // Распределение невозможно
			ОтменаУдаленияСтроки.Добавить(Записи_ЗаменяемыеСтрокиДопСведений[Счетчик]);
			Продолжить;
		ИначеЕсли СтрокиБазиса.Количество() = 1  Тогда
		    // Распределение не требуется
			ОтменаУдаленияСтроки.Добавить(Записи_ЗаменяемыеСтрокиДопСведений[Счетчик]);
			Записи_ЗаменяемыеСтрокиДопСведений[Счетчик].СчетУчетаНДС = СтрокиБазиса[0].СчетУчетаНДС;
			Продолжить;
		Иначе
			Для каждого СтрокаБазиса Из СтрокиБазиса Цикл
			    СтрокаБазисаОтбора = БазисПоОтбору.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаБазисаОтбора,СтрокаБазиса);
				СтрокаДопЗаписи = ТЧ_ДопСведения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДопЗаписи,Строка,,"НомерСтроки"); 
				СтрокаДопЗаписи.СчетУчетаНДС = СтрокаБазиса.СчетУчетаНДС;
				ДополняемыеЗаписи.Добавить(СтрокаДопЗаписи);
			КонецЦикла;
			
			Для каждого Колонка Из Распределение Цикл
				Если Строка[Колонка.Ключ] = 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				МассивРезультата = УправлениеПроизводством.РаспределитьПропорционально(Строка[Колонка.Ключ],БазисПоОтбору.ВыгрузитьКолонку(Колонка.Значение));
				
				Если МассивРезультата = Неопределено Тогда
					// Распределение по строке не прошло
					ОтменаУдаленияСтроки.Добавить(Записи_ЗаменяемыеСтрокиДопСведений[Счетчик]);
					Для каждого СтрокаДопЗаписи Из ДополняемыеЗаписи Цикл
						ТЧ_ДопСведения.Удалить(СтрокаДопЗаписи);	
					КонецЦикла; 
					
					Прервать;
				Иначе
					Для СчетчикРезультатов = 0 По ДополняемыеЗаписи.Количество()-1 Цикл
						ДополняемыеЗаписи[СчетчикРезультатов][Колонка.Ключ] = МассивРезультата[СчетчикРезультатов];
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	СписокОтмен = Новый СписокЗначений();
	СписокОтмен.ЗагрузитьЗначения(ОтменаУдаленияСтроки);
	Для каждого ЗаписьКУдалению Из Записи_ЗаменяемыеСтрокиДопСведений Цикл
		Если СписокОтмен.НайтиПоЗначению(ЗаписьКУдалению) = Неопределено Тогда
			ТЧ_ДопСведения.Удалить(ЗаписьКУдалению);
		Иначе
			Продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// НДС по приобретенным ценностям
Процедура СформироватьНДСПоПриобретеннымЦенностям(ЧисловыеКолонкиВводНачОстатков)

	СтрокиКУдалению = Новый Массив;
	
	Состояние("Подготовка информации  для переноса данных по НДС по приобретенным ценостям");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПокупки.Организация КАК Организация,
		|	НДСПокупки.Поставщик КАК Поставщик,
		|	НДСПокупки.СчетФактура КАК СчетФактура,
		|	НДСПокупки.ВидЦенности КАК ВидЦенности,
		|	НДСПокупки.СтавкаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие В (&СобытиеНДСПредъявлен)
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие В (&СобытиеНДСПредъявлен)
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие В (&СобытиеНДСОплачен)
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСОплата,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие В (&СобытиеНДСОплачен)
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСОплата,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВключенВСтоимость
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСВключеноВСтоимость,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВключенВСтоимость
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСВключеноВСтоимость,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПереданНаСтроительство
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДССтроительство,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПереданНаСтроительство
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДССтроительство,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВведеноВЭксплуатацию
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСВведеноВЭксплуатацию,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВведеноВЭксплуатацию
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСВведеноВЭксплуатацию,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредполагаетсяСтавка0
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДССтавка0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредполагаетсяСтавка0
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДССтавка0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПодтверждено0
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСПодтверждено0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПодтверждено0
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСПодтверждено0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСНеПодтверждено0
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСНеПодтверждено0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСНеПодтверждено0
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСНеПодтверждено0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВосстановлен
		|				ТОГДА -НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСПредъявлено,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
		|				ТОГДА НДСПокупки.НДС
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСВосстановлен
		|				ТОГДА -НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСПредъявлено,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
		|				ТОГДА НДСПокупки.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСПредъявлено0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
		|				ТОГДА НДСПокупки.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСПредъявлено0,
		|	СУММА(НДСПокупки.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
		|	НДСПокупки.СчетЗатрат,
		|	НДСПокупки.Субконто1,
		|	НДСПокупки.Субконто2,
		|	НДСПокупки.Субконто3,
		|	НДСПокупки.СчетУчетаНДС,
		|	НДСПокупки.ДокументОплаты,
		|	НДСПокупки.ДокументОтгрузки,
		|	НДСПокупки.ВалютаДокумента
		|ИЗ
		|	РегистрНакопления.НДСПокупки КАК НДСПокупки
		|ГДЕ
		|	НДСПокупки.Период <= &ДатаПерехода
		|	И (НЕ НДСПокупки.ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПокупки.ВидЦенности,
		|	НДСПокупки.СтавкаНДС,
		|	НДСПокупки.Поставщик,
		|	НДСПокупки.СчетФактура,
		|	НДСПокупки.Организация,
		|	НДСПокупки.СчетЗатрат,
		|	НДСПокупки.Субконто1,
		|	НДСПокупки.Субконто2,
		|	НДСПокупки.Субконто3,
		|	НДСПокупки.СчетУчетаНДС,
		|	НДСПокупки.ДокументОплаты,
		|	НДСПокупки.ДокументОтгрузки,
		|	НДСПокупки.ВалютаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Поставщик,
		|	НДСПокупки.СчетФактура.Дата,
		|	НДСПокупки.ВидЦенности.Порядок,
		|	СуммаБезНДС УБЫВ,
		|	НДС УБЫВ
		|ИТОГИ ПО
		|	Организация,
		|	Поставщик,
		|	СчетФактура";
					
	СписокИсключаемыхВидовЦенностей = Новый СписокЗначений;
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ДатаПерехода", КонецДня(ДатаПерехода-1));
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", СписокИсключаемыхВидовЦенностей);
	
	СобытияПоПредъявлениюНДС = новый массив;
	СобытияПоПредъявлениюНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	СобытияПоПредъявлениюНДС.Добавить(Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);
	
	Запрос.УстановитьПараметр("СобытиеНДСПредъявлен", СобытияПоПредъявлениюНДС);
	
	СобытияПоОплатеНДС = новый массив;
	СобытияПоОплатеНДС.Добавить(Перечисления.СобытияПоНДСПокупки.НДСОплачен);
	СобытияПоОплатеНДС.Добавить(Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);
	
	Запрос.УстановитьПараметр("СобытиеНДСОплачен", СобытияПоОплатеНДС);
	
	Запрос.УстановитьПараметр("СобытиеНДСВключенВСтоимость", Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость);
	Запрос.УстановитьПараметр("СобытиеНДСПереданНаСтроительство", Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство);
	Запрос.УстановитьПараметр("СобытиеНДСВведеноВЭксплуатацию", Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию);
	Запрос.УстановитьПараметр("СобытиеНДСПредполагаетсяСтавка0", Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСПодтверждено0", Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСНеПодтверждено0", Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСПредъявленКВычету", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	Запрос.УстановитьПараметр("СобытиеНДСПредъявленКВычету0", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеНДСВосстановлен", Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	
	Запрос.УстановитьПараметр("Ставка0", Перечисления.СтавкиНДС.НДС0);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЧисловыеКолонкиПоВидуОперации = Новый Массив;
	КолонкиЗапроса = РезультатЗапроса.Колонки;
	Для Каждого Колонка Из ЧисловыеКолонкиВводНачОстатков Цикл
		Если (Не КолонкиЗапроса.Найти(Колонка) = Неопределено) и КолонкиЗапроса[Колонка].ТипЗначения.СодержитТип(Тип("Число"))  Тогда
			ЧисловыеКолонкиПоВидуОперации.Добавить(Колонка);
		КонецЕсли;
	КонецЦикла;
	
    //Формирование таблицы со структурой таблицы дополнительных сведений
	Записи_НезаполненыСчетаУчета = Документы.ВводНачальныхОстатковНДС.ПустаяСсылка().ДополнительныеСведения.Выгрузить();
	Записи_ЗаменяемыеСтрокиДопСведений = новый массив();

	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивРаспределения = Новый Массив;
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл

		Записи_НезаполненыСчетаУчета.Очистить();
		Записи_ЗаменяемыеСтрокиДопСведений.Очистить();
		
		ДокументВводОстатков 								= Документы.ВводНачальныхОстатковНДС.СоздатьДокумент();
		ДокументВводОстатков.Дата 							= КонецДня(ДатаПерехода - 1);
		ДокументВводОстатков.Организация					= ВыборкаПоОрганизациям.Организация;
		
		Состояние("Перенос данных по НДС по приобретенным ценостям: организация <"+ВыборкаПоОрганизациям.Организация+">");

		ДокументВводОстатков.ВидОперации					= Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям;
		ОбщегоНазначения.УстановитьНомерДокумента(ДокументВводОстатков);
		ДокументВводОстатков.ОтразитьРасчетыСКонтрагентами 	= Ложь;
		ДокументВводОстатков.ПереходСРедакции10 			= Истина;
		
		ВыборкаПоПоставщикам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		КлючСтроки = 1;
		
		Пока ВыборкаПоПоставщикам.Следующий() Цикл
			
			ВыборкаПоСФ = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаПоСФ.Следующий() Цикл
				
				СтрокаСФ 				= ДокументВводОстатков.ДанныеПоСФ.Добавить();
				СтрокаСФ.КлючСтроки		= КлючСтроки;
				СтрокаСФ.Контрагент 	= ВыборкаПоСФ.Поставщик;
				Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоСФ.СчетФактура) Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", ВыборкаПоСФ.СчетФактура.Метаданные()) Тогда
						СтрокаСФ.ДоговорКонтрагента = ВыборкаПоСФ.СчетФактура.ДоговорКонтрагента;
					КонецЕсли;
				КонецЕсли;
				СтрокаСФ.СчетФактура 	= ВыборкаПоСФ.СчетФактура;
				
				ВыборкаПоСобытию = ВыборкаПоСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					
				Пока ВыборкаПоСобытию.Следующий() Цикл
					
					ЕстьЧисловыеЗначения = Ложь;
					Для каждого Колонка Из ЧисловыеКолонкиПоВидуОперации Цикл
						Если не ВыборкаПоСобытию[Колонка] = 0 Тогда
						    ЕстьЧисловыеЗначения = истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					
					Если не ЕстьЧисловыеЗначения Тогда
						Продолжить;
					КонецЕсли; 
					
					СтрокаДоп									= ДокументВводОстатков.ДополнительныеСведения.Добавить();
					СтрокаДоп.КлючСтроки						= КлючСтроки;
					СтрокаДоп.ВидЦенности						= ВыборкаПоСобытию.ВидЦенности;
					СтрокаДоп.СтавкаНДС							= ВыборкаПоСобытию.СтавкаНДС;
					СтрокаДоп.СчетУчетаНДС						= ВыборкаПоСобытию.СчетУчетаНДС;
					СтрокаДоп.СчетЗатрат						= ВыборкаПоСобытию.СчетЗатрат;
					СтрокаДоп.Субконто1							= ВыборкаПоСобытию.Субконто1;
					СтрокаДоп.Субконто2							= ВыборкаПоСобытию.Субконто2;
					СтрокаДоп.Субконто3							= ВыборкаПоСобытию.Субконто3;
					СтрокаДоп.ДокументОплаты					= ВыборкаПоСобытию.ДокументОплаты;
					СтрокаДоп.ДокументОтгрузки					= ВыборкаПоСобытию.ДокументОтгрузки;
															   	
					СтрокаДоп.СуммаБезНДС				 		= ВыборкаПоСобытию.СуммаБезНДС;
					СтрокаДоп.НДС								= ВыборкаПоСобытию.НДС;
					СтрокаДоп.СуммаБезНДСОплата 				= ВыборкаПоСобытию.СуммаБезНДСОплата;
					СтрокаДоп.НДСОплата							= ВыборкаПоСобытию.НДСОплата;
					СтрокаДоп.СуммаБезНДСВключеноВСтоимость 	= ВыборкаПоСобытию.СуммаБезНДСВключеноВСтоимость;
					СтрокаДоп.НДСВключеноВСтоимость				= ВыборкаПоСобытию.НДСВключеноВСтоимость;
					СтрокаДоп.СуммаБезНДССтроительство	 		= ВыборкаПоСобытию.СуммаБезНДССтроительство;
					СтрокаДоп.НДССтроительство					= ВыборкаПоСобытию.НДССтроительство;
					СтрокаДоп.СуммаБезНДСВведеноВЭксплуатацию 	= ВыборкаПоСобытию.СуммаБезНДСВведеноВЭксплуатацию;
					СтрокаДоп.НДСВведеноВЭксплуатацию			= ВыборкаПоСобытию.НДСВведеноВЭксплуатацию;
					СтрокаДоп.СуммаБезНДСПодтверждено0 			= ВыборкаПоСобытию.СуммаБезНДСПодтверждено0;
					СтрокаДоп.НДССтавка0						= ВыборкаПоСобытию.НДССтавка0;
					СтрокаДоп.СуммаБезНДССтавка0				= ВыборкаПоСобытию.СуммаБезНДССтавка0;
					СтрокаДоп.НДСПодтверждено0					= ВыборкаПоСобытию.НДСПодтверждено0;
					СтрокаДоп.СуммаБезНДСНеПодтверждено0 		= ВыборкаПоСобытию.СуммаБезНДСНеПодтверждено0;
					СтрокаДоп.НДСНеПодтверждено0				= ВыборкаПоСобытию.НДСНеПодтверждено0;
					СтрокаДоп.СуммаБезНДСПредъявлено 			= ВыборкаПоСобытию.СуммаБезНДСПредъявлено;
					СтрокаДоп.НДСПредъявлено					= ВыборкаПоСобытию.НДСПредъявлено;
					Если ВыборкаПоСобытию.СуммаБезНДСПредъявлено0 <> 0 Тогда
						МассивРаспределения.Очистить();
						МассивРаспределения.Добавить(СтрокаДоп.СуммаБезНДСПодтверждено0 + СтрокаДоп.НДСПодтверждено0);
						МассивРаспределения.Добавить(СтрокаДоп.СуммаБезНДСНеПодтверждено0 + СтрокаДоп.НДСНеПодтверждено0);
						
						СуммаБезНДСРаспределение 	= УправлениеПроизводством.РаспределитьПропорционально(ВыборкаПоСобытию.СуммаБезНДСПредъявлено0, МассивРаспределения);
						НДСРаспределения 			= УправлениеПроизводством.РаспределитьПропорционально(ВыборкаПоСобытию.НДСПредъявлено0, МассивРаспределения);
						
						Если СуммаБезНДСРаспределение <> Неопределено Тогда
							СтрокаДоп.СуммаБезНДСПредъявлено0 				= СуммаБезНДСРаспределение[0];
							СтрокаДоп.СуммаБезНДСПредъявленоНеПодтверждено0 = СуммаБезНДСРаспределение[1];
						КонецЕсли;
						Если НДСРаспределения <> Неопределено Тогда
							СтрокаДоп.НДСПредъявлено0 				= НДСРаспределения[0];
							СтрокаДоп.НДСПредъявленоНеПодтверждено0 = НДСРаспределения[1];
						КонецЕсли;
					КонецЕсли;
					
					// Заполнение расчетов с контрагентами
					СтрокаРасчетовСКонтрагентами 							= ДокументВводОстатков.РасчетыСКонтрагентами.Добавить();
					СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
					СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
					СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
					СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
					
					Если СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
						 СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= СтрокаДоп.СуммаБезНДС - СтрокаДоп.СуммаБезНДСОплата;
					Иначе
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС - (СтрокаДоп.СуммаБезНДСОплата + СтрокаДоп.НДСОплата);
					КонецЕсли;

					СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					Если СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 	= мВалютаРегламентированногоУчета Тогда
						СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     = 1;
					Иначе
						Если СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
							 СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
							СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     = ?(ВыборкаПоСобытию.ВалютнаяСуммаСНДС = 0, 1, СтрокаДоп.СуммаБезНДС/ВыборкаПоСобытию.ВалютнаяСуммаСНДС);
						Иначе
							СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     = ?(ВыборкаПоСобытию.ВалютнаяСуммаСНДС = 0, 1, (СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС)/ВыборкаПоСобытию.ВалютнаяСуммаСНДС);
						КонецЕсли;
					КонецЕсли;
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
					
					СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов, 
																				мВалютаРегламентированногоУчета,
																				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, 
																				1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																				1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
					Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
						ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаРасчетовСКонтрагентами);
					КонецЕсли;
					Если СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
						 СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
						 
						СтрокаРасчетовСКонтрагентами 					= ДокументВводОстатков.РасчетыСКонтрагентами.Добавить();
						СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
						СтрокаРасчетовСКонтрагентами.Контрагент 		= СтрокаСФ.Контрагент;
						СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента = СтрокаСФ.ДоговорКонтрагента;
						СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
						СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= СтрокаДоп.НДС - СтрокаДоп.НДСОплата;
						Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
							ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаРасчетовСКонтрагентами);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДоп.СчетУчетаНДС) Тогда
						Если СтрокаДоп.СуммаБезНДС = 0 и  СтрокаДоп.НДС = 0 тогда
							Строка_НезаполненыСчетаУчета = Записи_НезаполненыСчетаУчета.Добавить();
							ЗаполнитьЗначенияСвойств(Строка_НезаполненыСчетаУчета, СтрокаДоп,,"НомерСтроки");

							Записи_ЗаменяемыеСтрокиДопСведений.Добавить(СтрокаДоп);
						КонецЕсли;
					КонецЕсли; 
					
				КонецЦикла;
					
				КлючСтроки = КлючСтроки + 1;
			КонецЦикла;
			
				
		КонецЦикла;
		
		// Вывод сумм в ТЧ "ДанныеПоСФ"
		Для Каждого СтрокаСФ Из ДокументВводОстатков.ДанныеПоСФ Цикл
				
			ДополнительныеСтроки = ДокументВводОстатков.ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
				
			Для Каждого Колонка Из ЧисловыеКолонкиПоВидуОперации Цикл
				СуммаПоКолонке = 0;
				Для Каждого СтрокаДоп Из ДополнительныеСтроки Цикл
					СуммаПоКолонке = СуммаПоКолонке + СтрокаДоп[Колонка];
				КонецЦикла;
				СтрокаСФ[Колонка] = СуммаПоКолонке;
			КонецЦикла;
				
		КонецЦикла;
		
		ДокументВводОстатков.РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
							 								  "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
		СтрокиКУдалению.Очистить();
		Для Каждого СтрокаРасчетовСКонтрагентами Из ДокументВводОстатков.РасчетыСКонтрагентами Цикл
			Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаРасчетовСКонтрагентами);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		//Определение счета учета НДС по строкам по дополнительным реквизитам.
		Если не Записи_НезаполненыСчетаУчета.Количество() = 0 Тогда
			ОпределитьСчетаУчетаНДС(Записи_НезаполненыСчетаУчета,ДокументВводОстатков.ДополнительныеСведения,Записи_ЗаменяемыеСтрокиДопСведений, ЧисловыеКолонкиПоВидуОперации);
		КонецЕсли; 
		
		ДокументВводОстатков.Записать(РежимЗаписиДокумента.Запись);
		
		
	КонецЦикла;
КонецПроцедуры

// НДС не полученный от покупателя
Процедура СформироватьНДСНеПолученныйОтПокупателей(ЧисловыеКолонкиВводНачОстатков)

	Состояние("Подготовка информации  для переноса данных по начисленному НДС");
	СтрокиКУдалению = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПродажи.Организация КАК Организация,
	               |	НДСПродажи.Покупатель КАК Покупатель,
	               |	НДСПродажи.СчетФактура КАК СчетФактура,
	               |	НДСПродажи.ВидЦенности КАК ВидЦенности,
	               |	НДСПродажи.СтавкаНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСРеализация
	               |				ТОГДА НДСПродажи.СуммаБезНДС
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДССкорректирован
	               |				ТОГДА НДСПродажи.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСРеализация
	               |				ТОГДА НДСПродажи.НДС
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДССкорректирован
	               |				ТОГДА НДСПродажи.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСОплата
	               |				ТОГДА НДСПродажи.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСОплата,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСОплата
	               |				ТОГДА НДСПродажи.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСОплата,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСПодтверждено0
	               |				ТОГДА НДСПродажи.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСПодтверждено0
	               |				ТОГДА НДСПродажи.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСНеПодтверждено0
	               |				ТОГДА НДСПродажи.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСНеПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПродажи.Событие = &СобытиеНДСНеПодтверждено0
	               |				ТОГДА НДСПродажи.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСНеПодтверждено0,
	               |	НДСПродажи.ДокументОплаты
	               |ИЗ
	               |	РегистрНакопления.НДСПродажи КАК НДСПродажи
	               |ГДЕ
	               |	НДСПродажи.Период <= &ДатаПерехода
	               |	И (НЕ НДСПродажи.ВидЦенности В (&ИсключаемыеВидыЦенностей))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПродажи.ВидЦенности,
	               |	НДСПродажи.СтавкаНДС,
	               |	НДСПродажи.Покупатель,
	               |	НДСПродажи.СчетФактура,
	               |	НДСПродажи.Организация,
	               |	НДСПродажи.ДокументОплаты
	               |ИТОГИ ПО
	               |	Организация,
	               |	Покупатель,
	               |	СчетФактура";
					
	СписокИсключаемыхВидовЦенностей = Новый СписокЗначений;
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	СписокИсключаемыхВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.УстановитьПараметр("ДатаПерехода", КонецДня(ДатаПерехода-1));
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", СписокИсключаемыхВидовЦенностей);
	Запрос.УстановитьПараметр("СобытиеНДСРеализация", Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("СобытиеНДСОплата", Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытиеНДСПодтверждено0", Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСНеПодтверждено0", Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСНачисленКУплате", Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("СобытиеНДССкорректирован", Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивРаспределения = Новый Массив;
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		Состояние("Перенос данных данных по начисленному НДС: организация <"+ВыборкаПоОрганизациям.Организация+">");
		
		ДокументВводОстатков 								= Документы.ВводНачальныхОстатковНДС.СоздатьДокумент();
		ДокументВводОстатков.Дата 							= КонецДня(ДатаПерехода - 1);
		ДокументВводОстатков.Организация					= ВыборкаПоОрганизациям.Организация;
		ДокументВводОстатков.ВидОперации					= Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей;
		ОбщегоНазначения.УстановитьНомерДокумента(ДокументВводОстатков);
		ДокументВводОстатков.ОтразитьРасчетыСКонтрагентами 	= Ложь;
		ДокументВводОстатков.ПереходСРедакции10 			= Истина;
		
		ВыборкаПоПоставщикам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		КлючСтроки = 1;
		
		Пока ВыборкаПоПоставщикам.Следующий() Цикл
			
			ВыборкаПоСФ = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаПоСФ.Следующий() Цикл
				
				СтрокаСФ 				= ДокументВводОстатков.ДанныеПоСФ.Добавить();
				СтрокаСФ.КлючСтроки		= КлючСтроки;
				СтрокаСФ.Контрагент 	= ВыборкаПоСФ.Покупатель;
				Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоСФ.СчетФактура) Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", ВыборкаПоСФ.СчетФактура.Метаданные()) Тогда
						СтрокаСФ.ДоговорКонтрагента = ВыборкаПоСФ.СчетФактура.ДоговорКонтрагента;
					КонецЕсли;
				КонецЕсли;
				СтрокаСФ.СчетФактура 	= ВыборкаПоСФ.СчетФактура;
				
				ВыборкаПоСобытию = ВыборкаПоСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					
				Пока ВыборкаПоСобытию.Следующий() Цикл
					
					
					СтрокаДоп									= ДокументВводОстатков.ДополнительныеСведения.Добавить();
					СтрокаДоп.КлючСтроки						= КлючСтроки;
					СтрокаДоп.ВидЦенности						= ВыборкаПоСобытию.ВидЦенности;
					СтрокаДоп.СтавкаНДС							= ВыборкаПоСобытию.СтавкаНДС;
					СтрокаДоп.ДокументОплаты					= ВыборкаПоСобытию.ДокументОплаты;
															   	
					СтрокаДоп.СуммаБезНДС				 		= ВыборкаПоСобытию.СуммаБезНДС;
					СтрокаДоп.НДС								= ВыборкаПоСобытию.НДС;
					СтрокаДоп.СуммаБезНДСОплата 				= ВыборкаПоСобытию.СуммаБезНДСОплата;
					СтрокаДоп.НДСОплата							= ВыборкаПоСобытию.НДСОплата;
					СтрокаДоп.СуммаБезНДСПодтверждено0 			= ВыборкаПоСобытию.СуммаБезНДСПодтверждено0;
					СтрокаДоп.НДСПодтверждено0					= ВыборкаПоСобытию.НДСПодтверждено0;
					СтрокаДоп.СуммаБезНДСНеПодтверждено0 		= ВыборкаПоСобытию.СуммаБезНДСНеПодтверждено0;
					СтрокаДоп.НДСНеПодтверждено0				= ВыборкаПоСобытию.НДСНеПодтверждено0;
					
					// Заполнение расчетов с контрагентами
					
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ.Контрагент) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаРасчетовСКонтрагентами 							= ДокументВводОстатков.РасчетыСКонтрагентами.Добавить();
					СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
					СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
					СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
					СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
					
					Если СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
						 СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= СтрокаДоп.СуммаБезНДС - СтрокаДоп.СуммаБезНДСОплата;
					Иначе
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС - (СтрокаДоп.СуммаБезНДСОплата + СтрокаДоп.НДСОплата);
					КонецЕсли;

					СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= 1;
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
					
					СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов;
					Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
						ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаРасчетовСКонтрагентами);
					КонецЕсли;
					Если СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
						 СтрокаДоп.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
						 
						СтрокаРасчетовСКонтрагентами 					= ДокументВводОстатков.РасчетыСКонтрагентами.Добавить();
						СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
						СтрокаРасчетовСКонтрагентами.Контрагент 		= СтрокаСФ.Контрагент;
						СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента = СтрокаСФ.ДоговорКонтрагента;
						СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
						СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
						СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= СтрокаДоп.НДС - СтрокаДоп.НДСОплата;
						Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
							ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаРасчетовСКонтрагентами);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
					
				КлючСтроки = КлючСтроки + 1;
			КонецЦикла;
			
				
		КонецЦикла;
		
		// Вывод сумм в ТЧ "ДанныеПоСФ"
		Для Каждого СтрокаСФ Из ДокументВводОстатков.ДанныеПоСФ Цикл
				
			ДополнительныеСтроки = ДокументВводОстатков.ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
				
			Для Каждого Колонка Из ЧисловыеКолонкиВводНачОстатков Цикл
				СуммаПоКолонке = 0;
				Для Каждого СтрокаДоп Из ДополнительныеСтроки Цикл
					СуммаПоКолонке = СуммаПоКолонке + СтрокаДоп[Колонка];
				КонецЦикла;
				СтрокаСФ[Колонка] = СуммаПоКолонке;
			КонецЦикла;
				
		КонецЦикла;
		
		ДокументВводОстатков.РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
							 								  "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
		СтрокиКУдалению.Очистить();
		Для Каждого СтрокаРасчетовСКонтрагентами Из ДокументВводОстатков.РасчетыСКонтрагентами Цикл
			Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаРасчетовСКонтрагентами);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
		ДокументВводОстатков.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	

КонецПроцедуры

// НДС с авансов
Процедура СформироватьНДССАвансов(ЧисловыеКолонкиВводНачОстатков)

	Состояние("Подготовка информации  для переноса данных по НДС с авансов");
	СтрокиКУдалению = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПокупки.Организация КАК Организация,
	               |	НДСПокупки.Поставщик КАК Поставщик,
	               |	НДСПокупки.СчетФактура КАК СчетФактура,
	               |	НДСПокупки.ВидЦенности,
	               |	НДСПокупки.СтавкаНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПолученАванс
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПолученАванс
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
	               |					ИЛИ НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСОплата,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
	               |					ИЛИ НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСОплата,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПодтверждено0
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПодтверждено0
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСНеПодтверждено0
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСНеПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСНеПодтверждено0
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСНеПодтверждено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСПредъявлено,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСПредъявлено,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
	               |				ТОГДА НДСПокупки.СуммаБезНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаБезНДСПредъявлено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПредъявленКВычету0
	               |				ТОГДА НДСПокупки.НДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НДСПредъявлено0,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСПокупки.Событие = &СобытиеНДСПолученАванс
	               |				ТОГДА НДСПокупки.ВалютнаяСуммаСНДС
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВалютнаяСуммаСНДС,
	               |	НДСПокупки.ВалютаДокумента
	               |ИЗ
	               |	РегистрНакопления.НДСПокупки КАК НДСПокупки
	               |ГДЕ
	               |	НДСПокупки.Период <= &ДатаПерехода
	               |	И НДСПокупки.ВидЦенности В(&ОтбираемыеВидыЦенностей)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПокупки.ВидЦенности,
	               |	НДСПокупки.СтавкаНДС,
	               |	НДСПокупки.Поставщик,
	               |	НДСПокупки.СчетФактура,
	               |	НДСПокупки.Организация,
	               |	НДСПокупки.ВалютаДокумента
	               |ИТОГИ ПО
	               |	Организация,
	               |	Поставщик,
	               |	СчетФактура,
				   |	ВидЦенности,
				   |	СтавкаНДС";
					
	СписокОтбораВидовЦенностей = Новый СписокЗначений;
	СписокОтбораВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	СписокОтбораВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	
	Запрос.УстановитьПараметр("ДатаПерехода", КонецДня(ДатаПерехода-1));
	Запрос.УстановитьПараметр("ОтбираемыеВидыЦенностей", СписокОтбораВидовЦенностей);
	Запрос.УстановитьПараметр("СобытиеНДСПолученАванс", Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
	Запрос.УстановитьПараметр("СобытиеНДСПредъявленКВычету", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	Запрос.УстановитьПараметр("СобытиеНДСПредъявленКВычету0", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеНДСПодтверждено0", Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНДСНеПодтверждено0", Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивРаспределения = Новый Массив;
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		Состояние("Перенос данных данных по НДС с авансов: организация <"+ВыборкаПоОрганизациям.Организация+">");
		
		ДокументВводОстатков 								= Документы.ВводНачальныхОстатковНДС.СоздатьДокумент();
		ДокументВводОстатков.Дата 							= КонецДня(ДатаПерехода - 1);
		ДокументВводОстатков.Организация					= ВыборкаПоОрганизациям.Организация;
		ДокументВводОстатков.ВидОперации					= Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным;
		ОбщегоНазначения.УстановитьНомерДокумента(ДокументВводОстатков);
		ДокументВводОстатков.ОтразитьРасчетыСКонтрагентами 	= Ложь;
		ДокументВводОстатков.ПереходСРедакции10 			= Истина;
		
		ВыборкаПоПоставщикам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		КлючСтроки = 1;
		
		Пока ВыборкаПоПоставщикам.Следующий() Цикл
			
			ВыборкаПоСФ = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаПоСФ.Следующий() Цикл
				
				ВыборкаПоВидуЦенности = ВыборкаПоСф.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока ВыборкаПоВидуЦенности.Следующий() Цикл
					
					ВыборкаПоСтавке = ВыборкаПоВидуЦенности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					
					Пока ВыборкаПоСтавке.Следующий() Цикл
						
						СтрокаСФ 				= ДокументВводОстатков.ДанныеПоСФ.Добавить();
						СтрокаСФ.КлючСтроки		= КлючСтроки;
						СтрокаСФ.Контрагент 	= ВыборкаПоСФ.Поставщик;
						Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоСФ.СчетФактура) Тогда
							Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", ВыборкаПоСФ.СчетФактура.Метаданные()) Тогда
								СтрокаСФ.ДоговорКонтрагента = ВыборкаПоСФ.СчетФактура.ДоговорКонтрагента;
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(ВыборкаПоСФ.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") И 
							НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоСФ.СчетФактура.ДокументОснование) Тогда
							СтрокаСФ.СчетФактура = ВыборкаПоСФ.СчетФактура.ДокументОснование;
						Иначе
							СтрокаСФ.СчетФактура 	= ВыборкаПоСФ.СчетФактура;
						КонецЕсли;
						
						ВыборкаПоСобытию = ВыборкаПоСтавке.Выбрать();
						
						Пока ВыборкаПоСобытию.Следующий() Цикл
						
							СтрокаДоп									= ДокументВводОстатков.ДополнительныеСведения.Добавить();
							СтрокаДоп.КлючСтроки						= КлючСтроки;
							СтрокаДоп.ВидЦенности						= ВыборкаПоСобытию.ВидЦенности;
							СтрокаДоп.СтавкаНДС							= ВыборкаПоСобытию.СтавкаНДС;
							Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ.ВалютаАванса) Тогда
								СтрокаСФ.ВалютаАванса 					= ВыборкаПоСобытию.ВалютаДокумента;
							КонецЕсли;
																	   	
							СтрокаДоп.СуммаБезНДС				 		= ВыборкаПоСобытию.СуммаБезНДС;
							СтрокаДоп.НДС								= ВыборкаПоСобытию.НДС;
							Если ВыборкаПоСобытию.ВалютнаяСуммаСНДС = 0 Тогда
								СтрокаДоп.ВалютнаяСуммаСНДС				= СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС;
							Иначе
								СтрокаДоп.ВалютнаяСуммаСНДС				= ВыборкаПоСобытию.ВалютнаяСуммаСНДС;
							КонецЕсли;
							СтрокаДоп.СуммаБезНДСОплата 				= ВыборкаПоСобытию.СуммаБезНДСОплата;
							СтрокаДоп.НДСОплата							= ВыборкаПоСобытию.НДСОплата;
							СтрокаДоп.СуммаБезНДСПодтверждено0			= ВыборкаПоСобытию.СуммаБезНДСПодтверждено0;
							СтрокаДоп.НДСПодтверждено0					= ВыборкаПоСобытию.НДСПодтверждено0;
							СтрокаДоп.СуммаБезНДСНеПодтверждено0 		= ВыборкаПоСобытию.СуммаБезНДСНеПодтверждено0;
							СтрокаДоп.НДСНеПодтверждено0				= ВыборкаПоСобытию.НДСНеПодтверждено0;
							СтрокаДоп.СуммаБезНДСПредъявлено			= ВыборкаПоСобытию.СуммаБезНДСПредъявлено;
							СтрокаДоп.НДСПредъявлено					= ВыборкаПоСобытию.НДСПредъявлено;
							Если ВыборкаПоСобытию.СуммаБезНДСПредъявлено0 <> 0 Тогда
								МассивРаспределения.Очистить();
								МассивРаспределения.Добавить(СтрокаДоп.СуммаБезНДСПодтверждено0 + СтрокаДоп.НДСПодтверждено0);
								МассивРаспределения.Добавить(СтрокаДоп.СуммаБезНДСНеПодтверждено0 + СтрокаДоп.НДСНеПодтверждено0);
								
								СуммаБезНДСРаспределение 	= УправлениеПроизводством.РаспределитьПропорционально(ВыборкаПоСобытию.СуммаБезНДСПредъявлено0, МассивРаспределения);
								НДСРаспределения 			= УправлениеПроизводством.РаспределитьПропорционально(ВыборкаПоСобытию.НДСПредъявлено0, МассивРаспределения);
								
								Если СуммаБезНДСРаспределение <> Неопределено Тогда
									СтрокаДоп.СуммаБезНДСПредъявлено0 				= СуммаБезНДСРаспределение[0];
									СтрокаДоп.СуммаБезНДСПредъявленоНеПодтверждено0 = СуммаБезНДСРаспределение[1];
								КонецЕсли;
								Если НДСРаспределения <> Неопределено Тогда
									СтрокаДоп.НДСПредъявлено0 				= НДСРаспределения[0];
									СтрокаДоп.НДСПредъявленоНеПодтверждено0 = НДСРаспределения[1];
								КонецЕсли;
							КонецЕсли;
							
							// Заполнение расчетов с контрагентами
							
							Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ.Контрагент) Тогда
								Продолжить;
							КонецЕсли;
							
							СтрокаРасчетовСКонтрагентами 							= ДокументВводОстатков.РасчетыСКонтрагентами.Добавить();
							СтрокаРасчетовСКонтрагентами.Аванс						= Истина;
							СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
							СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
							СтрокаРасчетовСКонтрагентами.ДокументОплаты 			= СтрокаСФ.СчетФактура;
							СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							
							СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 		= СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС - (СтрокаДоп.СуммаБезНДСОплата + СтрокаДоп.НДСОплата);

							Если СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов <> СтрокаСФ.ВалютаАванса Тогда
								СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     = 1;
							Иначе
								СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     = ?(ВыборкаПоСобытию.ВалютнаяСуммаСНДС = 0, 1, (СтрокаДоп.СуммаБезНДС + СтрокаДоп.НДС)/ВыборкаПоСобытию.ВалютнаяСуммаСНДС);
							КонецЕсли;
							СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
							
							СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов, 
																						мВалютаРегламентированногоУчета,
																						СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, 
																						1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																						1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
							
							СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов;
							Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
								ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаРасчетовСКонтрагентами);
							КонецЕсли;
							
						КонецЦикла;
						
						КлючСтроки = КлючСтроки + 1;
						
					КонецЦикла;
			
				КонецЦикла;
					
			КонецЦикла;
			
				
		КонецЦикла;
		
		// Вывод сумм в ТЧ "ДанныеПоСФ"
		Для Каждого СтрокаСФ Из ДокументВводОстатков.ДанныеПоСФ Цикл
				
			ДополнительныеСтроки = ДокументВводОстатков.ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
				
			Для Каждого Колонка Из ЧисловыеКолонкиВводНачОстатков Цикл
				СуммаПоКолонке = 0;
				Для Каждого СтрокаДоп Из ДополнительныеСтроки Цикл
					СуммаПоКолонке = СуммаПоКолонке + СтрокаДоп[Колонка];
				КонецЦикла;
				СтрокаСФ[Колонка] = СуммаПоКолонке;
			КонецЦикла;
				
		КонецЦикла;
		
		ДокументВводОстатков.РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
							 								  "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
		СтрокиКУдалению.Очистить();
		Для Каждого СтрокаРасчетовСКонтрагентами Из ДокументВводОстатков.РасчетыСКонтрагентами Цикл
			Если СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаРасчетовСКонтрагентами);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДокументВводОстатков.РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
		ДокументВводОстатков.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;


КонецПроцедуры

Процедура СформироватьВводНачальныхОстатковНДС()
	
	// Поиск и удаление ранее сформированных документов ввода нач. остатков НДС по переходу с ред. 1.0.
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВводНачальныхОстатковНДС.Ссылка
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковНДС КАК ВводНачальныхОстатковНДС
	               |ГДЕ
	               |	ВводНачальныхОстатковНДС.ПереходСРедакции10";
				   
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	ЧисловыеКолонкиВводНачОстатков = Новый Массив;
	РеквизитыДополнительныеСведения = Документы.ВводНачальныхОстатковНДС.ПустаяСсылка().Метаданные().ТабличныеЧасти.ДополнительныеСведения.Реквизиты;
	РеквизитыДанныеПоСФ = Документы.ВводНачальныхОстатковНДС.ПустаяСсылка().Метаданные().ТабличныеЧасти.ДанныеПоСФ.Реквизиты;
	Для Каждого Колонка Из РеквизитыДанныеПоСФ Цикл
		Если (Колонка.Имя <> "КлючСтроки") И (Колонка.Имя <> "НомерСтроки") Тогда
			Если Не РеквизитыДополнительныеСведения.Найти(Колонка.Имя) = Неопределено Тогда	
				Если РеквизитыДополнительныеСведения[Колонка.Имя].Тип.Типы()[0] = Тип("Число")  Тогда
					ЧисловыеКолонкиВводНачОстатков.Добавить(Колонка.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьНДСПоПриобретеннымЦенностям(ЧисловыеКолонкиВводНачОстатков);
	СформироватьНДСНеПолученныйОтПокупателей(ЧисловыеКолонкиВводНачОстатков);
	СформироватьНДССАвансов(ЧисловыеКолонкиВводНачОстатков);

КонецПроцедуры

Функция ОпределитьСчетУчетаИСтавкуНДСПоПартии(ВыборкаПоСФ, СтрокиПоСФ)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("СчетУчетаНДС");
	Результат.Колонки.Добавить("СтавкаНДС");
	Результат.Колонки.Добавить("Стоимость",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Результат.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Результат.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	
	Если не ВыборкаПоСФ.Количество = 0 Тогда
		//Партиеобразующий остаток. Отбор с учетом номенклатуры
		Отбор = Новый Структура("ВидЦенности,Номенклатура",ВыборкаПоСФ.ВидЦенности,ВыборкаПоСФ.Номенклатура);
	Иначе
		Отбор = Новый Структура("ВидЦенности",ВыборкаПоСФ.ВидЦенности);
	КонецЕсли;
		
	БазисОтбора = СтрокиПоСФ.НайтиСтроки(Отбор);
	
	Если БазисОтбора.Количество()=0 Тогда
		 СтрокаРезультата = Результат.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаРезультата,ВыборкаПоСФ);
		 Возврат Результат;
	КонецЕсли; 
	
	Для каждого СтрокаБазиса Из БазисОтбора Цикл
		 СтрокаРезультата = Результат.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаРезультата,СтрокаБазиса);
	КонецЦикла; 
	
	РезультатРаспределенияСтоимость = УправлениеПроизводством.РаспределитьПропорционально(ВыборкаПоСФ.Стоимость,Результат.ВыгрузитьКолонку("Стоимость"));
	Если РезультатРаспределенияСтоимость = Неопределено тогда
		Результат.ЗаполнитьЗначения(0,"Стоимость, НДС");
		Результат[0].Стоимость = ВыборкаПоСФ.Стоимость;
	Иначе
		НДС = Окр(ВыборкаПоСФ.Стоимость*Результат.Итог("НДС")/Результат.Итог("Стоимость"),2);
		
		Результат.ЗагрузитьКолонку(РезультатРаспределенияСтоимость,"Стоимость");
		
		РезультатРаспределенияНДС = УправлениеПроизводством.РаспределитьПропорционально(НДС,Результат.ВыгрузитьКолонку("НДС"));
		
		Если РезультатРаспределенияНДС = Неопределено тогда
			Результат.ЗаполнитьЗначения(0,"НДС");
			Результат[0].НДС = НДС;
		Иначе
			Результат.ЗагрузитьКолонку(РезультатРаспределенияНДС,"НДС");
		КонецЕсли;
	КонецЕсли;
	
	
	
	Результат[0].Количество = ВыборкаПоСФ.Количество;
	
	Возврат Результат;
	

КонецФункции // ОпределитьСчетУчетаИСтавкуНДС(ВыборкаПоСФ, СтрокиПоСФ)()

Процедура СФормироватьВводНачальныхОстатковНДСпоПартиям()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВводНачальныхОстатковНДСпоПартиям.Ссылка
				   |ИЗ
				   |	Документ.ВводНачальныхОстатковНДСпоПартиям КАК ВводНачальныхОстатковНДСпоПартиям
				   |ГДЕ
				   |	ВводНачальныхОстатковНДСпоПартиям.ПереходСРедакции10";
				   
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	Состояние("Подготовка данных для переноса информации по партиям ТМЦ");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Организация КАК Организация,
		|	НДСПартииТоваровОстатки.СчетУчета КАК СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	СУММА(НДСПартииТоваровОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(НДСПартииТоваровОстатки.СтоимостьОстаток) КАК Стоимость,
		|	СУММА(НДСПартииТоваровОстатки.НДСОстаток) КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(&ДатаПерехода, ) КАК НДСПартииТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПартииТоваровОстатки.Организация,
		|	НДСПартииТоваровОстатки.Склад,
		|	НДСПартииТоваровОстатки.СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.Партия,
		|	НДСПартииТоваровОстатки.СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.СтавкаНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	НДСПартииТоваровОстатки.Партия.Дата,
		|	Количество УБЫВ,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Организация,
		|	Номенклатура,
		|	СчетУчета,
		|	Партия,
		|	Склад";
				   
	Запрос.УстановитьПараметр("ДатаПерехода", КонецДня(ДатаПерехода-1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Организация КАК Организация,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	ДополнительныеСведения.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ДополнительныеСведения.СтавкаНДС КАК СтавкаНДС,
		|	ДополнительныеСведения.Субконто1 КАК Номенклатура,
		|	ДополнительныеСведения.СуммаБезНДС + ДополнительныеСведения.НДС КАК Стоимость,
		|	ДополнительныеСведения.НДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(&ДатаПерехода, ) КАК НДСПартииТоваровОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДСПокупки.Организация КАК Организация,
		|			НДСПокупки.Поставщик КАК Поставщик,
		|			НДСПокупки.СчетФактура КАК СчетФактура,
		|			НДСПокупки.ВидЦенности КАК ВидЦенности,
		|			НДСПокупки.СтавкаНДС КАК СтавкаНДС,
		|			СУММА(НДСПокупки.СуммаБезНДС) КАК СуммаБезНДС,
		|			СУММА(НДСПокупки.НДС) КАК НДС,
		|			НДСПокупки.СчетУчетаНДС КАК СчетУчетаНДС,
		|			НДСПокупки.Субконто1 КАК Субконто1
		|		ИЗ
		|			РегистрНакопления.НДСПокупки КАК НДСПокупки
		|		ГДЕ
		|			НДСПокупки.Событие В(&СобытияПредъявления)
		|			И НДСПокупки.Период <= &ДатаПерехода
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НДСПокупки.Поставщик,
		|			НДСПокупки.Организация,
		|			НДСПокупки.Субконто1,
		|			НДСПокупки.СчетУчетаНДС,
		|			НДСПокупки.СтавкаНДС,
		|			НДСПокупки.ВидЦенности,
		|			НДСПокупки.СчетФактура) КАК ДополнительныеСведения
		|		ПО НДСПартииТоваровОстатки.Организация = ДополнительныеСведения.Организация
		|			И НДСПартииТоваровОстатки.СчетФактура = ДополнительныеСведения.СчетФактура
		|			И НДСПартииТоваровОстатки.ВидЦенности = ДополнительныеСведения.ВидЦенности
		|ГДЕ
		|	(ЕСТЬNULL(НДСПартииТоваровОстатки.СчетУчетаНДС, &ПустойСчетУчетаНДС) = &ПустойСчетУчетаНДС
		|			ИЛИ ЕСТЬNULL(НДСПартииТоваровОстатки.СтавкаНДС, &ПустаяСтавкаНДС) = &ПустаяСтавкаНДС)
		|ИТОГИ ПО
		|	Организация,
		|	СчетФактура";
		
		
	СобытияПредъявления = новый Массив();
	СобытияПредъявления.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	СобытияПредъявления.Добавить(Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);
	
	Запрос.УстановитьПараметр("СобытияПредъявления",СобытияПредъявления);
	Запрос.УстановитьПараметр("ПустойСчетУчетаНДС",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС",Перечисления.СтавкиНДС.ПустаяСсылка());
	
	РезультатЗапросаПоДопСведениям = Запрос.Выполнить();
	ДеревоДополнительныхСведений = РезультатЗапросаПоДопСведениям.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		Состояние("Перенос данных по партиям ТМЦ: организация <"+ВыборкаПоОрганизациям.Организация+">");
		
		//ДокументВводНачальныхОстатковПоПартиям 				= Документы.ВводНачальныхОстатковНДСпоПартиям.СоздатьДокумент();
		//ДокументВводНачальныхОстатковПоПартиям.Дата 		= КонецДня(ДатаПерехода - 1);
		//ДокументВводНачальныхОстатковПоПартиям.Организация	= ВыборкаПоОрганизациям.Организация;
		//ДокументВводНачальныхОстатковПоПартиям.ПереходСРедакции10 = Истина;
		//ОбщегоНазначения.УстановитьНомерДокумента(ДокументВводНачальныхОстатковПоПартиям);
		//КлючСтроки = 1;
		//
		//ВыборкаПоНоменклатуре = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//
		//СтрокаПоОрганизации = ДеревоДополнительныхСведений.Строки.Найти(ВыборкаПоОрганизациям.Организация,"Организация");
		//
		//Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		//	
		//	ВыборкаПоСчетуУчета = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//	
		//	Пока ВыборкаПоСчетуУчета.Следующий() Цикл
		//		
		//		ВыборкаПоПартии = ВыборкаПоСчетуУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//		
		//		Пока ВыборкаПоПартии.Следующий() Цикл
		//			
		//			ВыборкаПоСкладу = ВыборкаПоПартии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//			
		//			Пока ВыборкаПоСкладу.Следующий() Цикл
		//				
		//				СтрокаПартии 				= ДокументВводНачальныхОстатковПоПартиям.ДанныеПоПартиям.Добавить();
		//				
		//				СтрокаПартии.Номенклатура 	= ВыборкаПоСкладу.Номенклатура;
		//				СтрокаПартии.СчетУчета		= ВыборкаПоСкладу.СчетУчета;
		//				СтрокаПартии.Партия			= ВыборкаПоСкладу.Партия;
		//				СтрокаПартии.Склад			= ВыборкаПоСкладу.Склад;
		//				СтрокаПартии.Количество		= ВыборкаПоСкладу.Количество;
		//				СтрокаПартии.КлючСтроки		= КлючСтроки;
		//				
		//				ВыборкаПоСФ = ВыборкаПоСкладу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		//				
		//				Пока ВыборкаПоСФ.Следующий() Цикл
		//					Если СтрокаПоОрганизации = Неопределено Тогда
		//						 СтрокиПоСФ = Неопределено;
		//					Иначе
		//						СтрокиПоСФ = СтрокаПоОрганизации.Строки.Найти(ВыборкаПоСФ.СчетФактура,"СчетФактура");
		//						Если не СтрокиПоСФ = Неопределено Тогда
		//							СтрокиПоСФ = СтрокиПоСФ.Строки;
		//						КонецЕсли; 
		//					КонецЕсли; 
		//					Если не СтрокиПоСФ = Неопределено Тогда
		//						РезультатРаспределения = ОпределитьСчетУчетаИСтавкуНДСПоПартии(ВыборкаПоСФ, СтрокиПоСФ);
		//						Для каждого СтрокаРаспределения Из РезультатРаспределения Цикл
		//							СтрокаСФ				= ДокументВводНачальныхОстатковПоПартиям.ДанныеПоСФ.Добавить();
		//							ЗаполнитьЗначенияСвойств(СтрокаСФ,ВыборкаПоСФ);
		//							ЗаполнитьЗначенияСвойств(СтрокаСФ,СтрокаРаспределения);
		//							СтрокаСФ.КлючСтроки		= КлючСтроки;
		//						КонецЦикла; 
		//					Иначе
		//						СтрокаСФ				= ДокументВводНачальныхОстатковПоПартиям.ДанныеПоСФ.Добавить();
		//						ЗаполнитьЗначенияСвойств(СтрокаСФ,ВыборкаПоСФ);
		//						СтрокаСФ.КлючСтроки		= КлючСтроки;
		//						
		//					КонецЕсли;
		//					
		//					
		//				КонецЦикла;
		//				
		//				КлючСтроки = КлючСтроки + 1;
		//				
		//			КонецЦикла;
		//			
		//		КонецЦикла;
		//		
		//	КонецЦикла;
		//	
		//КонецЦикла;
		//
		//ДокументВводНачальныхОстатковПоПартиям.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли