&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация"   , ТекущиеДанные["Организация"]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТиповДоговора() Экспорт
	
	Возврат Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, НомерСубконто, Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные     = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%");

	// Выбор партии или документа расчетов

	ПараметрыДокумента.Вставить("СчетУчета", ТекущиеДанные["Счет" + ДтКт]);
	НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = ТекущиеДанные["Субконто" + ДтКт + НомерСубконто];
	ТипСубконто      = ТипЗнч(ЗначениеСубконто);

	Если ТипСубконто = Тип("СправочникСсылка.БанковскиеСчета") Тогда   //изменено RG-Soft

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);   //изменено RG-Soft

	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		ОткрытьФорму("Справочник.ПодразделенияОрганизаций.ФормаВыбора", ПараметрыФормы, Элемент);

	ИначеЕсли ПолучитьОписаниеТиповДоговора().СодержитТип(ТипСубконто) Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОбщегоНазначения.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
		Если ПараметрыДокумента.Свойство("Контрагент") Тогда
			Отбор.Вставить("Владелец", ПараметрыДокумента.Контрагент);    //изменено RG-Soft
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент); //изменено RG-Soft
		
	//RG-Soft - начало изменения
	//ИначеЕсли ТипСубконто = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда

	//	СтандартнаяОбработка = Ложь;
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Владелец", ОбщегоНазначения.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
	//	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
	//	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, Элемент);
    //RG-Soft - конец изменения
	
	КонецЕсли;

КонецПроцедуры
       
&НаКлиенте
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт   //добавлено RG-Soft

	ДанныеСчета = ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();

	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами")
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

			СтандартнаяОбработка = Ложь;

			СтруктураПараметров  = Новый Структура;
			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
				Если СписокПараметров.Свойство("Контрагент") Тогда
					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
				КонецЕсли;
				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
				КонецЕсли;
				Если СписокПараметров.Свойство("Дата") Тогда
					СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
				КонецЕсли;
				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
				КонецЕсли;
				СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		//RG-Soft - начало изменения
		//ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
		//	И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

		//	СтандартнаяОбработка = Ложь;

		//	СтруктураПараметров  = Новый Структура;
		//	СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
		//	Если СписокПараметров.Свойство("Номенклатура") Тогда
		//		СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
		//	КонецЕсли;
		//	Если СписокПараметров.Свойство("Склад") Тогда
		//		СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
		//	КонецЕсли;
		//	Если СписокПараметров.Свойство("Дата") Тогда
		//		СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
		//	КонецЕсли;
		//	Если СписокПараметров.Свойство("СчетУчета") Тогда
		//		СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		//	КонецЕсли;
		//	СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);

		//	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
		//	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		//RG-Soft - конец изменения
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если Объект.РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
				Если НЕ СтруктураШапки.РучнаяКорректировка Тогда
					ДокОбъект = ДокументСсылка.ПолучитьОбъект();
					//RG-Soft - начало изменения
					Если ДокОбъект.Метаданные().Реквизиты.Найти("РучнаяКорректировка") <> Неопределено Тогда 
						ДокОбъект.РучнаяКорректировка = Истина;
					КонецЕсли;  
					//RG-Soft - конец изменения
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;

				СтрокиСДвижениями = Объект.Регистры.НайтиСтроки(Новый Структура("ЕстьДвижения", Истина));

				Для каждого СтрокаРегистра Из Объект.Регистры Цикл
					ЗаписыватьНабор = СтрокаРегистра.ЕстьДвижения ИЛИ (ЭтаФорма[СтрокаРегистра.Имя].Количество() > 0);
					Если ЗаписыватьНабор Тогда
						НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя);
						Если СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
							Если Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
								СтрокаРеквизитов = "Период, Активность";
							ИначеЕсли Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
								СтрокаРеквизитов = "Активность";
							Иначе
								СтрокаРеквизитов = "Период, Активность";
							КонецЕсли;
						Иначе // "РегистрБухгалтерии", "РегистрНакопления"
							СтрокаРеквизитов = "Период, Активность";
						КонецЕсли;
						ТаблицаЗаписей = НаборЗаписей.Выгрузить(, СтрокаРеквизитов);
						Если ТаблицаЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
							ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапки.Дата, "Период");
						КонецЕсли;
						ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "Активность");
						Для каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
							Массив = ТаблицаЗаписей.ВыгрузитьКолонку(Колонка.Имя);
							НаборЗаписей.ЗагрузитьКолонку(Массив, Колонка.Имя);
						КонецЦикла;
						НаборЗаписей.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ВернутьСтр("ru='Не удалось записать движения документа'")
				+ " " + Строка(ДокументСсылка) + ": "
				+ ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Если СтруктураШапки.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			//RG-Soft - начало изменения
			//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
			//	ДокОбъект.ВыполнитьОперацию();
			//Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//КонецЕсли;  
		Исключение
			//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
			//	ТекстОшибки = ВернутьСтр("ru='Не удалось выполнить операцию '")
			//		+ Строка(ДокументСсылка) + ": "
			//		+ ОписаниеОшибки()
			//		+ Символы.ПС + ВернутьСтр("ru='Регламентная операция отменена.'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			//	ДокОбъект.ОтменитьОперацию();
			//	ОписаниеОшибки = ИнформацияОбОшибке();
			//	ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
			//Иначе
				ТекстОшибки = ВернутьСтр("ru='Не удалось перепровести документ '")
					+ Строка(ДокументСсылка) + ": "
					+ ОписаниеОшибки()
					+ Символы.ПС + ВернутьСтр("ru='Проведение документа отменено.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
			//КонецЕсли;
            //RG-Soft - конец изменения
		КонецПопытки;

		УстановитьДоступностьСубконто();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Отказ = Ложь;

	ИзмененаРучнаяКорректировка = СтруктураШапки.Свойство("РучнаяКорректировка")
		И (СтруктураШапки.РучнаяКорректировка <> Объект.РучнаяКорректировка);

	Если СтруктураШапки.Свойство("РучнаяКорректировка")
			И СтруктураШапки.РучнаяКорректировка
			И НЕ Объект.РучнаяКорректировка Тогда

		ТекстВопроса = ВернутьСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Объект.РучнаяКорректировка = Истина;
			УстановитьВозможностьРедактированияЗаписей();
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ЗаписатьДвижения(Отказ);

	Если НЕ Отказ Тогда

		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;

		ЭтаФорма.Модифицированность = Ложь;
		
		Оповестить("ИзмененФлагРучнаяКорректировка",Новый Структура("ДокументСсылка",ДокументСсылка));

		Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()

	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ОбновитьХозрасчетныйНаСервере()
	
	ИмяРегистра = "Хозрасчетный";
	МассивРегистров = Объект.Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
	Если МассивРегистров.Количество() = 1 Тогда
		СтрокаРегистра = МассивРегистров[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка Тогда
		НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРегистра);
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений", СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	СписокРезультат = ОткрытьФормуМодально("Обработка.КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма);

	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда

		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Объект.Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;

		Если БылиИзменения Тогда

			ВыполнитьДействияПриИзмененииСоставаРегистров();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеДвижений(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	ТекстЗапроса = "";

	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор

		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ "
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";

	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаЗапроса;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	ТаблицаДвижений = ОпределитьНаличиеДвижений(МетаданныеДокумента);
	ТаблицаДвижений.Индексы.Добавить("Имя");

	Объект.Регистры.Очистить();

	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл

		Строка = Объект.Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;

		ПолноеИмя = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = МетаданныеРегистра.Синоним;

		Строка.ЕстьДвижения = ТаблицаДвижений.Найти(ПолноеИмя, "Имя") <> Неопределено;
		Строка.Отображение = Строка.ЕстьДвижения;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Объект.Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьХозрасчетный = Ложь;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР = Ложь;

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			ПоказатьХозрасчетный = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;

		Если СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов" Тогда
			ПоказатьКнигаУчетаДоходовИРасходов = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРегистра.Имя = "РасшифровкаКУДиР" Тогда
			ПоказатьРасшифровкаКУДиР = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;
		
		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено Тогда
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			Иначе
				Продолжить;
			КонецЕсли;
			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
		КонецЕсли;
           				
		// Делаем страницу регистра невидимой, если она не нужна
		//RG-soft - начало добавления - т.к. в форму добавлена отдельная страница для регистра Проводки DSS общие
		Если ИмяГруппы = "ГруппаПроводкиDSSОбщие" Тогда
			ТекГруппа.Видимость = Ложь;
			Продолжить;
		КонецЕсли; //RG-soft - конец добавления
		ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		Если НЕ СтрокаРегистра.Отображение Тогда
			Продолжить;
		КонецЕсли;

		// На странице регистра создаем таблицу
		ИмяТаблицы = СтрокаРегистра.Имя;
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица <> Неопределено Тогда
			Элементы.Удалить(ТекТаблица);
		КонецЕсли;
		ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
		ТекТаблица.ПутьКДанным = СтрокаРегистра.Имя;

		ТекТаблица.ПутьКДаннымКартинкиСтроки = СтрокаРегистра.Имя + ".Активность";
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРБ;
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРН;
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРС;
		КонецЕсли;
			
		// Назначаем общий обработчик
		ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "ТаблицаРегистраПриНачалеРедактирования");

		// Определяем набор колонок для таблицы, соответствующих метаданным регистра
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
		РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

		// Некоторые колонки не надо показывать
		РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
		РеквизитыНабораЗаписей.Колонки.Удалить("Активность");
		Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
		КонецЕсли;

		// Создаем колонки таблицы
		Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
			ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
			КонецЕсли;
			ТекКолонка.ПутьКДанным = СтрокаРегистра.Имя + "." + КолонкаРеквизита.Имя;
			ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
		КонецЦикла;

	КонецЦикла;

	Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;
	Элементы.ГруппаКнигаУчетаДоходовИРасходов.Видимость = ПоказатьКнигаУчетаДоходовИРасходов;
	Элементы.ГруппаРасшифровкаКУДиР.Видимость = ПоказатьРасшифровкаКУДиР;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из Хозрасчетный Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		УстановитьДоступностьСубконтоНаСервере(Проводка.СчетДт, Проводка, ПоляОбъекта);   //изменено RG-Soft
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		УстановитьДоступностьСубконтоНаСервере(Проводка.СчетКт, Проводка, ПоляОбъекта);   //изменено RG-Soft
	КонецЦикла;

КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
&НаСервере
Процедура УстановитьДоступностьСубконтоНаСервере(Счет, Объект, ПоляОбъекта) Экспорт    //добавлено RG-Soft
	
	ДанныеСчета = ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт  //добавлено RG-Soft

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Код"                            , Счет.Код);
	ДанныеСчета.Вставить("Родитель"                       , Счет.Родитель);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Вид"                            , Счет.Вид);
	ДанныеСчета.Вставить("Забалансовый"                   , Счет.Забалансовый);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Счет.ЗапретитьИспользоватьВПроводках);
	ДанныеСчета.Вставить("Валютный"                       , Счет.Валютный);
	ДанныеСчета.Вставить("Количественный"                 , Счет.Количественный);
	//Добавила попытку Федотова Л., РГ-Софт, 23.07.15, вопрос SLI-0005618
	Попытка
		ДанныеСчета.Вставить("УчетПоПодразделениям"           , Счет.УчетПоПодразделениям);
		ДанныеСчета.Вставить("НалоговыйУчет"                  , Счет.НалоговыйУчет);
	Исключение
	КонецПопытки;
	ДанныеСчета.Вставить("КоличествоСубконто"             , Счет.ВидыСубконто.Количество());

	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Счет.ВидыСубконто[Индекс - 1].Суммовой);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
		Иначе
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
		КонецЕсли;
	КонецЦикла;

	Возврат ДанныеСчета;

КонецФункции

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()

	Для каждого ЭлементФормы Из Элементы.ГруппаДвиженияРегистров.ПодчиненныеЭлементы Цикл
		ЭлементФормы.ТолькоПросмотр = НЕ Объект.РучнаяКорректировка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()

	НовыеРеквизиты        = Новый Массив;
	УдаляемыеРеквизиты    = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "Хозрасчетный"
		ИЛИ СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов"
		ИЛИ СтрокаРегистра.Имя = "РасшифровкаКУДиР" Тогда
			Продолжить;
		КонецЕсли;

		Для каждого Реквизит Из СуществующиеРеквизиты Цикл
			Если Реквизит.Имя = СтрокаРегистра.Имя Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаРегистра.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТипРеквизита = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);

		НовыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаРегистра.Имя, ТипРеквизита, , , Истина));

	КонецЦикла;

	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистров()

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;

		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);

	КонецЦикла;
	УстановитьДоступностьСубконто();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Проведен,
	|	ПометкаУдаления";
	Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|" + РеквизитДокумента.Имя;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + " КАК Док
	|ГДЕ
	|	Ссылка = &ДокументСсылка";
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	СтруктураШапки = Новый Структура;
	Для каждого Колонка Из ТаблицаШапки.Колонки Цикл
		СтруктураШапки.Вставить(Колонка.Имя, ТаблицаШапки[0][Колонка.Имя]);
	КонецЦикла;
	
	//RG-Soft - начало добавления
	Если РольДоступна("ПолныеПрава") Тогда 
		СтруктураШапки.Вставить("РучнаяКорректировка", Ложь);
	КонецЕсли;		
	//RG-Soft - конец добавления

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументСсылка = Параметры.ДокументСсылка;

	Заголовок = "Движения документа: " + Строка(ДокументСсылка);

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	//RG-Soft - начало изменения
	Если //ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентнаяОперация")
			//И СтруктураШапки.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено
			//ИЛИ  //RG-Soft - конец изменения
			ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух")
			И НЕ СтруктураШапки.ПометкаУдаления Тогда
		СтруктураШапки.Проведен = Истина;
	КонецЕсли;

	Если НЕ СтруктураШапки.Проведен И НЕ СтруктураШапки.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();
	 
	УстановитьВозможностьРедактированияЗаписей();
	
	//RG-Soft - начало изменения
	Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводНачальныхОстатковОС"))
		или (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")) Тогда
	//RG-Soft - конец изменения
		ПараметрыФО = Новый Структура("Период", НачалоМесяца(СтруктураШапки.Дата + 86400));
	Иначе
		ПараметрыФО = Новый Структура("Период", НачалоМесяца(СтруктураШапки.Дата));
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыФО.Вставить("Организация", СтруктураШапки.Организация);
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

	Документ = ДокументСсылка;  //RG-Soft
	УстановитьТекстЗапроса();   //RG-Soft 
	
КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ СтруктураШапки.Проведен И НЕ СтруктураШапки.РучнаяКорректировка Тогда

		//RG-Soft - начало изменения
		//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентнаяОпераци") Тогда
		//	ТекстПредупреждения = ВернутьСтр("ru='Регламентная операция не выполнена.
		//		|Для получения информации о результатах проведения регламентную операцию необходимо выполнить.'");
		//	Иначе
		//RG-Soft - конец изменения
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
			ТекстПредупреждения = ВернутьСтр("ru='Операция (БУ и НУ) помечена на удаление.
				|Для получения информации о движениях, необходимо снять пометку на удаление'");
		Иначе
			ТекстПредупреждения = ВернутьСтр("ru='Документ не проведен.
				|Для получения информации о результатах проведения документ необходимо провести.'");
		КонецЕсли;

		Предупреждение(ТекстПредупреждения);

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()

	УстановитьВозможностьРедактированияЗаписей();

	Если СтруктураШапки.РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ПрочитатьЗаписиРегистров();
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры // ВыполнитьДействияПриИзмененииРучнойКорректировки()

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 1, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 2, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 3, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 1, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 2, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 3, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = "Сохранить изменения движений?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьДвижения(Отказ);
		ИначеЕсли Ответ <> КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Общая процедура для всех регистров. Устанавливает организацию в добавляемых строках.
//
&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда
		Если Элемент.ТекущиеДанные.Свойство("Организация")
			И СтруктураШапки.Свойство("Организация") Тогда
			Элемент.ТекущиеДанные.Организация = СтруктураШапки.Организация;
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство("Период")
			И СтруктураШапки.Свойство("Дата") Тогда
			Элемент.ТекущиеДанные.Период = СтруктураШапки.Дата;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ПовторноеОткрытиеСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьХозрасчетный(Команда)
	
	ОбновитьХозрасчетныйНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Хозрасчетный.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3", СтрокаТаблицы.Организация);

	ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина);  //изменено RG-Soft
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Хозрасчетный.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоКт1", "СубконтоКт2", "СубконтоКт3", СтрокаТаблицы.Организация);

	ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь) Экспорт   //добавлено RG-Soft
	
	ДанныеСчета = ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
			Иначе 
				Объект[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		УстановитьДоступностьСубконтоНаСервере(Счет, Объект, ПоляОбъекта);
	КонецЕсли;	
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Если ДанныеСчета.УчетПоПодразделениям Тогда
			ПодразделениеПоУмолчанию = Неопределено;
			ПоляОбъекта.Свойство("ПодразделениеПоУмолчанию", ПодразделениеПоУмолчанию);
			ПолучитьПодразделениеПриИзмененииСчета(Объект[ПоляОбъекта.Подразделение],
			ПоляОбъекта.Организация,
			ПодразделениеПоУмолчанию);
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Истина;
			КонецЕсли;															
		Иначе
			Объект[ПоляОбъекта.Подразделение] = Неопределено;
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт  //добавлено RG-Soft

	Если Не (ЗначениеЗаполнено(Подразделение) И Подразделение.Владелец = Организация) Тогда
		Если ПодразделениеПоУмолчанию = Неопределено Тогда
			ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
				Подразделение = ПодразделениеПоУмолчанию;
			Иначе
				Подразделение = Неопределено;
			КонецЕсли;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Подразделение;

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ПРОВОДКИ DSS ОБЩИЕ
/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОпределитьРазницы(Команда)
	Регистратор = Документ;
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ОпределитьРазницыСервер(Регистратор);
	Иначе
		Сообщить("В этом списке фильтр можно применять только к движениям одного документа. Сначала установите отбор по документу.");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьРазницыСервер(Регистратор)
	Если 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ПередачаОС") 
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.СчетКнигиПокупок")
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.InventoryПеремещение")
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.InventoryПоступление")
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.InventoryСписание")
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.InventoryКорректировка")   
		И 	ТипЗнч(Регистратор) <> Тип("ДокументСсылка.НачислениеАмортизации") Тогда
		Сообщить("Разницы на данном этапе можно определить только для документов с типом Реализация товаров и услуг, Передача ОС, Счет книги покупок, документов блока Inventory или операций по начислению амортизации.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	Отказ = Ложь;
	ОбработкаDSSСервер.РассчитатьРазницы(Регистратор, Отказ);
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Уровень(Команда)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбрана строка");
		Возврат;
	КонецЕсли;   
	ID = Элементы.Список.ТекущиеДанные.GltObjId;
	КодЭлементаСпр = НайтиФильтрСервер(ID);
	
	Если ЗначениеЗаполнено(КодЭлементаСпр) Тогда
		ФормаСпискаСправочника = ПолучитьФорму("Справочник.Фильтры.ФормаСписка");
		ФормаСпискаСправочника.Открыть();
		
		СсылкаНаФильтр = ПолучитьФильтрПоКоду(КодЭлементаСпр);
		
		ФормаСпискаСправочника.ЭлементыФормы.СправочникДерево.ТекущаяСтрока = СсылкаНаФильтр;
	Иначе    		
		Сообщить("Не найден элемент справочника ""Фильтры"""); 		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция НайтиФильтрСервер(Идентиф)
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("GltObjId", Идентиф);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроводкиDSSОбщие.Период,
	|	ПроводкиDSSОбщие.Регистратор,
	|	ПроводкиDSSОбщие.НомерСтроки,
	|	ПроводкиDSSОбщие.Активность,
	|	ПроводкиDSSОбщие.AccountLawson,
	|	ПроводкиDSSОбщие.FiscalType,
	|	ПроводкиDSSОбщие.AU,
	|	ПроводкиDSSОбщие.LegalEntity,
	|	ПроводкиDSSОбщие.BaseAmount,
	|	ПроводкиDSSОбщие.RubAmount,
	|	ПроводкиDSSОбщие.FiscAmount,
	|	ПроводкиDSSОбщие.TempDiff,
	|	ПроводкиDSSОбщие.PermDiff,
	|	ПроводкиDSSОбщие.ExchDiff,
	|	ПроводкиDSSОбщие.System,
	|	ПроводкиDSSОбщие.GltObjId,
	|	ПроводкиDSSОбщие.DateLawson,
	|	ПроводкиDSSОбщие.Reference,
	|	ПроводкиDSSОбщие.Description,
	|	ПроводкиDSSОбщие.TranAmount,
	|	ПроводкиDSSОбщие.Currency,
	|	ПроводкиDSSОбщие.GUID,
	|	ПроводкиDSSОбщие.PeriodLawson,
	|	ПроводкиDSSОбщие.Company,
	|	ПроводкиDSSОбщие.Модуль,
	|	ПроводкиDSSОбщие.AccountLawson.Родитель.КодЧислом КАК SumAcctNumber,
	|	ПроводкиDSSОбщие.AccountLawson.Наименование КАК AccountDesc,
	|	ПроводкиDSSОбщие.AccountLawson.КодЧислом КАК AccountNumber,
	|	ПроводкиDSSДетали.Документ,
	|	ПроводкиDSSДетали.GeoMarket,
	|	ПроводкиDSSДетали.UpdateDateLawson,
	|	ПроводкиDSSДетали.SeqTrnsNbrLawson,
	|	ПроводкиDSSДетали.OrigCompanyLawson,
	|	ПроводкиDSSДетали.Activity,
	|	ПроводкиDSSДетали.SourceCode,
	|	ПроводкиDSSДетали.JeTypeLawson,
	|	ПроводкиDSSДетали.JournalLawson,
	|	ПроводкиDSSДетали.LineNbrLawson,
	|	ПроводкиDSSДетали.AutoRevLawson,
	|	ПроводкиDSSДетали.Operator,
	|	ПроводкиDSSДетали.LegalFiscalFlagLawson,
	|	ПроводкиDSSДетали.Vendor,
	|	ПроводкиDSSДетали.VendorVname,
	|	ПроводкиDSSДетали.ApInvoice,
	|	ПроводкиDSSДетали.TransNbr,
	|	ПроводкиDSSДетали.OrigOperatorId,
	|	ПроводкиDSSДетали.ProcessLevel,
	|	ПроводкиDSSДетали.CashCode,
	|	ПроводкиDSSДетали.PoNumber,
	|	ПроводкиDSSДетали.LineNbrIc,
	|	ПроводкиDSSДетали.PoCode,
	|	ПроводкиDSSДетали.AssetLawson,
	|	ПроводкиDSSДетали.ItemDescription,
	|	ПроводкиDSSДетали.CustomerNumber,
	|	ПроводкиDSSДетали.CustomerName,
	|	ПроводкиDSSДетали.ArInvoice,
	|	ПроводкиDSSДетали.TaxCode,
	|	ПроводкиDSSДетали.Item,
	|	ПроводкиDSSДетали.DocumentNbr,
	|	ПроводкиDSSДетали.ContractNumber,
	|	ПроводкиDSSДетали.AktOfAcceptance,
	|	ПроводкиDSSДетали.AktDateLawson,
	|	ПроводкиDSSДетали.ApTransFormId,
	|	ПроводкиDSSДетали.КонтрагентLawson,
	|	ПроводкиDSSОбщие.AU.Сегмент КАК SubSubSeg,
	//-> RG-Soft VIvanov 2015/02/18
	//|	ПроводкиDSSОбщие.AU.Сегмент.Родитель КАК SubSeg,
	//|	ПроводкиDSSОбщие.AU.Сегмент.Родитель.Родитель КАК BusSeg,
	|	ПроводкиDSSОбщие.AU.SubSegment КАК SubSeg,
	|	ПроводкиDSSОбщие.AU.Segment КАК BusSeg,
	|	ПроводкиDSSОбщие.AU.Сегмент.Наименование КАК SubSubSegDesc,
	//|	ПроводкиDSSОбщие.AU.Сегмент.Родитель.Наименование КАК SubSegDesc,
	//|	ПроводкиDSSОбщие.AU.Сегмент.Родитель.Родитель.Наименование КАК SegDesc
	|	ПроводкиDSSОбщие.AU.SubSegment.Наименование КАК SubSegDesc,
	|	ПроводкиDSSОбщие.AU.Segment.Наименование КАК SegDesc
	//<- RG-Soft VIvanov
	|ИЗ
	|	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкиDSSДетали
	|		ПО ПроводкиDSSОбщие.GltObjId = ПроводкиDSSДетали.Номер
	|ГДЕ
	|	ПроводкиDSSОбщие.GltObjId <> 1000000000
	|	И ПроводкиDSSОбщие.GltObjId = &GltObjId";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда     	
		Сообщить("Строк с таким номером больше одной, поиск будет осуществляется для первой доступной");	
	КонецЕсли; 
	
	Если НЕ Выборка.Количество() Тогда     	
		Сообщить("Для данного номера поиск не осуществляется");
	КонецЕсли;  
	
	Если Выборка.Следующий()Тогда
		Возврат ПрименитьФильтрыПоискТипа(Неопределено, Выборка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПрименитьФильтрыПоискТипа(Родитель, Строка) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Фильтры.ПустаяСсылка();	
	КонецЕсли; 
	Выборка = Справочники.Фильтры.Выбрать(Родитель,,,"Код Возр");
	
	Результат = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыФильтров.IF Тогда
			Выполнить("Результат = (" + Выборка.КодВыполнения + ");");
			Если Результат Тогда    				
				Если ЗначениеЗаполнено(Выборка.Статья) Тогда  					
					Возврат Выборка.Код;
				Иначе
					Возврат ПрименитьФильтрыПоискТипа(Выборка.Ссылка, Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Тип = Перечисления.ТипыФильтров.ELSE Тогда
			Если ЗначениеЗаполнено(Выборка.Статья) Тогда
				Возврат Выборка.Код;   
			Иначе
				Возврат ПрименитьФильтрыПоискТипа(Выборка.Ссылка, Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьФильтрПоКоду(КодФильтра)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фильтры.Ссылка
	|ИЗ
	|	Справочник.Фильтры КАК Фильтры
	|ГДЕ
	|	Фильтры.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодФильтра);		
	Результат = Запрос.Выполнить(); 		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции
 
&НаКлиенте
Процедура ПрименитьФильтр(Команда)
	РегистраторПроводка = Элементы.Список.ТекущиеДанные.Регистратор;
	Если РегистраторПроводка <> Неопределено И ТипЗнч(РегистраторПроводка) = Тип("ДокументСсылка.ПроводкаDSS") Тогда
		ПрименитьФильтрСервер(РегистраторПроводка);
	Иначе
		Сообщить("В этом списке фильтр можно применять только к движениям одного документа. Сначала установите отбор по документу.");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрСервер(РегистраторПроводка)
	Регистратор = РегистраторПроводка;
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВложенныйЗапрос.GltObjId,
		|	ВложенныйЗапрос.TranAmount,
		|	ВложенныйЗапрос.Регистратор.SourceCode,
		|	ВложенныйЗапрос.Регистратор.System,
		|	ВложенныйЗапрос.SumAcct КАК SumAcctNumber,
		|	ВложенныйЗапрос.Accnt КАК AccountNumber,
		|	ВложенныйЗапрос.Регистратор.Документ КАК Регистратор,
		|	ВложенныйЗапрос.Регистратор.GeoMarket,
		|	ВложенныйЗапрос.Регистратор.UpdateDateLawson,
		|	ВложенныйЗапрос.Регистратор.SeqTrnsNbrLawson,
		|	ВложенныйЗапрос.Регистратор.OrigCompanyLawson,
		|	ВложенныйЗапрос.Регистратор.Activity,
		|	ВложенныйЗапрос.Регистратор.JeTypeLawson,
		|	ВложенныйЗапрос.Регистратор.JournalLawson,
		|	ВложенныйЗапрос.Регистратор.LineNbrLawson,
		|	ВложенныйЗапрос.Регистратор.AutoRevLawson,
		|	ВложенныйЗапрос.Регистратор.Operator,
		|	ВложенныйЗапрос.Регистратор.LegalFiscalFlagLawson,
		|	ВложенныйЗапрос.Регистратор.Vendor,
		|	ВложенныйЗапрос.Регистратор.VendorVname,
		|	ВложенныйЗапрос.Регистратор.ApInvoice,
		|	ВложенныйЗапрос.Регистратор.TransNbr,
		|	ВложенныйЗапрос.Регистратор.OrigOperatorId,
		|	ВложенныйЗапрос.Регистратор.ProcessLevel,
		|	ВложенныйЗапрос.Регистратор.CashCode,
		|	ВложенныйЗапрос.Регистратор.PoNumber,
		|	ВложенныйЗапрос.Регистратор.LineNbrIc,
		|	ВложенныйЗапрос.Регистратор.PoCode,
		|	ВложенныйЗапрос.Регистратор.AssetLawson,
		|	ВложенныйЗапрос.Регистратор.ItemDescription,
		|	ВложенныйЗапрос.Регистратор.CustomerNumber,
		|	ВложенныйЗапрос.Регистратор.CustomerName,
		|	ВложенныйЗапрос.Регистратор.ArInvoice,
		|	ВложенныйЗапрос.Регистратор.TaxCode,
		|	ВложенныйЗапрос.Регистратор.Item,
		|	ВложенныйЗапрос.Регистратор.DocumentNbr,
		|	ВложенныйЗапрос.Регистратор.ContractNumber,
		|	ВложенныйЗапрос.Регистратор.AktOfAcceptance,
		|	ВложенныйЗапрос.Регистратор.AktDateLawson,
		|	ВложенныйЗапрос.Регистратор.ApTransFormId,
		|	ВложенныйЗапрос.Регистратор.AccountLawson,
		|	ВложенныйЗапрос.Регистратор.Company,
		|	ВложенныйЗапрос.Регистратор.Модуль,
		|	ВложенныйЗапрос.Регистратор.BaseAmount,
		|	ВложенныйЗапрос.Регистратор.Reference,
		|	ВложенныйЗапрос.Регистратор.Description,
		|	ВложенныйЗапрос.Регистратор.Currency,
		|	ВложенныйЗапрос.Регистратор.КонтрагентLawson,
		|	ВложенныйЗапрос.Регистратор.FiscalType
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПроводкиDSSОбщие.GltObjId КАК GltObjId,
		|		ПроводкиDSSОбщие.TranAmount КАК TranAmount,
		|		ПроводкиDSSОбщие.AccountLawson.Родитель.КодЧислом КАК SumAcct,
		|		ПроводкиDSSОбщие.AccountLawson.КодЧислом КАК Accnt,
		|		ПроводкиDSSОбщие.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		|	ГДЕ
		|		ПроводкиDSSОбщие.Регистратор.Документ = &Регистратор
		|		И ПроводкиDSSОбщие.GltObjId <> 1000000000) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Регистратор.FiscalType.Авто");
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПолей = ОбработкаDSSСервер.ПрименитьФильтры(Неопределено,Выборка);
			Если ЗначениеЗаполнено(СтруктураПолей.FiscalType) Тогда
				Док = Выборка.Регистратор.ПолучитьОбъект();
				Док.FiscalType = СтруктураПолей.FiscalType;
				Док.Модуль = СтруктураПолей.Модуль;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЦикла;
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.СчетКнигиПокупок") И Регистратор.Проведен Тогда
			МеханизмыКнигиПокупок.ПровестиДокумент(Регистратор);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Детали.Очистить();
	Иначе
		ВывестиДетали(Элемент.ТекущиеДанные.GltObjId);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиДетали(ID)
	Детали.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроводкаDSS.Номер КАК GltObjId,
	|	ПроводкаDSS.GeoMarket,
	|	ПроводкаDSS.UpdateDateLawson,
	|	ПроводкаDSS.SeqTrnsNbrLawson,
	|	ПроводкаDSS.OrigCompanyLawson,
	|	ПроводкаDSS.Activity,
	|	ПроводкаDSS.SourceCode,
	|	ПроводкаDSS.System,
	|	ПроводкаDSS.JeTypeLawson,
	|	ПроводкаDSS.JournalLawson,
	|	ПроводкаDSS.LineNbrLawson,
	|	ПроводкаDSS.AutoRevLawson,
	|	ПроводкаDSS.Operator,
	|	ПроводкаDSS.LegalFiscalFlagLawson,
	|	ПроводкаDSS.Vendor,
	|	ПроводкаDSS.VendorVname,
	|	ПроводкаDSS.ApInvoice,
	|	ПроводкаDSS.TransNbr,
	|	ПроводкаDSS.OrigOperatorId,
	|	ПроводкаDSS.ProcessLevel,
	|	ПроводкаDSS.CashCode,
	|	ПроводкаDSS.PoNumber,
	|	ПроводкаDSS.LineNbrIc,
	|	ПроводкаDSS.PoCode,
	|	ПроводкаDSS.AssetLawson,
	|	ПроводкаDSS.ItemDescription,
	|	ПроводкаDSS.CustomerNumber,
	|	ПроводкаDSS.CustomerName,
	|	ПроводкаDSS.ArInvoice,
	|	ПроводкаDSS.TaxCode,
	|	ПроводкаDSS.Item,
	|	ПроводкаDSS.DocumentNbr,
	|	ПроводкаDSS.ContractNumber,
	|	ПроводкаDSS.AktOfAcceptance,
	|	ПроводкаDSS.AktDateLawson,
	|	ПроводкаDSS.ApTransFormId,
	|	ПроводкаDSS.Модуль,
	|	ПроводкаDSS.AccountLawson,
	|	ПроводкаDSS.Company,
	|	ПроводкаDSS.BaseAmount,
	|	ПроводкаDSS.Reference,
	|	ПроводкаDSS.Description,
	|	ПроводкаDSS.Currency,
	|	ПроводкаDSS.TranAmount,
	|	ПроводкаDSS.КонтрагентLawson.Код КАК Код,
	|	ПроводкаDSS.КонтрагентLawson.Наименование КАК Наименование
	|ИЗ
	|	Документ.ПроводкаDSS КАК ПроводкаDSS
	|ГДЕ
	|	ПроводкаDSS.Номер = &GltObjId";
	
	Запрос.УстановитьПараметр("GltObjId", ID);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		Запись = Результат[0];
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись) Тогда
		Для Каждого Колонка Из Результат.Колонки Цикл
			Если  ЗначениеЗаполнено(Запись[Колонка.Имя]) ТОгда
				Выполнить("	Строка = Детали.Добавить();
				|Строка.ИмяПоля = Колонка.Имя;
				|Строка.Значение = Запись." + Колонка.Имя + ";
				|Если Колонка.Имя = ""Код"" Тогда Строка.ИмяПоля = ""Код контрагента Lawson""; КонецЕсли;
				|Если Колонка.Имя = ""Наименование"" Тогда Строка.ИмяПоля = ""Наименование контрагента Lawson""; КонецЕсли;"); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	
	УстановитьТекстЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапроса()
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Список.ТекстЗапроса = "ВЫБРАТЬ
		                      |	РегистрНакопленияПроводкиDSSОбщие.Период,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Регистратор,
		                      |	РегистрНакопленияПроводкиDSSОбщие.НомерСтроки,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Активность,
		                      |	РегистрНакопленияПроводкиDSSОбщие.AccountLawson,
		                      |	РегистрНакопленияПроводкиDSSОбщие.FiscalType,
		                      |	РегистрНакопленияПроводкиDSSОбщие.AU,
		                      |	РегистрНакопленияПроводкиDSSОбщие.LegalEntity,
		                      |	РегистрНакопленияПроводкиDSSОбщие.BaseAmount,
		                      |	РегистрНакопленияПроводкиDSSОбщие.RubAmount,
		                      |	РегистрНакопленияПроводкиDSSОбщие.FiscAmount,
		                      |	РегистрНакопленияПроводкиDSSОбщие.TempDiff,
		                      |	РегистрНакопленияПроводкиDSSОбщие.PermDiff,
		                      |	РегистрНакопленияПроводкиDSSОбщие.ExchDiff,
		                      |	РегистрНакопленияПроводкиDSSОбщие.System,
		                      |	РегистрНакопленияПроводкиDSSОбщие.GltObjId,
		                      |	РегистрНакопленияПроводкиDSSОбщие.DateLawson,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Reference,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Description,
		                      |	РегистрНакопленияПроводкиDSSОбщие.TranAmount,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Currency,
		                      |	РегистрНакопленияПроводкиDSSОбщие.GUID,
		                      |	РегистрНакопленияПроводкиDSSОбщие.PeriodLawson,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Company,
		                      |	РегистрНакопленияПроводкиDSSОбщие.Модуль,
		                      |	РегистрНакопленияПроводкиDSSОбщие.МоментВремени
		                      |ИЗ
		                      |	РегистрНакопления.ПроводкиDSSОбщие КАК РегистрНакопленияПроводкиDSSОбщие
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ПроводкиПоДокументу.Ссылка КАК СсылкаНаРегистратор
		                      |		ИЗ
		                      |			КритерийОтбора.ПроводкиПоДокументу(&Регистратор) КАК ПроводкиПоДокументу
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			&Регистратор) КАК ВложенныйЗапрос
		                      |		ПО (РегистрНакопленияПроводкиDSSОбщие.Регистратор = ВложенныйЗапрос.СсылкаНаРегистратор)";
		Список.Параметры.УстановитьЗначениеПараметра("Регистратор", Документ);
	Иначе
		Элементы.ОснГруппаПроводкиDSSОбщие.Видимость = Ложь;
	КонецЕсли;
						  
КонецПроцедуры


