
//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайл();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Файлы PDF|*.pdf";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
		Если НЕ ЗначениеЗаполнено(FullPath) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Файл не выбран!",
				, "Объект", "FullPath");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние("Идет загрузка файла");
	
	ЗагрузитьDOCИзФайла();		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьDOCИзФайла() Экспорт
	
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(FullPath) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = CustomsКлиент.ПолучитьТекстовыйДокументИзФайлаPDF(FullPath);	
	Если ТекстовыйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗагрузитьНовыйDOCИзТекстовогоДокумента(ТекстовыйДокумент);
				
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйDOCИзТекстовогоДокумента(ТекстовыйДокумент)
	
	БылиКритическиеОшибки = Ложь;
	БылиНедочеты = Ложь;
	DOC = Неопределено;
	
	СтруктураШапки = СформироватьСтруктуруШапки(ТекстовыйДокумент, БылиКритическиеОшибки);
	Если БылиКритическиеОшибки Тогда
		ТекстПредупреждения = "Failed to load DOC!
			|See errors above.";		
		Предупреждение(ТекстПредупреждения, 60, "Attention!");
		Возврат;
	КонецЕсли;

	СформироватьТаблицыЗначений(ТекстовыйДокумент, БылиКритическиеОшибки);
	
	Если НЕ БылиКритическиеОшибки Тогда
		
		Файл = Новый Файл(FullPath);
		УниверсальноеВремяИзменения = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		АдресФайла = Неопределено;
		ПоместитьФайл(АдресФайла, FullPath,, Ложь, УникальныйИдентификатор);
		
		СтруктураВозврата = ЗагрузитьНовыйDOCИзСтруктуры(СтруктураШапки, ТаблицаPieces, ТаблицаParcels, ТаблицаParcelLines, FullPath, УниверсальноеВремяИзменения, АдресФайла);

		Если СтруктураВозврата.БылиКритическиеОшибки Тогда
			БылиКритическиеОшибки = Истина;
		КонецЕсли;
		
		Если СтруктураВозврата.БылиНедочеты Тогда
			БылиНедочеты = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата.DOC) Тогда
			DOC = СтруктураВозврата.DOC;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(DOC) Тогда
		ПоказатьЗначение(,DOC);
	КонецЕсли;
	
	Если БылиКритическиеОшибки Тогда
		
		ТекстПредупреждения = "Failed to load DOC № " + СтруктураШапки.Номер + "!
			|See errors above.";		
		Предупреждение(ТекстПредупреждения, 60, "Attention!");
		
	ИначеЕсли БылиНедочеты Тогда
		
		ТекстПредупреждения = "There were errors during loading of DOC № " + СтруктураШапки.Номер + ".
			|See errors in the loading form.";		
		Предупреждение(ТекстПредупреждения, 60, "Attention!");
		
	Иначе
		
		ПоказатьОповещениеПользователя(, , "DOC № " + СтруктураШапки.Номер + " was successfully loaded");
		
	КонецЕсли;
				
КонецПроцедуры


// РАЗБОР ТЕКСТА

&НаКлиенте
Функция СформироватьСтруктуруШапки(ТекстовыйДокумент, Отказ)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер");
	Структура.Вставить("Дата");
	
	// Обычно номер и дата стоят во второй строке
	Строка = ТекстовыйДокумент.ПолучитьСтроку(2);
	
	ПозицияNumber = СтрНайти(Строка, "Number:");
	
	// Но иногда и в третьей
	Если ПозицияNumber = 0 Тогда
		Строка = ТекстовыйДокумент.ПолучитьСтроку(3);
		ПозицияNumber = СтрНайти(Строка, "Number:");
	КонецЕсли;
	
	Если ПозицияNumber > 0 Тогда
		
		КонецПозицииNumber = ПозицияNumber + СтрДлина("Number:");
		СтрокаСНомером = Сред(Строка, КонецПозицииNumber);
		СтрокаСНомером = СокрЛ(СтрокаСНомером);
		ПозицияПробела = СтрНайти(СтрокаСНомером, " ");
		Если ПозицияПробела > 1 Тогда	
			Структура.Номер = Лев(СтрокаСНомером, ПозицияПробела-1);	
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find the end of DOC no.!",
				,,, Отказ);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find the beginning of DOC no.!",
			,,, Отказ);

	КонецЕсли;
			
	ПозицияDate = СтрНайти(Строка, "Date:");
	Если ПозицияDate > 0 Тогда
	
		КонецПозицииDate = ПозицияDate + СтрДлина("Date:");
		ПозицияPage = СтрНайти(Строка, "Page");
		Если ПозицияPage > 1 Тогда
			
			Структура.Дата = Сред(Строка, КонецПозицииDate, ПозицияPage - КонецПозицииDate);
			Структура.Дата = СокрЛП(Структура.Дата);
			Если НЕ ЗначениеЗаполнено(Структура.Дата) Тогда		
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find DOC date!",
					,,, Отказ);	
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find the end of DOC date!",
				,,, Отказ);
		КонецЕсли;
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find the beginning of DOC date!",
			,,, Отказ);
			
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТаблицыЗначений(ТекстовыйДокумент, Отказ)
	
	ТаблицаPieces.Очистить();
	ТаблицаParcels.Очистить();
	ТаблицаParcelLines.Очистить();
	
	Ресивер	= "";
	
	Для НомерСтроки = 3 По ТекстовыйДокумент.КоличествоСтрок() Цикл
				
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Строка = СокрЛП(Строка);	
		
		Если Строка = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка, "DOC Number:") Тогда
			
			Если СтрНайти(Строка, "Date") Тогда
				// Это все еще шапка - пропускаем строку
				Продолжить;
			КонецЕсли;
				
			// Это строка данных Piece		
			ДанныеPiece = РазобратьСтрокуРазмеровИВесов(Строка);
			
			СтрокаТаблицыPieces = ТаблицаPieces.Добавить();
			
			СтрокаТаблицыPieces.PieceNo = ДанныеPiece.SubNo;
			СтрокаТаблицыPieces.PackingType = ДанныеPiece.PackingType;
			СтрокаТаблицыPieces.Length = ДанныеPiece.Length;
			СтрокаТаблицыPieces.Width = ДанныеPiece.Width;
			СтрокаТаблицыPieces.Height = ДанныеPiece.Height;
			СтрокаТаблицыPieces.DIMsUOM = ДанныеPiece.DimsUOM;
			СтрокаТаблицыPieces.GrossWeight = ДанныеPiece.GrossWeight;
			СтрокаТаблицыPieces.GrossWeightUOM = ДанныеPiece.GrossWeightUOM;
			СтрокаТаблицыPieces.NetWeight = ДанныеPiece.NetWeight;
			СтрокаТаблицыPieces.NetWeightUOM = ДанныеPiece.NetWeightUOM;
			
			ПоследнийPieceNo = СтрокаТаблицыPieces.PieceNo;
			
		ИначеЕсли СтрНайти(Строка, "DO Number:") Тогда
			
			// Это строка данных Parcel
			ДанныеParcel = РазобратьСтрокуРазмеровИВесов(Строка);
			
			СтрокаТаблицыДанныхParcels = ТаблицаParcels.Добавить();
			
			СтрокаТаблицыДанныхParcels.DONo = ДанныеParcel.No;
			СтрокаТаблицыДанныхParcels.PieceNo = ПоследнийPieceNo;
			СтрокаТаблицыДанныхParcels.ParcelNo = ДанныеParcel.SubNo;
			СтрокаТаблицыДанныхParcels.PackingType = ДанныеParcel.PackingType;
			СтрокаТаблицыДанныхParcels.Length = ДанныеParcel.Length;
			СтрокаТаблицыДанныхParcels.Width = ДанныеParcel.Width;
			СтрокаТаблицыДанныхParcels.Height = ДанныеParcel.Height;
			СтрокаТаблицыДанныхParcels.DimsUOM = ДанныеParcel.DimsUOM;		
			СтрокаТаблицыДанныхParcels.GrossWeight = ДанныеParcel.GrossWeight;
			СтрокаТаблицыДанныхParcels.WeightUOM = ДанныеParcel.GrossWeightUOM;	
			
		ИначеЕсли СтрНайти(Строка, "Receiver:") Тогда
			
			ЭлементыСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, " ");
			Ресивер	= ЭлементыСтроки[1];
			
		ИначеЕсли СтрНайти(Строка, "Order:") Тогда
			
			ЭлементыСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, " ");
			
			СтрокаТаблицыДанныхParcelLines = ТаблицаParcelLines.Добавить();
			СтрокаТаблицыДанныхParcelLines.DONo = СтрокаТаблицыДанныхParcels.DONo;
			СтрокаТаблицыДанныхParcelLines.ParcelNo = СтрокаТаблицыДанныхParcels.ParcelNo;
			// Для количества берем именно символы с конца, потому что посередине может оказаться партномер с пробелами, а значит количество элементов массива неопределено
			СтрокаТаблицыДанныхParcelLines.QTY = ЭлементыСтроки[ЭлементыСтроки.ВГраница()-1];
			СтрокаТаблицыДанныхParcelLines.QtyUOM = ЭлементыСтроки[ЭлементыСтроки.ВГраница()];
			СтрокаТаблицыДанныхParcelLines.PO = Сред(ЭлементыСтроки[0],7);
			СтрокаТаблицыДанныхParcelLines.POLine = Прав(ЭлементыСтроки[2],3);
			СтрокаТаблицыДанныхParcelLines.Receiver	= Ресивер;
			
		ИначеЕсли СтрНайти(Строка, "Serial:") Тогда
			
			КонецПрефикса = СтрДлина("Serial:");
			Serial = Сред(Строка, КонецПрефикса+1);
			ПозицияТрехПробелов = СтрНайти(Serial, "  ");
			СтрокаТаблицыДанныхParcelLines.Serial = СокрЛП(Лев(Serial, ПозицияТрехПробелов-1));
			
		ИначеЕсли СтрНайти(Строка, "Item Net Weight:") Тогда
			
			КонецПрефикса = СтрДлина("Item Net Weight:");
			СтрокаСNetWeight = Сред(Строка, КонецПрефикса+1);
			СтрокаСNetWeight = СокрЛ(СтрокаСNetWeight);
			СтрокаТаблицыДанныхParcelLines.NetWeight = ОтрезатьСлеваПоРазделителю(СтрокаСNetWeight, " ");
			СтрокаТаблицыДанныхParcelLines.NetWeightUOM = СокрЛП(СтрокаСNetWeight);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РазобратьСтрокуРазмеровИВесов(Знач ТекСтрока)
	
	СтруктураДанных = Новый Структура("No, SubNo, PackingType, Length, Width, Height, DimsUOM, GrossWeight, GrossWeightUOM, NetWeight, NetWeightUOM");
	
	// Срежем строку до двоеточия
	ОтрезатьСлеваПоРазделителю(ТекСтрока, ":");
	
	// Получим номер от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.No = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Срежем строку до пробела
	ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Срежем строку до двоеточия
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.SubNo = ОтрезатьСлеваПоРазделителю(ТекСтрока, ":");
	СтруктураДанных.SubNo = СокрЛП(СтруктураДанных.SubNo);
	
	// Получим тип упаковки от начала строки до тире
	
	ТекСтрока = СтрЗаменить(ТекСтрока, "-T1", ""); // S-I-0002470 уберем "-T1"
	
	ТекСтрока = СокрЛП(ТекСтрока);
	ПоложениеРазделителя = СтрНайти(ТекСтрока, "-");
	Если ПоложениеРазделителя = 0 Тогда
		
		// Не удалось найти конец типа упаковки - значит фиг знает, что там дальше - выходим
		СтруктураДанных.PackingType = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
		Возврат СтруктураДанных;
		
	КонецЕсли;
	СтруктураДанных.PackingType = ОтрезатьСлеваПоРазделителю(ТекСтрока, "-");
	СтруктураДанных.PackingType = СокрЛП(СтруктураДанных.PackingType);
	
	// Получим длину от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.Length = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Получим единицу измерения от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.DimsUOM = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Срежем строку до крестика
	ПоложениеРазделителя = СтрНайти(ТекСтрока, "x");
	Если ПоложениеРазделителя = 0 Тогда
		ПоложениеРазделителя = СтрНайти(ТекСтрока, "X");
		Если ПоложениеРазделителя = 0 Тогда
			// Не удалось найти разделитель - значит фиг знает, что там дальше - выходим
			Возврат СтруктураДанных;
		КонецЕсли; 
	КонецЕсли; 
	ТекСтрока = Сред(ТекСтрока, ПоложениеРазделителя + 1);
	
	// Получим ширину от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.Width = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Срежем строку до крестика
	ПоложениеРазделителя = СтрНайти(ТекСтрока, "x");
	Если ПоложениеРазделителя = 0 Тогда
		ПоложениеРазделителя = СтрНайти(ТекСтрока, "X");
		Если ПоложениеРазделителя = 0 Тогда
			// Не удалось найти разделитель - значит фиг знает, что там дальше - выходим
			Возврат СтруктураДанных;
		КонецЕсли; 
	КонецЕсли;
	ТекСтрока = Сред(ТекСтрока, ПоложениеРазделителя + 1);
	
	// Получим высоту от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.Height = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Срежем строку до знака равно
	ОтрезатьСлеваПоРазделителю(ТекСтрока, "=");
	
	// Получим вес от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	СтруктураДанных.GrossWeight = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
	
	// Получим единицу измерения веса брутто от начала строки до пробела
	ТекСтрока = СокрЛ(ТекСтрока);
	ПоложениеРазделителя = СтрНайти(ТекСтрока, " ");
	Если ПоложениеРазделителя = 0 Тогда
		
		СтруктураДанных.GrossWeightUOM = ТекСтрока;
		
	Иначе
		
		СтруктураДанных.GrossWeightUOM = Лев(ТекСтрока, ПоложениеРазделителя - 1);
		
		ТекСтрока = Сред(ТекСтрока, ПоложениеРазделителя + 1);
		
		// Попробуем срезать строку до знака равно
		ПоложениеРазделителя = СтрНайти(ТекСтрока, "=");
		Если ПоложениеРазделителя <> 0 Тогда
			
			ТекСтрока = Сред(ТекСтрока, ПоложениеРазделителя + 1);
				
			// Получим вес Нетто до пробела
			ТекСтрока = СокрЛ(ТекСтрока);
			СтруктураДанных.NetWeight = ОтрезатьСлеваПоРазделителю(ТекСтрока, " ");
			
			// Получим единицу измерения веса нетто
			СтруктураДанных.NetWeightUOM = СокрЛП(ТекСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Функция ОтрезатьСлеваПоРазделителю(УсекаемаяСтрока, Разделитель)
	
	ПоложениеРазделителя = СтрНайти(УсекаемаяСтрока, Разделитель);
	ОтрезаннаяСтрока = Лев(УсекаемаяСтрока, ПоложениеРазделителя - 1);
	УсекаемаяСтрока = Сред(УсекаемаяСтрока, ПоложениеРазделителя + 1);
	
	Возврат ОтрезаннаяСтрока;
	
КонецФункции


// СОЗДАНИЕ ОБЪЕКТОВ БАЗЫ

&НаСервереБезКонтекста
Функция ЗагрузитьНовыйDOCИзСтруктуры(СтруктураШапки, Знач ТаблицаPieces, Знач ТаблицаParcels, Знач ТаблицаParcelLines, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("БылиНедочеты", Ложь);
	СтруктураВозврата.Вставить("БылиКритическиеОшибки", Ложь);
	СтруктураВозврата.Вставить("DOC", Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПустаяСсылка());
	
	Отказ = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Попытаемся найти действующий DOC с таким номером
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", СтруктураШапки.Номер);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DOCs.Ссылка
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК DOCs
		|ГДЕ
		|	DOCs.Номер = &Номер
		|	И (НЕ DOCs.Отменен)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is already ""DOC " + СтруктураШапки.Номер + """!",
			,,, СтруктураВозврата.БылиКритическиеОшибки);	
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	DOCОбъект = Документы.КонсолидированныйПакетЗаявокНаПеревозку.СоздатьДокумент();
	
	DOCОбъект.Заполнить(Неопределено);
	
	// No
	DOCОбъект.Номер = СтруктураШапки.Номер;
	
	// Date
	DOCОбъект.Дата = ImportExportСервер.ПолучитьДатуИзСтроки(СтруктураШапки.Дата);
	Если НЕ ЗначениеЗаполнено(DOCОбъект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Дата + """ to DOC date!
			|Using current date.",
			,,, СтруктураВозврата.БылиНедочеты);
		DOCОбъект.Дата = НачалоДня(ТекущаяДата());
	КонецЕсли;
									
	// Добавим в DOC Инвойсы
	ТаблицаНомеровDO = ТаблицаParcels.Выгрузить(,"DONo");
	ТаблицаНомеровDO.Свернуть("DONo");
	МассивНомеровDO = ТаблицаНомеровDO.ВыгрузитьКолонку("DONo"); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНомеровДО", МассивНомеровDO);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Инвойс.Ссылка КАК Invoice,
		|	Инвойс.НомерЗаявкиНаДоставку КАК DONumber
		|ИЗ
		|	Документ.Инвойс КАК Инвойс
		|ГДЕ
		|	Инвойс.НомерЗаявкиНаДоставку В(&МассивНомеровДО)
		|	И (НЕ Инвойс.Отменен)";
	ТаблицаInvoices = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыInvoices Из ТаблицаInvoices Цикл
		СтрокаТЧDOCInvoices = DOCОбъект.Инвойсы.Добавить();
		СтрокаТЧDOCInvoices.Инвойс = СтрокаТаблицыInvoices.Invoice;
	КонецЦикла;	
	
	// Инициализируем переменные для создания Parcels
	СтруктураПоискаParcelLines = Новый Структура("DONo, ParcelNo");
			
	ЗапросНаПоискParcel = Новый Запрос;
	ЗапросНаПоискParcel.Текст = 
		"ВЫБРАТЬ
		|	Parcels.Ссылка
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Код = &Код
		|	И (НЕ Parcels.Отменен)";
		
	// Создадим Parcels
	ТаблицаParcels.Сортировать("PieceNo, ParcelNo");
	СтруктураПоискаПоPieceNo = Новый Структура("PieceNo");
	ПредыдущийPieceNo = Неопределено;
	
	Для Каждого СтрокаТаблицыParcels Из ТаблицаParcels Цикл
		
		// Начался новый Piece, нужно конвертировать его данные
		Если СтрокаТаблицыParcels.PieceNo <> ПредыдущийPieceNo Тогда
			
			СтруктураПоискаПоPieceNo.PieceNo = СтрокаТаблицыParcels.PieceNo;
			СтрокаТаблицыPieces = ТаблицаPieces.НайтиСтроки(СтруктураПоискаПоPieceNo)[0];
			
			СтруктураДанныхPiece = ПолучитьСтруктуруДанныхPiece(СтрокаТаблицыPieces, СтруктураВозврата.БылиКритическиеОшибки, СтруктураВозврата.БылиНедочеты);	
			СтруктураДанныхPiece.Вставить("КоличествоParcels", ТаблицаParcels.НайтиСтроки(СтруктураПоискаПоPieceNo).Количество());
			СтруктураДанныхPiece.Вставить("ParcelsGrossWeight", 0);
			СтруктураДанныхPiece.Вставить("ParcelsNetWeight", 0);
			
			ПредыдущийPieceNo = СтрокаТаблицыParcels.PieceNo;
			
		КонецЕсли;
		
		// Найдем или создадим Parcel
		ParcelCode = СтрокаТаблицыParcels.DONo + "-" + СтрокаТаблицыParcels.ParcelNo;
		
		ЗапросНаПоискParcel.УстановитьПараметр("Код", ParcelCode);			
		Выборка = ЗапросНаПоискParcel.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ParcelОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ParcelОбъект.Детали.Очистить();
		Иначе
			ParcelОбъект = Справочники.Parcels.СоздатьЭлемент();
		КонецЕсли;
		
		// Заполним шапку Parcel
		ParcelОбъект.Код = ParcelCode;	
		
		ЗаполнитьШапкуParcel(ParcelОбъект, СтрокаТаблицыParcels, СтруктураДанныхPiece, СтруктураВозврата.БылиКритическиеОшибки, СтруктураВозврата.БылиНедочеты);
		
		СтруктураДанныхPiece.ParcelsGrossWeight = СтруктураДанныхPiece.ParcelsGrossWeight + ParcelОбъект.GrossWeight;
		СтруктураДанныхPiece.ParcelsNetWeight = СтруктураДанныхPiece.ParcelsNetWeight + ParcelОбъект.NetWeight;
		
		// Определим, является ли этот Parcel последним в Piece.
		НомерСтроки = ТаблицаParcels.Индекс(СтрокаТаблицыParcels) + 1;
		ЭтоКонецPiece = НомерСтроки = ТаблицаParcels.Количество() ИЛИ СтруктураДанныхPiece.КоличествоParcels = 1;
		
		// Если это последний Parcel - сверим веса по писа и веса его парселей
		Если ЭтоКонецPiece Тогда
			
			РазницаGrossWeight = СтруктураДанныхPiece.GrossWeight - СтруктураДанныхPiece.ParcelsGrossWeight;
			Если РазницаGrossWeight > 1 ИЛИ РазницаGrossWeight < -1 Тогда
				Сообщить("Gross weight " + СтруктураДанныхPiece.GrossWeight + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from gross weight " + СтруктураДанныхPiece.ParcelsGrossWeight + " of parcels!");
				СтруктураВозврата.БылиНедочеты = Истина;
			КонецЕсли;
			
			РазницаNetWeight = СтруктураДанныхPiece.NetWeight - СтруктураДанныхPiece.ParcelsNetWeight;
			Если РазницаNetWeight > 1 ИЛИ РазницаNetWeight < -1 Тогда
				Сообщить("Net weight " + СтруктураДанныхPiece.NetWeight + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from net weight " + СтруктураДанныхPiece.ParcelsNetWeight + " of parcels!");
				СтруктураВозврата.БылиНедочеты = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
		Если СтруктураВозврата.БылиКритическиеОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим Parcel lines
		СтруктураПоискаParcelLines.DONo = СтрокаТаблицыParcels.DONo;
		СтруктураПоискаParcelLines.ParcelNo = СтрокаТаблицыParcels.ParcelNo;
		СтрокиТаблицыParcelLines = ТаблицаParcelLines.НайтиСтроки(СтруктураПоискаParcelLines);
		Для Каждого СтрокаТаблицыParcelLines Из СтрокиТаблицыParcelLines Цикл
	
			СтрокаТЧParcelДетали = ParcelОбъект.Детали.Добавить();
			
			ЗаполнитьСтрокуParcel(СтрокаТЧParcelДетали, СтрокаТаблицыParcelLines, ParcelОбъект, СтруктураВозврата.БылиКритическиеОшибки, СтруктураВозврата.БылиНедочеты);
			
		КонецЦикла; // Заполнение ТЧ Parcel
		
		// Если при заполнении шапки вес нетто определить не удалось - возьмем его из ТЧ
		Если НЕ ЗначениеЗаполнено(ParcelОбъект.NetWeight) Тогда
			
			ParcelОбъект.NetWeight = ParcelОбъект.Детали.Итог("NetWeight");
			
			// Если все равно заполнить не удалось - умножим вес брутто на 0.95
			Если НЕ ЗначениеЗаполнено(ParcelОбъект.NetWeight) Тогда
				ParcelОбъект.NetWeight = ParcelОбъект.GrossWeight * 0.95;
			КонецЕсли;
			
		КонецЕсли;
		
		// Сохраним парсель
		Если НЕ СтруктураВозврата.БылиКритическиеОшибки Тогда
			
			Попытка
				ParcelОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to save ""Parcel " + ParcelCode + """!
					|See errors above.
					|" + ОписаниеОшибки(),
					,,, СтруктураВозврата.БылиКритическиеОшибки);
			КонецПопытки;
			
		КонецЕсли;
		
		// Добавим парсель в DOC
		НоваяСтрокаDOCParcels = DOCОбъект.Parcels.Добавить();
		НоваяСтрокаDOCParcels.Parcel = ParcelОбъект.Ссылка;
	
	КонецЦикла; // Создание Parcels
	
	Если СтруктураВозврата.БылиКритическиеОшибки Тогда
		ОтменитьТранзакцию();
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Сохраним DOC
	Попытка
		DOCОбъект.Записать();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save ""DOC #" + СтруктураШапки.Номер + """!
			|See errors.
			|" + ОписаниеОшибки(),
			,,, СтруктураВозврата.БылиКритическиеОшибки);
		Возврат СтруктураВозврата;
	КонецПопытки;
		
	ЗафиксироватьТранзакцию();
	
	СтруктураВозврата.DOC = DOCОбъект.Ссылка;
		
	// Прикрепим файл	
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	Попытка
		ПрисоединенныеФайлы.ДобавитьФайл(
			DOCОбъект.Ссылка,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ТекущаяДата(),
			УниверсальноеВремяИзменения,
			АдресФайла);		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to attach file to """ + DOCОбъект + "!
			|You should do it manually!
			|" + ОписаниеОшибки(),
			,,, СтруктураВозврата.БылиНедочеты);
	КонецПопытки;
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.DOCЗагрузка, DOCОбъект.Ссылка);

	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхPiece(ТекстовыеДанные, БылиКритическиеОшибки, БылиНедочеты)
	
	СтруктураДанныхPiece = Новый Структура("PieceNo, Length, Width, Height, DimsUOM, GrossWeight, GrossWeightUOM, NetWeight, NetWeightUOM");
	
	СтруктураДанныхPiece.PieceNo = ТекстовыеДанные.PieceNo;
	
	// Piece length
	Если ЗначениеЗаполнено(ТекстовыеДанные.Length) Тогда
		
		Попытка
			СтруктураДанныхPiece.Length = Число(ТекстовыеДанные.Length);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Length + """ to Length of Piece " + СтруктураДанныхPiece.PieceNo + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	Иначе
		
		СтруктураДанныхPiece.Length = 0;
		Сообщить("Failed to find Length of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece width
	Если ЗначениеЗаполнено(ТекстовыеДанные.Width) Тогда
		
		Попытка
			СтруктураДанныхPiece.Width = Число(ТекстовыеДанные.Width);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Width + """ to Width of Piece " + СтруктураДанныхPiece.PieceNo + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	Иначе
		
		СтруктураДанныхPiece.Width = 0;
		Сообщить("Failed to find Width of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece height
	Если ЗначениеЗаполнено(ТекстовыеДанные.Height) Тогда
		
		Попытка
			СтруктураДанныхPiece.Height = Число(ТекстовыеДанные.Height);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Height + """ to Height of Piece " + СтруктураДанныхPiece.PieceNo + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	Иначе
		
		СтруктураДанныхPiece.Height = 0;
		Сообщить("Failed to find Height of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece Dims UOM
	Если ЗначениеЗаполнено(ТекстовыеДанные.DimsUOM) Тогда
		
		СтруктураДанныхPiece.DimsUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.DimsUOM);
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхPiece.DimsUOM) Тогда
			Сообщить("Failed to find Dims UOM by code """ + ТекстовыеДанные.DimsUOM + """!");
			БылиНедочеты = Истина;
		КонецЕсли;
		
	Иначе
		
		Сообщить("Failed to find Dims UOM of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece Gross weight
	Если ЗначениеЗаполнено(ТекстовыеДанные.GrossWeight) Тогда
		
		Попытка
			СтруктураДанныхPiece.GrossWeight = Число(ТекстовыеДанные.GrossWeight);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.GrossWeight + """ to Gross weight of Piece " + СтруктураДанныхPiece.PieceNo + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
			
	Иначе
		
		СтруктураДанныхPiece.GrossWeight = 0;
		Сообщить("Failed to find Gross weight of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece Gross weight UOM
	Если ЗначениеЗаполнено(ТекстовыеДанные.GrossWeightUOM) Тогда
		
		СтруктураДанныхPiece.GrossWeightUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.GrossWeightUOM);
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхPiece.GrossWeightUOM) Тогда
			Сообщить("Failed to find Weight UOM by code """ + ТекстовыеДанные.GrossWeightUOM + """!");
			БылиНедочеты = Истина;
		КонецЕсли;
		
	Иначе
		
		Сообщить("Failed to find Gross weight UOM of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece Net weight
	Если ЗначениеЗаполнено(ТекстовыеДанные.NetWeight) Тогда
	
		Попытка
			СтруктураДанныхPiece.NetWeight = Число(ТекстовыеДанные.NetWeight);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.NetWeight + """ to Net weight of Piece " + СтруктураДанныхPiece.PieceNo + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	Иначе
		
		СтруктураДанныхPiece.NetWeight = 0;
		Сообщить("Failed to find Net weight of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece Net weight UOM
	Если ЗначениеЗаполнено(ТекстовыеДанные.NetWeightUOM) Тогда
		
		СтруктураДанныхPiece.NetWeightUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.NetWeightUOM);
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхPiece.NetWeightUOM) Тогда
			Сообщить("Failed to find Weight UOM by code """ + ТекстовыеДанные.NetWeightUOM + """!");
			БылиНедочеты = Истина;
		КонецЕсли;
		
	Иначе
		
		Сообщить("Failed to find Net weigth UOM of Piece " + СтруктураДанныхPiece.PieceNo + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Piece weight UOM
	Если ЗначениеЗаполнено(СтруктураДанныхPiece.GrossWeightUOM) И ЗначениеЗаполнено(СтруктураДанныхPiece.NetWeightUOM)
		И СтруктураДанныхPiece.GrossWeightUOM <> СтруктураДанныхPiece.NetWeightUOM Тогда
		
		Сообщить("Net weight UOM """ + СтруктураДанныхPiece.NetWeightUOM + """ of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Gross weight UOM """ + СтруктураДанныхPiece.GrossWeightUOM + """!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхPiece;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьШапкуParcel(ParcelОбъект, ТекстовыеДанные, СтруктураДанныхPiece, БылиКритическиеОшибки, БылиНедочеты)
	
	ParcelCode = СокрЛП(ParcelОбъект.Код);
	ParcelОбъект.DONo = ТекстовыеДанные.DONo;		
	ParcelОбъект.NumOfParcels = 1;
	ParcelОбъект.PackingType = Справочники.PackingTypes.НайтиПоКоду(ТекстовыеДанные.PackingType);
	Если НЕ ЗначениеЗаполнено(ParcelОбъект.PackingType) Тогда
		ParcelОбъект.PackingType = Справочники.PackingTypes.СоздатьНовыйPackingType(ТекстовыеДанные.PackingType);
	КонецЕсли;
	
	// Length
	Если ЗначениеЗаполнено(ТекстовыеДанные.Length) Тогда
		
		Попытка
			ParcelОбъект.Length = Число(ТекстовыеДанные.Length);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Length + """ to Length of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
		Если СтруктураДанныхPiece.КоличествоParcels = 1
			И ЗначениеЗаполнено(ParcelОбъект.Length)
			И ЗначениеЗаполнено(СтруктураДанныхPiece.Length) Тогда
			
			РазницаLength = СтруктураДанныхPiece.Length - ParcelОбъект.Length;
			Если РазницаLength > 1 ИЛИ РазницаLength < -1 Тогда
				Сообщить("Length " + СтруктураДанныхPiece.Length + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Length " + ParcelОбъект.Length + " of Parcel " + ParcelCode + "!");
				БылиКритическиеОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.Length = СтруктураДанныхPiece.Length;
		
	Иначе
		
		Сообщить("Failed to find Length of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
		
	// Width
	Если ЗначениеЗаполнено(ТекстовыеДанные.Width) Тогда
		
		Попытка
			ParcelОбъект.Width = Число(ТекстовыеДанные.Width);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Width + """ to Width of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
		Если СтруктураДанныхPiece.КоличествоParcels = 1
			И ЗначениеЗаполнено(ParcelОбъект.Width)
			И ЗначениеЗаполнено(СтруктураДанныхPiece.Width) Тогда
			
			РазницаWidth = СтруктураДанныхPiece.Width - ParcelОбъект.Width;
			Если РазницаWidth > 1 ИЛИ РазницаWidth < -1 Тогда
				Сообщить("Width " + СтруктураДанныхPiece.Width + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Width " + ParcelОбъект.Width + " of Parcel " + ParcelCode + "!");
				БылиКритическиеОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.Width = СтруктураДанныхPiece.Width;
		
	Иначе
		
		Сообщить("Failed to find Width of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
		
	// Height
	Если ЗначениеЗаполнено(ТекстовыеДанные.Height) Тогда
		
		Попытка
			ParcelОбъект.Height = Число(ТекстовыеДанные.Height);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.Height + """ to Height of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
		Если СтруктураДанныхPiece.КоличествоParcels = 1
			И ЗначениеЗаполнено(ParcelОбъект.Height)
			И ЗначениеЗаполнено(СтруктураДанныхPiece.Height) Тогда
			
			РазницаHeight = СтруктураДанныхPiece.Height - ParcelОбъект.Height;
			Если РазницаHeight > 1 ИЛИ РазницаHeight < -1 Тогда
				Сообщить("Height " + СтруктураДанныхPiece.Height + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Height " + ParcelОбъект.Height + " of Parcel " + ParcelCode + "!");
				БылиКритическиеОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.Height = СтруктураДанныхPiece.Height;
		
	Иначе
		
		Сообщить("Failed to find Height of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
		
	// DIMs UOM
	Если ЗначениеЗаполнено(ТекстовыеДанные.DimsUOM) Тогда
		
		ParcelОбъект.DimsUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.DimsUOM);
		Если НЕ ЗначениеЗаполнено(ParcelОбъект.DimsUOM) Тогда
			Сообщить("Failed to find Dims UOM by code """ + ТекстовыеДанные.DimsUOM + """!");
			БылиНедочеты = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ParcelОбъект.DimsUOM)
			И ЗначениеЗаполнено(СтруктураДанныхPiece.DimsUOM)
			И ParcelОбъект.DIMsUOM <> СтруктураДанныхPiece.DIMsUOM Тогда
			
			Сообщить("Dims UOM " + СтруктураДанныхPiece.DimsUOM + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Dim UOM " + ParcelОбъект.DimsUOM + " of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.DimsUOM = СтруктураДанныхPiece.DimsUOM;
		
	Иначе
			
		Сообщить("Failed to find Dims UOM of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Gross weight
	Если ЗначениеЗаполнено(ТекстовыеДанные.GrossWeight) Тогда
		
		Попытка
			ParcelОбъект.GrossWeight = Число(ТекстовыеДанные.GrossWeight);
		Исключение
			Сообщить("Failed to convert """ + ТекстовыеДанные.GrossWeight + """ to Gross weight of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.GrossWeight = СтруктураДанныхPiece.GrossWeight;
		
	Иначе
		
		Сообщить("Failed to find Gross weight of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
	
	// Weight UOM
	Если ЗначениеЗаполнено(ТекстовыеДанные.WeightUOM) Тогда
		
		ParcelОбъект.WeightUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.WeightUOM);
		Если НЕ ЗначениеЗаполнено(ParcelОбъект.WeightUOM) Тогда
			Сообщить("Failed to find Weight UOM by code """ + ТекстовыеДанные.WeightUOM + """!");
			БылиНедочеты = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ParcelОбъект.WeightUOM)
			И ЗначениеЗаполнено(СтруктураДанныхPiece.GrossWeightUOM)
			И ParcelОбъект.WeightUOM <> СтруктураДанныхPiece.GrossWeightUOM Тогда
			
			Сообщить("Weight UOM " + СтруктураДанныхPiece.GrossWeightUOM + " of Piece " + СтруктураДанныхPiece.PieceNo + " differs from Weight UOM " + ParcelОбъект.WeightUOM + " of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДанныхPiece.КоличествоParcels = 1 Тогда
		
		ParcelОбъект.WeightUOM = СтруктураДанныхPiece.GrossWeightUOM;
		
	Иначе
		
		Сообщить("Failed to find Weight UOM of Parcel " + ParcelCode + "!");
		БылиКритическиеОшибки = Истина;
		
	КонецЕсли;
		
	// Net weight
	// Если Parcel единственный, то Net weight можно взять прямо из Piece
	Если СтруктураДанныхPiece.КоличествоParcels = 1 Тогда	
		ParcelОбъект.NetWeight = СтруктураДанныхPiece.NetWeight;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуParcel(СтрокаParcel, ТекстовыеДанные, ParcelОбъект, БылиКритическиеОшибки, БылиНедочеты)
	
	ParcelCode = СокрЛП(ParcelОбъект.Код);
	
	QtyСтрока = СтрЗаменить(ТекстовыеДанные.Qty, ",", "");
	Попытка
		СтрокаParcel.Qty = Число(QtyСтрока);
	Исключение
		Сообщить("Failed to convert """ + QtyСтрока + """ to Qty of Parcel " + ParcelCode + """!");
		БылиНедочеты = Истина;
	КонецПопытки;
	
	СтрокаParcel.QtyUOM = CustomsСерверПовтИсп.ПолучитьUOMПоКоду(ТекстовыеДанные.QtyUOM);
	Если НЕ ЗначениеЗаполнено(СтрокаParcel.QtyUOM) Тогда
		Сообщить("Failed to find Qty UOM by code """ + ТекстовыеДанные.QtyUOM + """ in Parcel " + ParcelCode + "!");
		БылиНедочеты = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстовыеДанные.NetWeight) Тогда
		
		NetWeightСтрока = СтрЗаменить(ТекстовыеДанные.NetWeight, ",", "");
		Попытка
			СтрокаParcel.NetWeight = Число(NetWeightСтрока);
		Исключение
			Сообщить("Failed to convert """ + NetWeightСтрока + """ to Net weight of Parcel " + ParcelCode + "!");
			БылиКритическиеОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаParcel.НомерЗаявкиНаЗакупку = ТекстовыеДанные.PO;
	
	Попытка
		СтрокаParcel.СтрокаЗаявкиНаЗакупку = Число(ТекстовыеДанные.POLine);
	Исключение
		Сообщить("Failed to convert """ + ТекстовыеДанные.POLine + """ to PO line no. of Parcel " + ParcelCode + "!");
		БылиНедочеты = Истина;
	КонецПопытки;
	
	СтрокаParcel.Receiver = ТекстовыеДанные.Receiver;
	СтрокаParcel.СерийныйНомер = ТекстовыеДанные.Serial;
	
	КоличествоНайденныхItems = Справочники.Parcels.ЗаполнитьInvoiceLineВParcelLine(СтрокаParcel, ParcelОбъект.DONo, ParcelОбъект.LocalOnly, ParcelОбъект.ExportRequest, ParcelОбъект.TransportRequest, ParcelОбъект.Ссылка, ParcelОбъект.Детали);	
	Если КоличествоНайденныхItems = 0 Тогда
		
		Сообщить("Failed to find Invoice item for Parcel " + ParcelCode + " line " + СтрокаParcel.НомерСтроки + "!
			|Try to select Item line manually.");
		БылиНедочеты = Истина;
			
	ИначеЕсли КоличествоНайденныхItems > 1 Тогда 
		
		Сообщить("Found several Invoice items for Parcel " + ParcelCode + " line " + СтрокаParcel.НомерСтроки + "!
			|Try to select Item line manually.");
		БылиНедочеты = Истина;
			
	КонецЕсли;
	
КонецПроцедуры


