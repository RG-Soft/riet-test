//&НаКлиенте
//Перем ЦветКнопкиОбщий;
//Перем ЦветКнопкиПометка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Функция проверяет заполнение настройки подключения
//
//  Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗаполнениеРеквизитов()
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Возврат Ложь;
   	Иначе
		Возврат Истина;
   	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура выполняет необходимые действия для обновления
//
Процедура ОбновитьТаблицуВопросовСервер()
	
	ТаблицаВопросов.Очистить();	
	
	Попытка
		
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ВопросыПользователя(Объект.ЗагружатьЗакрытыеОтмененныеВопросы, Объект.ТолькоМои, Объект.ГУИДТекПользователя, Объект.ИмяТекПользователя);//, ТолькоМои, Объект.ГУИДТекПользователя, Объект.ИмяТекПользователя);
		
		ТекстВопроса = "";
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Если СтрНайти(ТекстОшибки, "Аутентификация пользователя не выполнена")<>0 Тогда
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>пользователь с именем <EM>"+ 
													Объект.Пользователь +"</EM> не найден в базе данных ""Монитора сопровождения"" или пароль указан неверно!</FONT>");
		Иначе
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>"+ТекстОшибки+"</FONT>");
		КонецЕсли; 
		Возврат;
	КонецПопытки; 
		
	ТаблицаИзБазы = ЗначениеИзСтрокиВнутр(ИзБазы);
	ТаблицаВопросов.Загрузить(ТаблицаИзБазы);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоЗадачам", Истина);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
	ТЗ_ТаблицаВопросовЗадач = ТаблицаВопросов.Выгрузить(МассивСтрок);
	ТаблицаВопросовЗадач.Загрузить(ТЗ_ТаблицаВопросовЗадач);
	Если ТаблицаВопросовЗадач.Количество() > 0 Тогда
		Элементы.МоиЗадачи.Доступность = Истина;
	Иначе
		Элементы.МоиЗадачи.Доступность = Ложь;
	КонецЕсли;
		
	Если ОткрытыНепрочитанные Тогда
		//"активны" непрочитанные вопросы
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Непрочитан", 1);
		МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
		ТЗ_НепрочитанныеВопросы = ТаблицаВопросов.Выгрузить(МассивСтрок);
		ТаблицаВопросов.Загрузить(ТЗ_НепрочитанныеВопросы);
		Если ТаблицаВопросов.Количество() = 0 Тогда
			ТекстВопроса = "";
			Элементы.ОтправитьСообщение.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстХТМЛДляВывода(ТекстВвода)
	
	ТекстВовзрата = 
	"<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 9.00.8112.16437""></HEAD><BODY>"
	+ ТекстВвода + "<BR></BODY></HTML>";
	Возврат ТекстВовзрата;
	
КонецФункции
 
&НаСервере
// Функция скачивает с интернет ресурса программу AMMYY
//
//  Возвращаемое значение:
//   Строка - адресс во временном хранилище
//
Функция СкачатьЭмиНаСервере()
	
	ФайлЭми = РеквизитФормыВЗначение("Объект").ПолучитьМакет("AMMYY");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлЭми);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура получает данные для текста вопроса
//
Функция ПолучитьТекстОбсужденияВопроса(ГУИДВопроса, АдресБазы, Пользователь, Пароль, ПоказатьПолностью, ПравоЗакрытияТекВопроса, КодВопроса, ОтображатьКонтакты = Ложь)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl", Пользователь, Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Пользователь;
		Прокси.Пароль = Пароль;
		ПараметрВхода = Новый Структура;
		ПараметрВхода.Вставить("ГУИДВопроса", ГУИДВопроса);
		ПараметрВхода.Вставить("ПоказатьПолностью", ПоказатьПолностью);
		ТекстВопросаИзБазы = Прокси.ТекстВопроса(ЗначениеВСтрокуВнутр(ПараметрВхода), ПравоЗакрытияТекВопроса);
		ТекстВопроса = ТекстВопросаИзБазы;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если СтрНайти(ТекстОшибки, "Аутентификация пользователя не выполнена")<>0 Тогда
			ТекстВопроса = "<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>пользователь с именем <EM>" + 
				Пользователь + "</EM> не найден в базе данных ""Монитора сопровождения"" или пароль указан неверно!</FONT>";
		Иначе
			ТекстВопроса = "<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>"+ТекстОшибки+"</FONT>"; 
		КонецЕсли;
	КонецПопытки; 
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(АдресБазы, Пользователь, Пароль, ГУИДВопроса)
	
	Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl", Пользователь, Пароль);
	Прокси = ПолучитьПрокси(Определение);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль = Пароль;
	ТаблицаКИ.Загрузить(ЗначениеИзСтрокиВнутр(Прокси.ПолучитьТаблицуКИУчастниковОбсужденияВопроса(ГУИДВопроса)));
	
КонецПроцедуры

&НаСервере
// Процедура получает данные для текста вопроса
//
Функция ПолучитьПолныйТекстВопроса(ГУИДВопроса)
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		ПараметрВхода = Новый Структура;
		ПараметрВхода.Вставить("ГУИДВопроса", ГУИДВопроса);
		ПараметрВхода.Вставить("ПоказатьПолностью", Истина);
		ТекстВопросаИзБазы = Прокси.ТекстВопроса(ЗначениеВСтрокуВнутр(ПараметрВхода), ПравоЗакрытияТекВопроса);
	Исключение
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4><FONT color=#ff0000>Ошибка:</FONT><BR>"+ОписаниеОшибки()+"</FONT>");
		Возврат "";
	КонецПопытки; 
	
	Возврат ТекстВопросаИзБазы;
	
КонецФункции

&НаКлиенте
// Процедура обновляет таблицу вопросов
//
Процедура ОбновитьТаблицуВопросов()
	
	Состояние(,,"Выполняется обновление списка вопросов..", АдресКартинки2);
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.НовоеСообщение Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Группа7;
	КонецЕсли;	
	
   	ОбновитьТаблицуВопросовСервер();
	ВосстановитьТекСтроку();
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.Группа7 Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.НовоеСообщение;
	КонецЕсли;	
	
	// Обновим/заполним реквизиты
	Для Каждого Строка Из ТаблицаВопросовЗадач Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ГУИДЗадачи",Строка.ГУИДЗадачи);
		МассивСтрок = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаСРеквизитами = Объект.РасшифровкаЗадач.Добавить();
			СтрокаСРеквизитами.ГУИДЗадачи = Строка.ГУИДЗадачи;
			СтрокаСРеквизитами.ВидЗадачи = Строка.ВидЗадачи;
			СтрокаСРеквизитами.ГУИДВидаЗадачи = Строка.ГУИДВидаЗадачи;
		КонецЕсли;
	КонецЦикла;
	
	Состояние(,,"Обновление списка вопросов завершено", АдресКартинки2);

КонецПроцедуры

&НаКлиенте
// Процедура активирует текущую строку таблицы вопросов
//
Процедура ВосстановитьТекСтроку()
	
	Структура = Новый Структура;
	Структура.Вставить("ГУИДВопроса", мТекСтрокаГУИД);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(Структура);
	
	Если МассивСтрок.Количество() = 0  Тогда
		НомерСтроки = Неопределено;
	Иначе
		НомерСтроки = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	Элементы.ТаблицаВопросов.ТекущаяСтрока = НомерСтроки;
	
	Если НомерСтроки <> Неопределено Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
		ТекстВопроса = ПолучитьТекстОбсужденияВопроса(ТекДанные.ГУИДВопроса, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль,
		Объект.ПоказатьПолностью, ПравоЗакрытияТекВопроса, ТекДанные.Код);
		Если Объект.ОтображатьКонтакты Тогда
			ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ТекДанные.ГУИДВопроса);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет необходимые действия для добавления сообщения в вопрос
//
Процедура ДобавитьКВопросуКлиент(Элемент)
	
	Структура = Новый Структура;
	Структура.Вставить("Пользователь", Объект.Пользователь);
	Структура.Вставить("Пароль", Объект.Пароль);
	Структура.Вставить("АдресБазы", Объект.АдресБазы);
	Структура.Вставить("ГУИДВопроса", Элемент.ТекущиеДанные.ГУИДВопроса);
	Структура.Вставить("КодВопроса", Элемент.ТекущиеДанные.Код);
	Структура.Вставить("Проект", Элемент.ТекущиеДанные.Проект);
	Структура.Вставить("ТемаВопроса", Элемент.ТекущиеДанные.Ссылка);
	Структура.Вставить("ДатаВопроса", Элемент.ТекущиеДанные.ДатаВопроса);
	Структура.Вставить("ПравоЗакрытияТекВопроса", ПравоЗакрытияТекВопроса);
	Структура.Вставить("ГУИДТекПользователя", Объект.ГУИДТекПользователя);
	Структура.Вставить("АвторВопроса", Элемент.ТекущиеДанные.АвторВопроса);
    Структура.Вставить("Приоритет", Элемент.ТекущиеДанные.Приоритет);
    Структура.Вставить("ТребуемаяДатаОтвета", Элемент.ТекущиеДанные.ТребуемаяДатаОтвета);
	Структура.Вставить("ТекстФорума", ПолучитьПолныйТекстВопроса(Элемент.ТекущиеДанные.ГУИДВопроса));
	Структура.Вставить("ВозможноДобавлениеСообщений", Элемент.ТекущиеДанные.КартинкаСтатусаВопроса);
	Структура.Вставить("КартинкаСтатусаВопроса", Элемент.ТекущиеДанные.КартинкаСтатусаВопроса);
	Структура.Вставить("НадписьСтатусаВопроса", Элемент.ТекущиеДанные.СтатусВопроса);
	Структура.Вставить("НеПрочитан", Элемент.ТекущиеДанные.Непрочитан);
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаДобавленияСообщения", Структура, ЭтаФорма, Элемент.ТекущиеДанные.ГУИДВопроса);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаДобавленияСообщения", Структура, ЭтаФорма, Элемент.ТекущиеДанные.ГУИДВопроса);
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
// Функция возвращает результат закрытия вопроса
//
Функция ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса)
	
	ОбъектБаза = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектБаза.ЗавершитьОбсуждениеВопросаСервер(ГУИДВопроса);
	Возврат Результат;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	АдресКартинки1 = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Объект").ПолучитьМакет("КартинкаПрелоадера1"), Новый УникальныйИдентификатор);
	АдресКартинки2 = Новый Картинка(РеквизитФормыВЗначение("Объект").ПолучитьМакет("КартинкаПрелоадера2"));
	
	ОбъектРеквизит = РеквизитФормыВЗначение("Объект");
	Иконка_Кнопки_Галочка = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Галочка");
	Иконка_Кнопки_Домик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Домик");
	Иконка_Кнопки_Крестик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Крестик");
	Иконка_Кнопки_Крестик_Щит = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Крестик_Щит");
	Иконка_Кнопки_Смайлик = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Смайлик");
	Иконка_Кнопки_Стрелочка = ОбъектРеквизит.ПолучитьМакет("Иконка_Кнопки_Стрелочка");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии(Отказ)
	
	//Попытка
	//	Выполнить("Абракадабра");	
	//Исключение
	//	Сообщить("Отладка");
	//КонецПопытки;
	
	// Первое открытие
	Если Не ЗначениеЗаполнено(Объект.АдресБазы) Тогда
		// в этот параметр необходимо вписать адрес рабочей базы монитора
		// -----пример: Объект.АдресБазы = "http://89.188.108.154:6448/Monitor30"------
		Объект.АдресБазы = "http://89.188.108.154:6448/Monitor30";
		Объект.ТолькоМои = Истина;
		Объект.ПоказатьПолностью = Истина;
		Объект.ОтображатьКонтакты = Ложь;
		Объект.ОтображатьТекстВопросаСЗадержкой = Истина;
		Объект.ИспользоватьПомощник = Истина;
		Объект.ВремяОбновленияТекстаВопроса = 0.8;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Объект.ОбновлятьАвтоматически = Ложь;
		Объект.ВремяОбновления = 60;
		Объект.ОтображатьТекстВопросаСЗадержкой = Истина;
		Объект.ВремяОбновленияТекстаВопроса = 0.8;
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("<FONT size=4>Не заполнено имя пользователя! 
		|<BR>(для ввода имени пользователя и пароля используйте команду <FONT color=#536ac2><U>Настройки</U></FONT>)</FONT>");
		ОткрытьФормуНастроек();	  
	КонецЕсли; 
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Если Объект.ОбновлятьАвтоматически Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов", Объект.ВремяОбновления);
		Иначе 
			ОбновитьТаблицуВопросов();
		КонецЕсли;
		ПодключитьОбработчикОжидания("ПроизвестиЗагрузкуНеобходимыхДанных",1,Истина);
	КонецЕсли;
	
	Элементы.ТаблицаКИ.Видимость = Объект.ОтображатьКонтакты;
	ЭтаФорма.Заголовок = "Монитор сопровождения " + Формат(ТекущаяДата(), "ДФ='dd ММММ yyyy'") + " г." + ?(ЗначениеЗаполнено(НомерВерсии), " Версия: " + НомерВерсии , "");

	ПодключитьОбработчикОжидания("НарисоватьКнопкиПоУмолчаниюКлиент", 1, Истина);
	//НарисоватьКнопкиПоУмолчанию();	
	Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(244,236,197);
	Попытка
		Элементы.НовоеСообщение.ПодсказкаВВода = "Введите текст сообщения...";
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НужноОбновитьСписокВопросов" Тогда
		ОбновитьТаблицуВопросов();
	ИначеЕсли ИмяСобытия = "ОтключитьПомощникСозданияВопроса" Тогда
		Объект.ИспользоватьПомощник = Ложь;
	ИначеЕсли ИмяСобытия = "ВопросОкЗавершение" Тогда
		Результат = ЗавершитьОбсуждениеВопросаСервер(Параметр);
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
			Структура = Новый Структура;
			Структура.Вставить("ТекстПредупреждения",Результат);
			Попытка
				ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
			Исключение
				ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
			КонецПопытки; 
			Возврат;
		Иначе
			ПоказатьОповещениеПользователя(,,  Символы.ПС + "Вопрос " + Элементы.ТаблицаВопросов.ТекущиеДанные.Ссылка + " закрыт", );
			ОбновитьТаблицуВопросовСервер();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НастройкиИзменены" Тогда
		СтруктураВозврата = Параметр;
		Объект.ТолькоМои = СтруктураВозврата.ТолькоМои;
		Объект.ПоказатьПолностью = СтруктураВозврата.ПоказатьПолностью;
		Если НЕ Объект.ОтображатьКонтакты = СтруктураВозврата.ОтображатьКонтакты Тогда
			Объект.ОтображатьКонтакты = СтруктураВозврата.ОтображатьКонтакты;
			ОтображатьКонтактыПриИзменении(Неопределено);
		КонецЕсли;
		Объект.ИспользоватьПомощник = СтруктураВозврата.ИспользоватьПомощник;
		Если НЕ Объект.Пользователь = СтруктураВозврата.Пользователь Тогда
			Объект.Пользователь = СтруктураВозврата.Пользователь;
			ПодключитьОбработчикОжидания("ПроизвестиЗагрузкуНеобходимыхДанных",1,Истина);
		КонецЕсли;
		
		Объект.Пароль = СтруктураВозврата.Пароль;
		Объект.АдресБазы = СтруктураВозврата.АдресБазы;
		Объект.ЗагружатьЗакрытыеОтмененныеВопросы = СтруктураВозврата.ЗагружатьЗакрытыеОтмененныеВопросы;
		Если СтруктураВозврата.ОбновлятьАвтоматически Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов", СтруктураВозврата.ВремяОбновления);
		Иначе
			ОтключитьОбработчикОжидания("ОбновитьТаблицуВопросов");
		КонецЕсли; 
		Объект.ОбновлятьАвтоматически = СтруктураВозврата.ОбновлятьАвтоматически;
		Объект.ВремяОбновления = СтруктураВозврата.ВремяОбновления;
		Объект.ОтображатьТекстВопросаСЗадержкой = СтруктураВозврата.ОтображатьТекстВопросаСЗадержкой;
		Объект.ВремяОбновленияТекстаВопроса = СтруктураВозврата.ВремяОбновленияТекстаВопроса;
		
		Если ПроверитьЗаполнениеРеквизитов() Тогда
			ПодключитьОбработчикОжидания("ОбновитьТаблицуВопросов",1, Истина);
		КонецЕсли; 
	ИначеЕсли ИмяСобытия = "ПроверкаОрфографииСообщения" Тогда
		УстановитьПравильноеХТМЛ(Параметр);
	ИначеЕсли ИмяСобытия = "СкачиваетсяНоваяВерсияОбработки" Тогда
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
// Процедура запускает сервисные механизмы обновления таблицы вопросов
//
Процедура Обновить(Команда)
	
	Если Не ПроверитьЗаполнениеРеквизитов()	Тогда
		Возврат;	
	КонецЕсли;
	ОбновитьТаблицуВопросов();	
	
КонецПроцедуры
 
&НаКлиенте
// Процедура запускает сервисные манизмы заврешения обсуждения
//
Процедура ЗавершитьОбсуждение(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТаблицаВопросов.ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = "Необходимо активизировать вопрос в таблице вопросов!";
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ТаблицаВопросов.ТекущиеДанные.КартинкаСтатусаВопроса = 3 Тогда
		ТекстПредупреждения = "Обсуждение данного вопроса уже завершено!";
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли;
	
	Если Не ПравоЗакрытияТекВопроса Тогда
		ТекстПредупреждения = "Вы не можете завершить обсуждение данного вопроса," + Символы.ПС + "т.к. не являетесь в нем спрашивающим!";
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",ТекстПредупреждения);
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		КонецПопытки; 
		
		Возврат;
	КонецЕсли; 
	
	Ответ = Неопределено;
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные; 
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	ТекстДляВопроса = "После выполнения данной операции добавление новых сообщений в вопрос будет невозможно! Продолжить?";
	Структура = Новый Структура;
	Структура.Вставить("ТекстВопроса",ТекстДляВопроса);
	Структура.Вставить("РежимВопроса","ОкОтмена");
	Структура.Вставить("ГУИДВопроса",ТекДанные.ГУИДВопроса);
	Структура.Вставить("ИмяСобытия","ЗавершениеВопроса");
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаВопроса", Структура, ЭтаФорма);
	КонецПопытки; 
	 
КонецПроцедуры

&НаКлиенте
// Процедура открывает окно
//
Процедура Настройки(Команда)
	
	ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек()

	Структура = Новый Структура;
	Структура.Вставить("Пользователь",								Объект.Пользователь);
	Структура.Вставить("Пароль", 									Объект.Пароль);
	Структура.Вставить("АдресБазы",									Объект.АдресБазы);
	Структура.Вставить("ЗагружатьЗакрытыеОтмененныеВопросы",		Объект.ЗагружатьЗакрытыеОтмененныеВопросы);
	Структура.Вставить("ОбновлятьАвтоматически",					Объект.ОбновлятьАвтоматически);
	Структура.Вставить("ВремяОбновления",							Объект.ВремяОбновления);
	Структура.Вставить("ОтображатьТекстВопросаСЗадержкой",			Объект.ОтображатьТекстВопросаСЗадержкой);
    Структура.Вставить("ВремяОбновленияТекстаВопроса",				Объект.ВремяОбновленияТекстаВопроса);
	Структура.Вставить("ТолькоМои",									Объект.ТолькоМои);
	Структура.Вставить("ПоказатьПолностью",							Объект.ПоказатьПолностью);
	Структура.Вставить("ОтображатьКонтакты",						Объект.ОтображатьКонтакты);
	Структура.Вставить("ИспользоватьПомощник",						Объект.ИспользоватьПомощник);
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаНастройки", Структура, ЭтаФорма);
	Исключение
		Сообщить(ОписаниеОшибки());
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаНастройки", Структура, ЭтаФорма);
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает сервисные механизмы обновления таблицы вопросов
//
Процедура ПерейтиВМонитор(Команда)
	
	Если Не ПроверитьЗаполнениеРеквизитов()	Тогда
		Возврат;	
	КонецЕсли;
	ЗапуститьПриложение(Объект.АдресБазы + "?&N=" + Объект.Пользователь + "&P=" + Объект.Пароль);
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает интерфейс скачивания программы AMMYY
//
Процедура СкачатьAmmyyAdmin(Команда)
	
	АдресВоВременномХранилище = СкачатьЭмиНаСервере();
   	Результат = ПолучитьФайл(АдресВоВременномХранилище,"AMMYY.exe",Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает сервисные механизмы создания нового вопроса
//
Процедура ЗадатьВопрос(Команда)
	
	Если Объект.ИспользоватьПомощник Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Пользователь", Объект.Пользователь);
		Структура.Вставить("Пароль", Объект.Пароль);
		Структура.Вставить("АдресБазы", Объект.АдресБазы);
		Структура.Вставить("Объект", Объект);
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПомощникаВводаВопроса", Структура, ЭтаФорма);
		Исключение
			Сообщить(ОписаниеОшибки());
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПомощникаВводаВопроса", Структура, ЭтаФорма);
		КонецПопытки; 
		
	Иначе
		
		Структура = Новый Структура;
		Структура.Вставить("Пользователь", Объект.Пользователь);
		Структура.Вставить("Пароль", Объект.Пароль);
		Структура.Вставить("АдресБазы", Объект.АдресБазы);
		Структура.Вставить("Объект", Объект);
		
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаНовогоВопроса", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаНовогоВопроса", Структура, ЭтаФорма);
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗагрузкуНеобходимыхДанных()
	
	ПроизвестиЗагрузкуНеобходимыхДанныхНаСервере();	
	ЭтаФорма.Заголовок = "Монитор сопровождения " + Формат(ТекущаяДата(), "ДФ='dd ММММ yyyy'") + " г." + ?(ЗначениеЗаполнено(НомерВерсии), " Версия: " + НомерВерсии , "");	

	Если НЕ ВерсияАктуальная Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СсылкаНаСкачивание", СсылкаНаСкачивание);
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаКонтроляВерсий", СтруктураПараметров, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаКонтроляВерсий", СтруктураПараметров, ЭтаФорма);
		КонецПопытки; 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиЗагрузкуНеобходимыхДанныхНаСервере()
	
	// Получим список доступных проектов и доступных пользователей по ним
	Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
	Прокси = ПолучитьПрокси(Определение);
	Прокси.Пользователь = Объект.Пользователь;
	Прокси.Пароль = Объект.Пароль;
	Объект.СписокПроектовИПользователей.Загрузить(ЗначениеИзСтрокиВнутр(Прокси.СписокПроектовИПользователей()));
	
	Комментарий = РеквизитФормыВЗначение("Объект").Метаданные().Комментарий;
	Номер = СтрНайти(Комментарий,"версия");
	НомерВерсии = Сред(Комментарий, Номер + 7, 7);
	ВерсияАктуальная = Прокси.ПроверитьВерсиюОбработки(НомерВерсии, СсылкаНаСкачивание);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаВопросов"

&НаКлиенте
// Процедура - обработчик события "Выбор"
// табличной части "ТаблицаВопросов".
//
Процедура ТаблицаВопросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаВопросовРучнойСтатусВопроса" Тогда
		Возврат;
	КонецЕсли; 
	ДобавитьКВопросуКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличной части "ТаблицаВопросов".
//
Процедура ТаблицаВопросовПриАктивизацииСтроки(Элемент)
	
	Если Не ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
 
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		ИзмененаДоступностьЭлементов = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если ИзмененаДоступностьЭлементов Тогда
		ИзмененаДоступностьЭлементов = Ложь;
	КонецЕсли;
	
	Элементы.ОтправитьСообщение.Доступность = Ложь;
	Элементы.ВыполнитьЗадачу.Доступность = Ложь;
	
	Если Объект.ОтображатьТекстВопросаСЗадержкой Тогда
		Если ТекСтрока.ГУИДВопроса <> мТекСтрокаГУИД  Тогда
			ТекстВопроса = 
			"<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 9.00.8112.16421""></HEAD>
			|<BODY><P align=center>&nbsp;</P><P align=center>&nbsp;</P><P align=center>&nbsp;</P>
			|<P align=center><IMG align=middle src='" + АдресКартинки1 + "'></P><P align=center>получение текста вопроса..</P></BODY></HTML>";	
		КонецЕсли; 
		ПодключитьОбработчикОжидания("ОтобразитьВопросКлиент", Объект.ВремяОбновленияТекстаВопроса, Истина);		
	Иначе
		ОтобразитьВопросКлиент();
	КонецЕсли;
	
	ИзменитьДоступностьПриАктивизацииВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьПриАктивизацииВопроса()
	
	ИзмененаДоступностьЭлементов = Ложь;
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если Элементы.ОтправитьСообщение.Доступность <> ТекСтрока.ВозможностьДобавлятьСообщение Тогда
		Элементы.ОтправитьСообщение.Доступность = ТекСтрока.ВозможностьДобавлятьСообщение;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;	
			
	//Если Элементы.ТолькоСотрудникамПоддержки.Доступность <> (ТекСтрока.ЯвляетсяРуководителем ИЛИ ТекСтрока.ЯвляетсяСотрудникомПоддержки) Тогда
	//	Элементы.ТолькоСотрудникамПоддержки.Доступность	=  (ТекСтрока.ЯвляетсяРуководителем ИЛИ ТекСтрока.ЯвляетсяСотрудникомПоддержки);
	//	ИзмененаДоступностьЭлементов = Истина;
	//КонецЕсли;	
	
	//Если НЕ Элементы.ТолькоСотрудникамПоддержки.Доступность Тогда
	//	ТолькоДляСотрудниковТП = Ложь;
	//	ИзмененаДоступностьЭлементов = Истина;
	//КонецЕсли;
	
	Если ТекСтрока.ПоЗадачам И НЕ Элементы.ВыполнитьЗадачу.Доступность Тогда
		Элементы.ВыполнитьЗадачу.Доступность = Истина;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;
	
	Если (ТекСтрока.СтатусВопроса = "Закрыт" или ТекСтрока.СтатусВопроса = "Отменен") И Элементы.ОтправитьСообщение.Доступность Тогда
		Элементы.ОтправитьСообщение.Доступность = Ложь;
		ИзмененаДоступностьЭлементов = Истина;
	КонецЕсли;
		
	Элементы.ЗавершитьОбсуждение.Доступность = ПравоЗакрытияТекВопроса;
	Элементы.ЗавершитьОбсуждение1.Доступность = ПравоЗакрытияТекВопроса;
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач Тогда
		НарисоватьКнопкиПоЗадаче();
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОтобразитьВопросКлиент()
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ГУИДВопроса <> мТекСтрокаГУИД  Тогда
			Гуид = ТекСтрока.ГУИДВопроса;
			Код = ТекСтрока.Код;
			ТекстВопроса = ПолучитьТекстОбсужденияВопроса(Гуид, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль,
			Объект.ПоказатьПолностью, ПравоЗакрытияТекВопроса, Код);
			Если Объект.ОтображатьКонтакты Тогда
				ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, Гуид);
			КонецЕсли;
			
			мТекСтрокаГУИД = ТекСтрока.ГУИДВопроса;
		КонецЕсли; 
	Иначе
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	
	ОбновитьТаблицуВопросов();	

КонецПроцедуры

&НаКлиенте
Процедура ТекстВопросаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолностьюПриИзменении(Элемент)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные<>Неопределено  Тогда
		ТекстВопроса = ПолучитьТекстОбсужденияВопроса(ТекДанные.ГУИДВопроса,
		Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, Объект.ПоказатьПолностью, ПравоЗакрытияТекВопроса, ТекДанные.Код);
		Если Объект.ОтображатьКонтакты Тогда
			ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ТекДанные.ГУИДВопроса);
		КонецЕсли;
		
		мТекСтрокаГУИД = ТекДанные.ГУИДВопроса;
	Иначе
		ТекстВопроса = ПолучитьТекстХТМЛДляВывода("");
	КонецЕсли; 
	НадписьСостояния = "";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СТАТУСЫ ВОПРОСОВ (ручные)

&НаКлиенте
Процедура ТаблицаВопросовРучнойСтатусВопросаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.ГУИДВопроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ПолучитьСписокВыбораВопросов();
	СписокВыбора.СортироватьПоЗначению(); 
	Для Каждого ЭлСписка Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораВопросов()
	
	ИзБазы = Новый СписокЗначений;
	
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ПолучитьСписокСтатусовВопросов();
	Исключение
	КонецПопытки; 
		
	Возврат ЗначениеИзСтрокиВнутр(ИзБазы);
	
КонецФункции
 
&НаКлиенте
Процедура ТаблицаВопросовРучнойСтатусВопросаПриИзменении(Элемент)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.ГУИДВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбновитьСтатусВопросаСервер(ТекСтрока.РучнойСтатусВопроса, ТекСтрока.ГУИДВопроса);
	ПоказатьОповещениеПользователя(,,Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусВопросаСервер(Статус, ГУИДВопроса)
	
	ИзБазы = "";
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ОбновитьСтатусВопроса(Статус, ГУИДВопроса);
	Исключение
	КонецПопытки; 
		
	Возврат ИзБазы;
	
КонецФункции 
    
&НаКлиенте
Процедура ОтображатьКонтактыПриИзменении(Элемент)
	
	Элементы.ТаблицаКИ.Видимость = ОтображатьКонтакты;
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;

	Если Объект.ОтображатьКонтакты Тогда
		Если ТекДанные<>Неопределено  Тогда
			ТекстВопроса = ПолучитьТекстОбсужденияВопроса(ТекДанные.ГУИДВопроса,
			Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ПоказатьПолностью, ПравоЗакрытияТекВопроса, ТекДанные.Код);
			Если Объект.ОтображатьКонтакты Тогда
				ЗаполнитьКонтактнуюИнформацию(Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ТекДанные.ГУИДВопроса);
			КонецЕсли;
			
			мТекСтрокаГУИД = ТекДанные.ГУИДВопроса;
		Иначе
			ТекстВопроса = ПолучитьТекстХТМЛДляВывода("");
		КонецЕсли; 
		НадписьСостояния = "";
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ДЛЯ РАБОТЫ С ВОПРОСОМ

&НаКлиенте
// Процедура - обработчик команды ОтправитьСообщение.
//
Процедура ОтправитьСообщение(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СообщениеТекст = НовоеСообщение.ПолучитьТекст();
	СообщениеХТМЛ = "";
	СтруктураКартинок = Новый Структура;
	НовоеСообщение.ПолучитьHTML(СообщениеХТМЛ, СтруктураКартинок);
	Для Каждого ЭлСтруктуры Из СтруктураКартинок Цикл
		BASE64 = ПолучитьBASE64ПредставлениеКартинки(ЭлСтруктуры.Значение);
		СообщениеХТМЛ = СтрЗаменить(СообщениеХТМЛ, ЭлСтруктуры.Ключ, "data:image;base64,"+BASE64+"");  
	КонецЦикла;
	
	// пустые сообщения не добавляем
	СообщениеДляПроверки = СтрЗаменить(СообщениеТекст, Символы.ПС, "");
	Если СообщениеДляПроверки = "" Тогда
		Возврат;
	КонецЕсли;
	                                                                                                                      
	Результат = ОтправитьСообщениеНаСервере(ТекСтрока.ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст);
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",Результат);
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		КонецПопытки; 
		Возврат;
	ИначеЕсли Результат Тогда 
		НовоеСообщение.Удалить();
		ПоказатьОповещениеПользователя(,,  Символы.ПС + "Сообщение успешно добавлено");
		ОбновитьТаблицуВопросов();		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
// Процедура запускает сервисные функции необходимые для создания вопроса
//
Функция ОтправитьСообщениеНаСервере(ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст)
	
	Попытка
		Определение = Новый WSОпределения( Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль; 
		Возврат Прокси.ДобавитьСообщениеВВопрос(ГУИДВопроса, СообщениеХТМЛ, СообщениеТекст, Ложь);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
// Процедура - обработчик команды ПроверитьОрфографию.
//
Процедура ПроверитьОрфографию(Команда)
	
	ТекстДляПроверки = НовоеСообщение.ПолучитьТекст();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	СтруктураПараметров.Вставить("ИмяСобытия", "ПроверкаОрфографииСообщения");
	
	ТекстХТМЛ = Неопределено;
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПроверкиОрфографии", СтруктураПараметров, ЭтаФорма);
	КонецПопытки; 
   
КонецПроцедуры

&НаСервере
Процедура УстановитьПравильноеХТМЛ(ТекстХТМЛ)
	
	НовоеСообщение.УстановитьHTML(ТекстХТМЛ, Новый Структура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьBASE64ПредставлениеКартинки(Картинка)
	
	Возврат Base64Строка(Картинка.ПолучитьДвоичныеДанные());
	
КонецФункции

&НаСервереБезКонтекста
Функция НазначитьИсполнителяСервер(ГУИДВопроса, АдресБазы, Пользователь, Пароль, Исполнитель)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Пользователь,  Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Пользователь;
		Прокси.Пароль = Пароль; 
		Возврат Прокси.НазначитьИсполнителя(ГУИДВопроса, Исполнитель);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
		
КонецФункции	

&НаСервере
Функция ПолучитьСписокВыбораИсполнителей(ГУИДВопроса)
	
	ИзБазы = Новый СписокЗначений;
	Попытка
		Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl", Объект.Пользователь, Объект.Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь = Объект.Пользователь;
		Прокси.Пароль = Объект.Пароль;
		ИзБазы = Прокси.ПолучитьСписокВыбораИсполнителей(ГУИДВопроса);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Попытка
		СписокВозврата = ЗначениеИзСтрокиВнутр(ИзБазы);
	Исключение
		СписокВозврата = ИзБазы;
	КонецПопытки;	
			
	Возврат СписокВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПрокси(Определение) Экспорт
	
	Возврат Новый WSПрокси (Определение, "RemoteConnect", "RemoteConnect", "RemoteConnectSoap");
	
КонецФункции

&НаКлиенте
// Процедура - обработчик команды СделатьНеПрочитанным.
//
Процедура СделатьНеПрочитанным(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекДанные = Элементы.ТаблицаВопросов.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ТаблицаВопросов.ВыделенныеСтроки;
		СписокВопросов = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СписокВопросов.Добавить(ТаблицаВопросов.НайтиПоИдентификатору(Строка).ГУИДВопроса);
		КонецЦикла;
	Иначе
		ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ТаблицаВопросовЗадач.ВыделенныеСтроки;
		СписокВопросов = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СписокВопросов.Добавить(ТаблицаВопросовЗадач.НайтиПоИдентификатору(Строка).ГУИДВопроса);
		КонецЦикла;
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
			
	ПризнакНепрочитанного = ТекДанные.Непрочитан = 1;
	Результат = СделатьНеПрочитаннымСервер(СписокВопросов, Объект.АдресБазы, Объект.Пользователь, Объект.Пароль, ПризнакНепрочитанного);
	
	Если Результат <> "true" Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТекстПредупреждения",Результат);
		Попытка
			ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПредупреждения", Структура, ЭтаФорма);
		КонецПопытки; 
		Возврат;
	Иначе
		ОбновитьТаблицуВопросов();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СделатьНеПрочитаннымСервер(СписокВопросов, АдресБазы, Пользователь, Пароль, ПризнакНепрочитанного)
	
	Попытка
		Определение = Новый WSОпределения(АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Пользователь,  Пароль);
		Прокси = ПолучитьПрокси(Определение);
		Прокси.Пользователь =  Пользователь;
		Прокси.Пароль = Пароль; 
		Возврат Прокси.УстановитьПризнакНепрочитанного(ПризнакНепрочитанного, ЗначениеВСтрокуВнутр(СписокВопросов));
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
		
КонецФункции	

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	Если Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов Тогда
		ТекСтрока = Элементы.ТаблицаВопросов.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	КонецЕсли;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГУИД = ТекСтрока.ГУИДВопроса;
	СтруктураДанных = Новый Структура("Пользователь, Пароль, АдресБазы, ГУИДВопроса", Объект.Пользователь, Объект.Пароль, Объект.АдресБазы, ГУИД);
	Попытка
		ОткрытьФорму("ВнешняяОбработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных, ЭтаФорма);
	Исключение
		ОткрытьФорму("Обработка.rgsМониторСопровождения.Форма.ФормаПрикрепленныхФайлов", СтруктураДанных, ЭтаФорма);
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	
	ТекКолонка = Элементы.ТаблицаВопросов.ТекущийЭлемент;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Сред(ТекКолонка.Имя,16,СтрДлина(ТекКолонка.Имя) - 15);
	Если ИмяКолонки = "Картинка" Тогда
		ТаблицаВопросов.Сортировать("СтатусВопросаСортировка Возр");
	Иначе
		ТаблицаВопросов.Сортировать(ИмяКолонки + " Возр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУб(Команда)
	
	ТекКолонка = Элементы.ТаблицаВопросов.ТекущийЭлемент;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Сред(ТекКолонка.Имя,16,СтрДлина(ТекКолонка.Имя) - 15);
	Если ИмяКолонки = "Картинка" Тогда
		ТаблицаВопросов.Сортировать("СтатусВопросаСортировка Убыв");
	Иначе
		ТаблицаВопросов.Сортировать(ИмяКолонки + " Убыв");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗадачи(Команда)
	
	ОткрытыНепрочитанные = Ложь;
	Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(245,242,221);
	Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(245,242,221);

	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаЗадач;
	ОбновитьТаблицуВопросов();
	//ОбновитьСписокЗадач();
	Элементы.МоиЗадачи.ЦветФона = Новый Цвет(244,236,197);
	ТаблицаВопросовПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадач()
	
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("ПоЗадачам", Истина);
	//МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
	//ТЗ_ТаблицаВопросовЗадач = ТаблицаВопросов.Выгрузить(МассивСтрок);
	//ТаблицаВопросовЗадач.Загрузить(ТЗ_ТаблицаВопросовЗадач);
	//Если МассивСтрок.Количество() = 0 Тогда
	//	Элементы.МоиЗадачи.Доступность = Ложь;
	//Иначе
	//	Элементы.МоиЗадачи.Доступность = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьКнопкиПоЗадаче()
	
	//Попытка
	//	Выполнить("Абракадабра");	
	//Исключение
	//КонецПопытки;

	ТекСтрока = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	ТекстОписаниеЗадачи = СокрЛП(ТекСтрока.ЗадачаОписание) + " Содержание: " + СокрЛП(ТекСтрока.ЗадачаСодержание);
	
	ПолеРамка = Элементы.ДекорацияРеквизитыКЗаполнению;
	ПолеРамка.ЦветТекста = Новый Цвет(252,250,235);
	
	// проверить/открыть страницу с кнопками
	ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ТекСтрока.ВидЗадачи);
	
	СтраницаКнопок = Элементы.Найти("СтраницаКоманд" + ИмяВидаЗадачи);
	
	Если СтраницаКнопок = Неопределено Тогда
		Элементы.ГруппаПанельКомандЗадач.ТекущаяСтраница = Элементы.ГруппаПанельКомандЗадачСтраница1;
	Иначе
		Элементы.ГруппаПанельКомандЗадач.ТекущаяСтраница = СтраницаКнопок;
	КонецЕсли;
	
	// проверить/открыть страницу с полями
	СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи);
	Если СтраницаЭлементов = Неопределено Тогда
		НарисоватьСтраницу(ТекСтрока.ВидЗадачи, ТекСтрока.ГУИДВидаЗадачи);
		СтраницаЭлементов = Элементы.Найти(ИмяВидаЗадачи);
	КонецЕсли;
	
	Если СтраницаЭлементов = Неопределено Тогда
		Элементы.ГруппаПанельЭлементовПоЗадаче.ТекущаяСтраница = Элементы.ГруппаСтраница1;
		Возврат;
	КонецЕсли;
	Элементы.ГруппаПанельЭлементовПоЗадаче.ТекущаяСтраница = СтраницаЭлементов;
	ИмяСтраницы = "Страница" + СтраницаЭлементов.Заголовок;
	Для Каждого Строка Из Элементы Цикл 
		Если СтрНайти(Строка.Имя,ИмяСтраницы)<>1 Тогда 
			Продолжить; 
		КонецЕсли;
		Если (Найти(Строка.Имя, "Поле1") <> 0 И ТипЗнч(Строка) = Тип("ДекорацияФормы")) ИЛИ (Найти(Строка.Имя, "Поле1КонтекстноеМеню") <> 0) Тогда
			Продолжить; // пустая надпись, на странице нет полей ввода
		КонецЕсли;
		// есть элементы на странице
		ПолеРамка.ЦветТекста = Новый Цвет(65,48,3);
		Прервать;
	КонецЦикла;
	
	// переключить текущую строку
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГУИДЗадачи",ТекСтрока.ГУИДЗадачи);
	ТекСтрока = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
	Если ТекСтрока.Количество() > 0 Тогда
		Элементы.РасшифровкаЗадач.ТекущаяСтрока = (ТекСтрока[0].НомерСтроки-1);//начало с 0
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьКнопкиПоУмолчаниюКлиент()
	НарисоватьКнопкиПоУмолчанию();	
КонецПроцедуры

&НаСервере
Процедура НарисоватьКнопкиПоУмолчанию()
		
	СписокВидовЗадач = ТаблицаВопросовЗадач.Выгрузить();
	СписокВидовЗадач.Свернуть("ВидЗадачи, ГУИДВидаЗадачи");
	
	Для Каждого Строка Из СписокВидовЗадач Цикл 
		НарисоватьСтраницу(Строка.ВидЗадачи, Строка.ГУИДВидаЗадачи);	
	КонецЦикла;
	
	Элементы.ГруппаПанельКомандЗадач.ТекущаяСтраница = Элементы.ГруппаПанельКомандЗадачСтраница1;

КонецПроцедуры

&НаСервере
Функция НарисоватьСтраницу(ВидЗадачи, ГУИДВидаЗадачи)
	
	//Попытка 
	//	Выполнить("Прпорп");
	//Исключение
	//КонецПопытки;
	Стр = Элементы.ГруппаПанельЭлементовПоЗадаче.ПодчиненныеЭлементы.Количество() + 1;
	
	Элементы.РасшифровкаЗадач.ТекущаяСтрока = 0;
	ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ВидЗадачи);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Массив);
	
	КС = Новый КвалификаторыСтроки(40);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрокаГУИД = Новый ОписаниеТипов(Массив, , КС);
	
	Если ЗначениеЗаполнено(ВидЗадачи) Тогда
		Попытка
			СтраницаЭлементов = Элементы.Добавить(ИмяВидаЗадачи, Тип("ГруппаФормы"),Элементы.ГруппаПанельЭлементовПоЗадаче);
			СтраницаЭлементов.Заголовок = Стр;
			СтраницаЭлементов.РастягиватьПоВертикали = Истина;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ГУИДВидаЗадачи",ГУИДВидаЗадачи);
			ЗадачиДанногоВида = Объект.РасшифровкаЗадач.НайтиСтроки(СтруктураОтбора);
			
			Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
			Прокси = ПолучитьПрокси(Определение);
			Прокси.Пользователь = Объект.Пользователь;
			Прокси.Пароль = Объект.Пароль;
			
			ИзБазы = Прокси.СписокРеквизитовИКнопокВидаЗадачи(ГУИДВидаЗадачи);
			СписокРеквизитовИКнопок = ЗначениеИзСтрокиВнутр(ИзБазы);
			
			Если СписокРеквизитовИКнопок.Количество() = 0 Тогда
				допПоле = Элементы.Добавить("Страница" + Стр + "Поле" + "1",Тип("ДекорацияФормы"), СтраницаЭлементов);
				допПоле.Заголовок = "1";
				допПоле.ЦветТекста = Новый Цвет(252,250,235);
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ СписокРеквизитовИКнопок.Найти("Кнопка","ТипПоля") = Неопределено Тогда
				// нарисуем страницу для кнопок
				Страница = Элементы.Добавить("СтраницаКоманд" + ИмяВидаЗадачи, Тип("ГруппаФормы"), Элементы.ГруппаПанельКомандЗадач);
				Страница.Заголовок = Стр;
				Страница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			КонецЕсли;
			
			//Создание элементов формы
			МассивРеквизитов = Новый Массив;
			Для Каждого ОписаниеЭлемента Из СписокРеквизитовИКнопок Цикл
				КодЭлемента = ОписаниеЭлемента.Код;
				
				Если ОписаниеЭлемента.ТипПоля = "Реквизит" Тогда
					
					ИмяПоляВвода = "Страница" + Стр + "Поле" + КодЭлемента;
					НоваяСтрокаСоответствие = СоответствиеРеквизитовИПолей.Добавить();
					НоваяСтрокаСоответствие.Наименование = ОписаниеЭлемента.ПредставлениеПоля;
					НоваяСтрокаСоответствие.ИмяПоляВвода = ИмяПоляВвода;
					НоваяСтрокаСоответствие.ПроверятьЗаполнение = ОписаниеЭлемента.Обязательный;
					
					Если ОписаниеЭлемента.ИмяТипа = "Строка" Тогда
						КС = Новый КвалификаторыСтроки(ОписаниеЭлемента.Длина);
						Массив = Новый Массив;
						Массив.Добавить(Тип("Строка"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив, , КС);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Число" Тогда
						КЧ = Новый КвалификаторыЧисла(ОписаниеЭлемента.Длина, ОписаниеЭлемента.Точность, ?(ОписаниеЭлемента.НеОтрицательное,ДопустимыйЗнак.Неотрицательный,ДопустимыйЗнак.Любой));
						Массив = Новый Массив;
						Массив.Добавить(Тип("Число"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив, КЧ);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Дата" Тогда
						КД = Новый КвалификаторыДаты(?(ОписаниеЭлемента.ДатаВремя,ЧастиДаты.ДатаВремя,ЧастиДаты.Дата));
						Массив = Новый Массив;
						Массив.Добавить(Тип("Дата"));
						ОписаниеТиповПоля = Новый ОписаниеТипов(Массив,,,КД);
					ИначеЕсли ОписаниеЭлемента.ИмяТипа = "Булево" Тогда
						ОписаниеТиповПоля = ОписаниеТиповБулево;
					КонецЕсли;
					
					Реквизит = Новый РеквизитФормы(ИмяПоляВвода, ОписаниеТиповПоля, , ОписаниеЭлемента.ПредставлениеПоля);
					МассивРеквизитов.Добавить(Реквизит);
					
					Реквизит = Новый РеквизитФормы(ИмяПоляВвода + "ГУИД", ОписаниеТиповСтрокаГУИД);
					МассивРеквизитов.Добавить(Реквизит);
					
				Иначе 
					
					ИмяКнопки = "СтраницаКн" + Стр + "Кнопка" + КодЭлемента;
					кнПример = Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"),Элементы["СтраницаКоманд" + ИмяВидаЗадачи]);
					кнПример.Заголовок = ОписаниеЭлемента.ПредставлениеПоля;
					кнПример.ИмяКоманды = "ОбработкаНажатияКнопок";
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
			
			// Заполним ГУИДы
			Для Каждого ОписаниеЭлемента Из СписокРеквизитовИКнопок Цикл
				Если ОписаниеЭлемента.ТипПоля = "Реквизит" Тогда
					КодЭлемента = ОписаниеЭлемента.Код;
					ИмяПоляВвода = "Страница" + Стр + "Поле" + КодЭлемента + "ГУИД";
					Выполнить ("ЭтаФорма." + ИмяПоляВвода + " = ОписаниеЭлемента.ГУИДРеквизита");
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Реквизит Из МассивРеквизитов Цикл
				
				Если СтрНайти(Реквизит.Имя, "ГУИД") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПолеФормы = Элементы.Добавить(Реквизит.Имя, Тип ("ПолеФормы"), СтраницаЭлементов);
				ПолеФормы.ПутьКДанным = Реквизит.Имя;
				Если Реквизит.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
					ПолеФормы.Вид = ВидПоляФормы.ПолеФлажка;
				Иначе
					ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
					Если Реквизит.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
						Если Реквизит.ТипЗначения.КвалификаторыСтроки.Длина > 50 Тогда
							ПолеФормы.Высота = 5;
							ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
							ПолеФормы.МногострочныйРежим = Истина;
							ПолеФормы.Ширина = 300;
						Иначе
							ПолеФормы.Ширина = 200;
						КонецЕсли;
						ПолеФормы.КнопкаВыбора = Ложь;
						ПолеФормы.АвтоПереносСтрок = Истина;
					ИначеЕсли Реквизит.ТипЗначения.СодержитТип(Тип("Число"))ИЛИ Реквизит.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
						ПолеФормы.КнопкаВыбора = Истина;
					КонецЕсли;
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ИмяПоляВвода",Реквизит.Имя);
					Строки = СоответствиеРеквизитовИПолей.НайтиСтроки(СтруктураОтбора);
					Если Строки.Количество() > 0 И Строки[0].ПроверятьЗаполнение Тогда
						ПолеФормы.АвтоОтметкаНезаполненного = Истина;	
					КонецЕсли;
				КонецЕсли;	
								
			КонецЦикла;
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяВидаЗадачи(ВидЗадачи)
	
	ГотовоеНазвание = ВидЗадачи;
	
	// проверим на наличие специальных символов
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ВК,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ВТаб,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.НПП,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ПС,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.ПФ,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, Символы.Таб,"");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "/" ," ");	
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "\" ," ");
	ГотовоеНазвание = СтрЗаменить(ГотовоеНазвание, "." ,"");
	
	// уберем пробелы и добавим заглавные буквы
	Пока СтрНайти(ГотовоеНазвание, " ") Цикл
		НомерПробела = СтрНайти(ГотовоеНазвание, " ");
		ЛеваяЧасть = Лев(ГотовоеНазвание,НомерПробела - 1);
		Остаток = Прав(ГотовоеНазвание,СтрДлина(ГотовоеНазвание) - НомерПробела);
		БольшаяБуква = ВРег(Лев(Остаток,1));
		ОстатокБезБуквы = Прав(Остаток,СтрДлина(Остаток) - 1);
		ГотовоеНазвание = ЛеваяЧасть + БольшаяБуква + ОстатокБезБуквы;
	КонецЦикла;
	
	Возврат ГотовоеНазвание;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияКнопок(Команда)
	
	ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ОцениватьТрудозатраты Тогда
		Сообщить("Данную задачу через обработку выполнить нельзя!");
		Возврат;
	КонецЕсли;
	
	Попытка 
		ИмяКнопки = ТекущийЭлемент.Имя;
		Счетчик = СтрНайти(ИмяКнопки, "Кнопка");
		КоличествоСимволовВНомере = СтрДлина(ИмяКнопки)-СтрДлина(Лев(ИмяКнопки,Счетчик+5));
		КодКнопки = Число(Прав(ИмяКнопки, КоличествоСимволовВНомере));
	Исключение
		КодКнопки = Неопределено;
	КонецПопытки;
	
	Если КодКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу(ТекДанные.ВидЗадачи, ТекДанные.ГУИДЗадачи, КодКнопки);
	ОбновитьТаблицуВопросов();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуКнопка()
	
	ТекДанные = Элементы.ТаблицаВопросовЗадач.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ОцениватьТрудозатраты Тогда
		Сообщить("Данную задачу через обработку выполнить нельзя!");
		Возврат;
	КонецЕсли;

	ВыполнитьЗадачу(ТекДанные.ВидЗадачи, ТекДанные.ГУИДЗадачи);
	ОбновитьТаблицуВопросов();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоЗадачам", Истина);
	МассивСтрок = ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачу(ВидЗадачи, ГУИДЗадачи, КодКнопки = Неопределено)
	
	Отказ = Ложь;
	ДанныеКЗаполнениюМассив = Новый Массив;
	
	// 1. Определим страницу
	Если ЗначениеЗаполнено(ВидЗадачи) Тогда
		
		ИмяВидаЗадачи = ПолучитьИмяВидаЗадачи(ВидЗадачи);
		МассивПроверяемыхРеквизитов = Новый Массив;
		
		ЭлементыПодчиненные = Элементы[ИмяВидаЗадачи].ПодчиненныеЭлементы;
		Для Каждого Строка Из ЭлементыПодчиненные Цикл 
			
			// есть элементы на странице
			ЗначениеРеквизита = Неопределено;
			Выполнить("ЗначениеРеквизита = " + Строка.Имя);
			
			ГУИДРеквизита = "";
			Выполнить("ГУИДРеквизита = " + Строка.Имя + "ГУИД");
			
			// Проверить заполнение
			Если Строка.Вид = ВидПоляФормы.ПолеВвода И Строка.АвтоОтметкаНезаполненного = Истина И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Отказ = Истина;
				ИмяПоля = Строка.Имя;
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ИмяПоляВвода",ИмяПоля);
				РезультатПоиска = СоответствиеРеквизитовИПолей.НайтиСтроки(СтруктураОтбора);
				Если РезультатПоиска.Количество() > 0 Тогда
					Сообщить("Необходимо заполнить """ + РезультатПоиска[0].Наименование + """");	 
				Иначе
					Сообщить("Необходимо заполнить отмеченные поля!");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			// если заполнено - будем передавать
			Если (Строка.Вид = ВидПоляФормы.ПолеФлажка И ЗначениеРеквизита = Истина) ИЛИ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
				ДанныеКЗаполнениюМассив.Добавить(Новый Структура("СвойствоГУИД,Значение", ГУИДРеквизита, ЗначениеРеквизита));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			
			// формируем структуру параметров
			СтруктураКВыполнению = Новый Структура;
			СтруктураКВыполнению.Вставить("ГУИДЗадачи",ГУИДЗадачи);
			
			Результат = Истина;
					
			Если ДанныеКЗаполнениюМассив.Количество() = 0 Тогда
				ДанныеКЗаполнению = Неопределено; //нет дополнительных реквизитов
			Иначе
				ДанныеКЗаполнению = ЗначениеВСтрокуВнутр(ДанныеКЗаполнениюМассив);
			КонецЕсли;	
			
			СтруктураКВыполнению.Вставить("ДанныеКЗаполнениюМассив",ДанныеКЗаполнению);
			
			// проверим код кнопки
			Если НЕ КодКнопки = Неопределено Тогда
				СтруктураЗаполнения = Новый Структура("ВремяВыполнения, ОписаниеЗадачи, ВремяВыполненияПотери, ПричинаПревышения, ВремяПоДоп", 0, "", 0, "", 0);		
				СтруктураКВыполнению.Вставить("СтруктураЗаполнения",СтруктураЗаполнения);
				СтруктураКВыполнению.Вставить("КодКнопки",КодКнопки);
			КонецЕсли;
			
			// выполняем задачу
			ВходнойПараметр = ЗначениеВСтрокуВнутр(СтруктураКВыполнению);
			Попытка
				Определение = Новый WSОпределения(Объект.АдресБазы+"/ws/MonitorExt.1cws?wsdl",  Объект.Пользователь,  Объект.Пароль);
				Прокси = ПолучитьПрокси(Определение);
				Прокси.Пользователь = Объект.Пользователь;
				Прокси.Пароль = Объект.Пароль;
				
				Результат = Прокси.ВыполнениеЗадачи(ВходнойПараметр);
				Если Результат <> "true" И Результат <> Истина Тогда
					Сообщить(Результат);
				Иначе
					// удалять страницу и реквизиты не будем, будем очищать
					Для Каждого Строка Из ЭлементыПодчиненные Цикл
						// есть элементы на странице
						ЗначениеРеквизита = Неопределено;
						Выполнить("ЗначениеРеквизита = " + Строка.Имя);
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = """"");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = 0");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
							Выполнить ("ЭтаФорма."+Строка.Имя + " = ЛОЖЬ");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НепрочитанныеВопросы(Команда)
	
	ОткрытыНепрочитанные = Истина;
	ОбновитьТаблицуВопросов();
	Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(245,242,221);
	Элементы.МоиЗадачи.ЦветФона = Новый Цвет(245,242,221);
	Элементы.МоиЗадачи.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
	Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(244,236,197);
	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСписокВопросов(Команда)
	
	ОткрытыНепрочитанные = Ложь;
	ОбновитьТаблицуВопросов();
	Элементы.ПолныйСписокВопросов.ЦветФона = Новый Цвет(244,236,197);
	Элементы.МоиЗадачи.ЦветФона = Новый Цвет(245,242,221);
	Элементы.МоиЗадачи.Доступность = ?(ТаблицаВопросовЗадач.Количество() > 0, Истина, Ложь);
	Элементы.НепрочитанныеВопросы.ЦветФона = Новый Цвет(245,242,221);
	Элементы.ГруппаСтраницыТаблицВопросов.ТекущаяСтраница = Элементы.СтраницаВопросов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправку(Команда)
	
	ЭтаФорма.ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеСообщениеПриИзменении(Элемент)
	а = 1;
КонецПроцедуры

&НаКлиенте
Процедура ТекстПодсказкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	а = 1;
КонецПроцедуры



//ЦветКнопкиОбщий = Новый Цвет(245,242,221);
//ЦветКнопкиПометка = Новый Цвет(244,236,197);
