
#Область РаботаСКлиентами

&НаСервере
Процедура ПолучитьИзERMНаСервере()
	
	WSСсылка = WSСсылки.rgsИнтеграцияСERM;
	
	ФабрикаXDTOERM = WSСсылка.ПолучитьWSОпределения().ФабрикаXDTO;
	
	WSПрокси = Обработки.rgsИнтеграцияСERM.СоздатьWSПрокси(УзелОбмена, WSСсылка);
	
	СписокСсылокXDTO = Обработки.rgsИнтеграцияСERM.ПолучитьОбъектXDTO(ФабрикаXDTOERM, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "СписокСсылокКлиентов");
	СписокСсылокXDTO.ИдентификаторКорреспондента = СтрокаСоединенияИнформационнойБазы();
	
	Для каждого СтрокаПодобранногоКлиента Из ПодобранныеКонтрагенты Цикл
		СписокСсылокXDTO.Ссылки.Добавить(СтрокаПодобранногоКлиента.Ссылка);
	КонецЦикла;
	
	Отказ = WSПрокси.RegisterClients(СписокСсылокXDTO);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзERM(Команда)
	ПолучитьИзERMНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// { RGS VShamin 29.04.2016 13:42:50 - 
	//ДобавитьКлиентаВПодобранные(Элемент);
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьКлиентаВПодобранные(ТекДанные);
	// } RGS VShamin 29.04.2016 13:42:50 - 
	
КонецПроцедуры

&НаКлиенте
// { RGS VShamin 29.04.2016 13:43:51 - 
//Процедура ДобавитьКлиентаВПодобранные(Результат)
Процедура ДобавитьКлиентаВПодобранные(ТекДанные)
// } RGS VShamin 29.04.2016 13:43:51 - 
	
	// { RGS VShamin 29.04.2016 13:41:44 - 
	//ТекДанные = Результат.ТекущиеДанные;
	//
	//Если ТекДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если ПодобранныеКонтрагенты.НайтиСтроки(Новый Структура("Ссылка", ТекДанные.Ссылка)).Количество() > 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	//НоваяСтрока = ПодобранныеКонтрагенты.Добавить();
	//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	
	Если ПодобранныеКонтрагенты.НайтиСтроки(Новый Структура("Ссылка", ТекДанные.Ссылка)).Количество() = 0 Тогда
		НоваяСтрока = ПодобранныеКонтрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	КонецЕсли;

	ТаблицаКонтрагентов.Удалить(ТекДанные);
	НоваяСтрока.Контрагент = ПоискКонтрагентаПоРегиструСоответствияИнфБаз(НоваяСтрока.Ссылка);
	// } RGS VShamin 29.04.2016 12:58:28 - 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокКлиентов(Команда)
	
	ПолучитьСписокКлиентовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокКлиентовНаСервере()
	
	ТаблицаКонтрагентов.Очистить();
	
	WSСсылка = WSСсылки.rgsИнтеграцияСERM;
	
	ФабрикаXDTOERM = WSСсылка.ПолучитьWSОпределения().ФабрикаXDTO;
	
	WSПрокси = Обработки.rgsИнтеграцияСERM.СоздатьWSПрокси(УзелОбмена, WSСсылка);
	
	ПараметрыПоискаКонтрагентов = Обработки.rgsИнтеграцияСERM.ПолучитьОбъектXDTO(ФабрикаXDTOERM, "http://v8.1c.ru/edi/edi_stnd/EnterpriseDataAddition/1.0", "ПараметрыПоискаКонтрагентов");
	ПараметрыПоискаКонтрагентов.НаименованиеАнгл = НаименованиеАнгл;
	ПараметрыПоискаКонтрагентов.Наименование = Наименование;
	ПараметрыПоискаКонтрагентов.ИНН = ИНН;
	ПараметрыПоискаКонтрагентов.КПП = КПП;
	
	Попытка
		СтруктураВозвратаСпискаКлиентов = WSПрокси.GetClientList(ПараметрыПоискаКонтрагентов);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Обработки.rgsИнтеграцияСERM.ОбработатьТекстОшибки(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Попытка
		СтруктураВозвратаСпискаКлиентов.Проверить();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Обработки.rgsИнтеграцияСERM.ОбработатьТекстОшибки(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Для каждого ОбъектXDTO Из СтруктураВозвратаСпискаКлиентов.СписокКлиентов.Контрагенты Цикл
	
		СтруктураДанных = ОбменДаннымиXDTOСервер.ОбъектXDTOвСтруктуру(ОбъектXDTO);
		КлючевыеСвойства = СтруктураДанных.КлючевыеСвойства;
		
		НоваяСтрока = ТаблицаКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючевыеСвойства);
		НоваяСтрока.НаименованиеАнгл = СтруктураДанных.Наименование;
		Если СтруктураДанных.Свойство("ЛокальноеНаименование") Тогда
			НоваяСтрока.Наименование = СтруктураДанных.ЛокальноеНаименование;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтруктураВозвратаСпискаКлиентов.СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозвратаСпискаКлиентов.СообщениеОбОшибке);
	ИначеЕсли Не ПустаяСтрока(СтруктураВозвратаСпискаКлиентов.ДопИнформация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозвратаСпискаКлиентов.ДопИнформация);
	КонецЕсли;
	
КонецПроцедуры

// { RGS VShamin 29.04.2016 12:39:55 - 
&НаКлиенте
Процедура СнятьВсеПризнакиПодобрать(Команда)
	
	Для каждого ТекСтрока Из ТаблицаКонтрагентов Цикл
		ТекСтрока.Подобрать = Ложь;
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 29.04.2016 12:39:56 - 

// { RGS VShamin 29.04.2016 12:39:55 - 
&НаКлиенте
Процедура УстановитьВсеПризнакиПодобрать(Команда)
	
	Для каждого ТекСтрока Из ТаблицаКонтрагентов Цикл
		ТекСтрока.Подобрать = Истина;
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 29.04.2016 12:39:56 - 

// { RGS VShamin 29.04.2016 12:39:55 - 
&НаКлиенте
Процедура ПодобратьВыбранныхКлиентов(Команда)
	
	Для каждого ТекСтрока Из ТаблицаКонтрагентов Цикл
		Если ТекСтрока.Подобрать Тогда
			ДобавитьКлиентаВПодобранные(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 29.04.2016 12:39:56 - 

// { RGS VShamin 29.04.2016 14:47:44 - 
&НаСервере
Функция ПоискКонтрагентаПоРегиструСоответствияИнфБаз(ERMGUID)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.ПолучитьУзелОбменаСERM());
	Запрос.УстановитьПараметр("Идентификатор", ERMGUID);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции // } RGS VShamin 29.04.2016 14:47:48 - 

// { RGS VShamin 29.04.2016 15:22:25 - 
&НаКлиенте
Процедура НайтиКонтрагентаВЭтойБазе(Команда)
	
	ТекДанные = Элементы.ПодобранныеКонтрагенты.ТекущиеДанные;
	СписокНайденныхКонтрагентов = НайтиКонтрагентаВЭтойБазеНаСервере(ТекДанные.Наименование, ТекДанные.НаименованиеАнгл, ТекДанные.ИНН, ТекДанные.КПП);
	Если СписокНайденныхКонтрагентов.Количество() = 0 Тогда
		Сообщить("Контрагент в текущей базе не найден.");
	ИначеЕсли СписокНайденныхКонтрагентов.Количество() = 1 Тогда
		ТекДанные.Контрагент = СписокНайденныхКонтрагентов[0].Значение;
	ИначеЕсли СписокНайденныхКонтрагентов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокНайденныхКонтрагентов", СписокНайденныхКонтрагентов);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ТекДанные.Контрагент);
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 29.04.2016 15:22:26 - 

// { RGS VShamin 29.04.2016 15:22:39 - 
&НаСервере
Функция НайтиКонтрагентаВЭтойБазеНаСервере(Наименование, НаименованиеАнгл, ИНН, КПП)
	
	Запрос = Новый Запрос;
	СписокКонтрагентов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП");
			Запрос.УстановитьПараметр("КПП", КПП);
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Наименование ПОДОБНО &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", "%" + Наименование + "%");
		Если ЗначениеЗаполнено(НаименованиеАнгл) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.Наименование ПОДОБНО &Наименование", "Контрагенты.Наименование ПОДОБНО &Наименование И Контрагенты.НаименованиеДополнительное ПОДОБНО &НаименованиеАнгл");
			Запрос.УстановитьПараметр("НаименованиеАнгл", "%" + НаименованиеАнгл + "%");
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(НаименованиеАнгл) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.НаименованиеДополнительное ПОДОБНО &НаименованиеАнгл";
		
		Запрос.УстановитьПараметр("НаименованиеАнгл", "%" + НаименованиеАнгл + "%");
	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКонтрагентов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКонтрагентов;
	
КонецФункции // } RGS VShamin 29.04.2016 15:22:39 - 

// { RGS VShamin 29.04.2016 16:25:51 - 
&НаКлиенте
Процедура ОчиститьТаблицуКонтрагентов(Команда)
	
	ТаблицаКонтрагентов.Очистить();
	
КонецПроцедуры // } RGS VShamin 29.04.2016 16:25:51 - 

// { RGS VShamin 29.04.2016 16:27:55 - 
&НаКлиенте
Процедура ОчиститьПодобранныхКонтрагентов(Команда)
	
	ПодобранныеКонтрагенты.Очистить();
	
КонецПроцедуры // } RGS VShamin 29.04.2016 16:27:56 - 

// { RGS VShamin 29.04.2016 17:40:14 - 
&НаКлиенте
Процедура ПодобранныеКонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодобранныеКонтрагентыКонтрагентОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры // } RGS VShamin 29.04.2016 17:40:14 - 

// { RGS VShamin 29.04.2016 17:40:14 - 
&НаСервере
Процедура ПодобранныеКонтрагентыКонтрагентОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить(УзелОбмена);
	НаборЗаписей.Отбор.Идентификатор.Установить(Элементы.ПодобранныеКонтрагенты.ТекущиеДанные.Ссылка);
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.УзелИнформационнойБазы = УзелОбмена;
	НовЗапись.Идентификатор = Элементы.ПодобранныеКонтрагенты.ТекущиеДанные.Ссылка;
	НовЗапись.Ссылка = ВыбранноеЗначение;
	НаборЗаписей.Записать();
	
КонецПроцедуры // } RGS VShamin 29.04.2016 17:40:14 - 

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// { RGS VShamin 29.04.2016 15:10:33 - 
	//УзелОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.НайтиПоКоду("ER");
	УзелОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.ПолучитьУзелОбменаСERM();
	// } RGS VShamin 29.04.2016 15:10:33 - 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗаявками

&НаСервере
Процедура ОбновитьСписокЗаявокНаСервере()
	
	ТаблицаЗаявок.Очистить();
	
	WSСсылка = WSСсылки.rgsИнтеграцияСERM;
	
	ФабрикаXDTOERM = WSСсылка.ПолучитьWSОпределения().ФабрикаXDTO;
	
	WSПрокси = Обработки.rgsИнтеграцияСERM.СоздатьWSПрокси(УзелОбмена, WSСсылка);
	
	Попытка
		СтруктураВозвратаСпискаЗаявок = WSПрокси.GetRequestList();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Обработки.rgsИнтеграцияСERM.ОбработатьТекстОшибки(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Попытка
		СтруктураВозвратаСпискаЗаявок.Проверить();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Обработки.rgsИнтеграцияСERM.ОбработатьТекстОшибки(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Получение");
	
	#Область НастройкаКомпонентовОбмена
	// { RGS VShamin 29.04.2016 15:11:22 - 
	//УзелДляОбмена = ПланыОбмена.rgsОбменКлиентамиЧерезУниверсальныйФормат.НайтиПоКоду("ER");
	УзелДляОбмена = УзелОбмена;
	// } RGS VShamin 29.04.2016 15:11:22 - 
	
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	
	КомпонентыОбмена.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(УзелДляОбмена);
	
	ФорматОбмена = ОбменДаннымиXDTOСервер.ФорматОбмена(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	КомпонентыОбмена.XMLСхема = ФорматОбмена;
	
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
		УзелДляОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	#КонецОбласти
	
	ПравилоКонвертацииКлиент = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Контрагенты_Получение", "ИмяПКО");
	ПравилоКонвертацииПользователь = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Пользователи_Получение", "ИмяПКО");
	
	Для каждого ОбъектXDTO Из СтруктураВозвратаСпискаЗаявок.СписокЗаявок.Заявки Цикл
	
		СтруктураXDTO = ОбменДаннымиXDTOСервер.ОбъектXDTOвСтруктуру(ОбъектXDTO);
		
		// { RGS VShamin 19.05.2016 18:48:56 - 
		//СтруктураДанныхКлиент = СтруктураXDTO.ИзменяемыйКлиент;
		Если СтруктураXDTO.ВидОперации.Значение <> "РегистрацияНовогоОбъекта" Тогда
			СтруктураДанныхКлиент = СтруктураXDTO.ИзменяемыйКлиент;
		КонецЕсли;
		// } RGS VShamin 19.05.2016 18:49:00 - 
		СтруктураДанныхИнициатор = СтруктураXDTO.Инициатор;
		
		// { RGS VShamin 19.05.2016 18:50:57 - 
		//ПолученныеДанныеКлиентСсылка = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
		//	СтруктураДанныхКлиент.Ссылка,
		//	ПравилоКонвертацииКлиент.ТипДанных,
		//	КомпонентыОбмена);
		Если СтруктураXDTO.ВидОперации.Значение <> "РегистрацияНовогоОбъекта" Тогда
			ПолученныеДанныеКлиентСсылка = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
				СтруктураДанныхКлиент.Ссылка,
				ПравилоКонвертацииКлиент.ТипДанных,
				КомпонентыОбмена);
		КонецЕсли;
		// } RGS VShamin 19.05.2016 18:50:57 - 
			
		ПолученныеДанныеИнициаторСсылка = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
			СтруктураДанныхИнициатор.Ссылка,
			ПравилоКонвертацииПользователь.ТипДанных,
			КомпонентыОбмена);
			
		НоваяСтрока = ТаблицаЗаявок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураXDTO);
		// { RGS VShamin 19.05.2016 18:51:29 - 
		//НоваяСтрока.ИзменяемыйКлиент = ПолученныеДанныеКлиентСсылка;
		Если СтруктураXDTO.ВидОперации.Значение <> "РегистрацияНовогоОбъекта" Тогда
			НоваяСтрока.ИзменяемыйКлиент = ПолученныеДанныеКлиентСсылка;
		КонецЕсли;
		// } RGS VShamin 19.05.2016 18:51:29 - 
		НоваяСтрока.СостояниеЗаявки = СтруктураXDTO.СостояниеЗаявки.Значение;
		НоваяСтрока.ВидОперации = ПолучитьПредставлениеВидаОперацииИзмененияНСИ(СтруктураXDTO.ВидОперации.Значение);
		НоваяСтрока.Дата = СтруктураXDTO.ДатаЗаявки;
		НоваяСтрока.Инициатор = ПолученныеДанныеИнициаторСсылка;
		НоваяСтрока.Наименование = СтруктураXDTO.Наименование;
		
	КонецЦикла;
	
	//Если Не ПустаяСтрока(СтруктураВозвратаСпискаКлиентов.СообщениеОбОшибке) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозвратаСпискаКлиентов.СообщениеОбОшибке);
	//ИначеЕсли Не ПустаяСтрока(СтруктураВозвратаСпискаКлиентов.ДопИнформация) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозвратаСпискаКлиентов.ДопИнформация);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаявок(Команда)
	ОбновитьСписокЗаявокНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеВидаОперацииИзмененияНСИ(ВидОперации)
	
	Если ВидОперации = "РегистрацияНовогоОбъекта" Тогда
		Возврат "Регистрация нового элемента";
	ИначеЕсли ВидОперации = "ИзменениеРеквизитовОбъекта" Тогда
		Возврат "Изменение элемента";
	ИначеЕсли ВидОперации = "УдалениеОбъекта" Тогда
		Возврат "Удаление элемента";
	ИначеЕсли ВидОперации = "УдалениеДубликатаОбъекта" Тогда
		Возврат "Удаление дубликата элемента";
	Иначе
		Возврат "<Ошибка получения представления значения>";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Код", ТекущиеДанные.Код);
	ПараметрыФормы.Вставить("Дата", ТекущиеДанные.Дата);
	ПараметрыФормы.Вставить("ВидОперации", ТекущиеДанные.ВидОперации);
	ПараметрыФормы.Вставить("ИзменяемыйКлиент", ТекущиеДанные.ИзменяемыйКлиент);
	ПараметрыФормы.Вставить("Инициатор", ТекущиеДанные.Инициатор);
	ПараметрыФормы.Вставить("СостояниеЗаявки", ТекущиеДанные.СостояниеЗаявки);
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ПараметрыФормы.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	// { RGS VShamin 04.05.2016 12:49:15 - 
	ПараметрыФормы.Вставить("НоваяЗаявка", Ложь);
	// } RGS VShamin 04.05.2016 12:49:16 - 
	
	ОткрытьФорму("Обработка.rgsИнтеграцияСERM.Форма.ФормаЗаявки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор(ТекущиеДанные.Ссылка));
	
КонецПроцедуры

// { RGS VShamin 04.05.2016 12:43:14 - 
&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НоваяЗаявка", Истина);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыСозданияЗаявки", ЭтаФорма);
	ОткрытьФорму("Обработка.rgsИнтеграцияСERM.Форма.ФормаЗаявки", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры // } RGS VShamin 04.05.2016 12:43:15 - 

// { RGS VShamin 16.05.2016 17:43:48 - 
Процедура ПриЗакрытииФормыСозданияЗаявки(РезультатЗакрытия, ДополнительныеПараметры)

	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия Тогда
		ОбновитьСписокЗаявокНаСервере();
	КонецЕсли;

КонецПроцедуры // } RGS VShamin 16.05.2016 17:43:48 - 

#КонецОбласти
