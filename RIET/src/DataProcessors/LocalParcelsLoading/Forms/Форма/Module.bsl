
/////////////////////////////////////////////////////////////////////////////////////
// !!!  WAREHOUSE FROM ТОЛЬКО MAJOR MOSCOW    !!!

//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокLocalItemsWIthoutAUs.Параметры.УстановитьЗначениеПараметра("МассивParcels", Новый Массив);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайл();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Файлы xls (*.xls)|*.xls|Файлы xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
		Если НЕ ЗначениеЗаполнено(FullPath) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Select file!",
				, "Объект", "FullPath");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьParcelsИзФайла(FullPath);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьParcelsИзФайла(FullPath)
	
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(FullPath) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(FullPath);
	РасширениеФайла = НРег(Файл.Расширение);	
	Если НЕ РасширениеФайла = ".xls" И НЕ РасширениеФайла = ".xlsx" Тогда	
		Сообщить("Unknown file extension (." + РасширениеФайла + "). Only .xls or .xlsx files can be used!");
		Возврат;	
	КонецЕсли;
		
	ЗагрузитьParcelsИзПроверенногоФайла(FullPath);
		
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьParcelsИзПроверенногоФайла(FullPath)
	
	Отказ = Ложь;
	Состояние("Loading in progress. Please, wait.");
	   		
	Excel = Неопределено;
	Workbooks = Неопределено;
	Worksheet = Неопределено;
	
	Состояние("Opening Excel...");
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Failed to open Excel!
			|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		Состояние("Opening file with Excel...");
		Workbooks = Excel.Workbooks;
		Попытка
			Workbook = Workbooks.Open(FullPath, , Истина);
		Исключение
			Excel.Quit();
			Сообщить("Failed to open file with Excel!
				|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Состояние("Opening Excel sheet...");
		Попытка
			WorkSheet = Workbook.Worksheets(1);
		Исключение
			Сообщить("Failed to open First sheet!
				|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СвойстваСтруктуры = "ItemNo,ParentCompany,PONo,PartNo,ItemSerialNo,Description,QtyEA,NetWeightKG,ParcelNo,WarehouseTo,NumOfParcels," +
		"ParcelSerialNo,PackingType,LengthM,WidthM,HeightM,GrossWeightKG,Comment,DeliveryDate,HazardClass";
	
	ПрочитатьФайлВоВременнуюТаблицу(WorkSheet, СвойстваСтруктуры);	
		
	Состояние("Closing file...");
	Если Workbook <> Неопределено Тогда
		
		Попытка
			Workbook.Close(False);
		Исключение
			Сообщить("Failed to close Excel Workbook!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	Если Workbooks <> Неопределено Тогда
		
		Попытка
			Workbooks.Close();
		Исключение
			Сообщить("Failed to close Excel Workbooks!
				|" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Если Excel <> Неопределено Тогда
		
		Состояние("Closing Excel...");
		Попытка
			Excel.Quit();
		Исключение
			Сообщить("Failed to close Excel!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	ПроверитьИЗагрузитьФайлНаСервере(СвойстваСтруктуры);
	     		
КонецПроцедуры 

// ЧТЕНИЕ ФАЙЛА ВО ВРЕМЕННУЮ ТАБЛИЦУ

&НаКлиенте
Процедура ПрочитатьФайлВоВременнуюТаблицу(WorkSheet, СвойстваСтруктуры)
	
	ТаблицаExcel.Очистить();
		
	СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(WorkSheet, СвойстваСтруктуры);
	              		
	//записываем данные каждой строки файла в новую строку таблицы формы
	СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
	КоличествоЯчеек = СтруктураЗначенийСтроки.Количество();
	НомерСтроки = 2;
	Пока Истина Цикл
		
		//добавляем значение каждой ячейки файла в структуру значений
		Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
			
			ЗначениеЯчейки = WorkSheet.Cells(НомерСтроки, ЭлементСтруктуры.Значение).Value;
			СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = ЗначениеЯчейки;
			
		КонецЦикла;
		
		//проверяем, если все ячейки пустые - считаем, что последняя строка
		КолВоНезаполненныхЭлементовСтруктуры = ВернутьКолВоНезаполненныхЭлементовСтруктуры(СтруктураЗначенийСтроки);
		Если КоличествоЯчеек = КолВоНезаполненныхЭлементовСтруктуры Тогда 
			Прервать;
		КонецЕсли;
		
		//добавляем строку временной таблицы
		НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
		НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
		
		НоваяСтрокаТаблицы.ParcelNo = СокрЛП(НоваяСтрокаТаблицы.ParcelNo);
		НоваяСтрокаТаблицы.ItemNo = СокрЛП(НоваяСтрокаТаблицы.ItemNo);
		НоваяСтрокаТаблицы.PONo = СокрЛП(НоваяСтрокаТаблицы.PONo);
		
        НоваяСтрокаТаблицы.PackingType = СокрЛП(НоваяСтрокаТаблицы.PackingType);
		НоваяСтрокаТаблицы.PartNo = СокрЛП(СтрЗаменить(НоваяСтрокаТаблицы.PartNo, " ", ""));
		НоваяСтрокаТаблицы.PartNo = СтрЗаменить(НоваяСтрокаТаблицы.PartNo, Символы.НПП, "");
		
		НоваяСтрокаТаблицы.ParentCompany = СокрЛП(ВРег(НоваяСтрокаТаблицы.ParentCompany));
		НоваяСтрокаТаблицы.Description = СокрЛП(НоваяСтрокаТаблицы.Description);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;  
	
			
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруИменИНомеровКолонок(WorkSheet, СвойстваСтруктуры)
	
	СтруктураКолонокИНомеров = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Пока Истина Цикл
		
		ТекстЯчейки = СокрЛП(WorkSheet.Cells(1, НомерКолонки).Text);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
		
		Если ТекстЯчейки = "ItemNo" Тогда
			СтруктураКолонокИНомеров.ItemNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "ParentCompany" Тогда
			СтруктураКолонокИНомеров.ParentCompany = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "PONo" Тогда
			СтруктураКолонокИНомеров.PONo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "PartNo" Тогда
			СтруктураКолонокИНомеров.PartNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "ItemSerialNo" Тогда
			СтруктураКолонокИНомеров.ItemSerialNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Description" Тогда
			СтруктураКолонокИНомеров.Description = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "QtyEA" Тогда
			СтруктураКолонокИНомеров.QtyEA = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "NetWeightKG" Тогда
			СтруктураКолонокИНомеров.NetWeightKG = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "ParcelNo" Тогда
			СтруктураКолонокИНомеров.ParcelNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "WarehouseTo" Тогда
			СтруктураКолонокИНомеров.WarehouseTo = НомерКолонки;
	    ИначеЕсли ТекстЯчейки = "NumOfParcels" Тогда
			СтруктураКолонокИНомеров.NumOfParcels = НомерКолонки;
        ИначеЕсли ТекстЯчейки = "ParcelSerialNo" Тогда
			СтруктураКолонокИНомеров.ParcelSerialNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "PackingType" Тогда
			СтруктураКолонокИНомеров.PackingType = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "LengthM" Тогда
			СтруктураКолонокИНомеров.LengthM = НомерКолонки;
        ИначеЕсли ТекстЯчейки = "WidthM" Тогда
			СтруктураКолонокИНомеров.WidthM = НомерКолонки;
        ИначеЕсли ТекстЯчейки = "HeightM" Тогда
			СтруктураКолонокИНомеров.HeightM = НомерКолонки;                                  
		ИначеЕсли ТекстЯчейки = "GrossWeightKG" Тогда
			СтруктураКолонокИНомеров.GrossWeightKG = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Comment" Тогда
			СтруктураКолонокИНомеров.Comment = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "DeliveryDate" Тогда
			СтруктураКолонокИНомеров.DeliveryDate = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "HazardClass" Тогда
			СтруктураКолонокИНомеров.HazardClass = НомерКолонки;
		КонецЕсли; 
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Отказ = Ложь;
	Для Каждого КлючИЗначение Из СтруктураКолонокИНомеров Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			Сообщить("Необходимо проверить наличие колонки с данными """ + КлючИЗначение.Ключ + """!", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтруктураКолонокИНомеров;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Функция ВернутьКолВоНезаполненныхЭлементовСтруктуры(СтруктураЗначенийСтроки)
	
	КолВоНезаполненныхЯчеек = 0;
	Для Каждого КлючИЗначение Из СтруктураЗначенийСтроки Цикл
		
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			КолВоНезаполненныхЯчеек = КолВоНезаполненныхЯчеек + 1;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат КолВоНезаполненныхЯчеек;
	
КонецФункции

//ПРОВЕРКА ДАННЫХ

&НаСервере
Процедура ПроверитьИЗагрузитьФайлНаСервере(СвойстваСтруктуры)
	  		
	Отказ = Ложь;
	
	WarehouseFrom = Справочники.Warehouses.НайтиПоКоду("RUS_MJRM");
	Если Не ЗначениеЗаполнено(WarehouseFrom) Тогда
		
		Сообщить("Failed to find warehouse by code 'RUS_MJRM'!");
		Отказ = Истина;		
		
	иначе
		
		ServiceProvider = Справочники.ServiceProviders.НайтиПоРеквизиту("DefaultWarehouse", WarehouseFrom);
		Если Не ЗначениеЗаполнено(ServiceProvider) Тогда
			Сообщить("Failed to find Service provider by default warehouse '" + СокрЛП(WarehouseFrom) + "'!");
			Отказ = Истина;		
		иначе
			Prefix = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ServiceProvider, "Prefix");
			Если Не ЗначениеЗаполнено(Prefix) Тогда
				Сообщить("For service provider '" + СокрЛП(ServiceProvider) + "' prefix is empty!");
				Отказ = Истина;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	QtyUOM = Справочники.UOMs.НайтиПоКоду("EA");
	Если Не ЗначениеЗаполнено(QtyUOM) Тогда
		Сообщить("Failed to find Qty UOM by code 'EA'!");
		Отказ = Истина;		
	КонецЕсли;

	DimsUOM = Справочники.UOMs.НайтиПоКоду("M");
	Если Не ЗначениеЗаполнено(DimsUOM) Тогда
		Сообщить("Failed to find Dims UOM by code 'M'!");
		Отказ = Истина;		
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("There were errors. No Parcels were loaded!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли; 
	        	    	
	СтруктураТаблицОбъектов = ПолучитьСтруктуруТаблицОбъектов(ТаблицаExcel, Prefix);
	
	ВременнаяТаблицаНормальная = ПроверитьВременнуюТаблицу(СвойстваСтруктуры, СтруктураТаблицОбъектов);
	Если НЕ ВременнаяТаблицаНормальная Тогда
		Возврат;
	КонецЕсли; 
		
	СоздатьОбъектыБазыИзВременнойТаблицы(СтруктураТаблицОбъектов);

КонецПроцедуры
  
&НаСервере
Функция ПроверитьВременнуюТаблицу(СвойстваСтруктуры, СтруктураТаблицОбъектов)
	
	Отказ = Ложь;
	СтруктураИменКолонок = Новый Структура(СвойстваСтруктуры);
	
	//проверяем, что заполнены значения во всех обязательных колонках
	
	Для Каждого Стр из ТаблицаExcel Цикл 
		
		ПрефиксОшибки = "In line " + Стр.НомерСтрокиФайла + ": ";
		
		Для Каждого КлючИЗначение из СтруктураИменКолонок Цикл
			
			ИмяКолонки = КлючИЗначение.Ключ;
			Если Не ЗначениеЗаполнено(Стр[ИмяКолонки])
				И ИмяКолонки <> "PONo"
				И ИмяКолонки <> "ItemSerialNo"
				И ИмяКолонки <> "NetWeightKG"
				И ИмяКолонки <> "ParcelSerialNo"
				И ИмяКолонки <> "Comment" Тогда 
				Сообщить(ПрефиксОшибки + "cell """ + ИмяКолонки + """ is empty!");
				Отказ = Истина;
				Продолжить;	
			КонецЕсли;
			
			СтроковоеЗначение = СокрЛП(Стр[ИмяКолонки]);
			
			// Parent company
			Если ИмяКолонки = "ParentCompany" Тогда
				СтрокаParentCompany = СтруктураТаблицОбъектов.ТаблицаParentCompanies.Найти(СтроковоеЗначение, "ParentCompanyCode");
				Если СтрокаParentCompany = Неопределено Тогда  
					Сообщить(ПрефиксОшибки + "failed to find Parent company by Code '" + СтроковоеЗначение + "'!");
					Отказ = Истина;
				иначе
					Стр.ParentCompanyСсылка = СтрокаParentCompany.ParentCompany;
				КонецЕсли;
	 		КонецЕсли;
			
			// Warehouse To
			Если ИмяКолонки = "WarehouseTo" Тогда 
				
				Если СтроковоеЗначение = "RUS_UNKN" Тогда 
					Стр.WarehouseToСсылка = WarehouseFrom;
				иначе
					СтрокаWarehouseTo = СтруктураТаблицОбъектов.ТаблицаWarehouses.Найти(СтроковоеЗначение, "WarehouseCode");
					Если СтрокаWarehouseTo = Неопределено Тогда  
						Сообщить(ПрефиксОшибки + "failed to find Warehouse by Code '" + СтроковоеЗначение + "'!");
						Отказ = Истина;
					иначе
						Стр.WarehouseToСсылка = СтрокаWarehouseTo.Warehouse;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
			
			// Hazard Class
			Если ИмяКолонки = "HazardClass" Тогда 
				СтрокаHazardClass = СтруктураТаблицОбъектов.ТаблицаHazardClasses.Найти(СтроковоеЗначение, "HazardClassCode");
				Если СтрокаHazardClass = Неопределено Тогда  
					Сообщить(ПрефиксОшибки + "failed to find Hazard class by Code '" + СтроковоеЗначение + "'!");
					Отказ = Истина;
				иначе
					Стр.HazardClassСсылка = СтрокаHazardClass.HazardClass;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить("There were errors. No Parcels were loaded!", СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруТаблицОбъектов(ТаблицаExcel, Prefix)
	
	// Сформируем пакет запросов
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("Prefix", Prefix);
	
	СтруктураПараметров.Вставить("МассивParcelNo", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "ParcelNo"));
	СтруктураТекстов.Вставить("Parcels",
		"ВЫБРАТЬ
		|	Parcels.Ссылка КАК Parcel,
		|	ВЫРАЗИТЬ(Parcels.Код КАК СТРОКА(30)) КАК ParcelNo
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	НЕ Parcels.Отменен
		|	И Parcels.Код В(&МассивParcelNo)
		|	И Parcels.LocalOnly
		|	И Parcels.Prefix = &Prefix");
						
	СтруктураПараметров.Вставить("МассивLocalItemNo", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "ItemNo"));
	СтруктураТекстов.Вставить("LocalItems",
	    "ВЫБРАТЬ
	    |	Items.Ссылка КАК Item,
	    |	ВЫРАЗИТЬ(Items.Наименование КАК СТРОКА(30)) КАК ItemNo
	    |ИЗ
	    |	Справочник.СтрокиИнвойса КАК Items
	    |ГДЕ
	    |	Items.LocalOnly
	    |	И Items.Наименование В(&МассивLocalItemNo)
	    |	И Items.LocalOnly
	    |	И Items.Prefix = &Prefix");
		
	СтруктураПараметров.Вставить("МассивWarehouse", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "WarehouseTo"));
	СтруктураТекстов.Вставить("Warehouses",
	    "ВЫБРАТЬ
	    |	Warehouses.Ссылка КАК Warehouse,
	    |	ВЫРАЗИТЬ(Warehouses.Код КАК СТРОКА(50)) КАК WarehouseCode
	    |ИЗ
	    |	Справочник.Warehouses КАК Warehouses
	    |ГДЕ
	    |	Warehouses.Код В(&МассивWarehouse)
	    |	И (Warehouses.Warehouse
	    |			ИЛИ Warehouses.Port)");	
		     					
	СтруктураПараметров.Вставить("МассивParentCompanies", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "ParentCompany"));
	СтруктураТекстов.Вставить("ParentCompanies",
	    "ВЫБРАТЬ
	    |	SoldTo.Ссылка КАК ParentCompany,
	    |	ВЫРАЗИТЬ(SoldTo.Код КАК СТРОКА(10)) КАК ParentCompanyCode
	    |ИЗ
	    |	Справочник.SoldTo КАК SoldTo
	    |ГДЕ
	    |	НЕ SoldTo.ПометкаУдаления
	    |	И SoldTo.Код В(&МассивParentCompanies)");	
		
	СтруктураПараметров.Вставить("МассивPONo", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "PONo"));
	СтруктураТекстов.Вставить("POLines",
	    "ВЫБРАТЬ
	    |	ВЫРАЗИТЬ(POLines.Владелец.Код КАК СТРОКА(10)) КАК PONo,
	    |	POLines.Ссылка КАК POLine,
	    |	POLines.КодПоставщика КАК PartNo,
	    |	POLines.Владелец.БОРГ.Компания КАК ParentCompany,
	    |	POLines.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	    |	POLines.Каталог КАК Catalog,
	    |	POLines.Классификатор КАК ERPTreatment,
	    |	POLines.Владелец.СтранаПоставщика КАК CountryOfOrigin,
	    |	POLines.КостЦентр КАК AU,
	    |	POLines.КостЦентр.DefaultActivity КАК AUActivity,
	    |	POLines.АктивитиКод КАК Activity,
	    |	POLines.Количество КАК Qty,
	    |	POLines.ЕдиницаИзмерения КАК QtyUOM,
	    |	POLines.Цена КАК Price,
	    |	POLines.Валюта КАК Currency
	    |ИЗ
	    |	Справочник.СтрокиЗаявкиНаЗакупку КАК POLines
	    |ГДЕ
	    |	POLines.Владелец.Код В(&МассивPONo)
	    |	И НЕ POLines.ПометкаУдаления");
							
	СтруктураПараметров.Вставить("МассивHazardClasses", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "HazardClass"));
	СтруктураТекстов.Вставить("HazardClasses",
	    "ВЫБРАТЬ
	    |	HazardClasses.Ссылка КАК HazardClass,
	    |	ВЫРАЗИТЬ(HazardClasses.Код КАК СТРОКА(3)) КАК HazardClassCode
	    |ИЗ
	    |	Справочник.HazardClasses КАК HazardClasses
	    |ГДЕ
	    |	НЕ HazardClasses.ПометкаУдаления
	    |	И HazardClasses.Код В(&МассивHazardClasses)");
		
		
	// Выполним пакет запросов
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	// Разберем результаты
	СтруктураОбъектовБазы = Новый Структура("ТаблицаParcels, ТаблицаLocalItems, ТаблицаWarehouses, " +
		"ТаблицаParentCompanies, ТаблицаPOLines, ТаблицаHazardClasses");
	   			      									
	// Parcels	
	СтруктураОбъектовБазы.Вставить("ТаблицаParcels", СтруктураРезультатов.Parcels.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаParcels, "ParcelNo");
	СтруктураОбъектовБазы.ТаблицаParcels.Индексы.Добавить("ParcelNo");
			
	// Local Items	
	СтруктураОбъектовБазы.Вставить("ТаблицаLocalItems", СтруктураРезультатов.LocalItems.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаLocalItems, "ItemNo");
	СтруктураОбъектовБазы.ТаблицаLocalItems.Индексы.Добавить("ItemNo");

	// Warehouses	
	СтруктураОбъектовБазы.Вставить("ТаблицаWarehouses", СтруктураРезультатов.Warehouses.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаWarehouses, "WarehouseCode");
	СтруктураОбъектовБазы.ТаблицаWarehouses.Индексы.Добавить("WarehouseCode");
       	
	// Parent Companies	
	СтруктураОбъектовБазы.Вставить("ТаблицаParentCompanies", СтруктураРезультатов.ParentCompanies.Выгрузить());
	Для Каждого Стр из СтруктураОбъектовБазы.ТаблицаParentCompanies Цикл 
		Стр.ParentCompanyCode = СокрЛП(ВРег(Стр.ParentCompanyCode));
	КонецЦикла;
	СтруктураОбъектовБазы.ТаблицаParentCompanies.Индексы.Добавить("ParentCompanyCode");
	
	// PO Lines	
	СтруктураОбъектовБазы.Вставить("ТаблицаPOLines", СтруктураРезультатов.POLines.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаPOLines, "PONo");
	СтруктураОбъектовБазы.ТаблицаPOLines.Индексы.Добавить("PONo");
	
	// Hazard Class	
	СтруктураОбъектовБазы.Вставить("ТаблицаHazardClasses", СтруктураРезультатов.HazardClasses.Выгрузить());
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(СтруктураОбъектовБазы.ТаблицаHazardClasses, "HazardClassCode");
	СтруктураОбъектовБазы.ТаблицаHazardClasses.Индексы.Добавить("HazardClassCode");
	
	Возврат СтруктураОбъектовБазы;
                  	            	
КонецФункции

                    
// СОЗДАНИЕ ОБЪЕКТОВ

&НаСервере
Процедура СоздатьОбъектыБазыИзВременнойТаблицы(СтруктураТаблицОбъектов) 
	
	Отказ = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	МассивParcelNo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "ParcelNo");
	
	МассивParcels = Новый Массив;
	
	СтруктураПоискаПоParcelNo = Новый Структура("ParcelNo");
	Для Каждого ParcelNo из МассивParcelNo Цикл 
		
		СтруктураПоискаПоParcelNo.ParcelNo = ParcelNo;
		
		ТаблицаДляСозданияParcel = ТаблицаExcel.Выгрузить(СтруктураПоискаПоParcelNo);
		
		СоздатьParcelИзТаблицы(Отказ, МассивParcels, ТаблицаДляСозданияParcel, СтруктураТаблицОбъектов, RefillExisting);	
		         				
	КонецЦикла;
	
	Если Не Отказ Тогда 
		
		СписокLocalItemsWIthoutAUs.Параметры.УстановитьЗначениеПараметра("МассивParcels", МассивParcels);	
		Элементы.СписокLocalItemsWIthoutAUs.Обновить();
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = СписокLocalItemsWIthoutAUs.ТекстЗапроса;		
		Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() > 0 Тогда 
			
			СообщениеДляRIET = "Need to fill AU for local items w/o PO:";
			МассивParcelNo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗ, "ParcelNo");
			СтруктураПоиска = Новый Структура("ParcelNo");
			
			Для Каждого ParcelNo из МассивParcelNo Цикл 
				
				СообщениеДляRIET = СообщениеДляRIET + "
					|For parcel " + СокрЛП(ParcelNo) + ":";
					
				СтруктураПоиска.ParcelNo = ParcelNo;
				МассивСтрок = ТЗ.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаItem из МассивСтрок Цикл 
					СообщениеДляRIET = СообщениеДляRIET + "
						| " + СокрЛП(СтрокаItem.Item);
				КонецЦикла;
				
			КонецЦикла;
			
			// { RGS AGorlenko 09.06.2014 16:31:06 - S-I-0000774
			УстановитьПривилегированныйРежим(Истина);
			// } RGS AGorlenko 09.06.2014 16:35:27 - S-I-0000774
			РГСофт.ЗарегистрироватьПочтовоеСообщение(
				Константы.АдресатыПолученияОтчетаПоОбменуСоСтороныRietLeg7.Получить(), 
				"Empty AU in Major local items", 
				СокрЛП(СообщениеДляRIET));
			// { RGS AGorlenko 09.06.2014 16:31:06 - S-I-0000774
			УстановитьПривилегированныйРежим(Ложь);
			// } RGS AGorlenko 09.06.2014 16:35:27 - S-I-0000774
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Отказ Тогда 
		ОтменитьТранзакцию();
		Сообщить("There were errors. No Parcels were loaded!", СтатусСообщения.ОченьВажное);
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщить("Success.", СтатусСообщения.Информация);
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура СоздатьParcelИзТаблицы(Отказ, МассивParcels, ТаблицаДляСозданияParcel, СтруктураТаблицОбъектов, RefillExisting)
	
	ПерваяСтрокаТаблицы = ТаблицаДляСозданияParcel[0];
	
	ParcelСсылка = ПолучитьСсылкуParcel(ПерваяСтрокаТаблицы.ParcelNo, СтруктураТаблицОбъектов.ТаблицаParcels);
	Если ParcelСсылка = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если Parcel уже есть в системе и не стоит галочка перезаполнения - пропускаем его
	Если Не RefillExisting и ЗначениеЗаполнено(ParcelСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ParcelОбъект = ПолучитьParcelОбъект(ParcelСсылка, ПерваяСтрокаТаблицы.ParcelNo);
	Если ParcelОбъект = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	ЗаполнитьШапкуParcel(Отказ, ParcelОбъект, ПерваяСтрокаТаблицы);
	
	// Items
	ЗаполнитьТЧДеталиParcel(Отказ, ТаблицаДляСозданияParcel, СтруктураТаблицОбъектов, ParcelОбъект);
	 			
	Если НЕ Отказ И ParcelОбъект.Модифицированность() Тогда
		
		Попытка
			ParcelОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to save """ + СокрЛП(ParcelОбъект) + """: " + ОписаниеОшибки(),
				,,,Отказ)
		КонецПопытки;
		
	КонецЕсли; 
	
	МассивParcels.добавить(ParcelОбъект.Ссылка);;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШапкуParcel(Отказ, ParcelОбъект, СтрокаParcel);
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.ПометкаУдаления, Ложь);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.LocalOnly, Истина);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Проверен, Истина);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Prefix, Prefix);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Urgency, Перечисления.Urgencies.Standard);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.HazardClass, СтрокаParcel.HazardClassСсылка);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, WarehouseFrom);
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DeliveredToWH, СтрокаParcel.DeliveryDate);
		
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseTo, СтрокаParcel.WarehouseToСсылка);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.SerialNo, СокрЛП(СтрокаParcel.ParcelSerialNo));
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.NumOfParcels, СтрокаParcel.NumOfParcels);
	
	PackingType = Справочники.PackingTypes.НайтиПоКоду(СокрЛП(СтрокаParcel.PackingType));
	Если НЕ ЗначениеЗаполнено(PackingType) Тогда
		PackingType = Справочники.PackingTypes.СоздатьНовыйPackingType(СокрЛП(СтрокаParcel.PackingType));
	КонецЕсли;

	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.PackingType, PackingType);
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Length, СтрокаParcel.LengthM);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Width, СтрокаParcel.WidthM);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Height, СтрокаParcel.HeightM);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.DIMsUOM, DIMsUOM);
	
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeight, СтрокаParcel.GrossWeightKG);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.GrossWeightKG, СтрокаParcel.GrossWeightKG);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.NetWeight, СтрокаParcel.NetWeightKG);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.NetWeightKG, СтрокаParcel.NetWeightKG);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WeightUOM, Справочники.UOMs.KG);
	РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Comment, СокрЛП(СтрокаParcel.Comment));
	 	   		
КонецФункции 

&НаСервере
Процедура ЗаполнитьТЧДеталиParcel(Отказ, ТаблицаДляСозданияParcel, СтруктураТаблицОбъектов, ParcelОбъект)
	
	ItemСсылка = Неопределено;
	МассивOLDItems = ParcelОбъект.Детали.ВыгрузитьКолонку("СтрокаИнвойса");
	МассивNewItems = Новый Массив;
	
	ТаблицаLocalItems = СтруктураТаблицОбъектов.ТаблицаLocalItems;
	
	Для Каждого СтрокаItem из ТаблицаДляСозданияParcel Цикл
		        				
		// Local Item
		СтрокаLocalItem = ТаблицаLocalItems.Найти(СтрокаItem.ItemNo, "ItemNo");
		Если СтрокаLocalItem <> Неопределено Тогда  
			ItemСсылка = СтрокаLocalItem.Item;
		КонецЕсли;

		Если ItemСсылка <> Неопределено Тогда 
			
			СтрокаТЧ = ParcelОбъект.Детали.Найти(ItemСсылка, "СтрокаИнвойса");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ParcelОбъект.Детали.Добавить();
				СтрокаТЧ.СтрокаИнвойса = ItemСсылка;
			КонецЕсли;
					
		иначе
			
			СтрокаТЧ = ParcelОбъект.Детали.Добавить();
			 		               			
		КонецЕсли;
		
		// PO no. - PO line no.
		Если Не ПустаяСтрока(ЗначениеЗаполнено(СтрокаItem.PONo)) Тогда
			
			
			СтруктураДанныхPOLine = ПолучитьСтруктуруДанныхPOLine(СтруктураТаблицОбъектов.ТаблицаPOLines, 
				СтрокаItem.PONo, СтрокаItem.ParentCompanyСсылка);
			
			Если ЗначениеЗаполнено(СтруктураДанныхPOLine) Тогда
				РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаЗаявкиНаЗакупку, СтруктураДанныхPOLine.POLineNo);
			КонецЕсли; 
			
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.НомерЗаявкиНаЗакупку, СокрЛП(СтрокаItem.PONo));
			
		КонецЕсли;
		
		// Invoice line
		InvoiceLine = ПолучитьInvoiceLineДляСтрокиParcel(Отказ, СтрокаItem, ТаблицаLocalItems, СтруктураДанныхPOLine, 
			СтрокаТЧ.НомерЗаявкиНаЗакупку, ItemСсылка);
			
		//СообщениеДляRIET = СообщениеДляRIET + ПрефиксСообщенияОбОшибке + 
		//	|
			
		СтруктураРеквизитовItem = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(InvoiceLine, 
			"НомерЗаявкиНаЗакупку,СтрокаЗаявкиНаЗакупку,ImportReference,СерийныйНомер,Количество,ЕдиницаИзмерения");
		
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаИнвойса, InvoiceLine);
		POLineNo = РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовItem.СтрокаЗаявкиНаЗакупку, "НомерСтрокиЗаявкиНаЗакупку");
		Если ЗначениеЗаполнено(POLineNo) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СтрокаЗаявкиНаЗакупку, POLineNo);
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Receiver, СтруктураРеквизитовItem.ImportReference);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.Qty, СтруктураРеквизитовItem.Количество);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.QtyUOM, СтруктураРеквизитовItem.ЕдиницаИзмерения);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.НомерЗаявкиНаЗакупку, СтруктураРеквизитовItem.НомерЗаявкиНаЗакупку);
		РГСофтКлиентСервер.УстановитьЗначение(СтрокаТЧ.СерийныйНомер, СтруктураРеквизитовItem.СерийныйНомер);
				
		Если СтрокаТЧ.СтрокаИнвойса <> Неопределено Тогда
			МассивNewItems.Добавить(СтрокаТЧ.СтрокаИнвойса);
		КонецЕсли;
		
	КонецЦикла;

	// Удалим старые Items
	OLDItems = РГСофтКлиентСервер.ВычестьМассивы(МассивOLDItems, МассивNewItems);
	Для Каждого OLDItem из OLDItems Цикл 
		СтрокаТЧ = ParcelОбъект.Детали.Найти(OLDItem, "СтрокаИнвойса");
		ParcelОбъект.Детали.Удалить(СтрокаТЧ);	
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьСтруктуруДанныхPOLine(ТаблицаPOLines, PONo, ParentCompany)
	
	// Найдем PO lines, которые относятся к этой PO
	СтруктураПоискаPOLine = Новый Структура("PONo,ParentCompany", PONo, ParentCompany);
	 		
	ПодходящиеPOLines = ТаблицаPOLines.НайтиСтроки(СтруктураПоискаPOLine);
	
	// Если не найдено ни одной PO line - сообщаем об ошибке и выходим
	Если ПодходящиеPOLines.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// Создадим структуру, которую будем возвращать
	СтрокаСвойств = "POLine, POLineNo, AU, AUActivity, Activity, ERPTreatment, Catalog, CountryOfOrigin, Price, Currency";
	СтруктураДанныхPOLine = Новый Структура(СтрокаСвойств);
	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхPOLine, ПодходящиеPOLines[0]);

	Возврат СтруктураДанныхPOLine;
	
КонецФункции

&НаСервере
Функция ПолучитьInvoiceLineДляСтрокиParcel(Отказ, СтрокаItem, ТаблицаLocalItems, СтруктураДанныхPOLine, НомерЗаявкиНаЗакупку, ItemСсылка)
	
	InvoiceLineОбъект = Неопределено;
	       			
	Если ItemСсылка <> Неопределено Тогда
		InvoiceLineОбъект = ItemСсылка.ПолучитьОбъект();
 	Иначе
		InvoiceLineОбъект = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		InvoiceLineОбъект.LocalOnly = Истина;
		InvoiceLineОбъект.Наименование = СтрокаItem.ItemNo;
		InvoiceLineОбъект.Prefix = Prefix;
	КонецЕсли;
	  		
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.ПометкаУдаления, Ложь);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.НомерЗаявкиНаЗакупку, НомерЗаявкиНаЗакупку);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.SoldTo, СтрокаItem.ParentCompanyСсылка);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.КодПоИнвойсу, СокрЛП(СтрокаItem.PartNo));
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.ЕдиницаИзмерения, QtyUOM);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Количество, СтрокаItem.QtyEA);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СерийныйНомер, СокрЛП(СтрокаItem.ItemSerialNo));
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.НаименованиеТовара, СокрЛП(СтрокаItem.Description));
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.DescriptionRus, СокрЛП(СтрокаItem.Description));
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.WeightUOM, Справочники.UOMs.KG);	

	Если СтруктураДанныхPOLine <> Неопределено Тогда 
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтрокаЗаявкиНаЗакупку, СтруктураДанныхPOLine.POLine);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Каталог, СтруктураДанныхPOLine.Catalog);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Классификатор, СтруктураДанныхPOLine.ERPTreatment);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.КостЦентр, СтруктураДанныхPOLine.AU);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(СтруктураДанныхPOLine.Activity));
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.СтранаПроисхождения, СокрЛП(СтруктураДанныхPOLine.CountryOfOrigin));
		Если НЕ ЗначениеЗаполнено(InvoiceLineОбъект.Активити) Тогда
			РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Активити, СокрЛП(СтруктураДанныхPOLine.AUActivity));
		КонецЕсли;
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Цена, СтруктураДанныхPOLine.Price);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Сумма, InvoiceLineОбъект.Цена * InvoiceLineОбъект.Количество);
		РГСофтКлиентСервер.УстановитьЗначение(InvoiceLineОбъект.Currency, СтруктураДанныхPOLine.Currency);
		
	КонецЕсли;

	Если Не Отказ И InvoiceLineОбъект.Модифицированность() Тогда 
		
		Попытка
			InvoiceLineОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to save """ + СокрЛП(InvoiceLineОбъект) + """: " + ОписаниеОшибки(),
				,,, Отказ)
		КонецПопытки;

		Если ТаблицаLocalItems.Найти(СтрокаItem.ItemNo, "ItemNo") = Неопределено Тогда
			НоваяСтрокаLocalItems = ТаблицаLocalItems.Добавить();
			НоваяСтрокаLocalItems.Item = InvoiceLineОбъект.Ссылка; 	
			НоваяСтрокаLocalItems.ItemNo = InvoiceLineОбъект.Наименование;
		КонецЕсли;
	
	КонецЕсли;

	Возврат InvoiceLineОбъект.Ссылка;
	
КонецФункции
                
&НаСервере
Функция ПолучитьСсылкуParcel(ParcelNo, ТЗParcels)
	
	СтруктураПоискаПоParcelNo = Новый Структура("ParcelNo", ParcelNo);
	МассивНайденныхParcels = ТЗParcels.НайтиСтроки(СтруктураПоискаПоParcelNo);
	КоличествоНайденныхParcels = МассивНайденныхParcels.Количество();
	Если КоличествоНайденныхParcels = 0 Тогда
		
		Возврат Справочники.Parcels.ПустаяСсылка();
		
	ИначеЕсли КоличествоНайденныхParcels = 1 Тогда 
		 				
		Возврат МассивНайденныхParcels[0].Parcel;
						
	ИначеЕсли КоличествоНайденныхParcels > 1 Тогда
		
		Сообщить("There are several Parcels #" + ParcelNo + " in the base!");
		Возврат Неопределено;
			
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ПолучитьParcelОбъект(ParcelСсылка, ParcelNo)
	
	Если ParcelСсылка = Справочники.Parcels.ПустаяСсылка() Тогда
		
		ParcelОбъект = Справочники.Parcels.СоздатьЭлемент(); 
		ParcelОбъект.Код = СокрЛП(ParcelNo);
		Возврат ParcelОбъект;
		
	Иначе
		  		
		Возврат ParcelСсылка.ПолучитьОбъект();
				
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура СписокLocalItemsWIthoutAUsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ParcelNo" Тогда 
		ПоказатьЗначение(,Элементы.СписокLocalItemsWIthoutAUs.ТекущиеДанные["Ссылка"]);
	Иначе 
		ПоказатьЗначение(,Элементы.СписокLocalItemsWIthoutAUs.ТекущиеДанные[Поле.Имя]);
	КонецЕсли;

КонецПроцедуры


