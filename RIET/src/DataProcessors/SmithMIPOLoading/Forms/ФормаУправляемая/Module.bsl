
//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	#Если ВебКлиент Тогда
		Сообщить("Smith POs can not be loaded via browser, use 1c thin client!");
		Отказ = Истина;
	#Иначе
		ВыбратьФайл();	
	#КонецЕсли
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда

//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Files xls (*.xls)|*.xls|Files xlsx (*.xlsx)|*.xlsx|Files xlsb (*.xlsb)|*.xlsb";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли; 
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
		Если НЕ ЗначениеЗаполнено(FullPath) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Need to select file!",
				, "Объект", "FullPath");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(FullPath) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Состояние("Reading file...");
	ЗаполнитьТаблицуPOsИзФайлаXLS(Отказ, FullPath);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Creating POs and PO lines...");
	Если ЭтоMI Тогда 
		СоздатьPOsИPOLinesДляMI(Отказ);
	иначе
		СоздатьPOsИPOLinesДляSMITH(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Предупреждение(
			"There were errors!
			|No PO was loaded!",
			60,
			"Attention!");
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(, , "POs were successfully loaded");
	КонецЕсли;
	
	Попытка
		ПереместитьФайлВПапкуDone(FullPath);
	Исключение
		Сообщить(
			"Failed to move file to directory Done!
			|" + ОписаниеОшибки());
	КонецПопытки;		
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// РАЗБОР ФАЙЛА

&НаКлиенте
Процедура ЗаполнитьТаблицуPOsИзФайлаXLS(Отказ, ПолноеИмяXLSФайла)
	
	Excel = Неопределено;
	Workbooks = Неопределено;
	Worksheet = Неопределено;
	
	Состояние("Opening Excel...");
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Failed to open Excel!
			|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		Состояние("Opening file with Excel...");
		Workbooks = Excel.Workbooks;
		Попытка
			Workbook = Workbooks.Open(ПолноеИмяXLSФайла, , Истина);
		Исключение
			Excel.Quit();
			Сообщить("Failed to open file with Excel!
				|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Состояние("Opening Excel sheet...");
		Попытка
			WorkSheet = Workbook.Worksheets(1);
		Исключение
			Сообщить("Failed to open First sheet!
			|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
		Попытка
			ЗаполнитьТаблицуPOsИзWorksheet(Отказ, Worksheet);
		Исключение
			Сообщить("Failed to read file:
			|" + ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;

	Состояние("Closing file...");
	Если Workbook <> Неопределено Тогда
		
		Попытка
			Workbook.Close(False);
		Исключение
			Сообщить("Failed to close Excel Workbook!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	Если Workbooks <> Неопределено Тогда
		
		Попытка
			Workbooks.Close();
		Исключение
			Сообщить("Failed to close Excel Workbooks!
				|" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Если Excel <> Неопределено Тогда
		
		Состояние("Closing Excel...");
		Попытка
			Excel.Quit();
		Исключение
			Сообщить("Failed to close Excel!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьТаблицуPOsИзWorksheet(Отказ, Worksheet)
	
	ТаблицаPOMI.Очистить();
	ТаблицаPOSmith.Очистить();
	
	Если СтрНайти(WorkSheet.Cells(1, 2).Value, "PO Information MI") > 0 Тогда
		ЭтоMI = Истина;
		ИменаКолонок = "Po_Number, Item_Code, Creation_Date, Item_Description, Line_Num, Quantity," + 
			"Unit_Price, ShipTo_Description, Co_Code, Business_Line, Cost_Center, Major, Minor_PG, Inter_Company, Local";
	Иначе 
		ЭтоMI = Ложь;
		ИменаКолонок = "po_nbr, podtl_line_nbr, po_dt, podtl_item_type, podtl_part_nbr, podtl_part_desc," + 
			"podtl_qty_ordered, unit_price, district_nbr, district_nm, debit_acct_cd";
	КонецЕсли;
	  	
	СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(WorkSheet, ИменаКолонок);	
	Если СтруктураИменИНомеровКолонок = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//перебираем все заполненные строки файла 
	
	СтруктураЗначенийСтроки = Новый Структура(ИменаКолонок);
	НомерСтроки = ?(ЭтоMI, 8, 2);
	
	Пока Истина Цикл	
		
		Если ЭтоMI Тогда 
			НоваяСтрокаТаблицы = ТаблицаPOMI.Добавить();
		Иначе 
			НоваяСтрокаТаблицы = ТаблицаPOSmith.Добавить();
		КонецЕсли;
		ЕстьДанныеВСтроке = Ложь;
		
		//добавляем значение каждой ячейки файла в структуру значений
		Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
			
			ЗначениеЯчейки = WorkSheet.Cells(НомерСтроки, ЭлементСтруктуры.Значение).Value;
			
			//произведем поиск и удаление недопустимых символов
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда 
				Пока НайтиНедопустимыеСимволыXML(ЗначениеЯчейки) > 0 Цикл
					НедопустимыйСимвол = Сред(ЗначениеЯчейки, НайтиНедопустимыеСимволыXML(ЗначениеЯчейки), 1);
					ЗначениеЯчейки = СтрЗаменить(ЗначениеЯчейки, НедопустимыйСимвол, "");
				КонецЦикла;
				ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				
				ЕстьДанныеВСтроке = Истина;
				
				Если ЭтоMI Тогда 
					Ключ = СтрЗаменить(СтрЗаменить(ЭлементСтруктуры.Ключ, " ", "_"), "-", "_");
				КонецЕсли;

				НоваяСтрокаТаблицы[ЭлементСтруктуры.Ключ] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьДанныеВСтроке Тогда
			Если ЭтоMI Тогда 
				ТаблицаPOMI.Удалить(НоваяСтрокаТаблицы);
			иначе
				ТаблицаPOSmith.Удалить(НоваяСтрокаТаблицы);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла; 
	      			
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруИменИНомеровКолонок(WorkSheet, СвойстваСтруктуры)
	
	СтруктураИменИНомеровКолонок = Новый Структура(СвойстваСтруктуры);
	
	НомерСтроки = ?(ЭтоMI, 7, 1);
	НомерКолонки = 1;
	Пока Истина Цикл
		
		ТекстЯчейки = СокрЛП(WorkSheet.Cells(НомерСтроки, НомерКолонки).Text);
		 	   
		// Считаем, что пустая ячейка - это конец строки
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
		
		Если ЭтоMI Тогда
		   ТекстЯчейки = СтрЗаменить(СтрЗаменить(ТекстЯчейки, " ", "_"), "-", "_"); 
	   КонецЕсли;
	   
		Если СтруктураИменИНомеровКолонок.Свойство(ТекстЯчейки) Тогда
			СтруктураИменИНомеровКолонок[ТекстЯчейки] = НомерКолонки;
		КонецЕсли;
				
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	// Проверим, что мы знаем номера для всех колонок
	Отказ = Ложь;
	Для Каждого КлючИЗначение Из СтруктураИменИНомеровКолонок Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			Сообщить("Failed to find column '" + КлючИЗначение.Ключ + "'!", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтруктураИменИНомеровКолонок;
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ ОБЪЕКТОВ БАЗЫ
           
&НаСервере
Процедура СоздатьPOsИPOLinesДляSMITH(Отказ)
	
	//свернем дублирующиеся строки
	СвернутаяТаблицаPO = ТаблицаPOSmith.Выгрузить();
	СвернутаяТаблицаPO.Свернуть(ИменаКолонок);
	
	ТаблицаPOSmith.Загрузить(СвернутаяТаблицаPO);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	МассивPONo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPOSmith, "po_nbr");
	СтруктураПоискаPOLines = Новый Структура("po_nbr");
	
	Для Каждого PONo из МассивPONo Цикл 
		
		// Ищем PO
		НайденнаяPO = Справочники.ЗаявкиНаЗакупку.НайтиПоКоду(PONo);		
		Если НайденнаяPO.Пустая() Тогда 
			POОбъект = Справочники.ЗаявкиНаЗакупку.СоздатьЭлемент();
			POОбъект.Код = PONo;
			POНовая = Истина;
		Иначе
			POОбъект = НайденнаяPO.ПолучитьОбъект();
			РГСофтКлиентСервер.УстановитьЗначение(POОбъект.ПометкаУдаления, Ложь);
			POНовая = Ложь;
		КонецЕсли; 
		          			
		СтруктураПоискаPOLines.po_nbr = PONo;
		СтрокиPOLines = ТаблицаPOSmith.НайтиСтроки(СтруктураПоискаPOLines);
		
		// PO date
		ДатаЗаявкиНаЗакупку = ПреобразоватьСтрокуВДату(СтрокиPOLines[0].po_dt);
		РГСофтКлиентСервер.УстановитьЗначение(POОбъект.ДатаЗаявкиНаЗакупку, ДатаЗаявкиНаЗакупку);
		
		//// Supplier
		//РГСофтКлиентСервер.УстановитьЗначение(POОбъект.Поставщик, СтрокиPOLines[0].vend_nm); 
		
		Если POОбъект.Модифицированность() Тогда
			Попытка
				POОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				Сообщить("Failed to save PO '" + PONo + "':
					|" + ОписаниеОшибки(),
					СтатусСообщения.ОченьВажное);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли; 
		
		// PO lines	
		Для Каждого СтрокаPOLine Из СтрокиPOLines Цикл
			
			// Ищем PO line
			Если НЕ POНовая Тогда
				
				НайденнаяPOLine = Справочники.СтрокиЗаявкиНаЗакупку.НайтиПоРеквизиту(
					"НомерСтрокиЗаявкиНаЗакупку",
					СтрокаPOLine.podtl_line_nbr,
					,
					POОбъект.Ссылка);
					
			Иначе
				НайденнаяPOLine = Справочники.СтрокиЗаявкиНаЗакупку.ПустаяСсылка();
			КонецЕсли;
			
			Если НайденнаяPOLine.Пустая() Тогда
				POLineОбъект = Справочники.СтрокиЗаявкиНаЗакупку.СоздатьЭлемент();
				POLineОбъект.Владелец	= POОбъект.Ссылка;
				POLineОбъект.НомерСтрокиЗаявкиНаЗакупку = СтрокаPOLine.podtl_line_nbr;
			Иначе
				POLineОбъект = НайденнаяPOLine.ПолучитьОбъект();
				РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ПометкаУдаления, Ложь);
			КонецЕсли;
			
			// Part no.
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.КодПоставщика, СокрЛП(СтрокаPOLine.podtl_part_nbr));
			Если Не ЗначениеЗаполнено(POLineОбъект.КодПоставщика) Тогда 
				POLineОбъект.КодПоставщика = "N/A";   //S-I-0000984
			КонецЕсли;
			
			// Description
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ОписаниеНоменклатуры, СтрокаPOLine.podtl_part_desc);

			// Qty
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Количество, СтрокаPOLine.podtl_qty_ordered);
			
			// Price
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Цена, СтрокаPOLine.unit_price);
			
			// Total price
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ИтогоПоСтроке, Окр(POLineОбъект.Количество*POLineОбъект.Цена, 2));
			
			// Shipping instructions
			ShippingInstructions = СокрЛП(СтрокаPOLine.district_nbr) + ":" + СокрЛП(СтрокаPOLine.district_nm);
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ИнструкцииПоТранспортировке, ShippingInstructions);

			// Special instructions
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.СпециальныеИнструкции, СокрЛП(СтрокаPOLine.debit_acct_cd));
			
			// ERP treatment
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Классификатор, ПолучитьERPTreatment(СтрокаPOLine.podtl_item_type));
						
			Если POLineОбъект.Модифицированность() Тогда
				Попытка
					POLineОбъект.Записать();
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Failed to save PO '" + PONo + "' line " + СтрокаPOLine.podtl_line_nbr + ":
					|" + ОписаниеОшибки(),
					СтатусСообщения.ОченьВажное);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; // Цикл по строкам
	
	ЗафиксироватьТранзакцию();
		 		
КонецПроцедуры

&НаСервере
Процедура СоздатьPOsИPOLinesДляMI(Отказ)
	
	//свернем дублирующиеся строки
	СвернутаяТаблицаPO = ТаблицаPOMI.Выгрузить();
	СвернутаяТаблицаPO.Свернуть(ИменаКолонок);
	
	ТаблицаPOMI.Загрузить(СвернутаяТаблицаPO);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	МассивPONo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPOMI, "Po_Number");
	СтруктураПоискаPOLines = Новый Структура("Po_Number");
	
	Для Каждого PONo из МассивPONo Цикл 
		
		// Ищем PO
		НайденнаяPO = Справочники.ЗаявкиНаЗакупку.НайтиПоКоду(PONo);		
		Если НайденнаяPO.Пустая() Тогда 
			POОбъект = Справочники.ЗаявкиНаЗакупку.СоздатьЭлемент();
			POОбъект.Код = PONo;
			POНовая = Истина;
		Иначе
			POОбъект = НайденнаяPO.ПолучитьОбъект();
			РГСофтКлиентСервер.УстановитьЗначение(POОбъект.ПометкаУдаления, Ложь);
			POНовая = Ложь;
		КонецЕсли; 
		          			
		СтруктураПоискаPOLines.Po_Number = PONo;
		СтрокиPOLines = ТаблицаPOMI.НайтиСтроки(СтруктураПоискаPOLines);
		
		// PO date
		РГСофтКлиентСервер.УстановитьЗначение(POОбъект.ДатаЗаявкиНаЗакупку, СтрокиPOLines[0].Creation_Date);
		
		//// Supplier
		//РГСофтКлиентСервер.УстановитьЗначение(POОбъект.Поставщик, СтрокиPOLines[0].vend_nm); 
		
		Если POОбъект.Модифицированность() Тогда
			Попытка
				POОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				Сообщить("Failed to save PO '" + PONo + "':
					|" + ОписаниеОшибки(),
					СтатусСообщения.ОченьВажное);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли; 
		
		// PO lines	
		Для Каждого СтрокаPOLine Из СтрокиPOLines Цикл
			
			// Ищем PO line
			Если НЕ POНовая Тогда
				
				НайденнаяPOLine = Справочники.СтрокиЗаявкиНаЗакупку.НайтиПоРеквизиту(
					"НомерСтрокиЗаявкиНаЗакупку",
					СтрокаPOLine.Line_Num,
					,
					POОбъект.Ссылка);
					
			Иначе
				НайденнаяPOLine = Справочники.СтрокиЗаявкиНаЗакупку.ПустаяСсылка();
			КонецЕсли;
			
			Если НайденнаяPOLine.Пустая() Тогда
				POLineОбъект = Справочники.СтрокиЗаявкиНаЗакупку.СоздатьЭлемент();
				POLineОбъект.Владелец	= POОбъект.Ссылка;
				POLineОбъект.НомерСтрокиЗаявкиНаЗакупку = СтрокаPOLine.Line_Num;
			Иначе
				POLineОбъект = НайденнаяPOLine.ПолучитьОбъект();
				РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ПометкаУдаления, Ложь);
			КонецЕсли;
			
			// Part no.
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.КодПоставщика, СокрЛП(СтрокаPOLine.Item_Code));
			
			// Description
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ОписаниеНоменклатуры, СтрокаPOLine.Item_Description);

			// Qty
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Количество, СтрокаPOLine.Quantity);
			
			// Price
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Цена, СтрокаPOLine.Unit_Price);
			
			// Total price
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ИтогоПоСтроке, Окр(POLineОбъект.Количество*POLineОбъект.Цена, 2));
			
			// Shipping instructions
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.ИнструкцииПоТранспортировке, СокрЛП(СтрокаPOLine.ShipTo_Description));

			// Special instructions
			SpecialInstructions = СокрЛП(СтрокаPOLine.Co_Code)+"."+СокрЛП(СтрокаPOLine.Business_Line)+"."+
				+СокрЛП(СтрокаPOLine.Cost_Center)+"."+СокрЛП(СтрокаPOLine.Major)+"."+СокрЛП(СтрокаPOLine.Minor_PG)
				+СокрЛП(СтрокаPOLine.Inter_Company)+"."+СокрЛП(СтрокаPOLine.Local);
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.СпециальныеИнструкции, СтрЗаменить(SpecialInstructions, Символы.НПП, ""));
			
			// ERP treatment
			РГСофтКлиентСервер.УстановитьЗначение(POLineОбъект.Классификатор, Перечисления.ТипыЗаказа.I);
						
			Если POLineОбъект.Модифицированность() Тогда
				Попытка
					POLineОбъект.Записать();
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Failed to save PO '" + PONo + "' line " + СтрокаPOLine.Line_Num + ":
					|" + ОписаниеОшибки(),
					СтатусСообщения.ОченьВажное);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; // Цикл по строкам
	
	ЗафиксироватьТранзакцию();
		 		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(Знач Строка)
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда
		Возврат Строка;
	КонецЕсли;
	
	СтрокаДата = Лев(Строка, 10);
	СтрокаДата = СтрЗаменить(СтрокаДата, "/", "");
	СтрокаДата = СтрЗаменить(СтрокаДата, ".", "");
	СтрокаДата = Сред(СтрокаДата, 5, 4) + Сред(СтрокаДата, 3, 2) + Сред(СтрокаДата, 1, 2) + "000000";
	                          	
	Попытка
		Дата = Дата(СтрокаДата);
		Возврат Дата;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьERPTreatment(type)
	
	Если type = "CAP" Тогда 
		Возврат Перечисления.ТипыЗаказа.A;
	ИначеЕсли type = "MIS" Тогда 
		Возврат Перечисления.ТипыЗаказа.E;
	ИначеЕсли type = "SER" Тогда 
		Возврат Перечисления.ТипыЗаказа.E;
	ИначеЕсли type = "TOO" Тогда 
		Возврат Перечисления.ТипыЗаказа.A;
	ИначеЕсли type = "IPR" Тогда 
		Возврат Перечисления.ТипыЗаказа.I;
	ИначеЕсли type = "FRT" Тогда 
		Возврат Перечисления.ТипыЗаказа.E;
	ИначеЕсли type = "ITT" Тогда 
		Возврат Перечисления.ТипыЗаказа.LOAN;
	ИначеЕсли type = "ITR" Тогда 
		Возврат Перечисления.ТипыЗаказа.LOAN;
	ИначеЕсли type = "BIT" Тогда 
		Возврат Перечисления.ТипыЗаказа.I;
	ИначеЕсли type = "ERP" Тогда 
		Возврат Перечисления.ТипыЗаказа.E;
	иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕЩЕНИЕ В ПАПКУ DONE

&НаКлиенте
Процедура ПереместитьФайлВПапкуDone(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ПапкаDone = Новый Файл(Файл.Путь + "Done");	
	Если НЕ ПапкаDone.Существует() Тогда
		СоздатьКаталог(ПапкаDone.ПолноеИмя);
	КонецЕсли;
	
	ПереместитьФайл(ПолноеИмяФайла, ПапкаDone.ПолноеИмя + "\" + Файл.Имя);	
		
КонецПроцедуры

#КонецЕсли