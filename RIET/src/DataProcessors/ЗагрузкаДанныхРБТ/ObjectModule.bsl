Функция ЗагрузитьДанныеИзТабличногоДокумента(МассивТД) Экспорт
	
	МассивСообщенийОбОшибкахЗагрузки 	= Новый Массив;
	Эксель 								= Неопределено;
	СоответствиеУведомлений 			= Новый Соответствие;
	ТаблицаДляЗагрузки = Новый ТаблицаЗначений;
	ТаблицаДляЗагрузки.Колонки.Добавить("Инвойс", Д(6));
	ТаблицаДляЗагрузки.Колонки.Добавить("ТипОперации", Д(7));
	ТаблицаДляЗагрузки.Колонки.Добавить("ДатаИнвойса", Д(10));
	ТаблицаДляЗагрузки.Колонки.Добавить("Продавец", Д(10));
	ТаблицаДляЗагрузки.Колонки.Добавить("НомерБилета", Д(16));
	ТаблицаДляЗагрузки.Колонки.Добавить("Пассажир", Д(100));
	ТаблицаДляЗагрузки.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляЗагрузки.Колонки.Добавить("СуммаНДСРуб", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляЗагрузки.Колонки.Добавить("СуммаСНДСРуб", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого текТД из МассивТД Цикл
		КонвертироватьВТаблицу(ТаблицаДляЗагрузки, текТД.ТабличныйДокумент, текТД.ТипЗагрузки, текТД.МассивЗаголовков);
		ТаблицаЗагрузки.Загрузить(ТаблицаДляЗагрузки);
		текТД.ТабличныйДокумент = Неопределено; // освобождаем память
	КонецЦикла;
	
	Продавцы = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗагрузки.ВыгрузитьКолонку("Продавец"));
	Возврат Продавцы;
КонецФункции

Функция Д(Длина)
	Возврат ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Длина);
КонецФункции

Процедура КонвертироватьВТаблицу(Таблица, ТабличныйДокумент, ТипЗагрузки, МассивЗаголовков)
	
	СоответветствиеДляШаблона 	= Неопределено;
	СтрокаТаблицы			  	= Неопределено;
	МассивДанных 				= Новый Массив;  
	ТД = ТабличныйДокумент;
	СоответствиеДляШаблона 	= ПолучитьСоответствиеКолонок(МассивЗаголовков);
	
	Для счет = 1 по ТД.ВысотаТаблицы Цикл
		
		МассивДанных = Новый Массив;
		СтрокаТаблицы = Таблица.Добавить();
		
		// теперь читаем массив данных
		Для счетКолонок = 1 по ТД.ШиринаТаблицы Цикл
			МассивДанных.Добавить(СокрЛП(ТД.Область("R" + Формат(счет, "ЧГ=") +"C" + Формат(счетКолонок, "ЧГ=")).Текст));
		КонецЦикла;
		ЗаполнитьСтруктуруПоШаблону(МассивДанных, СтрокаТаблицы, СоответствиеДляШаблона);	
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПоШаблону(МассивДанных, СтруктураЗначений, СоответствиеДляШаблона)
	
	Если СоответствиеДляШаблона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	счет = 0;
	Для каждого текЭлемент из СтруктураЗначений Цикл
		
		ЭлементСоответствия = СоответствиеДляШаблона[счет+1];
		// далее могут быть варианты: 
		// 1. получаем число
		// 2. получаем строку
		// 3. получаем строку, в которой значения отделены запятыми
		Если ТипЗнч(ЭлементСоответствия) = Тип("Число") Тогда
			Попытка
				СтруктураЗначений[счет] = МассивДанных[ЭлементСоответствия-1];
			Исключение
				СтруктураЗначений[счет] = "";	
			КонецПопытки
		ИначеЕсли ЭлементСоответствия = Неопределено Тогда
			СОобщить("Неверный формат файла");
			Возврат;
		ИначеЕсли ПустаяСтрока(ЭлементСоответствия) Тогда
			СтруктураЗначений[счет] = "";
		ИначеЕсли ТипЗнч(ЭлементСоответствия) = Тип("Строка") И СтрДлина(ЭлементСоответствия) > 0 Тогда
			МассивЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементСоответствия, , Истина);
			Значение = "";
			Для каждого текЭлементЧастей из МассивЧастей Цикл
				Значение = Значение + ?(ПустаяСтрока(Значение), "", ", ") + МассивДанных[Число(текЭлементЧастей)-1];	
			КонецЦикла;
			СтруктураЗначений[счет] = Значение;
		КонецЕсли;
		
		счет = счет + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеКолонок(МассивЗаголовков)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(1, МассивЗаголовков.Найти("Invoice"));  		//Инвойс
	Соответствие.Вставить(2, МассивЗаголовков.Найти("Operation Type") +1);        //ТипОперации
	Соответствие.Вставить(3, МассивЗаголовков.Найти("Invoice Date") +1);        //ДатаИнвойса
	Соответствие.Вставить(4, МассивЗаголовков.Найти("Airline") +1);        //Продавец
	Соответствие.Вставить(5, МассивЗаголовков.Найти("Ticket number") +1);        //НомерБилета
	Соответствие.Вставить(6, МассивЗаголовков.Найти("Passenger") +1);        //Пассажир
	Соответствие.Вставить(7, МассивЗаголовков.Найти("RUB without VAT") +1);       //СуммаБезНДСРуб
	Соответствие.Вставить(8, МассивЗаголовков.Найти("VAT RUB") +1);       //СуммаНДСРуб
	Соответствие.Вставить(9, МассивЗаголовков.Найти("RUB") +1);       //СуммаСНДСРуб
	Возврат Соответствие;
КонецФункции

// преобразуем строку в дату. 
// Использован механизм регулярных выражений. 
// Обрабатываются следующие шаблоны даты:
//    дд.мм.гггг - в начале строки - средствами 1С
//    дд.мм.гггг - в любом месте строки. Регулярные выражения. 
//    дд.мм.гг   - в любом месте строки. Регулярные выражения. 
//    дд месяц гггг - в любом месте строки. Регулярные выражения. 
// Возврат: 
// 		Дата
// т.к. ситуация, когда дата представлена в формате дд.мм.гггг наиболее часто встречается, 
// то функция реализована как последовательная проверка каждого варианта, до первого успешного. 
// таким образом шаблон для регулярного выражения не очень сложный да и до их использования доходим не всегда. 
//
Функция ПривестиКДате(ПрДаты)
	Если НЕ ЗначениеЗаполнено(ПрДаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// если значение уже дата, то ничего не делаем
	Если ТипЗнч(ПрДаты) = Тип("Дата") Тогда
		Возврат ПрДаты;
	КонецЕсли;
	
	УкороченныйТекст = Лев(ПрДаты, 10);
	
	Попытка
		Возврат Дата(Прав(УкороченныйТекст, 4), Сред(УкороченныйТекст, 4, 2) , Лев(УкороченныйТекст, 2) );		
	Исключение
	КонецПопытки;
	RegExp 								= Новый COMОбъект("VBScript.RegExp");
	Результат = Неопределено;
	// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
	Попытка
		RegExp.IgnoreCase 	= Ложь; 	//Игнорировать регистр
		RegExp.Global 		= Истина; 	//Поиск всех вхождений шаблона
		RegExp.MultiLine 	= Ложь; 	//Многострочный режим
		
		RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.((?:19|20)\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
		Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
		ЧислоВхождений  = Matches.Count();
		
		Если ЧислоВхождений>0 Тогда 
			
			Match = Matches.Item(0);
			//Сообщить(Match.Value); // оставлено для образца. Здесь хранится дата в виде строки
			
			SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
			ЧислоПодвыражений = SubMatches.Count();
			Если ЧислоПодвыражений >= 3 Тогда
				// 1 - день, 2 - месяц, 3 - год
				Результат = Дата(SubMatches.Item(2), SubMatches.Item(1), SubMatches.Item(0));
				Возврат Результат; // незачем проверять остальные ветки
			КонецЕсли;	
		КонецЕсли;
		
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	// проверим дату на формат дд.мм.гггг
	Если Результат = Неопределено Тогда
		// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
		Попытка
			RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.(\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
			Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
			ЧислоВхождений  = Matches.Count();
			
			Если ЧислоВхождений>0 Тогда 
				
				Match = Matches.Item(0);
				
				SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
				ЧислоПодвыражений = SubMatches.Count();
				Если ЧислоПодвыражений >= 3 Тогда
					// 1 - день, 2 - месяц, 3 - год
					Результат = Дата("20"+SubMatches.Item(2), SubMatches.Item(1), SubMatches.Item(0));
					Возврат Результат; // незачем проверять остальные ветки
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	// наконец проверим на дату формата 01 февраля 2012
	Если Результат = Неопределено Тогда
		
		СоответствиеМесяцев = Новый Соответствие;
		СоответствиеМесяцев.Вставить("ян", "01");
		СоответствиеМесяцев.Вставить("фе", "02");
		СоответствиеМесяцев.Вставить("ма", "03");
		СоответствиеМесяцев.Вставить("ап", "04");
		СоответствиеМесяцев.Вставить("ма", "05");
		СоответствиеМесяцев.Вставить("июн", "06");
		СоответствиеМесяцев.Вставить("июл", "07");
		СоответствиеМесяцев.Вставить("ав", "08");
		СоответствиеМесяцев.Вставить("се", "09");
		СоответствиеМесяцев.Вставить("ок", "10");
		СоответствиеМесяцев.Вставить("но", "11");
		СоответствиеМесяцев.Вставить("де", "12");
		
		
		// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
		Попытка
			RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\ ((янв|февр|мар|апр|ма|июн|июл|авг|сент|окт|ноя|дек)[а-я]+)\ ((?:19|20)\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
			Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
			ЧислоВхождений  = Matches.Count();
			
			Если ЧислоВхождений>0 Тогда 
				
				Match = Matches.Item(0);
				
				SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
				ЧислоПодвыражений = SubMatches.Count();
				Если ЧислоПодвыражений >= 4 Тогда
					
					МесяцСтрокой = SubMatches.Item(1);
					МесяцЧислом  = СоответствиеМесяцев.Получить(Лев(МесяцСтрокой, 2));
					Если МесяцЧислом = Неопределено Тогда
						МесяцЧислом  = СоответствиеМесяцев.Получить(Лев(МесяцСтрокой, 3)); // случай, для июня и июля
					КонецЕсли;
					
					// 1 - день, 2 - месяц, 3 - год
					Результат = Дата(Строка(SubMatches.Item(3)), МесяцЧислом, SubMatches.Item(0));
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьДокументыПоступления(СоответствиеКонтрагентов) Экспорт
	Рубль = Константы.ВалютаРегламентированногоУчета.Получить();
	Услуга = Справочники.Номенклатура.НайтиПоНаименованию("Услуги сторонних организаций");
	Если Услуга.Пустая() Тогда
		НоваяУслуга = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяУслуга.Услуга = Истина;
		НоваяУслуга.Наименование = "Услуги сторонних организаций";
		НоваяУслуга.Записать();
		Услуга = НоваяУслуга.Ссылка;
	КонецЕсли;	
	МассивПоступлений = Новый Массив();
	МассивСФ = Новый Массив();
	Сумма = 0;
	Для Каждого Стр Из ТаблицаЗагрузки Цикл
		Если НЕ ПустаяСтрока(Стр.НомерБилета) Тогда
			Ошибка = Ложь;
			ДатаИнвойса = ПривестиКДате(Стр.ДатаИнвойса);
			ДокументПоступления = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(Стр.НомерБилета, ДатаИнвойса);
			Если ДокументПоступления.Пустая() Тогда
				ДокументПоступления = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
				ДокументПоступления.Контрагент = КонтрагентРБТ;
				ДокументПоступления.Дата = ДатаИнвойса;
				ДокументПоступления.ВалютаДокумента = Рубль;
				ДокументПоступления.Организация = Справочники.Организации.НайтиПоКоду("00001");
				ДокументПоступления.Комментарий = Стр.Пассажир;
				ДокументПоступления.СуммаДокумента = Стр.СуммаСНДСРуб;
				
				НоваяСтрока = ДокументПоступления.Услуги.Добавить();
				НоваяСтрока.Номенклатура = Услуга;
				НоваяСтрока.СтавкаНДС = ?(Стр.СуммаНДСРуб = 0, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
				НоваяСтрока.Сумма = Стр.СуммаБезНДСРуб;
				НоваяСтрока.СуммаНДС = Стр.СуммаНДСРуб;
				НоваяСтрока.Цена = Стр.СуммаБезНДСРуб;
				
				ДокументПоступления.УстановитьНовыйНомер();
				ДокументПоступления.Номер = Стр.НомерБилета;
				ДокументПоступления.Проведен = Истина;
				
				Попытка
					ДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить("Не удалось создать документ поступления для билета " + Стр.НомерБилета);
					Ошибка = Истина;
				КонецПопытки;
			ИначеЕсли Стр.ТипОперации = "Возврат" И ДокументПоступления.Услуги.Количество() >= 1 Тогда	
				ДокументПоступленияОб = ДокументПоступления.ПолучитьОбъект();
				НоваяСтрока = ДокументПоступленияОб.Услуги.Добавить();
				НоваяСтрока.Номенклатура = Услуга;
				НоваяСтрока.СтавкаНДС = ?(Стр.СуммаНДСРуб = 0, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
				НоваяСтрока.Сумма = Стр.СуммаБезНДСРуб;
				НоваяСтрока.СуммаНДС = Стр.СуммаНДСРуб;
				НоваяСтрока.Цена = Стр.СуммаБезНДСРуб;
				
				Попытка
					ДокументПоступленияОб.Записать();
				Исключение
					Сообщить("Не удалось добавить строку возврата для билета " + Стр.НомерБилета);
					Ошибка = Истина;
				КонецПопытки;
				
			КонецЕсли;
			Сумма = Сумма + Стр.СуммаСНДСРуб;
			МассивПоступлений.Добавить(ДокументПоступления.Ссылка);
			Если НЕ Ошибка Тогда
				Продавец = Неопределено;
				СтрокаПродавец = СоответствиеКонтрагентов.Найти(СокрЛП(Стр.Продавец));
				Если СтрокаПродавец<>Неопределено Тогда
					Продавец = СтрокаПродавец.Контрагент;
				КонецЕсли;	 
				СчетФактура = Документы.СчетФактураПолученный.НайтиПоНомеру(Стр.НомерБилета, ДатаИнвойса);
				
				Если СчетФактура.Пустая() Тогда
					СчетФактура = Документы.СчетФактураПолученный.СоздатьДокументНаОсновании(ДокументПоступления.Ссылка, Стр.НомерБилета, ДатаИнвойса, Продавец);
					СчетФактураОб = СчетФактура.ПолучитьОбъект();
					СчетФактураОб.Номер = Стр.НомерБилета;
					СчетФактураОб.Дата = ДатаИнвойса;
					СчетФактураОб.БланкСтрогойОтчетности = Истина;
					СчетФактураОб.НДСПредъявленКВычету = Истина;
					СчетФактураОб.Записать();
					Попытка
						СчетФактураОб.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Сообщить("Не удалось провести счет фактуру для билета " + Стр.НомерБилета);
					КонецПопытки;	
				ИначеЕсли Стр.ТипОперации = "Возврат" Тогда
					Если  НачалоМесяца(ДатаИнвойса) = НачалоМесяца(СчетФактура.Дата) Тогда
						СчетФактураОб = СчетФактура.ПолучитьОбъект();
						СчетФактураОб.НДСПредъявленКВычету = Ложь;
						СчетФактураОб.Записать();
					Иначе
						СчетФактураОб.УдалитьДатаИсправленияИсходногоДокумента = ДатаИнвойса;
						СчетФактураОб.Записать();
						МассивСФ.Добавить(ДокументПоступления.Ссылка)	
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	МассивСФВозврат = ПроверитьСчетаФактуры(МассивСФ);
	СтруктураВозврата = Новый Структура("Сумма", Сумма);
	СтруктураВозврата.Вставить("МассивПоступлений", УчетНДС.УдалитьПовторяющиесяЭлементыМассива(МассивПоступлений));
	СтруктураВозврата.Вставить("МассивСФВозврат", МассивСФВозврат);
	Возврат СтруктураВозврата;
КонецФункции	

Функция ПроверитьСчетаФактуры(МассивСФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОбороты.СчетФактура,
		|	НДСПредъявленныйОбороты.Регистратор
		|ПОМЕСТИТЬ СКПРегистраторы
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Обороты(, &Период, Регистратор, СчетФактура В (&СчетФактура)) КАК НДСПредъявленныйОбороты
		|ГДЕ
		|	НДСПредъявленныйОбороты.Регистратор ССЫЛКА Документ.СчетКнигиПокупок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	СКПРегистраторы.Регистратор КАК Регистратор,
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&Период, СчетФактура В (&СчетФактура)) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ СКПРегистраторы КАК СКПРегистраторы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|			ПО СКПРегистраторы.СчетФактура = СчетФактураПолученный.ДокументОснование
		|		ПО НДСПредъявленныйОстатки.СчетФактура = СКПРегистраторы.СчетФактура
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток <> 0
		|ИТОГИ ПО
		|	Регистратор";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("СчетФактура", МассивСФ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивСФВозврат = Новый Массив();
	Пока ВыборкаРегистратор.Следующий() Цикл
		Док = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			 СФ = Выборка.Ссылка.ПолучитьОбъект();
			 СФ.НДСПредъявленКВычету = Ложь;
			 СФ.Записать();
			 Попытка
				 СФ.Записать(РежимЗаписиДокумента.Проведение);
			 Исключение
			 КонецПопытки;
			 МассивСФВозврат.Добавить(СФ.Номер);
		 КонецЦикла;	
		 Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

	Возврат МассивСФВозврат;
КонецФункции	
