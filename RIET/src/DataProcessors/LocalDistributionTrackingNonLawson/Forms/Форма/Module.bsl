
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РольДоступна("ImportExportTracker")
		И РольДоступна("LocalDistributionRequestor_ForNonLawsonCompanies") 
		И Не Параметры.Свойство("SwitchToLocalDistributionTrackingNonLawson") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НастроитьСтраницуMyTransportRequests();	
	
	ИнициализироватьDetailedInformationOnTransportRequests(
		Отчеты.DetailedInformationOnTransportRequests, 
		ОтчетDetailedInformationOnTransportRequests, 
		АдресСхемыКомпоновкиDetailedInformationOnTransportRequests, 
		, , "Main");

КонецПроцедуры

&НаСервере
Процедура НастроитьСтраницуMyTransportRequests() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Requestor",
		ПараметрыСеанса.ТекущийПользователь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Stage",
		,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"RequiredDeliveryLocalTime",
		,
		ВидСравненияКомпоновкиДанных.Меньше,
		,
		Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);		
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"TransportRequest.ПометкаУдаления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	НастроитьTrips(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьTrips(TransportRequest)
	
	Trips.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("TransportRequest", TransportRequest);

	Запрос.Текст = "ВЫБРАТЬ
	               |	TripNonLawsonCompaniesParcels.Ссылка КАК Trip,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse КАК PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo КАК DeliverTo,
	               |	СУММА(TripNonLawsonCompaniesParcels.NumOfParcels) КАК NumOfParcels
	               |ПОМЕСТИТЬ ВТ_Trips
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	               |ГДЕ
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest = &TransportRequest
	               |	И TripNonLawsonCompaniesParcels.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	TripNonLawsonCompaniesParcels.Ссылка,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TripNonLawsonCompaniesStops.Location КАК PickUpLocation,
	               |	TripNonLawsonCompaniesStops.Type КАК PickUpType,
	               |	TripNonLawsonCompaniesStops.PlannedArrivalLocalTime,
	               |	TripNonLawsonCompaniesStops.ActualArrivalLocalTime,
	               |	TripNonLawsonCompaniesStops.PlannedDepartureLocalTime,
	               |	TripNonLawsonCompaniesStops.ActualDepartureLocalTime,
	               |	TripNonLawsonCompaniesStops.Ссылка КАК Trip
	               |ПОМЕСТИТЬ ВТ_PickUp
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	               |ГДЕ
	               |	(TripNonLawsonCompaniesStops.Ссылка, TripNonLawsonCompaniesStops.Location) В
	               |			(ВЫБРАТЬ
	               |				ВТ_Trips.Trip,
	               |				ВТ_Trips.PickUpWarehouse
	               |			ИЗ
	               |				ВТ_Trips КАК ВТ_Trips)
	               |	И TripNonLawsonCompaniesStops.Type <> ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TripNonLawsonCompaniesStops.Location КАК DeliverToLocation,
	               |	TripNonLawsonCompaniesStops.Type КАК DeliverToType,
	               |	TripNonLawsonCompaniesStops.PlannedArrivalLocalTime,
	               |	TripNonLawsonCompaniesStops.ActualArrivalLocalTime,
	               |	TripNonLawsonCompaniesStops.PlannedDepartureLocalTime,
	               |	TripNonLawsonCompaniesStops.ActualDepartureLocalTime,
	               |	TripNonLawsonCompaniesStops.Ссылка КАК Trip
	               |ПОМЕСТИТЬ ВТ_DeliverTo
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	               |ГДЕ
	               |	(TripNonLawsonCompaniesStops.Ссылка, TripNonLawsonCompaniesStops.Location) В
	               |			(ВЫБРАТЬ
	               |				ВТ_Trips.Trip,
	               |				ВТ_Trips.DeliverTo
	               |			ИЗ
	               |				ВТ_Trips КАК ВТ_Trips)
	               |	И TripNonLawsonCompaniesStops.Type <> ЗНАЧЕНИЕ(Перечисление.StopsTypes.Source)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Trips.Trip,
	               |	ВТ_PickUp.PickUpLocation,
	               |	ВТ_PickUp.PickUpType,
	               |	ВТ_PickUp.PlannedArrivalLocalTime КАК PickUpPlannedArrivalLocalTime,
	               |	ВТ_PickUp.ActualArrivalLocalTime КАК PickUpActualArrivalLocalTime,
	               |	ВТ_PickUp.PlannedDepartureLocalTime КАК PickUpPlannedDepartureLocalTime,
	               |	ВТ_PickUp.ActualDepartureLocalTime КАК PickUpActualDepartureLocalTime,
	               |	ВТ_DeliverTo.DeliverToLocation,
	               |	ВТ_DeliverTo.DeliverToType,
	               |	ВТ_DeliverTo.PlannedArrivalLocalTime КАК DeliverToPlannedArrivalLocalTime,
	               |	ВТ_DeliverTo.ActualArrivalLocalTime КАК DeliverToActualArrivalLocalTime,
	               |	ВТ_DeliverTo.PlannedDepartureLocalTime КАК DeliverToPlannedDepartureLocalTime,
	               |	ВТ_DeliverTo.ActualDepartureLocalTime КАК DeliverToActualDepartureLocalTime,
	               |	ВТ_Trips.NumOfParcels
	               |ИЗ
	               |	ВТ_Trips КАК ВТ_Trips
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_PickUp КАК ВТ_PickUp
	               |		ПО ВТ_Trips.Trip = ВТ_PickUp.Trip
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_DeliverTo КАК ВТ_DeliverTo
	               |		ПО ВТ_Trips.Trip = ВТ_DeliverTo.Trip";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Trips.Загрузить(Результат);	
	
КонецПроцедуры

&НаКлиенте
Процедура TripsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Trips.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекДанные.Trip);
	
КонецПроцедуры

// Отчет DetailedInformationOnTransportRequests

&НаСервере
Процедура ИнициализироватьDetailedInformationOnTransportRequests(ОтчетМенеджер, ДанныеФормыСтруктура, АдресСхемы, НастройкиОтбора = Неопределено, МассивДопПолейГруппировок = Неопределено, ИмяВарианта = Неопределено, ПараметрыДанных = Неопределено)
	
	ПолноценныйОтчет = ОтчетМенеджер.Создать();
	СКД = ПолноценныйОтчет.СхемаКомпоновкиДанных;
	АктивизироватьВариантОтчета(СКД, ИмяВарианта);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	ПолноценныйОтчет.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ИнициализироватьДопПоляГруппировки(ПолноценныйОтчет.КомпоновщикНастроек, МассивДопПолейГруппировок);
	ИнициализироватьОтбор(ПолноценныйОтчет.КомпоновщикНастроек, НастройкиОтбора);
	ИнициализироватьПараметрыДанных(ПолноценныйОтчет.КомпоновщикНастроек, ПараметрыДанных);
	ЗначениеВДанныеФормы(ПолноценныйОтчет, ДанныеФормыСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДопПоляГруппировки(КомпоновщикНастроек, МассивДопПолейГруппировок)
	
	Если МассивДопПолейГруппировок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДопПолеГруппировки Из МассивДопПолейГруппировок Цикл
		ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, ДопПолеГруппировки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтбор(КомпоновщикНастроек, НастройкиОтбора)
	
	Если НастройкиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ТекНастройкаОтбора Из НастройкиОтбора Цикл
		НашлиЭлементОтбора = Ложь;
		Для каждого ТекЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
			Если ТекЭлементОтбора.ЛевоеЗначение = ТекНастройкаОтбора.ЛевоеЗначение Тогда
				ЗаполнитьЗначенияСвойств(ТекЭлементОтбора, ТекНастройкаОтбора);
				ТекЭлементОтбора.Использование = Истина;
				НашлиЭлементОтбора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не НашлиЭлементОтбора Тогда
			ЭлементОтбора = КоллекцияЭлементовОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ТекНастройкаОтбора);
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьПараметрыДанных(КомпоновщикНастроек, ПараметрыДанных)
	
	Если ПараметрыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПараметр Из ПараметрыДанных Цикл
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ТекПараметр.Ключ);
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ТекПараметр.Значение;
			Параметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьВариантОтчета(СКД, ИмяВарианта)
	
	Если Не ЗначениеЗаполнено(ИмяВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = СКД.ВариантыНастроек.Найти(ИмяВарианта);
	
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыДляУдаления = Новый Массив;
	
	Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			ВариантыДляУдаления.Добавить(ТекВариант);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВариант Из ВариантыДляУдаления Цикл
		СКД.ВариантыНастроек.Удалить(ТекВариант);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура GenerateDetailedInformationOnTransportRequests(Команда)
	
	GenerateDetailedInformationOnTransportRequestsНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура GenerateDetailedInformationOnTransportRequestsНаСервере()
	
	СформироватьОтчетНаСервере(ТабличныйДокументDetailedInformationOnTransportRequests, 
		ОтчетDetailedInformationOnTransportRequests, 
		"DetailedInformationOnTransportRequests", 
		АдресДанныхРасшифровкиDetailedInformationOnTransportRequests);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере(ТабличныйДокумент, ДанныеФормы, ИмяОтчета, АдресДанныхРасшифровки, СворачиватьГруппировки = Истина)
	
	ТабличныйДокумент.Очистить();
	ПолноценныйОтчет = ДанныеФормыВЗначение(ДанныеФормы, Тип("ОтчетОбъект." + ИмяОтчета));
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ПолноценныйОтчет.СкомпоноватьРезультат(ТабличныйДокумент, ДанныеРасшифровки);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	Если СворачиватьГруппировки Тогда
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументDetailedInformationOnTransportRequestsОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиDetailedInformationOnTransportRequests, 
		АдресДанныхРасшифровкиDetailedInformationOnTransportRequests, 
		Расшифровка, 
		"DetailedInformationOnTransportRequests");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровку(АдресСхемыКомпоновки, АдресДанныхРасшифровки, Расшифровка, ИмяОтчета)
	
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(
		Новый ОписаниеОповещения("ДействиеОбработкиРасшифровкиКомпоновкиДанныхЗаверешение" ,ЭтаФорма, 
		Новый Структура("ИмяОтчета,Расшифровка,АдресДанныхРасшифровки", ИмяОтчета, Расшифровка, АдресДанныхРасшифровки))
		, Расшифровка, ДоступныеДействия);
	                                            		
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбработкиРасшифровкиКомпоновкиДанныхЗаверешение(ВыбранноеДействие, ПараметрыВыбранногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ПоказатьЗначение(, ПараметрыВыбранногоДействия);
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
			СтруктураПараметров.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДополнительныеПараметры.АдресДанныхРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрыВыбранногоДействия));
			ОткрытьФорму("Отчет." + ДополнительныеПараметры.ИмяОтчета + ".Форма", СтруктураПараметров, , Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

