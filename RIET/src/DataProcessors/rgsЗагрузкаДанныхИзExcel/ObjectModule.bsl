
// } RGS ASeryakov 10/11/2017 12:00:00 AM S-I-0003904

Функция ЗагрузитьДанные(АдресФайла, РасширениеФайла, AP) Экспорт
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	Таблица = ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, AP);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
	Возврат Таблица;
	
КонецФункции

Функция ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, AP)  
	
	ТекстОшибок = "";
	ДополнительныеПараметры = Новый Структура();
	
	Если AP.Свойство("ПоляОтбора") Тогда
	
		ПоляОтбора = AP.ПоляОтбора;
		ДополнительныеПараметры = Новый Структура("ПоляОтбора",ПоляОтбора);
	
	КонецЕсли;
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла, ДополнительныеПараметры);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP);
		Возврат ТаблицаExcel;
	Иначе
		Сообщить(ТекстОшибок);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла, ДополнительныеПараметры)
	
	ОтборПоПолям = Ложь;
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры ="";
		Count = rs.Fields.Count;
		
		// Фильтр на загружаемые поля
		Если ДополнительныеПараметры.Свойство("ПоляОтбора") Тогда
			
			ОтборПоПолям = Истина;
			ПоляОтбора = ДополнительныеПараметры.ПоляОтбора;
		
		КонецЕсли;
		
		
		Для каждого Field Из rs.Fields Цикл
			
			FieldValue = Field.Value;
			УдалитьНедопустимыеСимволы(FieldValue);
		
			Если ОтборПоПолям Тогда
				
				Если ПоляОтбора.Найти(FieldValue) <> Неопределено Тогда
				
					СвойстваСтруктуры = СвойстваСтруктуры + FieldValue + ",";
				
				КонецЕсли;
				
			Иначе
				
				СвойстваСтруктуры = СвойстваСтруктуры + FieldValue + ",";
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
		
		
		ТекстЯчейкиФормат = ТекстЯчейки;
		УдалитьНедопустимыеСимволы(ТекстЯчейкиФормат);
		
		Если СтруктураКолонокИИндексов.Свойство(ТекстЯчейкиФормат) Тогда
		
			СтруктураКолонокИИндексов.Вставить(ТекстЯчейкиФормат, НомерКолонки);
		
		КонецЕсли;
		
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции

Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP)

	Таблица = ТаблицаExcel;

КонецПроцедуры

Функция ВыделитьКодИзСтроки(Знач Значение, ИмяКолонки)

	
		Если НЕ ПустаяСтрока(Значение) Тогда
			
			
			Если ИмяКолонки = "Parcel" Тогда
				
				ЗначениеСокр = СтрЗаменить(Значение,"Parcel ","");
				Код = Лев(ЗначениеСокр,СтрДлина(ЗначениеСокр)-23);
				
			ИначеЕсли ИмяКолонки = "Invoice" Тогда
				ЗначениеСокр = СтрЗаменить(Значение,"Invoice ","");
				Код = Лев(ЗначениеСокр,СтрДлина(ЗначениеСокр)-22);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Код;
КонецФункции

Процедура УдалитьНедопустимыеСимволы(Строка) Экспорт
	
	ДопустимыеСимволы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789";
	//ДопустимыеСимволы = "abcdefghijklmnopqrstuvwxyz";
	Числа = "0123456789";
	ПервыйСимвол = Лев(Строка,1);
	
	Количество = СтрДлина(Строка);
	СтрокаФормат = "";
	
	Для Сч =1 По Количество Цикл
		
		Символ = Сред(Строка, Сч, 1);
		ВерхнийРегистр = ?(Символ <> Нрег(Символ), Истина, Ложь);
		
		Символ = ?(ВерхнийРегистр,НРег(Символ),Символ);
		
		Если Сч > 1 Тогда
			
			Если НЕ СтрНайти(ДопустимыеСимволы,Символ) = 0 Тогда
				
				Символ = ?(ВерхнийРегистр,ВРег(Символ),Символ);
				СтрокаФормат = СтрокаФормат + Символ;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ СтрНайти(ДопустимыеСимволы,Символ) = 0 И СтрНайти(Числа,ПервыйСимвол) = 0 Тогда
				
				Символ = ?(ВерхнийРегистр,ВРег(Символ),Символ);
				СтрокаФормат = СтрокаФормат + Символ;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
		
		Строка = СтрокаФормат;
		
	КонецПроцедуры

// <Проверяет наличие недопустимых символов>
//
// Параметры:
//
// ДопустимыеСимволы  - <Тип.Строка> -  Строка разрешенных для ввода символов
//
//  Строка  - <Тип.Строка> -  Проверяемая строка
// Если возвращается Истина, в параметр Строка передается ошибочный символ
//
// Возвращаемое значение:
//   <Тип.Булево>   - Истина - найден недопустимый символ
//
Функция ПроверитьНедопустимыеСимволы(ДопустимыеСимволы,Строка) Экспорт
	
	Ошибка = Ложь;
	
	Количество = СтрДлина(Строка);
	СтрокаОшибочныхСимволов = "";
	
	Для Сч =1 По Количество Цикл
		
		Символ = Сред(Строка, Сч, 1);
		
		Если СтрНайти(ДопустимыеСимволы,Символ) = 0 Тогда
			
			Ошибка = Истина;
			СтрокаОшибочныхСимволов = СтрокаОшибочныхСимволов + Символ;
			
		КонецЕсли; 
		
		
	КонецЦикла;
	
	Строка = СтрокаОшибочныхСимволов;
	
	Возврат Ошибка;
	
КонецФункции






