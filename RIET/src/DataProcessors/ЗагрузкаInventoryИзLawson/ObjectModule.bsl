// В ходе обработки выполняется подключение внешней компоненты, которое может выполняться только на клиенте
#Если Клиент Тогда
	
// Только клиент
Процедура ПроизвестиЗагрузкуИзФайла(МассивПолныхИменФайлов) Экспорт
		
	Состояние("Подключение внешней компоненты");
	
	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	
	Для Каждого ПолноеИмяФайла Из МассивПолныхИменФайлов Цикл
		
		Состояние("Чтение содержимого файла");   		
		
		//10.07.2014 Пахоменков
		// Подмена строк местами в целях верного определения типа
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("IctItem");
		ВыбФайл 	= Новый Файл(ПолноеИмяФайла);
		ИмяФайла 	= ВыбФайл.Имя;
		Путь		= ВыбФайл.Путь; 
		Если ОбработкаDSSКлиент.ПроверитьФайлСЗаменойТипов(ИмяФайла,Путь, ИменаРеквизитов, 20, 6) Тогда    
			Возврат;
		КонецЕсли;      
		Сообщить("Проверка файла """+ Путь+ИмяФайла + """ прошла успешно.", СтатусСообщения.Информация);			
		//<-      
					
		ТЗ = ПолучитьТЗИзФайла(Путь+ИмяФайла);
				
		Состояние("Создание документов");
		СоздатьДокументы(ТЗ);
		
	КонецЦикла;
	
КонецПроцедуры

// Только клиент
Процедура ПроизвестиЗагрузкуTicketId(МассивПолныхИменФайлов) Экспорт
		
	Состояние("Подключение внешней компоненты");
	
	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	
	Для Каждого ПолноеИмяФайла Из МассивПолныхИменФайлов Цикл
		
		Состояние("Чтение содержимого файла");
		ТЗ = ПолучитьТЗИзФайлаДляTicketId(ПолноеИмяФайла);
		//ТЗ.Колонки.Удалить("Item");
		//Для каждого  Строка из ТЗ Цикл
		//	Если Строка.Item <> Строка.IcItem тогда
		//		Сообщить("Item-Ictem " + Строка.Item + " - " + Строка.IcItem);
		//	КонецЕсли;  			
		//конеццикла;
		
		Состояние("Создание документов");		
		
		// { RGS VChaplygin 24.09.2014 17:48:34 - Выделим в серверную экпортную процедуру
		//Для каждого Cтрока из ТЗ Цикл
		//	Cтрока.IcTransaction 	= СокрЛП(Cтрока.IcTransaction);
		//	Cтрока.OrderNbr 		= СокрЛП(Cтрока.OrderNbr);
		//	Cтрока.IcItem 			= СокрЛП(Cтрока.IcItem);  			
		//	Если Лев(Cтрока.IcItem,2) = "=""" И Прав(Cтрока.IcItem,1) = """" Тогда
		//		Cтрока.IcItem 		= СокрЛП(Сред(Cтрока.IcItem,3,СтрДлина(Cтрока.IcItem)-3));	
		//	КонецЕсли; 			
		//КонецЦикла;

		//Запрос = Новый Запрос;
		//Запрос.Параметры.Вставить("ТЗФайл",ТЗ);
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ТЗФайл.IcTransaction,
		//|	ТЗФайл.OrderNbr,
		//|	ТЗФайл.IcItem
		//|ПОМЕСТИТЬ ТЗФайл
		//|ИЗ
		//|	&ТЗФайл КАК ТЗФайл
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТЗФайл.IcTransaction,
		//|	ТЗФайл.OrderNbr,
		//|	ТЗФайл.IcItem,
		//|	InventoryСписаниеGoods.Ссылка КАК InventoryСписание,
		//|	InventoryСписаниеGoods.НомерСтроки
		//|ПОМЕСТИТЬ ТЧInventoryСписание
		//|ИЗ
		//|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗФайл КАК ТЗФайл
		//|		ПО InventoryСписаниеGoods.Ссылка.Номер = ТЗФайл.IcTransaction
		//|			И InventoryСписаниеGoods.Good.Код = ТЗФайл.IcItem
		//|			И (НЕ InventoryСписаниеGoods.Good = ЗНАЧЕНИЕ(Справочник.InventoryGoods.ПустаяСсылка))
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТЧInventoryСписание.IcTransaction,
		//|	ТЧInventoryСписание.OrderNbr,
		//|	ТЧInventoryСписание.IcItem,
		//|	ТЧInventoryСписание.InventoryСписание,
		//|	ЕСТЬNULL(SiebelOrders.Ссылка, ЗНАЧЕНИЕ(Документ.SiebelOrders.ПустаяСсылка)) КАК SiebelOrder,
		//|	ТЧInventoryСписание.НомерСтроки
		//|ПОМЕСТИТЬ ТЧInvetoryСписаниеИSiebelOrders
		//|ИЗ
		//|	ТЧInventoryСписание КАК ТЧInventoryСписание
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SiebelOrders КАК SiebelOrders
		//|		ПО ТЧInventoryСписание.OrderNbr = SiebelOrders.Номер
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТЧInvetoryСписаниеИSiebelOrders.IcTransaction,
		//|	ТЧInvetoryСписаниеИSiebelOrders.OrderNbr,
		//|	ТЧInvetoryСписаниеИSiebelOrders.IcItem,
		//|	ТЧInvetoryСписаниеИSiebelOrders.InventoryСписание,
		//|	ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder,
		//|	ЕСТЬNULL(Tickets.Ссылка, ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка)) КАК Ticket,
		//|	ТЧInvetoryСписаниеИSiebelOrders.НомерСтроки
		//|ПОМЕСТИТЬ ТЧInvetoryСписаниеИSiebelOrdersИTickets
		//|ИЗ
		//|	ТЧInvetoryСписаниеИSiebelOrders КАК ТЧInvetoryСписаниеИSiebelOrders
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
		//|		ПО ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder = Tickets.SiebelOrder
		//|			И (НЕ ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder = ЗНАЧЕНИЕ(Документ.SiebelOrders.ПустаяСсылка))
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
		//|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РТиУ,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.НомерСтроки
		//|ПОМЕСТИТЬ ДокиРТиУ
		//|ИЗ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = РеализацияТоваровУслугТовары.Ticket
		//|			И (НЕ ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка))
		//|
		//|ОБЪЕДИНИТЬ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
		//|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)),
		//|	NULL
		//|ИЗ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		//|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = РеализацияТоваровУслугУслуги.Ticket
		//|			И (НЕ ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка))
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.IcTransaction,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.OrderNbr,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.IcItem КАК IcItem,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.InventoryСписание КАК InventoryСписание,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.SiebelOrder,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
		//|	ЕСТЬNULL(ДокиРТиУ.РТиУ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РТиУ,
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.НомерСтроки
		//|ИЗ
		//|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ДокиРТиУ КАК ДокиРТиУ
		//|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ДокиРТиУ.Ticket
		//|ИТОГИ ПО
		//|	InventoryСписание,
		//|	IcItem
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ТЗФайл.IcItem
		//|ИЗ
		//|	ТЗФайл КАК ТЗФайл
		//|ГДЕ
		//|	НЕ ТЗФайл.IcItem В
		//|				(ВЫБРАТЬ
		//|					ТЧInventoryСписание.IcItem
		//|				ИЗ
		//|					ТЧInventoryСписание КАК ТЧInventoryСписание)";
		//
		//
		//Результат = Запрос.ВыполнитьПакет();
		//
		//ВыборкаНетНомеклатуры = Результат[6].Выбрать();
		//
		//Пока ВыборкаНетНомеклатуры.Следующий() Цикл      		
		//	Сообщить("Для кода номенклатуры " + ВыборкаНетНомеклатуры.IcItem + " не найдена номенклатура в базе!");			
		//КонецЦикла;	
		//
		//ВыборкаInventoryСписание = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//
		//Пока ВыборкаInventoryСписание.Следующий() Цикл
		//	
		//	Перепроводить = Ложь;
		//	ДокInvСписание = ВыборкаInventoryСписание.InventoryСписание.ПолучитьОбъект();
		//	
		//	ВыборкаНоменклатура = ВыборкаInventoryСписание.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	
		//	Пока ВыборкаНоменклатура.Следующий() Цикл
		//		
		//		ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
		//		
		//		Пока ВыборкаДетали.Следующий() ЦИкл
		//			
		//			текСтрокаТЧ 			= ДокInvСписание["Goods"][ВыборкаДетали.НомерСтроки - 1];
		//			
		//			Если ЗначениеЗаполнено(ВыборкаДетали.SiebelOrder) Тогда 
		//				
		//				текСтрокаТЧ.TicketId 	= ВыборкаДетали.SiebelOrder;						
		//				
		//				Если НЕ ЗначениеЗаполнено(текСтрокаТЧ.Реализация) Тогда
		//					Если ЗначениеЗаполнено(ВыборкаДетали.РТиУ) Тогда 						
		//						текСтрокаТЧ.Реализация 	= ВыборкаДетали.РТиУ;	
		//						Перепроводить = Истина;
		//					Иначе
		//						Сообщить("Для списания """ + ВыборкаДетали.IcTransaction + """ и номенклатуры """ + текСтрокаТЧ.Good + """ и Siebel Order """ + текСтрокаТЧ.TicketId + """ не найдена реализация");						
		//					КонецЕсли; 
		//				КонецЕсли;
		//				
		//			Иначе
		//				Сообщить("Для списания """ + ВыборкаДетали.IcTransaction + """ и номенклатуры """ + текСтрокаТЧ.Good + """ не найден Siebel Order с номером """ + ВыборкаДетали.OrderNbr + """");						
		//			КонецЕсли;  				
		//			
		//		КонецЦикла;				
		//		
		//	КонецЦикла;				
		//	
		//	Попытка
		//	
		//		Если Перепроводить Тогда
		//			ДокInvСписание.Записать(РежимЗаписиДокумента.Проведение); 
		//		Иначе
		//			ДокInvСписание.Записать(РежимЗаписиДокумента.Запись);
		//		КонецЕсли;
		//	Исключение
		//		Сообщить(ОписаниеОшибки());
		//	КонецПопытки;
		//
		//КонецЦикла;      	
		
		СоздатьДокументыДляTicketId(ТЗ);
		
		// } RGS VChaplygin 24.09.2014 17:48:50 - Выделим в серверную экпортную процедуру
			
		
	КонецЦикла;                            
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ФАЙЛА

// Только клиент
Функция ПолучитьТЗИзФайла(ПолноеИмяФайла)
	
	ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
		
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ЗагружаемыйФайл.Имя +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.Записать(ЗагружаемыйФайл.Путь + "schema.ini", КодировкаТекста.OEM);
	
	SQLЗапрос = "SELECT * ";
	// { RGS VChaplygin слияние различий версий
		////|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE IctDocType <> '' AND SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')";
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
   		SQLЗапрос = SQLЗапрос + "
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
		//16-07-2014 пахоменков
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0364%')";
		|FROM "+ ЗагружаемыйФайл.Имя + " WHERE (SortField3 LIKE 'Subgeomkt: R%' OR SortField3 LIKE 'Subgeomkt: PAL%') AND (SortField9 LIKE 'Company: 0364%')";  
		//<-
	Иначе  
     	SQLЗапрос = SQLЗапрос + "
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')";  
		|FROM "+ ЗагружаемыйФайл.Имя + " WHERE IctDocType <> '' AND SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')";
	КонецЕсли;
	//[<-РКХ]
	// } RGS VChaplygin слияние различий версий
	
	
	ADOUtils = Новый("AddIn.ADOUtils");
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open("Driver={Microsoft Text Driver (*.txt; *.csv)};Dbq="+ ЗагружаемыйФайл.Путь +";Extensions=csv;Persist Security Info=False");
	Recordset = Connection.Execute(SQLЗапрос);
	ТЗ = ADOUtils.ADORecordsetToValueTable(Recordset);
	RecordSet.Close(); // После того, как набор записей уже не нужен, его нужно закрыть
	Connection.Close();
	
	//Добавим в ТЗ нумерацию строк
	ТЗ.Колонки.Добавить("НомерСтроки");
	Для каждого Строка Из ТЗ Цикл
		Строка.НомерСтроки = ТЗ.Индекс(Строка) + 2;
	КонецЦикла; 
	Возврат ТЗ;
	
КонецФункции

// Только клиент
Функция ПолучитьТЗИзФайлаДляTicketId(ПолноеИмяФайла)
	
	ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
		
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ЗагружаемыйФайл.Имя +"]" + Символы.ПС + "DecimalSymbol=.");
	ФайлСхемы.Записать(ЗагружаемыйФайл.Путь + "schema.ini", КодировкаТекста.OEM);
	
	//SQLЗапрос = "SELECT OrderNbr, Item, IcItem, IcTransaction
	//	|FROM "+ ЗагружаемыйФайл.Имя + " WHERE Subgeo LIKE 'R%' AND (Company LIKE '4' OR Company LIKE '356') AND (IcTransaction LIKE 'T%' OR IcTransaction LIKE ' T%' OR IcTransaction LIKE '  T%' OR IcTransaction LIKE '   T%') AND Item is not null AND OrderNbr is not null";
	SQLЗапрос = "SELECT OrderNbr, IcItem, IcTransaction
		|FROM "+ ЗагружаемыйФайл.Имя + " WHERE Subgeo LIKE 'R%' AND (Company LIKE '4' OR Company LIKE '356') AND (IcTransaction LIKE 'T%' OR IcTransaction LIKE ' T%' OR IcTransaction LIKE '  T%' OR IcTransaction LIKE '   T%') AND IcItem is not null AND OrderNbr is not null";
	
	ADOUtils = Новый("AddIn.ADOUtils");
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open("Driver={Microsoft Text Driver (*.txt; *.csv)};Dbq="+ ЗагружаемыйФайл.Путь +";Extensions=csv;Persist Security Info=False");
	Recordset = Connection.Execute(SQLЗапрос);
	ТЗ = ADOUtils.ADORecordsetToValueTable(Recordset);
	RecordSet.Close(); // После того, как набор записей уже не нужен, его нужно закрыть
	Connection.Close();
	
	//Добавим в ТЗ нумерацию строк
	ТЗ.Колонки.Добавить("НомерСтроки");
	Для каждого Строка Из ТЗ Цикл
		Строка.НомерСтроки = ТЗ.Индекс(Строка) + 2;
	КонецЦикла; 
	Возврат ТЗ;
	
КонецФункции

#КонецЕсли

Процедура СоздатьДокументыДляTicketId(ТЗ) Экспорт
		
	
	#Если Клиент Тогда
	 
	Состояние("Создание документов");		
	 
	#КонецЕсли 
	
	Для каждого Cтрока из ТЗ Цикл
		Cтрока.IcTransaction 	= СокрЛП(Cтрока.IcTransaction);
		Cтрока.OrderNbr 		= СокрЛП(Cтрока.OrderNbr);
		Cтрока.IcItem 			= СокрЛП(Cтрока.IcItem);  			
		Если Лев(Cтрока.IcItem,2) = "=""" И Прав(Cтрока.IcItem,1) = """" Тогда
			Cтрока.IcItem 		= СокрЛП(Сред(Cтрока.IcItem,3,СтрДлина(Cтрока.IcItem)-3));	
		КонецЕсли; 			
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ТЗФайл",ТЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗФайл.IcTransaction,
	|	ТЗФайл.OrderNbr,
	|	ТЗФайл.IcItem
	|ПОМЕСТИТЬ ТЗФайл
	|ИЗ
	|	&ТЗФайл КАК ТЗФайл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗФайл.IcTransaction,
	|	ТЗФайл.OrderNbr,
	|	ТЗФайл.IcItem,
	|	InventoryСписаниеGoods.Ссылка КАК InventoryСписание,
	|	InventoryСписаниеGoods.НомерСтроки
	|ПОМЕСТИТЬ ТЧInventoryСписание
	|ИЗ
	|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗФайл КАК ТЗФайл
	|		ПО InventoryСписаниеGoods.Ссылка.Номер = ТЗФайл.IcTransaction
	|			И InventoryСписаниеGoods.Good.Код = ТЗФайл.IcItem
	|			И (НЕ InventoryСписаниеGoods.Good = ЗНАЧЕНИЕ(Справочник.InventoryGoods.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧInventoryСписание.IcTransaction,
	|	ТЧInventoryСписание.OrderNbr,
	|	ТЧInventoryСписание.IcItem,
	|	ТЧInventoryСписание.InventoryСписание,
	|	ЕСТЬNULL(SiebelOrders.Ссылка, ЗНАЧЕНИЕ(Документ.SiebelOrders.ПустаяСсылка)) КАК SiebelOrder,
	|	ТЧInventoryСписание.НомерСтроки
	|ПОМЕСТИТЬ ТЧInvetoryСписаниеИSiebelOrders
	|ИЗ
	|	ТЧInventoryСписание КАК ТЧInventoryСписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SiebelOrders КАК SiebelOrders
	|		ПО ТЧInventoryСписание.OrderNbr = SiebelOrders.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧInvetoryСписаниеИSiebelOrders.IcTransaction,
	|	ТЧInvetoryСписаниеИSiebelOrders.OrderNbr,
	|	ТЧInvetoryСписаниеИSiebelOrders.IcItem,
	|	ТЧInvetoryСписаниеИSiebelOrders.InventoryСписание,
	|	ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder,
	|	ЕСТЬNULL(Tickets.Ссылка, ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка)) КАК Ticket,
	|	ТЧInvetoryСписаниеИSiebelOrders.НомерСтроки
	|ПОМЕСТИТЬ ТЧInvetoryСписаниеИSiebelOrdersИTickets
	|ИЗ
	|	ТЧInvetoryСписаниеИSiebelOrders КАК ТЧInvetoryСписаниеИSiebelOrders
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	|		ПО ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder = Tickets.SiebelOrder
	|			И (НЕ ТЧInvetoryСписаниеИSiebelOrders.SiebelOrder = ЗНАЧЕНИЕ(Документ.SiebelOrders.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РТиУ,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.НомерСтроки
	|ПОМЕСТИТЬ ДокиРТиУ
	|ИЗ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = РеализацияТоваровУслугТовары.Ticket
	|			И (НЕ ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)),
	|	NULL
	|ИЗ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = РеализацияТоваровУслугУслуги.Ticket
	|			И (НЕ ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ЗНАЧЕНИЕ(Документ.Tickets.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.IcTransaction,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.OrderNbr,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.IcItem КАК IcItem,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.InventoryСписание КАК InventoryСписание,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.SiebelOrder,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket,
	|	ЕСТЬNULL(ДокиРТиУ.РТиУ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РТиУ,
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets.НомерСтроки
	|ИЗ
	|	ТЧInvetoryСписаниеИSiebelOrdersИTickets КАК ТЧInvetoryСписаниеИSiebelOrdersИTickets
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокиРТиУ КАК ДокиРТиУ
	|		ПО ТЧInvetoryСписаниеИSiebelOrdersИTickets.Ticket = ДокиРТиУ.Ticket
	|ИТОГИ ПО
	|	InventoryСписание,
	|	IcItem
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗФайл.IcItem
	|ИЗ
	|	ТЗФайл КАК ТЗФайл
	|ГДЕ
	|	НЕ ТЗФайл.IcItem В
	|				(ВЫБРАТЬ
	|					ТЧInventoryСписание.IcItem
	|				ИЗ
	|					ТЧInventoryСписание КАК ТЧInventoryСписание)";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНетНомеклатуры = Результат[6].Выбрать();
	
	Пока ВыборкаНетНомеклатуры.Следующий() Цикл      		
		Сообщить("Для кода номенклатуры " + ВыборкаНетНомеклатуры.IcItem + " не найдена номенклатура в базе!");			
	КонецЦикла;	
	
	ВыборкаInventoryСписание = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаInventoryСписание.Следующий() Цикл
		
		Перепроводить = Ложь;
		ДокInvСписание = ВыборкаInventoryСписание.InventoryСписание.ПолучитьОбъект();
		
		ВыборкаНоменклатура = ВыборкаInventoryСписание.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
			
			Пока ВыборкаДетали.Следующий() ЦИкл
				
				текСтрокаТЧ 			= ДокInvСписание["Goods"][ВыборкаДетали.НомерСтроки - 1];
				
				Если ЗначениеЗаполнено(ВыборкаДетали.SiebelOrder) Тогда 
					
					текСтрокаТЧ.TicketId 	= ВыборкаДетали.SiebelOrder;						
					
					Если НЕ ЗначениеЗаполнено(текСтрокаТЧ.Реализация) Тогда
						Если ЗначениеЗаполнено(ВыборкаДетали.РТиУ) Тогда 						
							текСтрокаТЧ.Реализация 	= ВыборкаДетали.РТиУ;	
							Перепроводить = Истина;
						Иначе
							Сообщить("Для списания """ + ВыборкаДетали.IcTransaction + """ и номенклатуры """ + текСтрокаТЧ.Good + """ и Siebel Order """ + текСтрокаТЧ.TicketId + """ не найдена реализация");						
						КонецЕсли; 
					КонецЕсли;
					
				Иначе
					Сообщить("Для списания """ + ВыборкаДетали.IcTransaction + """ и номенклатуры """ + текСтрокаТЧ.Good + """ не найден Siebel Order с номером """ + ВыборкаДетали.OrderNbr + """");						
				КонецЕсли;  				
				
			КонецЦикла;				
			
		КонецЦикла;				
		
		Попытка
		
			Если Перепроводить Тогда
				// { RGS VChaplygin 07.10.2014 22:56:45 - JMikhailova просила писать, если не проводится
				Попытка
					ДокInvСписание.Записать(РежимЗаписиДокумента.Проведение); 
				Исключение
					ДокInvСписание.Записать(РежимЗаписиДокумента.Запись); 
				КонецПопытки;
				// } RGS VChaplygin 07.10.2014 22:57:00 - JMikhailova просила писать, если не проводится
			Иначе
				ДокInvСписание.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;                            
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ ОБЪЕКТОВ

Процедура СоздатьДокументы(ТЗ, ТаблицаПоступлений = Неопределено) Экспорт
	
	#Если Клиент Тогда
	Состояние("Подготовка полученной таблицы");
	#КонецЕсли
	//Трефиленков, 26.09.2012, <SLI-0002838
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.IctDocument = СокрЛП(СтрокаТЗ.IctDocument);
		СтрокаТЗ.IctTransDate = СокрЛП(СтрокаТЗ.IctTransDate);
		СтрокаТЗ.IctLocation = СокрЛП(СтрокаТЗ.IctLocation);
		Если СтрокаТЗ.IctDocType = "CA" Тогда
			МассивКУдалению.Добавить(СтрокаТЗ);
		// { RGS LFedotova 09.03.2017 - вопрос SLI-0007196
		ИначеЕсли СписокНомеров.Количество()>0 И СписокНомеров.Найти(СокрЛП(СтрокаТЗ.IctDocument),"НомерДокумента") = Неопределено Тогда
			МассивКУдалению.Добавить(СтрокаТЗ);
		// } RGS LFedotova 09.03.2017 - вопрос SLI-0007196
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЗ Из МассивКУдалению Цикл
		ТЗ.Удалить(СтрокаТЗ);
	КонецЦикла;
	//>SLI-0002838                           
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.IctDocument = СокрЛП(СтрокаТЗ.IctDocument);
		СтрокаТЗ.IctTransDate = СокрЛП(СтрокаТЗ.IctTransDate);
		СтрокаТЗ.IctLocation = СокрЛП(СтрокаТЗ.IctLocation);
	КонецЦикла;
	ТЗ.Индексы.Добавить("IctDocument");
	ТЗ.Индексы.Добавить("IctTransDate");
	
	
	#Если Клиент Тогда
	КоличествоЭлементов = ТЗ.Количество();
	НомерТекущегоЭлемента = 1;
	#КонецЕсли
	Пока ТЗ.Количество() Цикл
		
		// Найдем порцию строк с одинаковым IctDocument и датой
		СтрокаТЗ = ТЗ[0];
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("IctDocument", СтрокаТЗ.IctDocument);
		СтруктураПоиска.Вставить("IctTransDate", СтрокаТЗ.IctTransDate);
		// Для PO и CA проводок нужно дополнительно фильтровать по типу проводок
		Если СтрокаТЗ.IctDocType = "PO"
			ИЛИ СтрокаТЗ.IctDocType = "CA" Тогда
			
			СтруктураПоиска.Вставить("IctDocType", СтрокаТЗ.IctDocType);
								
		КонецЕсли;
		ПорцияСтрокТЗ = ТЗ.НайтиСтроки(СтруктураПоиска);
		
		// Обработаем порцию строк
		ТаблицаПорцииСтрок = ТЗ.Скопировать(ПорцияСтрокТЗ);	
		ОбработатьПорциюСтрок(ТаблицаПорцииСтрок, ТаблицаПоступлений);
		
		#Если Клиент Тогда
		НомерТекущегоЭлемента = НомерТекущегоЭлемента + ПорцияСтрокТЗ.Количество();
		Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
		Состояние("Обработан элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Для Каждого СтрокаТЗ Из ПорцияСтрокТЗ Цикл	
			ТЗ.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;
				
КонецПроцедуры

Процедура ОбработатьПорциюСтрок(ТаблицаПорцииСтрок, ТаблицаПоступлений)
	
	ПерваяСтрока = ТаблицаПорцииСтрок[0];
	
	// Если попался другой геомаркет - пропускаем строки
	// { RGS LFedotova 07.08.2017 18:07:32 - вопрос SLI-0007324
	//Если СтрНайти(ПерваяСтрока.SortField3, "Subgeomkt: R") = 0 Тогда
	Если СтрНайти(ПерваяСтрока.SortField3, "Subgeomkt: R") = 0 И СтрНайти(ПерваяСтрока.SortField3, "Subgeomkt: SKG") = 0 
		// { RGS LFedotova 08.08.2017 14:12:11 - вопрос SLI-0007329
		И СтрНайти(ПерваяСтрока.SortField3, "Subgeomkt: ASG") = 0 Тогда
		// } RGS LFedotova 08.08.2017 14:14:44 - вопрос SLI-0007329 
	// } RGS LFedotova 07.08.2017 18:07:52 - вопрос SLI-0007324
		//Возврат;
		Если НЕ ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда			
			Возврат;
		Иначе
			Если СтрНайти(ПерваяСтрока.SortField3, "Subgeomkt: PAL") = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если попалась другая компания - пропускаем строки
	//Если НЕ (ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco Inc" ИЛИ 
	//	ПерваяСтрока.SortField9 = "Company: 0356 Schlumberger Logelco Inc" ИЛИ
	//	//Добавила Федотова Л., РГ-Софт, 22.01.14, вопрос SLI-0004130 ->
	//	ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco, Inc.") Тогда
	//	//<-
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		//Если НЕ (ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco Inc" ИЛИ 
		//	ПерваяСтрока.SortField9 = "Company: 0356 Schlumberger Logelco Inc") Тогда
		УсловиеПопаласьДругаяКомпания = НЕ (Лев(ПерваяСтрока.SortField9, 13) = "Company: 0364");
		//ИЛИ ПерваяСтрока.SortField9 = "Company: 0356 Schlumberger Logelco Inc") 			
	Иначе
		УсловиеПопаласьДругаяКомпания = НЕ (ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco Inc" ИЛИ 
										ПерваяСтрока.SortField9 = "Company: 0356 Schlumberger Logelco Inc" ИЛИ
										//Добавила Федотова Л., РГ-Софт, 22.01.14, вопрос SLI-0004130 ->
										ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco, Inc." ИЛИ	
										//<-
										//Добавила Логинова О., РГ-Софт, 20.03.15, вопрос SLI-0005271 ->
										ПерваяСтрока.SortField9 = "Company: 0004 Schlumberger Logelco Inc.");	
										//<-
	КонецЕсли;  	     	
	
	Если УсловиеПопаласьДругаяКомпания Тогда
	//[<-РКХ]
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ПерваяСтрока.IctDocType;
	Если ТипДокумента = "PO" Тогда
		
		СоздатьПоступление(ТаблицаПорцииСтрок, ТаблицаПоступлений);
		
	ИначеЕсли ТипДокумента = "RT" ИЛИ ТипДокумента = "IT" Тогда
		
		СоздатьПеремещение(ТаблицаПорцииСтрок);
			
	ИначеЕсли ТипДокумента = "IS" ИЛИ ТипДокумента = "SH" Тогда
		
		СоздатьСписание(ТаблицаПорцииСтрок)
		
	ИначеЕсли ТипДокумента = "RC" ИЛИ ТипДокумента = "AJ" ИЛИ ТипДокумента = "RA" ИЛИ ТипДокумента = "CA" Тогда
		
		СоздатьКорректировку(ТаблицаПорцииСтрок);

	ИначеЕсли ТипДокумента = "BT" Тогда
		
		// BT проводки просто пропускаем, так как они не важны для фискального учета
		 
	Иначе
		 
		ТекстОшибки = "Неизвестный IctDocType """ + ТипДокумента + """ в строке " + ПерваяСтрока.НомерСтроки + "!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		 
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьПоступление(ТаблицаПорцииСтрок, ТаблицаПоступлений)

	ПерваяСтрокаТЗ = ТаблицаПорцииСтрок[0];
	Номер = ПерваяСтрокаТЗ.IctDocument;
	Дата = ПерваяСтрокаТЗ.IctTransDate;
	
	Отказ = Ложь;
	Заголовок = "Создание поступления №" + Номер + " от " + Дата + ":";
	
	// Проверим заполнение номера и даты
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ТекстОшибки = "Не указан номер документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	Дата = ПолучитьДату(Дата, Отказ, Заголовок);
	Если Дата = '00010101' Тогда
		ТекстОшибки = "Не указана дата документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаВидовОпераций = ТаблицаПорцииСтрок.Скопировать(,"IctDocType");
	ТаблицаВидовОпераций.Свернуть("IctDocType");
	Для Каждого СтрокаТаблицыВидовОпераций Из ТаблицаВидовОпераций Цикл
		Если СтрокаТаблицыВидовОпераций.IctDocType <> "PO" Тогда
			ТекстОшибки = "Неизвестный вид операции документа поступления (" + СтрокаТаблицыВидовОпераций.IctDocType + ")!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Проверим наличие в базе такого поступления
	Докум = Документы.InventoryПоступление.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	InventoryПоступление.Ссылка
		|ИЗ
		|	Документ.InventoryПоступление КАК InventoryПоступление
		|ГДЕ
		|	InventoryПоступление.Номер = &Номер
		|	И НачалоПериода(InventoryПоступление.Дата,День) = &Дата
		|	И (НЕ InventoryПоступление.ПометкаУдаления)";
	Результат = Запрос.Выполнить(); 
	Докум = Документы.InventoryПоступление.ПустаяСсылка();
	Если НЕ Результат.Пустой() Тогда
		//добавила Федотова Л., РГ-Софт, 23.01.17, вопрос SLI-0007093
		Если ПерезаполнитьТЧ ИЛИ ДозаполнитьТЧ Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			    Докум = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		Иначе	
			ОтменитьТранзакцию();
			ТекстОшибки = "В системе уже есть поступление с таким номером и датой!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	// Создадим документ или получим объект существующего
	//добавила Федотова Л., РГ-Софт, 23.01.17, вопрос SLI-0007093
	НовыйДокумент = Ложь;
	Если Докум.Пустая() Тогда
		ДокументОбъект = Документы.InventoryПоступление.СоздатьДокумент();
		НовыйДокумент = Истина;
	Иначе	
		ДокументОбъект = Докум.ПолучитьОбъект();
		Если Буфер.НайтиПоЗначению(Докум) = Неопределено Тогда
		    Буфер.Добавить(Докум);
			Если ПерезаполнитьТЧ Тогда
				ДокументОбъект.Goods.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Шапка	
	//добавила Федотова Л., РГ-Софт, 26.01.17, вопрос SLI-0007093
	//Если НовыйДокумент Тогда
		ДокументОбъект.Номер = Номер;
	    ДокументОбъект.Дата = Дата;
	    ДокументОбъект.Company = Число(Сред(ПерваяСтрокаТЗ.SortField9,10,4));
		ДокументОбъект.InventoryLocation = НайтиСоздатьInventoryLocation(СокрЛП(ПерваяСтрокаТЗ.IctLocation), Отказ, Заголовок);
		ДокументОбъект.IctDocType = ПолучитьСтрокуВидовОпераций(ТаблицаПорцииСтрок);
		ДокументОбъект.Segment = Справочники.Сегменты.НайтиПоКоду(Сред(ПерваяСтрокаТЗ.SortField4,10,3));
		
		ДокументОбъект.PONumber = СокрЛП(ПерваяСтрокаТЗ.PoNumber);
		Если ЗначениеЗаполнено(ДокументОбъект.PONumber) Тогда
			ДокументОбъект.PO = CustomsСервер.НайтиPOПоНомеру(ДокументОбъект.PONumber);
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.PO) Тогда
				ТекстОшибки = "Не удалось найти PO по номеру """ + ДокументОбъект.PONumber + """!";
				РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;		
		КонецЕсли;
	    Если НовыйДокумент Тогда
			ДокументОбъект.УстановитьСсылкуНового(Документы.InventoryПоступление.ПолучитьСсылку());	
		КонецЕсли; 
	//КонецЕсли;	
	
	// Табличная часть		
	НомерСтроки = 0;
	Для Каждого СтрокаТЗ Из ТаблицаПорцииСтрок Цикл
		// { RGS LFedotova 27.01.2017 21:57:26 - вопрос SLI-0007093
		UOM = НайтиUOM(СтрокаТЗ.IteStockUom, Отказ);
		Good = НайтиСоздатьНоменклатуру(СтрокаТЗ.IctItem, СтрокаТЗ.IteDescription, СтрокаТЗ.IteDescription2, UOM, Отказ, Заголовок);
		Если ДозаполнитьТЧ Тогда
			СтрокаДокумента = ДокументОбъект.Goods.Найти(Good,"Good");
			Если НЕ СтрокаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		// } RGS LFedotova 27.01.2017 21:58:04 - вопрос SLI-0007093 
		НоваяСтрока = ДокументОбъект.Goods.Добавить();
		
		НоваяСтрока.UOM = UOM;
		НоваяСтрока.Good = Good;		//-> RG-Soft VIvanov 2015/02/18
		//НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, Отказ);
		НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, Дата, Отказ);
		//<- RG-Soft VIvanov
				
		НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.RecQty, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
			Если ЕстьКолонкаТаблицыЗначений("FMTInQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.FMTInQty, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranInQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.TranInQty, Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли;
		
		НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.RecValue, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ManagementSum) Тогда
			//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
			Если ЕстьКолонкаТаблицыЗначений("FMTInValue", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.FMTInValue, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranInValue", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.TranInValue, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			НоваяСтрока.ManagementPrice = НоваяСтрока.ManagementSum / НоваяСтрока.Quantity;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Попытка
			ДокументОбъект.Записать();
			НоваяСтрока = ТаблицаПоступлений.Добавить();
			НоваяСтрока.Поступление = ДокументОбъект.Ссылка;
		Исключение
			ТекстОшибки = "Не удалось записать """ + ДокументОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПеремещение(ТаблицаПорцииСтрок)
	
	ПерваяСтрокаТЗ = ТаблицаПорцииСтрок[0];
	Номер = ПерваяСтрокаТЗ.IctDocument;
	Дата = ПерваяСтрокаТЗ.IctTransDate;
	// { RGS LFedotova 13.04.2017 0:16:11 - вопрос
	IctDocType = ПерваяСтрокаТЗ.IctDocType;
	// } RGS LFedotova 13.04.2017 0:16:16 - вопрос
	
	Отказ = Ложь;
	Заголовок = "Создание перемещения №" + Номер + " от " + Дата + ":";
	
	// Проверим заполнение номера и даты
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ТекстОшибки = "Не указан номер документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	Дата = ПолучитьДату(Дата, Отказ, Заголовок);
	Если Дата = '00010101' Тогда
		ТекстОшибки = "Не указана дата документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	

	ТаблицаВидовОпераций = ТаблицаПорцииСтрок.Скопировать(,"IctDocType");
	ТаблицаВидовОпераций.Свернуть("IctDocType");
	Для Каждого СтрокаТаблицыВидовОпераций Из ТаблицаВидовОпераций Цикл
		Если СтрокаТаблицыВидовОпераций.IctDocType <> "RT"
			И СтрокаТаблицыВидовОпераций.IctDocType <> "IT" Тогда
			ТекстОшибки = "Неизвестный вид операции документа перемещения (" + СтрокаТаблицыВидовОпераций.IctDocType + ")!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
	// Определим склады
	ТаблицаЛокаций = ТаблицаПорцииСтрок.Скопировать(, "IctDocType, IctLocation");
	ТаблицаЛокаций.Свернуть("IctDocType, IctLocation");
	InventoryLocationOutСтрока = Неопределено;
	InventoryLocationInСтрока = Неопределено;
	Для Каждого СтрокаТаблицыЛокаций Из ТаблицаЛокаций Цикл
		
		Если СтрокаТаблицыЛокаций.IctDocType = "IT" Тогда
			
			Если InventoryLocationOutСтрока = Неопределено Тогда
				InventoryLocationOutСтрока = СтрокаТаблицыЛокаций.IctLocation;	
			Иначе
				
				Если InventoryLocationOutСтрока <> СтрокаТаблицыЛокаций.IctLocation Тогда
					ТекстОшибки = "В документе указано несколько inventory location out!";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицыЛокаций.IctDocType = "RT" Тогда
			
			Если InventoryLocationInСтрока = Неопределено Тогда
				InventoryLocationInСтрока = СтрокаТаблицыЛокаций.IctLocation;	
			Иначе
				
				Если InventoryLocationInСтрока <> СтрокаТаблицыЛокаций.IctLocation Тогда
					ТекстОшибки = "В документе указано несколько inventory location in!";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				КонецЕсли;

			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Проверим наличие в базе такого поступления
	Докум = Документы.InventoryПеремещение.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	// { RGS LFedotova 13.04.2017 0:12:11 - вопрос SLI-0007236
	Запрос.УстановитьПараметр("IctDocType", IctDocType);
	// } RGS LFedotova 13.04.2017 0:12:29 - вопрос SLI-0007236
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.InventoryПеремещение КАК Таблица
		|ГДЕ
		|	Таблица.Номер = &Номер
		|	И НачалоПериода(Таблица.Дата,День) = &Дата
		// { RGS LFedotova 13.04.2017 0:12:11 - вопрос SLI-0007236
		|	И Таблица.IctDocType = &IctDocType
		// } RGS LFedotova 13.04.2017 0:12:29 - вопрос SLI-0007236
		|	И (НЕ Таблица.ПометкаУдаления)";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		//добавила Федотова Л., РГ-Софт, 23.01.17, вопрос SLI-0007093
		Если ПерезаполнитьТЧ ИЛИ ДозаполнитьТЧ Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Докум = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		Иначе	
			ТекстОшибки = "В системе уже есть списание с таким номером и датой!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	// Создадим документ
	//добавила Федотова Л., РГ-Софт, 24.01.17, вопрос SLI-0007093
	НовыйДокумент = Ложь;
	Если Докум.Пустая() Тогда
		ДокументОбъект = Документы.InventoryПеремещение.СоздатьДокумент();
		НовыйДокумент = Истина;
	Иначе
		ДокументОбъект = Докум.ПолучитьОбъект();
		Если Буфер.НайтиПоЗначению(Докум) = Неопределено Тогда
		    Буфер.Добавить(Докум);
			Если ПерезаполнитьТЧ Тогда
				ДокументОбъект.Goods.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Шапка
	//добавила Федотова Л., РГ-Софт, 26.01.17, вопрос SLI-0007093
	//Если НовыйДокумент Тогда
		ДокументОбъект.Номер = Номер;
	    ДокументОбъект.Дата = Дата+(2*60*60);
	    ДокументОбъект.Company = Число(Сред(ПерваяСтрокаТЗ.SortField9,10,4));
		ДокументОбъект.IctDocType = ПолучитьСтрокуВидовОпераций(ТаблицаПорцииСтрок);
		
		TransitLocation = Справочники.InventoryLocations.Transit;
		ДокументОбъект.InventoryLocationOut = ?(InventoryLocationOutСтрока = Неопределено,
			TransitLocation,
			НайтиСоздатьInventoryLocation(InventoryLocationOutСтрока, Отказ, Заголовок));
		ДокументОбъект.InventoryLocationIn = ?(InventoryLocationInСтрока = Неопределено,
			TransitLocation,
			НайтиСоздатьInventoryLocation(InventoryLocationInСтрока, Отказ, Заголовок));	
		ДокументОбъект.Segment = Справочники.Сегменты.НайтиПоКоду(Сред(ПерваяСтрокаТЗ.SortField4,10,3));
	//КонецЕсли;
	
	ТЧТовары = ДокументОбъект.Goods;
	Для Каждого СтрокаТЗ Из ТаблицаПорцииСтрок Цикл
		// { RGS LFedotova 27.01.2017 21:57:26 - вопрос SLI-0007093
		UOM = НайтиUOM(СтрокаТЗ.IteStockUom, Отказ);
		Good = НайтиСоздатьНоменклатуру(СтрокаТЗ.IctItem, СтрокаТЗ.IteDescription, СтрокаТЗ.IteDescription2, UOM, Отказ, Заголовок);
		Если ДозаполнитьТЧ Тогда
			СтрокаДокумента = ДокументОбъект.Goods.Найти(Good,"Good");
			Если НЕ СтрокаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		// } RGS LFedotova 27.01.2017 21:58:04 - вопрос SLI-0007093 
		НоваяСтрока = ТЧТовары.Добавить();
		НоваяСтрока.UOM = UOM;
		НоваяСтрока.Good = Good;		
		Если СтрокаТЗ.IctDocType = "RT" Тогда
			//-> RG-Soft VIvanov 2015/02/18
			//НоваяСтрока.AUIn = НайтиAU(СтрокаТЗ.SortField10, Отказ);
			НоваяСтрока.AUIn = НайтиAU(СтрокаТЗ.SortField10, ДокументОбъект.Дата, Отказ);
			//<- RG-Soft VIvanov
		Иначе
			//-> RG-Soft VIvanov 2015/02/18
			//НоваяСтрока.AUOut = НайтиAU(СтрокаТЗ.SortField10, Отказ);
			НоваяСтрока.AUOut = НайтиAU(СтрокаТЗ.SortField10, ДокументОбъект.Дата, Отказ);
			//<- RG-Soft VIvanov
		КонецЕсли;
		Если ДокументОбъект.InventoryLocationOut <> TransitLocation Тогда
			//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
			Если ЕстьКолонкаТаблицыЗначений("FMTOutQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.QuantityOut = ПолучитьЧисло(СтрокаТЗ.FMTOutQty, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranOutQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.QuantityOut = ПолучитьЧисло(СтрокаТЗ.TranOutQty, Отказ, Заголовок);
			КонецЕсли;
			НоваяСтрока.QuantityOut = -НоваяСтрока.QuantityOut;
		КонецЕсли;
		Если ДокументОбъект.InventoryLocationIn <> TransitLocation Тогда
			//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
			Если ЕстьКолонкаТаблицыЗначений("FMTInQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.QuantityIn = ПолучитьЧисло(СтрокаТЗ.FMTInQty, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranInQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.QuantityIn = ПолучитьЧисло(СтрокаТЗ.TranInQty, Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли;
		
		Если ДокументОбъект.InventoryLocationOut = TransitLocation Тогда
			НоваяСтрока.QuantityOut = НоваяСтрока.QuantityIn;
		КонецЕсли;
		Если ДокументОбъект.InventoryLocationIn = TransitLocation Тогда
			НоваяСтрока.QuantityIn = НоваяСтрока.QuantityOut;
		КонецЕсли; 
		//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
		Если ЕстьКолонкаТаблицыЗначений("FMTOutValue", ТаблицаПорцииСтрок) Тогда
			НоваяСтрока.ManagementSumOut = ПолучитьЧисло(СтрокаТЗ.FMTOutValue, Отказ, Заголовок);
		ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranOutValue", ТаблицаПорцииСтрок) Тогда
 			НоваяСтрока.ManagementSumOut = ПолучитьЧисло(СтрокаТЗ.TranOutValue, Отказ, Заголовок);
        КонецЕсли;
		НоваяСтрока.ManagementSumOut = -НоваяСтрока.ManagementSumOut;
		//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
		Если ЕстьКолонкаТаблицыЗначений("FMTInValue", ТаблицаПорцииСтрок) Тогда
			НоваяСтрока.ManagementSumIn = ПолучитьЧисло(СтрокаТЗ.FMTInValue, Отказ, Заголовок);	
		ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranInValue", ТаблицаПорцииСтрок) Тогда
			НоваяСтрока.ManagementSumIn = ПолучитьЧисло(СтрокаТЗ.TranInValue, Отказ, Заголовок);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТЧТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.AUIn) Тогда 
			Строки = ТЧТовары.НайтиСтроки(Новый Структура("Good", СтрокаТЧ.Good));
			Для Каждого НайденнаяСтрока Из Строки Цикл
				НайденнаяСтрока.AUIn = СтрокаТЧ.AUIn;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.AUOut) Тогда 
			Строки = ТЧТовары.НайтиСтроки(Новый Структура("Good", СтрокаТЧ.Good));
			Для Каждого НайденнаяСтрока Из Строки Цикл
				НайденнаяСтрока.AUOut = СтрокаТЧ.AUOut;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
		
		
	ТЧТовары.Свернуть("Good, UOM, AUIn, AUOut", "QuantityOut, QuantityIn, ManagementSumOut, ManagementSumIn");
	Для Каждого СтрокаТЧ Из ТЧТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.QuantityOut) Тогда
			СтрокаТЧ.ManagementPriceOut = СтрокаТЧ.ManagementSumOut / СтрокаТЧ.QuantityOut;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.QuantityIn) Тогда
			СтрокаТЧ.ManagementPriceIn = СтрокаТЧ.ManagementSumIn / СтрокаТЧ.QuantityIn;
		КонецЕсли;
		
	КонецЦикла;	
		
	Если НЕ Отказ Тогда
		// { RGS LFedotova 13.04.2017 9:44:25 - вопрос SLI-0007236
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", Номер);
		Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка
			|ИЗ
			|	Документ.InventoryПеремещение КАК Таблица
			|ГДЕ
			|	Таблица.Номер = &Номер
			|	И НачалоПериода(Таблица.Дата,День) = &Дата
			|	И (НЕ Таблица.ПометкаУдаления)";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Если ДокументОбъект.IctDocType = "IT" Тогда
				ДокументОбъект.Дата = ДокументОбъект.Дата - 1;
			ИначеЕсли ДокументОбъект.IctDocType = "RT" Тогда
				ДокументОбъект.Дата = ДокументОбъект.Дата + 1;
			КонецЕсли; 
		КонецЕсли; 
		// } RGS LFedotova 13.04.2017 9:44:57 - вопрос SLI-0007236
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать """ + ДокументОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура СоздатьСписание(ТаблицаПорцииСтрок)
	
	ПерваяСтрокаТЗ = ТаблицаПорцииСтрок[0];
	Номер = ПерваяСтрокаТЗ.IctDocument;
	Дата = ПерваяСтрокаТЗ.IctTransDate;
	
	Отказ = Ложь;
	Заголовок = "Создание списания №" + Номер + " от " + Дата + ":";
	
	// Проверим заполнение номера и даты
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ТекстОшибки = "Не указан номер документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	Дата = ПолучитьДату(Дата, Отказ, Заголовок);
	Если Дата = '00010101' Тогда
		ТекстОшибки = "Не указана дата документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаВидовОпераций = ТаблицаПорцииСтрок.Скопировать(,"IctDocType");
	ТаблицаВидовОпераций.Свернуть("IctDocType");
	Для Каждого СтрокаТаблицыВидовОпераций Из ТаблицаВидовОпераций Цикл
		Если СтрокаТаблицыВидовОпераций.IctDocType <> "IS"
			И СтрокаТаблицыВидовОпераций.IctDocType <> "SH" Тогда
			ТекстОшибки = "Неизвестный вид операции документа списания (" + СтрокаТаблицыВидовОпераций.IctDocType + ")!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Проверим наличие в базе такого поступления
	// НАДО СДЕЛАТЬ БЕЗ ПОДОБНО
	Докум = Документы.InventoryСписание.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.InventoryСписание КАК Таблица
		|ГДЕ
		|	Таблица.Номер = &Номер
		|	И НачалоПериода(Таблица.Дата,День) = &Дата
		|	И (НЕ Таблица.ПометкаУдаления)";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		//добавила Федотова Л., РГ-Софт, 23.01.17, вопрос SLI-0007093
		Если ПерезаполнитьТЧ ИЛИ ДозаполнитьТЧ Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			    Докум = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		Иначе	
			ТекстОшибки = "В системе уже есть списание с таким номером и датой!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	// Создадим документ
	//добавила Федотова Л., РГ-Софт, 24.01.17, вопрос SLI-0007093
	НовыйДокумент = Ложь;
	Если Докум.Пустая() Тогда
		ДокументОбъект = Документы.InventoryСписание.СоздатьДокумент();
		НовыйДокумент = Истина;
	Иначе	
		ДокументОбъект = Докум.ПолучитьОбъект();
		Если Буфер.НайтиПоЗначению(Докум) = Неопределено Тогда
		    Буфер.Добавить(Докум);
			Если ПерезаполнитьТЧ Тогда
				ДокументОбъект.Goods.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Шапка
	//добавила Федотова Л., РГ-Софт, 26.01.17, вопрос SLI-0007093
	//Если НовыйДокумент Тогда
		ДокументОбъект.Номер = Номер;
	    ДокументОбъект.Дата = Дата+(3*60*60);
		ДокументОбъект.Company = Число(Сред(ПерваяСтрокаТЗ.SortField9,10,4));
		ДокументОбъект.InventoryLocation = НайтиСоздатьInventoryLocation(СокрЛП(ПерваяСтрокаТЗ.IctLocation), Отказ, Заголовок);
		ДокументОбъект.IctDocType = ПолучитьСтрокуВидовОпераций(ТаблицаПорцииСтрок);
		ДокументОбъект.Segment = Справочники.Сегменты.НайтиПоКоду(Сред(ПерваяСтрокаТЗ.SortField4,10,3));
	//КонецЕсли; 

	// Табличная часть
	Для Каждого СтрокаТЗ Из ТаблицаПорцииСтрок Цикл
		// { RGS LFedotova 27.01.2017 21:57:26 - вопрос SLI-0007093
		UOM = НайтиUOM(СтрокаТЗ.IteStockUom, Отказ);
		Good = НайтиСоздатьНоменклатуру(СтрокаТЗ.IctItem, СтрокаТЗ.IteDescription, СтрокаТЗ.IteDescription2, UOM, Отказ, Заголовок);
		Если ДозаполнитьТЧ Тогда
			СтрокаДокумента = ДокументОбъект.Goods.Найти(Good,"Good");
			Если НЕ СтрокаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		// } RGS LFedotova 27.01.2017 21:58:04 - вопрос SLI-0007093 
		НоваяСтрока = ДокументОбъект.Goods.Добавить();
		НоваяСтрока.UOM = UOM;
		НоваяСтрока.Good = Good;
		//-> RG-Soft VIvanov 2015/02/18
		//НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, Отказ);
		НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, ДокументОбъект.Дата, Отказ);
		//<- RG-Soft VIvanov
		        		
        НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.IssQty, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
			Если ЕстьКолонкаТаблицыЗначений("FMTOutQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.FMTOutQty, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranOutQty", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.TranOutQty, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Quantity = -НоваяСтрока.Quantity;
		
		НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.IssValue, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ManagementSum) Тогда
			Если ЕстьКолонкаТаблицыЗначений("FMTOutValue", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.FMTOutValue, Отказ, Заголовок);
			ИначеЕсли ЕстьКолонкаТаблицыЗначений("TranOutValue", ТаблицаПорцииСтрок) Тогда
				НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.TranOutValue, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.ManagementSum = -НоваяСтрока.ManagementSum;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			НоваяСтрока.ManagementPrice = НоваяСтрока.ManagementSum / НоваяСтрока.Quantity;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать """ + ДокументОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура СоздатьКорректировку(ТаблицаПорцииСтрок)
	
	ПерваяСтрокаТЗ = ТаблицаПорцииСтрок[0];
	Номер = ПерваяСтрокаТЗ.IctDocument;
	Дата = ПерваяСтрокаТЗ.IctTransDate;
	
	Отказ = Ложь;
	Заголовок = "Создание корректировки №" + Номер + " от " + Дата + ":";
	
	// Проверим заполнение номера и даты
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ТекстОшибки = "Не указан номер документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	Дата = ПолучитьДату(Дата, Отказ, Заголовок);
	Если Дата = '00010101' Тогда
		ТекстОшибки = "Не указана дата документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаВидовОпераций = ТаблицаПорцииСтрок.Скопировать(,"IctDocType");
	ТаблицаВидовОпераций.Свернуть("IctDocType");
	Для Каждого СтрокаТаблицыВидовОпераций Из ТаблицаВидовОпераций Цикл
		Если СтрокаТаблицыВидовОпераций.IctDocType <> "RC"
			И СтрокаТаблицыВидовОпераций.IctDocType <> "CA"
			И СтрокаТаблицыВидовОпераций.IctDocType <> "AJ"
			И СтрокаТаблицыВидовОпераций.IctDocType <> "RA" Тогда
			ТекстОшибки = "Неизвестный вид операции документа корректировка (" + СтрокаТаблицыВидовОпераций.IctDocType + ")!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Проверим наличие в базе такого поступления
	Докум = Документы.InventoryКорректировка.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	// НУЖНО СДЕЛАТЬ БЕЗ ПОДОБНО
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.InventoryКорректировка КАК Таблица
		|ГДЕ
		|	Таблица.Номер = &Номер
		|	И НачалоПериода(Таблица.Дата, День) = &Дата
		|	И (НЕ Таблица.ПометкаУдаления)";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		//добавила Федотова Л., РГ-Софт, 24.01.17, вопрос SLI-0007093
		Если ПерезаполнитьТЧ ИЛИ ДозаполнитьТЧ Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КонецЦикла;
		Иначе	
			ТекстОшибки = "В системе уже есть корректировка с таким номером и датой!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Создадим документ
	//добавила Федотова Л., РГ-Софт, 24.01.17, вопрос SLI-0007093
	НовыйДокумент = Ложь;
	Если Докум.Пустая() Тогда
		ДокументОбъект = Документы.InventoryКорректировка.СоздатьДокумент();
		НовыйДокумент = Истина;
	Иначе	
		ДокументОбъект = Докум.ПолучитьОбъект();
		Если Буфер.НайтиПоЗначению(Докум) = Неопределено Тогда
		    Буфер.Добавить(Докум);
			Если ПерезаполнитьТЧ Тогда
				ДокументОбъект.Goods.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Шапка
	//добавила Федотова Л., РГ-Софт, 26.01.17, вопрос SLI-0007093
	//Если НовыйДокумент Тогда
		ДокументОбъект.Номер = Номер;
	    ДокументОбъект.Дата = Дата+(60*60);
		ДокументОбъект.Company = Число(Сред(ПерваяСтрокаТЗ.SortField9,10,4));

		ДокументОбъект.InventoryLocation = НайтиСоздатьInventoryLocation(СокрЛП(ПерваяСтрокаТЗ.IctLocation), Отказ, Заголовок);
		//Если ЗначениеЗаполнено(ДокументОбъект.InventoryLocation) Тогда
		//	ДокументОбъект.TaxRegistration = ДокументОбъект.InventoryLocation.Подразделение;
		//КонецЕсли;
		
		ДокументОбъект.IctDocType = ПолучитьСтрокуВидовОпераций(ТаблицаПорцииСтрок);
		ДокументОбъект.Segment = Справочники.Сегменты.НайтиПоКоду(Сред(ПерваяСтрокаТЗ.SortField4,10,3));
	//КонецЕсли; 

	// Табличная часть
	Для Каждого СтрокаТЗ Из ТаблицаПорцииСтрок Цикл
		// { RGS LFedotova 27.01.2017 21:57:26 - вопрос SLI-0007093
		UOM = НайтиUOM(СтрокаТЗ.IteStockUom, Отказ);
		Good = НайтиСоздатьНоменклатуру(СтрокаТЗ.IctItem, СтрокаТЗ.IteDescription, СтрокаТЗ.IteDescription2, UOM, Отказ, Заголовок);
		Если ДозаполнитьТЧ Тогда
			СтрокаДокумента = ДокументОбъект.Goods.Найти(Good,"Good");
			Если НЕ СтрокаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		// } RGS LFedotova 27.01.2017 21:58:04 - вопрос SLI-0007093 
		НоваяСтрока = ДокументОбъект.Goods.Добавить();
		НоваяСтрока.UOM = UOM;
		НоваяСтрока.Good = Good;
		//-> RG-Soft VIvanov 2015/02/18
		//НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, Отказ);
		НоваяСтрока.AU = НайтиAU(СтрокаТЗ.SortField10, ДокументОбъект.Дата, Отказ);
		//<- RG-Soft VIvanov
				
		НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.AdjQty, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			НоваяСтрока.Quantity = ПолучитьЧисло(СтрокаТЗ.RecQty, Отказ, Заголовок);
		КонецЕсли;
		
		НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.AdjValue, Отказ, Заголовок);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ManagementSum) Тогда
			НоваяСтрока.ManagementSum = ПолучитьЧисло(СтрокаТЗ.RecValue, Отказ, Заголовок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Quantity) Тогда
			НоваяСтрока.ManagementPrice = НоваяСтрока.ManagementSum / НоваяСтрока.Quantity;
		КонецЕсли;	
	КонецЦикла;
    
	
	Если ДокументОбъект.Goods.Итог("Quantity")<0 Тогда
		ДокументОбъект.Дата = Дата+(60*60+60);
	Иначе
		ДокументОбъект.Дата = Дата+(60*60);
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать """ + ДокументОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуВидовОпераций(ТаблицаПорцииСтрок)
	
	СтрокаВидовОпераций = "";
	Таблица = ТаблицаПорцииСтрок.Скопировать(,"IctDocType");
	Таблица.Свернуть("IctDocType");
	Для Каждого СтрокаТЗ Из Таблица Цикл
		СтрокаВидовОпераций = СтрокаВидовОпераций + СокрЛП(СтрокаТЗ.IctDocType) + ", ";
	КонецЦикла;
	СтрокаВидовОпераций = Лев(СтрокаВидовОпераций, СтрДлина(СтрокаВидовОпераций) - 2);
	Возврат СтрокаВидовОпераций;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ЗНАЧЕНИЙ

Функция ПолучитьДату(Строка, Отказ=Ложь, Заголовок="")
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда
		Возврат Строка;
	КонецЕсли;
	
	СтрокаДата = СокрЛП(Строка);
	СтрокаДата = Прав(СтрокаДата, 4) + Сред(СтрокаДата, 4, 2) + Лев(СтрокаДата, 2);
	СтрокаДата = СтрЗаменить(СтрокаДата, "00000000", "00010101");
	
	Попытка
		Дата = Дата(СтрокаДата);
	Исключение
		ТекстОшибки = "Не удалось преобразовать строку """ + СтрокаДата + """ в дату!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецПопытки;	
		
	Возврат	Дата;
	
КонецФункции

Функция ПолучитьЧисло(Строка, Отказ=Ложь, Заголовок="")
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Попытка
		Число = Число(СокрЛП(Строка));
	Исключение
		ТекстОшибки = "Не удалось преобразовать строку """ + Строка + """ в число!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Число;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////
// ПОИСК / СОЗДАНИЕ СПРАВОЧНИКОВ

Функция НайтиСоздатьInventoryLocation(Код, Отказ=Ложь, Заголовок="")
	
	ИнвЛок = Справочники.InventoryLocations.НайтиПоКоду(Код);
	Если ИнвЛок.Пустая() Тогда
		
		Объект = Справочники.InventoryLocations.СоздатьЭлемент();
		Объект.Код = Код;
		Объект.Наименование = Код;
		
		Если НЕ Отказ Тогда
			Попытка
				Объект.Записать();
				ИнвЛок = Объект.Ссылка;
			Исключение
				ТекстОшибки = "Не удалось записать inventory location """ + Объект + """: " + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнвЛок;
	
КонецФункции

Функция НайтиСоздатьНоменклатуру(Знач Код, IteDescription, IteDescription2, UOM, Отказ=Ложь, Заголовок="")
	
	Попытка
		Код = Формат(Число(Код),"ЧГ=0");
	Исключение
		Код = СтрЗаменить(Код, """", "");
		Код = СтрЗаменить(Код, "=", "");
		Код = СокрЛП(Код);
		//Добавила Федотова Л., РГ-Софт, 14.10.11 ->
		//Уберем левые нули
		ДлинаКода = СтрДлина(Код);
		ТекСимвол = Лев(Код,1);
		СтрокаСправа = Код;
		Сч = 1;
		Пока ТекСимвол = "0" Цикл
			СтрокаСправа = Прав(СтрокаСправа, ДлинаКода - Сч);
			ТекСимвол = Лев(СтрокаСправа,1);
			Сч = Сч + 1;
		КонецЦикла;
		Код = СтрокаСправа;
		//<-
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		ТекстОшибки = "Поле Кода для Номенклатуры """ + СокрЛП(IteDescription) + """ в XR220 не заполнено!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецЕсли;
	
	Номенклатура = Справочники.InventoryGoods.НайтиПоКоду(Код);
	НоменклатураОбъект = Неопределено;
	Если Номенклатура.Пустая() Тогда
		
		НоменклатураОбъект = Справочники.InventoryGoods.СоздатьЭлемент();
		НоменклатураОбъект.Код = Код;
		НоменклатураОбъект.Наименование = СокрЛП(IteDescription) + СокрЛП(IteDescription2);
		
		Если ЗначениеЗаполнено(UOM) Тогда 
			НоменклатураОбъект.StandardUOM = UOM;
		КонецЕсли;
		
		// Попробуем подцепить каталог
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", СокрЛП(Код));
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Catalog.Ссылка
			|ИЗ
			|	Справочник.Catalog КАК Catalog
			|ГДЕ
			|	Catalog.Код ПОДОБНО &Код + ""%""";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоменклатураОбъект.Catalog = Выборка.Ссылка;	
		КонецЕсли;
			
	Иначе
		
		Если ЗначениеЗаполнено(UOM) Тогда
			
			GoodUOM = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "StandardUOM");
			Если НЕ ЗначениеЗаполнено(GoodUOM) Тогда
				
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.StandardUOM = UOM;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не Отказ
		И НоменклатураОбъект <> Неопределено Тогда
		Попытка
			НоменклатураОбъект.Записать();
			Номенклатура = НоменклатураОбъект.Ссылка;
		Исключение
			ТекстОшибки = "Не удалось записать номенклатуру """ + НоменклатураОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
     
Функция НайтиUOM(IteStockUom, Отказ=Ложь)
	
	КодUOM = СокрЛП(IteStockUom);
	UOM = Справочники.UOMs.НайтиПоКоду(КодUOM);
	
	Если НЕ ЗначениеЗаполнено(UOM) Тогда
		
		ТекстОшибки = "Не удалось найти UOM """ + КодUOM + """!";
		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат UOM;
	
КонецФункции                                

Функция НайтиAU(AU, Дата, Отказ=Ложь)
	
	КодAU = Прав(AU, 7);
	//КодAU = СтрЗаменить(AU, "Accounting unit : ", "");
	//КодAU = Сред(AU, 19, 7);
	
	//-> RG-Soft VIvanov 2015/02/18
	//AU_Ссылка = Справочники.КостЦентры.НайтиПоКоду(КодAU);
	AU_Ссылка = РГСофт.НайтиAU(Дата, КодAU);
	//<- RG-Soft VIvanov
	
	Если НЕ ЗначениеЗаполнено(AU_Ссылка) Тогда
		
		ТекстОшибки = "Не удалось найти AU """ + КодAU + """!";
		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		Возврат Справочники.КостЦентры.ПустаяСсылка();
		
	КонецЕсли;	
	
	Возврат AU_Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА OFS STORE

#Если Клиент Тогда
// Только клиент
Процедура ЗагрузитьTranType(МассивПолныхИменФайловOFS) Экспорт
	Состояние("Подключение внешней компоненты");
	
	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	
	Для Каждого ПолноеИмяФайла Из МассивПолныхИменФайловOFS Цикл
		
		Состояние("Чтение содержимого файла");
		ТЗ = ПолучитьТЗИзФайлаOFS(ПолноеИмяФайла);
				
		Состояние("Заполнение Transaction Type");
		
		ЗаполнитьДокументыДаннымиИзТаблицы(ТЗ); //RG Soft Михайлов Д.В. 15.11.11
	КонецЦикла;

КонецПроцедуры

// Только клиент
Функция ПолучитьТЗИзФайлаOFS(ПолноеИмяФайла)
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	ТаблицаТрнТп = Новый ТаблицаЗначений;
	ТаблицаТрнТп.Колонки.Добавить("TransactionId", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	//RG Soft Михайлов Д.В. 15.11.11
	ТаблицаТрнТп.Колонки.Добавить("TransactionTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TransactionSubTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TxnHeaderComments", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	//Конец RG Soft Михайлов Д.В. 15.11.11
	Для Инд = 2 По КолВоСтрок Цикл
		СтрокаТаблицы = ТаблицаТрнТп.Добавить();
		СтрокаТаблицы.TransactionId = СокрЛП(Лист.Cells(Инд, 3).Value);
		//RG Soft Михайлов Д.В. 15.11.11
		СтрокаТаблицы.TransactionTypeName = СокрЛП(Лист.Cells(Инд, 5).Value);
		СтрокаТаблицы.TransactionSubTypeName = СокрЛП(Лист.Cells(Инд, 6).Value);
		СтрокаТаблицы.TxnHeaderComments = СокрЛП(Лист.Cells(Инд, 10).Value);
		//Конец RG Soft Михайлов Д.В. 15.11.11
	КонецЦикла;
			
	File.Quit();
	
	Возврат ТаблицаТрнТп;

КонецФункции
#КонецЕсли

Процедура ЗаполнитьДокументыДаннымиИзТаблицы(ТЗ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.TransactionTypeName,
	|	ТЗ.TransactionSubTypeName,
	|	ТЗ.TxnHeaderComments,
	|	ТЗ.TransactionId
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.TransactionTypeName,
	|	ВТ_ТЗ.TransactionSubTypeName,
	|	ВТ_ТЗ.TxnHeaderComments,
	|	ВТ_ТЗ.TransactionId,
	|	ЕСТЬNULL(InventoryКорректировка.Ссылка, """") КАК Ссылка
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryКорректировка КАК InventoryКорректировка
	|		ПО (""%"" + ВТ_ТЗ.TransactionId + ""%"" ПОДОБНО ""%"" + InventoryКорректировка.Номер + ""%"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТЗ.TransactionTypeName,
	|	ВТ_ТЗ.TransactionSubTypeName,
	|	ВТ_ТЗ.TxnHeaderComments,
	|	ВТ_ТЗ.TransactionId,
	|	ЕСТЬNULL(InventoryСписание.Ссылка, """")
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryСписание КАК InventoryСписание
	|		ПО (""%"" + ВТ_ТЗ.TransactionId + ""%"" ПОДОБНО ""%"" + InventoryСписание.Номер + ""%"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.TransactionTypeName,
	|	ИтоговаяТаблица.TransactionSubTypeName,
	|	ИтоговаяТаблица.TxnHeaderComments,
	|	ИтоговаяТаблица.TransactionId,
	|	МАКСИМУМ(ИтоговаяТаблица.Ссылка) КАК Ссылка
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.TransactionTypeName,
	|	ИтоговаяТаблица.TransactionSubTypeName,
	|	ИтоговаяТаблица.TxnHeaderComments,
	|	ИтоговаяТаблица.TransactionId";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка = "" Тогда
			Сообщить("Документа ""InventoryКорректировка"" с номером " + СокрЛП(Выборка.TransactionId) + " не существует!");
			Продолжить;
		Иначе
			Изменен = Ложь;
			Док = Выборка.Ссылка.ПолучитьОбъект();
			TT = НайтиTransactionType(Выборка.TransactionTypeName + "; " + Выборка.TransactionSubTypeName);
			Если Док.TransactionType <> TT Тогда
				Док.TransactionType = TT;
				Изменен = Истина;
			КонецЕсли;
			Если Не СтрНайти(Док.Comment, Выборка.TxnHeaderComments) Тогда
				Док.Comment = Док.Comment + " " + Выборка.TxnHeaderComments;
				Изменен = Истина;
			КонецЕсли;
			Если Изменен Тогда
				Док.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиTransactionType(Наименование)
	
	Если СтрНайти(Наименование,"Issue; Convert To Asset") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueConvertToAsset;
	ИначеЕсли СтрНайти(Наименование,"Issue; FMT OUT") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueFMTOUT;
	ИначеЕсли СтрНайти(Наименование,"Issue; FMT OUT") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueFMTOUT;
	ИначеЕсли СтрНайти(Наименование,"Issue; To Export") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToExport;
	ИначеЕсли СтрНайти(Наименование,"Issue; To Repair - Client Owned") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToRepairClientOwned;
	ИначеЕсли СтрНайти(Наименование,"Issue; To Repair - SLB Owned") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToRepairSLBOwned;
	ИначеЕсли СтрНайти(Наименование,"Issue; To Sales") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToSales;
	ИначеЕсли СтрНайти(Наименование,"Issue; To Service") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToService;  
	ИначеЕсли СтрНайти(Наименование,"Adjust Stock;") <> 0 Тогда //добавила ";" Федотова Л., РГ-Софт, 12.03.12, вопрос SLI-0003397
		Возврат Перечисления.InventoryTransactionsTypes.AdjustStock;  
	ИначеЕсли СтрНайти(Наименование,"Cycle Count;") <> 0 Тогда  //добавила ";" Федотова Л., РГ-Софт, 12.03.12, вопрос SLI-0003397
		Возврат Перечисления.InventoryTransactionsTypes.CycleCount;  
	ИначеЕсли СтрНайти(Наименование,"Issue; To Junk") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueToJunk;  
	ИначеЕсли СтрНайти(Наименование,"Returns; From Sales") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ReturnsFromSales;  
	ИначеЕсли СтрНайти(Наименование,"Returns; From Service") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ReturnsFromService; 
	//добавила Федотова Л., РГ-Софт, 12.03.13, вопрос SLI-0003397 ->
	ИначеЕсли СтрНайти(Наименование,"Issue; Issue OUT") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.IssueIssueOUT;  
	ИначеЕсли СтрНайти(Наименование,"Movement;") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.Movement;  
	ИначеЕсли СтрНайти(Наименование,"Receive; FMT IN") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ReceiveFMTIN;  
	ИначеЕсли СтрНайти(Наименование,"Reconciliation Adjustment;") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ReconciliationAdjustment;  
	ИначеЕсли СтрНайти(Наименование,"Requisition Order;") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.RequisitionOrder;  
	ИначеЕсли СтрНайти(Наименование,"Returns; From Issue OUT") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ReturnsFromIssueOUT;  
	//<-
	
	// { RGS LFedotova 11.02.2018 12:01:08 - вопрос SLI-0007491
	ИначеЕсли СтрНайти(Наименование,"Manual Write up/down") <> 0 Тогда
		Возврат Перечисления.InventoryTransactionsTypes.ManualWriteUpDown;  
	// } RGS LFedotova 11.02.2018 12:01:30 - вопрос SLI-0007491 
	
	Иначе
		Сообщить("Не найден TransactionType " + Наименование);
		Возврат Перечисления.InventoryTransactionsTypes.ПустаяСсылка();  
	КонецЕсли;
	
КонецФункции

//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
Функция ЕстьКолонкаТаблицыЗначений(ИмяКолонки, ТаблицаЗначений)
	
	Возврат НЕ (ТаблицаЗначений.Колонки.Найти(ИмяКолонки) = Неопределено);

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КОРРЕКТИРОВОК

#Если Клиент Тогда
// Только клиент
Процедура ЗагрузитьКорректировки(МассивПолныхИменФайловКорректировок) Экспорт
	Состояние("Подключение внешней компоненты");
	
	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	
	Для Каждого ПолноеИмяФайла Из МассивПолныхИменФайловКорректировок Цикл
		
		Состояние("Чтение содержимого файла");
		ТЗ = ПолучитьТЗИзФайлаКорректировок(ПолноеИмяФайла);
				
		Состояние("Заполнение корректировок");
		
		ВнестиВКорректировкиДанныеИзТаблицы(ТЗ); 
	КонецЦикла;

КонецПроцедуры

// Только клиент
Функция ПолучитьТЗИзФайлаКорректировок(ПолноеИмяФайла)
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерКорректировки", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("CommentРУС", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Таблица.Колонки.Добавить("Списание", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(3, ДопустимаяДлина.Переменная)));
	Для Инд = 2 По КолВоСтрок Цикл
		Списание = СокрЛП(Лист.Cells(Инд, 5).Value);
		Если Списание = "" Тогда
			Прервать;
		КонецЕсли; 
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.НомерКорректировки = СокрЛП(Лист.Cells(Инд, 1).Value);
		СтрокаТаблицы.CommentРУС = СокрЛП(Лист.Cells(Инд, 4).Value);
		СтрокаТаблицы.Списание = Списание;
	КонецЦикла;
			
	File.Quit();
	
	Возврат Таблица;

КонецФункции

#КонецЕсли

Процедура ВнестиВКорректировкиДанныеИзТаблицы(ТЗ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.НомерКорректировки,
	|	ТЗ.CommentРУС,
	|	ТЗ.Списание
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(InventoryКорректировка.Ссылка, 0) КАК Ссылка,
	|	ВТ_ТЗ.НомерКорректировки,
	|	ВТ_ТЗ.CommentРУС,
	|	ВТ_ТЗ.Списание
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryКорректировка КАК InventoryКорректировка
	|		ПО (""%"" + ВТ_ТЗ.НомерКорректировки + ""%"" ПОДОБНО ""%"" + InventoryКорректировка.Номер + ""%"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка = 0 Тогда
			Сообщить("Документ ""Inventory Корректировка"" с номером " + СокрЛП(Выборка.НомерКорректировки) + " не найден!");
			Продолжить;
		Иначе
			Док = Выборка.Ссылка.ПолучитьОбъект();
			//Трефиленков, 30.09.2012, SLI-0002839
			Док.Reference = ПолучитьСоздатьЭлементСправочника(Выборка.CommentРУС);
			Если Выборка.Списание = "yes" Тогда           
			    Док.IctDocType = "AJ, IS";
			КонецЕсли;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Трефиленков, 30.09.2012, SLI-0002839
Функция ПолучитьСоздатьЭлементСправочника(Имя)
	
	Элемент = Справочники.КомментарииКорректировок.НайтиПоНаименованию(Имя);
	Если Элемент.Пустая() Тогда
		Элемент = Справочники.КомментарииКорректировок.СоздатьЭлемент();
		Элемент.Наименование = Имя;
		Элемент.Записать();
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА SO

#Если Клиент Тогда
// Только клиент
Процедура ЗагрузитьSO(МассивПолныхИменФайловКорректировок) Экспорт
	Состояние("Подключение внешней компоненты");
	
	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	
	Для Каждого ПолноеИмяФайла Из МассивПолныхИменФайловКорректировок Цикл
		
		Состояние("Чтение содержимого файла");
		ТЗ = ПолучитьТЗИзФайлаСписаний(ПолноеИмяФайла);
				
		Состояние("Заполнение корректировок");
		
		ВнестиВСписанияДанныеИзТаблицы(ТЗ); 
	КонецЦикла;

КонецПроцедуры

// Только клиент
Функция ПолучитьТЗИзФайлаСписаний(ПолноеИмяФайла)
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерСписания", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("SO", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	Для Инд = 2 По КолВоСтрок Цикл
		НомерСписания = СокрЛП(Лист.Cells(Инд, 1).Value);
		Если НомерСписания = "" Тогда
			Прервать;
		КонецЕсли; 
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.НомерСписания = НомерСписания;
		СтрокаТаблицы.SO = СокрЛП(Лист.Cells(Инд, 7).Value);
	КонецЦикла;
			
	File.Quit();
	
	Возврат Таблица;

КонецФункции

#КонецЕсли

Процедура ВнестиВСписанияДанныеИзТаблицы(ТЗ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.НомерСписания,
	|	ТЗ.SO
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(InventoryСписание.Ссылка, 0) КАК Ссылка,
	|	ВТ_ТЗ.НомерСписания,
	|	ВТ_ТЗ.SO
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryСписание КАК InventoryСписание
	|		ПО (""%"" + ВТ_ТЗ.НомерСписания + ""%"" ПОДОБНО ""%"" + InventoryСписание.Номер + ""%"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка = 0 Тогда
			Сообщить("Документ ""Inventory Списание"" с номером " + СокрЛП(Выборка.НомерСписания) + " не найден!");
			Продолжить;
		Иначе
			Док = Выборка.Ссылка.ПолучитьОбъект();
		    Док.SO = Выборка.SO;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
//Загрузка Invoice
Процедура ОбработатьДокументыПоступления(ТЗ) Экспорт
	
	ТЗ.Свернуть("PoNumber, GrNumber, GrDate, Item, Invoice, GrQty");
	ТЗДляЗапроса = Новый ТаблицаЗначений;
	ТЗДляЗапроса.Колонки.Добавить("PoNumber", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТЗДляЗапроса.Колонки.Добавить("GrNumber", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТЗДляЗапроса.Колонки.Добавить("Item",     ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТЗДляЗапроса.Колонки.Добавить("Invoice",  ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТЗДляЗапроса.Колонки.Добавить("GrQty",    ОбщегоНазначения.ОписаниеТипаЧисло(15,4));
	ТЗДляЗапроса.Колонки.Добавить("Дата",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.GrNumber <> "" Тогда
			СтрокаЗапрос = ТЗДляЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗапрос, СтрокаТЗ);
			СтрокаЗапрос.Дата = ПолучитьДату(СтрокаТЗ.GrDate);
			СтрокаЗапрос.PoNumber = СокрЛП(СтрокаТЗ.PoNumber);
			СтрокаЗапрос.GrQty = ?(НЕ ЗначениеЗаполнено(СтрокаТЗ.GrQty), 0, Число(СтрокаТЗ.GrQty));
		КонецЕсли;
	КонецЦикла;	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Invoice,
	|	ТЗ.PoNumber,
	|	ТЗ.GrNumber,
	|	ТЗ.Item,
	|	ТЗ.Дата,
	|	ТЗ.GrQty
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InventoryПоступлениеGoods.Ссылка КАК Ссылка,
	|	InventoryПоступлениеGoods.НомерСтроки,
	|	ВТ_ТЗ.Invoice
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
	|		ПО (InventoryПоступлениеGoods.Ссылка.Номер = ВТ_ТЗ.GrNumber
	|				ИЛИ InventoryПоступлениеGoods.Ссылка.Номер = ""00"" + ВТ_ТЗ.GrNumber
	|				ИЛИ InventoryПоступлениеGoods.Ссылка.Номер = ""000"" + ВТ_ТЗ.GrNumber
	|				ИЛИ ПОДСТРОКА(InventoryПоступлениеGoods.Ссылка.PONumber, 1, 10) ПОДОБНО ""%"" + ВТ_ТЗ.PoNumber + ""%"")
	|			И (НАЧАЛОПЕРИОДА(ВТ_ТЗ.Дата, Год) = НАЧАЛОПЕРИОДА(InventoryПоступлениеGoods.Ссылка.Дата, Год))
	|			И (ВТ_ТЗ.Item = InventoryПоступлениеGoods.Good.Код
	|				ИЛИ ВТ_ТЗ.Item = ""0"" + InventoryПоступлениеGoods.Good.Код
	|				ИЛИ ВТ_ТЗ.Item = ""00"" + InventoryПоступлениеGoods.Good.Код)
	// { RGS VChaplygin 21.08.2017 13:36:43 - SLI-0007336
	|			И ВТ_ТЗ.GrQty = InventoryПоступлениеGoods.Quantity
	// } RGS VChaplygin 21.08.2017 13:36:46 - SLI-0007336
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("ТЗ",ТЗДляЗапроса);
	Результат = Запрос.Выполнить();
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
		Док = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Выборка = ВыборкаСсылка.Выбрать();
		Пока Выборка.Следующий() Цикл
			//Док.Goods[Выборка.НомерСтроки - 1].НомерИнвойса = Выборка.Invoice;
			РГСофтКлиентСервер.УстановитьЗначение(Док.Goods[Выборка.НомерСтроки - 1].НомерИнвойса, Выборка.Invoice);
		КонецЦикла;	
		Если Док.Модифицированность() Тогда
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать();                                             
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры	

// { RGS LFedotova 10.12.2017 20:57:01 - вопрос SLI-0007434
Процедура ЗаполнитьДанныеПоПоставщикуВДокументыПоступления(ТЗ, НачПериода, КонПериода, ТаблицаПоступлений) Экспорт
	                                                                   
	ТЗДляЗапроса = Новый ТаблицаЗначений;
	ТЗДляЗапроса.Колонки.Добавить("PoNumber",   ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТЗДляЗапроса.Колонки.Добавить("VendorID",   ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТЗДляЗапроса.Колонки.Добавить("VendorName", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.PoNumber <> "" Тогда
			СтрокаЗапрос = ТЗДляЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗапрос, СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаПоступленийДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаПоступленийДляЗапроса.Колонки.Добавить("Поступление", Новый ОписаниеТипов("ДокументСсылка.InventoryПоступление"));
	Для Каждого СтрокаТЗ Из ТаблицаПоступлений Цикл
		СтрокаЗапрос = ТЗДляЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапрос, СтрокаТЗ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.PoNumber,
	|	ТЗ.VendorID,
	|	ТЗ.VendorName
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоступлений.Поступление
	|ПОМЕСТИТЬ ТабПоступлений
	|ИЗ
	|	&ТаблицаПоступлений КАК ТаблицаПоступлений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InventoryПоступление.Ссылка КАК ДокументПоступления,
	|	ВТ_ТЗ.VendorName
	|ИЗ
	|	Документ.InventoryПоступление КАК InventoryПоступление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЗ КАК ВТ_ТЗ
	|		ПО (InventoryПоступление.PONumber ПОДОБНО ВТ_ТЗ.PoNumber + ""%"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоступлений КАК ТабПоступлений
	|		ПО InventoryПоступление.Ссылка = ТабПоступлений.Поступление
	|ГДЕ
	|	InventoryПоступление.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И НЕ InventoryПоступление.ПометкаУдаления";

	Запрос.УстановитьПараметр("ТЗ",ТЗДляЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоступлений",ТаблицаПоступленийДляЗапроса);
	Запрос.УстановитьПараметр("НачПериода",?(ЗначениеЗаполнено(НачПериода),НачПериода,Дата(1,1,1)));
	Запрос.УстановитьПараметр("КонПериода",?(ЗначениеЗаполнено(КонПериода),КонецДня(КонПериода),КонецГода(ТекущаяДата())));
	
	Если ТаблицаПоступлений.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоступлений КАК ТабПоступлений","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПО InventoryПоступление.Ссылка = ТабПоступлений.Поступление","");
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДокументПоступления.VendorName) Тогда
			Продолжить;
		КонецЕсли;
		ДокОбъект = Выборка.ДокументПоступления.ПолучитьОбъект();
		ДокОбъект.VendorName = Выборка.VendorName;
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать();  
		Сообщить("Обработан документ " + Выборка.ДокументПоступления);
	КонецЦикла;	
		
КонецПроцедуры	
// } RGS LFedotova 10.12.2017 20:57:30 - вопрос SLI-0007434
