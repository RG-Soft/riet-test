
/////////////////////////////////////////////////////////////////////////////////
//ЗАГРУЗКА MIMR
/////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПредставлениеПутиКФайламНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	       		
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы csv (*.csv)|*.csv";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.csv";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловMIMR.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПредставлениеПутиКФайлам = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловMIMR Цикл
			ПредставлениеПутиКФайлам = ПредставлениеПутиКФайлам + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры
  
 &НаКлиенте
Процедура ЗагрузитьMIMR(Команда)
	
	Объект.Буфер.Очистить();
	//ПоказатьОповещениеПользователя("Выполняется чтение содержимого файла и создание документов");
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"MIMR: Выполняется чтение содержимого файла(ов) и создание документов",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	// { RGS VChaplygin 18.09.2014 9:45:56 - Передадим на сервер
	//ПроизвестиЗагрузкуИзФайла(СписокПолныхИменФайловMIMR.ВыгрузитьЗначения());
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловMIMR.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		//10.07.2014 Пахоменков
		// Подмена строк местами в целях верного определения типа
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("IctItem");
		ИмяФайла 	= Файл.Имя;
		Путь		= Файл.Путь; 
		Если ОбработкаDSSКлиент.ПроверитьФайлСЗаменойТипов(ИмяФайла, Путь, ИменаРеквизитов, 20, 6) Тогда    
			Возврат;
		КонецЕсли;      
		Сообщить("Проверка файла """ + Путь+ИмяФайла + """ прошла успешно.", СтатусСообщения.Информация);			
		//<-      
		
		ДанныеФайла = Новый ДвоичныеДанные(Путь+ИмяФайла);

		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла", ДанныеФайла, ИмяФайла);
		//АдресДанных = Новый УникальныйИдентификатор;
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных); //, АдресДанных);
		
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	// { RGS LFedotova 10.12.2017 23:05:45 - вопрос
	//ПроизвестиЗагрузкуИзФайла(МассивАдресовВХранилище);
	ПроизвестиЗагрузкуИзФайла(МассивАдресовВХранилище);
	ЗаполнитьПоставщиков(Команда);
	// } RGS LFedotova 10.12.2017 23:05:51 - вопрос
	
	//ПоказатьОповещениеПользователя("Завершено чтение содержимого файла и создание документов");
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"MIMR: Завершено чтение содержимого файла(ов) и создание документов",
		БиблиотекаКартинок.Флаг);
	
	// } RGS VChaplygin 18.09.2014 9:46:05 - Передадим на сервер
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ФАЙЛА

&НаСервере
Процедура ПроизвестиЗагрузкуИзФайла(МассивПолныхИменФайлов) 
	
	//Попытка
	//	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	//Исключение
	//	Сообщить("Не удалось подключить компоненту GameWithFire!");
	//	Возврат;
	//КонецПопытки;

	Для Каждого ЭлементМассива Из МассивПолныхИменФайлов Цикл
		
		ТЗ = ПолучитьТЗИзФайла(ЭлементМассива);
		
		Если ТЗ = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		//СоздатьДокументы(ТЗ);
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		
		// { RGS LFedotova 10.12.2017 22:50:33 - вопрос SLI-0007434
		//ОбъектОбработки.СоздатьДокументы(ТЗ);
		Объект.ТаблицаПоступлений.Очистить();
		ТаблицаПоступлений = Объект.ТаблицаПоступлений.Выгрузить();
		ОбъектОбработки.СоздатьДокументы(ТЗ, ТаблицаПоступлений);
		Объект.ТаблицаПоступлений.Загрузить(ТаблицаПоступлений);
		// } RGS LFedotova 10.12.2017 22:50:51 - вопрос SLI-0007434
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьНеКорректныеСимволы(Знач Строчка)

	Строчка = СтрЗаменить(Строчка, "#", "");
	Строчка = СтрЗаменить(Строчка, "/", "");
	Строчка = СтрЗаменить(Строчка, "\", "");
	Строчка = СтрЗаменить(Строчка, ".", "");
	
	Возврат Строчка;

КонецФункции // аа()
 

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайла(АдресВХранилище, УсловиеSQLЗапрос = Неопределено)
	
	// { RGS VChaplygin 18.09.2014 9:55:40 - работаем с хранилищем
	//ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
	
	КаталогДанныхЗагрузки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(КаталогДанныхЗагрузки);
	
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ПолноеИмяФайла = КаталогДанныхЗагрузки + СтруктураОписанияДанных.ИмяФайла;
	СтруктураОписанияДанных.ДанныеФайла.Записать(ПолноеИмяФайла);
	
	ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
	// } RGS VChaplygin 18.09.2014 9:55:50 - работаем с хранилищем
	
	
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ЗагружаемыйФайл.Имя +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "MaxScanRows=0"
		+ Символы.ПС + "Format=CSVDelimited");
	ФайлСхемы.Записать(ЗагружаемыйФайл.Путь + "schema.ini", КодировкаТекста.OEM);
	
	SQLЗапрос = "SELECT * ";
		// { RGS VChaplygin слияние различий версий
		////|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
		//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE IctDocType <> '' AND SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')";
		//[РКХ->]
		Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
	   		SQLЗапрос = SQLЗапрос + "
			//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
			//16-07-2014 пахоменков
			//|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0364%')";
			|FROM "+ ЗагружаемыйФайл.Имя + " WHERE (SortField3 LIKE 'Subgeomkt: R%' OR SortField3 LIKE 'Subgeomkt: PAL%') AND (SortField9 LIKE 'Company: 0364%')";  
			//<-
		Иначе  
			// { RGS LFedotova 8/7/2017 11:22:41 AM - вопрос SLI-0007324
		  	//SQLЗапрос = SQLЗапрос + "
			////|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND SortField9 LIKE 'Company: 0004%'";
			////|FROM "+ ЗагружаемыйФайл.Имя + " WHERE SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')";  
			//|FROM "+ ЗагружаемыйФайл.Имя + ?(УсловиеSQLЗапрос = Неопределено, 
			//                               " WHERE IctDocType <> '' AND SortField3 LIKE 'Subgeomkt: R%' AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')",
			//							     УсловиеSQLЗапрос);;
			
			// { RGS LFedotova 08.08.2017 14:15:22 - вопрос SLI-0007329
			//SQLЗапрос = SQLЗапрос + "
			//|FROM "+ ЗагружаемыйФайл.Имя + ?(УсловиеSQLЗапрос = Неопределено, 
			//                               " WHERE IctDocType <> '' AND (SortField3 LIKE 'Subgeomkt: R%' OR SortField3 LIKE 'Subgeomkt: SKG%') AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')",
			//							     УсловиеSQLЗапрос);;
			SQLЗапрос = SQLЗапрос + "
			|FROM "+ ЗагружаемыйФайл.Имя + ?(УсловиеSQLЗапрос = Неопределено, 
			                               " WHERE IctDocType <> '' AND (SortField3 LIKE 'Subgeomkt: R%' OR SortField3 LIKE 'Subgeomkt: SKG%' OR SortField3 LIKE 'Subgeomkt: ASG%') AND (SortField9 LIKE 'Company: 0004%' OR SortField9 LIKE 'Company: 0356%')",
										     УсловиеSQLЗапрос);;
			
			// } RGS LFedotova 08.08.2017 14:15:27 - вопрос SLI-0007329 
			// } RGS LFedotova 8/7/2017 11:22:47 AM - вопрос SLI-0007324
		КонецЕсли;
		//[<-РКХ]
		// } RGS VChaplygin слияние различий версий
	
	// { RGS VChaplygin 18.09.2014 10:59:54 - для работы на сервере подправлено для исключения огонька
	//ADOUtils = Новый("AddIn.ADOUtils");
	Connection = Новый COMОбъект("ADODB.Connection");
	//Connection.Open("Driver={Microsoft Text Driver (*.txt; *.csv)};Dbq="+ ЗагружаемыйФайл.Путь +";Extensions=csv;Persist Security Info=False");
	
	Recordset = Новый COMОбъект("ADODB.Recordset"); 
	
	//Создаем коннект
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			УдалитьФайлы(КаталогДанныхЗагрузки);
			ВызватьИсключение "Невозможно открыть соединение!" + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	
	//МассивТипов = Новый Массив;
	Recordset = Connection.Execute(SQLЗапрос);
	//ТЗ = ADOUtils.ADORecordsetToValueTable(Recordset);
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	СоответствиеПолей = Новый Соответствие;
	
	Fields = Recordset.Fields;
	КоличествоКолонок = Fields.Count();
	Для Сч = 0 По КоличествоКолонок - 1  Цикл  //202-строка
	
		Поле = Fields.Item(Сч);
		ИмяПоля = УдалитьНеКорректныеСимволы(Поле.Name);
		//МассивТипов.Очистить();
		//МассивТипов.Добавить(ТипЗнч(Поле.Value));
		//ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		//КолонкиТЗ.Добавить(ИмяПоля, ОписаниеТипа);
		СоответствиеПолей[ИмяПоля] = Поле;
		//КолонкиТЗ.Добавить(ИмяПоля, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
		КолонкиТЗ.Добавить(ИмяПоля);
	
	КонецЦикла;
	
	Recordset.MoveFirst();
	Пока НЕ Recordset.EOF Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Для каждого ТекЭлемент Из СоответствиеПолей Цикл
		
			НоваяСтрока[ТекЭлемент.Ключ] = ТекЭлемент.Значение.Value;
		
		КонецЦикла;
		
		Recordset.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close(); // После того, как набор записей уже не нужен, его нужно закрыть
	Connection.Close();
	
	//Возврат Неопределено;
	УдалитьФайлы(КаталогДанныхЗагрузки);
	// } RGS VChaplygin 18.09.2014 11:00:13 - для работы на сервере подправлено для исключения огонька

	
	//Добавим в ТЗ нумерацию строк
	ТЗ.Колонки.Добавить("НомерСтроки");
	Для каждого Строка Из ТЗ Цикл
		Строка.НомерСтроки = ТЗ.Индекс(Строка) + 2;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
//ЗАГРУЗКА OFS STORE
/////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПутьКФайламНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xls (*.xls)|*.xls|Файлы xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xls";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловOFSStore.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайлам = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловOFSStore Цикл
			ПутьКФайлам = ПутьКФайлам + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЛистовНаСервере(АдресДанных)
	
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураОписанияДанных.РасширениеФайла);
	СтруктураОписанияДанных.ДанныеФайла.Записать(ИмяФайла);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ?(Найти(ИмяФайла, " ") > 0, """" + ИмяФайла + """", ИмяФайла) + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	СписокЛистов = Новый Массив;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	Пока rs.EOF() = 0 Цикл
		Если rs.Fields("TABLE_NAME").Value <> "_xlnm#_FilterDatabase" Тогда
			СписокЛистов.Добавить(rs.Fields("TABLE_NAME").Value);
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат СписокЛистов;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьOFSStore(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлам) Тогда
		Сообщить("Сначала необходимо указать путь к файлам OFS!");
		Возврат;
	КонецЕсли; 
	      	
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"OFS Store: Чтение содержимого файла(ов) и заполнение Transaction Type",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	// { RGS VChaplygin 23.09.2014 12:56:10 - переделаем на сервер
	//ЗагрузитьTranType(СписокПолныхИменФайловOFSStore.ВыгрузитьЗначения());
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловOFSStore.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		ДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		
		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла, РасширениеФайла, ИмяЛиста", ДанныеФайла, Файл.Имя, Файл.Расширение, "");
		//АдресДанных = Новый УникальныйИдентификатор;
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных); //, АдресДанных);
		
		СписокЛистов = ПолучитьСписокЛистовНаСервере(АдресДанных);
		
		Если СписокЛистов.Количество() > 0 Тогда
		
			СтруктураОписанияДанных.ИмяЛиста = СписокЛистов[0];
		
		КонецЕсли; 
		
		УдалитьИзВременногоХранилища(АдресДанных);
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных);
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	ЗагрузитьTranType(МассивАдресовВХранилище);
	
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"OFS Store: Завершено чтение содержимого файла(ов) и заполнение Transaction Type",
		БиблиотекаКартинок.Флаг);
	// } RGS VChaplygin 23.09.2014 12:56:20 - переделаем на сервер
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьTranType(МассивПолныхИменФайловOFS) 
	
	// { RGS VChaplygin 22.09.2014 17:24:29 - переаод на сервер
	//Попытка
	//	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	//Исключение
	//	Сообщить("Не удалось подключить компоненту GameWithFire!");
	//	Возврат;
	//КонецПопытки;
	// } RGS VChaplygin 22.09.2014 17:24:38 - переаод на сервер

	Для Каждого ЭлементМассива Из МассивПолныхИменФайловOFS Цикл
		
		//ТЗ = ПолучитьТЗИзФайлаOFS(ЭлементМассива);
		ТЗ = ПолучитьТЗИзФайлаOFSСервер(ЭлементМассива);
		
		Если ТЗ = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		// { RGS VChaplygin 23.09.2014 19:21:58 - заменим на вызов из модуля обработки
		//ЗаполнитьДокументыДаннымиИзТаблицы(ТЗ); //RG Soft Михайлов Д.В. 15.11.11
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ОбъектОбработки.ЗаполнитьДокументыДаннымиИзТаблицы(ТЗ);
		// } RGS VChaplygin 23.09.2014 19:22:09 - заменим на вызов из модуля обработки
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайлаOFS(АдресДанных)
	
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(СтруктураОписанияДанных.РасширениеФайла);
	СтруктураОписанияДанных.ДанныеФайла.Записать(ПолноеИмяФайла);
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	ТаблицаТрнТп = Новый ТаблицаЗначений;
	ТаблицаТрнТп.Колонки.Добавить("TransactionId", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	//RG Soft Михайлов Д.В. 15.11.11
	ТаблицаТрнТп.Колонки.Добавить("TransactionTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TransactionSubTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TxnHeaderComments", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	//Конец RG Soft Михайлов Д.В. 15.11.11
	Для Инд = 2 По КолВоСтрок Цикл
		СтрокаТаблицы = ТаблицаТрнТп.Добавить();
		СтрокаТаблицы.TransactionId = СокрЛП(Лист.Cells(Инд, 3).Value);
		//RG Soft Михайлов Д.В. 15.11.11
		СтрокаТаблицы.TransactionTypeName = СокрЛП(Лист.Cells(Инд, 5).Value);
		СтрокаТаблицы.TransactionSubTypeName = СокрЛП(Лист.Cells(Инд, 6).Value);
		СтрокаТаблицы.TxnHeaderComments = СокрЛП(Лист.Cells(Инд, 10).Value);
		//Конец RG Soft Михайлов Д.В. 15.11.11
	КонецЦикла;
			
	File.Quit();
	
	Возврат ТаблицаТрнТп;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайлаOFSСервер(АдресДанных)
	
	// { RGS VChaplygin 23.09.2014 18:56:07 - Заменим на серверную обработку
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураОписанияДанных.РасширениеФайла);
	СтруктураОписанияДанных.ДанныеФайла.Записать(ИмяФайла);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ?(Найти(ИмяФайла, " ") > 0, """" + ИмяФайла + """", ИмяФайла) + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	ТаблицаТрнТп = Новый ТаблицаЗначений;
	ТаблицаТрнТп.Колонки.Добавить("TransactionId", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	//RG Soft Михайлов Д.В. 15.11.11
	ТаблицаТрнТп.Колонки.Добавить("TransactionTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TransactionSubTypeName", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаТрнТп.Колонки.Добавить("TxnHeaderComments", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	//Конец RG Soft Михайлов Д.В. 15.11.11
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	rs.Close();
	
	sqlString = "select * from [" + СтруктураОписанияДанных.ИмяЛиста + "]";
	rs.Open(sqlString);
	
	rs.MoveFirst();
	rs.MoveNext();
	
	Пока rs.EOF() = 0 Цикл
		
		СтрокаТаблицы = ТаблицаТрнТп.Добавить();
		СтрокаТаблицы.TransactionId = СокрЛП(rs.Fields(2).Value);
		//RG Soft Михайлов Д.В. 15.11.11
		СтрокаТаблицы.TransactionTypeName = СокрЛП(rs.Fields(4).Value);
		СтрокаТаблицы.TransactionSubTypeName = СокрЛП(rs.Fields(5).Value);
		СтрокаТаблицы.TxnHeaderComments = СокрЛП(rs.Fields(9).Value);
		//Конец RG Soft Михайлов Д.В. 15.11.11
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяФайла);
	// } RGS VChaplygin 23.09.2014 18:56:21 - Заменим на серверную обработку
	
	Возврат ТаблицаТрнТп;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДокументыДаннымиИзТаблицы(ТЗ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.TransactionTypeName,
	|	ТЗ.TransactionSubTypeName,
	|	ТЗ.TxnHeaderComments,
	|	ТЗ.TransactionId
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.TransactionTypeName,
	|	ВТ_ТЗ.TransactionSubTypeName,
	|	ВТ_ТЗ.TxnHeaderComments,
	|	ВТ_ТЗ.TransactionId,
	|	ЕСТЬNULL(InventoryКорректировка.Ссылка, 0) КАК Ссылка
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryКорректировка КАК InventoryКорректировка
	|		ПО (""%"" + ВТ_ТЗ.TransactionId + ""%"" ПОДОБНО ""%"" + InventoryКорректировка.Номер + ""%"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТЗ.TransactionTypeName,
	|	ВТ_ТЗ.TransactionSubTypeName,
	|	ВТ_ТЗ.TxnHeaderComments,
	|	ВТ_ТЗ.TransactionId,
	|	ЕСТЬNULL(InventoryСписание.Ссылка, 0)
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryСписание КАК InventoryСписание
	|		ПО (""%"" + ВТ_ТЗ.TransactionId + ""%"" ПОДОБНО ""%"" + InventoryСписание.Номер + ""%"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	пока Выборка.Следующий() цикл
		//Док = Документы.InventoryКорректировка.НайтиПоНомеру(стр.TransactionId);
		Если Выборка.Ссылка = 0 Тогда
			Сообщить("Документа ""InventoryКорректировка"" с номером " + СокрЛП(Выборка.TransactionId) + " не существует!");
			Продолжить;
		Иначе
			Док = Выборка.Ссылка.ПолучитьОбъект();
			Док.TransactionType = Выборка.TransactionTypeName + "; " + Выборка.TransactionSubTypeName;
			Док.Comment = Док.Comment + " " + Выборка.TxnHeaderComments;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//ЗАГРУЗКА КОРРЕКТИРОВОК
/////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПутьКФайлу2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xlsx (*.xlsx)|*.xlsx|Файлы xls (*.xls)|*.xls";    
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xls";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловКорректировок.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайлу2 = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловКорректировок Цикл
			ПутьКФайлу2 = ПутьКФайлу2 + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКорректировки(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлам) Тогда
		Сообщить("Сначала необходимо указать путь к файлам корректировок!");
		Возврат;
	КонецЕсли; 
	    	
	ПоказатьОповещениеПользователя("Чтение содержимого файла и заполнение корректировок");
	ОбработкаПрерыванияПользователя();

	ЗагрузитьКорректировкиНаСервере(СписокПолныхИменФайловКорректировок.ВыгрузитьЗначения());
                       	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьКорректировкиНаСервере(МассивПолныхИменФайловКорректировок) 
	
	Попытка
		ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	Исключение
		Сообщить("Не удалось подключить компоненту GameWithFire!");
		Возврат;
	КонецПопытки;

	Для Каждого ЭлементМассива Из МассивПолныхИменФайловКорректировок Цикл
		
		ТЗ = ПолучитьТЗИзФайлаКорректировок(ЭлементМассива);
				
		ВнестиВКорректировкиДанныеИзТаблицы(ТЗ); 
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайлаКорректировок(ПолноеИмяФайла)
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерКорректировки", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("CommentРУС", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Таблица.Колонки.Добавить("Списание", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(3, ДопустимаяДлина.Переменная)));
	Для Инд = 2 По КолВоСтрок Цикл
		Списание = СокрЛП(Лист.Cells(Инд, 5).Value);
		Если Списание = "" Тогда
			Прервать;
		КонецЕсли; 
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.НомерКорректировки = СокрЛП(Лист.Cells(Инд, 1).Value);
		СтрокаТаблицы.CommentРУС = СокрЛП(Лист.Cells(Инд, 4).Value);
		СтрокаТаблицы.Списание = Списание;
	КонецЦикла;
			
	File.Quit();
	
	Возврат Таблица;

КонецФункции

&НаСервереБезКонтекста
Процедура ВнестиВКорректировкиДанныеИзТаблицы(ТЗ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.НомерКорректировки,
	|	ТЗ.CommentРУС,
	|	ТЗ.Списание
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(InventoryКорректировка.Ссылка, 0) КАК Ссылка,
	|	ВТ_ТЗ.НомерКорректировки,
	|	ВТ_ТЗ.CommentРУС,
	|	ВТ_ТЗ.Списание
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryКорректировка КАК InventoryКорректировка
	|		ПО (""%"" + ВТ_ТЗ.НомерКорректировки + ""%"" ПОДОБНО ""%"" + InventoryКорректировка.Номер + ""%"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка = 0 Тогда
			Сообщить("Документ ""Inventory Корректировка"" с номером " + СокрЛП(Выборка.НомерКорректировки) + " не найден!");
			Продолжить;
		Иначе
			Док = Выборка.Ссылка.ПолучитьОбъект();
			//Трефиленков, 30.09.2012, SLI-0002839
			Док.Reference = ПолучитьСоздатьЭлементСправочника(Выборка.CommentРУС);
			Если Выборка.Списание = "yes" Тогда           
			    Док.IctDocType = "AJ, IS";
			КонецЕсли;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
//ЗАГРУЗКА Siebel Order
/////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПутьКФайлу3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xlsx (*.xlsx)|*.xlsx|Файлы xls (*.xls)|*.xls";    
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xls";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловSO.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайлу3 = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловSO Цикл
			ПутьКФайлу3 = ПутьКФайлу3 + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьSiebelOrder(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу3) Тогда
		Сообщить("Сначала необходимо указать путь к файлу списаний!");
		Возврат;
	КонецЕсли; 
	        	
	//ПоказатьОповещениеПользователя("Чтение содержимого файла и заполнение документов");
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"Siebel order: Выполняется чтение содержимого файла(ов) и заполнение документов",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	// { RGS VChaplygin 23.09.2014 19:47:00 - подготовим для сервера
	//ЗагрузитьSOНаСервере(СписокПолныхИменФайловSO.ВыгрузитьЗначения());
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловMIMR.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		ДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		
		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла, РасширениеФайла, ИмяЛиста", ДанныеФайла, Файл.Имя, Файл.Расширение, "");
		//АдресДанных = Новый УникальныйИдентификатор;
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных); //, АдресДанных);
		
		СписокЛистов = ПолучитьСписокЛистовНаСервере(АдресДанных);
		
		Если СписокЛистов.Количество() > 0 Тогда
		
			СтруктураОписанияДанных.ИмяЛиста = СписокЛистов[0];
		
		КонецЕсли; 
		
		УдалитьИзВременногоХранилища(АдресДанных);
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных);
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	ЗагрузитьSOНаСервере(МассивАдресовВХранилище);
	// } RGS VChaplygin 23.09.2014 19:47:08 - подготовим для сервера
	
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"Siebel order: Завершено чтение содержимого файла(ов) и заполнение документов",
		БиблиотекаКартинок.Флаг);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьSOНаСервере(МассивПолныхИменФайловКорректировок) 
	
	// { RGS VChaplygin 23.09.2014 19:48:48 - не используется
	//Попытка
	//	ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
	//Исключение
	//	Сообщить("Не удалось подключить компоненту GameWithFire!");
	//	Возврат;
	//КонецПопытки;
	// } RGS VChaplygin 23.09.2014 19:48:53 - не используется

	Для Каждого ЭлементМассива Из МассивПолныхИменФайловКорректировок Цикл
		
		//ТЗ = ПолучитьТЗИзФайлаСписаний(ЭлементМассива);
		ТЗ = ПолучитьТЗИзФайлаСписанийНаСервере(ЭлементМассива);
				
		// { RGS VChaplygin 23.09.2014 19:21:58 - заменим на вызов из модуля обработки
		//ВнестиВСписанияДанныеИзТаблицы(ТЗ);
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ОбъектОбработки.ВнестиВСписанияДанныеИзТаблицы(ТЗ);
		// } RGS VChaplygin 23.09.2014 19:22:09 - заменим на вызов из модуля обработки
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайлаСписаний(ПолноеИмяФайла)
	
	Попытка
		File = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Не найден Microfoft Excel.");
		Возврат Неопределено;
	КонецПопытки;	
	
	File.Workbooks.Open(ПолноеИмяФайла);
	Book = File.Workbooks (1);
	
	Лист = Book.Worksheets(1);
	
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерСписания", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("SO", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	Для Инд = 2 По КолВоСтрок Цикл
		НомерСписания = СокрЛП(Лист.Cells(Инд, 1).Value);
		Если НомерСписания = "" Тогда
			Прервать;
		КонецЕсли; 
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.НомерСписания = НомерСписания;
		СтрокаТаблицы.SO = СокрЛП(Лист.Cells(Инд, 7).Value);
	КонецЦикла;
			
	File.Quit();
	
	Возврат Таблица;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗИзФайлаСписанийНаСервере(АдресДанных)
	
	//Попытка
	//	File = Новый COMОбъект("Excel.Application");
	//Исключение
	//	Сообщить("Не найден Microfoft Excel.");
	//	Возврат Неопределено;
	//КонецПопытки;	
	//
	//File.Workbooks.Open(ПолноеИмяФайла);
	//Book = File.Workbooks (1);
	//
	//Лист = Book.Worksheets(1);
	//
	//КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	//Таблица = Новый ТаблицаЗначений;
	//Таблица.Колонки.Добавить("НомерСписания", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	//Таблица.Колонки.Добавить("SO", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	//Для Инд = 2 По КолВоСтрок Цикл
	//	НомерСписания = СокрЛП(Лист.Cells(Инд, 1).Value);
	//	Если НомерСписания = "" Тогда
	//		Прервать;
	//	КонецЕсли; 
	//	СтрокаТаблицы = Таблица.Добавить();
	//	СтрокаТаблицы.НомерСписания = НомерСписания;
	//	СтрокаТаблицы.SO = СокрЛП(Лист.Cells(Инд, 7).Value);
	//КонецЦикла;
			
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураОписанияДанных.РасширениеФайла);
	СтруктураОписанияДанных.ДанныеФайла.Записать(ИмяФайла);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ?(Найти(ИмяФайла, " ") > 0, """" + ИмяФайла + """", ИмяФайла) + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	ТаблицаТрнТп = Новый ТаблицаЗначений;
	ТаблицаТрнТп.Колонки.Добавить("НомерСписания", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная)));
	ТаблицаТрнТп.Колонки.Добавить("SO", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	rs.Close();
	
	sqlString = "select * from [" + СтруктураОписанияДанных.ИмяЛиста + "]";
	rs.Open(sqlString);
	
	rs.MoveFirst();
	rs.MoveNext();
	
	Пока rs.EOF() = 0 Цикл
		
		НомерСписания = СокрЛП(rs.Fields(0).Value);
		Если НомерСписания = "" Тогда
			Прервать;
		КонецЕсли; 
		
		СтрокаТаблицы = ТаблицаТрнТп.Добавить();
		СтрокаТаблицы.НомерСписания = НомерСписания;
		СтрокаТаблицы.SO = СокрЛП(rs.Fields(6).Value);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	УдалитьФайлы(ИмяФайла);
	// } RGS VChaplygin 23.09.2014 18:56:21 - Заменим на серверную обработку
	
	Возврат ТаблицаТрнТп;

КонецФункции

&НаСервереБезКонтекста
Процедура ВнестиВСписанияДанныеИзТаблицы(ТЗ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.НомерСписания,
	|	ТЗ.SO
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(InventoryСписание.Ссылка, 0) КАК Ссылка,
	|	ВТ_ТЗ.НомерСписания,
	|	ВТ_ТЗ.SO
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.InventoryСписание КАК InventoryСписание
	|		ПО (""%"" + ВТ_ТЗ.НомерСписания + ""%"" ПОДОБНО ""%"" + InventoryСписание.Номер + ""%"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка = 0 Тогда
			Сообщить("Документ ""Inventory Списание"" с номером " + СокрЛП(Выборка.НомерСписания) + " не найден!");
			Продолжить;
		Иначе
			Док = Выборка.Ссылка.ПолучитьОбъект();
		    Док.SO = Выборка.SO;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////

//Добавила проверку наличия колонки Федотова Л., РГ-Софт, 13.12.11
&НаСервереБезКонтекста
Функция ЕстьКолонкаТаблицыЗначений(ИмяКолонки, ТаблицаЗначений)
	
	Возврат НЕ (ТаблицаЗначений.Колонки.Найти(ИмяКолонки) = Неопределено);

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ЗНАЧЕНИЙ

&НаСервереБезКонтекста
Функция ПолучитьДату(Строка, Отказ=Ложь, Заголовок="")
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда
		Возврат Строка;
	КонецЕсли;
	
	СтрокаДата = СокрЛП(Строка);
	СтрокаДата = Прав(СтрокаДата, 4) + Сред(СтрокаДата, 4, 2) + Лев(СтрокаДата, 2);
	СтрокаДата = СтрЗаменить(СтрокаДата, "00000000", "00010101");
	
	Попытка
		Дата = Дата(СтрокаДата);
	Исключение
		ТекстОшибки = "Не удалось преобразовать строку """ + СтрокаДата + """ в дату!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецПопытки;	
		
	Возврат	Дата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЧисло(Строка, Отказ=Ложь, Заголовок="")
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Попытка
		Число = Число(СокрЛП(Строка));
	Исключение
		ТекстОшибки = "Не удалось преобразовать строку """ + Строка + """ в число!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Число;
	
КонецФункции
                  
////////////////////////////////////////////////////////////////////////////
// ПОИСК / СОЗДАНИЕ СПРАВОЧНИКОВ

//Трефиленков, 30.09.2012, SLI-0002839
&НаСервереБезКонтекста
Функция ПолучитьСоздатьЭлементСправочника(Имя)
	
	Элемент = Справочники.КомментарииКорректировок.НайтиПоНаименованию(Имя);
	Если Элемент.Пустая() Тогда
		Элемент = Справочники.КомментарииКорректировок.СоздатьЭлемент();
		Элемент.Наименование = Имя;
		Элемент.Записать();
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьInventoryLocation(Код, Отказ=Ложь, Заголовок="")
	
	ИнвЛок = Справочники.InventoryLocations.НайтиПоКоду(Код);
	Если ИнвЛок.Пустая() Тогда
		
		Объект = Справочники.InventoryLocations.СоздатьЭлемент();
		Объект.Код = Код;
		Объект.Наименование = Код;
		
		Если НЕ Отказ Тогда
			Попытка
				Объект.Записать();
				ИнвЛок = Объект.Ссылка;
			Исключение
				ТекстОшибки = "Не удалось записать inventory location """ + Объект + """: " + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнвЛок;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьНоменклатуру(Знач Код, IteDescription, IteDescription2, UOM, Отказ=Ложь, Заголовок="")
	
	Попытка
		Код = Формат(Число(Код),"ЧГ=0");
	Исключение
		Код = СтрЗаменить(Код, """", "");
		Код = СтрЗаменить(Код, "=", "");
		Код = СокрЛП(Код);
		//Добавила Федотова Л., РГ-Софт, 14.10.11 ->
		//Уберем левые нули
		ДлинаКода = СтрДлина(Код);
		ТекСимвол = Лев(Код,1);
		СтрокаСправа = Код;
		Сч = 1;
		Пока ТекСимвол = "0" Цикл
			СтрокаСправа = Прав(СтрокаСправа, ДлинаКода - Сч);
			ТекСимвол = Лев(СтрокаСправа,1);
			Сч = Сч + 1;
		КонецЦикла;
		Код = СтрокаСправа;
		//<-
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		ТекстОшибки = "Поле Кода для Номенклатуры """ + СокрЛП(IteDescription) + """ в XR220 не заполнено!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		Возврат Неопределено;
	КонецЕсли;
	
	Номенклатура = Справочники.InventoryGoods.НайтиПоКоду(Код);
	НоменклатураОбъект = Неопределено;
	Если Номенклатура.Пустая() Тогда
		
		НоменклатураОбъект = Справочники.InventoryGoods.СоздатьЭлемент();
		НоменклатураОбъект.Код = Код;
		НоменклатураОбъект.Наименование = СокрЛП(IteDescription) + СокрЛП(IteDescription2);
		
		Если ЗначениеЗаполнено(UOM) Тогда 
			НоменклатураОбъект.StandardUOM = UOM;
		КонецЕсли;
		
		// Попробуем подцепить каталог
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", СокрЛП(Код));
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Catalog.Ссылка
			|ИЗ
			|	Справочник.Catalog КАК Catalog
			|ГДЕ
			|	Catalog.Код ПОДОБНО &Код + ""%""";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоменклатураОбъект.Catalog = Выборка.Ссылка;	
		КонецЕсли;
			
	Иначе
		
		Если ЗначениеЗаполнено(UOM) Тогда
			
			GoodUOM = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "StandardUOM");
			Если НЕ ЗначениеЗаполнено(GoodUOM) Тогда
				
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.StandardUOM = UOM;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не Отказ
		И НоменклатураОбъект <> Неопределено Тогда
		Попытка
			НоменклатураОбъект.Записать();
			Номенклатура = НоменклатураОбъект.Ссылка;
		Исключение
			ТекстОшибки = "Не удалось записать номенклатуру """ + НоменклатураОбъект + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиUOM(IteStockUom, Отказ=Ложь)
	
	КодUOM = СокрЛП(IteStockUom);
	UOM = Справочники.UOMs.НайтиПоКоду(КодUOM);
	
	Если НЕ ЗначениеЗаполнено(UOM) Тогда
		
		ТекстОшибки = "Не удалось найти UOM """ + КодUOM + """!";
		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат UOM;
	
КонецФункции                                

&НаСервереБезКонтекста
Функция НайтиAU(AU, Отказ=Ложь)
	
	КодAU = Прав(AU, 7);
	//КодAU = СтрЗаменить(AU, "Accounting unit : ", "");
	//КодAU = Сред(AU, 19, 7);
	
	AU_Ссылка = Справочники.КостЦентры.НайтиПоКоду(КодAU);
	
	Если НЕ ЗначениеЗаполнено(AU_Ссылка) Тогда
		
		ТекстОшибки = "Не удалось найти AU """ + КодAU + """!";
		РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		Возврат Справочники.КостЦентры.ПустаяСсылка();
		
	КонецЕсли;	
	
	Возврат AU_Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеПутиКФайламTicketIDНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	       		
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы csv (*.csv)|*.csv";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.csv";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловTiketId.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайлу4 = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловTiketId Цикл
			ПутьКФайлу4 = ПутьКФайлу4 + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьTiketId(Команда)
	
	// { RGS VChaplygin 18.09.2014 9:45:56 - Передадим на сервер
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"Tiket id: Выполняется чтение содержимого файла(ов) и создание документов",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловTiketId.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		ДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);

		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла", ДанныеФайла, СтрЗаменить(Файл.Имя, "-", ""));
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных);
		
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	ЗагрузитьTiketIdНаСервере(МассивАдресовВХранилище);
	
	//ПоказатьОповещениеПользователя("Завершено чтение содержимого файла и создание документов");
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"TicketId: Завершено чтение содержимого файла(ов) и создание документов",
		БиблиотекаКартинок.Флаг);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьTiketIdНаСервере(МассивАдресовВХранилище)
	
	Для Каждого ЭлементМассива Из МассивАдресовВХранилище Цикл
		
		ТЗ = ПолучитьТЗИзФайлаДляTicketId(ЭлементМассива);
		
		Если ТЗ = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ОбъектОбработки.СоздатьДокументыДляTicketId(ТЗ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТЗИзФайлаДляTicketId(АдресВХранилище)
	
	КаталогДанныхЗагрузки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(КаталогДанныхЗагрузки);
	
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ПолноеИмяФайла = КаталогДанныхЗагрузки + СтруктураОписанияДанных.ИмяФайла;
	СтруктураОписанияДанных.ДанныеФайла.Записать(ПолноеИмяФайла);
	
	ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
	
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ЗагружаемыйФайл.Имя +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "MaxScanRows=0"
		+ Символы.ПС + "Format=CSVDelimited");
	ФайлСхемы.Записать(ЗагружаемыйФайл.Путь + "schema.ini", КодировкаТекста.OEM);
	
	SQLЗапрос = "SELECT OrderNbr, IcItem, IcTransaction
		|FROM "+ ЗагружаемыйФайл.Имя + " WHERE Subgeo LIKE 'R%' AND (Company LIKE '4' OR Company LIKE '356') AND (IcTransaction LIKE 'T%' OR IcTransaction LIKE ' T%' OR IcTransaction LIKE '  T%' OR IcTransaction LIKE '   T%') AND IcItem is not null AND OrderNbr is not null";
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Recordset = Новый COMОбъект("ADODB.Recordset"); 
	
	//Создаем коннект
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			УдалитьФайлы(КаталогДанныхЗагрузки);
			ВызватьИсключение "Невозможно открыть соединение!" + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	Recordset = Connection.Execute(SQLЗапрос);
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	СоответствиеПолей = Новый Соответствие;
	
	Fields = Recordset.Fields;
	КоличествоКолонок = Fields.Count();
	Для Сч = 0 По КоличествоКолонок - 1  Цикл  //202-строка
	
		Поле = Fields.Item(Сч);
		ИмяПоля = УдалитьНеКорректныеСимволы(Поле.Name);
		СоответствиеПолей[ИмяПоля] = Поле;
		КолонкиТЗ.Добавить(ИмяПоля, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	
	КонецЦикла;
	
	Recordset.MoveFirst();
	Пока Recordset.EOF = 0 Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Для каждого ТекЭлемент Из СоответствиеПолей Цикл
		
			НоваяСтрока[ТекЭлемент.Ключ] = ТекЭлемент.Значение.Value;
		
		КонецЦикла;
		
		Recordset.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close(); // После того, как набор записей уже не нужен, его нужно закрыть
	Connection.Close();
	
	//Возврат Неопределено;
	УдалитьФайлы(КаталогДанныхЗагрузки);
	
	//Добавим в ТЗ нумерацию строк
	ТЗ.Колонки.Добавить("НомерСтроки");
	Для каждого Строка Из ТЗ Цикл
		Строка.НомерСтроки = ТЗ.Индекс(Строка) + 2;
	КонецЦикла; 
	
	Возврат ТЗ;
	
КонецФункции


// { RGS MYurkevich 6/24/2016 11:09:02 AM - RCA-0000167
 
&НаКлиенте
Процедура ПутьКФайлу5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы csv (*.csv)|*.csv";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.csv";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
		
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловInvoice.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайлу5 = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловInvoice Цикл
			ПутьКФайлу5 = ПутьКФайлу5 + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьInvoice(Команда)
	
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"Invoice: Выполняется чтение содержимого файла(ов) и перезаполнение документов",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловInvoice.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("GrNumber");
		ИмяФайла 	= Файл.Имя;
		Путь		= Файл.Путь; 
		
		ДанныеФайла = Новый ДвоичныеДанные(Путь+ИмяФайла);

		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла", ДанныеФайла, ИмяФайла);
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных); 		
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	ПроизвестиЗагрузкуИзФайлаInvoice(МассивАдресовВХранилище);
	
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"Invoice: Завершено чтение содержимого файла(ов) и перезаполнение документов",
		БиблиотекаКартинок.Флаг);
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиЗагрузкуИзФайлаInvoice(МассивПолныхИменФайлов) 
	
	//Условие = " WHERE GrNumber <> '' AND SubgeoDesc LIKE 'R%' AND Company LIKE '4%' AND Vendor LIKE 'OP0355%'";	
	Условие = " WHERE GrNumber <> ''";	
	Для Каждого ЭлементМассива Из МассивПолныхИменФайлов Цикл
		
		ТЗ = ПолучитьТЗИзФайла(ЭлементМассива, Условие);
		
		Если ТЗ = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ОбъектОбработки.ОбработатьДокументыПоступления(ТЗ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧПриИзменении(Элемент)
	
	Если Объект.ПерезаполнитьТЧ Тогда
		Объект.ДозаполнитьТЧ = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьТЧПриИзменении(Элемент)
	
	Если Объект.ДозаполнитьТЧ Тогда
		Объект.ПерезаполнитьТЧ = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// { RGS LFedotova 09.03.2017 - вопрос SLI-0007196
&НаКлиенте
Процедура УказатьНомераДляЗагрузки(Команда)
	
	ПараметрыФормы = Новый Структура;
	МассивНомеров = ВернутьНомера();
	ПараметрыФормы.Вставить("НомераДокументов", МассивНомеров);

	ОткрытьФорму("Обработка.ЗагрузкаInventoryИзLawson.Форма.ФормаНомеров",ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ВернутьНомера()

	Возврат Объект.СписокНомеров.Выгрузить().ВыгрузитьКолонку("НомерДокумента");

КонецФункции // ()
// } RGS LFedotova 09.03.2017 - вопрос SLI-0007196

// { RGS LFedotova 10.12.2017 17:32:35 - вопрос SLI-0007434
&НаКлиенте
Процедура ПутьКФайламXR299НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Истина;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы csv (*.csv)|*.csv";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.csv";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		СписокПолныхИменФайловXR299.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
		
		ПутьКФайламXR299 = "";
		Для каждого ЭлементСпискаЗначений из СписокПолныхИменФайловXR299 Цикл
			ПутьКФайламXR299 = ПутьКФайламXR299 + ЭлементСпискаЗначений.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Номера документов" Тогда
		Объект.СписокНомеров.Очистить();
		Для к = 1 По Параметр.Количество() Цикл
			НоваяСтрока = Объект.СписокНомеров.Добавить();
			НоваяСтрока.НомерДокумента = Параметр[к-1];
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщиков(Команда)
	
	// { RGS LFedotova 08.05.2018 21:31:40 - вопрос SLI-0007556
	ЭтоXR264 = Истина;
	// } RGS LFedotova 08.05.2018 21:32:40 - вопрос SLI-0007556 
	
	ПоказатьОповещениеПользователя("Обработка файла(ов)",
		,
		"Выполняется чтение содержимого файла(ов) и заполнение документов",
		БиблиотекаКартинок.Excel);
	ОбработкаПрерыванияПользователя();
	
	МассивАдресовВХранилище = Новый Массив;
	МассивФайлов = СписокПолныхИменФайловXR299.ВыгрузитьЗначения();
	Для каждого ТекФайл Из МассивФайлов Цикл
		
		Файл = Новый Файл(ТекФайл);
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Vendor");
		ИмяФайла 	= Файл.Имя;
		// { RGS LFedotova 08.05.2018 22:06:21 - вопрос SLI-0007556
		Если СтрНайти(ИмяФайла,"299") > 0 Тогда
			ЭтоXR264 = Ложь;	
		КонецЕсли;
		// } RGS LFedotova 08.05.2018 22:06:40 - вопрос SLI-0007556
		Путь		= Файл.Путь; 
		Если ОбработкаDSSКлиент.ПроверитьФайлСЗаменойТипов(ИмяФайла, Путь, ИменаРеквизитов, 20, 6) Тогда    
			Возврат;
		КонецЕсли;      
		Сообщить("Проверка файла """ + Путь + ИмяФайла + """ прошла успешно.", СтатусСообщения.Информация);			
		
		ДанныеФайла = Новый ДвоичныеДанные(Путь + ИмяФайла);

		СтруктураОписанияДанных = Новый Структура(
			"ДанныеФайла, ИмяФайла", ДанныеФайла, ИмяФайла);
		АдресДанных = ПоместитьВоВременноеХранилище(СтруктураОписанияДанных); 
		
		МассивАдресовВХранилище.Добавить(АдресДанных);
	
	КонецЦикла; 
	
	ПроизвестиЗагрузкуИзФайловXR299(МассивАдресовВХранилище);
	
	ПоказатьОповещениеПользователя("Завершена обработка файла(ов)",
		,
		"Завершено чтение содержимого файла(ов) и дозаполнение документов",
		БиблиотекаКартинок.Флаг);

КонецПроцедуры
	
&НаСервере
Функция ВернутьТаблицуПоступлений()
	Возврат Объект.ТаблицаПоступлений.Выгрузить();
КонецФункции

&НаСервере
Процедура ПроизвестиЗагрузкуИзФайловXR299(МассивПолныхИменФайлов) 
	
	ТаблицаПоступлений = Объект.ТаблицаПоступлений.Выгрузить();
	
	Для Каждого ЭлементМассива Из МассивПолныхИменФайлов Цикл
		// { RGS LFedotova 08.05.2018 22:10:16 - вопрос SLI-0007556
		//ТЗ = ПолучитьТЗИзФайлаXR299(ЭлементМассива);
		ТЗ = ПолучитьТЗИзФайлаXR299(ЭлементМассива,,ЭтоXR264);
		// } RGS LFedotova 08.05.2018 22:10:21 - вопрос SLI-0007556 
		
		Если ТЗ = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли; 
		
		ТЗ.Свернуть("PoNumber,Vendor,VendorName");
		
		КолВоСтрок = ТЗ.Количество();
		
		Для к = 1 По КолВоСтрок Цикл
			
			Строка = ТЗ[КолВоСтрок - к];
			Если СокрЛП(Строка.PoNumber) = "" Тогда
			
				ТЗ.Удалить(Строка);		
			
			КонецЕсли; 	
		
		КонецЦикла; 
		
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		ОбъектОбработки.ЗаполнитьДанныеПоПоставщикуВДокументыПоступления(ТЗ,Период.ДатаНачала,Период.ДатаОкончания, ТаблицаПоступлений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// { RGS LFedotova 08.05.2018 22:08:18 - вопрос SLI-0007556
//Функция ПолучитьТЗИзФайлаXR299(АдресВХранилище, УсловиеSQLЗапрос = Неопределено)
Функция ПолучитьТЗИзФайлаXR299(АдресВХранилище, УсловиеSQLЗапрос = Неопределено, ЭтоXR264 = Ложь)
// } RGS LFedotova 08.05.2018 22:08:31 - вопрос SLI-0007556 
	
	КаталогДанныхЗагрузки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(КаталогДанныхЗагрузки);
	
	СтруктураОписанияДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ПолноеИмяФайла = КаталогДанныхЗагрузки + СтруктураОписанияДанных.ИмяФайла;
	СтруктураОписанияДанных.ДанныеФайла.Записать(ПолноеИмяФайла);
	
	ЗагружаемыйФайл = Новый Файл(ПолноеИмяФайла);
	
	ФайлСхемы = Новый ТекстовыйДокумент;
	ФайлСхемы.ДобавитьСтроку("["+ ЗагружаемыйФайл.Имя +"]" 
		+ Символы.ПС + "DecimalSymbol=."
		+ Символы.ПС + "MaxScanRows=0"
		+ Символы.ПС + "Format=CSVDelimited");
	ФайлСхемы.Записать(ЗагружаемыйФайл.Путь + "schema.ini", КодировкаТекста.OEM);
	
	// { RGS LFedotova 08.05.2018 21:57:36 - вопрос SLI-0007556
	////SQLЗапрос = "SELECT
	////		|PoNumber,
	////		|Vendor,
	////		|VendorName
	////		|FROM " + ЗагружаемыйФайл.Имя + " WHERE Company = '4'";
	//SQLЗапрос = "SELECT
	//		|PoNumber,
	//		|Vendor,
	//		|VendorVName AS VendorName
	//		|FROM " + ЗагружаемыйФайл.Имя + " WHERE Company = '4'";
	Если ЭтоXR264 Тогда
		SQLЗапрос = "SELECT
				|PoNumber,
				|Vendor,
				|VendorName
				|FROM " + ЗагружаемыйФайл.Имя + " WHERE Company = '4'";
	Иначе
		SQLЗапрос = "SELECT
				|PoNumber,
				|Vendor,
				|VendorVName AS VendorName
				|FROM " + ЗагружаемыйФайл.Имя + " WHERE Company = '4'";
	КонецЕсли; 
	 //} RGS LFedotova 08.05.2018 22:00:32 - вопрос SLI-0007556 
			
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Recordset = Новый COMОбъект("ADODB.Recordset"); 
	
	//Создаем коннект
	Попытка
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1;""";
		Connection.Open(СтрокаПодключения);
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ЗагружаемыйФайл.Путь + ";Extended Properties=""text;HDR=YES;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			УдалитьФайлы(КаталогДанныхЗагрузки);
			ВызватьИсключение "Невозможно открыть соединение!" + ОписаниеОшибки();
		КонецПопытки;		
	КонецПопытки;
	
	
	Recordset = Connection.Execute(SQLЗапрос);
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	СоответствиеПолей = Новый Соответствие;
	
	Fields = Recordset.Fields;
	КоличествоКолонок = Fields.Count();
	Для Сч = 0 По КоличествоКолонок - 1  Цикл  
	
		Поле = Fields.Item(Сч);
		ИмяПоля = УдалитьНеКорректныеСимволы(Поле.Name);
		СоответствиеПолей[ИмяПоля] = Поле;
		КолонкиТЗ.Добавить(ИмяПоля);
	
	КонецЦикла;
	
	Recordset.MoveFirst();
	Пока НЕ Recordset.EOF Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Для каждого ТекЭлемент Из СоответствиеПолей Цикл
		
			НоваяСтрока[ТекЭлемент.Ключ] = СокрЛП(ТекЭлемент.Значение.Value);
		
		КонецЦикла;
		
		Recordset.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close(); 
	Connection.Close();
	
	УдалитьФайлы(КаталогДанныхЗагрузки);
		
	Возврат ТЗ;
	
КонецФункции
// } RGS LFedotova 10.12.2017 17:32:40 - вопрос SLI-0007434
