
//Производит загрузку OFS Store Transactions (FMT_INs_NOT_Closed.csv) 

//регламентное задание
Процедура UploadOFSStoreTransactionsFromHub() Экспорт
	
	//http://www.reports.stores.slb.com/UserExtracts/public/FMT_INs_NOT_Closed.csv
	
	//Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
	//	Возврат;
	//КонецЕсли;
	
	ПолучитьФайлOFSStoreTransactions();
				       	
КонецПроцедуры 

Процедура ПолучитьФайлOFSStoreTransactions()
	
	//получим файл 
	СерверИсточник = "www.reports.stores.slb.com";
	СтрокаПараметраПолучения = "UserExtracts/public/FMT_INs_NOT_Closed.csv";
	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
                   	
	ВремКаталог = КаталогВременныхФайлов() + "tempFMT_INs_NOT_Closed";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог, "*.*");
	ИмяВходящегоФайла = "" + ВремКаталог + "\" + "FMT_INs_NOT_Closed.csv";
			
	Если ЗапроситьФайлыССервера(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла) <> Истина Тогда
		РГСофт.СообщитьИЗалоггировать(
			"Не удалось скачать файл FMT_INs_NOT_Closed.csv",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.OFSStoreTransactionsLoading,
			Неопределено);
		УдалитьФайлы(ВремКаталог,"*.*");
	КонецЕсли; 
   	
	//загрузим файл
	Попытка
		ЗагрузитьДанныеИзФайла(ИмяВходящегоФайла);
	Исключение
		РГСофт.СообщитьИЗалоггировать(
			"Не удалось загрузить файл FMT_INs_NOT_Closed.csv",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.OFSStoreTransactionsLoading,
			Неопределено,
			ОписаниеОшибки());
	КонецПопытки;

	УдалитьФайлы(ВремКаталог,"*.*");
	
КонецПроцедуры

// Функция получает файлы с сервера с указанными параметрами и сохраняет на диск
//
// Параметры:
//  HTTP - HTTPСоединение, если приходится использовать данную функцию в цикле, то тут передается
//         переменная с созданным в предыдущей итерации цикла HTTPСоединением
// СерверИсточникПараметр - Строка, сервер, с которого необходимо получить файлы
// СтрокаПараметраПолученияПараметр - Строка, адрес ресурса на сервере.
// ИмяВходящегоФайлаПараметр - Имя файла, в который помещаются данные полученного ресурса.
//
// Возвращаемое значение:
//  Булево - Успешно получены файлы или нет.
//
Функция ЗапроситьФайлыССервера(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр, HTTP = Неопределено)

	СерверИсточник           = СерверИсточникПараметр;
	СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр;
	ИмяВходящегоФайла        = ИмяВходящегоФайлаПараметр;
	
	Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
		HTTP = Новый HTTPСоединение(СерверИсточник)
	КонецЕсли; 
	
	Попытка
		HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


//////////////////////////////////////////////////////////////
// Загрузка OFS Store Transactions из csv-файла 

Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла) Экспорт 
	
	ТекстОшибок = "";
	
	ЗаполнитьOFSStoreTransactions(ТекстОшибок, ПолноеИмяФайла);
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда 
		РГСофт.СообщитьИЗалоггировать(
			"В ходе загрузки FMT_INs_NOT_Closed.csv из файла возникли ошибки!",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.OFSStoreTransactionsLoading,
			Неопределено,
			ТекстОшибок + ОписаниеОшибки());
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьOFSStoreTransactions(ТекстОшибок, ПолноеИмяФайла) Экспорт 
	   		
	// Прочитаем файл в текстовый документ
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ТолькоПросмотр = Истина;	
	Попытка
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
	Исключение
		ТекстОшибок = ТекстОшибок + "Failed to read file!
			|" + ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	СвойстваСтруктуры = "Id_Txn, Dat_Txn_Cre, Part_Num, Part_Description, Qty_Txn, Transaction_Purchase_Price,
	|From_Company_Name, From_Store, From_Loc, Geomarket, Area, Part_Type, Id_Fmt_Out";
	СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
	
	НомерТекущейСтроки = 1;
	РазделительЗаголовков = ",";
	Разделитель = """,""";
	        			
	СтрокаЗаголовков = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
	МассивЗаголовков = РазложитьСтрокуВМассив(СтрокаЗаголовков, РазделительЗаголовков);	
	СоответствиеКолонокИИндексов = ПолучитьСоответствиеКолонокИИндексов(МассивЗаголовков);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	КоличествоСтолбцов = МассивЗаголовков.Количество();	
	ПредыдущийМассивДанных = Неопределено;
	TransactionID = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		СтрокаДанных = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		МассивДанных = РазложитьСтрокуВМассив(СтрокаДанных, Разделитель);
		
		// Бывает так, что в каком-нибудь поле закрадывается перенос строки
		// В этом случае надо искать продолжение ячеек на следующей строке
		Если ПредыдущийМассивДанных <> Неопределено Тогда
			
			ИндексПоследнейЯчейки = ПредыдущийМассивДанных.ВГраница();
			Если МассивДанных.Количество() Тогда
				
				ПредыдущийМассивДанных[ИндексПоследнейЯчейки] = ПредыдущийМассивДанных[ИндексПоследнейЯчейки] + МассивДанных[0];
				МассивДанных.Удалить(0);
				Для Каждого ЯчейкаДанных Из МассивДанных Цикл
					ПредыдущийМассивДанных.Добавить(ЯчейкаДанных);
				КонецЦикла;
				
			КонецЕсли;
			
			МассивДанных = ПредыдущийМассивДанных;
			
		КонецЕсли;
		
		ТекущееКоличествоЯчеек = МассивДанных.Количество();
		Если ТекущееКоличествоЯчеек < КоличествоСтолбцов Тогда	
			
			ПредыдущийМассивДанных = МассивДанных;
			Продолжить;
			
		КонецЕсли;
		
		ПредыдущийМассивДанных = Неопределено;
		
		// { RGS AArsentev 09.08.2017 - S-I-0003518 проверил структуру данных файла, в колонке Area нет данных по RCA, они присутствуют в Geomarket
		//Area = МассивДанных[СоответствиеКолонокИИндексов.Получить("Area")];
		//Если СтрНайти(Area, "RCA") = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		Geomarket = МассивДанных[СоответствиеКолонокИИндексов.Получить("Geomarket")];
		Если СтрНайти(Geomarket, "RCA") = 0 Тогда
			Продолжить;
		КонецЕсли;
		// } RGS AArsentev 09.08.2017 - S-I-0003518
		
		// OFS Store transaction
		
		БылиОшибки = Ложь;
				
		// Id_Txn
		Id_Txn = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Id_Txn")]);
		
		Если Id_Txn = "T4382405" Тогда 
			а=1;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Id_Txn) Тогда 
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " Id_Txn is empty!";
			Продолжить;
		КонецЕсли;
		
		// Part_Num
		Part_Num = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Part_Num")]);
		
		Пока НайтиНедопустимыеСимволыXML(Part_Num) > 0 Цикл 
			
			ПозицияСимвола = НайтиНедопустимыеСимволыXML(Part_Num);
			НекорректныйСимвол = Сред(Part_Num, ПозицияСимвола, 1);
			Part_Num = СтрЗаменить(Part_Num, НекорректныйСимвол, "");
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Part_Num) Тогда 
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " Part_Num is empty!";
			Продолжить;
		КонецЕсли;
		
		Если TransactionID <> Id_Txn тогда
			
			TransactionID = Id_Txn;
			OFSStoreTransaction = Справочники.OFSStoreTransactions.НайтиПоКоду(TransactionID, Истина, Справочники.OFSStoreTransactions.ПустаяСсылка());
			
			Если ЗначениеЗаполнено(OFSStoreTransaction) Тогда
				
				OFSStoreTransactionОбъект = OFSStoreTransaction.ПолучитьОбъект();
				
			Иначе 
				
				OFSStoreTransactionОбъект = Справочники.OFSStoreTransactions.СоздатьГруппу();
				OFSStoreTransactionОбъект.Код = TransactionID;
				    								
			КонецЕсли;
			  
		КонецЕсли;
		
		// Id_Fmt_Out
		Id_Fmt_Out = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Id_Fmt_Out")]);
		Если ЗначениеЗаполнено(Id_Fmt_Out) Тогда 
			OFSStoreTransactionОбъект.Id_Fmt_Out = Id_Fmt_Out;
		КонецЕсли;
		
		Попытка	
			OFSStoreTransactionОбъект.Записать();
			OFSStoreTransaction = OFSStoreTransactionОбъект.Ссылка;
		Исключение
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to save transaction """ + TransactionID + """!";
			Продолжить;
		КонецПопытки;
				
		TransactionLine = Справочники.OFSStoreTransactions.НайтиПоКоду(Part_Num, Истина, OFSStoreTransaction);
		
		Если ЗначениеЗаполнено(TransactionLine) Тогда
			
			TransactionLineОбъект = TransactionLine.ПолучитьОбъект();
			
		Иначе 
			
			TransactionLineОбъект = Справочники.OFSStoreTransactions.СоздатьЭлемент();
			TransactionLineОбъект.Код = Part_Num;
			TransactionLineОбъект.Родитель = OFSStoreTransaction;
			
		КонецЕсли;
		
		// Dat_Txn_Cre
		Dat_Txn_Cre = СтрЗаменить(СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Dat_Txn_Cre")]), "-", " ");
		Dat_Txn_Cre = ImportExportСервер.ПолучитьДатуИзСтроки(Dat_Txn_Cre);
		
		Если Dat_Txn_Cre = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to convert """ + СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Dat_Txn_Cre")]) + """ to date!";
		Иначе 
			TransactionLineОбъект.Dat_Txn_Cre = Dat_Txn_Cre;
		КонецЕсли;
			     				    
		// Part_Description
		Part_Description = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Part_Description")]);
		
		Пока НайтиНедопустимыеСимволыXML(Part_Description) > 0 Цикл 
			
			ПозицияСимвола = НайтиНедопустимыеСимволыXML(Part_Description);
			НекорректныйСимвол = Сред(Part_Description, ПозицияСимвола, 1);
			Part_Description = СтрЗаменить(Part_Description, НекорректныйСимвол, "");
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Part_Description) Тогда 
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " Part_Description is empty!";
		Иначе 
			TransactionLineОбъект.Part_Description = Part_Description;
		КонецЕсли;
		        			
		// Qty_Txn
		Попытка
			Qty_Txn = Число(СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Qty_Txn")]));
			TransactionLineОбъект.Qty_Txn = Qty_Txn;
		Исключение
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to convert """ + СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Qty_Txn")]) + """ to number!";
			БылиОшибки = Истина;
		КонецПопытки;
		      		 		
		// Transaction_Purchase_Price
		Попытка
			Transaction_Purchase_Price = Число(СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Transaction_Purchase_Price")]));
			TransactionLineОбъект.Transaction_Purchase_Pri = Transaction_Purchase_Price;
		Исключение
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to convert """ + СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Transaction_Purchase_Price")]) + """ to number!";
			БылиОшибки = Истина;
		КонецПопытки;
		
		// From_Company_Name
		From_Company_Name = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("From_Company_Name")]);
		Если ЗначениеЗаполнено(From_Company_Name) Тогда 
			TransactionLineОбъект.From_Company_Name = From_Company_Name;
		КонецЕсли;

		// From_Store
		From_Store = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("From_Store")]);
		Если ЗначениеЗаполнено(From_Store) Тогда 
			TransactionLineОбъект.From_Store = From_Store;
		КонецЕсли;

		// From_Loc
		From_Loc = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("From_Loc")]);
		Если ЗначениеЗаполнено(From_Loc) Тогда 
			TransactionLineОбъект.From_Loc = From_Loc;
		КонецЕсли;

		// Geomarket
		Geomarket = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Geomarket")]);
		Если ЗначениеЗаполнено(Geomarket) Тогда 
			TransactionLineОбъект.Geomarket = Geomarket;
		КонецЕсли;

		// Part_Type
		Part_Type = СокрЛП(МассивДанных[СоответствиеКолонокИИндексов.Получить("Part_Type")]);
		Если ЗначениеЗаполнено(Part_Type) Тогда 
			TransactionLineОбъект.Part_Type = Part_Type;
		КонецЕсли;
		
		Если БылиОшибки Тогда
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to save transaction """ + TransactionID + """ with Part_Num """ + Part_Num + """!"; 
			Продолжить;
		КонецЕсли;
		
		Попытка	
			TransactionLineОбъект.Записать();
		Исключение
			ТекстОшибок = ТекстОшибок + "
			|Line №" + НомерТекущейСтроки + " failed to save transaction """ + TransactionID + """ with Part_Num """ + Part_Num + """!";
			Продолжить;
		КонецПопытки;

	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры
	     
Функция ПолучитьСоответствиеКолонокИИндексов(МассивЗаголовков)
	
	СоответствиеКолонокИИндексов = Новый Соответствие;
	СоответствиеКолонокИИндексов.Вставить("Id_Txn", 0);
	СоответствиеКолонокИИндексов.Вставить("Dat_Txn_Cre", 0);
	СоответствиеКолонокИИндексов.Вставить("Part_Num", 0);
	СоответствиеКолонокИИндексов.Вставить("Part_Description", 0);
	СоответствиеКолонокИИндексов.Вставить("Qty_Txn", 0);
	СоответствиеКолонокИИндексов.Вставить("Transaction_Purchase_Price", 0);
	СоответствиеКолонокИИндексов.Вставить("From_Company_Name", 0);
	СоответствиеКолонокИИндексов.Вставить("Id_Fmt_Out", 0);
	СоответствиеКолонокИИндексов.Вставить("From_Store", 0);
	СоответствиеКолонокИИндексов.Вставить("From_Loc", 0);
	СоответствиеКолонокИИндексов.Вставить("Geomarket", 0);
	СоответствиеКолонокИИндексов.Вставить("Area", 0);
	СоответствиеКолонокИИндексов.Вставить("Part_Type", 0);
	
	Для Каждого КлючИЗначение Из СоответствиеКолонокИИндексов Цикл
		
		ИндексКолонки = МассивЗаголовков.Найти(КлючИЗначение.Ключ);
		Если ИндексКолонки = Неопределено Тогда
			ВызватьИсключение "Failed to determine the position of the column """ + КлючИЗначение.Ключ + """!";
		Иначе
			СоответствиеКолонокИИндексов.Вставить(КлючИЗначение.Ключ, ИндексКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКолонокИИндексов;
	       	
КонецФункции

Функция РазложитьСтрокуВМассив(Строка, Разделитель)
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
	
	ы = 0;
	ВГраница = Массив.ВГраница();
	Пока ы <= ВГраница Цикл
		Массив[ы] = СокрЛП(Массив[ы]);
		Массив[ы] = СтрЗаменить(Массив[ы], """", "");
		ы = ы + 1;
	КонецЦикла;
	
    Возврат Массив;
	
КонецФункции

