# Если Клиент Тогда
Перем НП Экспорт;                  // Настройка периода

// Цвета, используемые в печатной форме отчета
Перем ЦветФонаОшибок;
Перем ЦветФонаБезОшибок;
Перем ЦветФонаКолОшибок;
Перем ЦветТекстаОшибок;
Перем ЦветТекстаКолОшибок;
Перем ЦветФонаПредупреждение; 
Перем ЦветФонаВозможнаяОшибка;


# КонецЕсли

Перем ВысотаОбластей Экспорт;      // Структура. Ключ - имя области, значение - высота области
Перем КонецДатыКон;                // Конец дня
Перем ОписаниеТипаСуммы;           // Число, 15, 2
Перем ОбщаяСтруктураФорматаПолей;  // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураЗаголовков;    // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураШириныКолонок; // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураРасшифровки;   // Для расшифровки детального отчета

///////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = СтрНайти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

Функция ПроверитьЗаполнениеРеквизитов(ИмяЭлементаФормыСОшибкой = "") Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать организацию для проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "Организация";
		Возврат Ложь;
	КонецЕсли;

	Если ДатаНач = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату начала периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаНач";
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаКон = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	ИначеЕсли ДатаКон < ДатаНач Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки
		|более позднюю, чем дата начала!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	КонецЕсли;
	
	НетВыбранныхПроверок = ДеревоПроверок.Строки.Найти(1, "Включить", Истина) = Неопределено;
	Если НетВыбранныхПроверок Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать хотя бы одну проверку!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДеревоПроверок";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

///////////////////////////////////////////////////////////////////////////////////////
// Функции получают исходящие данные. Если нужного значения в структуре нет - оно определяется и вставляется

Функция ПолучитьДанныеУчетнаяПолитикаБУ()
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("УчетнаяПолитикаБУ");
	Если НетВИсходящихДанных Тогда
		СтрокаПравила = ДеревоПроверок.Строки.Найти("НаличиеУчП_БУ", "Идентификатор", Истина);
		ПроверитьПравило(СтрокаПравила);
	КонецЕсли;
	УчетнаяПолитикаБУ = ИсходящиеДанные.УчетнаяПолитикаБУ;
	
	Возврат УчетнаяПолитикаБУ;

КонецФункции

Функция ПолучитьДанныеУчетнаяПолитикаНУ()
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("УчетнаяПолитикаНУ");
	Если НетВИсходящихДанных Тогда
		СтрокаПравила = ДеревоПроверок.Строки.Найти("НаличиеУчП_НУ", "Идентификатор", Истина);
		ПроверитьПравило(СтрокаПравила);
	КонецЕсли;
	УчетнаяПолитикаНУ = ИсходящиеДанные.УчетнаяПолитикаНУ;
	
	Возврат УчетнаяПолитикаНУ;

КонецФункции

Функция ПолучитьДанныеУчетнаяПолитикаПоПерсоналу()
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("УчетнаяПолитикаПоПерсоналу");
	Если НетВИсходящихДанных Тогда
		СтрокаПравила = ДеревоПроверок.Строки.Найти("НаличиеУчП_Перс", "Идентификатор", Истина);
		ПроверитьПравило(СтрокаПравила);
	КонецЕсли;
	УчетнаяПолитикаПоПерсоналу = ИсходящиеДанные.УчетнаяПолитикаПоПерсоналу;
	
	Возврат УчетнаяПолитикаПоПерсоналу;

КонецФункции

Функция ПолучитьДанныеВестиРасчетыПоДокументам()

	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ВестиРасчетыПоДокументам");
	Если НетВИсходящихДанных Тогда
		СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		ВестиРасчетыПоДокументам = СчетРасчетов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено;
		ИсходящиеДанные.Вставить("ВестиРасчетыПоДокументам", ВестиРасчетыПоДокументам);
	Иначе
		ВестиРасчетыПоДокументам = ИсходящиеДанные.ВестиРасчетыПоДокументам;
	КонецЕсли;
	
	Возврат ВестиРасчетыПоДокументам;

КонецФункции

Функция ПолучитьДанныеТаблицаОшибокДатАктуальности()

	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ТаблицаОшибокДатАктуальности");
	Если НетВИсходящихДанных Тогда
		ПустаяДата = '00010101';
		//! не отрабатывается пустая организация в регистре
		СтруктураДатАктуальности        = РегистрыСведений.ДатаАктуальностиУчета.Получить(Новый Структура("Организация", Организация));
		ЕстьОшибкаНДС                   = СтруктураДатАктуальности.НДС <> ПустаяДата И КонецДня(СтруктураДатАктуальности.НДС) < КонецДатыКон;
		ЕстьОшибкаРасчетыСКонтрагентами = СтруктураДатАктуальности.РасчетыСКонтрагентами <> ПустаяДата И КонецДня(СтруктураДатАктуальности.РасчетыСКонтрагентами) < КонецДатыКон;
		ЕстьОшибкаОценкаМПЗ             = СтруктураДатАктуальности.ОценкаМПЗ <> ПустаяДата И КонецДня(СтруктураДатАктуальности.ОценкаМПЗ) < КонецДатыКон;
		ЕстьОшибкаНУ                    = СтруктураДатАктуальности.НУ <> ПустаяДата И КонецДня(СтруктураДатАктуальности.НУ) < КонецДатыКон;
		
		ОбнаруженыОшибки  = ЕстьОшибкаНДС ИЛИ ЕстьОшибкаРасчетыСКонтрагентами ИЛИ ЕстьОшибкаОценкаМПЗ ИЛИ ЕстьОшибкаНУ;
		
		ТаблицаОшибокДатАктуальности = Новый ТаблицаЗначений;
		ТаблицаОшибокДатАктуальности.Колонки.Добавить("РазделУчета");
		ТаблицаОшибокДатАктуальности.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
		
		Если ОбнаруженыОшибки Тогда
			
			Если ЕстьОшибкаНДС Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.НДС;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.НДС;
			КонецЕсли;
			Если ЕстьОшибкаРасчетыСКонтрагентами Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.РасчетыСКонтрагентами;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.РасчетыСКонтрагентами;
			КонецЕсли;
			Если ЕстьОшибкаОценкаМПЗ Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.ОценкаМПЗ;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.ОценкаМПЗ;
			КонецЕсли;
			Если ЕстьОшибкаНУ Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.НУ;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.НУ;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИсходящиеДанные.Вставить("ТаблицаОшибокДатАктуальности", ТаблицаОшибокДатАктуальности);
		
	Иначе
		
		ТаблицаОшибокДатАктуальности = ИсходящиеДанные.ТаблицаОшибокДатАктуальности;
		
	КонецЕсли;
	
	Возврат ТаблицаОшибокДатАктуальности;

КонецФункции

Функция ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС()
	Перем Отказ;
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ТаблицаНалоговыхПериодовПоНДС");
	Если НетВИсходящихДанных Тогда
		
		ТаблицаНалоговыхПериодов = Новый ТаблицаЗначений;
		ТаблицаНалоговыхПериодов.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаНалоговыхПериодов.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаНалоговыхПериодов.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	
		ТекДата = ДатаНач;
		Пока ТекДата < ДатаКон Цикл
			
			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ТекДата, Отказ, Организация, "Нал");
			НалоговыйПериод = УчетнаяПолитикаНУ.НДСНалоговыйПериод;
			ЭтоНачалоНалоговогоПериода = НалоговыйПериод = Перечисления.Периодичность.Месяц
		    	                     ИЛИ ТекДата = НачалоКвартала(ТекДата);
			Если ЭтоНачалоНалоговогоПериода Тогда
				КонПериода = ?(НалоговыйПериод = Перечисления.Периодичность.Месяц,
					             КонецМесяца(ТекДата), КонецКвартала(ТекДата));
				СтрокаПериода = ТаблицаНалоговыхПериодов.Добавить();
				СтрокаПериода.НачПериода = ТекДата;
				СтрокаПериода.КонПериода = Мин(КонПериода, КонецДатыКон);
			КонецЕсли;
			ТекДата = ДобавитьМесяц(ТекДата, 1);
		
		КонецЦикла;
		ИсходящиеДанные.Вставить("ТаблицаНалоговыхПериодовПоНДС", ТаблицаНалоговыхПериодов);
		
	Иначе
		ТаблицаНалоговыхПериодов = ИсходящиеДанные.ТаблицаНалоговыхПериодовПоНДС;
	КонецЕсли;
	
	Возврат ТаблицаНалоговыхПериодов;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Общие алгоритмы для проверки правил 

// Шаблон
//Процедура ВыполнитьИмяАлгоритма(СтрокаПравила)

//	// Текст алгоритма...
//	
//КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки правил
// Имя процедуры составляется стандартно из "ПроверитьПравило" плюс идентификатор правила
// после отладки тексты могут быть перенесены в макет НаборПравилВыгрузки (область Правила|ТекстАлгоритма)

// Шаблон процедуры
//Процедура ПроверитьПравилоИмяПравила(СтрокаПравила)

//	// Алгоритм проверки
//	//...
//	Запрос = Новый Запрос;
//	//...
//	Результат = Запрос.Выполнить();
//	
//	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
//	СтрокаПравила.ПроверкаВыполнена = Истина;
//	
//	// Добавляем в ИсходящиеДанные данные, необходимые для формирования детального отчета по ошибкам
//	// или данные для последующего использования другими проверками
//	Если СтрокаПравила.ОбнаруженыОшибки Тогда
//		ИсходящиеДанные.Вставить("ИмяПравилаРезультатЗапроса", Результат);
//	КонецЕсли; 
//	
//КонецПроцедуры

// Учетная политика

Процедура ПроверитьПравилоНаличиеУчП_БУ(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаНач, Отказ, Организация, "Бух");
	ИсходящиеДанные.Вставить("УчетнаяПолитикаБУ", УчетнаяПолитикаБУ);
	НетУчетнойПолитикиБУ = УчетнаяПолитикаБУ.Количество() = 0;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитикиБУ;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеУчП_НУ(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаНач, Отказ, Организация, "Нал");
	ИсходящиеДанные.Вставить("УчетнаяПолитикаНУ", УчетнаяПолитикаНУ);
	НетУчетнойПолитикиНУ = УчетнаяПолитикаНУ.Количество() = 0;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитикиНУ;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоНеизменностьУчП_БУ(СтрокаПравила)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодДень", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики");
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение");
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение");
	ТаблицаУчетнойПолитики       = ПараметрыСеанса.УчетнаяПолитикаПоБухгалтерскомуУчету.Получить();
	УчетнаяПолитикаПоОрганизации = ТаблицаУчетнойПолитики.НайтиСтроки(Новый Структура("Организация", Организация));
	
	СинонимыРесурсов = Новый Соответствие;
	Для каждого Ресурс Из Метаданные.РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.Ресурсы Цикл
	
		СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
	
	КонецЦикла;
	
	Для ИндексСтроки = 1 По УчетнаяПолитикаПоОрганизации.Количество() - 1 Цикл
	
		ТекУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки];
		Если ТекУчетнаяПолитика.Период < ДатаНач Тогда
			Продолжить;
		ИначеЕсли ТекУчетнаяПолитика.Период > ДатаКон Тогда
		    Прервать;
		КонецЕсли;
		
		СтараяУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки - 1];
		Для каждого КолонкаЭлементаУчетнойПолитики Из ТаблицаУчетнойПолитики.Колонки Цикл
			
			ЭлементУчетнойПолитики = КолонкаЭлементаУчетнойПолитики.Имя;
			
			Если ЭлементУчетнойПолитики = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
		    ИзменилсяЭлементУчетнойПолитики = ТекУчетнаяПолитика[ЭлементУчетнойПолитики] <> СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
			Если ИзменилсяЭлементУчетнойПолитики Тогда
				ИзменениеНеСНачалаГода = ТекУчетнаяПолитика.Период <> НачалоГода(ТекУчетнаяПолитика.Период);
				Если ИзменениеНеСНачалаГода Тогда
				
					 НоваяОшибка = ТаблицаОшибок.Добавить();
					 НоваяОшибка.ПериодДень             = ТекУчетнаяПолитика.Период;
					 НоваяОшибка.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики];
					 НоваяОшибка.НовоеЗначение          = ТекУчетнаяПолитика[ЭлементУчетнойПолитики];
					 НоваяОшибка.СтароеЗначение         = СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
				
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НеизменностьУчП_БУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЭлементУчетнойПолитики", "Элемент учетной политики");
		СтруктураЗаголовков.Вставить("НовоеЗначение", "Новое значение");
		СтруктураЗаголовков.Вставить("СтароеЗначение", "Старое значение");
		ИсходящиеДанные.Вставить("НеизменностьУчП_БУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНеизменностьУчП_НУ(СтрокаПравила)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодДень", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики");
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение");
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение");
	ТаблицаУчетнойПолитики       = ПараметрыСеанса.УчетнаяПолитикаПоНалоговомуУчету.Получить();
	УчетнаяПолитикаПоОрганизации = ТаблицаУчетнойПолитики.НайтиСтроки(Новый Структура("Организация", Организация));
	
	СинонимыРесурсов = Новый Соответствие;
	Для каждого Ресурс Из Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Ресурсы Цикл
	
		СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
	
	КонецЦикла;
	
	ВозможныеИзмененияСНачалаКвартала = Новый ТаблицаЗначений;
	ВозможныеИзмененияСНачалаКвартала.Колонки.Добавить("ЭлементУчетнойПолитики");
	ВозможныеИзмененияСНачалаКвартала.Колонки.Добавить("Значение");
	
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "НДСНалоговыйПериод";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "ОрганизацияЯвляетсяПлательщикомЕНВД";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "РозничнаяТорговляОблагаетсяЕНВД";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	
	ВозможныеИзмененияСНачалаМесяца = Новый ТаблицаЗначений;
	ВозможныеИзмененияСНачалаМесяца.Колонки.Добавить("ЭлементУчетнойПолитики");
	ВозможныеИзмененияСНачалаМесяца.Колонки.Добавить("Значение");
	
	Для ИндексСтроки = 1 По УчетнаяПолитикаПоОрганизации.Количество() - 1 Цикл
	
		ТекУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки];
		Если ТекУчетнаяПолитика.Период < ДатаНач Тогда
			Продолжить;
		ИначеЕсли ТекУчетнаяПолитика.Период > ДатаКон Тогда
		    Прервать;
		КонецЕсли;
		
		СтараяУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки - 1];
		Для каждого КолонкаЭлементаУчетнойПолитики Из ТаблицаУчетнойПолитики.Колонки Цикл
			
			ЭлементУчетнойПолитики = КолонкаЭлементаУчетнойПолитики.Имя;
			
			Если ЭлементУчетнойПолитики = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора        = Новый Структура("ЭлементУчетнойПолитики", ЭлементУчетнойПолитики);
			
		    ИзменилсяЭлементУчетнойПолитики = ТекУчетнаяПолитика[ЭлементУчетнойПолитики] <> СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
			Если ИзменилсяЭлементУчетнойПолитики Тогда
				ИзменениеНеСНачалаГода = ТекУчетнаяПолитика.Период <> НачалоГода(ТекУчетнаяПолитика.Период);
				Если ИзменениеНеСНачалаГода Тогда
					
					ИзменениеВозможно = Ложь;
					// Сначала проверяем изменения, которые возможно делать каждый месяц
					ВозможныеИзменения = ВозможныеИзмененияСНачалаМесяца.НайтиСтроки(СтруктураОтбора);
					Для каждого ВозможноеИзменение Из ВозможныеИзменения Цикл
						
						ИзменениеВозможно = ВозможноеИзменение.Значение = Неопределено 
						                ИЛИ ТекУчетнаяПолитика[ЭлементУчетнойПолитики] = ВозможноеИзменение.Значение;
						Если ИзменениеВозможно Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Потом проверяем изменения, которые возможно делать каждый квартал
					Если НЕ ИзменениеВозможно Тогда
						
						ИзменениеСНачалаКвартала = ТекУчетнаяПолитика.Период = НачалоКвартала(ТекУчетнаяПолитика.Период);
						Если ИзменениеСНачалаКвартала Тогда
							
							ВозможныеИзменения = ВозможныеИзмененияСНачалаКвартала.НайтиСтроки(СтруктураОтбора);
							Для каждого ВозможноеИзменение Из ВозможныеИзменения Цикл
							 
						 		ИзменениеВозможно = ВозможноеИзменение.Значение = Неопределено 
							     	            ИЛИ ТекУчетнаяПолитика[ЭлементУчетнойПолитики] = ВозможноеИзменение.Значение;
								Если ИзменениеВозможно Тогда
									Прервать;
								КонецЕсли;
								
							 КонецЦикла;
						КонецЕсли;
					
					КонецЕсли;
					
					Если НЕ ИзменениеВозможно Тогда
							
						НоваяОшибка = ТаблицаОшибок.Добавить();
						НоваяОшибка.ПериодДень             = ТекУчетнаяПолитика.Период;
						НоваяОшибка.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики];
						НоваяОшибка.НовоеЗначение          = ТекУчетнаяПолитика[ЭлементУчетнойПолитики];
						НоваяОшибка.СтароеЗначение         = СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НеизменностьУчП_НУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЭлементУчетнойПолитики", "Элемент учетной политики");
		СтруктураЗаголовков.Вставить("НовоеЗначение", "Новое значение");
		СтруктураЗаголовков.Вставить("СтароеЗначение", "Старое значение");
		ИсходящиеДанные.Вставить("НеизменностьУчП_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоКварталКакПериодПоНДС(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	НетУчетнойПолитикиНУ = УчетнаяПолитикаНУ.Количество() = 0;
	Если НетУчетнойПолитикиНУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по налоговому учету";
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоговыхПериодов = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("РеализацияБезНДС", ОписаниеТипаСуммы);
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаНалоговыхПериодов Цикл
		ПериодРавенКварталу = СтрокаПериода.НачПериода = НачалоКвартала(СтрокаПериода.НачПериода)
		                    И СтрокаПериода.КонПериода = КонецКвартала(СтрокаПериода.НачПериода);
					  
		Если ПериодРавенКварталу Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДСНачисленныйОбороты.Период КАК ПериодМесяц,
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход КАК РеализацияБезНДС
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|		&ДатаНач,
			|		&ДатаКон,
			|		Месяц,
			|		Организация = &Организация
			|		    И ВидНачисления В (&ВидыНачисленийРеализации)) КАК НДСНачисленныйОбороты
			|ГДЕ
			|	НДСНачисленныйОбороты.СуммаБезНДСПриход > &ЛимитСуммыРеализации
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПериодМесяц";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(СтрокаПериода.КонПериода));
			Запрос.УстановитьПараметр("Организация", Организация);
			
			ВидыНачисленийРеализации = Новый Массив;
			ВидыНачисленийРеализации.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
			ВидыНачисленийРеализации.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
			ВидыНачисленийРеализации.Добавить(Перечисления.НДСВидНачисления.Реализация0);
			Запрос.УстановитьПараметр("ВидыНачисленийРеализации", ВидыНачисленийРеализации);
			
			ЛимитСуммыРеализации = ?(ДатаНач < '20060101', 1000000, 2000000);
			Запрос.УстановитьПараметр("ЛимитСуммыРеализации", ЛимитСуммыРеализации);
	
			Результат = Запрос.Выполнить();
			
			ОбнаруженыОшибки  = НЕ Результат.Пустой();
			Если ОбнаруженыОшибки Тогда
			
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаОшибки = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
				КонецЦикла;
			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("КварталКакПериодПоНДСТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РеализацияБезНДС", "Реализация (без НДС)");
		ИсходящиеДанные.Вставить("КварталКакПериодПоНДССтруктураЗаголовков", СтруктураЗаголовков);
		СтрокаПравила.КомментарийРезультата = "Налоговый период может быть равен кварталу, если ежемесячные суммы выручки от реализации "
		                                    + "без учета налога не превышают " + ЛимитСуммыРеализации + " рублей. "
											+ СтрокаПравила.КомментарийРезультатаОшибка;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоОценкаРозницы(СтрокаПравила)
	
	УчетнаяПолитикаБУ = ПолучитьДанныеУчетнаяПолитикаБУ();
	НетУчетнойПолитикиБУ = УчетнаяПолитикаБУ.Количество() = 0;
	Если НетУчетнойПолитикиБУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по бухгалтерскому учету";
		Возврат;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитикаБУ.СпособОценкиТоваровВРознице;
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В учетной политике организации установлен способ оценки стоимости товаров "
		                                    + """По продажной стоимости""";
		Возврат;
	КонецЕсли;
	
	// Дополнительно проверяем, что нет проводок по счетам, связанным с ПБУ 18/02
	
	СчетаУчетаТоваровПоПродажнойСтоимости = Новый Массив;
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК НачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК КонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК КонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетаУчетаТоваровПоПродажнойСтоимости), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчетаТоваровПоПродажнойСтоимости", СчетаУчетаТоваровПоПродажнойСтоимости);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ОценкаРозницыРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НачальныйОстатокДт", "Нач. остаток Дт");
		СтруктураЗаголовков.Вставить("НачальныйОстатокКт", "Нач. остаток Кт");
		СтруктураЗаголовков.Вставить("ОборотДт", "Оборот Дт");
		СтруктураЗаголовков.Вставить("ОборотКт", "Оборот Кт");
		СтруктураЗаголовков.Вставить("КонечныйОстатокДт", "Кон. остаток Дт");
		СтруктураЗаголовков.Вставить("КонечныйОстатокКт", "Кон. остаток Кт");
		ИсходящиеДанные.Вставить("ОценкаРозницыСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоДиректКостингИСчет26(СтрокаПравила)
	
	УчетнаяПолитикаБУ = ПолучитьДанныеУчетнаяПолитикаБУ();
	НетУчетнойПолитикиБУ = УчетнаяПолитикаБУ.Количество() = 0;
	Если НетУчетнойПолитикиБУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по бухгалтерскому учету";
		Возврат;
	КонецЕсли;
	
    ПрименяетсяДиректКостинг = УчетнаяПолитикаБУ.ДиректКостинг;
	ДопустимыеКорсчета = Новый Массив;
	Если ПрименяетсяДиректКостинг Тогда
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Иначе
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредитуСчета26
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет26), , Организация = &Организация, (НЕ КорСчет В ИЕРАРХИИ (&ДопустимыеКорсчета)), ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет26", ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("ДопустимыеКорсчета", ДопустимыеКорсчета);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДиректКостингИСчет26РезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("КорСчет", "Кор.счет");
		СтруктураЗаголовков.Вставить("ОборотПоКредитуСчета26", "Оборот по кредиту счета 26");
		ИсходящиеДанные.Вставить("ДиректКостингИСчет26СтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПрименениеПБУ18Счета(СтрокаПравила)
	
	УчетнаяПолитикаБУ = ПолучитьДанныеУчетнаяПолитикаБУ();
	НетУчетнойПолитикиБУ = УчетнаяПолитикаБУ.Количество() = 0;
	Если НетУчетнойПолитикиБУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по бухгалтерскому учету";
		Возврат;
	КонецЕсли;
	
    ПрименяетсяПБУ18 = УчетнаяПолитикаБУ.ПоддержкаПБУ18;
	Если ПрименяетсяПБУ18 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В учетной политике организации установлена поддержка ПБУ 18/02";
		Возврат;
	КонецЕсли;
	
	СчетаПоддержкиПБУ18 = Новый Массив;
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаПоддержкиПБУ18), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаПоддержкиПБУ18", СчетаПоддержкиПБУ18);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПрименениеПБУ18СчетаРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОборотПоДебету", "Оборот по дебету");
		СтруктураЗаголовков.Вставить("ОборотПоКредиту", "Оборот по кредиту");
		ИсходящиеДанные.Вставить("ПрименениеПБУ18СчетаСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНетЕНВД(СтрокаПравила)
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	НетУчетнойПолитикиНУ = УчетнаяПолитикаНУ.Количество() = 0;
	Если НетУчетнойПолитикиНУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по налоговому учету";
		Возврат;
	КонецЕсли;
	
    ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомЕНВД;
	Если ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Организация является плательщиком ЕНВД";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СчетаДоходовИРасходовЕНВД.Счет
	|			ИЗ
	|				РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД),
	|		,
	|		Организация = &Организация,
	|		,
	|		) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НетЕНВДРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОборотПоДебету", "Оборот по дебету");
		СтруктураЗаголовков.Вставить("ОборотПоКредиту", "Оборот по кредиту");
		ИсходящиеДанные.Вставить("НетЕНВДСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеСложногоНДС(СтрокаПравила)
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	НетУчетнойПолитикиНУ = УчетнаяПолитикаНУ.Количество() = 0;
	Если НетУчетнойПолитикиНУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по налоговому учету";
		Возврат;
	КонецЕсли;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
    СложныйУчетНДС = УчетнаяПолитикаНУ.СложныйУчетНДС;
	Если СложныйУчетНДС Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Организация, согласно учетной политике, может осуществлять операции без НДС или с НДС 0%";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК Оборот90ПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Оборот90ПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет90_01_1),
	|		&ВидСубконтоСтавкиНДС,
	|		Организация = &Организация
	|		    И Субконто1 В (&СтавкиСложногоНДС),
	|		,
	|		) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЕНВД"",
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90_01_2), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) <> 0
	|		ИЛИ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	СтавкиСложногоНДС = Новый Массив;
	СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СтавкиСложногоНДС", СтавкиСложногоНДС);
	Запрос.УстановитьПараметр("Счет90_01_2", ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НаличиеСложногоНДСРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
		СтруктураЗаголовков.Вставить("Оборот90ПоДебету", "Оборот сч.90 по дебету");
		СтруктураЗаголовков.Вставить("Оборот90ПоКредиту", "Оборот сч. 90 по кредиту");
		ИсходящиеДанные.Вставить("НаличиеСложногоНДССтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНет76НприОтгрузке(СтрокаПравила)
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	НетУчетнойПолитикиНУ = УчетнаяПолитикаНУ.Количество() = 0;
	Если НетУчетнойПолитикиНУ Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика "
		                                    + "по налоговому учету";
		Возврат;
	КонецЕсли;
	
    МоментОпределенияНалоговойБазыНДС = УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС;
	Если МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Момент определения налоговой базы по НДС для организации - ""по оплате"", "
		                                    + "поэтому проводки по кредиту 76.Н возможны";
		Возврат;
	КонецЕсли;
	
	БылаПолитикаПоОплате = Ложь;
	ИсторияУчетнойПолитики            = ПараметрыСеанса.УчетнаяПолитикаПоНалоговомуУчету.Получить();
	ИсторияУчетнойПолитикиОрганизации = ИсторияУчетнойПолитики.НайтиСтроки(Новый Структура("Организация", Организация));
	Для каждого СтрокаИстории Из ИсторияУчетнойПолитикиОрганизации Цикл
		
		Если СтрокаИстории.Период >= ДатаНач Тогда
			Прервать;
		КонецЕсли;
		БылаПолитикаПоОплате = СтрокаИстории.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате;
	    Если БылаПолитикаПоОплате Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылаПолитикаПоОплате Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросПо76_Н.Регистратор КАК Документ,
		|	ЗапросПо76_Н.Сумма КАК ОборотПоКредиту
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт = &Счет62_31, , СчетКт = &Счет76_Н, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ЗапросПо76_Н
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДвиженияССубконтоПо62_31.Регистратор КАК Регистратор,
		|			СУММА(ДвиженияССубконтоПо62_31.Сумма) КАК Сумма
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				&ДатаНач,
		|				&ДатаКон,
		|				Активность = ИСТИНА
		|				    И Организация = &Организация
		|				    И СчетДт = &Счет62_31
		|				    И СубконтоДт3 <> Регистратор) КАК ДвиженияССубконтоПо62_31
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДвиженияССубконтоПо62_31.Регистратор) КАК ЗапросПо62_31
		|		ПО ЗапросПо76_Н.Регистратор = ЗапросПо62_31.Регистратор
		|ГДЕ
		|	ЗапросПо62_31.Регистратор ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредиту
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет = &Счет76_Н, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет76_Н", ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	Запрос.УстановитьПараметр("Счет62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	Запрос.УстановитьПараметр("Счет68_22", ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("Нет76НприОтгрузкеРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОборотПоКредиту", "Оборот по кредиту");
		ИсходящиеДанные.Вставить("Нет76НприОтгрузкеСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

// Касса

Процедура ПроверитьПравилоНепроведенныеПКО_РКО(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВидОперации", "Вид операции");
		СтруктураЗаголовков.Вставить("СуммаДокумента", "Сумма документа");
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоМинусыПоКассе(СтрокаПравила)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("МинусыПоКассеРезультатЗапроса", Результат);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЛимитКассы(СтрокаПравила)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > &ЛимитКассы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЛимитКассы", ЛимитКассы);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	а= 0;
	ДополнениеКомментария = "Лимит остатков кассы установлен в размере " 
	                      + Формат(ЛимитКассы, "ЧН=0") + " руб. ";
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЛимитКассыРезультатЗапроса", Результат);
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаОшибка;
	Иначе
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаНетОшибок;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЛимитРасчетовСЮрЛицами(СтрокаПравила)

	ОрганизацияЯвляетсяФизЛицом = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ОрганизацияЯвляетсяФизЛицом Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Проверяемая организация является физическим лицом, поэтому лимит расчетов "
		                                    + " между юридическими лицами на нее не распространяется";
		Возврат;
	
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Получено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		,
	|		&ВидыСубконтоКонтрагентыДоговоры,
	|		&Организация = Организация
	|			И Субконто1.ЮридическоеФизическоеЛицо = &ЮрЛицо,
	|		КорСчет В ИЕРАРХИИ (&СчетКассы),
	|		) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт > &ЛимитРасчетовСЮрЛицами
	|	ИЛИ ХозрасчетныйОбороты.СуммаОборотКт > &ЛимитРасчетовСЮрЛицами
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЮрЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ЛимитРасчетовСЮрЛицами = 60000;
	Запрос.УстановитьПараметр("ЛимитРасчетовСЮрЛицами", ЛимитРасчетовСЮрЛицами);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	ДополнениеКомментария = "Лимит расчетов между юр.лицами установлен в размере " 
	                      + ЛимитРасчетовСЮрЛицами + " руб. ";
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаОшибка;
		
		ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиРезультатЗапроса", Результат);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		СтруктураРасшифровки.Вставить("Договор", "Договор");
		ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиСтруктураРасшифровки", СтруктураРасшифровки);
	Иначе
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаНетОшибок;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНумерацияПКО_РКО(СтрокаПравила)
	
	ТаблицаНарушений = Новый ТаблицаЗначений;
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента");
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента");
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего");
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего");
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	
	// Сначала проверяем последовательность нумерации приходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	// Затем проверяем последовательность нумерации расходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Документ,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаНарушений.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОТаблицаЗначений", ТаблицаНарушений);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерДокумента" , "Номер документа");
		СтруктураЗаголовков.Вставить("ДатаДокумента"  , "Дата документа");
		СтруктураЗаголовков.Вставить("НомерСледующего", "Номер след. документа");
		СтруктураЗаголовков.Вставить("ДатаСледующего" , "Дата след. документа");
		СтруктураЗаголовков.Вставить("СледДокумент"   , "Следующий документ");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("НомерДокумента" , 25);
		СтруктураШириныКолонок.Вставить("НомерСледующего", 25);
		СтруктураШириныКолонок.Вставить("ДатаДокумента"  , 20);
		СтруктураШириныКолонок.Вставить("ДатаСледующего" , 20);
		СтруктураШириныКолонок.Вставить("СледДокумент"   , 40);
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СледДокумент", "СледДокумент");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВыдачаПодотчетПослеОтчета(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Сотрудник,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОстатокПредыдущихАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, Движения, Счет В ИЕРАРХИИ (&Счет71), &ВидСубконтоСотрудники, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|		И ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("ВидСубконтоСотрудники", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПредыдущихАвансов", "Остаток предыдущих авансов");
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоДвижениеВнутри71Счета(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Кому,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОтКого,
	|	ХозрасчетныйДвиженияССубконто.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|		&ДатаНач,
	|		&ДатаКон,
	|		Активность = ИСТИНА
	|		    И Организация = &Организация
	|		    И СчетДт В ИЕРАРХИИ (&Счет71)
	|		    И СчетКт В ИЕРАРХИИ (&Счет71)) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОтКого", "От кого");
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОтКого", "ОтКого");
		СтруктураРасшифровки.Вставить("Кому", "Кому");
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПодотчетТолькоРаботникам(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Дата,
	|	ВложенныйЗапрос.Регистратор КАК Документ,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|		ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизЛицо,
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		МАКСИМУМ(ЕСТЬNULL(ПоследниеЗаписиПоРаботникам.Период, &ПустаяДата)) КАК ПериодПоследнейЗаписи
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Активность = ИСТИНА
	|			    И Организация = &Организация
	|			    И СчетДт В иерархии (&Счет71)) КАК ХозрасчетныйДвиженияССубконто
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПоследниеЗаписиПоРаботникам
	|			ПО (ХозрасчетныйДвиженияССубконто.Организация = ПоследниеЗаписиПоРаботникам.Организация
	|				ИЛИ ХозрасчетныйДвиженияССубконто.Организация = ПоследниеЗаписиПоРаботникам.ОбособленноеПодразделение)
	|				И ХозрасчетныйДвиженияССубконто.СубконтоДт1 = ПоследниеЗаписиПоРаботникам.Физлицо
	|				И ХозрасчетныйДвиженияССубконто.Период >= ПоследниеЗаписиПоРаботникам.Период
	|	ГДЕ
	|		(ПоследниеЗаписиПоРаботникам.Приказ.ВидЗанятости ЕСТЬ NULL 
	|				ИЛИ ПоследниеЗаписиПоРаботникам.Приказ.ВидЗанятости <> &ВнутреннееСовместительство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйДвиженияССубконто.Период,
	|		ХозрасчетныйДвиженияССубконто.Регистратор,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|		ХозрасчетныйДвиженияССубконто.Сумма) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (&Организация = РаботникиОрганизаций.Организация ИЛИ &Организация = РаботникиОрганизаций.ОбособленноеПодразделение)
	|			И ВложенныйЗапрос.ФизЛицо = РаботникиОрганизаций.Физлицо
	|			И ВложенныйЗапрос.ПериодПоследнейЗаписи = РаботникиОрганизаций.Период
	|ГДЕ
	|	(РаботникиОрганизаций.Приказ.ВидЗанятости ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Приказ.ВидЗанятости <> &ВнутреннееСовместительство)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение
	|					ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	//Запрос.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	Результат = Запрос.Выполнить();

	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ФизЛицо", "Физ.лицо");
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ФизЛицо", "ФизЛицо");
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

// Книга продаж

Процедура ПроверитьПравилоДатаАктуальностиНДСПродажи(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибокДатАктуальности = ПолучитьДанныеТаблицаОшибокДатАктуальности();
	
	СтрокаОшибкиНДС                   = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.НДС, "РазделУчета");
	ЕстьОшибкаНДС                     = СтрокаОшибкиНДС <> Неопределено;
	СтрокаОшибкиРасчетыСКонтрагентами = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.РасчетыСКонтрагентами, "РазделУчета");
	ЕстьОшибкаРасчетыСКонтрагентами   = СтрокаОшибкиРасчетыСКонтрагентами <> Неопределено;
	СтрокаОшибкиОценкаМПЗ             = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.ОценкаМПЗ, "РазделУчета");
	ЕстьОшибкаОценкаМПЗ               = СтрокаОшибкиОценкаМПЗ <> Неопределено;
	
	СтрокаПравила.ОбнаруженыОшибки  = ЕстьОшибкаНДС ИЛИ ЕстьОшибкаРасчетыСКонтрагентами ИЛИ ЕстьОшибкаОценкаМПЗ;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("РазделУчета");
	ТаблицаОшибок.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		
		Если ЕстьОшибкаНДС Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "НДС";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиНДС.ДатаАктуальности;
		КонецЕсли;
		Если ЕстьОшибкаРасчетыСКонтрагентами Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "Расчеты с контрагентами";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиРасчетыСКонтрагентами.ДатаАктуальности;
		КонецЕсли;
		Если ЕстьОшибкаОценкаМПЗ Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "Оценка МПЗ при выбытии";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиОценкаМПЗ.ДатаАктуальности;
		КонецЕсли;
		
	КонецЕсли; 
	
	ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПродажиТаблицаЗначений", ТаблицаОшибок);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("РазделУчета", "Раздел учета");
	СтруктураЗаголовков.Вставить("ДатаАктуальности", "Дата актуальности");
	ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПродажиСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаСФПоРеализации(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСНачисленный.СчетФактура.Дата КАК Дата,
	|	НДСНачисленный.СчетФактура КАК Документ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Нет счета-фактуры""
	|		ИНАЧЕ ""Счет-фактура не проведен""
	|	КОНЕЦ КАК Ошибка
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСНачисленный.СчетФактура = СчетФактураВыданный.ДокументОснование
	|ГДЕ
	|	НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НДСНачисленный.Активность = ИСТИНА
	|	И НДСНачисленный.ВидДвижения = &ВидДвиженияПриход
	|	И НДСНачисленный.ПодразделениеОрганизации = &Организация  
	//  Нет измерения НДСНачисленный.Организация   РГ-Софт - Петроченко
	|	И (НЕ НДСНачисленный.ВидНачисления В (&НепроверяемыеВидыНачисления))
	|	И (НЕ НДСНачисленный.ВидЦенности В (&НепроверяемыеВидыЦенностей))
	//|	И (НЕ НДСНачисленный.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах)   РГ-Софт - Петроченко
	|	И (СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|			ИЛИ СчетФактураВыданный.Проведен = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	НепроверяемыеВидыНачисления = Новый Массив;
	НепроверяемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);
	НепроверяемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);
	Запрос.УстановитьПараметр("НепроверяемыеВидыНачисления", НепроверяемыеВидыНачисления);
	
	НепроверяемыеВидыЦенностей = Новый Массив;
	НепроверяемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	НепроверяемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("НепроверяемыеВидыЦенностей", НепроверяемыеВидыЦенностей);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПолнотаСФПоРеализацииРезультатЗапроса", Результат);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСвоевременностьСФПоРеализации(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыРеализации.Дата КАК Дата,
	|	ДокументыРеализации.Ссылка КАК Документ,
	|	СчетФактураВыданный.Дата КАК ДатаСчетаФактуры,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.Дата КАК Дата
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|		И РеализацияТоваровУслуг.Организация = &Организация
	|		И РеализацияТоваровУслуг.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АктОбОказанииПроизводственныхУслуг.Ссылка,
	|		АктОбОказанииПроизводственныхУслуг.Дата
	|	ИЗ
	|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|	ГДЕ
	|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
	|		И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|		И АктОбОказанииПроизводственныхУслуг.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияУслугПоПереработке.Ссылка,
	|		РеализацияУслугПоПереработке.Дата
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|	ГДЕ
	|		РеализацияУслугПоПереработке.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияУслугПоПереработке.Проведен = ИСТИНА
	|		И РеализацияУслугПоПереработке.Организация = &Организация
	|		И РеализацияУслугПоПереработке.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаОС.Ссылка,
	|		ПередачаОС.Дата
	|	ИЗ
	|		Документ.ПередачаОС КАК ПередачаОС
	|	ГДЕ
	|		ПередачаОС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПередачаОС.Проведен = ИСТИНА
	|		И ПередачаОС.Организация = &Организация
	|		И ПередачаОС.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаНМА.Ссылка,
	|		ПередачаНМА.Дата
	|	ИЗ
	|		Документ.ПередачаНМА КАК ПередачаНМА
	|	ГДЕ
	|		ПередачаНМА.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПередачаНМА.Проведен = ИСТИНА
	|		И ПередачаНМА.Организация = &Организация
	|		И ПередачаНМА.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажах.Ссылка,
	|		ОтчетКомиссионераОПродажах.Дата
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|	ГДЕ
	|		ОтчетКомиссионераОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтчетКомиссионераОПродажах.Проведен = ИСТИНА
	|		И ОтчетКомиссионераОПродажах.Организация = &Организация
	|		И ОтчетКомиссионераОПродажах.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОПродажах.Ссылка,
	|		ОтчетКомитентуОПродажах.Дата
	|	ИЗ
	|		Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|	ГДЕ
	|		ОтчетКомитентуОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтчетКомитентуОПродажах.Проведен = ИСТИНА
	|		И ОтчетКомитентуОПродажах.Организация = &Организация
	|		И ОтчетКомитентуОПродажах.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеНДСпоСМРхозспособом.Ссылка,
	|		НачислениеНДСпоСМРхозспособом.Дата
	|	ИЗ
	|		Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|	ГДЕ
	|		НачислениеНДСпоСМРхозспособом.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И НачислениеНДСпоСМРхозспособом.Проведен = ИСТИНА
	|		И НачислениеНДСпоСМРхозспособом.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтражениеНачисленияНДС.Ссылка,
	|		ОтражениеНачисленияНДС.Дата
	|	ИЗ
	|		Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|	ГДЕ
	|		ОтражениеНачисленияНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтражениеНачисленияНДС.Проведен = ИСТИНА
	|		И ОтражениеНачисленияНДС.Организация = &Организация) КАК ДокументыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ДокументыРеализации.Ссылка = СчетФактураВыданный.ДокументОснование
	|ГДЕ
	|	СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL
	|	И РАЗНОСТЬДАТ(ДокументыРеализации.Дата, СчетФактураВыданный.Дата, ДЕНЬ) > 5
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СвоевременностьСФПоРеализацииРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДатаСчетаФактуры", "Дата счета-фактуры");
		СтруктураЗаголовков.Вставить("СчетФактура", "Счет-фактура");
		ИсходящиеДанные.Вставить("СвоевременностьСФПоРеализацииСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие90_НДС_БУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ИсходящиеДанные.УчетнаяПолитикаНУ;
	
	УчитыватьПоложительныеСуммовыеРазницы = УчетнаяПолитикаНУ.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	УчитыватьОтрицательныеСуммовыеРазницы = УчетнаяПолитикаНУ.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
	
	ВозможныОтклоненияПоСуммовымРазницам = НЕ УчитыватьПоложительныеСуммовыеРазницы ИЛИ НЕ УчитыватьОтрицательныеСуммовыеРазницы;
	
	Если ВозможныОтклоненияПоСуммовымРазницам Тогда
		
		// Считаем суммовые разницы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СтавкаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьПоложительныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма > 0
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПоложительнаяРазница,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьОтрицательныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма < 0
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтрицательнаяРазница
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНач,
		|		&ДатаКон,
		|		Активность = ИСТИНА
		|		    И Организация = &Организация
		|		    И СчетКт В ИЕРАРХИИ (&Счет90_01_1)
		|		    И СчетДт = &Счет62_31
		|		    И Регистратор <> СубконтоДт3) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		Запрос.УстановитьПараметр("Счет62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
		Запрос.УстановитьПараметр("УчитыватьПоложительныеСуммовыеРазницы", УчитыватьПоложительныеСуммовыеРазницы);
		Запрос.УстановитьПараметр("УчитыватьОтрицательныеСуммовыеРазницы", УчитыватьОтрицательныеСуммовыеРазницы);
		
		РезультатПоСуммовымРазницам = Запрос.Выполнить();
		ТаблицаСуммовыхРазниц = РезультатПоСуммовымРазницам.Выгрузить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотыПоСтавкамНДС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОборотыПоСтавкамНДС.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ОборотыПоСтавкамНДС.НДСНачисленный) КАК НДСНачисленный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет90_01_1)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВыручки,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет90_03)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДСНачисленный
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет90_01_1)
	|			    ИЛИ Счет В ИЕРАРХИИ (&Счет90_03),
	|			&ВидСубконтоСтавкиНДС,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты) КАК ОборотыПоСтавкамНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоСтавкамНДС.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("Счет90_03", ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Вставить(2, "ПоложительнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(3, "ОтрицательнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(4, "НДСРассчитанный", ОписаниеТипаСуммы);
	
	Если ВозможныОтклоненияПоСуммовымРазницам Тогда
		Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			
			РазницыПоТекСтавке = ТаблицаСуммовыхРазниц.Найти(СтрокаТабРезультата.СтавкаНДС, "СтавкаНДС");
			ЕстьРазницыПоТекСтавке = РазницыПоТекСтавке <> Неопределено;
			Если ЕстьРазницыПоТекСтавке Тогда
				СтрокаТабРезультата.ПоложительнаяРазница = РазницыПоТекСтавке.ПоложительнаяРазница;
				СтрокаТабРезультата.ОтрицательнаяРазница = РазницыПоТекСтавке.ОтрицательнаяРазница;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ЗначениеСтавки = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС = СтрокаТабРезультата.СуммаВыручки - СтрокаТабРезультата.ПоложительнаяРазница 
		           + СтрокаТабРезультата.ОтрицательнаяРазница;
		НДСРассчитанный = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.НДСРассчитанный = НДСРассчитанный;
		ОбнаруженыОшибки = (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
		               ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	// Таблица требуется для других правил - вставляем ее в исходящие данные при любом результате проверки
	ИсходящиеДанные.Вставить("Соответствие90_НДС_БУТаблицаЗначений", ТаблицаРезультата);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
	СтруктураЗаголовков.Вставить("СуммаВыручки", "Сумма выручки");
	СтруктураЗаголовков.Вставить("НДСНачисленный", "НДС начисленный");
	СтруктураЗаголовков.Вставить("ПоложительнаяРазница", "Положительная разница");
	СтруктураЗаголовков.Вставить("ОтрицательнаяРазница", "Отрицательная разница");
	СтруктураЗаголовков.Вставить("НДСРассчитанный", "НДС рассчитанный");
	ИсходящиеДанные.Вставить("Соответствие90_НДС_БУСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие91_НДС_БУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ИсходящиеДанные.УчетнаяПолитикаНУ;
	
	УчитыватьПоложительныеСуммовыеРазницы = УчетнаяПолитикаНУ.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	УчитыватьОтрицательныеСуммовыеРазницы = УчетнаяПолитикаНУ.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
	
	ВозможныОтклонения = НЕ УчитыватьПоложительныеСуммовыеРазницы ИЛИ НЕ УчитыватьОтрицательныеСуммовыеРазницы;
	
	ВидыДоходовОблагаемыеНДС = Новый Массив;
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	
	Если ВозможныОтклонения Тогда
		
		// Считаем суммовые разницы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ОсновнаяСтавкаНДС КАК СтавкаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьПоложительныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма > 0
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПоложительнаяРазница,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьОтрицательныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма < 0
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтрицательнаяРазница
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНач,
		|		&ДатаКон,
		|		Активность = ИСТИНА
		|		    И Организация = &Организация
		|		    И СчетКт В ИЕРАРХИИ (&Счет91_01)
		|		    И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
		|		    И СубконтоКт1.ОтнесениеРасходовКДеятельностиЕНВД <> &РасходыОтносятсяКЕНВД
		|		    И СчетДт = &Счет62_31
		|		    И Регистратор <> СубконтоДт3) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	&ОсновнаяСтавкаНДС";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("Счет62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
		Запрос.УстановитьПараметр("УчитыватьПоложительныеСуммовыеРазницы", УчитыватьПоложительныеСуммовыеРазницы);
		Запрос.УстановитьПараметр("УчитыватьОтрицательныеСуммовыеРазницы", УчитыватьОтрицательныеСуммовыеРазницы);
		Запрос.УстановитьПараметр("ВидыДоходовОблагаемыеНДС", ВидыДоходовОблагаемыеНДС);
		Запрос.УстановитьПараметр("РасходыОтносятсяКЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
		Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.НДС18);
		
		РезультатПоСуммовымРазницам = Запрос.Выполнить();
		ТаблицаСуммовыхРазниц = РезультатПоСуммовымРазницам.Выгрузить();
		
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотыПоСтавкамНДС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОборотыПоСтавкамНДС.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ОборотыПоСтавкамНДС.НДСНачисленный) КАК НДСНачисленный
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ОсновнаяСтавкаНДС КАК СтавкаНДС,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаВыручки,
	|		0 КАК НДСНачисленный
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет91_01),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|			    И Субконто1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
	|			    И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД <> &РасходыОтносятсяКЕНВД,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ОсновнаяСтавкаНДС,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет91_02),
	|			&ВидыСубконто91,
	|			Организация = &Организация
	|			    И Субконто1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
	|			    И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД <> &РасходыОтносятсяКЕНВД,
	|			Корсчет = &Счет68_02
	|			    ИЛИ Корсчет = &Счет76_Н,
	|			) КАК ХозрасчетныйОбороты) КАК ОборотыПоСтавкамНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоСтавкамНДС.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("Счет91_02", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Счет68_02", ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("Счет76_Н", ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	ВидыСубконто91 = Новый Массив;
	ВидыСубконто91.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто91", ВидыСубконто91);
	Запрос.УстановитьПараметр("ВидыДоходовОблагаемыеНДС", ВидыДоходовОблагаемыеНДС);
	Запрос.УстановитьПараметр("РасходыОтносятсяКЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Вставить(2, "ПоложительнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(3, "ОтрицательнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(4, "НДСРассчитанный", ОписаниеТипаСуммы);
	
	Если ВозможныОтклонения Тогда
		Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			
			РазницыПоТекСтавке = ТаблицаСуммовыхРазниц.Найти(СтрокаТабРезультата.СтавкаНДС, "СтавкаНДС");
			ЕстьРазницыПоТекСтавке = РазницыПоТекСтавке <> Неопределено;
			Если ЕстьРазницыПоТекСтавке Тогда
				СтрокаТабРезультата.ПоложительнаяРазница = РазницыПоТекСтавке.ПоложительнаяРазница;
				СтрокаТабРезультата.ОтрицательнаяРазница = РазницыПоТекСтавке.ОтрицательнаяРазница;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ЗначениеСтавки = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС = СтрокаТабРезультата.СуммаВыручки - СтрокаТабРезультата.ПоложительнаяРазница 
		           + СтрокаТабРезультата.ОтрицательнаяРазница;
		НДСРассчитанный = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.НДСРассчитанный = НДСРассчитанный;
		ОбнаруженыОшибки = (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
		               ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	// Таблица требуется для других правил - вставляем ее в исходящие данные при любом результате проверки
	ИсходящиеДанные.Вставить("Соответствие91_НДС_БУТаблицаЗначений", ТаблицаРезультата);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
	СтруктураЗаголовков.Вставить("СуммаВыручки", "Сумма выручки");
	СтруктураЗаголовков.Вставить("НДСНачисленный", "НДС начисленный");
	СтруктураЗаголовков.Вставить("ПоложительнаяРазница", "Положительная разница");
	СтруктураЗаголовков.Вставить("ОтрицательнаяРазница", "Отрицательная разница");
	СтруктураЗаголовков.Вставить("НДСРассчитанный", "НДС рассчитанный");
	ИсходящиеДанные.Вставить("Соответствие91_НДС_БУСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие90и91_НДС_НУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НетВИсходящихДанных  = НЕ ИсходящиеДанные.Свойство("Соответствие90_НДС_БУТаблицаЗначений");
	Если НетВИсходящихДанных Тогда
		ПравилоСоответствие90_НДС_БУ = ДеревоПроверок.Строки.Найти("Соответствие90_НДС_БУ", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоСоответствие90_НДС_БУ);
	КонецЕсли;
	ТаблицаСчета90 = ИсходящиеДанные.Соответствие90_НДС_БУТаблицаЗначений;
	
	НетВИсходящихДанных  = НЕ ИсходящиеДанные.Свойство("Соответствие91_НДС_БУТаблицаЗначений");
	Если НетВИсходящихДанных Тогда
		ПравилоСоответствие91_НДС_БУ = ДеревоПроверок.Строки.Найти("Соответствие91_НДС_БУ", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоСоответствие91_НДС_БУ);
	КонецЕсли;
	ТаблицаСчета91 = ИсходящиеДанные.Соответствие91_НДС_БУТаблицаЗначений;
	
	// Добавляем данные по выручке ЕНВД - в регистре НДСНачисленный она тоже должна отражаться
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ЕНВД"" КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаВыручки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90_01_2), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт <> 0";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_2", ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	
	Результат = Запрос.Выполнить();
	ТаблицаЕНВД = Результат.Выгрузить();
	
	УчетнаяПолитикаНУ = ИсходящиеДанные.УчетнаяПолитикаНУ;
	НДСПоОтгрузкеБезПереходаСобственности = УчетнаяПолитикаНУ.НачислятьНДСПоОтгрузке;
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		
		// Считаем суммы по отгрузке без перехода собственности (увеличивает базу бухучета)
		// и по реализации отгруженных товаров (уменьшает базу бухучета)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СтавкаНДС,
		|	СУММА(ВложенныйЗапрос.БазаНДСпоОтгрузкеБезПереходаСобственности) КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
		|	СУММА(ВложенныйЗапрос.СуммаНДСпоОтгрузкеБезПереходаСобственности) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСНачисленный.СтавкаНДС КАК СтавкаНДС,
		|		НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
		|		НДСНачисленный.НДС КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
		|	ИЗ
		|		РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ГДЕ
		|		НДСНачисленный.Активность = ИСТИНА
		|		И НДСНачисленный.ВидДвижения = &Приход
		|		И НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И НДСНачисленный.Организация = &Организация
		|		И НДСНачисленный.ВидНачисления В(&ВидыНачислений)
		|		И НДСНачисленный.Событие В(&ВключаемыеСобытия)
		|		И (НЕ НДСНачисленный.ВидЦенности В (&ВидыИсключаемыхЦенностей))
		|		И НДСНачисленный.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|		И ВЫРАЗИТЬ(НДСНачисленный.Регистратор КАК Документ.РеализацияТоваровУслуг).ВидОперации = &ОтгрузкаБезПереходаСобственности
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&Счет90_01_1)
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&Счет90_03)
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Организация = &Организация
		|			    И Активность = ИСТИНА
		|			    И Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
		|			    И (СчетДт В ИЕРАРХИИ (&Счет90_03)
		|			        ИЛИ СчетКт В ИЕРАРХИИ (&Счет90_01_1))) КАК ХозрасчетныйДвиженияССубконто) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СтавкаНДС";
		
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
		Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		Запрос.УстановитьПараметр("Счет90_03", ПланыСчетов.Хозрасчетный.Продажи_НДС);
		Запрос.УстановитьПараметр("ОтгрузкаБезПереходаСобственности", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		
		ВидыНачислений = Новый Массив;
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.Реализация0);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
		Запрос.УстановитьПараметр("ВидыНачислений", ВидыНачислений);
		Запрос.УстановитьПараметр("РеализацияЕНВД", Перечисления.НДСВидНачисления.РеализацияЕНВД);
		
		ВидыИсключаемыхЦенностей = Новый Массив;
		ВидыИсключаемыхЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
		Запрос.УстановитьПараметр("ВидыИсключаемыхЦенностей", ВидыИсключаемыхЦенностей);
		
		ВключаемыеСобытия = Новый Массив;
		ВключаемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		Запрос.УстановитьПараметр("ВключаемыеСобытия", ВключаемыеСобытия);
		
		Результат = Запрос.Выполнить();
		ТаблицаОтгрузкиБезПереходаСобственности = Результат.Выгрузить();
		
	КонецЕсли;
	 
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("СтавкаНДС");
	ТаблицаРезультата.Колонки.Добавить("БазаНДСпоБУ", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоБУ", ОписаниеТипаСуммы);
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		ТаблицаРезультата.Колонки.Добавить("БазаНДСпоОтгрузкеБезПереходаСобственности", ОписаниеТипаСуммы);
		ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоОтгрузкеБезПереходаСобственности", ОписаниеТипаСуммы);
	КонецЕсли;
	
	ТаблицаРезультата.Колонки.Добавить("БазаНДСпоРегистру", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоРегистру", ОписаниеТипаСуммы);
	
	Для каждого СтрокаТаблицы90 Из ТаблицаСчета90 Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицы90.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицы90.СуммаВыручки - СтрокаТаблицы90.ПоложительнаяРазница 
		                                     + СтрокаТаблицы90.ОтрицательнаяРазница;
		СтрокаТаблицыРезультата.СуммаНДСпоБУ = СтрокаТаблицы90.НДСНачисленный;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы91 Из ТаблицаСчета91 Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицы91.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицы91.СуммаВыручки - СтрокаТаблицы91.ПоложительнаяРазница 
		                                     + СтрокаТаблицы91.ОтрицательнаяРазница;
		СтрокаТаблицыРезультата.СуммаНДСпоБУ = СтрокаТаблицы91.НДСНачисленный;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыЕНВД Из ТаблицаЕНВД Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицыЕНВД.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицыЕНВД.СуммаВыручки;
	КонецЦикла;
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		Для каждого СтрокаТаблицыОтгрузкиБезПереходаСобственности Из ТаблицаОтгрузкиБезПереходаСобственности Цикл
			СтрокаТаблицыРезультата          = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, СтрокаТаблицыОтгрузкиБезПереходаСобственности);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСНачисленный.ВидНачисления = &РеализацияЕНВД
	|			ТОГДА ""ЕНВД""
	|		ИНАЧЕ НДСНачисленный.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) КАК БазаНДСпоРегистру,
	|	СУММА(НДСНачисленный.НДС) КАК СуммаНДСпоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Активность = ИСТИНА
	|	И НДСНачисленный.ВидДвижения = &Приход
	|	И НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НДСНачисленный.Организация = &Организация
	|	И НДСНачисленный.ВидНачисления В(&ВидыНачислений)
	|	И НДСНачисленный.Событие В(&ВключаемыеСобытия)
	|	И (НЕ НДСНачисленный.ВидЦенности В (&ВидыИсключаемыхЦенностей))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НДСНачисленный.ВидНачисления = &РеализацияЕНВД
	|			ТОГДА ""ЕНВД""
	|		ИНАЧЕ НДСНачисленный.СтавкаНДС
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	Запрос.УстановитьПараметр("ВидыНачислений", ВидыНачислений);
	Запрос.УстановитьПараметр("РеализацияЕНВД", Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	ВидыИсключаемыхЦенностей = Новый Массив;
	ВидыИсключаемыхЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыИсключаемыхЦенностей", ВидыИсключаемыхЦенностей);
	
	ВключаемыеСобытия = Новый Массив;
	ВключаемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("ВключаемыеСобытия", ВключаемыеСобытия);
	
	Результат = Запрос.Выполнить();
	ТаблицаРегистра = Результат.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРегистра, ТаблицаРезультата);
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		ТаблицаРезультата.Свернуть("СтавкаНДС", "БазаНДСпоБУ, СуммаНДСпоБУ, 
			|БазаНДСпоОтгрузкеБезПереходаСобственности, СуммаНДСпоОтгрузкеБезПереходаСобственности, БазаНДСпоРегистру, СуммаНДСпоРегистру");
	Иначе
		ТаблицаРезультата.Свернуть("СтавкаНДС", "БазаНДСпоБУ, СуммаНДСпоБУ, БазаНДСпоРегистру, СуммаНДСпоРегистру");
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
	
		Если НДСПоОтгрузкеБезПереходаСобственности Тогда
			Если СтрокаРезультата.БазаНДСпоБУ + СтрокаРезультата.БазаНДСпоОтгрузкеБезПереходаСобственности <> СтрокаРезультата.БазаНДСпоРегистру 
				ИЛИ СтрокаРезультата.СуммаНДСпоБУ + СтрокаРезультата.СуммаНДСпоОтгрузкеБезПереходаСобственности <> СтрокаРезультата.СуммаНДСпоРегистру Тогда
				ОбнаруженыОшибки = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если СтрокаРезультата.БазаНДСпоБУ <> СтрокаРезультата.БазаНДСпоРегистру 
				ИЛИ СтрокаРезультата.СуммаНДСпоБУ <> СтрокаРезультата.СуммаНДСпоРегистру Тогда
				ОбнаруженыОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУТаблицаЗначений", ТаблицаРезультата);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
		СтруктураЗаголовков.Вставить("БазаНДСпоБУ", "База НДС по данным БУ");
		СтруктураЗаголовков.Вставить("СуммаНДСпоБУ", "Сумма НДС по данным БУ");
		СтруктураЗаголовков.Вставить("БазаНДСпоОтгрузкеБезПереходаСобственности", "База НДС по отгрузке без перехода собственности");
		СтруктураЗаголовков.Вставить("СуммаНДСпоОтгрузкеБезПереходаСобственности", "Сумма НДС по отгрузке без перехода собственности");
		СтруктураЗаголовков.Вставить("БазаНДСпоРегистру", "База НДС по регистру");
		СтруктураЗаголовков.Вставить("СуммаНДСпоРегистру", "Сумма НДС по регистру");
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("СтавкаНДС", 15);
		СтруктураШириныКолонок.Вставить("БазаНДСпоБУ", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоБУ", 20);
		СтруктураШириныКолонок.Вставить("БазаНДСпоОтгрузкеБезПереходаСобственности", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоОтгрузкеБезПереходаСобственности", 20);
		СтруктураШириныКолонок.Вставить("БазаНДСпоРегистру", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоРегистру", 20);
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьРегОплатыПокупателей(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПериодов = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ВестиРасчетыПоДокументам = ПолучитьДанныеВестиРасчетыПоДокументам();
	ДолжнаБытьРегистрацияОплаты = НЕ ВестиРасчетыПоДокументам;
	
	ОбнаруженыОшибки = Ложь;
	
	Если ДолжнаБытьРегистрацияОплаты Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("НачПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("КонПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("Ошибка");
		
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РегистрацияОплатыОтПокупателейДляНДС.Ссылка
			|ИЗ
			|	Документ.РегистрацияОплатыОтПокупателейДляНДС КАК РегистрацияОплатыОтПокупателейДляНДС
			|ГДЕ
			|	РегистрацияОплатыОтПокупателейДляНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И РегистрацияОплатыОтПокупателейДляНДС.Проведен = ИСТИНА
			|	И РегистрацияОплатыОтПокупателейДляНДС.Организация = &Организация";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			НетРегистрацииОплаты = Результат.Пустой();
			Если НетРегистрацииОплаты Тогда
				
				ОбнаруженыОшибки = Истина;
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.Ошибка     = "Нет документа регистрации оплаты";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьРегОплатыПокупателейТаблицаЗначений", ТаблицаОшибок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьЗаписиКнигиПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФормированиеЗаписейКнигиПродаж.Ссылка
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
		|ГДЕ
		|	ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ФормированиеЗаписейКнигиПродаж.Проведен = ИСТИНА
		|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		ЕстьДокумент = НЕ Результат.Пустой();
		Если ЕстьДокумент Тогда
			СтрокаПериода.Результат = "Есть документ формирования книги продаж";
		Иначе
			ОбнаруженыОшибки = Истина;
			СтрокаПериода.Результат = "Нет документа формирования книги продаж";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьЗаписиКнигиПродажТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНачислениеНДСсАвансов(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, День, Счет В ИЕРАРХИИ (&СчетаАвансов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ПериодДень
	|		ИЗ
	|			Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ГДЕ
	|			СчетФактураВыданный.Организация = &Организация
	|			И СчетФактураВыданный.НаАванс = ИСТИНА
	|			И СчетФактураВыданный.Проведен = ИСТИНА
	|			И СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон) КАК ДниАвансовыхСФ
	|		ПО ХозрасчетныйОбороты.Период = ДниАвансовыхСФ.ПериодДень
	|ГДЕ
	|	ДниАвансовыхСФ.ПериодДень ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СчетаАвансов = Новый Массив;
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	Запрос.УстановитьПараметр("СчетаАвансов", СчетаАвансов);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НачислениеНДСсАвансовРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаАвансов", "Сумма авансов");
		ИсходящиеДанные.Вставить("НачислениеНДСсАвансовСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсАвансовБУ_НУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПоСчету76_АВ,
	|	НДСсАвансовОбороты.НДСПриход КАК СуммаПоРегистру
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет76_АВ, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСсАвансовОбороты
	|		ПО ХозрасчетныйОбороты.Организация = НДСсАвансовОбороты.Организация
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт <> НДСсАвансовОбороты.НДСПриход";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет76_АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсАвансовБУ_НУРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаПоСчету76_АВ", "Сумма по счету 76.АВ");
		СтруктураЗаголовков.Вставить("СуммаПоРегистру", "Сумма по регистру");
		ИсходящиеДанные.Вставить("НДСсАвансовБУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоОтложенныйНДС_БУ_НУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК ОстатокПоСчету76_Н,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаКон, Счет = &Счет76_Н, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|			И ВидНачисления = &ВидНачисленияРеализация) КАК НДСНачисленныйОстатки
	|		ПО ХозрасчетныйОстатки.Организация = НДСНачисленныйОстатки.Организация
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0)";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет76_Н", ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	Запрос.УстановитьПараметр("ВидНачисленияРеализация", Перечисления.НДСВидНачисления.РеализацияСНДС);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ОтложенныйНДС_БУ_НУРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоСчету76_Н", "Остаток по счету 76.Н");
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("ОтложенныйНДС_БУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаНДСАгенты(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|			И ВидЦенности В (&ВидыЦенностиАгенты)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	ВидыЦенностиАгенты = Новый Массив;
	ВидыЦенностиАгенты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиАгенты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностиАгенты", ВидыЦенностиАгенты);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПолнотаНДСАгентыРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("ПолнотаНДСАгентыСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсСМРхозспособомВКнигеПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|			И ВидЦенности В (&ВидыЦенностиСМР)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	ВидыЦенностиСМР = Новый Массив;
	ВидыЦенностиСМР.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСМР", ВидыЦенностиСМР);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсСМРхозспособомВКнигеПродажРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("НДСсСМРхозспособомВКнигеПродажСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсАвансовВКнигеПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|		    И ВидНачисления = &ВидНачисленияАвансы) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидНачисленияАвансы", Перечисления.НДСВидНачисления.НДСсАвансов);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсАвансовВКнигеПродажРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("НДСсАвансовВКнигеПродажСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры


// Книга покупок

Процедура ПроверитьПравилоДатаАктуальностиНДСПокупки(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НеБылоПроверкиДатаАктуальностиНДСПродажи = НЕ ИсходящиеДанные.Свойство("ДатаАктуальностиНДСПродажиТаблицаЗначений");
	
	Если НеБылоПроверкиДатаАктуальностиНДСПродажи Тогда
	
		ПравилоДатаАктуальностиНДСПродажи = ДеревоПроверок.Строки.Найти("ДатаАктуальностиНДСПродажи", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоДатаАктуальностиНДСПродажи);
	
		СтрокаПравила.ОбнаруженыОшибки  = ПравилоДатаАктуальностиНДСПродажи.ОбнаруженыОшибки;
		СтрокаПравила.ПроверкаВыполнена = ПравилоДатаАктуальностиНДСПродажи.ПроверкаВыполнена;
		
	КонецЕсли;
	
	ТаблицаОшибок = ИсходящиеДанные.ДатаАктуальностиНДСПродажиТаблицаЗначений;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПокупкиТаблицаЗначений", ТаблицаОшибок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаСФПолученных(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем только сам факт отсутствия счета-фактуры
	ТаблицаОшибок = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(ДатаНач, КонецДатыКон, Организация, , , Ложь, , );
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.ДокументОснование);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактура);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактураДата);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактураПроведен);
		ТаблицаОшибок.Колонки.Добавить("Ошибка");
		ТаблицаОшибок.ЗаполнитьЗначения("Нет счета-фактуры", "Ошибка");
		ИсходящиеДанные.Вставить("ПолнотаСФПолученныхТаблицаЗначений", ТаблицаОшибок);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ошибка", 40);
		ИсходящиеДанные.Вставить("ПолнотаСФПолученныхСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьРегОплатыПоставщику(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ВестиРасчетыПоДокументам = ПолучитьДанныеВестиРасчетыПоДокументам();
	ДолжнаБытьРегистрацияОплаты = НЕ ВестиРасчетыПоДокументам;
	
	ОбнаруженыОшибки = Ложь;
	Если ДолжнаБытьРегистрацияОплаты Тогда
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РегистрацияОплатыПоставщикуДляНДС.Ссылка
			|ИЗ
			|	Документ.РегистрацияОплатыПоставщикуДляНДС КАК РегистрацияОплатыПоставщикуДляНДС
			|ГДЕ
			|	РегистрацияОплатыПоставщикуДляНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И РегистрацияОплатыПоставщикуДляНДС.Проведен = ИСТИНА
			|	И РегистрацияОплатыПоставщикуДляНДС.Организация = &Организация";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			ЕстьРегистрацияОплаты = НЕ Результат.Пустой();
			Если ЕстьРегистрацияОплаты Тогда
				СтрокаПериода.Результат = "Есть документ регистрации оплаты";
			Иначе
				ОбнаруженыОшибки = Истина;
				СтрокаПериода.Результат = "Нет документа регистрации оплаты";
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаПравила.КомментарийРезультатаНетОшибок = "Документы регистрации оплаты не нужны";
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьРегОплатыПоставщикуТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьРаспределениеКосвРасходов(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	СложныйУчетНДС = УчетнаяПолитикаНУ.СложныйУчетНДС;
	
	ДолжноБытьРаспределениеРасходов = СложныйУчетНДС;
	
	ОбнаруженыОшибки = Ложь;
	Если ДолжноБытьРаспределениеРасходов Тогда
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РаспределениеНДСКосвенныхРасходов.Ссылка
			|ИЗ
			|	Документ.РаспределениеНДСКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходов
			|ГДЕ
			|	РаспределениеНДСКосвенныхРасходов.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И РаспределениеНДСКосвенныхРасходов.Проведен = ИСТИНА
			|	И РаспределениеНДСКосвенныхРасходов.Организация = &Организация";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			ЕстьРегистрацияОплаты = НЕ Результат.Пустой();
			Если ЕстьРегистрацияОплаты Тогда
				СтрокаПериода.Результат = "Есть документ распределения косвенных расходов";
			Иначе
				ОбнаруженыОшибки = Истина;
				СтрокаПериода.Результат = "Нет документа распределения косвенных расходов";
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаПравила.КомментарийРезультатаНетОшибок = "Документы распределения косвенных расходов не нужны, так как в учетной политике организации "
		                                             + "не включена возможность наличия операций без НДС или с НДС 0%";
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьРаспределениеКосвРасходовТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВсеКосвРасходыРаспределены(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	СложныйУчетНДС = УчетнаяПолитикаНУ.СложныйУчетНДС;
	
	ДолжноБытьРаспределениеРасходов = СложныйУчетНДС;
	
	ОбнаруженыОшибки = Ложь;
	Если ДолжноБытьРаспределениеРасходов Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("НачПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("КонПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("НераспределеннаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход КАК НераспределеннаяСумма
			|ИЗ
			|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
			|ГДЕ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход <> 0";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			ВсяСуммаРаспределена = Результат.Пустой();
			Если НЕ ВсяСуммаРаспределена Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				ОбнаруженыОшибки = Истина;
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.НераспределеннаяСумма = Выборка.НераспределеннаяСумма;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СтрокаПравила.КомментарийРезультата = "Распределение косвенных расходов не требуется, так как в учетной политике организации "
		                                    + "не включена возможность наличия операций без НДС или с НДС 0%";
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВсеКосвРасходыРаспределеныТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НераспределеннаяСумма", "Нераспределенная сумма");
		ИсходящиеДанные.Вставить("ВсеКосвРасходыРаспределеныСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьЗаписиКнигиПокупок(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФормированиеЗаписейКнигиПокупок.Ссылка
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
		|ГДЕ
		|	ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ФормированиеЗаписейКнигиПокупок.Проведен = ИСТИНА
		|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		ЕстьРегистрацияОплаты = НЕ Результат.Пустой();
		Если ЕстьРегистрацияОплаты Тогда
			СтрокаПериода.Результат = "Есть документ формирования записей книги покупок";
		Иначе
			ОбнаруженыОшибки = Истина;
			СтрокаПериода.Результат = "Нет документа  формирования записей книги покупок";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьЗаписиКнигиПокупокТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНетОтрицательногоНДСПредъявленного(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("СуммаОстатка", ОписаниеТипаСуммы);
	
	УчетнаяПолитикаНУ = ПолучитьДанныеУчетнаяПолитикаНУ();
	
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ДатаКон КАК ПериодМесяц,
		|	НДСПредъявленныйОстатки.СчетФактура КАК Документ,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) КАК СуммаОстатка
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.Организация = НДСПредъявленныйРеализация0Остатки.Организация
		|			И НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|		&ГраницаКон,
		|		Организация = &Организация
		|		    И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.Организация = НДСпоОСиНМАОстатки.Организация
		|			И НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|ГДЕ
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(СтрокаПериода.КонПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
		
		КонецЦикла; 
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НетОтрицательногоНДСПредъявленногоТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаОстатка", "Сумма остатка");
		ИсходящиеДанные.Вставить("НетОтрицательногоНДСПредъявленногоСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВычетНДС_БУ_НУ(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаНДСпоСчету19,
	|	ЕСТЬNULL(ЗапросПоРегистрам.СуммаНДСпоРегистру, 0) КАК СуммаНДСпоРегистрам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		(НЕ СчетДт В ИЕРАРХИИ (&Счет19)),
	|		,
	|		СчетКт В ИЕРАРХИИ (&Счет19)
	|		    И СчетКт <> &Счет19_06,
	|		,
	|		Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЗапросПоРегистрам.СуммаНДСпоРегистру) КАК СуммаНДСпоРегистру
	|		ИЗ
	|			(ВЫБРАТЬ
	|				НДСПредъявленныйОбороты.НДСРасход КАК СуммаНДСпоРегистру
	|			ИЗ
	|				РегистрНакопления.НДСПредъявленный.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСПредъявленныйОбороты
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НДСНачисленныйОбороты.НДСПриход
	|			ИЗ
	|				РегистрНакопления.НДСНачисленный.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					Организация = &Организация
	|					    И ВидНачисления = &НДСВосстановлен) КАК НДСНачисленныйОбороты) КАК ЗапросПоРегистрам) КАК ЗапросПоРегистрам
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЕСТЬNULL(ЗапросПоРегистрам.СуммаНДСпоРегистру, 0) <> ЕСТЬNULL(НалоговыйОборотыДтКт.СуммаОборот, 0)";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет19", ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.УстановитьПараметр("Счет19_06", ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НДСВосстановлен", Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВычетНДС_БУ_НУРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаНДСпоСчету19", "Сумма НДС по счету 19");
		СтруктураЗаголовков.Вставить("СуммаНДСпоРегистрам", "Сумма НДС по регистрам НДС");
		ИсходящиеДанные.Вставить("ВычетНДС_БУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПравильностьРегОплатыНДСАгентом(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапросПоДокументамРегистрации.ДокументОплаты КАК Документ,
	|	ЗапросПоДокументамРегистрации.Сумма КАК СуммаПоДокументу,
	|	ЕСТЬNULL(ЗапросПоДебету68_02.СуммаОборотДт, 0) КАК СуммаПоДебету68_02
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрацияОплатыНДСВБюджетАгент.ДокументОплаты КАК ДокументОплаты,
	|		СУММА(РегистрацияОплатыНДСВБюджетАгент.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.РегистрацияОплатыНДСВБюджет.ОплатаПоДоговорамНалоговогоАгента КАК РегистрацияОплатыНДСВБюджетАгент
	|	ГДЕ
	|		РегистрацияОплатыНДСВБюджетАгент.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РегистрацияОплатыНДСВБюджетАгент.Ссылка.Проведен = ИСТИНА
	|		И РегистрацияОплатыНДСВБюджетАгент.Ссылка.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрацияОплатыНДСВБюджетАгент.ДокументОплаты) КАК ЗапросПоДокументамРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|			ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				Счет = &Счет68_02,
	|				,
	|				Организация = &Организация
	|					И Субконто1 = &Налог,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|		ГДЕ
	|			ХозрасчетныйОбороты.Организация = &Организация) КАК ЗапросПоДебету68_02
	|		ПО ЗапросПоДокументамРегистрации.ДокументОплаты = ЗапросПоДебету68_02.Регистратор
	|ГДЕ
	|	ЗапросПоДокументамРегистрации.Сумма > ЕСТЬNULL(ЗапросПоДебету68_02.СуммаОборотДт, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОплаты
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет68_02", ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("Налог", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПравильностьРегОплатыНДСАгентомРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ", "Документ оплаты");
		СтруктураЗаголовков.Вставить("СуммаПоДокументу", "Сумма по документу");
		СтруктураЗаголовков.Вставить("СуммаПоДебету68_02", "Сумма по дебету сч. 68.02");
		ИсходящиеДанные.Вставить("ПравильностьРегОплатыНДСАгентомСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьВычетНДСсАвансов(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Контрагент");
	ТаблицаОшибок.Колонки.Добавить("ЗачетАвансов", ОписаниеТипаСуммы);
	ТаблицаОшибок.Колонки.Добавить("ОборотКт76_АВ", ОписаниеТипаСуммы);
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ДатаНач КАК НачПериода,
		|	&ДатаКон КАК КонПериода,
		|	ЗапросПоБУ.Контрагент,
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотКт76_АВ, 0) КАК ОборотКт76_АВ,
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотДтПоАвансам, 0) КАК ЗачетАвансов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация,
		|		ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|		СУММА(ВЫБОР
		|				КОГДА ХозрасчетныйОбороты.Счет = &Счет76_АВ
		|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОборотКт76_АВ,
		|		СУММА(ВЫБОР
		|				КОГДА ХозрасчетныйОбороты.Счет = &Счет62_02
		|						ИЛИ ХозрасчетныйОбороты.Счет = &Счет62_32
		|					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОборотДтПоАвансам
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&СчетаПоАвансамПокупателей), &ВидСубконтоКонтрагенты, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйОбороты.Организация,
		|		ХозрасчетныйОбороты.Субконто1) КАК ЗапросПоБУ
		|ГДЕ
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотКт76_АВ, 0) = 0 И ЕСТЬNULL(ЗапросПоБУ.ОборотДтПоАвансам, 0) > 0";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СчетаПоАвансамПокупателей = Новый Массив;
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		Запрос.УстановитьПараметр("СчетаПоАвансамПокупателей", СчетаПоАвансамПокупателей);
		Запрос.УстановитьПараметр("Счет62_02", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
		Запрос.УстановитьПараметр("Счет62_32", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
		Запрос.УстановитьПараметр("Счет76_АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ОбнаруженыОшибки = Истина;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовТаблицаЗначений", ТаблицаОшибок);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЗачетАвансов", "Зачет авансов (62.02, 62.32)");
		СтруктураЗаголовков.Вставить("ОборотКт76_АВ", "Оборот по кредиту счета 76.АВ");
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Контрагент", 40);
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВычетНДСсАвансов_БУ_НУ(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("НДСпоРегистру", ОписаниеТипаСуммы);
	ТаблицаОшибок.Колонки.Добавить("ОборотКт76_АВ", ОписаниеТипаСуммы);
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК ОборотКт76_АВ,
		|	ЕСТЬNULL(НДСсАвансовОбороты.НДСРасход, 0) КАК НДСпоРегистру
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет76_АВ, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСсАвансовОбороты
		|		ПО (ИСТИНА)";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет76_АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Выборка.Следующий();
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		СтрокаТаблицыОшибок.НачПериода    = СтрокаПериода.НачПериода;
		СтрокаТаблицыОшибок.КонПериода    = СтрокаПериода.КонПериода;
		СтрокаТаблицыОшибок.НДСпоРегистру = Выборка.НДСпоРегистру;
		СтрокаТаблицыОшибок.ОборотКт76_АВ = Выборка.ОборотКт76_АВ;
		
		ЕстьОшибкиВПериоде = Выборка.НДСпоРегистру <> Выборка.ОборотКт76_АВ;
		Если ЕстьОшибкиВПериоде Тогда
			ОбнаруженыОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВычетНДСсАвансов_БУ_НУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НДСпоРегистру", "Сумма НДС по регистру");
		СтруктураЗаголовков.Вставить("ОборотКт76_АВ", "Оборот по кредиту сч. 76.АВ");
		ИсходящиеДанные.Вставить("ВычетНДСсАвансов_БУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры


// Sales book

Процедура ПроверитьПравилоНепривязанныеТикеты(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	Tickets.Дата КАК Дата,
	              	|	Tickets.Ссылка КАК Ticket,
	              	|	Tickets.Ответственный КАК Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|ГДЕ
	              	|	Tickets.SiebelOrder = &Пустая
	              	|	И Tickets.Статус = &Lawson
	              	|	И Tickets.Дата МЕЖДУ &Нач И &Кон
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
				   	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
	Запрос.УстановитьПараметр("Lawson", Перечисления.TicketsStatuses.Lawson);
	Запрос.УстановитьПараметр("Пустая", Документы.SiebelOrders.ПустаяСсылка());
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ticket", "Ticket");
		ИсходящиеДанные.Вставить("НепривязанныеТикетыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НепривязанныеТикетыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКлиентыСПустымLawsonID(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	              	|	МИНИМУМ(ВложенныйЗапрос.Ответственный) КАК Ответственный,
	              	|	МИНИМУМ(ВложенныйЗапрос.ИнвойсинговыйЦентр) КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|		РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	              	|		РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр,
	              	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|	ГДЕ
	              	|		РеализацияТоваровУслуг.Контрагент В ИЕРАРХИИ(&Покупатели)
	              	|		И РеализацияТоваровУслуг.Дата МЕЖДУ &Нач И &Кон
					//|		И РеализацияТоваровУслуг.Контрагент.LawsonID = """"
					|		И РеализацияТоваровУслуг.Контрагент.КонтрагентLawson = Значение(Справочник.КонтрагентыLawson.ПустаяСсылка)
	              	|		И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
				  	|	
	              	|	ОБЪЕДИНИТЬ ВСЕ
	              	|	
	              	|	ВЫБРАТЬ
	              	|		ОтражениеНачисленияНДС.Контрагент,
	              	|		ОтражениеНачисленияНДС.ИнвойсинговыйЦентр,
	              	|		""Остатки""
	              	|	ИЗ
	              	|		Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	              	|	ГДЕ
	              	|		ОтражениеНачисленияНДС.Контрагент В ИЕРАРХИИ(&Покупатели)
	              	|		И ОтражениеНачисленияНДС.Дата МЕЖДУ &Нач И &Кон
					//|		И РеализацияТоваровУслуг.Контрагент.LawsonID = """"
					|		И РеализацияТоваровУслуг.Контрагент.КонтрагентLawson = Значение(Справочник.КонтрагентыLawson.ПустаяСсылка)
	              	|		И ОтражениеНачисленияНДС.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И ОтражениеНачисленияНДС.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ВложенныйЗапрос.Контрагент
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный";
	Запрос.УстановитьПараметр("Покупатели", Справочники.Контрагенты.НайтиПоНаименованию("Покупатели"));
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		ИсходящиеДанные.Вставить("КлиентыСПустымLawsonIDСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КлиентыСПустымLawsonIDТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеСуммВРегистре(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.Ссылка КАК Документ,
	              	|	ВложенныйЗапрос.СуммаДокумента,
	              	|	ВложенныйЗапрос.СуммаДокумента1 КАК СуммаВРегистре,
	              	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр,
	              	|	ВложенныйЗапрос.Ссылка.Дата КАК Дата
	              	|ИЗ
	              	|	(ВЫБРАТЬ
	              	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	              	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	              	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	              	|		РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр,
	              	|		НомераИнвойсовLawson.СуммаДокумента КАК СуммаДокумента1
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераИнвойсовLawson КАК НомераИнвойсовLawson
	              	|			ПО НомераИнвойсовLawson.Документ = РеализацияТоваровУслуг.Ссылка
	              	|	ГДЕ
	              	|		РеализацияТоваровУслуг.Дата МЕЖДУ &Нач И &Кон
	              	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
	              	|ГДЕ
	              	|	ВложенныйЗапрос.СуммаДокумента <> ВложенныйЗапрос.СуммаДокумента1
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("СоответствиеСуммВРегистреСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СоответствиеСуммВРегистреТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеНомеровВРегистре(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	НомераИнвойсовLawson.Документ,
	              	|	НомераИнвойсовLawson.Документ.Дата КАК Дата,
	              	|	НомераИнвойсовLawson.Документ.Ответственный КАК Ответственный,
	              	|	НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	РегистрСведений.НомераИнвойсовLawson КАК НомераИнвойсовLawson
	              	|ГДЕ
	              	|	НомераИнвойсовLawson.Номер = """"
	              	|	И НомераИнвойсовLawson.Документ.Дата МЕЖДУ &Нач И &Кон ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И НомераИнвойсовLawson.Документ.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		ИсходящиеДанные.Вставить("НаличиеНомеровВРегистреСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НаличиеНомеровВРегистреТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПривязкаСФкРТУ(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	СчетФактураВыданный.Дата КАК Дата,
	              	|	СчетФактураВыданный.Номер,
	              	|	СчетФактураВыданный.Ссылка КАК СФ,
	              	|	СчетФактураВыданный.Ответственный КАК Ответственный,
	              	|	СчетФактураВыданный.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	              	|ГДЕ
	              	|	СчетФактураВыданный.ДокументОснование.Проведен = ЛОЖЬ
	              	|	И СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И СчетФактураВыданный.Проведен = ИСТИНА ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И СчетФактураВыданный.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И СчетФактураВыданный.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СФ", "СФ");
		ИсходящиеДанные.Вставить("ПривязкаСФкРТУСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПривязкаСФкРТУТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНесколькоТикетовУSO(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	Tickets.SiebelOrder.Дата КАК SiebelOrderДата,
	              	|	Tickets.SiebelOrder.Номер,
	              	|	Tickets.SiebelOrder КАК SiebelOrder,
	              	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Tickets.Ссылка) КАК КоличествоТикетов,
	              	|	Tickets.Ответственный КАК Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|ГДЕ
	              	|	Tickets.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И Tickets.SiebelOrder <> &Пустой
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	Tickets.SiebelOrder,
	              	|	Tickets.SiebelOrder.Дата,
	              	|	Tickets.SiebelOrder.Номер,
	              	|	Tickets.Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр
	              	|
	              	|ИМЕЮЩИЕ
	              	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Tickets.Ссылка) > 1
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	SiebelOrderДата";
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Пустой", Документы.SiebelOrders.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
	//	СтруктураРасшифровки.Вставить("Тикет", "Тикет");
		СтруктураРасшифровки.Вставить("SiebelOrder", "SiebelOrder");
		ИсходящиеДанные.Вставить("НесколькоТикетовУSOСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НесколькоТикетовУSOТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоОтрицательныйОстатокТикетов(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	              	|	ТикетыОстатки.Тикет.Ссылка КАК Тикет,
	              	|	ТикетыОстатки.Тикет.Номер КАК Номер,
	              	|	ТикетыОстатки.Тикет.Дата КАК Дата,
	              	|	ТикетыОстатки.СуммаОстаток,
	              	|	ТикетыОстатки.Тикет.Ответственный КАК Ответственный,
	              	|	ТикетыОстатки.Тикет.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	РегистрНакопления.Тикеты.Остатки(&ДатаКон,";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"	Тикет.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
			Запрос.Текст = Запрос.Текст +" и Тикет.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
			Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
		КонецЕсли;
	ИначеЕсли не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +" Тикет.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ТикетыОстатки
	              	|ГДЕ
	              	|	ТикетыОстатки.СуммаОстаток < 0
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
					
	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Тикет", "Тикет");
		ИсходящиеДанные.Вставить("ОтрицательныйОстатокТикетовСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ОтрицательныйОстатокТикетовТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоМаленькийОстатокТикетов(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ТикетыОстатки.Тикет.Ссылка КАК Тикет,
	              	|	ТикетыОстатки.Тикет.Номер КАК Номер,
	              	|	ТикетыОстатки.Тикет.Дата КАК Дата,
	              	|	ТикетыОстатки.СуммаОстаток,
	              	|	ТикетыОстатки.Тикет.Ответственный КАК Ответственный,
	              	|	ТикетыОстатки.Тикет.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	РегистрНакопления.Тикеты.Остатки(&ДатаКон,";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"	Тикет.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
			Запрос.Текст = Запрос.Текст +" и Тикет.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
			Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
		КонецЕсли;
	ИначеЕсли не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +" Тикет.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + " ) КАК ТикетыОстатки
	              	|ГДЕ
	              	|	ТикетыОстатки.СуммаОстаток МЕЖДУ 0 И 1
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Тикет", "Тикет");
		ИсходящиеДанные.Вставить("МаленькийОстатокТикетовСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("МаленькийОстатокТикетовТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеСтавки0(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.Документ,
	              	|	ВложенныйЗапрос.Документ.Номер КАК Номер,
	              	|	ВложенныйЗапрос.Документ.Дата КАК Дата,
	              	|	ВложенныйЗапрос.Документ.Ответственный КАК Ответственный,
	              	|	ВложенныйЗапрос.Документ.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	(ВЫБРАТЬ
	              	|		РеализацияТоваровУслугТовары.Ссылка КАК Документ
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              	|	ГДЕ
	              	|		РеализацияТоваровУслугТовары.СтавкаНДС = &СтавкаНДС
	              	|		И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|		И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|	
	              	|	ОБЪЕДИНИТЬ ВСЕ
	              	|	
	              	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|		РеализацияТоваровУслугУслуги.Ссылка
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	              	|	ГДЕ
	              	|		РеализацияТоваровУслугУслуги.СтавкаНДС = &СтавкаНДС
	              	|		И РеализацияТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|		И РеализацияТоваровУслугУслуги.Ссылка.ПометкаУдаления = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	Tickets.Ссылка,
	              	|	Tickets.Номер,
	              	|	Tickets.Дата,
	              	|	Tickets.Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|ГДЕ
	              	|	Tickets.СтавкаНДС = &СтавкаНДС
	              	|	И Tickets.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.НДС0);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НаличиеСтавки0СтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НаличиеСтавки0ТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПодразделенияГруппы(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	              	|	РеализацияТоваровУслуг.Номер КАК Номер,
	              	|	РеализацияТоваровУслуг.Дата КАК Дата,
	              	|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	              	|	РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|ГДЕ
	              	|	РеализацияТоваровУслуг.ПодразделениеОрганизации.КПП = """"
	              	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	Tickets.Ссылка,
	              	|	Tickets.Номер,
	              	|	Tickets.Дата,
	              	|	Tickets.Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|ГДЕ
	              	|	Tickets.ПодразделениеОрганизации.КПП = """"
	              	|	И Tickets.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("ПодразделенияГруппыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПодразделенияГруппыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоДоговорСФ(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	СчетФактураВыданный.Дата КАК Дата,
	              	|	СчетФактураВыданный.Номер,
	              	|	СчетФактураВыданный.Ссылка КАК СФ,
	              	|	СчетФактураВыданный.Ответственный КАК Ответственный,
	              	|	СчетФактураВыданный.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	              	|ГДЕ
	              	|	СчетФактураВыданный.ДокументОснование.ДоговорКонтрагента <> СчетФактураВыданный.ДоговорКонтрагента
	              	|	И СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И СчетФактураВыданный.Проведен = ИСТИНА
	              	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	              	|	И СчетФактураВыданный.НаАванс = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И СчетФактураВыданный.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И СчетФактураВыданный.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СФ", "СФ");
		ИсходящиеДанные.Вставить("ДоговорСФСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ДоговорСФТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКредитНота(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.Ссылка КАК КредитНота,
	              	|	ВложенныйЗапрос.Ticket,
	              	|	ВложенныйЗапрос.Ссылка.Дата КАК Дата,
	              	|	ВложенныйЗапрос.Ссылка.Ответственный КАК Ответственный,
	              	|	ВложенныйЗапрос.Ссылка.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	              	|		РеализацияТоваровУслугТовары.Ticket КАК Ticket
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              	|	ГДЕ
	              	|		РеализацияТоваровУслугТовары.Ссылка.ВидОперации = &ВидОперации
	              	|		И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|	
	              	|	ОБЪЕДИНИТЬ ВСЕ
	              	|	
	              	|	ВЫБРАТЬ
	              	|		РеализацияТоваровУслугУслуги.Ссылка,
	              	|		РеализацияТоваровУслугУслуги.Ticket
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	              	|	ГДЕ
	              	|		РеализацияТоваровУслугУслуги.Ссылка.ВидОперации = &ВидОперации ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	              	|		ПО ВложенныйЗапрос.Ticket = Tickets.Ссылка
	              	|ГДЕ
	              	|	Tickets.Тип = &Тип
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	ВложенныйЗапрос.Ссылка,
	              	|	Tickets.Ссылка,
	              	|	Tickets.Дата,
	              	|	ВложенныйЗапрос.Ссылка.Ответственный,
	              	|	ВложенныйЗапрос.Ссылка.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|			РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	              	|			РеализацияТоваровУслугТовары.Ticket КАК Ticket
	              	|		ИЗ
	              	|			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              	|		ГДЕ
	              	|			РеализацияТоваровУслугТовары.Ссылка.ВидОперации = &ВидОперации2 ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|		
	              	|		ОБЪЕДИНИТЬ ВСЕ
	              	|		
	              	|		ВЫБРАТЬ
	              	|			РеализацияТоваровУслугУслуги.Ссылка,
	              	|			РеализацияТоваровУслугУслуги.Ticket
	              	|		ИЗ
	              	|			Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	              	|		ГДЕ
	              	|			РеализацияТоваровУслугУслуги.Ссылка.ВидОперации = &ВидОперации2";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
	              	|		ПО Tickets.Ссылка = ВложенныйЗапрос.Ticket
	              	|ГДЕ
	              	|	Tickets.Тип = &Тип2
	              	|	И Tickets.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
	Запрос.УстановитьПараметр("Тип", "Invoice");				
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
	Запрос.УстановитьПараметр("Тип2", "Credit note");				
	Запрос.УстановитьПараметр("ВидОперации2", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ticket", "Ticket");
		СтруктураРасшифровки.Вставить("КредитНота", "КредитНота");

		ИсходящиеДанные.Вставить("КредитНотаСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КредитНотаТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоДоговорПП(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	              	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ссылка КАК ПлатежноеПоручение,
	              	|	ВЫБОР
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату
	              	|	КОНЕЦ КАК Документ,
	              	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки,
	              	|	ВЫБОР
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Ответственный
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату.Ответственный
	              	|	КОНЕЦ КАК Ответственный,
	              	|	ВЫБОР
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.ИнвойсинговыйЦентр
	              	|		КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату ЕСТЬ NULL )
	              	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату.ИнвойсинговыйЦентр
	              	|	КОНЕЦ КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	              	|ГДЕ
	              	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Allocated = ИСТИНА
	              	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И ВЫБОР
	              	|			КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ЕСТЬ NULL )
	              	|					И (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ССЫЛКА Документ.ПлатежноеПоручениеВходящее)
	              	|				ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента <> ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.ДоговорКонтрагента
	              	|			КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату ЕСТЬ NULL )
	              	|				ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента <> ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату.ДоговорКонтрагента
	              	|			ИНАЧЕ ЛОЖЬ
	              	|		КОНЕЦ
	              	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		СтруктураРасшифровки.Вставить("ПлатежноеПоручение", "ПлатежноеПоручение");
		ИсходящиеДанные.Вставить("ДоговорППСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ДоговорППТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоИЦПП(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	              	|	ВложенныйЗапрос.ПлатежноеПоручение.Дата КАК Дата,
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр КАК КоличествоИнвойсинговыхЦентров
	              	|ИЗ
	              	|	(ВЫБРАТЬ
	              	|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ссылка КАК ПлатежноеПоручение,
	              	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	              	|				КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка ЕСТЬ NULL )
	              	|					ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.ИнвойсинговыйЦентр
	              	|				КОГДА (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату ЕСТЬ NULL )
	              	|					ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаПредоплату.ИнвойсинговыйЦентр
	              	|			КОНЕЦ) КАК ИнвойсинговыйЦентр
	              	|	ИЗ
	              	|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	              	|	ГДЕ
	              	|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Allocated = ИСТИНА
	              	|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|	
	              	|	СГРУППИРОВАТЬ ПО
	              	|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ссылка) КАК ВложенныйЗапрос
	              	|ГДЕ
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр > 1" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ПлатежноеПоручение", "ПлатежноеПоручение");
		ИсходящиеДанные.Вставить("ИЦППСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ИЦППТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоППНеНаПокупателя(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ПлатежноеПоручениеВходящее.Ссылка КАК ПлатежноеПоручение,
	              	|	ПлатежноеПоручениеВходящее.Дата КАК Дата,
	              	|	ПлатежноеПоручениеВходящее.Ответственный КАК Ответственный,
	              	|	ПлатежноеПоручениеВходящее.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	              	|ГДЕ
	              	|	ПлатежноеПоручениеВходящее.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И (НЕ ПлатежноеПоручениеВходящее.Контрагент В ИЕРАРХИИ (&Контрагент))
	              	|	И ПлатежноеПоручениеВходящее.ВидОперации = &ВидОперации
	              	|	И ПлатежноеПоручениеВходящее.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящее.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И ПлатежноеПоручениеВходящее.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоНаименованию("Покупатели"));
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ПлатежноеПоручение", "ПлатежноеПоручение");
		ИсходящиеДанные.Вставить("ППНеНаПокупателяСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ППНеНаПокупателяТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоРеализацияДоговор(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	              	|	РеализацияТоваровУслуг.Дата КАК Дата,
	              	|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	              	|	РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|ГДЕ
	              	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ВедениеВзаиморасчетов
	              	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("РеализацияДоговорСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("РеализацияДоговорТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПереоценкаВалюты(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр,
	              	|	&Количество - ВложенныйЗапрос.КоличествоДокументов КАК КоличествоНеСозданныхДокументов
	              	|ИЗ
	              	|	(ВЫБРАТЬ
	              	|		ИнвойсинговыеЦентры.Ссылка КАК ИнвойсинговыйЦентр,
	              	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка.Дата) КАК КоличествоДокументов
	              	|	ИЗ
	              	|		Справочник.ИнвойсинговыеЦентры КАК ИнвойсинговыеЦентры
	              	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|				ПереоценкаВалютыВРегистре.Ссылка КАК Ссылка
	              	|			ИЗ
	              	|				Документ.ПереоценкаВалютыВРегистре КАК ПереоценкаВалютыВРегистре
	              	|			ГДЕ
	              	|				НАЧАЛОПЕРИОДА(ПереоценкаВалютыВРегистре.Дата, МЕСЯЦ) В (&Период)) КАК ВложенныйЗапрос
	              	|			ПО ИнвойсинговыеЦентры.Ссылка = ВложенныйЗапрос.Ссылка.ИнвойсинговыйЦентр
	              	|	
	              	|	СГРУППИРОВАТЬ ПО
	              	|		ИнвойсинговыеЦентры.Ссылка
	              	|	
	              	|	ИМЕЮЩИЕ
	              	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка.Дата) <> &Количество) КАК ВложенныйЗапрос
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр" ;
					
	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Периоды = Новый Массив;

	КоличествоМесяцев = Месяц(ДатаКон)-Месяц(ДатаНач); 
	
	Для н=1 по КоличествоМесяцев Цикл
		Периоды.Добавить(Дата(Год(ДатаНач),н,1));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Период",Периоды);
	Запрос.УстановитьПараметр("Количество", КоличествоМесяцев);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		ИсходящиеДанные.Вставить("ПереоценкаВалютыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПереоценкаВалютыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоТикетИРеализация(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	              	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка КАК Реализация,
	              	|	Tickets.Ссылка КАК Тикет,
	              	|	ВЫБОР
	              	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.Контрагент <> Tickets.Контрагент
	              	|			ТОГДА ""Контрагент""
	              	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ТОГДА ""ДоговорКонтрагента""
	              	|		КОГДА Tickets.ПодразделениеОрганизации <> РеализацияТоваровУслугТовары.Ссылка.ПодразделениеОрганизации
	              	|			ТОГДА ""Подразделение""
	              	|		КОГДА Tickets.СтавкаНДС <> РеализацияТоваровУслугТовары.СтавкаНДС
	              	|			ТОГДА ""Ставка НДС""
	              	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр
	              	|			ТОГДА ""Инвойсинговый центр""
	              	|	КОНЕЦ КАК Ошибка,
	              	|	РеализацияТоваровУслугТовары.Ссылка.Ответственный КАК Ответственный,
	              	|	РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	              	|		ПО РеализацияТоваровУслугТовары.Ticket = Tickets.Ссылка
	              	|ГДЕ
	              	|	(РеализацияТоваровУслугТовары.Ссылка.Контрагент <> Tickets.Контрагент
	              	|			ИЛИ РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ИЛИ Tickets.ПодразделениеОрганизации <> РеализацияТоваровУслугТовары.Ссылка.ПодразделениеОрганизации
	              	|			ИЛИ Tickets.СтавкаНДС <> РеализацияТоваровУслугТовары.СтавкаНДС
	              	|			ИЛИ РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр)
	              	|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ
	              	|	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Дата,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Ссылка,
	              	|	Tickets.Ссылка,
	              	|	ВЫБОР
	              	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.Контрагент <> Tickets.Контрагент
	              	|			ТОГДА ""Контрагент""
	              	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ТОГДА ""ДоговорКонтрагента""
	              	|		КОГДА Tickets.ПодразделениеОрганизации <> РеализацияТоваровУслугУслуги.Ссылка.ПодразделениеОрганизации
	              	|			ТОГДА ""Подразделение""
	              	|		КОГДА Tickets.СтавкаНДС <> РеализацияТоваровУслугУслуги.СтавкаНДС
	              	|			ТОГДА ""Ставка НДС""
	              	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр
	              	|			ТОГДА ""Инвойсинговый центр""
	              	|	КОНЕЦ,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Ответственный,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	              	|		ПО РеализацияТоваровУслугУслуги.Ticket = Tickets.Ссылка
	              	|ГДЕ
	              	|	(РеализацияТоваровУслугУслуги.Ссылка.Контрагент <> Tickets.Контрагент
	              	|			ИЛИ РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ИЛИ Tickets.ПодразделениеОрганизации <> РеализацияТоваровУслугУслуги.Ссылка.ПодразделениеОрганизации
	              	|			ИЛИ Tickets.СтавкаНДС <> РеализацияТоваровУслугУслуги.СтавкаНДС
	              	|			ИЛИ РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр)
	              	|	И РеализацияТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	НомераИнвойсовLawson.Документ.Дата,
	              	|	НомераИнвойсовLawson.Документ.Ссылка,
	              	|	Tickets.Ссылка,
	              	|	ВЫБОР
	              	|		КОГДА НомераИнвойсовLawson.Документ.Контрагент <> Tickets.Контрагент
	              	|			ТОГДА ""Контрагент""
	              	|		КОГДА НомераИнвойсовLawson.Документ.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ТОГДА ""ДоговорКонтрагента""
	              	|		КОГДА Tickets.ПодразделениеОрганизации <> НомераИнвойсовLawson.Документ.ПодразделениеОрганизации
	              	|			ТОГДА ""Подразделение""
	              	|		КОГДА НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр
	              	|			ТОГДА ""Инвойсинговый центр""
	              	|	КОНЕЦ,
	              	|	НомераИнвойсовLawson.Документ.Ответственный,
	              	|	НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераИнвойсовLawson КАК НомераИнвойсовLawson
	              	|		ПО Tickets.Ссылка = НомераИнвойсовLawson.Тикет
	              	|ГДЕ
	              	|	(НомераИнвойсовLawson.Документ.Контрагент <> Tickets.Контрагент
	              	|			ИЛИ НомераИнвойсовLawson.Документ.ДоговорКонтрагента <> Tickets.ДоговорКонтрагента
	              	|			ИЛИ Tickets.ПодразделениеОрганизации <> НомераИнвойсовLawson.Документ.ПодразделениеОрганизации
	              	|			ИЛИ НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр <> Tickets.ИнвойсинговыйЦентр)
	              	|	И НомераИнвойсовLawson.Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И НомераИнвойсовLawson.Документ.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И НомераИнвойсовLawson.Документ.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Реализация", "Реализация");
		СтруктураРасшифровки.Вставить("Тикет", "Тикет");
		ИсходящиеДанные.Вставить("ТикетИРеализацияСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ТикетИРеализацияТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоТикетИРеализацияМенеджмент(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	              	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка КАК Реализация,
	              	|	Tickets.Ссылка КАК Тикет,
	              	|	ВЫБОР
	              	|		КОГДА РеализацияТоваровУслугТовары.КостЦентр <> Tickets.AccountingUnit
	              	|			ТОГДА ""Accounting Unit""
	              	|	КОНЕЦ КАК Ошибка,
	              	|	РеализацияТоваровУслугТовары.Ссылка.Ответственный КАК Ответственный,
	              	|	РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	              	|		ПО РеализацияТоваровУслугТовары.Ticket = Tickets.Ссылка
	              	|ГДЕ
	              	|	РеализацияТоваровУслугТовары.КостЦентр <> Tickets.AccountingUnit
	              	|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И Tickets.Проведен = ИСТИНА
	              	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугТовары.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Дата,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Ссылка,
	              	|	Tickets.Ссылка,
	              	|	ВЫБОР
	              	|		КОГДА РеализацияТоваровУслугУслуги.КостЦентр <> Tickets.AccountingUnit
	              	|			ТОГДА ""Accounting Unit""
	              	|	КОНЕЦ,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.Ответственный,
	              	|	РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Tickets КАК Tickets
	              	|		ПО РеализацияТоваровУслугУслуги.Ticket = Tickets.Ссылка
	              	|ГДЕ
	              	|	РеализацияТоваровУслугУслуги.КостЦентр <> Tickets.AccountingUnit
	              	|	И РеализацияТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И РеализацияТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА
	              	|	И Tickets.Проведен = ИСТИНА   ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслугУслуги.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Реализация", "Реализация");
		СтруктураРасшифровки.Вставить("Тикет", "Тикет");
		ИсходящиеДанные.Вставить("ТикетИРеализацияМенеджментСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ТикетИРеализацияМенеджментТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

//Добавил РГ-Софт - Иванов Антон - 2009-03-06
//Проверка того, что в реализации и кредит-ноте ревизиты шапки совпадают
Процедура ПроверитьПравилоРеализацияИКредитНота(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Ссылка КАК КредитНота,
		|	РеализацияТоваровУслуг.Сделка КАК Реализация,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Сделка.ИнвойсинговыйЦентр <> РеализацияТоваровУслуг.ИнвойсинговыйЦентр
		|			ТОГДА ""ошибка""
		|		ИНАЧЕ ""ок""
		|	КОНЕЦ КАК ИнвЦентр,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Сделка.ПодразделениеОрганизации <> РеализацияТоваровУслуг.ПодразделениеОрганизации
		|			ТОГДА ""ошибка""
		|		ИНАЧЕ ""ок""
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Сделка.Контрагент <> РеализацияТоваровУслуг.Контрагент
		|			ТОГДА ""ошибка""
		|		ИНАЧЕ ""ок""
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Сделка.ДоговорКонтрагента <> РеализацияТоваровУслуг.ДоговорКонтрагента
		|			ТОГДА ""ошибка""
		|		ИНАЧЕ ""ок""
		|	КОНЕЦ КАК Договор,
		|	РеализацияТоваровУслуг.ИнвойсинговыйЦентр,
		|	РеализацияТоваровУслуг.Ответственный
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	(РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно)
		|			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ)
		|			ИЛИ РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота))
		|	И (РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|			ИЛИ РеализацияТоваровУслуг.Сделка МЕЖДУ &ДатаНач И &ДатаКон)";
		
	Если ЗначениеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И (РеализацияТоваровУслуг.Ответственный = &Ответственный
			|	ИЛИ РеализацияТоваровУслуг.Сделка.Ответственный = &Ответственный)";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);	
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И (РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
			|	ИЛИ РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр)";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|	И (РеализацияТоваровУслуг.Сделка.ИнвойсинговыйЦентр <> РеализацияТоваровУслуг.ИнвойсинговыйЦентр
		|			ИЛИ РеализацияТоваровУслуг.Сделка.ПодразделениеОрганизации <> РеализацияТоваровУслуг.ПодразделениеОрганизации
		|			ИЛИ РеализацияТоваровУслуг.Сделка.Контрагент <> РеализацияТоваровУслуг.Контрагент
		|			ИЛИ РеализацияТоваровУслуг.Сделка.ДоговорКонтрагента <> РеализацияТоваровУслуг.ДоговорКонтрагента)";	
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Реализация", "Реализация");
		СтруктураРасшифровки.Вставить("КредитНота", "КредитНота");
		ИсходящиеДанные.Вставить("РеализацияИКредитНотаСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("РеализацияИКредитНотаТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоДоговорНаРазныеИвойсинговыеЦентры(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр КАК КоличествоИнвойсинговыхЦентров,
	              	|	РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	              	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.ИнвойсинговыйЦентр) КАК ИнвойсинговыйЦентр
	              	|	ИЗ
	              	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|	ГДЕ
	              	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|		И РеализацияТоваровУслуг.ДоговорКонтрагента <> &Пустая
	              	|		И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ  ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|	
	              	|	СГРУППИРОВАТЬ ПО
	              	|		РеализацияТоваровУслуг.ДоговорКонтрагента) КАК ВложенныйЗапрос
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|		ПО ВложенныйЗапрос.ДоговорКонтрагента = РеализацияТоваровУслуг.ДоговорКонтрагента
	              	|ГДЕ
	              	|	ВложенныйЗапрос.ИнвойсинговыйЦентр > 1
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ДоговорКонтрагента,
	              	|	ИнвойсинговыйЦентр" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Пустая", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
		ИсходящиеДанные.Вставить("ДоговорНаРазныеИвойсинговыеЦентрыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ДоговорНаРазныеИвойсинговыеЦентрыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоТикет(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	Tickets.Дата КАК Дата,
	              	|	Tickets.Ссылка КАК Ticket,
	              	|	Tickets.Ответственный КАК Ответственный,
	              	|	Tickets.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	              	|ИЗ
	              	|	Документ.Tickets КАК Tickets
	              	|ГДЕ
	              	|	Tickets.SiebelOrder <> &Пустая
	              	|	И Tickets.Статус <> &Lawson
	              	|	И Tickets.Дата МЕЖДУ &Нач И &Кон
	              	|	И Tickets.ПометкаУдаления = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
						|	И Tickets.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ИнвойсинговыйЦентр,
	              	|	Ответственный,
	              	|	Дата";
	Запрос.УстановитьПараметр("Lawson", Перечисления.TicketsStatuses.Lawson);
	Запрос.УстановитьПараметр("Пустая", Документы.SiebelOrders.ПустаяСсылка());
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", ДатаКон);
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ticket", "Ticket");
		ИсходящиеДанные.Вставить("ТикетСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ТикетТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаКурсаДокументовРеализация(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.РеализацияТоваров КАК ДокументРеализации,
	|	РеализацияТоваровУслуг.КурсДокумента КАК КурсДокумента,
	|	КурсUSD.Курс КАК КурсТребуемый,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|		РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсДокумента,
	|		РеализацияТоваровУслуг.Дата КАК Дата,
	|		РеализацияТоваровУслуг.Сделка.КурсВзаиморасчетов КАК ОснованиеКурсВзаиморасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.ВалютаДокумента = &ВалютаUSD
	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|		И (НЕ(РеализацияТоваровУслуг.ВидОперации = &КредитНотаСторно
	|					ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаОтрицСФ
	|					ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаВнутренняя))
	|		И РеализацияТоваровУслуг.ДоговорКонтрагента.Курс = 0) КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КурсыВалют.Период КАК Период,
	|			КурсыВалют.Курс КАК Курс
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ГДЕ
	|			КурсыВалют.Валюта = &ВалютаUSD
	|			И КурсыВалют.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК КурсUSD
	|		ПО (НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(КурсUSD.Период, ДЕНЬ))
	|ГДЕ
	|	КурсUSD.Курс <> РеализацияТоваровУслуг.КурсДокумента
	|	И РеализацияТоваровУслуг.РеализацияТоваров.ДоговорКонтрагента.Курс = 0";
	
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.РеализацияТоваров,
	|	РеализацияТоваровУслуг.КурсДокумента,
	|	РеализацияТоваровУслуг.ФиксированныйКурс,
	|	РеализацияТоваровУслуг.Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|		РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсДокумента,
	|		РеализацияТоваровУслуг.Дата КАК Дата,
	|		РеализацияТоваровУслуг.ДоговорКонтрагента.Курс КАК ФиксированныйКурс
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.ВалютаДокумента = &ВалютаUSD
	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|		И (НЕ(РеализацияТоваровУслуг.ВидОперации = &КредитНотаСторно
	|					ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаОтрицСФ
	|					ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаВнутренняя))
	|		И РеализацияТоваровУслуг.ДоговорКонтрагента.Курс <> 0) КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.РеализацияТоваров.ДоговорКонтрагента.Курс <> РеализацияТоваровУслуг.КурсДокумента
	|	";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	
	//Изменил РГ-Софт - Иванов Антон - 2009-03-06
	//Сделал так, чтобы Реализации отбирались не только по дате, но и по дате проведения
	//Таким образом, если хотя бы одна из дат попадет в период - то реализация будет проверяться
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.РеализацияТоваров,
	|	РеализацияТоваровУслуг.КурсДокумента,
	|	РеализацияТоваровУслуг.ОснованиеКурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|		РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсДокумента,
	|		РеализацияТоваровУслуг.Дата КАК Дата,
	|		РеализацияТоваровУслуг.Сделка.КурсВзаиморасчетов КАК ОснованиеКурсВзаиморасчетов,
	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	|		РеализацияТоваровУслуг.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		(РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон ИЛИ РеализацияТоваровУслуг.ДатаПроведения МЕЖДУ &ДатаНач И &ДатаКон)
	|		И РеализацияТоваровУслуг.ВалютаДокумента = &ВалютаUSD
	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|		И (РеализацияТоваровУслуг.ВидОперации = &КредитНотаСторно
	|				ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаОтрицСФ
	|				ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаВнутренняя)) КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ОснованиеКурсВзаиморасчетов <> РеализацияТоваровУслуг.КурсДокумента";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст +"
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ВалютаUSD", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("КредитНотаСторно", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
	Запрос.УстановитьПараметр("КредитНотаОтрицСФ", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ);
	Запрос.УстановитьПараметр("КредитНотаВнутренняя", Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументРеализации", "ДокументРеализации");
		ИсходящиеДанные.Вставить("ПроверкаКурсаДокументовРеализацияСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаКурсаДокументовРеализацияТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаКурсаРублевыхДокументовРеализацияВРегистреПродажи(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.РеализацияТоваров КАК ДокументРеализации,
	|	РеализацияТоваровУслуг.КурсДокумента КАК КурсРегистра,
	|	КурсUSD.Курс КАК КурсТребуемый,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Продажи.ДокументРеализации КАК РеализацияТоваров,
	|		Продажи.Курс КАК КурсДокумента,
	|		Продажи.ДокументРеализации.Дата КАК Дата
	|	ИЗ
	|		РегистрНакопления.Продажи КАК Продажи
	|	ГДЕ
	|		Продажи.ДокументРеализации.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И Продажи.ДокументРеализации.ВалютаДокумента = &Рубли
	|		И Продажи.ДокументРеализации.КурсВзаиморасчетов = 1) КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КурсыВалют.Период КАК Период,
	|			КурсыВалют.Курс КАК Курс
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ГДЕ
	|			КурсыВалют.Валюта = &ВалютаSLB
	|			И КурсыВалют.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК КурсUSD
	|		ПО (НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(КурсUSD.Период, ДЕНЬ))
	|ГДЕ
	|	РеализацияТоваровУслуг.РеализацияТоваров.ДоговорКонтрагента.Курс = 0";
	
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст +"
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.РеализацияТоваров.Дата";
	
	
	Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
	Запрос.УстановитьПараметр("Рубли", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));

	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("КурсРегистраЧисло", Новый ОписаниеТипов("Число"));
	Для каждого Строка Из ТаблицаРезультата Цикл
		Строка.КурсРегистраЧисло = Число(Строка.КурсРегистра);
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРезультата.ДокументРеализации,
	|	ТаблицаРезультата.КурсРегистраЧисло КАК КурсРегистра,
	|	ТаблицаРезультата.КурсТребуемый,
	|	ТаблицаРезультата.Дата
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаРезультата КАК ТаблицаРезультата
	|ГДЕ
	|	ТаблицаРезультата.КурсРегистраЧисло <> ТаблицаРезультата.КурсТребуемый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументРеализации,
	|	ВТ.КурсРегистра,
	|	ВТ.КурсТребуемый,
	|	ВТ.Дата
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументРеализации", "ДокументРеализации");
		ИсходящиеДанные.Вставить("ПроверкаКурсаРублевыхДокументовРеализацияВРегистреПродажиСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаКурсаРублевыхДокументовРеализацияВРегистреПродажиТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
КонецПроцедуры



Процедура ПроверитьПравилоПроверкаСовпаденияКурсаДоговораИДокументаРеализации(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсДокумента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Курс КАК КурсДоговора
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И (НЕ(РеализацияТоваровУслуг.ВидОперации = &КредитНотаСторно
	|				ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаОтрицСФ
	|				ИЛИ РеализацияТоваровУслуг.ВидОперации = &КредитНотаВнутренняя))
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.Курс > 0
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.Курс <> РеализацияТоваровУслуг.КурсВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Дата";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.РеализацияТоваров.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("КредитНотаСторно", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
	Запрос.УстановитьПараметр("КредитНотаОтрицСФ", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ);
	Запрос.УстановитьПараметр("КредитНотаВнутренняя", Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументРеализации", "ДокументРеализации");
		ИсходящиеДанные.Вставить("ПроверкаСовпаденияКурсаДоговораИДокументаРеализацииСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаСовпаденияКурсаДоговораИДокументаРеализацииТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахРеалицияТоваровИУслугПоДоговорамВВалюте(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА ""Да""
	|		ИНАЧЕ ""Нет""
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРуб
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.КредитНота = ЛОЖЬ
	|	И (РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				И (РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом <> &Сч62_31
	|					ИЛИ РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам <> &Сч62_32)
	|			ИЛИ (НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)
	|				И (РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом <> &Сч62_21
	|					ИЛИ РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам <> &Сч62_22))";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РеализацияТоваровУслуг.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Дата
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("ВалютаРуб", Справочники.Валюты.НайтиПоКоду("643"));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Сч62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	Запрос.УстановитьПараметр("Сч62_32", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	Запрос.УстановитьПараметр("Сч62_21", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	Запрос.УстановитьПараметр("Сч62_22", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("РеализацияТоваров", "РеализацияТоваров");
		ИсходящиеДанные.Вставить("ПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахРеалицияТоваровИУслугПоДоговорамВВалютеСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахРеалицияТоваровИУслугПоДоговорамВВалютеТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахПлатежноеПоручениеВходящееПоДоговорамВВалюте(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка КАК ДокументППВ,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА ""Да""
	|		ИНАЧЕ ""Нет""
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРуб
	|	И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом <> &Сч62_31
	|					ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам <> &Сч62_32)
	|			ИЛИ (НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)
	|				И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом <> &Сч62_21
	|					ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам <> &Сч62_22))
	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Allocated";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
			|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
						
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("ВалютаРуб", Справочники.Валюты.НайтиПоКоду("643"));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Сч62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	Запрос.УстановитьПараметр("Сч62_32", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	Запрос.УстановитьПараметр("Сч62_21", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	Запрос.УстановитьПараметр("Сч62_22", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументППВ", "ДокументППВ");
		ИсходящиеДанные.Вставить("ПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахПлатежноеПоручениеВходящееПоДоговорамВВалютеСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаСчетовУчетаРасчетовСКонтрагентамиВДокументахПлатежноеПоручениеВходящееПоДоговорамВВалютеТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаСовпаденияКонтрагентаВПлПорВх_иВДокументеИзКомментария(СтрокаПравила) //flp
	Перем ТаблицаНомеровИДатДокументов;
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящее.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручениеВходящее.Контрагент,
	|	ПлатежноеПоручениеВходящее.Контрагент.Код,
	|	ПлатежноеПоручениеВходящее.Контрагент.Наименование,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеВходящее.Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|	ПлатежноеПоручениеВходящее.Контрагент.ИНН
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПлатежноеПоручениеВходящее.Проведен = ИСТИНА
	|	И ПлатежноеПоручениеВходящее.ВидОперации = &ОплатаОтПокупателя
	|	И ПлатежноеПоручениеВходящее.Allocated = ЛОЖЬ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
		|	И ПлатежноеПоручениеВходящее.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = Запрос.Текст +"
		|	И ПлатежноеПоручениеВходящее.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр";
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвойсинговыйЦентр,
	|	Ответственный,
	|	Дата" ;
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ОплатаОтПокупателя", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетали = Результат.Выбрать();
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ПлатежноеПоручение");
	ТаблицаДокументов.Колонки.Добавить("Комментарий");
	ТаблицаДокументов.Колонки.Добавить("НомерДокумента");
	ТаблицаДокументов.Колонки.Добавить("ДатаДокумента");
	ТаблицаДокументов.Колонки.Добавить("Контрагент");
	ТаблицаДокументов.Колонки.Добавить("КонтрагентКод");
	ТаблицаДокументов.Колонки.Добавить("Контрагент2");
	ТаблицаДокументов.Колонки.Добавить("КонтрагентКод2");
	ТаблицаДокументов.Колонки.Добавить("СсылкаНаДокумент");

	Пока ВыборкаДетали.Следующий() Цикл
		НайтиНомерИДатуДокумента(ВыборкаДетали.Комментарий,ТаблицаНомеровИДатДокументов);
		
		Для каждого СтрокаТаблицы Из ТаблицаНомеровИДатДокументов Цикл
			Если СтрокаТаблицы.ВидДокумента = "Счет-фактура" Тогда 
				ВернутьСсылкуНаДокумент("СчетФактураВыданный",ВыборкаДетали,СтрокаТаблицы,ТаблицаДокументов);
		    ИначеЕсли СтрокаТаблицы.ВидДокумента = "Счет" Тогда
				ВернутьСсылкуНаДокумент("СчетНаОплатуПокупателю",ВыборкаДетали,СтрокаТаблицы,ТаблицаДокументов);
			ИначеЕсли СтрокаТаблицы.ВидДокумента = "Договор" Тогда 
				ВернутьСсылкиНаДоговоры(СтрокаТаблицы,ВыборкаДетали,ТаблицаДокументов);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	ТаблицаДокументов.Колонки.Удалить("НомерДокумента");
	ТаблицаДокументов.Колонки.Удалить("ДатаДокумента");
			
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ПлатежноеПоручение", "ПлатежноеПоручение");
		СтруктураРасшифровки.Вставить("СсылкаНаДокумент", "СсылкаНаДокумент");
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		СтруктураРасшифровки.Вставить("Контрагент2", "Контрагент2");
		ИсходящиеДанные.Вставить("ПроверкаСовпаденияКонтрагентаВПлПорВх_иВДокументеИзКомментарияСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПроверкаСовпаденияКонтрагентаВПлПорВх_иВДокументеИзКомментарияТаблицаЗначений", ТаблицаДокументов);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоРазныеAUВоВзаиморасчетах(СтрокаПравила) //Трефиленков Дмитрий, РГ-Софт, 17 июня 2008
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	ВзаиморасчетыСПокупателями.Регистратор КАК Документ
	              	|ИЗ
	              	|	РегистрНакопления.ВзаиморасчетыСПокупателями КАК ВзаиморасчетыСПокупателями
	              	|ГДЕ
	              	|	ВзаиморасчетыСПокупателями.Сделка В
	              	|			(ВЫБРАТЬ
	              	|				Записи.Сделка КАК Сделка
	              	|			ИЗ
	              	|				(ВЫБРАТЬ
	              	|					ВзаиморасчетыСПокупателямиОбороты.Сделка КАК Сделка,
	              	|					КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСПокупателямиОбороты.КостЦентр) КАК КостЦентр
	              	|				ИЗ
	              	|					РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты КАК ВзаиморасчетыСПокупателямиОбороты
	              	|				ГДЕ
	              	|					ВзаиморасчетыСПокупателямиОбороты.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг
	              	|				СГРУППИРОВАТЬ ПО
	              	|								ВзаиморасчетыСПокупателямиОбороты.Сделка
	              	|				) КАК Записи ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|						ВзаиморасчетыСПокупателями.Сделка КАК Сделка,
	              	|						КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСПокупателями.КостЦентр) КАК КостЦентр
	              	|					ИЗ
	              	|						РегистрНакопления.ВзаиморасчетыСПокупателями КАК ВзаиморасчетыСПокупателями
	              	|					ГДЕ
	              	|						ВзаиморасчетыСПокупателями.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	              	|					СГРУППИРОВАТЬ ПО
	              	|										ВзаиморасчетыСПокупателями.Сделка
	              	|					) КАК Документы
	              	|					ПО
	              	|						Записи.Сделка = Документы.Сделка
	              	|							И Записи.КостЦентр > Документы.КостЦентр
	              	|			ГДЕ
	              	|				Записи.Сделка.Дата >= &ДатаНач
	              	|				И ИСТИНА)
	              	|	И ВзаиморасчетыСПокупателями.Регистратор <> ВзаиморасчетыСПокупателями.Сделка";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА","Записи.Сделка.ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр");
		Запрос.УстановитьПараметр("ИнвойсинговыйЦентр", ИнвойсинговыйЦентр);				
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Результат = Запрос.Выполнить();
	
	//ВыборкаДетали = Результат.Выбрать();
	//
	ТаблицаДокументов = Результат.Выгрузить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("РазныеAUВоВзаиморасчетахСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("РазныеAUВоВзаиморасчетахТаблицаЗначений", ТаблицаДокументов);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеПодразделений(СтрокаПравила) //Трефиленков Дмитрий, РГ-Софт, 09 июля 2012
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	РеализацияТоваровУслуг.Ссылка,
	              	|	РеализацияТоваровУслуг.ПодразделениеОрганизации
	              	|ПОМЕСТИТЬ Доки
	              	|ИЗ
	              	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              	|ГДЕ
	              	|	РеализацияТоваровУслуг.ДатаПроведения МЕЖДУ &Нач И &Кон
	              	|	И РеализацияТоваровУслуг.Проведен
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	ПередачаОС.Ссылка,
	              	|	ПередачаОС.ПодразделениеОрганизации
	              	|ИЗ
	              	|	Документ.ПередачаОС КАК ПередачаОС
	              	|ГДЕ
	              	|	ПередачаОС.ДатаПроведения МЕЖДУ &Нач И &Кон
	              	|	И ПередачаОС.Проведен 
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	              	|	НДСЗаписиКнигиПродажОбороты.ПодразделениеОрганизации
	              	|ПОМЕСТИТЬ Записи
	              	|ИЗ
	              	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	              	|			&Нач,
	              	|			,
	              	|			,
	              	|			СчетФактура В
	              	|				(ВЫБРАТЬ
	              	|					доки.ссылка
	              	|				ИЗ
	              	|					доки)) КАК НДСЗаписиКнигиПродажОбороты
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	Доки.Ссылка КАК Документ,
	              	|	Доки.ПодразделениеОрганизации КАК ПодразделениеДокумента,
	              	|	Записи.ПодразделениеОрганизации КАК ПодразделениеКнигиПродаж
	              	|ИЗ
	              	|	Доки КАК Доки
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Записи КАК Записи
	              	|		ПО Доки.Ссылка = Записи.СчетФактура
	              	|			И Доки.ПодразделениеОрганизации <> Записи.ПодразделениеОрганизации";
					
	
	Запрос.УстановитьПараметр("Нач", ДатаНач);
	Запрос.УстановитьПараметр("Кон", КонецДня(ДатаКон));
	Результат = Запрос.Выполнить();
	
	ТаблицаДокументов = Результат.Выгрузить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("СоответствиеПодразделенийСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СоответствиеПодразделенийТаблицаЗначений", ТаблицаДокументов);
	КонецЕсли; 
		
КонецПроцедуры


Процедура НайтиНомерИДатуДокумента(Комментарий,ТаблицаНомеровИДатДокументов)
	//составим массив из подстрок: сколько слов "от", столько и подстрок, 
	//окончанием подстроки является запятая, её помещать в массив не будем
	//её помещать в массив не будем
	ТаблицаНомеровИДатДокументов = Новый ТаблицаЗначений;
	ТаблицаНомеровИДатДокументов.Колонки.Добавить("ПлатежноеПоручение");
	ТаблицаНомеровИДатДокументов.Колонки.Добавить("НомерСтроки");
	ТаблицаНомеровИДатДокументов.Колонки.Добавить("ВидДокумента");
	ТаблицаНомеровИДатДокументов.Колонки.Добавить("НомерДокумента");
	ТаблицаНомеровИДатДокументов.Колонки.Добавить("ДатаДокумента");
	
	Строка = СтрЗаменить(СокрЛП(Комментарий),"от","&");
	ТаблицаПодстрок = Новый ТаблицаЗначений;
	ТаблицаПодстрок.Колонки.Добавить("Подстрока");
	СтрокаПрав = Строка;
	СтрокаЛев = "";
	ФлагЕстьНоваяСтрока = Ложь;
	Пока СтрДлина(СтрокаПрав)>0 Цикл
		ТекСимвол = Лев(СтрокаПрав,1);
		СтрокаЛев = СтрокаЛев + ТекСимвол;
		Если ТекСимвол = "&" Тогда
		    НоваяСтрока = ТаблицаПодстрок.Добавить();
			ФлагЕстьНоваяСтрока = Истина;
		КонецЕсли;
		Если (ТекСимвол = "," ИЛИ СтрДлина(СтрокаПрав) = 1)
			И ФлагЕстьНоваяСтрока = Истина  Тогда
			НоваяСтрока.Подстрока = СокрЛП(?(ТекСимвол = ",",Лев(СтрокаЛев,СтрДлина(СтрокаЛев)-1),СтрокаЛев));
			СтрокаЛев = "";
			ФлагЕстьНоваяСтрока = Ложь;
		КонецЕсли;
		СтрокаПрав = Прав(СтрокаПрав, СтрДлина(СтрокаПрав)-1);
		Если СтрДлина(СтрокаПрав)=0 И ТаблицаПодстрок.Количество()=0 Тогда
			НоваяСтрока = ТаблицаПодстрок.Добавить(); 
			НоваяСтрока.Подстрока = СокрЛП(СтрокаЛев);
		КонецЕсли;
	КонецЦикла;
	
	//теперь разобьем каждую строку таблицы подстрок на номера документов и дату
	//ключевым также будет бывшее слово "от"
	ПредТаблицаНомеровИДатДокументов = ТаблицаНомеровИДатДокументов.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаПодстрок Цикл
		СтрокаПрав = СтрокаТаблицы.Подстрока;
		СтрокаЛев = "";
		Пока СтрДлина(СтрокаПрав)>0 Цикл
			ТекСимвол = Лев(СтрокаПрав,1);
			СтрокаЛев = СтрокаЛев + ТекСимвол;
			Если ТекСимвол = "&" Тогда
			    НоваяСтрока = ПредТаблицаНомеровИДатДокументов.Добавить();
				НоваяСтрока.НомерДокумента = СокрЛП(Лев(СтрокаЛев, СтрДлина(СтрокаЛев)-1));
				НоваяСтрока.ДатаДокумента = СокрЛП(Прав(СтрокаПрав, СтрДлина(СтрокаПрав)-1));
			КонецЕсли;                                          
			СтрокаПрав = Прав(СтрокаПрав, СтрДлина(СтрокаПрав)-1);
			Если СтрДлина(СтрокаПрав)=0 И ПредТаблицаНомеровИДатДокументов.Количество()=0 Тогда
				НоваяСтрока = ПредТаблицаНомеровИДатДокументов.Добавить(); 
				НоваяСтрока.НомерДокумента = СокрЛП(СтрокаЛев);
				НоваяСтрока.ДатаДокумента = "01.01.0001";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Проверим содержимое колонки "НомерДокумента" таблицы ПредТаблицаНомеровИДатДокументов. 
	//Если там несколько номеров, то в таблице ТаблицаНомеровИДатДокументов заведем несколько строк.
	Для каждого СтрокаТаблицы Из ПредТаблицаНомеровИДатДокументов Цикл
		СтрокаПрав = СтрокаТаблицы.НомерДокумента;
		СтрокаЛев = "";
		Пока СтрДлина(СтрокаПрав)>0 Цикл
			ТекСимвол = Лев(СтрокаПрав,1);
			СтрокаЛев = СтрокаЛев + ТекСимвол;
			Если ТекСимвол = "," ИЛИ СтрДлина(СтрокаПрав) = 1 Тогда
			    НоваяСтрока = ТаблицаНомеровИДатДокументов.Добавить();
				НоваяСтрока.НомерДокумента = СокрЛП(?(ТекСимвол = ",",Лев(СтрокаЛев,СтрДлина(СтрокаЛев)-1),СтрокаЛев));
				НоваяСтрока.ДатаДокумента = СтрокаТаблицы.ДатаДокумента;
				СтрокаЛев = "";
			КонецЕсли;                                          
			СтрокаПрав = Прав(СтрокаПрав, СтрДлина(СтрокаПрав)-1);
		КонецЦикла;
	КонецЦикла;
	
	//Заполним колонку НомерСтроки таблицы ТаблицаНомеровИДатДокументов,
	//преобразуем дату в тип даты, от номера оставим только правую часть до первого пробела 
	//или возьмем только правые числа 
	//и заполним вид документа  
	Строка = ВРЕГ(Строка);
	Строка = СтрЗаменить(Строка,"C","С");
	НомерСтроки = 0;
	Для каждого СтрокаТаблицы Из ТаблицаНомеровИДатДокументов Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.НомерДокумента = ВернутьПравыеЦифры(СтрокаТаблицы.НомерДокумента);
		СтрокаТаблицы.ДатаДокумента = ПолучитьДатуДокумента(СтрокаТаблицы.ДатаДокумента);
		Если СтрНайти(Строка, "СЧ")>0 И СтрНайти(Строка, "Ф")>0 Тогда
			ВидДокумента = "Счет-фактура";
		ИначеЕсли СтрНайти(Строка, "СЧ")>0 И СтрНайти(Строка, "Ф")=0 Тогда
			ВидДокумента = "Счет";
		ИначеЕсли СтрНайти(Строка, "ДОГОВ")>0 Тогда
			ВидДокумента = "Договор";
		Иначе 	
			ВидДокумента = "";
		КонецЕсли;
		СтрокаТаблицы.ВидДокумента = ВидДокумента;
	КонецЦикла;	
КонецПроцедуры

Функция ВернутьПравыеЦифры(Текст)
	ЛевЧасть = Текст;
	ПравЧасть = "";
	Продолжим = Ложь;
	Пока СтрДлина(ЛевЧасть)>0 Цикл
		ТекСимвол = Прав(ЛевЧасть,1);
		Если НЕ (ТекСимвол = "-" ИЛИ ТекСимвол = "I" ИЛИ ТекСимвол = "/") Тогда 
			Если ТекСимвол = " " Тогда
				Возврат СокрЛП(ПравЧасть);
			КонецЕсли;
			Если НЕ Продолжим Тогда
				Попытка 
					ТекСимволЧисло = Число(ТекСимвол); 
					Продолжим = Ложь;
				Исключение
					Если СтрДлина(ПравЧасть)>2 Тогда
						Если Лев(ПравЧасть,1) = "-" Тогда
							ПравЧасть = Прав(ПравЧасть, СтрДлина(ПравЧасть)-1);
						КонецЕсли;
						Возврат СокрЛП(ПравЧасть);
					КонецЕсли;
				КонецПопытки;        
			КонецЕсли;
		Иначе
			Продолжим = Истина;
		КонецЕсли;
		ПравЧасть = "" + ТекСимвол + ПравЧасть;
		ЛевЧасть = Лев(ЛевЧасть, СтрДлина(ЛевЧасть)-1);
	КонецЦикла;
	Возврат СокрЛП(ПравЧасть);
КонецФункции     

Функция ПравЧастьДоПервогоПробела(Текст)
	ЛевЧасть = Текст;
	ПравЧасть = "";
	Пока СтрДлина(ЛевЧасть)>0 Цикл
		ТекСимвол = Прав(ЛевЧасть,1);
		Если ТекСимвол = " " Тогда
			Возврат ПравЧасть;
		КонецЕсли;
		ПравЧасть = "" + ТекСимвол + ПравЧасть;
		ЛевЧасть = Лев(ЛевЧасть, СтрДлина(ЛевЧасть)-1);
	КонецЦикла;
	Возврат ПравЧасть;
КонецФункции                 
                           
Функция ПолучитьДатуДокумента(ДатаДокументаТекст)
	Попытка
		День = Число(Лев(ДатаДокументаТекст,2));
		Месяц = Число(Сред(ДатаДокументаТекст,4,2));
        Год = Прав(ДатаДокументаТекст, СтрДлина(ДатаДокументаТекст)-6);
		Если СтрДлина(Год) = 2 Тогда
			Год = "20" + Год;
		КонецЕсли;
		Год = Число(Год);
		ДатаДокументаДата = Дата(Год,Месяц,День);
	Исключение
		ДатаДокументаДата = Дата(1,1,1);
	КонецПопытки;
	Возврат ДатаДокументаДата;	
КонецФункции                 

Процедура ВернутьСсылкиНаДоговоры(СтрокаТаблицы,ВыборкаДетали,ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец.Код КАК КонтрагентКод
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование ПОДОБНО &ДокументНомер
	|	И ДоговорыКонтрагентов.Владелец.Наименование = &КонтрагентНаименование
	|	И ДоговорыКонтрагентов.Владелец.ИНН = &КонтрагентИНН";
	
	Запрос.УстановитьПараметр("ДокументНомер", "%"+СтрокаТаблицы.НомерДокумента+"%");
	Запрос.УстановитьПараметр("КонтрагентНаименование", ВыборкаДетали.КонтрагентНаименование);
	Запрос.УстановитьПараметр("КонтрагентИНН", ВыборкаДетали.КонтрагентИНН);
	
	Результат = Запрос.Выполнить();                                   
	Выборка = Результат.Выбрать();
	ВернутьПустуюТаблицу = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Контрагент = ВыборкаДетали.Контрагент Тогда
		    ВернутьПустуюТаблицу = Истина;
            Прервать;
		КонецЕсли; 
	   НоваяСтрока = ТаблицаДокументов.Добавить();
	   НоваяСтрока.ПлатежноеПоручение = ВыборкаДетали.ПлатежноеПоручение;
	   НоваяСтрока.Контрагент = ВыборкаДетали.Контрагент;
	   НоваяСтрока.КонтрагентКод = ВыборкаДетали.КонтрагентКод;
	   НоваяСтрока.Комментарий = ВыборкаДетали.Комментарий;
	   НоваяСтрока.НомерДокумента = СтрокаТаблицы.НомерДокумента;
	   НоваяСтрока.ДатаДокумента = СтрокаТаблицы.ДатаДокумента;
	   НоваяСтрока.СсылкаНаДокумент = Выборка.Договор;
	   НоваяСтрока.Контрагент2 = Выборка.Контрагент;
	   НоваяСтрока.КонтрагентКод2 = Выборка.КонтрагентКод;
   КонецЦикла;
   Если ВернутьПустуюТаблицу Тогда
       ТаблицаДокументов.Очистить();
   КонецЕсли; 
   
КонецПроцедуры

Процедура ВернутьСсылкуНаДокумент(СтрВидДокумента,ВыборкаДетали,СтрокаТаблицы,ТаблицаДокументов)
	Документ = Неопределено;
	Реализация = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Докум.Ссылка,
	|	Докум.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	Докум.ДоговорКонтрагента.Владелец.Код КАК КонтрагентКод
	|ИЗ
	|	Документ." + СтрВидДокумента + " КАК Докум
	|ГДЕ
	|	Докум.Дата МЕЖДУ &Дата1 И &Дата2
	|	И Докум.Номер ПОДОБНО &Номер
	|	И Докум.ДоговорКонтрагента.Владелец.ИНН = &КонтрагентИНН";
	
	Запрос.УстановитьПараметр("Номер", "%"+СтрокаТаблицы.НомерДокумента+"%");
	Запрос.УстановитьПараметр("КонтрагентИНН", ВыборкаДетали.КонтрагентИНН);
	Если СтрокаТаблицы.ДатаДокумента = Дата(1,1,1) Тогда
		Запрос.УстановитьПараметр("Дата1", НачалоГода(ДобавитьМесяц(ТекущаяДата(),-12)));
		Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	Иначе	
		Запрос.УстановитьПараметр("Дата1", НачалоДня(СтрокаТаблицы.ДатаДокумента));
		Запрос.УстановитьПараметр("Дата2", КонецДня(СтрокаТаблицы.ДатаДокумента));
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Контрагент = ВыборкаДетали.Контрагент Тогда
		   НоваяСтрока = ТаблицаДокументов.Добавить();
		   НоваяСтрока.ПлатежноеПоручение = ВыборкаДетали.ПлатежноеПоручение;
		   НоваяСтрока.Контрагент = ВыборкаДетали.Контрагент;
		   НоваяСтрока.КонтрагентКод = ВыборкаДетали.КонтрагентКод;
		   НоваяСтрока.Комментарий = ВыборкаДетали.Комментарий;
		   НоваяСтрока.НомерДокумента = СтрокаТаблицы.НомерДокумента;
		   НоваяСтрока.ДатаДокумента = СтрокаТаблицы.ДатаДокумента;
		   НоваяСтрока.СсылкаНаДокумент = Выборка.Ссылка;
		   НоваяСтрока.Контрагент2 = Выборка.Контрагент;
		   НоваяСтрока.КонтрагентКод2 = Выборка.КонтрагентКод;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры                 


//Книга покупок

Процедура ПроверитьПравилоНЕПравильныеДаты(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК РегистрацияПП,
	              	|	РегистрацияППСчетаФактуры.НомерСтроки,
	              	|	РегистрацияППСчетаФактуры.Ссылка.CashCode.ПлатежныйЦентр КАК CashCodeПлатежныйЦентр,
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ответственный КАК Ответственный
	              	|ИЗ
	              	|	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	              	|ГДЕ
	              	|	(НЕ(ГОД(РегистрацияППСчетаФактуры.ДатаРегистрацииСФ) - ГОД(РегистрацияППСчетаФактуры.Ссылка.ДатаПП) МЕЖДУ -1 И 1))
	              	|	И РегистрацияППСчетаФактуры.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И ВЫБОР
	              	|			КОГДА РегистрацияППСчетаФактуры.ДатаКвери ЕСТЬ NULL 
	              	|				ТОГДА РегистрацияППСчетаФактуры.ДатаРегистрацииСФ <= РегистрацияППСчетаФактуры.ДатаКвери
	              	|						И РегистрацияППСчетаФактуры.ДатаРегистрацииПрихода <= РегистрацияППСчетаФактуры.ДатаКвери
	              	|			ИНАЧЕ ИСТИНА
	              	|		КОНЕЦ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	CashCodeПлатежныйЦентр,
	              	|	Ответственный" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("РегистрацияПП", "РегистрацияПП");
		ИсходящиеДанные.Вставить("НЕПравильныеДатыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕПравильныеДатыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНЕПравильныйНомерСчета(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              	|	РегистрацияППСчетаФактуры.Ссылка.CashCode.ПлатежныйЦентр КАК CashCodeПлатежныйЦентр,
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК РегистрацияПП,
	              	|	РегистрацияППСчетаФактуры.НомерСтроки,
	              	|	РегистрацияППСчетаФактуры.НомерСчета,
	              	|	РегистрацияППСчетаФактуры.СФСсылка.НомерСчета КАК НомерСчетаВСФ,
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ответственный КАК Ответственный
	              	|ИЗ
	              	|	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	              	|ГДЕ
	              	|	РегистрацияППСчетаФактуры.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И (НЕ РегистрацияППСчетаФактуры.СФСсылка ЕСТЬ NULL )
	              	|	И РегистрацияППСчетаФактуры.НомерСчета <> РегистрацияППСчетаФактуры.СФСсылка.НомерСчета
	              	|	И РегистрацияППСчетаФактуры.СтавкаНДС <> &СтавкаНДС ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	CashCodeПлатежныйЦентр,
	              	|	Ответственный" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("РегистрацияПП", "РегистрацияПП");
		ИсходящиеДанные.Вставить("НЕПравильныйНомерСчетаСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕПравильныйНомерСчетаТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНЕЗаполненаДата(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              	|	РегистрацияППСчетаФактуры.Ссылка.CashCode.ПлатежныйЦентр КАК CashCodeПлатежныйЦентр,
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК Документ,
	              	|	РегистрацияППСчетаФактуры.НомерСтроки,
	              	|	РегистрацияППСчетаФактуры.Ссылка.Ответственный КАК Ответственный
	              	|ИЗ
	              	|	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	              	|ГДЕ
	              	|	РегистрацияППСчетаФактуры.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И (РегистрацияППСчетаФактуры.ДатаСф ЕСТЬ NULL 
	              	|			ИЛИ РегистрацияППСчетаФактуры.ДатаПрихода ЕСТЬ NULL )";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	ЗакрытиеПредоплаты.CashCode.ПлатежныйЦентр,
	              	|	ЗакрытиеПредоплаты.Ссылка,
	              	|	NULL,
	              	|	NULL
	              	|ИЗ
	              	|	Документ.ЗакрытиеПредоплаты КАК ЗакрытиеПредоплаты
	              	|ГДЕ
	              	|	ЗакрытиеПредоплаты.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И (ЗакрытиеПредоплаты.ДатаСФ ЕСТЬ NULL 
	              	|			ИЛИ ЗакрытиеПредоплаты.ДатаПрихода ЕСТЬ NULL ) 	              	
					|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	CashCodeПлатежныйЦентр,
	              	|	Ответственный" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НЕЗаполненаДатаСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕЗаполненаДатаТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНЕСовпадениеСумм(СтрокаПравила)
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              	|	ВложенныйЗапрос.Документ,
	              	|	ВложенныйЗапрос.CashCodeПлатежныйЦентр КАК CashCodeПлатежныйЦентр,
	              	|	ВложенныйЗапрос.НомерСчета,
	              	|	ВложенныйЗапрос.СтавкаНДС,
	              	|	ВложенныйЗапрос.СуммаСчетаРуб КАК СуммаСчетаРуб,
	              	|	ВложенныйЗапрос1.СуммаСФ КАК СуммаСФ,
	              	|	ВложенныйЗапрос.Документ.Ответственный КАК Ответственный,
	              	|	ВложенныйЗапрос1.Валюта КАК Валюта
	              	|ИЗ
	              	|	(ВЫБРАТЬ
	              	|		РегистрацияППСчета.Ссылка.Ссылка КАК Документ,
	              	|		РегистрацияППСчета.Ссылка.CashCode.ПлатежныйЦентр КАК CashCodeПлатежныйЦентр,
	              	|		РегистрацияППСчета.НомерСчета КАК НомерСчета,
	              	|		РегистрацияППСчета.СтавкаНДС КАК СтавкаНДС,
	              	|		СУММА(РегистрацияППСчета.СуммаСчетаРуб) КАК СуммаСчетаРуб
	              	|	ИЗ
	              	|		Документ.РегистрацияПП.Счета КАК РегистрацияППСчета
	              	|	ГДЕ
	              	|		РегистрацияППСчета.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|		И РегистрацияППСчета.Предоплата = ЛОЖЬ ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчета.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|	
	              	|	СГРУППИРОВАТЬ ПО
	              	|		РегистрацияППСчета.НомерСчета,
	              	|		РегистрацияППСчета.СтавкаНДС,
	              	|		РегистрацияППСчета.Ссылка.Ссылка,
	              	|		РегистрацияППСчета.Ссылка.CashCode.ПлатежныйЦентр) КАК ВложенныйЗапрос
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|			РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК Ссылка,
	              	|			РегистрацияППСчетаФактуры.НомерСчета КАК НомерСчета,
	              	|			РегистрацияППСчетаФактуры.СтавкаНДС КАК СтавкаНДС,
	              	|			СУММА(РегистрацияППСчетаФактуры.СуммаСФРуб) КАК СуммаСФ,
	              	|			РегистрацияППСчетаФактуры.ВалютаСФ КАК Валюта
	              	|		ИЗ
	              	|			Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	              	|		ГДЕ
	              	|			РегистрацияППСчетаФактуры.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон  ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|		
	              	|		СГРУППИРОВАТЬ ПО
	              	|			РегистрацияППСчетаФактуры.Ссылка.Ссылка,
	              	|			РегистрацияППСчетаФактуры.НомерСчета,
	              	|			РегистрацияППСчетаФактуры.СтавкаНДС,
	              	|			РегистрацияППСчетаФактуры.ВалютаСФ) КАК ВложенныйЗапрос1
	              	|		ПО ВложенныйЗапрос.Документ = ВложенныйЗапрос1.Ссылка
	              	|			И ВложенныйЗапрос.НомерСчета = ВложенныйЗапрос1.НомерСчета
	              	|			И ВложенныйЗапрос.СтавкаНДС = ВложенныйЗапрос1.СтавкаНДС
	              	|ГДЕ
	              	|	ВложенныйЗапрос.СуммаСчетаРуб <> ВложенныйЗапрос1.СуммаСФ
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ВложенныйЗапрос.Документ,
	              	|	ВложенныйЗапрос.CashCodeПлатежныйЦентр,
	              	|	ВложенныйЗапрос.НомерСчета,
	              	|	ВложенныйЗапрос.СтавкаНДС,
	              	|	ВложенныйЗапрос.СуммаСчетаРуб,
	              	|	ВложенныйЗапрос1.СуммаСФ,
	              	|	ВложенныйЗапрос.Документ.Ответственный,
	              	|	ВложенныйЗапрос1.Валюта
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Ссылка,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.CashCode.ПлатежныйЦентр,
	              	|	ЗакрытиеПредоплатыСчета.НомерСчета,
	              	|	ЗакрытиеПредоплатыСчета.СтавкаНДС,
	              	|	ЗакрытиеПредоплатыСчета.СуммаРуб,
	              	|	ВложенныйЗапрос.Сумма,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Ответственный,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Валюта
	              	|ИЗ
	              	|	Документ.ЗакрытиеПредоплаты.Счета КАК ЗакрытиеПредоплатыСчета
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|			ЗакрытиеПредоплатыНДС.Ссылка КАК Ссылка,
	              	|			ЗакрытиеПредоплатыНДС.СтавкаНДС КАК СтавкаНДС,
	              	|			СУММА(ЗакрытиеПредоплатыНДС.Сумма) КАК Сумма
	              	|		ИЗ
	              	|			Документ.ЗакрытиеПредоплаты.НДС КАК ЗакрытиеПредоплатыНДС
	              	|		
	              	|		СГРУППИРОВАТЬ ПО
	              	|			ЗакрытиеПредоплатыНДС.Ссылка,
	              	|			ЗакрытиеПредоплатыНДС.СтавкаНДС) КАК ВложенныйЗапрос
	              	|		ПО ЗакрытиеПредоплатыСчета.Ссылка = ВложенныйЗапрос.Ссылка
	              	|			И ЗакрытиеПредоплатыСчета.СтавкаНДС = ВложенныйЗапрос.СтавкаНДС
	              	|ГДЕ
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	              	|	И ВЫБОР
	              	|			КОГДА ВложенныйЗапрос.СтавкаНДС ЕСТЬ NULL 
	              	|				ТОГДА ЗакрытиеПредоплатыСчета.СтавкаНДС <> ЗакрытиеПредоплатыСчета.Ссылка.СтавкаНДС
	              	|			ИНАЧЕ ЗакрытиеПредоплатыСчета.СуммаРуб <> ВложенныйЗапрос.Сумма
	              	|		КОНЕЦ  ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И ЗакрытиеПредоплатыСчета.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					
	Запрос.Текст = Запрос.Текст + "
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Ссылка,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.CashCode.ПлатежныйЦентр,
	              	|	ЗакрытиеПредоплатыСчета.НомерСчета,
	              	|	ЗакрытиеПредоплатыСчета.СтавкаНДС,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Ответственный,
	              	|	ЗакрытиеПредоплатыСчета.СуммаРуб,
	              	|	ЗакрытиеПредоплатыСчета.Ссылка.Валюта,
	              	|	ВложенныйЗапрос.Сумма
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	CashCodeПлатежныйЦентр,
	              	|	Ответственный" ;
					
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НЕСовпадениеСуммСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕСовпадениеСуммТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНЕСовпадениеПодразделенийВРегистреИРегистрацииПП(СтрокаПравила)
	Запрос = Новый Запрос ();
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК РегистрацияПП,
	                |	РегистрацияППСчетаФактуры.Ссылка.ДатаПП,
	                |	РегистрацияППСчетаФактуры.НомерСФ,
	                |	РегистрацияППСчетаФактуры.НомерСтроки,
	                |	РегистрацияППСчетаФактуры.Подразделение КАК ПодразделениеВРегистрацииПП,
	                |	НДСПокупкиУпр.Подразделение КАК ПодразделениеВРегистре
	                |ИЗ
	                |	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПокупкиУпр КАК НДСПокупкиУпр
	                |		ПО РегистрацияППСчетаФактуры.НомерСФ = НДСПокупкиУпр.НомерСФ
	                |			И НДСПокупкиУпр.Регистратор = РегистрацияППСчетаФактуры.Ссылка
	                |			И РегистрацияППСчетаФактуры.НомерСчета = НДСПокупкиУпр.НомерСчета
	                |			И РегистрацияППСчетаФактуры.СтавкаНДС = НДСПокупкиУпр.СтавкаНДС
	                |ГДЕ
	                |	РегистрацияППСчетаФактуры.Ссылка.ДатаПП МЕЖДУ &ДатаНач И &ДатаКон
	                |	И НДСПокупкиУпр.Подразделение <> РегистрацияППСчетаФактуры.Подразделение ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;					

	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
					 
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("РегистрацияПП", "РегистрацияПП");
		ИсходящиеДанные.Вставить("НЕСовпадениеПодразделенийВРегистреИРегистрацииППСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕСовпадениеПодразделенийВРегистреИРегистрацииППТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли;
	 
КонецПроцедуры

Процедура ПроверитьПравилоНЕСовпадениеПодразделенийВРегистреИЗакрытииПредоплаты(СтрокаПравила)
	Запрос = Новый Запрос ();
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ЗакрытиеПредоплаты.Ссылка КАК ЗакрытиеПредоплаты,
	                |	ЗакрытиеПредоплаты.Подразделение КАК ПодразделениеВЗакритииПредоплаты,
	                |	НДСПокупкиУпр.Подразделение КАК ПодразделениеВРегистре
	                |ИЗ
	                |	РегистрНакопления.НДСПокупкиУпр КАК НДСПокупкиУпр
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПредоплаты КАК ЗакрытиеПредоплаты
	                |		ПО НДСПокупкиУпр.Регистратор = ЗакрытиеПредоплаты.Ссылка
	                |ГДЕ
	                |	ЗакрытиеПредоплаты.ДатаРегистрацииСФ МЕЖДУ &ДатаНач И &ДатаКон
	                |	И ЗакрытиеПредоплаты.Подразделение <> НДСПокупкиУпр.Подразделение" ;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
					 
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ЗакрытиеПредоплаты", "ЗакрытиеПредоплаты");
		ИсходящиеДанные.Вставить("НЕСовпадениеПодразделенийВРегистреИЗакрытииПредоплатыСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕСовпадениеПодразделенийВРегистреИЗакрытииПредоплатыТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли;
КонецПРоцедуры

Процедура ПроверитьПравилоЗадвоенныйНомерВаучера(СтрокаПравила)
	Запрос = Новый Запрос ();
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	НДСПокупкиУпр.НомерВаучера КАК НомерВаучера,
	                |	НДСПокупкиУпр.CashCode,
	                |	НДСПокупкиУпр.Регистратор.Ответственный КАК Ответственный,
	                |	ВложенныйЗапрос.КоличествоРегистраторов КАК КоличествоРегистраторов,
	                |	НДСПокупкиУпр.Регистратор КАК Регистратор
	                |ИЗ
	                |	РегистрНакопления.НДСПокупкиУпр КАК НДСПокупкиУпр
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |			НДСПокупкиУпр2.НомерВаучера КАК НомерВаучера,
	                |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДСПокупкиУпр2.Регистратор) КАК КоличествоРегистраторов
	                |		ИЗ
	                |			РегистрНакопления.НДСПокупкиУпр КАК НДСПокупкиУпр2
	                |		ГДЕ
	                |			НДСПокупкиУпр2.Период МЕЖДУ &ДатаНач И &ДатаКон
	                |			И НДСПокупкиУпр2.Событие = &Событие
	                |			И (НЕ НДСПокупкиУпр2.Регистратор ССЫЛКА Документ.СчетФактураАктУпр)
	                |		
	                |		СГРУППИРОВАТЬ ПО
	                |			НДСПокупкиУпр2.НомерВаучера
	                |		
	                |		ИМЕЮЩИЕ
	                |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДСПокупкиУпр2.Регистратор) > 1) КАК ВложенныйЗапрос
	                |		ПО НДСПокупкиУпр.НомерВаучера = ВложенныйЗапрос.НомерВаучера
	                |ГДЕ
	                |	НДСПокупкиУпр.Период МЕЖДУ &ДатаНач И &ДатаКон
	                |	И НДСПокупкиУпр.Событие = &Событие
	                |	И (НЕ НДСПокупкиУпр.Регистратор ССЫЛКА Документ.СчетФактураАктУпр)  ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И НДСПокупкиУпр.Регистратор.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерВаучера,
	                |	КоличествоРегистраторов,
	                |	Регистратор" ;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
					 
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		ИсходящиеДанные.Вставить("ЗадвоенныйНомерВаучераСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ЗадвоенныйНомерВаучераТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПравилоНЕСовпадениеСуммыСФИНакладной(СтрокаПравила)
	Запрос = Новый Запрос ();
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	РегистрацияППСчетаФактуры.Ссылка КАК Документ,
	                |	РегистрацияППСчетаФактуры.Ссылка.CashCode,
	                |	РегистрацияППСчетаФактуры.Ссылка.Ответственный,
	                |	РегистрацияППСчетаФактуры.НомерСФ,
	                |	РегистрацияППСчетаФактуры.НомерСтроки,
	                |	РегистрацияППСчетаФактуры.СуммаСФ,
	                |	РегистрацияППСчетаФактуры.СуммаПрихода,
	                |	РегистрацияППСчетаФактуры.СуммаСФРуб,
	                |	РегистрацияППСчетаФактуры.СуммаПриходаРуб
	                |ИЗ
	                |	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
	                |ГДЕ
	                |	(РегистрацияППСчетаФактуры.СуммаСФ <> РегистрацияППСчетаФактуры.СуммаПрихода
	                |			ИЛИ РегистрацияППСчетаФактуры.СуммаСФРуб <> РегистрацияППСчетаФактуры.СуммаПриходаРуб)
	                |	И РегистрацияППСчетаФактуры.Ссылка.ДатаПП МЕЖДУ &ДатаНач И &ДатаКон  ";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И РегистрацияППСчетаФактуры.Ссылка.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗакрытиеПредоплаты.Ссылка,
	                |	ЗакрытиеПредоплаты.CashCode,
	                |	ЗакрытиеПредоплаты.Ответственный,
	                |	NULL,
	                |	NULL,
	                |	ЗакрытиеПредоплаты.Сумма,
	                |	ЗакрытиеПредоплаты.СуммаПрихода,
	                |	NULL,
	                |	NULL
	                |ИЗ
	                |	Документ.ЗакрытиеПредоплаты КАК ЗакрытиеПредоплаты
	                |ГДЕ
	                |	ЗакрытиеПредоплаты.Сумма <> ЗакрытиеПредоплаты.СуммаПрихода
	                |	И ЗакрытиеПредоплаты.ДатаРегистрацииСФ МЕЖДУ &ДатаНач И &ДатаКон";
					
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
						|	И ЗакрытиеПредоплаты.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
					 
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НЕСовпадениеСуммыСФИНакладнойСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НЕСовпадениеСуммыСФИНакладнойТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПравилоНеСоответствиеТипаЗатратИБухСчета1С(СтрокаПравила)
	Массив = Новый Массив (1,2);
	Массив[0][0] = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Массив[0][1] = Справочники.ОписаниеЗатрат.НайтиПоНаименованию("ND");
		
	ЕстьОшибки = Ложь;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для ф = 0 По Массив.ВГраница() Цикл
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	РегистрацияППСчетаФактуры.Ссылка.Ссылка КАК Документ,
		               |	РегистрацияППСчетаФактуры.Ссылка.CashCode,
		               |	РегистрацияППСчетаФактуры.Ссылка.Ответственный,
		               |	РегистрацияППСчетаФактуры.НомерСтроки,
		               |	РегистрацияППСчетаФактуры.БухСчет,
		               |	РегистрацияППСчетаФактуры.БухСчет1С,
		               |	РегистрацияППСчетаФактуры.ОписаниеЗатрат
		               |ИЗ
		               |	Документ.РегистрацияПП.СчетаФактуры КАК РегистрацияППСчетаФактуры
		               |ГДЕ
		               |	РегистрацияППСчетаФактуры.БухСчет1С <> &БухСчет1С
		               |	И РегистрацияППСчетаФактуры.ОписаниеЗатрат = &ОписаниеЗатрат
		               |	И РегистрацияППСчетаФактуры.Ссылка.ДатаПП МЕЖДУ &ДатаНач И &ДатаКон
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗакрытиеПредоплаты.Ссылка,
		               |	ЗакрытиеПредоплаты.CashCode,
		               |	ЗакрытиеПредоплаты.Ответственный,
		               |	NULL,
		               |	ЗакрытиеПредоплаты.БухСчет,
		               |	ЗакрытиеПредоплаты.БухСчет1С,
		               |	ЗакрытиеПредоплаты.ОписаниеЗатрат
		               |ИЗ
		               |	Документ.ЗакрытиеПредоплаты КАК ЗакрытиеПредоплаты
		               |ГДЕ
		               |	ЗакрытиеПредоплаты.БухСчет1С <> &БухСчет1С
		               |	И ЗакрытиеПредоплаты.ОписаниеЗатрат = &ОписаниеЗатрат
		               |	И ЗакрытиеПредоплаты.ДатаРегистрацииСФ МЕЖДУ &ДатаНач И &ДатаКон";
		Запрос.УстановитьПараметр("БухСчет1С", Массив[ф][0]);
		Запрос.УстановитьПараметр("ОписаниеЗатрат", Массив[ф][1]);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		ПромежуточнаяТаблицаЗначений = Результат.Выгрузить();
		Если ф = 0 тогда
			ТаблицаЗначений = ПромежуточнаяТаблицаЗначений.Скопировать();
		Иначе
			Для Каждого Строка из ПромежуточнаяТаблицаЗначений Цикл
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СтрокаПравила.ОбнаруженыОшибки  = ЕстьОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НеСоответствиеТипаЗатратИБухСчета1ССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НеСоответствиеТипаЗатратИБухСчета1СТаблицаЗначений", ТаблицаЗначений);
	КонецЕсли;
		
КонецПроцедуры


//Основные средства
Процедура ПроверитьПравилоФорматVIN(СтрокаПравила)
	
	Запрос = Новый Запрос();
	
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеСредства.Ссылка КАК ОС,
		|	ОсновныеСредства.НомерПаспорта,
		|	ОсновныеСредства.Подразделение КАК Подразделение,
		|	ОсновныеСредства.Код,
		|	""Запрещенные символы"" КАК Описание,
		|	ПервоначальныеСведенияСрезПоследних.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведенияСрезПоследних.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ОсновныеСредства.Поставщик,
		|	ОсновныеСредства.КодПоставщика,
		|	ОсновныеСредства.НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	ОсновныеСредства.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведенияСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних КАК ПервоначальныеСведенияСрезПоследних
		|		ПО (ПервоначальныеСведенияСрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ОсновныеСредства.Ссылка = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ОсновныеСредства.НомерПаспорта <> """"
		|	И ОсновныеСредства.Автотранспорт = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение" ;
	Иначе
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеСредства.Ссылка КАК ОС,
		|	ОсновныеСредства.НомерПаспорта,
		|	ОсновныеСредства.Подразделение КАК Подразделение,
		|	ОсновныеСредства.Код,
		|	""Запрещенные символы"" КАК Описание,
		|	ПервоначальныеСведенияСрезПоследних.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведенияСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних КАК ПервоначальныеСведенияСрезПоследних
		|		ПО (ПервоначальныеСведенияСрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка)
		|ГДЕ
		|	ОсновныеСредства.НомерПаспорта <> """"
		|	И ОсновныеСредства.Автотранспорт = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение" ;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	ТаблицаОшибок = ТаблицаОС.Скопировать();
	ТаблицаОшибок.Очистить();
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если Не СтрокаНаписанаРусскимиИлиЛатинскимиИЦифрами("i"+СокрЛП(СтрокаОС.НомерПаспорта)) Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки,СтрокаОС);
			СтрокаОшибки.Описание = "Запрещенные символы";
		КонецЕсли;
		Если СтрДлина(СокрЛП(СтрокаОС.НомерПаспорта)) <> 17 Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки,СтрокаОС);
			СтрокаОшибки.Описание = "Не 17 символов";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", "ОС");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчету", "ДокументПринятияКУчету");
		ИсходящиеДанные.Вставить("ФорматVINСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ФорматVINТаблицаЗначений",ТаблицаОшибок);
	КонецЕсли; 
		
КонецПроцедуры

//Проверяет, написана ли строка цифрами и только русскими и латинскими буквами  
//
// Параметры:
//  СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		Истина - строка состоит из допустимых символов
//		Ложь - в строке встречаются недопустимые символы
// 
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СтрокаНаписанаРусскимиИлиЛатинскимиИЦифрами(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	Русские = 0;     
	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		ПервыйСимвол = КодСимвола(Лев(СтрокаПараметр,1)); 
		Если  (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168) Тогда
			Русские = 1;
		КонецЕсли;
	КонецЕсли;
	
	СписокДопустимыхЗначений = Новый СписокЗначений;
	СписокДопустимыхЗначений.Добавить(184);   // ё
	СписокДопустимыхЗначений.Добавить(168);   // Ё
	СписокДопустимыхЗначений.Добавить(45);   //  "-"

	Для Сч = 1 По КоличествоСимволов Цикл
		Код = КодСимвола(Сред(СтрокаПараметр,Сч));   
		// Большие латинские буквы: 65 - 90
		// Маленькие латинские буквы: 97 - 122
		// Русские буквы: 192 и больше
		// Цифры: 48 - 57
		
		//русские:
		Если (Русские = 1) Тогда
			Если (СписокДопустимыхЗначений.НайтиПоЗначению(Код) = Неопределено) и (Код < 192) и Не ((Код >= 48 И Код <= 57)) Тогда
				Возврат 0;
			КонецЕсли;

		// латинские:	
		Иначе 
			Если (Код <> 45) и 
			((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122)) и Не ((Код >= 48 И Код <= 57)) Тогда    
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат 1;

КонецФункции // РегламентированнаяОтчетность.СтрокаНаписанаРусскимиИлиЛатинскими()

Процедура ПроверитьПравилоЗаведениеПередачОСПоПодготовкам(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодготовкаКПередачеОС.Ссылка КАК ПодготовкаКПередачеОС,
	|	ДокументПередачаОС.ПередачаОС КАК ПередачаОС,
	|	ВЫБОР
	|		КОГДА (НЕ ДокументПередачаОС.ПередачаОС.Проведен)
	|			ТОГДА ""Нет""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПроведенДокументПередачаОС,
	|	ЕСТЬNULL(ДокументПередачаОС.Ответственный, ПодготовкаКПередачеОС.Ответственный) КАК Ответственный
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС КАК ПодготовкаКПередачеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПередачаОС.Ссылка КАК ПередачаОС,
	|			ПередачаОС.Проведен КАК ПередачаОСПроведен,
	|			ПередачаОС.Ответственный КАК Ответственный
	|		ИЗ
	|			Документ.ПередачаОС КАК ПередачаОС
	|		ГДЕ
	|			ПередачаОС.Дата МЕЖДУ &ДатаНач И &ТекДата) КАК ДокументПередачаОС
	|		ПО ПодготовкаКПередачеОС.Ссылка = ДокументПередачаОС.ПередачаОС.ДокПодготовкаКПередачеОС
	|ГДЕ
	|	ПодготовкаКПередачеОС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПодготовкаКПередачеОС.Проведен = ИСТИНА
	|	И (ДокументПередачаОС.ПередачаОС ЕСТЬ NULL 
	|			ИЛИ (НЕ ДокументПередачаОС.ПередачаОСПроведен))";

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()));

	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ПодготовкаКПередачеОС", "ПодготовкаКПередачеОС");
		СтруктураРасшифровки.Вставить("ПередачаОС", "ПередачаОС");
		ИсходящиеДанные.Вставить("ЗаведениеПередачОСПоПодготовкамСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ЗаведениеПередачОСПоПодготовкамТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСтоимостьБух(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ > 0
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ <= 20000";
	
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ > 0
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ <= 20000";
	
	КонецЕсли; 

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		ИсходящиеДанные.Вставить("СтоимостьБухСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СтоимостьБухТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСтоимостьНал(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ > 0
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ <= 20000";
	
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ > 0
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ <= 20000";
	
	КонецЕсли; 

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		ИсходящиеДанные.Вставить("СтоимостьНалСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СтоимостьНалТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСтоимостьБух0(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ = 0";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ = 0";
	КонецЕсли; 

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчету", "ДокументПринятияКУчету");
		ИсходящиеДанные.Вставить("СтоимостьБух0СтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СтоимостьБух0ТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСтоимостьНал0(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ = 0";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ = 0";
	КонецЕсли; 

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчету", "ДокументПринятияКУчету");
		ИсходящиеДанные.Вставить("СтоимостьНал0СтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СтоимостьНал0ТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСрокБух(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокБУ, 0) КАК СрокПолезногоИспользованияБУ,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.Регистратор,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор.Ответственный,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокБУ, 0),
		|	ПервоначальныеСведения.ОсновноеСредство.Код,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное,
		|	ПервоначальныеСведения.Период";
    Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокБУ, 0) КАК СрокПолезногоИспользованияБУ,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.Регистратор,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор.Ответственный,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокБУ, 0)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	ТабРезультат =Результат.Выгрузить() ;
	Результаты = ТабРезультат.Скопировать();
	Результаты.Очистить();
	
	Для Каждого СтрокаРез из ТабРезультат Цикл
		Группа =СтрокаРез.АмортизационнаяГруппа;
	Если  Группа= Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда
		НачалоГр = 11; КонецГр = 24;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда
		НачалоГр = 24; КонецГр = 36;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда
		НачалоГр = 36; КонецГр = 60;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
		НачалоГр = 60; КонецГр = 84;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда
		НачалоГр = 84; КонецГр = 120;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда
		НачалоГр = 120; КонецГр = 180;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда
		НачалоГр = 180; КонецГр = 240;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда
		НачалоГр = 240; КонецГр = 300;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда
		НачалоГр = 300; КонецГр = 360;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда
		НачалоГр = 360; КонецГр = 99999999999999;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа Тогда
		НачалоГр = -1; КонецГр = 99999999999999;
	Иначе
		НачалоГр=0; КонецГр=0;
	КонецЕсли;
	
	Если не((СтрокаРез.СрокПолезногоИспользованияБУ >НачалоГр) и (СтрокаРез.СрокПолезногоИспользованияБУ <=КонецГр)) Тогда
		
		НовСтрока = Результаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаРез) ;
		
	КонецЕсли;
	
	КонецЦикла;
	СтрокаПравила.ОбнаруженыОшибки  = ?(Результаты.Количество()=0,Ложь,Истина);
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчету", "ДокументПринятияКУчету");
		ИсходящиеДанные.Вставить("СрокБухСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СрокБухТаблицаЗначений", Результаты );
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСрокНал(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Код КАК Код,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокНУ, 0) КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик КАК Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.Регистратор,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор.Ответственный,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокНУ, 0),
		|	ПервоначальныеСведения.ОсновноеСредство.Код,
		|	ПервоначальныеСведения.ОсновноеСредство.Поставщик,
		|	ПервоначальныеСведения.ОсновноеСредство.КодПоставщика,
		|	ПервоначальныеСведения.ОсновноеСредство.НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное,
		|	ПервоначальныеСведения.Период";
    Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокНУ, 0) КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведения.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК ПервоначальныеСведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведения.Период МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.Регистратор,
		|	ПервоначальныеСведения.ОсновноеСредство.АмортизационнаяГруппа,
		|	ПервоначальныеСведения.Регистратор.Ответственный,
		|	ЕСТЬNULL(НачислениеАмортизации.СрокНУ, 0)";
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Результат = Запрос.Выполнить();                            
	ТабРезультат =Результат.Выгрузить() ;
	Результаты = ТабРезультат.Скопировать();
	Результаты.Очистить();
	
	Для Каждого СтрокаРез из ТабРезультат Цикл
		Группа =СтрокаРез.АмортизационнаяГруппа;
	Если  Группа= Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда
		НачалоГр = 11; КонецГр = 24;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда
		НачалоГр = 24; КонецГр = 36;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда
		НачалоГр = 36; КонецГр = 60;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
		НачалоГр = 60; КонецГр = 84;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда
		НачалоГр = 84; КонецГр = 120;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда
		НачалоГр = 120; КонецГр = 180;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда
		НачалоГр = 180; КонецГр = 240;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда
		НачалоГр = 240; КонецГр = 300;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда
		НачалоГр = 300; КонецГр = 360;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда
		НачалоГр = 360; КонецГр = 99999999999999;
	ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа Тогда
		НачалоГр = -1; КонецГр = 99999999999999;
	Иначе	
		НачалоГр=0; КонецГр=0;	
	КонецЕсли;
	
	Если не((СтрокаРез.СрокПолезногоИспользованияНУ >НачалоГр) и (СтрокаРез.СрокПолезногоИспользованияНУ <=КонецГр)) Тогда
		
		НовСтрока = Результаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаРез) ;
		
	КонецЕсли;
	
	КонецЦикла;
	СтрокаПравила.ОбнаруженыОшибки  = ?(Результаты.Количество()=0,Ложь,Истина);

	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчету", "ДокументПринятияКУчету");
		ИсходящиеДанные.Вставить("СрокНалСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СрокНалТаблицаЗначений", Результаты);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКостЦентр(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|	ОсновныеСредства.Код,
		|	ОсновныеСредства.КостЦентр,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументУчета,
		|	ПервоначальныеСведенияСрезПоследних.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведенияСрезПоследних.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	ОсновныеСредства.НомерНакладной,
		|	ОсновныеСредства.Поставщик,
		|	ОсновныеСредства.КодПоставщика,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	ОсновныеСредства.НаименованиеПолное КАК ПолноеНаименование,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|			И (МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ) КАК ПервоначальныеСведенияСрезПоследних
		|		ПО ОсновныеСредства.Ссылка = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО ОсновныеСредства.Ссылка = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ОсновныеСредства.КостЦентр = ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Дата", КонецДня(ДатаКон));
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|	ОсновныеСредства.КостЦентр,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументУчета,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка
		|ГДЕ
		|	ОсновныеСредства.КостЦентр = ЗНАЧЕНИЕ(Справочник.КостЦентры.ПустаяСсылка)";
	КонецЕсли;
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументУчета", "ДокументУчета");
		ИсходящиеДанные.Вставить("КостЦентрСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КостЦентрТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПустаяЗаписьРегистрацииВГАИ(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеОС.ОсновноеСредство,
		|	СостояниеОС.Код,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументУчета,
		|	СостояниеОС.Состояние,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Поставщик,
		|	СостояниеОС.КодПоставщика,
		|	СостояниеОС.НомерНакладной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	СостояниеОС.ПолноеНаименование,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|		МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние,
		|		СостоянияОСОрганизаций.ОсновноеСредство.Код КАК Код,
		|		СостоянияОСОрганизаций.ОсновноеСредство.Поставщик КАК Поставщик,
		|		СостоянияОСОрганизаций.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|		СостоянияОСОрганизаций.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|		СостоянияОСОрганизаций.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|				И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|	ГДЕ
		|		(НЕ СостоянияОСОрганизаций.Состояние = &СнятоСУчета)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияВГАИ.СрезПоследних(&Дата, ) КАК РегистрацияВГАИСрезПоследних
		|		ПО СостояниеОС.ОсновноеСредство = РегистрацияВГАИСрезПоследних.ОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО СостояниеОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО СостояниеОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	РегистрацияВГАИСрезПоследних.Локация = &ПустаяЛокация
		|
		|СГРУППИРОВАТЬ ПО
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный,
		|	СостояниеОС.ОсновноеСредство,
		|	СостояниеОС.Состояние,
		|	СостояниеОС.Код,
		|	СостояниеОС.Поставщик,
		|	СостояниеОС.КодПоставщика,
		|	СостояниеОС.НомерНакладной,
		|	СостояниеОС.ПолноеНаименование,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументУчета,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство
		|			И СостоянияОСОрганизаций.ДатаСостояния = ВложенныйЗапрос.ДатаСостояния
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияВГАИ.СрезПоследних(&Дата, ) КАК РегистрацияВГАИСрезПоследних
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = РегистрацияВГАИСрезПоследних.ОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	(НЕ СостоянияОСОрганизаций.Состояние = &СнятоСУчета)
		|	И РегистрацияВГАИСрезПоследних.Локация = &ПустаяЛокация
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияОСОрганизаций.ОсновноеСредство,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный";
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПустаяЛокация", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументУчета", "ДокументУчета");
		ИсходящиеДанные.Вставить("ПустаяЗаписьРегистрацииВГАИСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПустаяЗаписьРегистрацииВГАИТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНачислениеАмортизацииПоАрендованнымОС(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код КАК Код,
		|	СтоимостьАмортизацияОСОбороты.СтоимостьБУОборот,
		|	СтоимостьАмортизацияОСОбороты.СтоимостьНУОборот,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.Регистратор КАК ДокументПринятияКУчету,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.Период КАК ДатаПринятияКУчету,
		|	СостояниеОС.Состояние,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Поставщик КАК Поставщик,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.КодПоставщика КАК КодПоставщика,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.НаименованиеПолное КАК ПолноеНаименование,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.Регистратор.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&ДатаНач, &ДатаКон, Период, ОсновноеСредство.АрендованноеОС) КАК СтоимостьАмортизацияОСОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(СостоянияОСОрганизаций.Состояние) КАК Состояние
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СостоянияОСОрганизаций.ОсновноеСредство) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|				ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|					И ВложенныйЗапрос.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СостоянияОСОрганизаций.ОсновноеСредство) КАК СостояниеОС
		|		ПО СтоимостьАмортизацияОСОбороты.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО СтоимостьАмортизацияОСОбороты.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПервых КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых
		|		ПО СтоимостьАмортизацияОСОбороты.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.ОсновноеСредство";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код КАК Код,
		|	СтоимостьАмортизацияОСОбороты.АмортизацияБУОборот,
		|	СтоимостьАмортизацияОСОбороты.АмортизацияНУОборот
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&ДатаНач, &ДатаКон, Период, ОсновноеСредство.АрендованноеОС) КАК СтоимостьАмортизацияОСОбороты";
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументУчета", "ДокументУчета");
		ИсходящиеДанные.Вставить("НачислениеАмортизацииПоАрендованнымОССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НачислениеАмортизацииПоАрендованнымОСТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоОтрицательныеОстаткиОборудование(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Декларация,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.AU,
	|	ВложенныйЗапрос.НомерСтрокиГТД,
	|	ВложенныйЗапрос.СуммаОстаток,
	|	ВложенныйЗапрос.КоличествоОстаток,
	|	ВложенныйЗапрос.AU.TaxRegistration КАК Регистрация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборудованиеОстатки.Декларация КАК Декларация,
	|		ОборудованиеОстатки.Номенклатура КАК Номенклатура,
	|		ОборудованиеОстатки.AU КАК AU,
	|		ОборудованиеОстатки.НомерСтрокиГТД КАК НомерСтрокиГТД,
	|		ОборудованиеОстатки.СуммаОстаток КАК СуммаОстаток,
	|		ОборудованиеОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Оборудование.Остатки КАК ОборудованиеОстатки
	|	ГДЕ
	|		(ОборудованиеОстатки.СуммаОстаток < 0
	|				ИЛИ ОборудованиеОстатки.КоличествоОстаток < 0)) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистрация";

	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		ИсходящиеДанные.Вставить("ОтрицательныеОстаткиОборудованиеСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ОтрицательныеОстаткиОборудованиеТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоПустойСтатусОС(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Если РасширенноеКоличествоПолей Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОсновноеСредство,
		|	ВложенныйЗапрос.Код,
		|	ВложенныйЗапрос.ДокументПоступления,
		|	ВложенныйЗапрос.Поставщик,
		|	ВложенныйЗапрос.КодПоставщика,
		|	ВложенныйЗапрос.НомерНакладной,
		|	ВложенныйЗапрос.ПолноеНаименование,
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|		ОсновныеСредства.Код КАК Код,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументПоступления,
		|		ОсновныеСредства.Поставщик КАК Поставщик,
		|		ОсновныеСредства.КодПоставщика КАК КодПоставщика,
		|		ОсновныеСредства.НомерНакладной КАК НомерНакладной,
		|		ОсновныеСредства.НаименованиеПолное КАК ПолноеНаименование,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор.Дата КАК Дата
		|	ИЗ
		|		Справочник.ОсновныеСредства КАК ОсновныеСредства
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|			ПО ОсновныеСредства.Ссылка = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|	ГДЕ
		|		(НЕ ОсновныеСредства.ПометкаУдаления)) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОсновноеСредство,
		|	ВложенныйЗапрос.Код,
		|	ВложенныйЗапрос.ДокументПоступления,
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|		ОсновныеСредства.Код КАК Код,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор КАК ДокументПоступления,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор.Ответственный КАК Ответственный,
		|		ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор.Дата КАК Дата
		|	ИЗ
		|		Справочник.ОсновныеСредства КАК ОсновныеСредства
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|			ПО ОсновныеСредства.Ссылка = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|	ГДЕ
		|		(НЕ ОсновныеСредства.ПометкаУдаления)) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО ВложенныйЗапрос.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата";
    КонецЕсли;
	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		СтруктураРасшифровки.Вставить("ДокументПоступления", "ДокументПоступления");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("ПустойСтатусОССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПустойСтатусОСТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНачислениеАмортизацииБУ(СтрокаПравила)

	МассивДат = Новый Массив;
	Дата1 = НачалоМесяца(ДатаНач);
	Пока Дата1 <= НачалоМесяца(ДатаКон) Цикл
	    МассивДат.Добавить(Дата1);
		Дата1 = ДобавитьМесяц(Дата1, 1);
	КонецЦикла; 
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТЗ.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ТребовалосьНачислятьАмортизацию", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("АмортизацияНачислялась", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого Дата Из МассивДат Цикл
	
		 Запрос = Новый Запрос;
		 Запрос.УстановитьПараметр("Дата", Дата);
		 Запрос.УстановитьПараметр("Дата2", КонецМесяца(Дата));
		 
		 
		 Запрос.Текст = "ВЫБРАТЬ
		 |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.ОсновноеСредство, НачислениеАмортизацииСрезПоследних.ОсновноеСредство) КАК ОсновноеСредство,
		 |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.ОсновноеСредство.Код, НачислениеАмортизацииСрезПоследних.ОсновноеСредство.Код) КАК Код,
		 |	ВЫБОР
		 |		КОГДА (НЕ НачислениеАмортизацииСрезПоследних.НачислятьБУ ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА НачислениеАмортизацииСрезПоследних.НачислятьБУ
		 |							И СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток - СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток > 0
		 |						ТОГДА ИСТИНА
		 |					ИНАЧЕ ЛОЖЬ
		 |				КОНЕЦ
		 |		ИНАЧЕ ЛОЖЬ
		 |	КОНЕЦ КАК ТребовалосьНачислятьАмортизацию
		 |ПОМЕСТИТЬ ТребовалосьНачислять
		 |ИЗ
		 |	РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, (НЕ ОсновноеСредство.АрендованноеОС)) КАК СтоимостьАмортизацияОСОстатки
		 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, (НЕ ОсновноеСредство.АрендованноеОС)) КАК НачислениеАмортизацииСрезПоследних
		 |		ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
		 |ГДЕ
		 |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачислениеАмортизацииСрезПоследних.ДатаИзмененияБУ, МЕСЯЦ), МЕСЯЦ, 1), МЕСЯЦ, НачислениеАмортизацииСрезПоследних.СрокБУ) > &Дата
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код КАК Код,
		 |	МАКСИМУМ(ВЫБОР
		 |			КОГДА СтоимостьАмортизацияОСОбороты.АмортизацияБУПриход > 0
		 |				ТОГДА ВЫБОР
		 |						КОГДА СтоимостьАмортизацияОСОбороты.Регистратор ССЫЛКА Документ.НачислениеАмортизации
		 |							ТОГДА ИСТИНА
		 |						ИНАЧЕ ЛОЖЬ
		 |					КОНЕЦ
		 |			ИНАЧЕ ЛОЖЬ
		 |		КОНЕЦ) КАК АмортизацияНачислялась
		 |ПОМЕСТИТЬ Начислялась
		 |ИЗ
		 |	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&Дата, &Дата2, Регистратор, ) КАК СтоимостьАмортизацияОСОбороты
		 |ГДЕ
		 |	СтоимостьАмортизацияОСОбороты.АмортизацияБУПриход > 0
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ЕСТЬNULL(Начислялась.ОсновноеСредство, ТребовалосьНачислять.ОсновноеСредство) КАК ОсновноеСредство,
		 |	ЕСТЬNULL(Начислялась.Код, ТребовалосьНачислять.Код) КАК Код,
		 |	ВЫБОР
		 |		КОГДА (НЕ ТребовалосьНачислять.ТребовалосьНачислятьАмортизацию ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА ТребовалосьНачислять.ТребовалосьНачислятьАмортизацию
		 |						ТОГДА ""да""
		 |					ИНАЧЕ ""нет""
		 |				КОНЕЦ
		 |		ИНАЧЕ ""нет""
		 |	КОНЕЦ КАК ТребовалосьНачислятьАмортизацию,
		 |	ВЫБОР
		 |		КОГДА (НЕ Начислялась.АмортизацияНачислялась ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА Начислялась.АмортизацияНачислялась
		 |						ТОГДА ""да""
		 |					ИНАЧЕ ""нет""
		 |				КОНЕЦ
		 |		ИНАЧЕ ""нет""
		 |	КОНЕЦ КАК АмортизацияНачислялась
		 |ПОМЕСТИТЬ ОбъединеннаяТаблица
		 |ИЗ
		 |	ТребовалосьНачислять КАК ТребовалосьНачислять
		 |		ПОЛНОЕ СОЕДИНЕНИЕ Начислялась КАК Начислялась
		 |		ПО ТребовалосьНачислять.ОсновноеСредство = Начислялась.ОсновноеСредство
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ОбъединеннаяТаблица.ОсновноеСредство,
		 |	ОбъединеннаяТаблица.Код,
		 |	ОбъединеннаяТаблица.ТребовалосьНачислятьАмортизацию,
		 |	ОбъединеннаяТаблица.АмортизацияНачислялась,
		 |	&Дата КАК Период
		 |ИЗ
		 |	ОбъединеннаяТаблица КАК ОбъединеннаяТаблица
		 |ГДЕ
		 |	ОбъединеннаяТаблица.ТребовалосьНачислятьАмортизацию <> ОбъединеннаяТаблица.АмортизацияНачислялась";
		 
		 Результат = Запрос.Выполнить();
		 ТаблицаЗапроса = Результат.Выгрузить();
		 
		 Для каждого Строка Из ТаблицаЗапроса Цикл
		      НоваяСтрока = ТЗ.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		 КонецЦикла; 
	 КонецЦикла; 
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТЗ.ОсновноеСредство,
	 |	ТЗ.Код,
	 |	ТЗ.Период,
	 |	ТЗ.ТребовалосьНачислятьАмортизацию,
	 |	ТЗ.АмортизацияНачислялась
	 |ПОМЕСТИТЬ ВТ
	 |ИЗ
	 |	&ТЗ КАК ТЗ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ.ОсновноеСредство,
	 |	ВТ.Код КАК Код,
	 |	ВТ.Период КАК Период,
	 |	ВТ.ТребовалосьНачислятьАмортизацию,
	 |	ВТ.АмортизацияНачислялась
	 |ИЗ
	 |	ВТ КАК ВТ
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ОсновноеСредство,
	 |	Период";
	 
	 Запрос.УстановитьПараметр("ТЗ", ТЗ);
	 
	 Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(3,"СрокНачисления", Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из ТЗ Цикл
	    СтрокаТЗ.СрокНачисления = Формат(СтрокаТЗ.Период, "ДФ=ММММ") + " " + Формат(СтрокаТЗ.Период, "ДФ=гггг");
	КонецЦикла; 
	ТЗ.Колонки.Удалить(2);
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		ИсходящиеДанные.Вставить("НачислениеАмортизацииБУСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НачислениеАмортизацииБУТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоНачислениеАмортизацииНУ(СтрокаПравила)
	
	МассивДат = Новый Массив;
	Дата1 = НачалоМесяца(ДатаНач);
	Пока Дата1 <= НачалоМесяца(ДатаКон) Цикл
	    МассивДат.Добавить(Дата1);
		Дата1 = ДобавитьМесяц(Дата1, 1);
	КонецЦикла; 
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТЗ.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ТребовалосьНачислятьАмортизацию", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("АмортизацияНачислялась", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого Дата Из МассивДат Цикл
	
		 Запрос = Новый Запрос;
		 Запрос.УстановитьПараметр("Дата", Дата);
		 Запрос.УстановитьПараметр("Дата2", КонецМесяца(Дата));
		 
		 
		 Запрос.Текст = "ВЫБРАТЬ
		 |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.ОсновноеСредство, НачислениеАмортизацииСрезПоследних.ОсновноеСредство) КАК ОсновноеСредство,
		 |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.ОсновноеСредство.Код, НачислениеАмортизацииСрезПоследних.ОсновноеСредство.Код) КАК Код,
		 |	ВЫБОР
		 |		КОГДА (НЕ НачислениеАмортизацииСрезПоследних.НачислятьНУ ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА НачислениеАмортизацииСрезПоследних.НачислятьНУ
		 |							И СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток - СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток > 0
		 |						ТОГДА ИСТИНА
		 |					ИНАЧЕ ЛОЖЬ
		 |				КОНЕЦ
		 |		ИНАЧЕ ЛОЖЬ
		 |	КОНЕЦ КАК ТребовалосьНачислятьАмортизацию
		 |ПОМЕСТИТЬ ТребовалосьНачислять
		 |ИЗ
		 |	РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, (НЕ ОсновноеСредство.АрендованноеОС)) КАК СтоимостьАмортизацияОСОстатки
		 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, (НЕ ОсновноеСредство.АрендованноеОС)) КАК НачислениеАмортизацииСрезПоследних
		 |		ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
		 |ГДЕ
		 |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачислениеАмортизацииСрезПоследних.ДатаВводаНУ, МЕСЯЦ), МЕСЯЦ, 1), МЕСЯЦ, НачислениеАмортизацииСрезПоследних.СрокНУ) > &Дата
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код КАК Код,
		 |	МАКСИМУМ(ВЫБОР
		 |			КОГДА СтоимостьАмортизацияОСОбороты.АмортизацияНУПриход > 0
		 |				ТОГДА ВЫБОР
		 |						КОГДА СтоимостьАмортизацияОСОбороты.Регистратор ССЫЛКА Документ.НачислениеАмортизации
		 |							ТОГДА ИСТИНА
		 |						ИНАЧЕ ЛОЖЬ
		 |					КОНЕЦ
		 |			ИНАЧЕ ЛОЖЬ
		 |		КОНЕЦ) КАК АмортизацияНачислялась
		 |ПОМЕСТИТЬ Начислялась
		 |ИЗ
		 |	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&Дата, &Дата2, Регистратор, ) КАК СтоимостьАмортизацияОСОбороты
		 |ГДЕ
		 |	СтоимостьАмортизацияОСОбороты.АмортизацияНУПриход > 0
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		 |	СтоимостьАмортизацияОСОбороты.ОсновноеСредство.Код
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ЕСТЬNULL(Начислялась.ОсновноеСредство, ТребовалосьНачислять.ОсновноеСредство) КАК ОсновноеСредство,
		 |	ЕСТЬNULL(Начислялась.Код, ТребовалосьНачислять.Код) КАК Код,
		 |	ВЫБОР
		 |		КОГДА (НЕ ТребовалосьНачислять.ТребовалосьНачислятьАмортизацию ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА ТребовалосьНачислять.ТребовалосьНачислятьАмортизацию
		 |						ТОГДА ""да""
		 |					ИНАЧЕ ""нет""
		 |				КОНЕЦ
		 |		ИНАЧЕ ""нет""
		 |	КОНЕЦ КАК ТребовалосьНачислятьАмортизацию,
		 |	ВЫБОР
		 |		КОГДА (НЕ Начислялась.АмортизацияНачислялась ЕСТЬ NULL )
		 |			ТОГДА ВЫБОР
		 |					КОГДА Начислялась.АмортизацияНачислялась
		 |						ТОГДА ""да""
		 |					ИНАЧЕ ""нет""
		 |				КОНЕЦ
		 |		ИНАЧЕ ""нет""
		 |	КОНЕЦ КАК АмортизацияНачислялась
		 |ПОМЕСТИТЬ ОбъединеннаяТаблица
		 |ИЗ
		 |	ТребовалосьНачислять КАК ТребовалосьНачислять
		 |		ПОЛНОЕ СОЕДИНЕНИЕ Начислялась КАК Начислялась
		 |		ПО ТребовалосьНачислять.ОсновноеСредство = Начислялась.ОсновноеСредство
		 |
		 |ИНДЕКСИРОВАТЬ ПО
		 |	ОсновноеСредство
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ОбъединеннаяТаблица.ОсновноеСредство,
		 |	ОбъединеннаяТаблица.Код,
		 |	ОбъединеннаяТаблица.ТребовалосьНачислятьАмортизацию,
		 |	ОбъединеннаяТаблица.АмортизацияНачислялась,
		 |	&Дата КАК Период
		 |ИЗ
		 |	ОбъединеннаяТаблица КАК ОбъединеннаяТаблица
		 |ГДЕ
		 |	ОбъединеннаяТаблица.ТребовалосьНачислятьАмортизацию <> ОбъединеннаяТаблица.АмортизацияНачислялась";
		 
		 Результат = Запрос.Выполнить();
		 ТаблицаЗапроса = Результат.Выгрузить();
		 
		 Для каждого Строка Из ТаблицаЗапроса Цикл
		      НоваяСтрока = ТЗ.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		 КонецЦикла; 
	 КонецЦикла; 
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТЗ.ОсновноеСредство,
	 |	ТЗ.Код,
	 |	ТЗ.Период,
	 |	ТЗ.ТребовалосьНачислятьАмортизацию,
	 |	ТЗ.АмортизацияНачислялась
	 |ПОМЕСТИТЬ ВТ
	 |ИЗ
	 |	&ТЗ КАК ТЗ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ.ОсновноеСредство,
	 |	ВТ.Код КАК Код,
	 |	ВТ.Период КАК Период,
	 |	ВТ.ТребовалосьНачислятьАмортизацию,
	 |	ВТ.АмортизацияНачислялась
	 |ИЗ
	 |	ВТ КАК ВТ
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ОсновноеСредство,
	 |	Период";
	 
	 Запрос.УстановитьПараметр("ТЗ", ТЗ);
	 
	 Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(3,"СрокНачисления", Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из ТЗ Цикл
	    СтрокаТЗ.СрокНачисления = Формат(СтрокаТЗ.Период, "ДФ=ММММ") + " " + Формат(СтрокаТЗ.Период, "ДФ=гггг");
	КонецЦикла; 
	ТЗ.Колонки.Удалить(2);
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОсновноеСредство", "ОсновноеСредство");
		ИсходящиеДанные.Вставить("НачислениеАмортизацииНУСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("НачислениеАмортизацииНУТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКоличествоОСБольшеКоличестваОборудованияВДекларации(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Декларация КАК Декларация,
	|	ВложенныйЗапрос.Оборудование,
	|	ВложенныйЗапрос.КоличествоОборудования КАК КоличествоОборудования,
	|	ВложенныйЗапрос.ПринятиеКУчетуОС КАК ДокументПринятияКУчетуОС,
	|	ВложенныйЗапрос.КоличествоОсновныхСредств КАК КоличествоОсновныхСредств,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДекларацииСостав.Ссылка КАК Декларация,
	|		ДекларацииСостав.Ссылка.Дата КАК Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Оборудование,
	|		ДекларацииСостав.Количество КАК КоличествоОборудования,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка КАК ПринятиеКУчетуОС,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство) КАК КоличествоОсновныхСредств,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Декларации.Состав КАК ДекларацииСостав
	|			ПО ПринятиеКУчетуОСОсновныеСредства.Ссылка.Декларация = ДекларацииСостав.Ссылка
	|				И (ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.Номенклатура).Код = ДекларацииСостав.КодПродукта
	|					ИЛИ ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.Номенклатура).Артикул = ДекларацииСостав.КодПродукта)
	|	ГДЕ
	|		ДекларацииСостав.Ссылка.Проведен
	|		И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Проведен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДекларацииСостав.Количество,
	|		ДекларацииСостав.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка,
	|		ДекларацииСостав.Ссылка.Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоОсновныхСредств > ВложенныйЗапрос.КоличествоОборудования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Дата";

	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,15);
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		СтруктураРасшифровки.Вставить("Оборудование", "Оборудование");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчетуОС", "ДокументПринятияКУчетуОС");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваОборудованияВДекларацииСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваОборудованияВДекларацииТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКоличествоОСБольшеКоличестваFAВДекларацииССоответствующимНаименованием(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Декларация КАК Декларация,
	|	ВложенныйЗапрос.Оборудование,
	|	ВложенныйЗапрос.КоличествоОборудования КАК КоличествоОборудования,
	|	ВложенныйЗапрос.ПринятиеКУчетуОС КАК ДокументПринятияКУчетуОС,
	|	ВложенныйЗапрос.КоличествоОсновныхСредств КАК КоличествоОсновныхСредств,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДекларацииСостав.Ссылка КАК Декларация,
	|		ДекларацииСостав.Ссылка.Дата КАК Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Оборудование,
	|		СУММА(ДекларацииСостав.Количество) КАК КоличествоОборудования,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка КАК ПринятиеКУчетуОС,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство) КАК КоличествоОсновныхСредств,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Декларации.Состав КАК ДекларацииСостав
	|			ПО (ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.Номенклатура).Наименование = ВЫРАЗИТЬ(ДекларацииСостав.Описание КАК Справочник.Номенклатура).Наименование
	|					ИЛИ ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.НоменклатураИмпорт).Наименование = ВЫРАЗИТЬ(ДекларацииСостав.Описание КАК Справочник.НоменклатураИмпорт).Наименование)
	|				И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Декларация = ДекларацииСостав.Ссылка
	|	ГДЕ
	|		ДекларацииСостав.Ссылка.Проведен
	|		И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Проведен
	|		И ДекларацииСостав.Тип = &ТипFA
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДекларацииСостав.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка,
	|		ДекларацииСостав.Ссылка.Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоОсновныхСредств > ВложенныйЗапрос.КоличествоОборудования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Дата";

	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ТипFA", Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA"));
	
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,15);
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		СтруктураРасшифровки.Вставить("Оборудование", "Оборудование");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчетуОС", "ДокументПринятияКУчетуОС");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAВДекларацииССоответствующимНаименованиемСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAВДекларацииССоответствующимНаименованиемТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКоличествоОСБольшеКоличестваFAВДекларации(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Декларация КАК Декларация,
	|	ВложенныйЗапрос.КоличествоОборудования КАК КоличествоОборудования,
	|	ВложенныйЗапрос.ПринятиеКУчетуОС КАК ДокументПринятияКУчетуОС,
	|	ВложенныйЗапрос.КоличествоОсновныхСредств КАК КоличествоОсновныхСредств,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДекларацииСостав.Ссылка КАК Декларация,
	|		ДекларацииСостав.Ссылка.Дата КАК Дата,
	|		СУММА(ДекларацииСостав.Количество) КАК КоличествоОборудования,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка КАК ПринятиеКУчетуОС,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство) КАК КоличествоОсновныхСредств,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Декларации.Состав КАК ДекларацииСостав
	|			ПО ПринятиеКУчетуОСОсновныеСредства.Ссылка.Декларация = ДекларацииСостав.Ссылка
	|	ГДЕ
	|		ДекларацииСостав.Ссылка.Проведен
	|		И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Проведен
	|		И ДекларацииСостав.Тип = &ТипFA
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДекларацииСостав.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка,
	|		ДекларацииСостав.Ссылка.Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоОсновныхСредств > ВложенныйЗапрос.КоличествоОборудования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Дата";

	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ТипFA", Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA"));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"));
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		СтруктураРасшифровки.Вставить("Оборудование", "Оборудование");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчетуОС", "ДокументПринятияКУчетуОС");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAВДекларацииСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAВДекларацииТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоКоличествоОСБольшеКоличестваFAПоИнвойсу(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Декларация КАК Декларация,
	|	ВложенныйЗапрос.НомерИнвойса,
	|	ВложенныйЗапрос.Оборудование,
	|	ВложенныйЗапрос.КоличествоОборудования КАК КоличествоОборудования,
	|	ВложенныйЗапрос.ПринятиеКУчетуОС КАК ДокументПринятияКУчетуОС,
	|	ВложенныйЗапрос.КоличествоОсновныхСредств КАК КоличествоОсновныхСредств,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДекларацииСостав.Ссылка КАК Декларация,
	|		ПОДСТРОКА(ДекларацииСостав.НомерИнвойса, 1, 10) КАК НомерИнвойса,
	|		ДекларацииСостав.Ссылка.Дата КАК Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Оборудование,
	|		СУММА(ДекларацииСостав.Количество) КАК КоличествоОборудования,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка КАК ПринятиеКУчетуОС,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство) КАК КоличествоОсновныхСредств,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Декларации.Состав КАК ДекларацииСостав
	|			ПО (ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.Номенклатура).Наименование = ВЫРАЗИТЬ(ДекларацииСостав.Описание КАК Справочник.Номенклатура).Наименование
	|					ИЛИ ВЫРАЗИТЬ(ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Справочник.НоменклатураИмпорт).Наименование = ВЫРАЗИТЬ(ДекларацииСостав.Описание КАК Справочник.НоменклатураИмпорт).Наименование)
	|				И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Декларация = ДекларацииСостав.Ссылка
	|	ГДЕ
	|		ДекларацииСостав.Ссылка.Проведен
	|		И ПринятиеКУчетуОСОсновныеСредства.Ссылка.Проведен
	|		И ДекларацииСостав.Тип = &ТипFA
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДекларацииСостав.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка,
	|		ДекларацииСостав.Ссылка.Дата,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный,
	|		ПОДСТРОКА(ДекларацииСостав.НомерИнвойса, 1, 10)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоОсновныхСредств > ВложенныйЗапрос.КоличествоОборудования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Дата";

	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ТипFA", Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA"));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,5);
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		СтруктураРасшифровки.Вставить("Оборудование", "Оборудование");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчетуОС", "ДокументПринятияКУчетуОС");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAПоИнвойсуСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("КоличествоОСБольшеКоличестваFAПоИнвойсуТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоСуммаПринятияКУчетуОСНеСоответствуетСуммеОплатыПоPO(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ДокументОплаты,
	|	ВложенныйЗапрос.РО КАК РО,
	|	ВложенныйЗапрос.Оборудование,
	|	ВложенныйЗапрос.ПринятиеКУчетуОС КАК ДокументПринятияКУчетуОС,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыОплатыFA.ДокументОплаты КАК ДокументОплаты,
	|		ПринятиеКУчетуОС.Ссылка.РО КАК РО,
	|		ПринятиеКУчетуОС.Ссылка.Номенклатура КАК Оборудование,
	|		ПринятиеКУчетуОС.Ссылка КАК ПринятиеКУчетуОС,
	|		ПринятиеКУчетуОС.Ссылка.Ответственный КАК Ответственный,
	|		ДокументыОплатыFA.ДатаОплаты КАК ДатаОплаты,
	|		СУММА(ДокументыОплатыFA.Сумма) КАК Сумма,
	|		СУММА(ПринятиеКУчетуОС.Ссылка.СтоимостьБУ) КАК СтоимостьБУ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОборудованиеЛокальное.Регистратор КАК ДокументОплаты,
	|			ОборудованиеЛокальное.Период КАК ДатаОплаты,
	|			ОборудованиеЛокальное.РО КАК РО,
	|			СУММА(ОборудованиеЛокальное.Сумма) КАК Сумма
	|		ИЗ
	|			РегистрНакопления.ОборудованиеЛокальное КАК ОборудованиеЛокальное
	|		ГДЕ
	|			ОборудованиеЛокальное.Регистратор ССЫЛКА Документ.РегистрацияПП
	|			И (НЕ ОборудованиеЛокальное.РО = """")
	|			И (НЕ ОборудованиеЛокальное.РО = ""non PO"")
	|			И (НЕ ОборудованиеЛокальное.РО = ""nonPO"")
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОборудованиеЛокальное.РО,
	|			ОборудованиеЛокальное.Период,
	|			ОборудованиеЛокальное.Регистратор
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОборудованиеЛокальное.Регистратор,
	|			ОборудованиеЛокальное.Период,
	|			ОборудованиеЛокальное.РО,
	|			СУММА(ОборудованиеЛокальное.Сумма)
	|		ИЗ
	|			РегистрНакопления.ОборудованиеЛокальное КАК ОборудованиеЛокальное
	|		ГДЕ
	|			ОборудованиеЛокальное.Регистратор ССЫЛКА Документ.ЗакрытиеПредоплаты
	|			И (НЕ ОборудованиеЛокальное.РО = """")
	|			И (НЕ ОборудованиеЛокальное.РО = ""non PO"")
	|			И (НЕ ОборудованиеЛокальное.РО = ""nonPO"")
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОборудованиеЛокальное.Период,
	|			ОборудованиеЛокальное.РО,
	|			ОборудованиеЛокальное.Регистратор) КАК ДокументыОплатыFA
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|			ПО ДокументыОплатыFA.РО = ПринятиеКУчетуОС.РО
	|	ГДЕ
	|		ПринятиеКУчетуОС.Ссылка.Проведен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПринятиеКУчетуОС.Ссылка,
	|		ПринятиеКУчетуОС.Ссылка.Номенклатура,
	|		ПринятиеКУчетуОС.Ссылка.Ответственный,
	|		ДокументыОплатыFA.ДокументОплаты,
	|		ДокументыОплатыFA.ДатаОплаты,
	|		ПринятиеКУчетуОС.Ссылка.РО) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокументыОплатыFA.РО КАК РО
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВложенныйЗапрос.РО КАК РО,
	|				СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ОборудованиеЛокальное.РО КАК РО,
	|					СУММА(ОборудованиеЛокальное.Сумма) КАК Сумма
	|				ИЗ
	|					РегистрНакопления.ОборудованиеЛокальное КАК ОборудованиеЛокальное
	|				ГДЕ
	|					ОборудованиеЛокальное.Регистратор ССЫЛКА Документ.РегистрацияПП
	|					И (НЕ ОборудованиеЛокальное.РО = """")
	|					И (НЕ ОборудованиеЛокальное.РО = ""non PO"")
	|					И (НЕ ОборудованиеЛокальное.РО = ""nonPO"")
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ОборудованиеЛокальное.РО
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					ОборудованиеЛокальное.РО,
	|					СУММА(ОборудованиеЛокальное.Сумма)
	|				ИЗ
	|					РегистрНакопления.ОборудованиеЛокальное КАК ОборудованиеЛокальное
	|				ГДЕ
	|					ОборудованиеЛокальное.Регистратор ССЫЛКА Документ.ЗакрытиеПредоплаты
	|					И (НЕ ОборудованиеЛокальное.РО = """")
	|					И (НЕ ОборудованиеЛокальное.РО = ""non PO"")
	|					И (НЕ ОборудованиеЛокальное.РО = ""nonPO"")
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ОборудованиеЛокальное.РО) КАК ВложенныйЗапрос
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВложенныйЗапрос.РО
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ОборудованиеЛокальное.РО,
	|				СУММА(ОборудованиеЛокальное.Сумма)
	|			ИЗ
	|				РегистрНакопления.ОборудованиеЛокальное КАК ОборудованиеЛокальное
	|			ГДЕ
	|				ОборудованиеЛокальное.Регистратор ССЫЛКА Документ.ЗакрытиеПредоплаты
	|				И (НЕ ОборудованиеЛокальное.РО = """")
	|				И (НЕ ОборудованиеЛокальное.РО = ""non PO"")
	|				И (НЕ ОборудованиеЛокальное.РО = ""nonPO"")
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОборудованиеЛокальное.РО) КАК ДокументыОплатыFA
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПринятиеКУчетуОС.РО КАК РО,
	|					СУММА(ПринятиеКУчетуОС.СтоимостьБУ) КАК СтоимостьБУ
	|				ИЗ
	|					Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ПринятиеКУчетуОС.РО) КАК ПринятиеКУчетуОС
	|				ПО ДокументыОплатыFA.РО = ПринятиеКУчетуОС.РО
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА ДокументыОплатыFA.Сумма > ПринятиеКУчетуОС.СтоимостьБУ
	|						ТОГДА ДокументыОплатыFA.Сумма - ПринятиеКУчетуОС.СтоимостьБУ > 1.5
	|					ИНАЧЕ ПринятиеКУчетуОС.СтоимостьБУ - ДокументыОплатыFA.Сумма > 1.5
	|				КОНЕЦ) КАК ОтборPO
	|		ПО ВложенныйЗапрос.РО = ОтборPO.РО
	|
	|УПОРЯДОЧИТЬ ПО
	|	РО,
	|	ВложенныйЗапрос.ДатаОплаты";

	//Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,5);
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Декларация", "Декларация");
		СтруктураРасшифровки.Вставить("Оборудование", "Оборудование");
		СтруктураРасшифровки.Вставить("ДокументОплаты", "ДокументОплаты");
		СтруктураРасшифровки.Вставить("ДокументПринятияКУчетуОС", "ДокументПринятияКУчетуОС");
		СтруктураРасшифровки.Вставить("Ответственный", "Ответственный");
		ИсходящиеДанные.Вставить("СуммаПринятияКУчетуОСНеСоответствуетСуммеОплатыПоPOСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СуммаПринятияКУчетуОСНеСоответствуетСуммеОплатыПоPOТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьПравилоОстаточнаяСтоимостьПоСамортизированнымОС(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ДатаПринятияКУчету, МЕСЯЦ), МЕСЯЦ, НачислениеАмортизацииСрезПоследних.СрокБУ + 1) КАК ДатаОкончанияСписания,
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОС
	|ПОМЕСТИТЬ ОСы
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|		СостоянияОСОрганизаций.ДатаСостояния КАК ДатаПринятияКУчету
	|	ИЗ
	|		РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|	ГДЕ
	|		СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(перечисление.состоянияОс.принятокучету)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, ) КАК НачислениеАмортизацииСрезПоследних
	|		ПО ВложенныйЗапрос.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ДатаПринятияКУчету, МЕСЯЦ), МЕСЯЦ, НачислениеАмортизацииСрезПоследних.СрокНУ / ВЫБОР
	|			КОГДА НачислениеАмортизацииСрезПоследних.СпециальныйКоэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(НачислениеАмортизацииСрезПоследних.СпециальныйКоэффициент, 1)
	|		КОНЕЦ + 1) КАК ДатаОкончанияСписания,
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОС
	|ПОМЕСТИТЬ ОСыНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|		СостоянияОСОрганизаций.ДатаСостояния КАК ДатаПринятияКУчету
	|	ИЗ
	|		РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|	ГДЕ
	|		СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(перечисление.состоянияОс.принятокучету)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, ) КАК НачислениеАмортизацииСрезПоследних
	|		ПО ВложенныйЗапрос.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""БУ"" КАК ВидУчета,
	|	ОСы.ОС.Подразделение КАК Подразделение,
	|	ОСы.ОС.Код КАК Код,
	|	ОСы.ОС,
	|	ОСы.ДатаОкончанияСписания,
	|	ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Амортизация, 0) КАК ОстаточнаяСтоимость
	|ИЗ
	|	ОСы КАК ОСы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОС,
	|			СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК Стоимость
	|		ИЗ
	|			РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	|					&Дата,
	|					ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ОСы.ОС
	|						ИЗ
	|							ОСы КАК ОСы
	|						ГДЕ
	|							ОСы.ДатаОкончанияСписания < &Дата)) КАК СтоимостьАмортизацияОСОстатки) КАК ВложенныйЗапрос
	|		ПО ОСы.ОС = ВложенныйЗапрос.ОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОС,
	|			СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток КАК Амортизация
	|		ИЗ
	|			РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	|					&Дата,
	|					ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ОСы.ОС
	|						ИЗ
	|							ОСы КАК ОСы
	|						ГДЕ
	|							ОСы.ДатаОкончанияСписания < &Дата)) КАК СтоимостьАмортизацияОСОстатки) КАК ВложенныйЗапрос1
	|		ПО ОСы.ОС = ВложенныйЗапрос1.ОС
	|ГДЕ
	|	ОСы.ДатаОкончанияСписания < &Дата
	|	И ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Амортизация, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НУ"",
	|	ОСы.ОС.Подразделение,
	|	ОСы.ОС.Код,
	|	ОСы.ОС,
	|	ОСы.ДатаОкончанияСписания,
	|	ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Амортизация, 0)
	|ИЗ
	|	ОСыНУ КАК ОСы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОС,
	|			СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК Стоимость
	|		ИЗ
	|			РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	|					&Дата,
	|					ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ОСы.ОС
	|						ИЗ
	|							ОСыНУ КАК ОСы
	|						ГДЕ
	|							ОСы.ДатаОкончанияСписания < &Дата)) КАК СтоимостьАмортизацияОСОстатки) КАК ВложенныйЗапрос
	|		ПО ОСы.ОС = ВложенныйЗапрос.ОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОС,
	|			СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток КАК Амортизация
	|		ИЗ
	|			РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	|					&Дата,
	|					ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ОСы.ОС
	|						ИЗ
	|							ОСыНУ КАК ОСы
	|						ГДЕ
	|							ОСы.ДатаОкончанияСписания < &Дата)) КАК СтоимостьАмортизацияОСОстатки) КАК ВложенныйЗапрос1
	|		ПО ОСы.ОС = ВложенныйЗапрос1.ОС
	|ГДЕ
	|	ОСы.ДатаОкончанияСписания < &Дата
	|	И ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Амортизация, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Код";

	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаКон)+1);
	Результат = Запрос.Выполнить();                            
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	ТЗ = Результат.Выгрузить();
	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,5);
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Сч = Сч + 1;
		СтрокаТЗ.N = Сч;
	КонецЦикла; 
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", "ОС");
		ИсходящиеДанные.Вставить("ОстаточнаяСтоимостьПоСамортизированнымОССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ОстаточнаяСтоимостьПоСамортизированнымОСТаблицаЗначений", ТЗ);
	КонецЕсли; 
		
КонецПроцедуры

//Процедура ПроверитьПравилоНачислениеАмортизацииВДокументах(СтрокаПравила)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ДатаПринятияКУчету, МЕСЯЦ), МЕСЯЦ, ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования + 1) КАК ДатаОкончанияСписания,
//	|	ВложенныйЗапрос.ОсновноеСредство КАК ОС
//	|ПОМЕСТИТЬ ОСы
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
//	|		СостоянияОСОрганизаций.ДатаСостояния КАК ДатаПринятияКУчету
//	|	ИЗ
//	|		РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
//	|	ГДЕ
//	|		СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(перечисление.состоянияОс.принятокучету)) КАК ВложенныйЗапрос
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&кон, ) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
//	|		ПО ВложенныйЗапрос.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ДатаПринятияКУчету, МЕСЯЦ), МЕСЯЦ, ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования / ВЫБОР
//	|			КОГДА НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент = 0
//	|				ТОГДА 1
//	|			ИНАЧЕ ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 1)
//	|		КОНЕЦ + 1) КАК ДатаОкончанияСписания,
//	|	ВложенныйЗапрос.ОсновноеСредство КАК ОС
//	|ПОМЕСТИТЬ ОСыНУ
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
//	|		СостоянияОСОрганизаций.ДатаСостояния КАК ДатаПринятияКУчету
//	|	ИЗ
//	|		РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
//	|	ГДЕ
//	|		СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(перечисление.состоянияОс.принятокучету)) КАК ВложенныйЗапрос
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&кон, ) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
//	|		ПО ВложенныйЗапрос.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
//	|		ПО ВложенныйЗапрос.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВложенныйЗапрос.Документ,
//	|	ВложенныйЗапрос.ОсновноеСредство
//	|ПОМЕСТИТЬ Доки
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
//	|		ПередачаОСОС.Ссылка КАК Документ
//	|	ИЗ
//	|		Документ.ПередачаОС.ОС КАК ПередачаОСОС
//	|	ГДЕ
//	|		ПередачаОСОС.Ссылка.ДокПодготовкаКПередачеОС = ЗНАЧЕНИЕ(документ.подготовкакпередачеос.пустаяссылка)
//	|		И ПередачаОСОС.Ссылка.Дата МЕЖДУ &нач И &кон
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ПодготовкаКПередачеОСОС.ОсновноеСредство,
//	|		ПодготовкаКПередачеОСОС.Ссылка
//	|	ИЗ
//	|		Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
//	|	ГДЕ
//	|		ПодготовкаКПередачеОСОС.Ссылка.Дата МЕЖДУ &нач И &кон
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		МодернизацияОСОС.ОсновноеСредство,
//	|		МодернизацияОСОС.Ссылка
//	|	ИЗ
//	|		Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
//	|	ГДЕ
//	|		МодернизацияОСОС.Ссылка.Дата МЕЖДУ &нач И &кон
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ПеремещениеОСОС.ОсновноеСредство,
//	|		ПеремещениеОСОС.Ссылка
//	|	ИЗ
//	|		Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
//	|	ГДЕ
//	|		ПеремещениеОСОС.Ссылка.Дата МЕЖДУ &нач И &кон) КАК ВложенныйЗапрос
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	вложенныйзапрос.Документ,
//	|	вложенныйзапрос.ОсновноеСредство КАК ОС,
//	|	вложенныйзапрос.ДатаОкончанияСписанияБУ,
//	|	вложенныйзапрос.ДатаОкончанияСписанияНУ
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ОСы.ДатаОкончанияСписания КАК ДатаОкончанияСписанияБУ,
//	|		ОСыНУ.ДатаОкончанияСписания КАК ДатаОкончанияСписанияНУ,
//	|		Проводки.ДатаБУ КАК ДатаБУ,
//	|		Проводки.ДатаНУ КАК ДатаНУ,
//	|		Доки.Документ КАК Документ,
//	|		Доки.ОсновноеСредство КАК ОсновноеСредство
//	|	ИЗ
//	|		Доки КАК Доки
//	|			ЛЕВОЕ СОЕДИНЕНИЕ ОСы КАК ОСы
//	|			ПО Доки.ОсновноеСредство = ОСы.ОС
//	|			ЛЕВОЕ СОЕДИНЕНИЕ ОСыНУ КАК ОСыНУ
//	|			ПО Доки.ОсновноеСредство = ОСыНУ.ОС
//	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|				Доки.Документ КАК Документ,
//	|				Доки.ОсновноеСредство КАК ОсновноеСредство,
//	|				АмортизацияБУ.Документ.Дата КАК ДатаБУ,
//	|				АмортизацияНУ.Документ.Дата КАК ДатаНУ
//	|			ИЗ
//	|				Доки КАК Доки
//	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|						ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
//	|						ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.ОсновныеСредства) КАК ОС,
//	|						ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма
//	|					ИЗ
//	|						РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
//	|								&нач,
//	|								&кон,
//	|								Регистратор В
//	|										(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|											Доки.Документ КАК Документ
//	|										ИЗ
//	|											Доки КАК Доки)
//	|									И СчетДт = &счет20
//	|									И СчетКт = &счет02) КАК ХозрасчетныйДвиженияССубконто) КАК АмортизацияБУ
//	|					ПО Доки.Документ = АмортизацияБУ.Документ
//	|						И Доки.ОсновноеСредство = АмортизацияБУ.ОС
//	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|						НалоговыйДвиженияССубконто.Регистратор КАК Документ,
//	|						ВЫРАЗИТЬ(НалоговыйДвиженияССубконто.СубконтоКт1 КАК Справочник.ОсновныеСредства) КАК ОС,
//	|						НалоговыйДвиженияССубконто.Сумма КАК Сумма
//	|					ИЗ
//	|						РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
//	|								&нач,
//	|								&кон,
//	|								Регистратор В
//	|										(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|											Доки.Документ КАК Документ
//	|										ИЗ
//	|											Доки КАК Доки)
//	|									И СчетДт = &счет20ну
//	|									И СчетКт = &счет02ну) КАК НалоговыйДвиженияССубконто) КАК АмортизацияНУ
//	|					ПО Доки.Документ = АмортизацияНУ.Документ
//	|						И Доки.ОсновноеСредство = АмортизацияНУ.ОС) КАК Проводки
//	|			ПО Доки.Документ = Проводки.Документ
//	|				И Доки.ОсновноеСредство = Проводки.ОсновноеСредство) КАК вложенныйзапрос
//	|ГДЕ
//	|	(ВЫБОР
//	|				КОГДА вложенныйзапрос.ДатаБУ ЕСТЬ NULL 
//	|					ТОГДА вложенныйзапрос.ДатаОкончанияСписанияБУ > вложенныйзапрос.Документ.Дата
//	|				ИНАЧЕ ЛОЖЬ
//	|			КОНЕЦ
//	|			ИЛИ ВЫБОР
//	|				КОГДА вложенныйзапрос.ДатаБУ ЕСТЬ NULL 
//	|					ТОГДА вложенныйзапрос.ДатаОкончанияСписанияНУ > вложенныйзапрос.Документ.Дата
//	|				ИНАЧЕ ЛОЖЬ
//	|			КОНЕЦ)";

//	Запрос.УстановитьПараметр("Нач", Датанач);
//	Запрос.УстановитьПараметр("Кон", КонецДня(ДатаКон));
//	Запрос.УстановитьПараметр("Счет20", ПланыСчетов.Хозрасчетный.НайтиПоКоду("000"));
//	Запрос.УстановитьПараметр("Счет02", ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));
//	Запрос.УстановитьПараметр("Счет20ну", ПланыСчетов.Налоговый.НайтиПоКоду("20.01.1"));
//	Запрос.УстановитьПараметр("Счет02ну", ПланыСчетов.Налоговый.НайтиПоКоду("02.01"));
//	Результат = Запрос.Выполнить();                            
//	
//	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
//	СтрокаПравила.ПроверкаВыполнена = Истина;
//	ТЗ = Результат.Выгрузить();
//	ТЗ.Колонки.Вставить(0,"N",Новый ОписаниеТипов("Строка"),,5);
//	Сч = 0;
//	Для каждого СтрокаТЗ Из ТЗ Цикл
//		Сч = Сч + 1;
//		СтрокаТЗ.N = Сч;
//	КонецЦикла; 
//	
//	Если СтрокаПравила.ОбнаруженыОшибки Тогда
//		СтруктураРасшифровки = Новый Структура;
//		СтруктураРасшифровки.Вставить("ОС", "ОС");
//		ИсходящиеДанные.Вставить("НачислениеАмортизацииВДокументахСтруктураРасшифровки", СтруктураРасшифровки);
//		ИсходящиеДанные.Вставить("НачислениеАмортизацииВДокументахТаблицаЗначений", ТЗ);
//	КонецЕсли; 
//	
//КонецПроцедуры

Процедура ПроверитьПравилоОдинаковыеVINномера(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОС,
	|	ОсновныеСредства.НомерПаспорта,
	|	ОсновныеСредства.Код,
	|	ОсновныеСредства.Подразделение
	|ПОМЕСТИТЬ ОС1
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И (НЕ ПОДСТРОКА(ОсновныеСредства.НомерПаспорта, 17, 1) = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОС,
	|	ОсновныеСредства.НомерПаспорта,
	|	ОсновныеСредства.Код,
	|	ОсновныеСредства.Подразделение
	|ПОМЕСТИТЬ ОС2
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И (НЕ ПОДСТРОКА(ОсновныеСредства.НомерПаспорта, 17, 1) = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОС1.НомерПаспорта КАК НомерПаспорта,
	|	ОС1.ОС,
	|	ОС1.Код,
	|	ОС1.Подразделение
	|ИЗ
	|	ОС1 КАК ОС1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОС2 КАК ОС2
	|		ПО ОС1.НомерПаспорта = ОС2.НомерПаспорта
	|			И ((НЕ ОС1.Код = ОС2.Код))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПаспорта,
	|	ОС1.ОС.Код";
	
	Результат = Запрос.Выполнить();                            
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", "ОС");
		ИсходящиеДанные.Вставить("ОдинаковыеVINномераСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ОдинаковыеVINномераТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоДокументыПоПомеченнымНаУдалениеОС(СтрокаПравила)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ОС КАК ОС,
	|	ВложенныйЗапрос.ОС.Код КАК Код,
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	ВложенныйЗапрос.Проведен,
	|	ВложенныйЗапрос.ОС.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВводНачальныхОстатковОСОС.Ссылка КАК Документ,
	|		ВводНачальныхОстатковОСОС.ОсновноеСредство.Ссылка КАК ОС,
	|		ВводНачальныхОстатковОСОС.Ссылка.Ответственный КАК Ответственный,
	|		ВЫБОР
	|			КОГДА ВводНачальныхОстатковОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ КАК Проведен
	|	ИЗ
	|		Документ.ВводНачальныхОстатковОС.ОС КАК ВводНачальныхОстатковОСОС
	|	ГДЕ
	|		ВводНачальныхОстатковОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ВводНачальныхОстатковОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаОСОС.Ссылка,
	|		ПередачаОСОС.ОсновноеСредство.Ссылка,
	|		ПередачаОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ПередачаОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|	ГДЕ
	|		ПередачаОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПередачаОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеОСОС.Ссылка,
	|		ПеремещениеОСОС.ОсновноеСредство.Ссылка,
	|		ПеремещениеОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ПеремещениеОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|	ГДЕ
	|		ПеремещениеОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПеремещениеОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеОСОС.Ссылка,
	|		СписаниеОСОС.ОсновноеСредство.Ссылка,
	|		СписаниеОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА СписаниеОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|	ГДЕ
	|		СписаниеОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И СписаниеОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МодернизацияОСОС.Ссылка,
	|		МодернизацияОСОС.ОсновноеСредство.Ссылка,
	|		МодернизацияОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА МодернизацияОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|	ГДЕ
	|		МодернизацияОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И МодернизацияОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзменениеСостоянияОСОС.Ссылка,
	|		ИзменениеСостоянияОСОС.ОсновноеСредство.Ссылка,
	|		ИзменениеСостоянияОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ИзменениеСостоянияОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ИзменениеСостоянияОС.ОС КАК ИзменениеСостоянияОСОС
	|	ГДЕ
	|		ИзменениеСостоянияОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ИзменениеСостоянияОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПодготовкаКПередачеОСОС.Ссылка,
	|		ПодготовкаКПередачеОСОС.ОсновноеСредство.Ссылка,
	|		ПодготовкаКПередачеОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ПодготовкаКПередачеОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	|	ГДЕ
	|		ПодготовкаКПередачеОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПодготовкаКПередачеОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Ссылка,
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ПринятиеКУчетуОСОсновныеСредства.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|	ГДЕ
	|		ПринятиеКУчетуОСОсновныеСредства.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИнвентаризацияОСОС.Ссылка,
	|		ИнвентаризацияОСОС.ОсновноеСредство.Ссылка,
	|		ИнвентаризацияОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ИнвентаризацияОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|	ГДЕ
	|		ИнвентаризацияОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ИнвентаризацияОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка,
	|		ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство.Ссылка,
	|		ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ИзменениеПараметровНачисленияАмортизацииОСОС
	|	ГДЕ
	|		ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзменениеСпециальногоКоэффициентаОСОС.Ссылка,
	|		ИзменениеСпециальногоКоэффициентаОСОС.ОсновноеСредство.Ссылка,
	|		ИзменениеСпециальногоКоэффициентаОСОС.Ссылка.Ответственный,
	|		ВЫБОР
	|			КОГДА ИзменениеСпециальногоКоэффициентаОСОС.Ссылка.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ИзменениеСпециальногоКоэффициентаОС.ОС КАК ИзменениеСпециальногоКоэффициентаОСОС
	|	ГДЕ
	|		ИзменениеСпециальногоКоэффициентаОСОС.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ИзменениеСпециальногоКоэффициентаОСОС.ОсновноеСредство.ПометкаУдаления = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьАмортизацияОС.Регистратор,
	|		СтоимостьАмортизацияОС.ОсновноеСредство,
	|		СтоимостьАмортизацияОС.Регистратор.Ответственный,
	|		ВЫБОР
	|			КОГДА СтоимостьАмортизацияОС.Регистратор.Проведен
	|				ТОГДА ""да""
	|			ИНАЧЕ ""нет""
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто,
	|		РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	|	ГДЕ
	|		ХозрасчетныйСубконто.Регистратор.ПометкаУдаления = ЛОЖЬ
	|		И ХозрасчетныйСубконто.Значение.ПометкаУдаления = ИСТИНА
	|		И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|		И ХозрасчетныйСубконто.Регистратор ССЫЛКА Документ.НачислениеАмортизации
	|		И СтоимостьАмортизацияОС.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров) КАК ВложенныйЗапрос";
	
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Ответственный) Тогда
		
		Запрос.Текст = Запрос.Текст +"
		|	ГДЕ ВложенныйЗапрос.Ответственный = &Ответственный";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);				
	КонецЕсли;
	Запрос.Текст = Запрос.Текст +"
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	
	Результат = Запрос.Выполнить();                            
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", "ОС");
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("ДокументыПоПомеченнымНаУдалениеОССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ДокументыПоПомеченнымНаУдалениеОСТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
КонецПроцедуры				   

Процедура ПроверитьПравилоЕстьОстаткиПоВыбывшимОС(СтрокаПравила)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код
	|ПОМЕСТИТЬ ВыбывшиеОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение,
	|	ВыбывшиеОС.ОсновноеСредство КАК ОС,
	|	ВыбывшиеОС.ОсновноеСредствоКод КАК КодОС,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКВОстаток,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУОстаток,
	|	СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток КАК АмортизацияБУОстаток,
	|	СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток КАК АмортизацияНУОстаток
	|ИЗ
	|	ВыбывшиеОС КАК ВыбывшиеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ) КАК СтоимостьАмортизацияОСОстатки
	|		ПО ВыбывшиеОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ВыбывшиеОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток <> 0
	|			ИЛИ СтоимостьАмортизацияОСОстатки.СуммаКВОстаток <> 0
	|			ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток <> 0
	|			ИЛИ СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток <> 0
	|			ИЛИ СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Местонахождение,
	|	ВыбывшиеОС.ОсновноеСредство.Код";
	
	Запрос.УстановитьПараметр("Дата", Датакон);
	
	
	Результат = Запрос.Выполнить();                            
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", "ОС");
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("ЕстьОстаткиПоВыбывшимОССтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ЕстьОстаткиПоВыбывшимОСТаблицаЗначений", Результат.Выгрузить());
	КонецЕсли; 
КонецПроцедуры	//ПроверитьПравилоЕстьОстаткиПоВыбывшимОС(СтрокаПравила)			   

//Добавил РГ-Софт - Пронин Иван - 2009-06-27
Процедура ПроверитьПравилоПовторяющиесяИНулевыеID(СтрокаПравила)
	
	СтрокаПравила.ОбнаруженыОшибки = Ложь;
	
	табОшибок = Новый ТаблицаЗначений;
	табОшибок.Колонки.Добавить("ID", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	табОшибок.Колонки.Добавить("Документ");
	табОшибок.Колонки.Добавить("Ошибка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкиDSSОбщие.GltObjId КАК ID,
	               |	ПроводкиDSSОбщие.Регистратор КАК Документ
	               |ПОМЕСТИТЬ табПроводки
	               |ИЗ
	               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	               |ГДЕ
	               |	ПроводкиDSSОбщие.GltObjId <> 1000000000
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табПроводки.ID,
	               |	КОЛИЧЕСТВО(табПроводки.Документ) КАК Количество
	               |ПОМЕСТИТЬ Ошибки
	               |ИЗ
	               |	табПроводки КАК табПроводки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	табПроводки.ID
	               |
	               |ИМЕЮЩИЕ
	               |	(табПроводки.ID = 0
	               |		ИЛИ КОЛИЧЕСТВО(табПроводки.Документ) > 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА табПроводки.ID = 0
	               |			ТОГДА ""Нулевые ID в Проводках DSS Общие""
	               |		ИНАЧЕ ""Повтор ID в Проводках DSS Общие""
	               |	КОНЕЦ КАК Ошибка,
	               |	табПроводки.Документ,
	               |	табПроводки.ID
	               |ИЗ
	               |	табПроводки КАК табПроводки
	               |ГДЕ
	               |	табПроводки.ID В
	               |			(ВЫБРАТЬ
	               |				Ошибки.ID
	               |			ИЗ
	               |				Ошибки)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		СтрокаПравила.ОбнаруженыОшибки = Истина;
		НоваяСтрока = табОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкиDSSДетали.GltObjId КАК ID,
	               |	ПроводкиDSSДетали.Документ КАК Документ
	               |ПОМЕСТИТЬ табПроводки
	               |ИЗ
	               |	РегистрСведений.ПроводкиDSSДетали КАК ПроводкиDSSДетали
	               |ГДЕ
	               |	ПроводкиDSSДетали.GltObjId <> 1000000000
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табПроводки.ID,
	               |	КОЛИЧЕСТВО(табПроводки.Документ) КАК Документ
	               |ПОМЕСТИТЬ Ошибки
	               |ИЗ
	               |	табПроводки КАК табПроводки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	табПроводки.ID
	               |
	               |ИМЕЮЩИЕ
	               |	(табПроводки.ID = 0
	               |		ИЛИ КОЛИЧЕСТВО(табПроводки.Документ) > 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	выбор когда табПроводки.ID = 0 Тогда ""Нулевые ID в Проводках DSS Детали"" Иначе ""Повтор ID в Проводках DSS Детали"" Конец КАК Ошибка,
	               |	табПроводки.ID КАК ID,
	               |	табПроводки.Документ КАК Документ
	               |ИЗ
	               |	табПроводки КАК табПроводки
	               |ГДЕ
	               |	табПроводки.ID В
	               |			(ВЫБРАТЬ
	               |				Ошибки.ID
	               |			ИЗ
	               |				Ошибки)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		СтрокаПравила.ОбнаруженыОшибки = Истина;
		НоваяСтрока = табОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;
    Результат.Очистить();

	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("ПовторяющиесяИНулевыеIDТаблицаЗначений", табОшибок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеID(СтрокаПравила)
	
	СтрокаПравила.ОбнаруженыОшибки = Ложь;
	
	табОшибок = Новый ТаблицаЗначений;
	табОшибок.Колонки.Добавить("ID", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	табОшибок.Колонки.Добавить("Документ");
	табОшибок.Колонки.Добавить("Ошибка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПроводкиDSSОбщие.GltObjId, ПроводкиDSSДетали.GltObjId) КАК ID,
	               |	ЕСТЬNULL(ПроводкиDSSОбщие.Регистратор, ПроводкиDSSДетали.Документ) КАК Документ,
	               |	ВЫБОР
	               |		КОГДА ПроводкиDSSОбщие.Регистратор ЕСТЬ NULL 
	               |			ТОГДА ""Проводка есть только в Проводки DSS Детали""
	               |		ИНАЧЕ ""Проводка есть только в Проводки DSS Общие""
	               |	КОНЕЦ КАК Ошибка
	               |ИЗ
	               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПроводкиDSSДетали КАК ПроводкиDSSДетали
	               |		ПО ПроводкиDSSОбщие.GltObjId = ПроводкиDSSДетали.GltObjId
	               |ГДЕ
	               |	(ПроводкиDSSОбщие.GltObjId ЕСТЬ NULL 
	               |			ИЛИ ПроводкиDSSДетали.GltObjId ЕСТЬ NULL )
	               |	И ПроводкиDSSДетали.GltObjId <> 1000000000";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		СтрокаПравила.ОбнаруженыОшибки = Истина;
		НоваяСтрока = табОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;
	
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Документ", "Документ");		
		ИсходящиеДанные.Вставить("СоответствиеIDТаблицаЗначений", табОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоСовпадениеДокументов(СтрокаПравила)
	
	СтрокаПравила.ОбнаруженыОшибки = Ложь;

	табОшибок = Новый ТаблицаЗначений;
	табОшибок.Колонки.Добавить("ID", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	табОшибок.Колонки.Добавить("ДокументВПроводкахDSSОбщие",,"Документ в Проводках DSS Общие");
	табОшибок.Колонки.Добавить("ДокументВПроводкахDSSДетали",,"Документ в Проводках DSS Детали");
	табОшибок.Колонки.Добавить("Ошибка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкиDSSОбщие.GltObjId КАК ID,
	               |	ПроводкиDSSОбщие.Регистратор КАК ДокументВПроводкахDSSОбщие,
	               |	""Несовпадение документов в регистрах"" КАК Ошибка,
	               |	ПроводкиDSSДетали.Документ КАК ДокументВПроводкахDSSДетали
	               |ИЗ
	               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроводкиDSSДетали КАК ПроводкиDSSДетали
	               |		ПО ПроводкиDSSОбщие.GltObjId = ПроводкиDSSДетали.GltObjId
	               |ГДЕ
	               |	ПроводкиDSSДетали.Документ <> ПроводкиDSSОбщие.Регистратор
	               |	И ПроводкиDSSОбщие.GltObjId <> 1000000000";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		СтрокаПравила.ОбнаруженыОшибки = Истина;
		НоваяСтрока = табОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;
 	
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Документ", "Документ");
		//ИсходящиеДанные.Вставить("СовпадениеДокументовТаблицаЗначенийСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("СовпадениеДокументовТаблицаЗначений", табОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоДокументыПомеченныеНаУдаление(СтрокаПравила)
	
	СтрокаПравила.ОбнаруженыОшибки = Ложь;
	
	табОшибок = Новый ТаблицаЗначений;
	табОшибок.Колонки.Добавить("Документ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроводкиDSSОбщие.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	|ГДЕ
	|	ПроводкиDSSОбщие.Регистратор.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроводкиDSSОбщие.Регистратор";
	
	Результат = Запрос.Выполнить().Выгрузить();
	//Результат.Колонки.Добавить("Имя");
	//
	//Запрос.Текст = "";
	//Для Каждого Запись Из Результат Цикл
	//	Запись.Имя = Запись.Регистратор.ПолучитьОбъект().Метаданные().Имя;
	//КонецЦикла;
	//Результат.Свернуть("Имя");
	//
	//Для Каждого Запись Из Результат Цикл
	//	Имя = Запись.Имя;
	//	Запрос.Текст =  Запрос.Текст + ?(Запрос.Текст = "","", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + 
	//	 "ВЫБРАТЬ
	//	|	" + Имя + ".Ссылка КАК Документ
	//	|ИЗ
	//	|	Документ." + Имя + " КАК " + Имя + "
	//	|ГДЕ
	//	|	" + Имя + ".ПометкаУдаления = ИСТИНА";
	//КонецЦикла;
	//Результат.Очистить();
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		СтрокаПравила.ОбнаруженыОшибки = Истина;
		НоваяСтрока = табОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;
 	
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Документ", "Документ");
		//ИсходящиеДанные.Вставить("ДокументыПомеченныеНаУдалениеСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ДокументыПомеченныеНаУдалениеТаблицаЗначений", табОшибок);
	КонецЕсли;
	
	
	//табОшибок очищать нельзя, т.к. передается идентификатор-ссылка на нее через ИсходящиеДанные
КонецПроцедуры

Процедура ПроверитьПравилоПривязкиКДокументамFiscal(СтрокаПравила)
	
	
	СтрокаПравила.ОбнаруженыОшибки = Ложь;
	
	табОшибок = Новый ТаблицаЗначений;
	табОшибок.Колонки.Добавить("ID", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	табОшибок.Колонки.Добавить("ОперацияLawson");
	табОшибок.Колонки.Добавить("Документ_1С");
 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкиDSSОбщие.GltObjId КАК ID,
	               |	ПроводкиDSSОбщие.Регистратор
	               |ПОМЕСТИТЬ ОперацияLawson
	               |ИЗ
	               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	               |ГДЕ
	               |	ПроводкиDSSОбщие.Регистратор ССЫЛКА Документ.ОперацияLawson
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкиDSS_SB.Регистратор,
	               |	ПроводкиDSS_SB.GltObjId КАК ID
	               |ПОМЕСТИТЬ РегистраторыSB
	               |ИЗ
	               |	РегистрНакопления.ПроводкиDSS_SB КАК ПроводкиDSS_SB
	               |ГДЕ
	               |	ПроводкиDSS_SB.GltObjId В
	               |			(ВЫБРАТЬ
	               |				ОперацияLawson.ID
	               |			ИЗ
	               |				ОперацияLawson)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегистраторыSB.Регистратор.Документ КАК Документ_1С,
	               |	ОперацияLawson.Регистратор КАК ОперацияLawson,
	               |	ОперацияLawson.ID КАК ID
	               |ИЗ
	               |	ОперацияLawson КАК ОперацияLawson
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыSB КАК РегистраторыSB
	               |		ПО ОперацияLawson.ID = РегистраторыSB.ID";

	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из  Результат Цикл
		Если ЗначениеЗаполнено(Запись.Документ_1С) Тогда
			СтрокаПравила.ОбнаруженыОшибки = Истина;
			НоваяСтрока = табОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		КонецЕсли;
	КонецЦикла;
 	
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Документ", "Документ");
		//ИсходящиеДанные.Вставить("ДокументыПомеченныеНаУдалениеСтруктураРасшифровки", СтруктураРасшифровки);
		ИсходящиеДанные.Вставить("ПривязкиКДокументамFiscalТаблицаЗначений", табОшибок);
	КонецЕсли;
	
	//табОшибок очищать нельзя, т.к. передается идентификатор-ссылка на нее через ИсходящиеДанные
КонецПроцедуры
//Конец добавления 2009-06-27
	
// Процедура-оболочка, вызывающая другие процедуры на выполнение или выполняющая текст алгоритма
Процедура ПроверитьПравило(СтрокаПравила)
	
	СтрокаПравила.КомментарийРезультата = "";
	
	РежимОтладки = СтрокаПравила.РежимОтладки ИЛИ ПустаяСтрока(СтрокаПравила.ТекстАлгоритма);
	
	Если РежимОтладки Тогда
		Попытка
			Выполнить("ПроверитьПравило"+СтрокаПравила.Идентификатор+"(СтрокаПравила)");
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения процедуры "+"ПроверитьПравило"+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	Иначе
		Попытка
			Выполнить(СтрокаПравила.ТекстАлгоритма);
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения алгоритма правила "+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	КонецЕсли;

	КомментарийЗаданВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.КомментарийРезультата);
	ИспользоватьСтандартныйКомментарий = НЕ КомментарийЗаданВАлгоритме;
	Если ИспользоватьСтандартныйКомментарий Тогда
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаОшибка;
		ИначеЕсли СтрокаПравила.ПроверкаВыполнена Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНетОшибок;
		Иначе
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с деревом проверок

Процедура СоздатьКолонкиДереваПроверок() Экспорт

	ДеревоПроверок.Колонки.Добавить("Идентификатор", , , 0);
	ДеревоПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("Включить", Новый ОписаниеТипов("Число"), , 0); // у флажка 3 состояния
	ДеревоПроверок.Колонки.Добавить("Наименование", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПредметКонтроля", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаОшибка", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПричиныОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("Рекомендации", , , 0);
	ДеревоПроверок.Колонки.Добавить("ТекстАлгоритма", , , 0);
	ДеревоПроверок.Колонки.Добавить("РежимОтладки", Новый ОписаниеТипов("Булево"), , 0);
	// В этих колонках хранятся результаты выполнения проверки
	ДеревоПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультата", , , 0);
	ДеревоПроверок.Колонки.Добавить("Уровень", , , 0);
 	ДеревоПроверок.Колонки.Добавить("КодОбработки", , , 0);

КонецПроцедуры

// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий ссылки вида СправочникСсылка.РегламентированныеОтчеты.
//						Если параметр задан, то пометка меняется только у тех строк, для которых свойство Ссылка
//						находится в указанном списке.
//
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, 
	                                 ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено,
	                                 ИмяКолонки = "Включить", ИмяКолонкиПоискаВыбранных = "Идентификатор") Экспорт
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел[ИмяКолонки];
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Пометка;
			КонецЦикла;
			Стр1[ИмяКолонки] = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр2[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр1[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.Строки Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.Строки Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2[ИмяКолонки]);
		КонецЦикла;
		Если СуммаПометок = Стр1.Строки.Количество() Тогда
			Стр1[ИмяКолонки] = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1[ИмяКолонки] = 0;
		Иначе
			Стр1[ИмяКолонки] = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сканирует все строки дерева значений, подчиненные заданной, проверяет
// у них свойство Пометка на равенство заданному значению Пометка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - исходная строка для сканирования.
//	Пометка - Булево, значение пометки.
//	ПервыйПроход - признак первого захода в процедуру (используется только при рекурсивных вызовах).
//
// Возвращаемое значение:
//	Булево - признак того, что у всех строк в дереве значений, подчиненных заданной, пометка = Пометка.
//
Функция УВсехПодчиненныхПометкаРавна(Узел, Пометка, ПервыйПроход = Истина, ИмяКолонки = "Включить") Экспорт
	
	Если НЕ ПервыйПроход И Узел[ИмяКолонки] <> Пометка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УВсехПодчиненныхПометкаРавна(Стр, Пометка, Ложь, ИмяКолонки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с макетом MXL

Процедура ЗаполнитьДеревоПроверокИзМакетаMXL() Экспорт
	
	ДеревоПроверок.Строки.Очистить();
	МакетПравил   = ПолучитьМакет("НаборПравилПроверки");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	// На случай, когда строки проверок надо вставлять прямо в корень дерева
	СтрокаРаздела = ДеревоПроверок;
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Правило идентифицируется по имени области - строки,
		// поэтому строки, для которых не задано имя области, пропускаем 
		ЕстьИмяУСтроки = НЕ (ИмяОбластиСтроки = "R"+Формат(НомСтроки, "ЧГ="));
		Если ЕстьИмяУСтроки Тогда
			// Разбираем строку таблицы
			
			// Правило это или группа правил
			Если МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1" Тогда
				ЭтоГруппа = Истина;
			Иначе
				ЭтоГруппа = Ложь;
			КонецЕсли;
			// Правила не-группы могут быть отключены в макете
			// Отключенные правила не выводим в дерево
			Если НЕ ЭтоГруппа Тогда
				Если МакетПравил.Область(ИмяОбластиСтроки + "|Отключено").Текст = "1" Тогда
					Отключено = Истина;
				Иначе
					Отключено = Ложь;
				КонецЕсли;
				Если Отключено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			Наименование = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
			
			ПредметКонтроля                  = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
			
			// Для групп больше ничего не нужно - добавляем новую строку раздела в дерево
			Если ЭтоГруппа Тогда
				СтрокаРаздела = ДеревоПроверок.Строки.Добавить();
				
				СтрокаРаздела.Идентификатор       = ИмяОбластиСтроки;
				СтрокаРаздела.Наименование        = Наименование;
				СтрокаРаздела.ЭтоГруппа           = Истина;
				СтрокаРаздела.ПредметКонтроля     = ПредметКонтроля;
				Продолжить;
			КонецЕсли;
			
			// Для обычных проверок продолжаем разбор строки
			КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНетОшибок").Текст;
			КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаОшибка").Текст;
			КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
			ПричиныОшибок                    = МакетПравил.Область(ИмяОбластиСтроки + "|ПричиныОшибок").Текст;
			Рекомендации                     = МакетПравил.Область(ИмяОбластиСтроки + "|Рекомендации").Текст;
			ТекстАлгоритма                   = МакетПравил.Область(ИмяОбластиСтроки + "|ТекстАлгоритма").Текст;
			Уровень		                     = МакетПравил.Область(ИмяОбластиСтроки + "|Уровень").Текст;
			КодОбработки		             = МакетПравил.Область(ИмяОбластиСтроки + "|КодОбработки").Текст;
			Если МакетПравил.Область(ИмяОбластиСтроки + "|РежимОтладки").Текст = "1" Тогда
				РежимОтладки = Истина;
			Иначе
				РежимОтладки = Ложь;
			КонецЕсли;
			
			// Добавляем новую строку проверки
			СтрокаПроверки = СтрокаРаздела.Строки.Добавить();
			
			СтрокаПроверки.Идентификатор                    = ИмяОбластиСтроки;
			СтрокаПроверки.Наименование                     = Наименование;
			СтрокаПроверки.ЭтоГруппа                        = Ложь;
			СтрокаПроверки.ПредметКонтроля                  = ПредметКонтроля;
			СтрокаПроверки.КомментарийРезультатаНетОшибок   = КомментарийРезультатаНетОшибок;
			СтрокаПроверки.КомментарийРезультатаОшибка      = КомментарийРезультатаОшибка;
			СтрокаПроверки.КомментарийРезультатаНеВыполнена = КомментарийРезультатаНеВыполнена;
			СтрокаПроверки.ПричиныОшибок                    = ПричиныОшибок;
			СтрокаПроверки.Рекомендации                     = Рекомендации;
			СтрокаПроверки.ТекстАлгоритма                   = ТекстАлгоритма;
			СтрокаПроверки.РежимОтладки                     = РежимОтладки;
			СтрокаПроверки.Уровень                  		= Уровень;
			СтрокаПроверки.КодОбработки                  	= КодОбработки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

# Если Клиент Тогда
	
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования детальных отчетов

// Универсальная процедура 
Процедура СформироватьДетальныйОтчет(СтрокаПравила, ТабДокумент)
	
	ИдентификаторПравила = СтрокаПравила.Идентификатор;
	
	СохраненРезультатЗапросаПроверки = ИсходящиеДанные.Свойство(ИдентификаторПравила+"РезультатЗапроса");
	СохраненаТаблицаОшибокПроверки   = ИсходящиеДанные.Свойство(ИдентификаторПравила+"ТаблицаЗначений");
	
	Если СохраненРезультатЗапросаПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"РезультатЗапроса"];
		Если ТипЗнч(ИсточникДанных) <> Тип("РезультатЗапроса") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"РезультатЗапроса!"); 
			Возврат;
		КонецЕсли;
	ИначеЕсли СохраненаТаблицаОшибокПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"ТаблицаЗначений"];
		Если ТипЗнч(ИсточникДанных) <> Тип("ТаблицаЗначений") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"ТаблицаЗначений!"); 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЕстьСтруктураЗаголовков    = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураЗаголовков");
	Если ЕстьСтруктураЗаголовков Тогда
		СтруктураЗаголовков = ИсходящиеДанные[ИдентификаторПравила+"СтруктураЗаголовков"];
	Иначе
		СтруктураЗаголовков = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураФорматаПолей = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураФорматаПолей");
	Если ЕстьСтруктураФорматаПолей Тогда
		СтруктураФорматаПолей = ИсходящиеДанные[ИдентификаторПравила+"СтруктураФорматаПолей"];
	Иначе
		СтруктураФорматаПолей = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураШириныКолонок = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураШириныКолонок");
	Если ЕстьСтруктураШириныКолонок Тогда
		СтруктураШириныКолонок = ИсходящиеДанные[ИдентификаторПравила+"СтруктураШириныКолонок"];
	Иначе
		СтруктураШириныКолонок = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураРасшифровки  = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураРасшифровки");
	Если ЕстьСтруктураРасшифровки Тогда
		СтруктураРасшифровки  = ИсходящиеДанные[ИдентификаторПравила+"СтруктураРасшифровки"];
	Иначе
		СтруктураРасшифровки  = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент) <> Тип("ТабличныйДокумент") Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	Построитель = Новый ПостроительОтчета;
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсточникДанных);
	Построитель.ЗаполнитьНастройки();
	Построитель.Выполнить();
	
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.ВыводитьПодвалТаблицы   = Ложь;
	Построитель.ВыводитьПодвалОтчета    = Ложь;
	
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	Построитель.ОформитьМакет();
	
	Макет = Построитель.Макет;
	
	ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
	Для НомСтроки = ШапкаТаблицыМакета.Верх По ШапкаТаблицыМакета.Низ Цикл
		Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
			ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, ,8);
			ТекОбласть.ЦветРамки = WebЦвета.Серый;
			ТекОбласть.ЦветФона  = ЦветФонаОшибок;
			
			ТекЗаголовок = ТекОбласть.Текст;
			
			Если ОбщаяСтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.ШиринаКолонки = ОбщаяСтруктураШириныКолонок[ТекЗаголовок];
			КонецЕсли;
			Если СтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.ШиринаКолонки = СтруктураШириныКолонок[ТекЗаголовок];
			КонецЕсли;
			
			Если ИдентификаторПравила = "ДокументыПомеченныеНаУдаление" Тогда
				ТекОбласть.ШиринаКолонки = 100;
			КонецЕсли;

			
			Если ОбщаяСтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.Текст = ОбщаяСтруктураЗаголовков[ТекЗаголовок];
			КонецЕсли;
			Если СтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.Текст = СтруктураЗаголовков[ТекЗаголовок];
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДеталиМакета = Макет.Область("Детали");
	ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
	Для НомСтроки = ДеталиМакета.Верх По ДеталиМакета.Низ Цикл
		Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
			ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ТекОбласть.ЦветРамки = WebЦвета.Серый;
			ТекИмяПараметра = ТекОбласть.Параметр;
			
			Если ОбщаяСтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.Формат = ОбщаяСтруктураФорматаПолей[ТекИмяПараметра];
			КонецЕсли;
			Если СтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.Формат = СтруктураФорматаПолей[ТекИмяПараметра];
			КонецЕсли;
			
			Если ОбщаяСтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.ПараметрРасшифровки = ОбщаяСтруктураРасшифровки[ТекИмяПараметра];
			КонецЕсли;
			Если СтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.ПараметрРасшифровки = СтруктураРасшифровки[ТекИмяПараметра];
			КонецЕсли;                         
			
		КонецЦикла;
	КонецЦикла;
	
	Построитель.Макет = Макет;
	
	Построитель.Вывести(ТабДокумент);
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования табличного документа отчета

// Если проверки не выполняются, отчет формируется как бланк
// (например, при открытии формы)
Процедура СформироватьОтчет(ДокРезультат, ВыполнятьПроверки = Истина)Экспорт
	
	ВремТабДокумент   = Новый ТабличныйДокумент;
	ВидимостьОбластей = Новый Структура;
	
	КолВыполняемыхПроверок = 0;
	КолВыполненныхПроверок = 0;
	КолПроверокСОшибками   = 0;
	
	// Общее количество выполняемых проверок показываем в заголовке отчета и в строке состояния
	МассивВыполняемыхСтрокДерева = ДеревоПроверок.Строки.НайтиСтроки(Новый Структура("Включить", 1), Истина);
	Для каждого СтрокаДерева Из МассивВыполняемыхСтрокДерева Цикл
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			КолВыполняемыхПроверок = КолВыполняемыхПроверок + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если ВыполнятьПроверки Тогда
		
		КонецДатыКон = КонецДня(ДатаКон);
		
		// Очищаем результаты прошлых вычислений, которые делали проверки, чтобы они не влияли на текущий цикл
		ИсходящиеДанные = Новый Структура;
		
		ТекущийЭлемент = ДокРезультат;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЕсли;
	
	ДокРезультат.Очистить();
	Макет = ПолучитьМакет("МакетОтчета");
	
	// Общая ширина колонок для вывода детальных отчетов
	ОбщаяШиринаКолонокОтчета = 0;
	НомПервойКолонкиДетальногоОтчета = 6;
	Для НомКолонки = НомПервойКолонкиДетальногоОтчета По Макет.ШиринаТаблицы Цикл
		ОбщаяШиринаКолонокОтчета = ОбщаяШиринаКолонокОтчета + Макет.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
	КонецЦикла;
	
	ОбластьШапкиМакета               = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовкаМакета           = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРазделаУчетаМакета        = Макет.ПолучитьОбласть("РазделУчета");
	ОбластьПроверкиМакета            = Макет.ПолучитьОбласть("Проверка");
	ОбластьПредметаКонтроляМакета    = Макет.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарияМакета         = Макет.ПолучитьОбласть("КомментарийРезультата");
	ОбластьПричинОшибокМакета        = Макет.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендацийМакета        = Макет.ПолучитьОбласть("Рекомендации");
	ОбластьПодвалаПроверкиМакета     = Макет.ПолучитьОбласть("ПодвалПроверки");
	ОбластьРазделителяРазделаМакета  = Макет.ПолучитьОбласть("РазделительРазделаУчета");
	ОбластьОбработкиМакета        	 = Макет.ПолучитьОбласть("Обработка");
	
	// Выводим шапку и заголовок отчета
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация.Наименование;
	КонецЕсли;
	ОбластьШапкиМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьШапкиМакета.Параметры.ПериодПроверки      = ПериодПроверкиСтрокой;
	ДокРезультат.Вывести(ОбластьШапкиМакета);
	
	// Шапку скрываем
	ОбластьШапки = ДокРезультат.Область(1, , ДокРезультат.ВысотаТаблицы, );
	ОбластьШапки.Видимость = Ложь;
	
	ДокРезультат.Вывести(ОбластьЗаголовкаМакета);
	
	ОбластьНадписиОПроверках = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - 1, 2, ДокРезультат.ВысотаТаблицы - 1, 2);
	ОбластьНадписиОбОшибках  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, 2);
	ОбластьСтрокиНадписиОбОшибках  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	
	ОбластьНадписиОПроверках.Текст = "Проведено проверок: 0 из " + КолВыполняемыхПроверок;
	ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
	ДокРезультат.Показать();
	
	// При открытии формы в отчете показываются только 2 верхние строки с количеством проверок
	Если НЕ ВыполнятьПроверки Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ?(ВыполнятьПроверки, "Выполняется проверка...", "Проверка не выполнялась");
	
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ПроверкаВыполнена");
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ОбнаруженыОшибки");
	
	НомерТекПроверки = 0;
	
	Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
		
		//Полностью отключенные разделы пропускаем
		Если СтрокаРаздела.Включить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Отделяем наименование раздела от проверок предыдущих разделов
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 1);
		
		ЗаполнитьЗначенияСвойств(ОбластьРазделаУчетаМакета.Параметры, СтрокаРаздела);
		ОбластьРазделаУчетаМакета.Параметры.РезультатПроверки = РезультатПроверки;
		ДокРезультат.Вывести(ОбластьРазделаУчетаМакета, 1);
		
		//Задаем области раздела документа-результата имя - идентификатор раздела
		ОбластьРазделаУчета = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.РазделУчета + 1, , ДокРезультат.ВысотаТаблицы, );
		ОбластьРазделаУчета.Имя = СтрокаРаздела.Идентификатор;
		Если ВыполнятьПроверки Тогда
			// Выделяем выполняющийся раздел курсивом
			Курсив = Истина;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , , Курсив);
			
			ПроведеныПроверкиВРазделе = Ложь;
			КолОшибокВРазделе         = 0;
			
			ДокРезультат.Показать();
		КонецЕсли;
		
		РаскрыватьПроверкиРаздела = Ложь;
		ДокРезультат.НачатьГруппуСтрок(, РаскрыватьПроверкиРаздела); // Заголовки проверок
		
		// Отделяем наименование раздела от проверок
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 2);
		
		Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
			
			Если СтрокаПроверки.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерТекПроверки = НомерТекПроверки + 1;
			НомерПервойСтрокиПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область заголовка проверки
			ЗаполнитьЗначенияСвойств(ОбластьПроверкиМакета.Параметры, СтрокаПроверки);
			ОбластьПроверкиМакета.Параметры.РезультатПроверки = РезультатПроверки;
			ДокРезультат.Вывести(ОбластьПроверкиМакета, 2);
			ОбластьСостоянияПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, 11, НомерПервойСтрокиПроверки, 13);
			
			РаскрыватьДеталиПроверки = Ложь;
			ДокРезультат.НачатьГруппуСтрок(, РаскрыватьДеталиПроверки); // Детали проверки
			
			НомерПервойСтрокиДеталейПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область предмета контроля
			ЗаполнитьЗначенияСвойств(ОбластьПредметаКонтроляМакета.Параметры, СтрокаПроверки);
			ДокРезультат.Вывести(ОбластьПредметаКонтроляМакета, 3);
			
			ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
			ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
			
			Если ВыполнятьПроверки Тогда
				
				Состояние("Выполняется проверка " + НомерТекПроверки + " из " + КолВыполняемыхПроверок + ": " + СтрокаПроверки.Наименование);
				
				ОбластьЗаголовкаПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, , НомерПервойСтрокиПроверки, );
				Курсив = Истина;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , , Курсив);
				
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ОбластьПроверки.Низ, 1, ОбластьПроверки.Низ, 1);
					ДокРезультат.Показать();
				КонецЕсли; 
				
				// Выполняем проверку правила
				ПроверитьПравило(СтрокаПроверки); 
				ПроверкаВыполнена = СтрокаПроверки.ПроверкаВыполнена;
				ОбнаруженыОшибки  = СтрокаПроверки.ОбнаруженыОшибки;
				
				Если ОбнаруженыОшибки Тогда
					КолПроверокСОшибками = КолПроверокСОшибками + 1;
					КолОшибокВРазделе    = КолОшибокВРазделе + 1;
				КонецЕсли;
				Если ПроверкаВыполнена Тогда
					КолВыполненныхПроверок = КолВыполненныхПроверок + 1;
					ПроведеныПроверкиВРазделе = Истина;
				КонецЕсли;
				
				Курсив = Ложь;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , , Курсив);
				
				Если ПроверкаВыполнена И ОбнаруженыОшибки Тогда
					
					// Выделяем проверку с ошибками цветом фона
					ОбластьОшибки = ДокРезультат.Область(ОбластьЗаголовкаПроверки.Верх, 2, 
					                ОбластьЗаголовкаПроверки.Низ, ОбластьСостоянияПроверки.Лево - 1);
					ОбластьОшибки.ЦветФона   =ЦветФонаОшибок;
					ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПроверки.Уровень) ИЛИ СтрокаПроверки.Уровень = "Ошибка" Тогда
						ОбластьСостоянияПроверки.Текст      = "Обнаружены ошибки";
						ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаКолОшибок;
					ИначеЕсли СтрокаПроверки.Уровень = "Возможная ошибка" Тогда 
						ОбластьСостоянияПроверки.Текст      = "Обнаружены возможные ошибки";
						ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаВозможнаяОшибка;
					ИначеЕсли СтрокаПроверки.Уровень = "Предупреждение" Тогда 
						ОбластьСостоянияПроверки.Текст      = "Предупреждение";
						ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаПредупреждение;
					КонецЕсли;
					ОбластьСостоянияПроверки.ЦветТекста = ЦветТекстаКолОшибок;
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					ОбластьКомментария = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.КомментарийРезультата + 1, 2, 
					                     ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
					ОбластьКомментария.ЦветФона = ЦветФонаОшибок;
					
					// Добавляем возможные причины ошибок 
					ОбластьПричинОшибокМакета.Параметры.ПричиныОшибок = СтрокаПроверки.ПричиныОшибок;
					ДокРезультат.Вывести(ОбластьПричинОшибокМакета);
					
					// Добавляем рекомендации по устранению ошибок
					ОбластьРекомендацийМакета.Параметры.Рекомендации = СтрокаПроверки.Рекомендации;
					ДокРезультат.Вывести(ОбластьРекомендацийМакета);
					
					Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПроверки.КодОбработки) Тогда
						ОбластьОбработкиМакета.Параметры.КодОбработки = СтрокаПроверки.КодОбработки;
						ДокРезультат.Вывести(ОбластьОбработкиМакета);
					КонецЕсли;
					
					// Добавляем детальный отчет об ошибках
					ВремТабДокумент = Новый ТабличныйДокумент;
					СформироватьДетальныйОтчет(СтрокаПроверки, ВремТабДокумент);
					
					Если ВремТабДокумент.ВысотаТаблицы > 0 Тогда
						
						ДокРезультат.НачатьГруппуСтрок( , Ложь);
						
						ОбластьДетальногоОтчета      = ВремТабДокумент.Область(1, 1, 
						ВремТабДокумент.ВысотаТаблицы, ВремТабДокумент.ШиринаТаблицы);
						НомПервойСтрокиНовогоФормата = ДокРезультат.ВысотаТаблицы + 1;
						ОбластьНовогоФорматаСтрок    = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, , 
						НомПервойСтрокиНовогоФормата + ВремТабДокумент.ВысотаТаблицы, );
						ОбластьНовогоФорматаСтрок.СоздатьФорматСтрок();
						ОбщаяШиринаКолонокДетальногоОтчета = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							ОбщаяШиринаКолонокДетальногоОтчета = ОбщаяШиринаКолонокДетальногоОтчета + ШиринаТекКолонки;
						КонецЦикла;
						КоэффИзмененияШирины = ?(ОбщаяШиринаКолонокДетальногоОтчета = 0, 1, ОбщаяШиринаКолонокОтчета / ОбщаяШиринаКолонокДетальногоОтчета);
						ИзменятьШиринуКолонок = КоэффИзмененияШирины <= 1.2;
						НоваяОбщаяШирина = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы - 1 Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							Если ИзменятьШиринуКолонок Тогда
								НужнаяШирина = Окр(ШиринаТекКолонки * КоэффИзмененияШирины,0);
							Иначе
								НужнаяШирина = ШиринаТекКолонки;
							КонецЕсли;
							ДокРезультат.Область(НомПервойСтрокиНовогоФормата, НомКолонки + 4).ШиринаКолонки = НужнаяШирина;
							
							НоваяОбщаяШирина = НоваяОбщаяШирина + НужнаяШирина;
						КонецЦикла;
						
						ПоследняяЯчейка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, ВремТабДокумент.ШиринаТаблицы + 4);
						Если ИзменятьШиринуКолонок Тогда
							ПоследняяЯчейка.ШиринаКолонки = ОбщаяШиринаКолонокОтчета - НоваяОбщаяШирина;
						Иначе
							ШиринаПоследнейКолонки = ВремТабДокумент.Область(1, ВремТабДокумент.ШиринаТаблицы).ШиринаКолонки;
							ПоследняяЯчейка.ШиринаКолонки = ШиринаПоследнейКолонки;
						КонецЕсли;
						
						ОбластьЗаголовка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, 6, НомПервойСтрокиНовогоФормата, 6);
						ОбластьЗаголовка.Текст = "Детальный отчет об ошибках";
						ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , 8, Истина);
						
						ОбластьПриемник = ДокРезультат.Область(НомПервойСтрокиНовогоФормата + 1, 5);
						ДокРезультат.ВставитьОбласть(ОбластьДетальногоОтчета, ОбластьПриемник);
						
						ДокРезультат.ЗакончитьГруппуСтрок();
					КонецЕсли;
					
				ИначеЕсли НЕ ПроверкаВыполнена Тогда
					
					ОбластьСостоянияПроверки.Текст      = "Проверка не выполнена";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				Иначе // ПроверкаВыполнена И НЕ ОбнаруженыОшибки
					
					ОбластьСостоянияПроверки.Текст      = "Ошибок не обнаружено";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				КонецЕсли;
				
				// Переопределяем область проверки и область деталей проверки - включаем добавленные строки
				ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
				ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
				
			КонецЕсли;
			
			// Добавляем область - разделитель
			ДокРезультат.Вывести(ОбластьПодвалаПроверкиМакета);
			
			ДокРезультат.ЗакончитьГруппуСтрок(); // Строки деталей проверки
			
			ОбластьПроверки.Имя = СтрокаПроверки.Идентификатор;
			ОбластьДеталейПроверки.Имя = "Детали"+СтрокаПроверки.Идентификатор;
				
			Если ВыполнятьПроверки Тогда
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 1, ДокРезультат.ВысотаТаблицы, 1);
				КонецЕсли;
				
				ОбластьНадписиОПроверках.Текст = "Проведено проверок: " + КолВыполненныхПроверок +" из " + КолВыполняемыхПроверок;
				ОбластьНадписиОбОшибках.Текст = "Обнаружено ошибок: " + КолПроверокСОшибками;
				Если КолПроверокСОшибками > 0 Тогда
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаОшибок;
				Иначе
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
				КонецЕсли;
				
				НомерПоследнейСтрокиПроверки = ДокРезультат.ВысотаТаблицы;
				ДокРезультат.Область(НомерПервойСтрокиПроверки, ,НомерПоследнейСтрокиПроверки, ).Видимость = Ложь;
				
				ДокРезультат.Показать();
				
			КонецЕсли; 
				
		КонецЦикла;
		
		ДокРезультат.ЗакончитьГруппуСтрок(); // Строки проверок раздела
		
		Если ВыполнятьПроверки Тогда
			
			СтрокаРаздела.ОбнаруженыОшибки = КолОшибокВРазделе > 0;
			
			Курсив = Ложь;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , , Курсив);
			
			ОбластьСостоянияРаздела = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 11, ОбластьРазделаУчета.Верх, 13);
			Если СтрокаРаздела.ОбнаруженыОшибки Тогда
				// Выделяем раздел с ошибками цветом
				ОбластьОшибки = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 2, ОбластьРазделаУчета.Низ, ОбластьСостоянияРаздела.Лево - 1);
				ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
				ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
				ОбластьСостоянияРаздела.Текст  = "Обнаружены ошибки (" + КолОшибокВРазделе + ")";
				ОбластьСостоянияРаздела.ЦветФона   = ЦветФонаКолОшибок;
				ОбластьСостоянияРаздела.ЦветТекста = ЦветТекстаКолОшибок;
			ИначеЕсли ПроведеныПроверкиВРазделе Тогда
				ОбластьСостоянияРаздела.Текст = "Ошибок не обнаружено";
			Иначе
				ОбластьСостоянияРаздела.Текст = "Проверка не выполнена";
			КонецЕсли;
			
			ДокРезультат.Показать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокРезультат.ТолькоПросмотр = Истина;
	ДокРезультат.ФиксацияСверху = ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок;
	//ДокРезультат.ПовторятьПриПечатиСтроки = ДокРезультат.Область(ВысотаОбластей.Шапка + 1, , ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок);
	ДокРезультат.ОбластьПечати = ДокРезультат.Область(1, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	ДокРезультат.ИмяПараметровПечати = "ЭкспрессПроверкаВеденияУчета";
	
	ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(1, 1, 1, 1);
	ДокРезультат.Показать();
	
КонецПроцедуры

# КонецЕсли

# Если Клиент Тогда
НП = Новый НастройкаПериода;
НП.РедактироватьКакПериод   = Истина;
НП.РедактироватьКакИнтервал = Ложь;
НП.ВариантНастройки         = ВариантНастройкиПериода.Период;

ЦветФонаОшибок       = Новый Цвет(253, 236, 229); // светло-розовый
ЦветТекстаОшибок     = Новый Цвет(83, 23, 22);    // темно-коричневый
ЦветФонаКолОшибок    = Новый Цвет(214, 43, 52);    // красный
ЦветТекстаКолОшибок  = Новый Цвет(255, 255, 255);  // ярко-желтый
ЦветФонаБезОшибок    = Новый Цвет(249, 255, 236); // светло-зеленый

ЦветФонаПредупреждение = Новый Цвет(92, 152, 144);; 
ЦветФонаВозможнаяОшибка= Новый Цвет(243, 172, 80);;

# КонецЕсли
	
ВысотаОбластей = Новый Структура;
Макет   = ПолучитьМакет("МакетОтчета");
ВысотаОбластей.Вставить("Шапка", Макет.ПолучитьОбласть("Шапка").ВысотаТаблицы);
ВысотаОбластей.Вставить("Заголовок", Макет.ПолучитьОбласть("Заголовок").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделУчета", Макет.ПолучитьОбласть("РазделУчета").ВысотаТаблицы);
ВысотаОбластей.Вставить("Проверка", Макет.ПолучитьОбласть("Проверка").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПредметКонтроля", Макет.ПолучитьОбласть("ПредметКонтроля").ВысотаТаблицы);
ВысотаОбластей.Вставить("КомментарийРезультата", Макет.ПолучитьОбласть("КомментарийРезультата").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПричиныОшибок", Макет.ПолучитьОбласть("ПричиныОшибок").ВысотаТаблицы);
ВысотаОбластей.Вставить("Рекомендации", Макет.ПолучитьОбласть("Рекомендации").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПодвалПроверки", Макет.ПолучитьОбласть("ПодвалПроверки").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделительРазделаУчета", Макет.ПолучитьОбласть("РазделительРазделаУчета").ВысотаТаблицы);

ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));

ОбщаяСтруктураФорматаПолей = Новый Структура;
ОбщаяСтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = """"""Декада с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("НачПериода", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("КонПериода", "ДФ = дд.ММ.гггг");

ОбщаяСтруктураЗаголовков = Новый Структура;
ОбщаяСтруктураЗаголовков.Вставить("ПериодГод", "Год");
ОбщаяСтруктураЗаголовков.Вставить("ПериодКвартал", "Квартал");
ОбщаяСтруктураЗаголовков.Вставить("ПериодМесяц", "Месяц");
ОбщаяСтруктураЗаголовков.Вставить("ПериодНеделя","Неделя");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДень", "День");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДекада","Декада");
ОбщаяСтруктураЗаголовков.Вставить("ПериодПолугодие","Полугодие");
ОбщаяСтруктураЗаголовков.Вставить("НачПериода", "Начало периода");
ОбщаяСтруктураЗаголовков.Вставить("КонПериода", "Конец периода");

ОбщаяСтруктураШириныКолонок = Новый Структура;
ОбщаяСтруктураШириныКолонок.Вставить("Документ", 40);
ОбщаяСтруктураШириныКолонок.Вставить("Дата", 20);

ОбщаяСтруктураРасшифровки = Новый Структура;
ОбщаяСтруктураРасшифровки.Вставить("Документ", "Документ");

//Обработки.ИсправлениеДляРеализацийВUSDКурсаДокумента.ПолучитьФорму().Открыть();