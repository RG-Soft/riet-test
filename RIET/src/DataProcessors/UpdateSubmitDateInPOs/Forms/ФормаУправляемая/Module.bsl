
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Разделитель = """,""";
	ПерваяСтрокаДанных = 12;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайл();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Файлы csv|*.csv";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
	КонецЕсли;
	 
	ЗагрузитьPOИзФайла(FullPath);		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьPOИзФайла(ПолноеИмяФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Please, select a file!",
			, "Объект", "FullPath");
			Возврат;		
	КонецЕсли;
	
	// Прочитаем файл в текстовый документ
	Состояние("Reading file...");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ТолькоПросмотр = Истина;	
	Попытка
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
	Исключение
		Сообщить("Failed to read file!
			|" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Разберем прочитанный текст
	Состояние("Parsing file...");
	Попытка
		РазобратьТекстовыйДокумент(ТекстовыйДокумент);
	Исключение
		Сообщить("Failed to parse file!
			|" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Состояние("Updating POs...");
	
	Попытка
		СоздатьОбъектыБазы();
		ПоказатьОповещениеПользователя(, , "POs were successfully loaded");
	Исключение
		Сообщить(ОписаниеОшибки());
		Предупреждение(
			"There were errors!
			|No PO was loaded!",
			60,
			"Attention!");
		Возврат;
	КонецПопытки;

	Попытка
		ПереместитьФайлВПапкуDone(ПолноеИмяФайла);
	Исключение
		Сообщить(
			"Failed to move file to directory Done!
			|" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// РАЗБОР ФАЙЛА

&НаКлиенте
Функция РазобратьТекстовыйДокумент(ТекстовыйДокумент)
	
	НомерТекущейСтроки = ПерваяСтрокаДанных;
	
	Объект.ДанныеPOs.Очистить();
		
	Состояние("Determining the structure of the file...");
	СтрокаЗаголовков = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
	МассивЗаголовков = РазложитьСтрокуВМассив(СтрокаЗаголовков, Разделитель);	
	СоответствиеКолонокИИндексов = ПолучитьСоответствиеКолонокИИндексов(МассивЗаголовков);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	КоличествоСтолбцов = МассивЗаголовков.Количество();	
	ПредыдущийМассивДанных = Неопределено;
	СтруктураПоискаPO = Новый Структура("Код");
	КоэффициентИндикатора = 100 / (КоличествоСтрок * 2);
	
	ВремяНачала = ТекущаяДата();
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Если ТекущаяДата() - ВремяНачала > 2 Тогда
			Процент = Окр(НомерТекущейСтроки * КоэффициентИндикатора, 2);
			Состояние("Разобрано " + (НомерТекущейСтроки-1) + " строк из " + КоличествоСтрок + " (" + Процент + "%)", Процент);
			ВремяНачала = ТекущаяДата();
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		ПрефиксТекстаОшибки = "Строка №" + НомерТекущейСтроки + ": ";
			
		СтрокаДанных = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если ПустаяСтрока(СтрокаДанных) Тогда
			Продолжить;
		КонецЕсли;
		МассивДанных = РазложитьСтрокуВМассив(СтрокаДанных, Разделитель);
		
		// Бывает так, что в каком-нибудь поле закрадывается перенос строки
		// В этом случае надо искать продолжение ячеек на следующей строке
		Если ПредыдущийМассивДанных <> Неопределено Тогда
			
			ИндексПоследнейЯчейки = ПредыдущийМассивДанных.ВГраница();
			Если МассивДанных.Количество() Тогда
				
				ПредыдущийМассивДанных[ИндексПоследнейЯчейки] = ПредыдущийМассивДанных[ИндексПоследнейЯчейки] + МассивДанных[0];
				МассивДанных.Удалить(0);
				Для Каждого ЯчейкаДанных Из МассивДанных Цикл
					ПредыдущийМассивДанных.Добавить(ЯчейкаДанных);
				КонецЦикла;
				
			КонецЕсли;
			
			МассивДанных = ПредыдущийМассивДанных;
			
		КонецЕсли;
		
		ТекущееКоличествоЯчеек = МассивДанных.Количество();
		Если ТекущееКоличествоЯчеек < КоличествоСтолбцов Тогда	
			
			ПредыдущийМассивДанных = МассивДанных;
			Продолжить;
						
		КонецЕсли;
		
		ПредыдущийМассивДанных = Неопределено;
		
		// PO
		
		СтруктураПоискаPO.Код = МассивДанных[СоответствиеКолонокИИндексов.Получить("PO Num")];	
		Если Объект.ДанныеPOs.НайтиСтроки(СтруктураПоискаPO).Количество() = 0 Тогда
		
			НоваяСтрокаPO = Объект.ДанныеPOs.Добавить();
			
			НоваяСтрокаPO.Код =	СтруктураПоискаPO.Код;
			
			НоваяСтрокаPO.SubmitDate = МассивДанных[СоответствиеКолонокИИндексов.Получить("Submit Date")];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуВМассив(Строка, Разделитель)
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
	
	ы = 0;
	ВГраница = Массив.ВГраница();
	Пока ы <= ВГраница Цикл
		Массив[ы] = СокрЛП(Массив[ы]);
		Массив[ы] = СтрЗаменить(Массив[ы], """", "");
		ы = ы + 1;
	КонецЦикла;
	
    Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеКолонокИИндексов(МассивЗаголовков)
	
	СоответствиеКолонокИИндексов = Новый Соответствие;
	СоответствиеКолонокИИндексов.Вставить("PO Num", 0);
	СоответствиеКолонокИИндексов.Вставить("Submit Date", 0);
	
	Для Каждого КлючИЗначение Из СоответствиеКолонокИИндексов Цикл
		
		ИндексКолонки = МассивЗаголовков.Найти(КлючИЗначение.Ключ);
		Если ИндексКолонки = Неопределено Тогда
			ВызватьИсключение "Failed to determine the position of the column """ + КлючИЗначение.Ключ + """!";
		Иначе
			СоответствиеКолонокИИндексов.Вставить(КлючИЗначение.Ключ, ИндексКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКолонокИИндексов;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ ОБЪЕКТОВ БАЗЫ

// ДОДЕЛАТЬ
&НаСервере
Процедура СоздатьОбъектыБазы()
	
	Отказ = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ТекНомерСтроки = 0;
	Для Каждого СтрокаPO Из Объект.ДанныеPOs Цикл
		
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
		SubmitDate = ПреобразоватьСтрокуВДату(СтрокаPO.SubmitDate);
		Если SubmitDate = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"PO """ + СтрокаPO.Код + """: failed to convert """ + СтрокаPO.SubmitDate + """ to Submit date!",
				,,, Отказ);
		КонецЕсли;
			
		// PO
					
		Если Отказ Тогда
			
			// Если Отказ, значит транзакция будет отменена, значит не стоит тратить силы на поиски PO
			НайденнаяPO = Справочники.ЗаявкиНаЗакупку.ПустаяСсылка();
			
		Иначе
			
			// При загрузке PO не может происходить ошибок, так как не преобразовываются значения и не ищутся ссылки,
			//	поэтому для целей оптимизации обращение к ячейкам Excel происходит только если НЕ Отказ
			НайденнаяPO = Справочники.ЗаявкиНаЗакупку.НайтиПоКоду(СтрокаPO.Код);
				
			Если НайденнаяPO.Пустая() Тогда 
				
				НомерСтрокиСПроблемой = ПерваяСтрокаДанных + ТекНомерСтроки - 1;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find PO """ + СтрокаPO.Код + """ in " + Строка(НомерСтрокиСПроблемой) + " row!");
				
			Иначе
				POОбъект = НайденнаяPO.ПолучитьОбъект();
			КонецЕсли; 
			
			РГСофтКлиентСервер.УстановитьЗначение(POОбъект.SubmitDate, НачалоДня(SubmitDate)); 
			
			Если POОбъект.Модифицированность() Тогда
				Попытка
					POОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to save PO """ + POОбъект + """:
							|" + ОписаниеОшибки(),
						,,, Отказ);
				КонецПопытки;
			КонецЕсли; 
				
		КонецЕсли;

	КонецЦикла; // Цикл по строкам

	Если Отказ Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение "Failed to load POs";
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(Знач Строка)
	
	Строка = СтрЗаменить(Строка, ":", "");
	Строка = СтрЗаменить(Строка, "-", "");
	Строка = СтрЗаменить(Строка, " ", "");
	Строка = СтрЗаменить(Строка, Символы.НПП, "");
	
	Если СтрНайти(Строка, "/") > 0 Тогда
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "/");
		Если МассивПодстрок.Количество() <> 3 Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТретийЭлемент = МассивПодстрок[2];
		Год = ?(СтрДлина(ТретийЭлемент) = 2, "20" + ТретийЭлемент, ТретийЭлемент);
		ВторойЭлемент = МассивПодстрок[1];
		День = ?(СтрДлина(ВторойЭлемент) = 1, "0" + ВторойЭлемент, ВторойЭлемент);
		ПервыйЭлемент = МассивПодстрок[0];
		Месяц = ?(СтрДлина(ПервыйЭлемент) = 1, "0" + ПервыйЭлемент, ПервыйЭлемент);
		Строка = Год + Месяц + День;
	КонецЕсли;
	
	Попытка
		Дата = Дата(Строка);
		Возврат Дата;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕЩЕНИЕ В ПАПКУ DONE

&НаКлиенте
Процедура ПереместитьФайлВПапкуDone(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ПапкаDone = Новый Файл(Файл.Путь + "Done");	
	Если НЕ ПапкаDone.Существует() Тогда
		СоздатьКаталог(ПапкаDone.ПолноеИмя);
	КонецЕсли;
	
	ПереместитьФайл(ПолноеИмяФайла, ПапкаDone.ПолноеИмя + "\" + Файл.Имя);	
		
КонецПроцедуры
