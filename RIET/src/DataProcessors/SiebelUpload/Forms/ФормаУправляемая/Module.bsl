Перем ИмяФайлаИсходное;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Лист = 1;
	
	мТаблицаШапок.Очистить();
	мТаблицаДеталей.Очистить();
		
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ОсновнойИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойИнвойсинговыйЦентр");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеПриАктивизацииСтроки(Элемент)
	
	ТаблицаПриАктивизацииСтроки("Новые");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененныеПриАктивизацииСтроки(Элемент)
	
	ТаблицаПриАктивизацииСтроки("Измененные");
	
КонецПроцедуры

&НаКлиенте
Процедура СтарыеПриАктивизацииСтроки(Элемент)
	
	ТаблицаПриАктивизацииСтроки("Старые");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриАктивизацииСтроки(ИмяТаб)
	
	ТекДанные = Элементы[ИмяТаб].ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
			
		ИД = ТекДанные.Идентификатор;
		Строки = мТаблицаДеталей.НайтиСтроки(Новый Структура("Идентификатор", ИД));
		Детали.Очистить();
		Для Каждого СтрокаТаблицы Из Строки Цикл
			СтрокаТЧ = Детали.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
		КонецЦикла;
	Иначе
		Детали.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.csv)|*.csv|Файл данных (*.xls)|*.xls";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"csv";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	ИмяФайла;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	  	
	Текст = "";
	Excel = Новый COMОбъект("Excel.Application");
	//добавила проверку, попытку и сообщение об ошибке Федотова Л., РГ-Софт, 04.10.12, вопрос №SLI-0002878
	Если ИмяФайла = "" Тогда
		Предупреждение("Выберите файл с данными.");
		Возврат;
	Иначе
		Попытка
	    	Excel.WorkBooks.Open(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли; 
	Sheet = Excel.Workbooks(1).WorkSheets(Лист);
	Parse1(Sheet);
	
	Excel.Quit();

КонецПроцедуры
          
&НаКлиенте
Процедура InternetLoad(Команда)
	
	Если НЕ (Прав(ИмяФайла,3) = "xls" или Прав(ИмяФайла,3) = "csv") Тогда
		ИмяФайлаИсходное = ИмяФайла;
		ИмяФайла = "http://crm-ofs.aodc.slb.com/Export/" + ИмяФайлаИсходное + ".csv"	
	КонецЕсли; 
	
	Адрес = "crm-ofs.aodc.slb.com";
	Соединение = Новый HTTPСоединение(Адрес);
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ПозицияСимвола = СтрНайти(СтрокаСоединения, "Ref=");
	ИмяБазы = Прав(СтрокаСоединения,СтрДлина(СтрокаСоединения)-ПозицияСимвола-4);
	ИмяБазы = Лев(ИмяБазы, СтрДлина(ИмяБазы)-2);

	ВремКаталог = КаталогВременныхФайлов() + ИмяБазы + "Siebel";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");
	ИмяФайлаВремКаталог = ВремКаталог + "\" + ИмяФайлаИсходное + ".csv";	
	
	Попытка
		Соединение.Получить("Export/" + ИмяФайлаИсходное + ".csv", ИмяФайлаВремКаталог);
	Исключение 
		Сообщить("Не удалось получить файл"); 
		Возврат;
	КонецПопытки; 	
	
	Если НЕ ФайлСуществует(ИмяФайлаВремКаталог) Тогда
		Возврат;	
	КонецЕсли; 
	
	Текст = "";
	Excel = Новый COMОбъект("Excel.Application");
	//исправил Трефиленков Дмитрий, РГ-Софт, 11.09.2011
	Попытка
		//Excel.WorkBooks.Open(ИмяФайлаСервер);
		Excel.WorkBooks.Open(ИмяФайлаВремКаталог);
	Исключение
		РГСофтКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл по причине: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//конец исправления
	Sheet = Excel.Workbooks(1).WorkSheets(Лист);
	Parse1(Sheet);
	
	Excel.Quit();

КонецПроцедуры

&НаКлиенте
Функция ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
	    Возврат Истина;
	Иначе
	    Сообщить("Файл не существует.");
        Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Parse1(Sheet)
	
	Новые.Очистить();
	Старые.Очистить();
	Измененные.Очистить();
	Детали.Очистить();
	мТаблицаДеталей.Очистить();
	мТаблицаШапок.Очистить();
	
	i = 2;
	Пока СокрЛП(Sheet.Cells(i,2).Value) <> "" Цикл
		i = i + 1;
	КонецЦикла;
	Элементы.Индикатор.МаксимальноеЗначение = i;
	Элементы.Индикатор.МинимальноеЗначение = 2;
	Индикатор = 2;

	
	i = 2;
	
	Пока СокрЛП(Sheet.Cells(i,2).Value) <> "" Цикл
		
		Если СтрНайти(СокрЛП(Sheet.Cells(i,1).Value),""",") Тогда
			d = 1;
		Иначе
			d = 0;
		КонецЕсли;
		
		// Проверяем на сдвиг по OH - Customer Representative Inv
		//[РКХ->]
		Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
			//Изменила Федотова Л., РГ-Софт, 15.11.13, вопрос PA_-0000072
			//Если НЕ Лев(СокрЛП(Sheet.Cells(i,19).Value), 1) = "4" И НЕ Лев(СокрЛП(Sheet.Cells(i,19).Value), 4) = "1698" Тогда
			УсловиеНаСдвиг = НЕ Лев(СокрЛП(Sheet.Cells(i,19).Value), 3) = "364";
		Иначе     		
			УсловиеНаСдвиг = НЕ Лев(СокрЛП(Sheet.Cells(i,19).Value), 1) = "4" И НЕ Лев(СокрЛП(Sheet.Cells(i,19).Value), 4) = "1698";
		КонецЕсли;
		Если УсловиеНаСдвиг Тогда
		//[<-РКХ]	
			g = 2;
		Иначе
			g = 0;
		КонецЕсли;
		
		ID = СокрЛП(Sheet.Cells(i,27-d-g).Value);
		Док = ПолучитьSiebelOrdersПоНомеру(ID);  	
		МассивСтрок = мТаблицаШапок.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТЧ = МассивСтрок[0];
		иначе
			СтрокаТЧ = мТаблицаШапок.Добавить();
			СтрокаТЧ.ID = ID;
			Попытка
				СтрокаТЧ.Дата = Дата(Sheet.Cells(i,34-d-g).Value);
			Исключение
				Попытка
					СтрокаТЧ.Дата = Дата(Sheet.Cells(i,16-d-g).Value);
				Исключение
				КонецПопытки;	
			КонецПопытки;	
			Если d = 0 Тогда
				СтрокаТЧ.Client = СокрЛП(Sheet.Cells(i,1).Value);
				СтрокаТЧ.CustomerID = СтрЗаменить(СокрЛП(Sheet.Cells(i,2).Value),Символы.НПП,"");
			Иначе
				СтрокаКлиента = СокрЛП(Sheet.Cells(i,1).Value);
				Разделение = СтрНайти(СтрокаКлиента,""",");
				СтрокаТЧ.Client = СокрЛП(Лев(СтрокаКлиента,Разделение-1));
				СтрокаТЧ.CustomerID = СтрЗаменить(Сред(СтрокаКлиента,Разделение+2,9),Символы.НПП,"");
			КонецЕсли;
			СтрокаТЧ.LawsonInvoice = СокрЛП(Sheet.Cells(i,21-d-g).Value);
			СтрокаТЧ.LawsonOrder = СокрЛП(Sheet.Cells(i,22-d-g).Value);
			СтрокаТЧ.Segment = СокрЛП(Sheet.Cells(i,32-d-g).Value);
			СтрокаТЧ.NetTotal = СокрЛП(Sheet.Cells(i,8-d).Value);
			СтрокаТЧ.Type = СокрЛП(Sheet.Cells(i,35-d-g).Value);
			СтрокаТЧ.GeoMarket = СокрЛП(Sheet.Cells(i,36-d-g).Value);
			СтрокаТЧ.Status = СокрЛП(Sheet.Cells(i,31-d-g).Value);
			СтрокаТЧ.Name = СтрЗаменить(СокрЛП(Sheet.Cells(i,7-d).Value),Символы.НПП,"");
			СтрокаТЧ.Location = СтрЗаменить(СокрЛП(Sheet.Cells(i,28-d-g).Value),Символы.НПП,"");
			СтрокаТЧ.Agreement = СтрЗаменить(СокрЛП(Sheet.Cells(i,3-d).Value),Символы.НПП,"");
			СтрокаТЧ.ShipTo = СтрЗаменить(СокрЛП(Sheet.Cells(i,29-d-g).Value),Символы.НПП,"");
			СтрокаТЧ.Oilfield = СтрЗаменить(СокрЛП(Sheet.Cells(i,12-d-g).Value),Символы.НПП,"");
			СтрокаТЧ.Well = СтрЗаменить(СокрЛП(Sheet.Cells(i,33-d-g).Value),Символы.НПП,"");
			//Добавила Федотова Л., РГ-Софт, 21.10.15, вопрос SLI-0005889
			СтрокаТЧ.AU = СтрЗаменить(СокрЛП(Sheet.Cells(i,37-d-g).Value),Символы.НПП,"");
			//

			Попытка
				СтрокаТЧ.GLDate = Дата(Sheet.Cells(i,16-d-g).Value);
			Исключение
			КонецПопытки;	
			СтрокаТЧ.Идентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Док) Тогда
			СтрокаТЧ.Вид = "Новые";
		Иначе
			СтрокаТЧ.Вид = "Старые";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док) И РеквизитыДокументаОтличаются(Док, СтрокаТЧ.ПолучитьИдентификатор()) Тогда 
			СтрокаТЧ.Вид = "Измененные";
		КонецЕсли;
		
		СтрокаДеталей = мТаблицаДеталей.Добавить();
		СтрокаДеталей.Идентификатор = СтрокаТЧ.Идентификатор;
		СтрокаДеталей.PartNumber = СтрЗаменить(СокрЛП(Sheet.Cells(i,50-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.Description = СтрЗаменить(СокрЛП(Sheet.Cells(i,56-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.LineID = СтрЗаменить(СокрЛП(Sheet.Cells(i,45-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.ParentLineID = СтрЗаменить(СокрЛП(Sheet.Cells(i,49-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.Номенклатура = СтрЗаменить(СокрЛП(Sheet.Cells(i,51-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.Account = СтрЗаменить(СокрЛП(Sheet.Cells(i,41-d-g).Value),Символы.НПП,"");
		СтрокаДеталей.ЕдиницаИзмерения = СтрЗаменить(СокрЛП(Sheet.Cells(i,57-d-g).Value),Символы.НПП,"");
		Попытка
			СтрокаДеталей.Сумма = Число(СокрЛП(Sheet.Cells(i,44-d-g).Value));
			СтрокаДеталей.Количество = Число(СокрЛП(Sheet.Cells(i,55-d-g).Value));
			СтрокаДеталей.Цена = СтрокаДеталей.Сумма/СтрокаДеталей.Количество;
		Исключение
		КонецПопытки;	

		i = i + 1;	
		Индикатор = Индикатор + 1;
	КонецЦикла;
	
	Строки = мТаблицаШапок.НайтиСтроки(Новый Структура("Вид", "Новые"));
	Для Каждого СтрокаТаблицы Из Строки Цикл
		СтрокаТЧ = Новые.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	Элементы.ГруппаНовые.Заголовок = "Новые (" + Строки.Количество() + " поз.)";
	
	Строки = мТаблицаШапок.НайтиСтроки(Новый Структура("Вид", "Старые"));
	Для Каждого СтрокаТаблицы Из Строки Цикл
		СтрокаТЧ = Старые.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	Элементы.ГруппаСтарые.Заголовок = "Старые (" + Строки.Количество() + " поз.)";

	Строки = мТаблицаШапок.НайтиСтроки(Новый Структура("Вид", "Измененные"));
	Для Каждого СтрокаТаблицы Из Строки Цикл
		СтрокаТЧ = Измененные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	Элементы.ГруппаИзмененные.Заголовок = "Измененные (" + Строки.Количество() + " поз.)";	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьSiebelOrdersПоНомеру(ID)
	
	Возврат Документы.SiebelOrders.НайтиПоНомеру(ID);
	
КонецФункции

&НаСервере
Функция РеквизитыДокументаОтличаются(ДокСсылка, ИдентификаторСтроки)
	
	СтрокаТЧ = мТаблицаШапок.НайтиПоИдентификатору(ИдентификаторСтроки);
	Док = ДокСсылка.ПолучитьОбъект();
	Если СтрокаТЧ.ID <> СокрЛП(Док.Номер) ИЛИ
		СтрокаТЧ.Дата <> Док.Дата ИЛИ
		СтрокаТЧ.Client <> СокрЛП(Док.Client) ИЛИ
		СтрокаТЧ.CustomerID <> СокрЛП(Док.CustomerID) ИЛИ
		СтрокаТЧ.LawsonInvoice <> СокрЛП(Док.LawsonInvoice) ИЛИ
		СтрокаТЧ.LawsonOrder <> СокрЛП(Док.LawsonOrder) ИЛИ
		СтрокаТЧ.Segment <> СокрЛП(Док.Segment) ИЛИ
		СтрокаТЧ.NetTotal <> Док.NetTotal ИЛИ
		СтрокаТЧ.Type <> СокрЛП(Док.Type) ИЛИ
		СтрокаТЧ.Name <> СокрЛП(Док.Name) ИЛИ
		СтрокаТЧ.Status <> СокрЛП(Док.Status) ИЛИ
		СтрокаТЧ.Agreement <> СокрЛП(Док.Agreement) ИЛИ
		СтрокаТЧ.ShipTo <> СокрЛП(Док.ShipTo) ИЛИ
		СтрокаТЧ.Oilfield <> СокрЛП(Док.Oilfield) ИЛИ
		СтрокаТЧ.Well <> СокрЛП(Док.Well) ИЛИ
		СтрокаТЧ.ProductLine <> СокрЛП(Док.ProductLine) ИЛИ
		СтрокаТЧ.Location <> Док.Location Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// Создать Документы

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	Для Каждого СтрокаТЧ Из Новые Цикл
		Док = Документы.SiebelOrders.СоздатьДокумент();
		ЗаполнитьРеквизитыДокумента(СтрокаТЧ, Док);		
		
		Строки = мТаблицаДеталей.НайтиСтроки(Новый Структура("Идентификатор",СтрокаТЧ.Идентификатор));
		Для Каждого СтрокаДеталей Из Строки Цикл
			СтрокаДок = Док.Details.Добавить();
			СтрокаДок.Account = СтрокаДеталей.Account;
			СтрокаДок.PartNumber = СтрокаДеталей.PartNumber;
			СтрокаДок.Description = СтрокаДеталей.Description;
			СтрокаДок.LineID = СтрокаДеталей.LineID;
			СтрокаДок.ParentLineID = СтрокаДеталей.ParentLineID;
			СтрокаДок.ЕдиницаИзмерения = СтрокаДеталей.ЕдиницаИзмерения;
			СтрокаДок.Количество = СтрокаДеталей.Количество;
			СтрокаДок.Номенклатура = СтрокаДеталей.Номенклатура;
			СтрокаДок.Сумма = СтрокаДеталей.Сумма;
			СтрокаДок.Цена = СтрокаДеталей.Цена;
		КонецЦикла;
		Док.Записать();
		Сообщить("Создан документ " + Док);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Измененные Цикл
		Док = Документы.SiebelOrders.НайтиПоНомеру(СтрокаТЧ.ID);
		Если Док.Пустая() Тогда
			Продолжить;
		КОнецЕсли;
		Док = Док.ПолучитьОбъект();
		ЗаполнитьРеквизитыДокумента(СтрокаТЧ, Док);			
		
		Док.Details.Очистить();
		Строки = мТаблицаДеталей.НайтиСтроки(Новый Структура("Идентификатор",СтрокаТЧ.Идентификатор));
		Для Каждого СтрокаДеталей Из Строки Цикл
			СтрокаДок = Док.Details.Добавить();
			СтрокаДок.Account = СтрокаДеталей.Account;
			СтрокаДок.PartNumber = СтрокаДеталей.PartNumber;
			СтрокаДок.Description = СтрокаДеталей.Description;
			СтрокаДок.LineID = СтрокаДеталей.LineID;
			СтрокаДок.ParentLineID = СтрокаДеталей.ParentLineID;
			СтрокаДок.ЕдиницаИзмерения = СтрокаДеталей.ЕдиницаИзмерения;
			СтрокаДок.Количество = СтрокаДеталей.Количество;
			СтрокаДок.Номенклатура = СтрокаДеталей.Номенклатура;
			СтрокаДок.Сумма = СтрокаДеталей.Сумма;
			СтрокаДок.Цена = СтрокаДеталей.Цена;
		КонецЦикла;
		Док.Записать();
		Сообщить("Изменен документ " + Док);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокумента(СтрокаТЧ, Док)
	
	Док.Номер = СтрокаТЧ.ID; 
	Док.Дата = СтрокаТЧ.Дата;
	Док.Client = СтрокаТЧ.Client;
	Док.CustomerID = СтрокаТЧ.CustomerID;
	Док.LawsonInvoice = СтрокаТЧ.LawsonInvoice;
	Док.LawsonOrder = СтрокаТЧ.LawsonOrder;
	Док.Segment = СтрокаТЧ.Segment;
	Док.AU = СтрокаТЧ.AU;
	Док.NetTotal = СтрокаТЧ.NetTotal;
	Док.Type = СтрокаТЧ.Type;
	Док.Name = СтрокаТЧ.Name;
	Док.Status = СтрокаТЧ.Status;
	Док.Location = СтрокаТЧ.Location;
	Док.Agreement = СтрокаТЧ.Agreement;
	Док.Oilfield = СтрокаТЧ.Oilfield;
	Док.ProductLine = СтрокаТЧ.ProductLine;
	Док.ShipTo = СтрокаТЧ.ShipTo;
	Док.Well = СтрокаТЧ.Well;
	Док.Geomarket = СтрокаТЧ.GeoMarket;
	Док.GLDate = СтрокаТЧ.GLDate;
	Док.Ответственный = ТекущийПользователь;
	Док.ИнвойсинговыйЦентр = ОсновнойИнвойсинговыйЦентр;
	
КонецПроцедуры
 
