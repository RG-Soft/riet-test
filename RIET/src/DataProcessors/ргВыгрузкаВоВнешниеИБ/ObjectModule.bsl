
Процедура ВыполнитьВыгрузку() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() И Не РГСофтСерверПовтИспСеанс.ЭтоRIET_test() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В текущей базе обмен не работает!";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаТЧ Из СписокБаз Цикл
		
		Если Не СтрокаТЧ.Выгружать Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ВыполнитьОбменПоНастройке(СтрокаТЧ.База);
		Исключение
		    ЗаписьЖурналаРегистрации_(СтрокаТЧ.База, ОписаниеОшибки(), Истина);
		КонецПопытки; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВыполнитьОбменПоНастройке(УзелПланаОбмена)
	 	
	НастройкаОбмена = УзелПланаОбмена;
	
	Если УзелПланаОбмена.ЗагружатьДанные Тогда
		ВыполнитьЗагрузкуДанных(НастройкаОбмена);
	КонецЕсли; 
	
	// если не заполнены правила выгрузки - ничего не делаем
	Если Не ЗначениеЗаполнено(УзелПланаОбмена.ПравилаОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	// определяем количество объектов для выгрузки, если 0 - ничего не делаем
	КоличествоИзменений = ргМодульОбменаДанными.ВернутьКоличествоОбъектовДляВыгрузки(УзелПланаОбмена);
	Если КоличествоИзменений = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// создаем обработку обмена
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена="Выгрузка";
	
	// 1. Устанавливаем файл правил обмена
	ФайлПравилОбмена = ПолучитьИмяВременногоФайла("xml");
	
	Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда
		ТекстПравилОбмена = ЗначениеИзСтрокиВнутр(УзелПланаОбмена.ПравилаОбмена);
	ИначеЕсли РГСофтСерверПовтИспСеанс.ЭтоRIET_test() Тогда 
		ТекстПравилОбмена = ЗначениеИзСтрокиВнутр(УзелПланаОбмена.ПравилаОбмена_Test);
	КонецЕсли;
	
	ЗаписьТекста = Новый ТекстовыйДокумент();
	ЗаписьТекста.УстановитьТекст(ТекстПравилОбмена);
	ЗаписьТекста.Записать(ФайлПравилОбмена, КодировкаТекста.UTF8);
	
	ОбработкаОбмена.ИмяФайлаПравилОбмена = ФайлПравилОбмена;
	Попытка
		ОбработкаОбмена.ЗагрузитьПравилаОбмена();
	Исключение
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Ошибка при загрузке правил обмена: " + ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;
	
	// 2. Обходим дерево выгрузки, устанавливаем узел обмена
	УстановитьУзелВПравилах(ОбработкаОбмена, УзелПланаОбмена);
	
	// 3. настройки, которых нет в справочнике
	ОбработкаОбмена.ЗагружатьДанныеВРежимеОбмена		   = Истина;
	ОбработкаОбмена.ЗаписыватьРегистрыНаборамиЗаписей	   = Истина;
	ОбработкаОбмена.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	ОбработкаОбмена.ВыгружатьТолькоРазрешенные			   = Истина;
	//ОбработкаОбмена.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена = Истина;
	
	// 4. выполняем выгрузку
	ОбработкаОбмена.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	
	Если УзелПланаОбмена.ТипНастройки = "Обмен через веб-сервис" Тогда
		ВыполнитьОбменВС(УзелПланаОбмена, ОбработкаОбмена);
	ИначеЕсли УзелПланаОбмена.ТипНастройки = "Обмен через файловый ресурс" Тогда 
		ВыполнитьВыгрузкуВКаталог(УзелПланаОбмена, ОбработкаОбмена);
	КонецЕсли; 
	
	// 5. удаление временного файла с правилами
	Попытка
		УдалитьФайлы(ФайлПравилОбмена);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьУзелВПравилах(ОбработкаОбмена, УзелОбмена)
	
	ТаблицаПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки;
	УстановитьУзелРекурсивно(ОбработкаОбмена, УзелОбмена, ТаблицаПравилВыгрузки);
	
КонецПроцедуры

Процедура УстановитьУзелРекурсивно(ОбработкаОбмена, УзелОбмена, ТаблицаПравилВыгрузки)
	
	Для Каждого СтрокаДерева Из ТаблицаПравилВыгрузки.Строки Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда 
			УстановитьУзелРекурсивно(ОбработкаОбмена, УзелОбмена, СтрокаДерева);
		КонецЕсли;	
		//СтрокаДерева.Включить=1;
		Если Не СтрокаДерева.ЭтоГруппа Тогда 
			СтрокаДерева.СсылкаНаУзелОбмена =  УзелОбмена;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПрокси(НастройкаОбмена)
	
	Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда
		СтрокаПодключения = НастройкаОбмена.АдресБазыПриемника;
	ИначеЕсли РГСофтСерверПовтИспСеанс.ЭтоRIET_test() Тогда 
		СтрокаПодключения = НастройкаОбмена.АдресБазыПриемника_Test;
	КонецЕсли;
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	Определение = Новый WSОпределения(СтрокаПодключения, 
					НастройкаОбмена.ЛогинПодключения,  
					НастройкаОбмена.ПарольПодключения,,30, SSL);
	Прокси = Новый WSПрокси (Определение, "http://www.1c.ru/docmng", 
					НастройкаОбмена.ИмяWS, 
					НастройкаОбмена.ИмяWS + "Soap",,,SSL);
	Прокси.Пользователь = НастройкаОбмена.ЛогинПодключения;
	Прокси.Пароль = НастройкаОбмена.ПарольПодключения;
	
	Возврат Прокси;
	
КонецФункции
 
Процедура ВыполнитьОбменВС(НастройкаОбменаWS, ОбработкаОбмена)
	
	НастройкаОбмена = "" + НастройкаОбменаWS;
	
	Попытка
		Прокси = ПолучитьПрокси(НастройкаОбменаWS);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации_(НастройкаОбменаWS, "Веб-сервис базы приемника недоступен. " + ТекстОшибки, Истина);
		Возврат;
	КонецПопытки;	
	
	ОбработкаОбмена.АрхивироватьФайл = Истина;
	// сначала выгружаем в темповый файл, т.к. запись сразу в каталог очень долго
	ИмяВремФайлаОбмена = ПолучитьИмяВременногоФайла("zip");
	ФайлПротокола = ПолучитьИмяВременногоФайла("txt");
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена			= ФайлПротокола;
	ОбработкаОбмена.ДописыватьДанныеВПротоколОбмена = Истина;
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяВремФайлаОбмена;
	
	// таблицу изменений надо получать до выгрузки - чтобы снималось ровно с того, что выгрузилось
	ОбработкаОбмена.ВыполнитьВыгрузку();
	ПротоколВыгрузки = ПолучитьТекстПротокола(ФайлПротокола);
		
	// если при выгрузке ошибка - делаем возврат
	Если ОбработкаОбмена.ФлагОшибки Тогда 
		ЗаписьЖурналаРегистрации_(НастройкаОбменаWS, ПротоколВыгрузки, Истина);
		Возврат;
	Иначе 
		ЗаписьЖурналаРегистрации_(НастройкаОбменаWS, ПротоколВыгрузки);
	КонецЕсли;
	
	ДвоичныеДанныеДляОбмена = Новый ДвоичныеДанные(ИмяВремФайлаОбмена);
	Попытка
		РезультатЗагрузки = Прокси.ЗагрузитьФайлОбмена(ДвоичныеДанныеДляОбмена);
		// если успешно загрузилось в приемник - снимаем регистрацию с выгруженных объектов
		Если Найти(РезультатЗагрузки, "Загрузка выполнена успешно:")>0 Тогда 
			ПланыОбмена.УдалитьРегистрациюИзменений(НастройкаОбменаWS, ОбработкаОбмена.ргНомерСообщения);
		КонецЕсли;
		ЕстьОшибка = (Найти(РезультатЗагрузки, "Ошибка при загрузке данных")>0);
		ЗаписьЖурналаРегистрации_(НастройкаОбменаWS, СокрЛП(РезультатЗагрузки), ЕстьОшибка);
	Исключение
		ЗаписьЖурналаРегистрации_(НастройкаОбменаWS, "Ошибка загрузки: " + ОписаниеОшибки(), Истина);
	КонецПопытки;
	 	
	УдалитьФайлы(ИмяВремФайлаОбмена);
	Прокси = Неопределено;
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуВКаталог(НастройкаОбмена, ОбработкаОбмена)
	
	ОбработкаОбмена.АрхивироватьФайл = Истина;
	// сначала выгружаем в темповый файл, т.к. запись сразу в каталог очень долго
	ИмяВремФайлаОбмена = ПолучитьИмяВременногоФайла("zip");
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяВремФайлаОбмена;
	ФайлПротокола = ПолучитьИмяВременногоФайла("txt");
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена			= ФайлПротокола;
	ОбработкаОбмена.ДописыватьДанныеВПротоколОбмена = Истина;
	ОбработкаОбмена.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2;
	// таблицу изменений надо получать до выгрузки - чтобы снималось ровно с того, что выгрузилось
	ОбработкаОбмена.ВыполнитьВыгрузку();
	
	ПротоколВыгрузки = ПолучитьТекстПротокола(ФайлПротокола);
		
	// если при выгрузке ошибка - делаем возврат
	Если ОбработкаОбмена.ФлагОшибки Тогда 
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ПротоколВыгрузки, Истина);
		Возврат;
	Иначе 
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ПротоколВыгрузки);
	КонецЕсли;

	Попытка
		КопироватьФайл(ИмяВремФайлаОбмена, НастройкаОбмена.КаталогОбменаИнформацией+"\Выгрузка_Закупки_" + Формат(ТекущаяДата(),"ДФ=ddMMyyyy_ЧЧммсс") + ".zip");
		УдалитьФайлы(ИмяВремФайлаОбмена);
	Исключение
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ОписаниеОшибки(), Истина);
	КонецПопытки; 
		
КонецПроцедуры
 
Процедура ЗаписьЖурналаРегистрации_(НастройкаВыгрузки, ТекстЗаписи, ЭтоОшибка = Ложь, ЗагрузкаДанных=Ложь)
	
	ТекДата = ТекущаяДата();
	КлючЗаписи = ПолучитьКлюч(НастройкаВыгрузки, ТекДата);
	
	НаборЗаписей = РегистрыСведений.ргРезультатыВыгрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.База.Установить(НастройкаВыгрузки);
	НаборЗаписей.Отбор.КлючЗаписи.Установить(КлючЗаписи);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ТекДата;
	НоваяЗапись.База = НастройкаВыгрузки;
	НоваяЗапись.Результат = ТекстЗаписи;
	НоваяЗапись.КлючЗаписи = КлючЗаписи;
	НоваяЗапись.Ошибка = ЭтоОшибка;
	НоваяЗапись.ЗагрузкаДанных = ЗагрузкаДанных;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьКлюч(База, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезультатыВыгрузки.КлючЗаписи КАК КлючЗаписи
	|ИЗ
	|	РегистрСведений.ргРезультатыВыгрузки КАК РезультатыВыгрузки
	|ГДЕ
	|	РезультатыВыгрузки.Период = &Период
	|	И РезультатыВыгрузки.База = &База
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючЗаписи УБЫВ";

	Запрос.УстановитьПараметр("База", База);
	Запрос.УстановитьПараметр("Период", Период);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
		Возврат Выборка.КлючЗаписи + 1;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьТекстПротокола(ФайлПротокола) 
	
	//Чтение данных из файла построчно
	Текст = Новый ЧтениеТекста(ФайлПротокола);
	Стр = Текст.ПрочитатьСтроку();
	ТекстПротокола = Стр + Символы.ПС;
	
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		Стр = Текст.ПрочитатьСтроку();
		ТекстПротокола = ТекстПротокола + Стр + Символы.ПС;
	КонецЦикла;
	
	ТекстПротокола = Лев(ТекстПротокола, СтрДлина(ТекстПротокола)-1);	
	ТекстПротокола = СокрЛП(ТекстПротокола);
	
	Возврат ТекстПротокола;
	
КонецФункции

///////////////////////////////////////////
// ЗАГРУЗКА ДАННЫХ

Процедура ВыполнитьЗагрузкуДанных(НастройкаОбмена)
	
	Если НастройкаОбмена.HOB Тогда
		ВыполнитьЗагрузкуДанных_HOB(НастройкаОбмена);
		Возврат;
	КонецЕсли; 
	
	Попытка
		Прокси = ПолучитьПрокси(НастройкаОбмена);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Веб-сервис базы приемника недоступен. " + ТекстОшибки, Истина, Истина);
		Возврат;
	КонецПопытки;
	
	Попытка
		ОбщиеДанныеУПП = Прокси.ПолучитьДанные(НастройкаОбмена.КодУзлаВнешнейИБ, НастройкаОбмена.ИмяПланаОбмена).Получить();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ТекстОшибки, Истина, Истина);
		Возврат;
	КонецПопытки;
	
	Если ОбщиеДанныеУПП.Результат<>"Данные успешно выгружены" Тогда
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ОбщиеДанныеУПП.Результат, Истина, Истина);
		Возврат;
	КонецЕсли; 
	
	// нет изменений, загружать нечего
	МассивДанныхУПП = ЗначениеИзСтрокиВнутр(ОбщиеДанныеУПП.ТаблицаИзменений);
	Если МассивДанныхУПП.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// сохраняем как файл
	ФайлОбмена = ПолучитьИмяВременногоФайла("zip");
	ОбщиеДанныеУПП.ДанныеУПП.Записать(ФайлОбмена);
	
	// загружаем через УниверсальныйОбменДаннымиXML
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.ИмяФайлаОбмена = ФайлОбмена;
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.ЗагружатьДанныеВРежимеОбмена = Истина;
	
	// результат загрузки пишем в темповый лог
	ФайлПротокола = ПолучитьИмяВременногоФайла("txt");
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена			= ФайлПротокола;
	ОбработкаОбмена.ДописыватьДанныеВПротоколОбмена = Истина;
	
	ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Начало загрузки",,Истина);
	ОбработкаОбмена.ВыполнитьЗагрузку();
	Протокол = ПолучитьТекстПротокола(ФайлПротокола);
	УдалитьФайлы(ФайлОбмена);
	
	Если ОбработкаОбмена.ФлагОшибки Тогда 
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Ошибка при загрузке данных: " + Символы.ПС + Протокол, Истина, Истина);
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Загрузка выполнена успешно: " + Символы.ПС + Протокол,,Истина);
	Прокси.ОчиститьИзмененияУзла(НастройкаОбмена.КодУзлаВнешнейИБ, НастройкаОбмена.ИмяПланаОбмена, ОбщиеДанныеУПП.ТаблицаИзменений);
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанных_HOB(НастройкаОбмена)
	
	Попытка
		Прокси = ПолучитьПрокси(НастройкаОбмена);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Веб-сервис базы приемника недоступен. " + ТекстОшибки, Истина, Истина);
		Возврат;
	КонецПопытки;
	
	Попытка
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("КодУзлаОбмена",  НастройкаОбмена.КодУзлаВнешнейИБ);
		СтрПараметры.Вставить("ИмяПланаОбмена", НастройкаОбмена.ИмяПланаОбмена);
		ОбщиеДанныеУПП = Прокси.ПолучитьДанныеУПП_Общая(ЗначениеВСтрокуВнутр(СтрПараметры)).Получить();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ТекстОшибки, Истина);
		Возврат;
	КонецПопытки;
	
	// нет изменений, загружать нечего
	Если ОбщиеДанныеУПП.Результат = "Нет данных для выгрузки" Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОбщиеДанныеУПП.Результат<>"Данные успешно выгружены" Тогда
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, ОбщиеДанныеУПП.Результат, Истина);
		Возврат;
	КонецЕсли; 
	
	// сохраняем как файл
	ФайлОбмена = ПолучитьИмяВременногоФайла("zip");
	ОбщиеДанныеУПП.ДанныеУПП.Записать(ФайлОбмена);
	
	// загружаем через УниверсальныйОбменДаннымиXML
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.ИмяФайлаОбмена = ФайлОбмена;
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.ЗагружатьДанныеВРежимеОбмена = Истина;
	
	// результат загрузки пишем в темповый лог
	ФайлПротокола = ПолучитьИмяВременногоФайла("txt");
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена			= ФайлПротокола;
	ОбработкаОбмена.ДописыватьДанныеВПротоколОбмена = Истина;
	
	ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Начало загрузки");
	ОбработкаОбмена.ВыполнитьЗагрузку();
	Протокол = ПолучитьТекстПротокола(ФайлПротокола);
	УдалитьФайлы(ФайлОбмена);
	
	Если ОбработкаОбмена.ФлагОшибки Тогда 
		ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Ошибка при загрузке данных: " + Символы.ПС + Протокол);
		Возврат;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации_(НастройкаОбмена, "Загрузка выполнена успешно: " + Символы.ПС + Протокол);
	
	СтрДанные = Новый Структура;
	СтрДанные.Вставить("КодУзлаОбмена",  НастройкаОбмена.КодУзлаВнешнейИБ);
	СтрДанные.Вставить("ИмяПланаОбмена", НастройкаОбмена.ИмяПланаОбмена);
	СтрДанные.Вставить("НомерСообщения", ОбщиеДанныеУПП.НомерСообщения);
	Прокси.ОчиститьИзмененияУзла_Общая(ЗначениеВСтрокуВнутр(СтрДанные));
	
КонецПроцедуры
