
//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайлы();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathsНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлы()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Файлы PDF|*.pdf";
	ДиалогВыбораФайла.МножественныйВыбор 			= Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPaths.ЗагрузитьЗначения(ДиалогВыбораФайла.ВыбранныеФайлы);
				
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

// ДОДЕЛАТЬ
&НаКлиенте
Процедура Load(Команда)
	
	Если FullPaths.Количество() = 0 Тогда
		
		ВыбратьФайлы();
		
		Если FullPaths.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"No file selected!",
				, "Объект", "FullPaths");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ЗАКОММЕНТИРОВАТЬ СЛЕДУЮЩИЕ 1 СТРОЧКУ, ОНИ НУЖНА ТОЛЬКО ВРЕМЕННО ДЛЯ МОНИТОРИНГА СКОРОСТИ РАБОТЫ В ТУРКМЕНИТАНЕ
	//ТочноеВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПолноеИмяPDFToTXTProgram = CustomsКлиент.ПолучитьПолноеИмяPDFToTXTProgram();
	Если НЕ ЗначениеЗаполнено(ПолноеИмяPDFToTXTProgram) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = FullPaths.Количество();
	Для Каждого ЭлементСписка Из FullPaths Цикл
		
		ИндексФайла = FullPaths.Индекс(ЭлементСписка); 
		Состояние("Loading file #" + (ИндексФайла + 1), 100 * ИндексФайла / КоличествоФайлов);
		
		СтруктураРезультатов = ЗагрузитьInvoiceИзФайла(ЭлементСписка.Значение, ПолноеИмяPDFToTXTProgram);
				
		// ЗАКОММЕНТИРОВАТЬ СЛЕДУЮЩИЕ 3 СТРОЧКИ, ОНИ НУЖНА ТОЛЬКО ВРЕМЕННО ДЛЯ МОНИТОРИНГА СКОРОСТИ РАБОТЫ В ТУРКМЕНИТАНЕ
		//Если НЕ Final Тогда
		//	ОценкаПроизводительностиВызовСервераРГСофт.ЗафиксироватьВремяВыполненияНаКлиенте(ТочноеВремяНачала, ТекущаяУниверсальнаяДатаВМиллисекундах(), "InvoiceЗагрузкаПредварительногоКлиент", СтруктураРезультатов.ImportInvoice);
		//КонецЕсли;
		
		Если СтруктураРезультатов.Открыть Тогда
			ПоказатьЗначение(,СтруктураРезультатов.ImportInvoice);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРезультатов.ТекстПредупреждения) Тогда
			Предупреждение(СтруктураРезультатов.ТекстПредупреждения,
				60,
				"Attention!");
		КонецЕсли;
		
		// ЗАКОММЕНТИРОВАТЬ СЛЕДУЮЩИЕ 3 СТРОЧКИ, ОНИ НУЖНА ТОЛЬКО ВРЕМЕННО ДЛЯ МОНИТОРИНГА СКОРОСТИ РАБОТЫ В ТУРКМЕНИТАНЕ
		//Если НЕ Final Тогда
		//	ТочноеВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРезультатов.ТекстОповещения) Тогда
			ПоказатьОповещениеПользователя(,,СтруктураРезультатов.ТекстОповещения);	
		КонецЕсли;
		
	КонецЦикла; 
	
	CustomsКлиент.ПопытатьсяУдалитьPDFToTXTProgram(ПолноеИмяPDFToTXTProgram);		
			
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьInvoiceИзФайла(ПолныйПутьКФайлуPDF, ПолноеИмяPDFToTXTProgram) Экспорт
	
	СтруктураВозврата = Новый Структура("ТекстПредупреждения, ТекстОповещения, ImportInvoice, Открыть");
		
	ТекстовыйДокумент = CustomsКлиент.ПолучитьТекстовыйДокументИзФайлаPDF(ПолныйПутьКФайлуPDF, ПолноеИмяPDFToTXTProgram);	
	Если ТекстовыйДокумент = Неопределено Тогда
		СтруктураВозврата.ТекстПредупреждения = "Failed to convert PDF to text!
			|See errors on the right pane.";
		СтруктураВозврата.Открыть = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	//проверим первую строку, возможно это инвойс по радиации
	ПерваяСтрока = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(1));
	Если СтрНайти(ПерваяСтрока, "Invoice:") > 0 Тогда 
		Возврат ЗагрузитьИнвойсПоРадиацииИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF);
	КонецЕсли;
	
	Если Final Тогда
		
		Возврат ЗагрузитьФинальныйИнвойсИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF);
		
	Иначе
			
		Возврат ЗагрузитьНовыйИнвойсИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF);
					
	КонецЕсли;
	
КонецФункции


// НОВЫЙ ИНВОЙС

&НаКлиенте
Функция ЗагрузитьНовыйИнвойсИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF)
	   	
	Отказ = Ложь;
	СтруктураВозврата = Новый Структура("ТекстПредупреждения, ТекстОповещения, ImportInvoice, Открыть");
	СтруктураВозврата.Открыть = Ложь;
		
	ПолнаяСтруктураШапки = СформироватьПолнуюСтруктуруШапки(ТекстовыйДокумент, Отказ);
	
	Если Отказ Тогда
			
		СтруктураВозврата.ТекстПредупреждения = "Invoice was not loaded from " + ПолныйПутьКФайлуPDF + "!
			|See errors on the right side of the window.";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	СформироватьТаблицуДанныхДляСтрокИнвойса(Отказ, ТекстовыйДокумент);
	Если Отказ Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "Invoice was not loaded from " + ПолныйПутьКФайлуPDF + "!
			|See errors on the right side of the window.";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	УниверсальноеВремяИзменения = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	АдресФайла = Неопределено;
	ПоместитьФайл(АдресФайла, ПолныйПутьКФайлуPDF,, Ложь, УникальныйИдентификатор);
	
	СтруктураРезультатов = ЗагрузитьНовыйИнвойсИзСтруктуры(ПолнаяСтруктураШапки, ТаблицаДанныхСтрок, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла);
						
	Если ЗначениеЗаполнено(СтруктураРезультатов.ТекстКритическихОшибок) Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "Invoice " + ПолнаяСтруктураШапки.Номер + " was not loaded!
			|" + СтруктураРезультатов.ТекстКритическихОшибок;		
		
	ИначеЕсли СтруктураРезультатов.БылиНедочеты Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "There were some errors during loading of Import invoice " + ПолнаяСтруктураШапки.Номер + ".
			|See errors on the right side of the Import invoice loading window.";		
			
	Иначе
		
		СтруктураВозврата.ТекстОповещения = "Invoice " + ПолнаяСтруктураШапки.Номер + " was successfully posted";
		
	КонецЕсли;
	
	СтруктураВозврата.Открыть = Ложь;
	Если Не ЗначениеЗаполнено(СтруктураВозврата.ImportInvoice) Тогда
		СтруктураВозврата.ImportInvoice = СтруктураРезультатов.Invoice;
		СтруктураВозврата.Открыть = Истина;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
				
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьНовыйИнвойсИзСтруктуры(СтруктураШапки, Знач ТаблицаСтрок, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстКритическихОшибок", "");
	СтруктураВозврата.Вставить("БылиНедочеты", Ложь);
	СтруктураВозврата.Вставить("Invoice", Документы.Инвойс.ПустаяСсылка());
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выборка = ПолучитьВыборкуИнвойсов(СтруктураШапки.Номер);
	Если Выборка.Следующий() Тогда
		
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Invoice " + СтруктураШапки.Номер + " is already in the system!";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	НовИнв = Документы.Инвойс.СоздатьДокумент();

	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНИМ ШАПКУ ДОКУМЕНТА
	
	// Specialist
	НовИнв.Specialist = ПараметрыСеанса.ТекущийПользователь;
	
	// Process level
	SpecialistProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(НовИнв.Specialist, "ProcessLevel");
	Если ЗначениеЗаполнено(SpecialistProcessLevel) Тогда
		НовИнв.ProcessLevel = SpecialistProcessLevel;
	КонецЕсли;
		
	// GOLD
	НовИнв.Голд = Истина;	
	
	// No.
	НовИнв.Номер = СтруктураШапки.Номер;
	
	// Date
	НовИнв.Дата = ImportExportСервер.ПолучитьДатуИзСтроки(СтруктураШапки.Дата);
	Если НЕ ЗначениеЗаполнено(НовИнв.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Дата + """ to ""Invoice date""!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Incoterms
	НовИнв.УсловияПоставки = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Incoterms", "Код", СтруктураШапки.Incoterms);
	Если НЕ ЗначениеЗаполнено(НовИнв.УсловияПоставки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Incoterms by Code """ + СтруктураШапки.Incoterms + """!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Currency
	НовИнв.Валюта = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Валюты", "Код", "840");
	Если Не ЗначениеЗаполнено(НовИнв.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find currency by Code ""840""!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// DO no.
	НовИнв.НомерЗаявкиНаДоставку = СтруктураШапки.НомерЗаявкиНаДоставку;
	
	// Total ex-works
	TotalExWorks = ПолучитьЧислоИзСтроки(СтруктураШапки.СуммаДокумента);
	Если TotalExWorks = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.СуммаДокумента + """ to ""Total ex-works""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.СуммаДокумента = TotalExWorks;
	КонецЕсли;
	
	// Insurance
	Insurance = ПолучитьЧислоИзСтроки(СтруктураШапки.Страховка);
	Если Insurance = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Страховка + """ to ""Insurance""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Страховка = Insurance;
	КонецЕсли;
	
	// Freight
	Freight = ПолучитьЧислоИзСтроки(СтруктураШапки.Фрахт);
	Если Freight = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Фрахт + """ to ""Freight""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Фрахт = Freight;
	КонецЕсли;
	
	// Handling
	Handling = ПолучитьЧислоИзСтроки(СтруктураШапки.Упаковка);
	Если Handling = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Упаковка + """ to ""Handling""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Упаковка = Handling;
	КонецЕсли;
			
	// SoldTo
	НовИнв.Покупатель = CustomsСерверПовтИсп.ПолучитьSoldToПоНаименованиюИAddress1(СтруктураШапки.SoldToName, СтруктураШапки.SoldToAddress1);
	Если НЕ ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
		
		НовИнв.Покупатель = ПолучитьSoldToПоBORGs(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаСтрок, "OrderNumber"));
		
		Если НЕ ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Sold-to by Name '" + СтруктураШапки.SoldToName + "' and Address 1 '" + СтруктураШапки.SoldToAddress1 + "'!",
			,,, СтруктураВозврата.БылиНедочеты);
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
		
		// Consign-to
		Если ЗначениеЗаполнено(СтруктураШапки.ConsignToName) И ЗначениеЗаполнено(СтруктураШапки.ConsignToAddress1) Тогда
			
			НовИнв.Декларант = CustomsСерверПовтИсп.ПолучитьConsignToПоSoldToNameAndAddress1(НовИнв.Покупатель, СтруктураШапки.ConsignToName, СтруктураШапки.ConsignToAddress1);
			Если НЕ ЗначениеЗаполнено(НовИнв.Декларант) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Consign-to by Sold-to '" + СокрЛП(НовИнв.Покупатель) + "', Name '" + СтруктураШапки.ConsignToName + "' and Address 1 '" + СтруктураШапки.ConsignToAddress1 + "'!",
					,,, СтруктураВозврата.БылиНедочеты);
			КонецЕсли;
				
		КонецЕсли;
		
		// Операционная локация
		КодОперационнойЛокации = "";
		КодSoldTo = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(НовИнв.Покупатель, "Код");
		// НУ ГОВНОКОДИЩЕ!
		Если СокрЛП(КодSoldTo) = "SLI RU" Тогда
			
			КодОперационнойЛокации = Прав(СтруктураШапки.ГрузополучательАдрес4, 4);
			НовИнв.OperatingLocation = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "OperatingLocations", "Код", КодОперационнойЛокации); 
			Если НЕ ЗначениеЗаполнено(НовИнв.OperatingLocation) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Operating location by Code '" + КодОперационнойЛокации + "'!",
					,,, СтруктураВозврата.БылиНедочеты);	
			КонецЕсли;
							
		ИначеЕсли ЗначениеЗаполнено(СтруктураШапки.ГрузополучательАдрес1) Тогда
			
			НовИнв.OperatingLocation =  РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "OperatingLocations", "Address1", СтруктураШапки.ГрузополучательАдрес1);
			Если НЕ ЗначениеЗаполнено(НовИнв.OperatingLocation) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Operating location by Address 1 '" + СтруктураШапки.ГрузополучательАдрес1 + "'!",
					,,, СтруктураВозврата.БылиНедочеты);	
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;	
	
	// Seller
	НовИнв.Продавец = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "LegalEntities", "Наименование", СтруктураШапки.SellerName);
	Если НЕ ЗначениеЗаполнено(НовИнв.Продавец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Seller by Name """ + СтруктураШапки.SellerName + """!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Контракт
	Если ЗначениеЗаполнено(НовИнв.Декларант)
		И ЗначениеЗаполнено(НовИнв.Дата)
		И ЗначениеЗаполнено(НовИнв.Продавец)
		И ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
		
		ConsignToDoNotRequireContract = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(НовИнв.Декларант, "DoNotRequireContractInInvoices");
		Если НЕ ConsignToDoNotRequireContract Тогда
										
			МассивContracts = Справочники.Contracts.ПолучитьДляInvoice(НовИнв.Дата, НовИнв.Продавец, НовИнв.Декларант, НовИнв.УсловияПоставки);
			Если МассивContracts.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Contract with
					|Seller """ + СокрЛП(НовИнв.Продавец) + """,
					|Consign-to """ + СокрЛП(НовИнв.Декларант) + """,
					|Incoterms """ + СокрЛП(НовИнв.УсловияПоставки) + """,
					|Date < """ + Формат(НовИнв.Дата, "ДЛФ=D") + """,
					|Expiry date > """ + Формат(НовИнв.Дата, "ДЛФ=D") + """!",
					,,, СтруктураВозврата.БылиНедочеты);
					
			ИначеЕсли МассивContracts.Количество() = 1 Тогда
					
				НовИнв.Contract = МассивContracts[0];	
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Found more than one Contract with
					|Seller """ + СокрЛП(НовИнв.Продавец) + """,
					|Consign-to """ + СокрЛП(НовИнв.Декларант) + """,
					|Incoterms """ + СокрЛП(НовИнв.УсловияПоставки) + """,
					|Date < """ + Формат(НовИнв.Дата, "ДЛФ=D") + """,
					|Expiry date > """ + Формат(НовИнв.Дата, "ДЛФ=D") + """!",
					,,, СтруктураВозврата.БылиНедочеты);
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Deliver-to (этот реквизит уже не нужен, но пока грузим)
	НовИнв.УДАЛИТЬГрузополучатель = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "УДАЛИТЬDeliverTo", "Address1", СтруктураШапки.ГрузополучательАдрес1);
	
	НовИнв.Записать();	
	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНИМ ТАБЛИЧНУЮ ЧАСТЬ ДОКУМЕНТА
	
	МассивОбъектовInvoiceLine = Новый Массив;
	МассивPOLines = Новый Массив;
	
	ProcessLevelOfUser = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	
	Для каждого Стр из ТаблицаСтрок Цикл
		
		СтрокаИнвойса = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		// { RGS ASeryakov, 12.01.2019 14:42:45 S-I-0004945
		ОбщегоНазначения.УстановитьНомерСправочника(СтрокаИнвойса);
		// } RGS ASeryakov 12.01.2019 14:43:00 S-I-0004945
		
		СтрокаИнвойса.Инвойс = НовИнв.Ссылка;
		СтрокаИнвойса.НомерСтрокиИнвойса = ТаблицаСтрок.Индекс(Стр) + 1;
		
		Если ProcessLevelOfUser <> Справочники.ProcessLevels.AZ 
			И ProcessLevelOfUser <> Справочники.ProcessLevels.TM
			И ProcessLevelOfUser <> Справочники.ProcessLevels.UZ Тогда
			СтрокаИнвойса.PermanentTemporary = Перечисления.PermanentTemporary.Permanent;
		КонецЕсли;
		
		СтрокаИнвойса.SoldTo = НовИнв.Покупатель;
				
		СтрокаИнвойса.КодПоИнвойсу = Стр.PartNumber;
		СтрокаИнвойса.СерийныйНомер = Стр.SerialLotNumber;
		СтрокаИнвойса.НаименованиеТовара = СокрЛП(Стр.Description);
		СтрокаИнвойса.ImportReference = Стр.Refer;
		СтрокаИнвойса.МеждународныйКодТНВЭД = Стр.HTCNumber;
		СтрокаИнвойса.СтранаПроисхождения = Стр.CountryOfOrigin;
		СтрокаИнвойса.Manufacturer = Стр.Manufacturer;
		СтрокаИнвойса.SCNo = Стр.SCNo;
				
		Qty = ПолучитьЧислоИзСтроки(Стр.Quantity);
		Если Qty = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.Quantity + """ to ""Qty"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Количество = Qty;
		КонецЕсли;
		
		СтрокаИнвойса.ЕдиницаИзмерения = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "UOMs", "Код", Стр.UM);
		Если Не ЗначениеЗаполнено(СтрокаИнвойса.ЕдиницаИзмерения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Line №" + СтрокаИнвойса.НомерСтрокиИнвойса + ": failed to find UOM by code """ + Стр.UM + """!",
				,,, СтруктураВозврата.БылиНедочеты);
		КонецЕсли;

		Price = ПолучитьЧислоИзСтроки(Стр.UnitPrice);
		Если Price = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.UnitPrice + """ to ""Price"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Цена = Price;
		КонецЕсли;
		
		СтрокаИнвойса.Currency = НовИнв.Валюта;
		
		TotalPrice = ПолучитьЧислоИзСтроки(Стр.TotalPrice);
		Если TotalPrice = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.TotalPrice + """ to ""Total price"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Сумма = TotalPrice;
		КонецЕсли;
		
		// Net weight
		Если ЗначениеЗаполнено(Стр.NetWeight) Тогда
			
			NetWeight = ПолучитьЧислоИзСтроки(Стр.NetWeight);
			Если NetWeight = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to convert """ + Стр.NetWeight + """ to ""Net weight"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
					,,, СтруктураВозврата.БылиНедочеты);
			Иначе
				СтрокаИнвойса.NetWeight = NetWeight;
			КонецЕсли;		
			
		КонецЕсли;
		
		// Weight UOM
		Если ЗначениеЗаполнено(Стр.WeightUOM) Тогда
			
			СтрокаИнвойса.WeightUOM = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "UOMs", "Код", Стр.WeightUOM);
			Если Не ЗначениеЗаполнено(СтрокаИнвойса.WeightUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Line №" + СтрокаИнвойса.НомерСтрокиИнвойса + ": failed to find UOM by code """ + Стр.WeightUOM + """!",
					,,, СтруктураВозврата.БылиНедочеты);
			КонецЕсли;
			
		КонецЕсли;
		
		// Реквизиты, определяемые из строк PO
		СтрокаИнвойса.НомерЗаявкиНаЗакупку = СокрЛП(Стр.OrderNumber);
		
		КоличествоНайденныхPOLines = Справочники.СтрокиИнвойса.ЗаполнитьPOLineВInvoiceLine(СтрокаИнвойса);	
		Если КоличествоНайденныхPOLines = 0 Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find PO line for ""Invoice line #" + СтрокаИнвойса.НомерСтрокиИнвойса + """!
				|Try to select PO line manually.",
				НовИнв.Ссылка, "ТЗСтрокИнвойса[" + (СтрокаИнвойса.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, СтруктураВозврата.БылиНедочеты);
			
		ИначеЕсли КоличествоНайденныхPOLines > 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Found several PO lines for ""Invoice line #" + СтрокаИнвойса.НомерСтрокиИнвойса + """!
				|Try to select PO line manually.",
				НовИнв.Ссылка, "ТЗСтрокИнвойса[" + (СтрокаИнвойса.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, СтруктураВозврата.БылиНедочеты);
			
		КонецЕсли;
		
		// УДАЛИТЬ ЗАКОММЕНТИРОВАННЫЕ СТРОЧКИ. ЕСЛИ СТРОКА ИНВОЙСА НЕ ЗАПИСЫВАЕТСЯ - ЭТО СКОРЕЕ НАШ КОСЯК
		// { RGS ASeryakov, 12.01.2019
		// Было выявлено, что Строка инвойса не записывается, потому-что платформа некорректно(уже существующий) присваивает Код
		// а поскольку в справочнике установлен контроль уникальности кода, nj выдает ошибку.
		// } RGS ASeryakov 12.01.2019

		//Попытка
			СтрокаИнвойса.Записать();
		//Исключение
		//	ОтменитьТранзакцию();
		//	СтруктураВозврата.ТекстКритическихОшибок = "Failed to save Item '" + СтрокаИнвойса + "'.
		//		|See errors on the right pane.
		//		|" + ОписаниеОшибки();
		//	Возврат СтруктураВозврата;
		//КонецПопытки;	
 
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	СтруктураВозврата.Invoice = НовИнв.Ссылка;
	
	// Если не было недочетов - попробуем провести документ
	Если НЕ СтруктураВозврата.БылиНедочеты Тогда
		
		// { RGS AGorlenko 31.05.2017 15:49:58 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
		НовИнв.ТаблицаСтрокИнвойса = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(НовИнв.Ссылка);
		// } RGS AGorlenko 31.05.2017 15:50:39 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
		
		Попытка
			НовИнв.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to post '" + НовИнв + "'.
				|See errors above.
				|" + ОписаниеОшибки(),
				НовИнв.Ссылка,,, СтруктураВозврата.БылиНедочеты);
		КонецПопытки;
			
	КонецЕсли;
		
	// Прикрепим файл	
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	Попытка
		ПрисоединенныеФайлы.ДобавитьФайл(
			НовИнв.Ссылка,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ТекущаяДата(),
			УниверсальноеВремяИзменения,
			АдресФайла,
			,,,
			"non-final");		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to attach .pdf file to Import invoice #" + СокрЛП(НовИнв.Номер) + ".
			|You should do it manually!
			|" + ОписаниеОшибки(),
			НовИнв.Ссылка,,, СтруктураВозврата.БылиНедочеты);
	КонецПопытки;
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.InvoiceЗагрузкаПредварительного, НовИнв.Ссылка);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьSoldToПоBORGs(МассивPONo)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиНаЗакупку.БОРГ.Компания КАК SoldTo
	|ИЗ
	|	Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
	|ГДЕ
	|	ЗаявкиНаЗакупку.Код В(&МассивPONo)";
	
	Запрос.УстановитьПараметр("МассивPONo", МассивPONo);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	
	Возврат Выборка.SoldTo;
	    	
КонецФункции

// ФИНАЛЬНЫЙ ИНВОЙС

&НаКлиенте
Функция ЗагрузитьФинальныйИнвойсИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF)
	
	СтруктураВозврата = Новый Структура("ТекстПредупреждения, ТекстОповещения, ImportInvoice, Открыть");
	СтруктураВозврата.Открыть = Ложь;
	
	Отказ = Ложь;	
	КраткаяСтруктураШапки = Новый Структура;
	НомерСтроки = 0;
		
	// Вытащим из текстового документа номер и дату
	ДополнитьСтруктуруНомеромИнвойсаНомеромDOДатой(КраткаяСтруктураШапки, ТекстовыйДокумент, НомерСтроки, Отказ);		
	Если Отказ Тогда
		СтруктураВозврата.ТекстПредупреждения = "Failed to check Invoice!
			|See errors on the right pane.
			|You should manually verify Date of Import invoice and Amounts,
			|check the ""Final"" flag
			|and attach final .pdf file to the Invoice.";
		Возврат СтруктураВозврата;	
	КонецЕсли;
	
	ТекстПредупреждения = "Failed to check Import invoice " + КраткаяСтруктураШапки.Номер + "!
		|See errors on the right pane.
		|You should manually verify Date of Import invoice and Amounts,
		|check the ""Final"" flag
		|and attach final .pdf file to the Invoice.";
		
	// Вытащим из текстового документа суммы
	ДополнитьСтруктуруСуммамиИIncoterms(Отказ, КраткаяСтруктураШапки, ТекстовыйДокумент, НомерСтроки);
	Если Отказ Тогда	
		СтруктураВозврата.ТекстПредупреждения = ТекстПредупреждения;
		Возврат СтруктураВозврата;	
	КонецЕсли;
	
	// Прикрепим к инвойсу финальный файл и перепроведем его
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	УниверсальноеВремяИзменения = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	АдресФайла = Неопределено;
	ПоместитьФайл(АдресФайла, ПолныйПутьКФайлуPDF,, Ложь, УникальныйИдентификатор);
	
	СтруктураРезультатов = ЗагрузитьФинальныйИнвойсИзСтруктуры(КраткаяСтруктураШапки, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла);
	
	СтруктураВозврата.ImportInvoice = СтруктураРезультатов.Invoice;
	
	Если ЗначениеЗаполнено(СтруктураРезультатов.ТекстКритическихОшибок) Тогда
		
		Сообщить(СтруктураРезультатов.ТекстКритическихОшибок);
		СтруктураВозврата.ТекстПредупреждения = ТекстПредупреждения;
		Если ЗначениеЗаполнено(СтруктураРезультатов.Invoice) Тогда
			СтруктураВозврата.Открыть = Истина;
		КонецЕсли;
		
	ИначеЕсли СтруктураРезультатов.БылиНедочеты Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "There were some errors during checking Import invoice " + КраткаяСтруктураШапки.Номер + ".
			|See errors on the right side of the Import invoice loading window.";
		Если ЗначениеЗаполнено(СтруктураРезультатов.Invoice) Тогда
			СтруктураВозврата.Открыть = Истина;
		КонецЕсли;
		
	Иначе
		
		СтруктураВозврата.ТекстОповещения = "Invoice " + КраткаяСтруктураШапки.Номер + " was successfully marked as Final";
		СтруктураВозврата.Открыть = Ложь;
		
	КонецЕсли;
			
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьФинальныйИнвойсИзСтруктуры(СтруктураШапки, ПолноеИмяФайла, УниверсальноеВремяИзменения, АдресФайла)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстКритическихОшибок", "");
	СтруктураВозврата.Вставить("БылиНедочеты", Ложь);	
	СтруктураВозврата.Вставить("Invoice", Документы.Инвойс.ПустаяСсылка());
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выборка = ПолучитьВыборкуИнвойсов(СтруктураШапки.Номер);
	Если НЕ Выборка.Следующий() Тогда
		
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to find Import invoice " + СтруктураШапки.Номер + " in the system!";	
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	ИнвойсОбъект = Выборка.Ссылка.ПолучитьОбъект();
	
	Если ИнвойсОбъект.Проверен Тогда
		
		ОтменитьТранзакцию();
		СтруктураВозврата.БылиНедочеты = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Import invoice " + СтруктураШапки.Номер + " is already marked as Final!",
			Выборка.Ссылка);
		Возврат СтруктураВозврата;

	КонецЕсли;	
	
	СтруктураВозврата.Invoice = Выборка.Ссылка;
		
	// Дата
	Дата = ImportExportСервер.ПолучитьДатуИзСтроки(СтруктураШапки.Дата);
	Если ЗначениеЗаполнено(Дата) Тогда
		ИнвойсОбъект.Дата = Дата;
	Иначе
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to convert '" + СтруктураШапки.Дата + "' to 'Invoice date'!";
		Возврат СтруктураВозврата;
	КонецЕсли;
			
	// Total ex-works
	TotalExWorks = ПолучитьЧислоИзСтроки(СтруктураШапки.СуммаДокумента);
	Если TotalExWorks = Неопределено Тогда
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to convert '" + СтруктураШапки.СуммаДокумента + "' to 'Total ex-works'!";
		Возврат СтруктураВозврата;
	Иначе
		ИнвойсОбъект.СуммаДокумента = TotalExWorks;
	КонецЕсли;
	
	// Insurance
	Insurance = ПолучитьЧислоИзСтроки(СтруктураШапки.Страховка);
	Если Insurance = Неопределено Тогда
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to convert '" + СтруктураШапки.Страховка + "' to 'Insurance'!";
		Возврат СтруктураВозврата;
	Иначе
		ИнвойсОбъект.Страховка = Insurance;
	КонецЕсли;
	
	// Freight
	Freight = ПолучитьЧислоИзСтроки(СтруктураШапки.Фрахт);
	Если Freight = Неопределено Тогда
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to convert '" + СтруктураШапки.Фрахт + "' to 'Freight'!";
		Возврат СтруктураВозврата;
	Иначе
		ИнвойсОбъект.Фрахт = Freight;
	КонецЕсли;
	
	// Handling
	Handling = ПолучитьЧислоИзСтроки(СтруктураШапки.Упаковка);
	Если Handling = Неопределено Тогда
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Failed to convert '" + СтруктураШапки.Упаковка + "' to 'Handling'!";
		Возврат СтруктураВозврата;
	Иначе
		ИнвойсОбъект.Упаковка = Handling;
	КонецЕсли;
		
	 // Булевые реквизиты
	ИнвойсОбъект.Проверен = Истина;
	
	// { RGS AGorlenko 31.05.2017 15:49:58 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
	ИнвойсОбъект.ТаблицаСтрокИнвойса = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(Выборка.Ссылка);
	// } RGS AGorlenko 31.05.2017 15:50:39 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
	
	// Проведем документ
	Попытка
		ИнвойсОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		СтруктураВозврата.ТекстКритическихОшибок =
			"Failed to post '" + ИнвойсОбъект + "'.
			|See errors on the right pane.";
		Возврат СтруктураВозврата;
	КонецПопытки;	
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Попытка
		ПрисоединенныеФайлы.ДобавитьФайл(
			ИнвойсОбъект.Ссылка,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ТекущаяДата(),
			УниверсальноеВремяИзменения,
			АдресФайла,
			,,,
			"final");		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to attach pdf-file to """ + ИнвойсОбъект + """.
			|See errors above.
			|" + ОписаниеОшибки(),
			,,, СтруктураВозврата.БылиНедочеты);
	КонецПопытки;
		
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.InvoiceЗагрузкаФинального, ИнвойсОбъект.Ссылка);
	
	Возврат СтруктураВозврата;		
	
КонецФункции


// РАЗБОР ШАПКИ

&НаКлиенте
Функция СформироватьПолнуюСтруктуруШапки(ТекстовыйДокумент, Отказ)
	
	Структура = Новый Структура;
	
	Структура.Вставить("SellerName");
	Структура.SellerName = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(1));
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	НомерСтрокиНачалаПоиска = 5;
	
	// Deliver to and Sold-to
	Для НомерТекущейСтроки = НомерСтрокиНачалаПоиска По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "Deliver-To") Тогда
			
			// Deliver-to
			ГрузополучательАдрес1	= СокрЛП(Сред(ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки + 2), 1, 50));
			ГрузополучательАдрес3	= СокрЛП(Сред(ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки + 4), 1, 50));
			ГрузополучательАдрес4	= СокрЛП(Сред(ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки + 5), 1, 50));
			
			// Бывает, что вместо 4го адреса идет пустая строка, которая почему-то просто пропускается
			// Если это так, то в следующей строке должна быть последовательность символов "Attention to"
			СледующаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки+6);
			ПозицияAttentionTo = СтрНайти(СледующаяСтрока, "Attention to");
			Если ПозицияAttentionTo > 0 Тогда
				ГрузополучательАдрес4 = ГрузополучательАдрес3;					
			КонецЕсли;
			
			Структура.Вставить("ГрузополучательАдрес1", ГрузополучательАдрес1);
			Структура.Вставить("ГрузополучательАдрес4", ГрузополучательАдрес4);
			
			// Sold-to
			Структура.Вставить("SoldToName");
			Структура.SoldToName = Сред(ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки + 1), 51);
			Структура.SoldToName = СокрЛП(Структура.SoldToName);
			
			Структура.Вставить("SoldToAddress1");
			Структура.SoldToAddress1 = Сред(ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки + 2), 51);
			Структура.SoldToAddress1 = СокрЛП(Структура.SoldToAddress1);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Consign-to
	Для НомерТекущейСтроки = НомерТекущейСтроки + 7 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "Consign-To") Тогда
			
			Структура.Вставить("ConsignToName");
			Структура.ConsignToName = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки+2);
			Структура.ConsignToName = СокрЛП(Структура.ConsignToName);
		
			Структура.Вставить("ConsignToAddress1");
			Структура.ConsignToAddress1 = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки+3);
			Структура.ConsignToAddress1 = СокрЛП(Структура.ConsignToAddress1);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьСтруктуруНомеромИнвойсаНомеромDOДатой(Структура, ТекстовыйДокумент, НомерТекущейСтроки, Отказ);
	ДополнитьСтруктуруСуммамиИIncoterms(Отказ, Структура, ТекстовыйДокумент, НомерТекущейСтроки);
		
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСтруктуруНомеромИнвойсаНомеромDOДатой(Структура, ТекстовыйДокумент, НомерТекущейСтроки, Отказ)
	
	// Номер Инвойса
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		ПозицияInvoice = СтрНайти(Строка, "Invoice:");
		Если ПозицияInvoice Тогда
			
			Номер = Сред(Строка, ПозицияInvoice + СтрДлина("Invoice:"));
			Структура.Вставить("Номер", СокрЛП(Номер));
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Структура.Свойство("Номер") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Unable to determine the number of the invoice!",
			,,, Отказ);
	КонецЕсли;
	
	// Номер DO
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		ПозицияDONumber = СтрНайти(Строка, "DO Number:");
		Если ПозицияDONumber Тогда  
			
	        DONum = Сред(Строка, ПозицияDONumber + СтрДлина("DO Number:"));
			Структура.Вставить("НомерЗаявкиНаДоставку", СокрЛП(DONum));
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дата Инвойса
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		ПозицияDate = СтрНайти(Строка, "Date:");
		Если ПозицияDate Тогда
			
			КонецПозицииDate = ПозицияDate + СтрДлина("Date:");
			ПозицияPage = СтрНайти(Строка, "Page");
			СтрокаДаты = Сред(Строка, КонецПозицииDate, ПозицияPage - КонецПозицииDate); // отсекаем "Date:"
			Структура.Вставить("Дата", СокрЛП(СтрокаДаты));
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ Структура.Свойство("Дата") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось определить дату инвойса!",
			,,, Отказ);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСтруктуруСуммамиИIncoterms(Отказ, Структура, ТекстовыйДокумент, НомерТекущейСтроки)
	
	Структура.Вставить("СуммаДокумента", "0");
	Структура.Вставить("Страховка", "0");
	Структура.Вставить("Фрахт", "0");
	Структура.Вставить("Упаковка", "0");
	Структура.Вставить("Incoterms", "");
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	// Первой должна идти сумма документа или Incoterms
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "....") Тогда
			
			Если СтрНайти(Строка, "TOTAL EX-WORKS") Тогда
				
				Структура.СуммаДокумента = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
				Прервать;
				
			ИначеЕсли СтрНайти(Строка, "TOTAL,") Тогда	
				
				Структура.Incoterms = ПолучитьIncotermsИзСтроки(Строка);
				Структура.СуммаДокумента = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
				Прервать;
							
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Insurance
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл

		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "INSURANCE") Тогда
			
			Структура.Страховка = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Freight
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "FREIGHT") Тогда
			
			Структура.Фрахт = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Handling
	Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		Если СтрНайти(Строка, "HANDLING") Тогда
			
			Структура.Упаковка = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Incoterms (если не нашли выше)
	Если НЕ ЗначениеЗаполнено(Структура.Incoterms) Тогда
		
		Для НомерТекущейСтроки = НомерТекущейСтроки + 1 По КоличествоСтрок Цикл
			
			Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
			Если СтрНайти(Строка, "TOTAL,") Тогда
				
				Структура.Incoterms = ПолучитьIncotermsИзСтроки(Строка);
				Прервать;
								
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Структура.Incoterms) Тогда
		Сообщить("Failed to find Incoterms!");
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ВытащитьЧислоСтрокойИзКонцаСтроки(ИскомаяСтрока)
	
	ЧислоСтрокой = "";
	
	Строка = СокрЛП(ИскомаяСтрока);
	ДлинаСтроки = СтрДлина(Строка);
	ы = ДлинаСтроки;
	
	Пока ы > 0 Цикл
		
		ТекСимвол = Сред(Строка, ы, 1);
		Если ТекСимвол = " " Тогда
			ЧислоСтрокой = Сред(Строка, ы + 1);
			Прервать;
		КонецЕсли;
		
		ы = ы - 1;
		
	КонецЦикла;
	
	Возврат ЧислоСтрокой;
	
КонецФункции

&НаКлиенте
Функция ПолучитьIncotermsИзСтроки(Знач Строка)
	
	ПозицияTOTAL = СтрНайти(Строка, "TOTAL,");
	Если ПозицияTOTAL = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строка = Сред(Строка, ПозицияTOTAL + СтрДлина("TOTAL,"));
	ПозицияДвоеточия = СтрНайти(Строка, ":");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СокрЛП(Лев(Строка, ПозицияДвоеточия-1));
			
КонецФункции


// РАЗБОР ТАБЛИЦЫ

&НаКлиенте
Процедура СформироватьТаблицуДанныхДляСтрокИнвойса(Отказ, ТекстовыйДокумент)
	
	// Подготовим таблицу строк инвойсов
	ТаблицаДанныхСтрок.Очистить();
		
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	ОбластьСтрок = Ложь;
	НоваяСтрока = Неопределено;
	ОбластьОписанияТовара = Ложь;
	ПотенциальныйКонецСтроки = Ложь;
	ОбластьSCNo = Ложь;
	Для ы = 22 По КоличествоСтрок Цикл
		
		ДанныеСтроки = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(ы));
		
		Если ОбластьSCNo 
			И Лев(ТекстовыйДокумент.ПолучитьСтроку(ы), 1) = " " Тогда
			ОбластьSCNo = Ложь;
			ОбластьОписанияТовара = Истина;
		КонецЕсли;	
		
		// Проверим, не закончились ли строки инвойса
		Если СтрНайти(ДанныеСтроки, "....") И
			(Найти(ДанныеСтроки, "TOTAL EX-WORKS") ИЛИ СтрНайти(ДанныеСтроки, "TOTAL,")) Тогда
			Прервать;
		КонецЕсли;
		
		Если ОбластьСтрок Тогда
							
			Если СтрНайти(ДанныеСтроки, "______________")
				ИЛИ СтрНайти(ДанныеСтроки, "Registered Offices:")
				ИЛИ СтрНайти(ДанныеСтроки, "JP Morgan Chase") Тогда
				
				ОбластьСтрок = Ложь;
				
			ИначеЕсли СокрЛП(ДанныеСтроки) = "" Тогда
				
				Если ПотенциальныйКонецСтроки Тогда
					НоваяСтрока = Неопределено;
					ПотенциальныйКонецСтроки = Ложь;
				КонецЕсли;
				
			Иначе
				
				// Если новая строка еще не начата
				Если НоваяСтрока = Неопределено Тогда
					
					НоваяСтрока = ТаблицаДанныхСтрок.Добавить();
					РазобратьНачалоНовойСтроки(Отказ, ДанныеСтроки, НоваяСтрока);
					
					ОбластьОписанияТовара = Ложь;
					
					ОбластьSCNo = Истина;
					
				Иначе // Если идет продолжение данных текущей строки
					
					Если СтрНайти(ДанныеСтроки, "Serial/Lot Number:") Тогда
						
						ОбластьОписанияТовара = Ложь;
						
						РазобратьБлок(Отказ, "Serial/Lot Number:", ДанныеСтроки, НоваяСтрока.SerialLotNumber);
		
					ИначеЕсли СтрНайти(ДанныеСтроки, "Item Net Weight:") Тогда
						
						ОбластьОписанияТовара = Ложь;
						
						РазобратьБлокItemNetWeight(Отказ, "Item Net Weight:", ДанныеСтроки, НоваяСтрока);
						
					ИначеЕсли СтрНайти(ДанныеСтроки, "HTC Number:") Тогда
						
						ОбластьОписанияТовара = Ложь;
						
						РазобратьБлок(Отказ, "HTC Number:", ДанныеСтроки, НоваяСтрока.HTCNumber);				
						
					ИначеЕсли СтрНайти(ДанныеСтроки, "Country of Origin:") Тогда
					
						ОбластьОписанияТовара = Ложь;
						
						РазобратьБлок(Отказ, "Country of Origin:", ДанныеСтроки, НоваяСтрока.CountryOfOrigin);
						
						ПотенциальныйКонецСтроки = Истина;
						
					ИначеЕсли СтрНайти(ДанныеСтроки, "Manufacturer:") Тогда
						
						ОбластьОписанияТовара = Ложь;
						
						РазобратьБлок(Отказ, "Manufacturer:", ДанныеСтроки, НоваяСтрока.Manufacturer);
						
						ПотенциальныйКонецСтроки = Истина;
												
					ИначеЕсли ОбластьSCNo Тогда
						
						ОбластьSCNo = Ложь;

						НоваяСтрока.SCNo = СокрЛП(ДанныеСтроки);
						
						ОбластьОписанияТовара = Истина;
											
					ИначеЕсли ОбластьОписанияТовара Тогда
						
						НоваяСтрока.Description = НоваяСтрока.Description + ДанныеСтроки;
												
					КонецЕсли;
					
				КонецЕсли; // Начало или продолжение текущей строки
								
			КонецЕсли; // Строки или окончание области строк
			
		Иначе // Область строк еще не начиналась
			
			Если ДанныеСтроки = "M" Тогда
				ОбластьСтрок = Истина;
			КонецЕсли;
						
		КонецЕсли; // Область строк или нет
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазобратьНачалоНовойСтроки(Отказ, Знач ДанныеСтроки, НоваяСтрока)
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.OrderNumber = Лев(ДанныеСтроки, ПозицияПробела-1);
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела);
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	НоваяСтрока.PartNumber = Лев(ДанныеСтроки, 39);
	НоваяСтрока.PartNumber = СокрЛП(НоваяСтрока.PartNumber);
	ДанныеСтроки = Сред(ДанныеСтроки, 40);
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.Refer = Лев(ДанныеСтроки, ПозицияПробела-1);
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела);
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.Quantity = Лев(ДанныеСтроки, ПозицияПробела-1);
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела);
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.UM = Лев(ДанныеСтроки, ПозицияПробела-1);
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела);
	
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.UnitPrice = Лев(ДанныеСтроки, ПозицияПробела-1);
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела);
	
	НоваяСтрока.TotalPrice = СокрЛП(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьБлок(Отказ, ИмяБлока, Знач ДанныеСтроки, РеквизитНовойСтроки)
	
	СтрДлинаБлока = СтрДлина(ИмяБлока);
	          		
	ДанныеСтроки = Сред(ДанныеСтроки, СтрДлинаБлока+1);
	
	РеквизитНовойСтроки	= СокрЛП(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьБлокItemNetWeight(Отказ, ИмяБлока, Знач ДанныеСтроки, НоваяСтрока)
	
	СтрДлинаБлока = СтрДлина(ИмяБлока);
	          		
	ДанныеСтроки = Сред(ДанныеСтроки, СтрДлинаБлока+1);
		
	ДанныеСтроки = СокрЛ(ДанныеСтроки);
	ПозицияПробела = СтрНайти(ДанныеСтроки, " ");
	Если ПозицияПробела = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find symbol ' ' in the Item Net Weight block of Invoice lines!",
			,,, Отказ);
		Возврат;
		
	КонецЕсли;
		
	НоваяСтрока.NetWeight = Лев(ДанныеСтроки, ПозицияПробела-1);
	
	ДанныеСтроки = Сред(ДанныеСтроки, ПозицияПробела+1);
	НоваяСтрока.WeightUOM = СокрЛП(ДанныеСтроки);
		
КонецПроцедуры
                                

// ПРЕОБРАЗОВАНИЕ ТЕКСТОВЫХ ЗНАЧЕНИЙ

&НаСервереБезКонтекста
Функция ПолучитьЧислоИзСтроки(ЧислоСтрокой) Экспорт
	
	ЧислоСтрокой = СокрЛП(СтрЗаменить(ЧислоСтрокой, ",", ""));	
	Попытка
		Возврат Число(ЧислоСтрокой); 
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВыборкуИнвойсов(НомерИнвойса)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", НомерИнвойса);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Инвойс.Ссылка
		|ИЗ
		|	Документ.Инвойс КАК Инвойс
		|ГДЕ
		|	Инвойс.Номер = &Номер
		|	И (НЕ Инвойс.Отменен)";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// ЗАГРУЗКА ИНВОЙСОВ ПО РАДИАЦИИ

&НаКлиенте
Функция ЗагрузитьИнвойсПоРадиацииИзТекстовогоДокумента(ТекстовыйДокумент, ПолныйПутьКФайлуPDF)
	
	Отказ = Ложь;
	СтруктураВозврата = Новый Структура("ТекстПредупреждения, ТекстОповещения, ImportInvoice, Открыть");
	СтруктураВозврата.Открыть = Ложь;
		
	ПолнаяСтруктураШапки = СформироватьПолнуюСтруктуруШапки_Радиация(ТекстовыйДокумент, Отказ);
	
	Если Отказ Тогда
			
		СтруктураВозврата.ТекстПредупреждения = "Invoice was not loaded from " + ПолныйПутьКФайлуPDF + "!
			|See errors on the right side of the window.";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	СформироватьТаблицуДанныхДляСтрокИнвойса_Радиация(Отказ, ТекстовыйДокумент);
	Если Отказ Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "Invoice was not loaded from " + ПолныйПутьКФайлуPDF + "!
			|See errors on the right side of the window.";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	УниверсальноеВремяИзменения = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	АдресФайла = Неопределено;
	ПоместитьФайл(АдресФайла, ПолныйПутьКФайлуPDF,, Ложь, УникальныйИдентификатор);
	
	СтруктураРезультатов = ЗагрузитьНовыйИнвойсИзСтруктуры_Радиация(ПолнаяСтруктураШапки, ТаблицаДанныхСтрок, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла);
						
	Если ЗначениеЗаполнено(СтруктураРезультатов.ТекстКритическихОшибок) Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "Invoice " + ПолнаяСтруктураШапки.Номер + " was not loaded!
			|" + СтруктураРезультатов.ТекстКритическихОшибок;		
		
	ИначеЕсли СтруктураРезультатов.БылиНедочеты Тогда
		
		СтруктураВозврата.ТекстПредупреждения = "There were some errors during loading of Import invoice " + ПолнаяСтруктураШапки.Номер + ".
			|See errors on the right side of the Import invoice loading window.";		
			
	Иначе
		
		СтруктураВозврата.ТекстОповещения = "Invoice " + ПолнаяСтруктураШапки.Номер + " was successfully posted";
		
	КонецЕсли;
	
	СтруктураВозврата.Открыть = Ложь;
	Если Не ЗначениеЗаполнено(СтруктураВозврата.ImportInvoice) Тогда
		СтруктураВозврата.ImportInvoice = СтруктураРезультатов.Invoice;
		СтруктураВозврата.Открыть = Истина;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
		
КонецФункции

&НаКлиенте
Функция СформироватьПолнуюСтруктуруШапки_Радиация(ТекстовыйДокумент, Отказ)
	
	Структура = Новый Структура("SellerName,SoldTo");
	
	СтрокаШапки = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(3));

	//SellerName
	ПозицияПробелов = СтрНайти(СтрокаШапки, "   ");
	SellerName = Сред(СтрокаШапки, 1, ПозицияПробелов);
	Структура.SellerName = СокрЛП(SellerName);
	
	СтрокаШапки = СокрЛП(Сред(СтрокаШапки, СтрДлина(SellerName)+1));
    ПозицияПробелов = СтрНайти(СтрокаШапки, "   ");
	ShipTo = Сред(СтрокаШапки, 1, ПозицияПробелов);
    СтрокаШапки = СокрЛП(Сред(СтрокаШапки, СтрДлина(ShipTo)+1));
	
	Структура.SoldTo = СтрокаШапки;
	
	Если СтрНайти(ВРег(СтрокаШапки), "LOGELCO") Тогда
		Структура.SoldTo = "SLI RU";
		Структура.Вставить("ConsignTo", "RUMS");
	КонецЕсли;
	 	     		
	ДополнитьСтруктуруНомеромИнвойсаНомеромDOДатой_Радиация(Структура, ТекстовыйДокумент, Отказ);
	ДополнитьСтруктуруСуммамиИIncoterms_Радиация(Отказ, Структура, ТекстовыйДокумент);
		
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСтруктуруНомеромИнвойсаНомеромDOДатой_Радиация(Структура, ТекстовыйДокумент, Отказ)
	
	// Номер Инвойса
	Строка = ТекстовыйДокумент.ПолучитьСтроку(1);
	ПозицияInvoice = СтрНайти(Строка, "Invoice:");
	Если ПозицияInvoice Тогда
		
		КонецПозицииInvoice = ПозицияInvoice + СтрДлина("Invoice:");
		ПозицияSale = СтрНайти(Строка, "Sale");
		Номер = Сред(Строка, КонецПозицииInvoice, ПозицияSale - КонецПозицииInvoice); // отсекаем "Sale:"
		Структура.Вставить("Номер", СокрЛП(Номер));
        		
	КонецЕсли;
		    		
	Если НЕ Структура.Свойство("Номер") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Unable to determine the number of the invoice!",
			,,, Отказ);
	иначе		
		// Номер DO
		Структура.Вставить("НомерЗаявкиНаДоставку", Структура.Номер);	
	КонецЕсли;
	          		
	// Дата Инвойса
	ПозицияDate = СтрНайти(Строка, "Date:");
	Если ПозицияDate Тогда
		
		КонецПозицииDate = ПозицияDate + СтрДлина("Date:");
		ПозицияPage = СтрНайти(Строка, "Page");
		СтрокаДаты = Сред(Строка, КонецПозицииDate, ПозицияPage - КонецПозицииDate); // отсекаем "Date:"
		Структура.Вставить("Дата", СокрЛП(СтрокаДаты));
				
	КонецЕсли;
		
	Если НЕ Структура.Свойство("Дата") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Unable to determine invoice date!",
			,,, Отказ);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСтруктуруСуммамиИIncoterms_Радиация(Отказ, Структура, ТекстовыйДокумент)
	
	Структура.Вставить("СуммаДокумента", "0");
	Структура.Вставить("Страховка", "0");
	Структура.Вставить("Фрахт", "0");
	Структура.Вставить("Упаковка", "0");
	Структура.Вставить("Incoterms", "");
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	// Первой должна идти сумма документа
	Для НомерТекущейСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерТекущейСтроки);
		
		Если СтрНайти(Строка, "EXTENDED PRICE") Тогда
			
			// Сумма Документа
			Структура.СуммаДокумента = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
						
		ИначеЕсли СтрНайти(Строка, "TOTAL") и Не СтрНайти(Строка, "TOTAL FCA") И Не СтрНайти(Строка, "TOTAL TAX") Тогда	
			
			// Incoterms
			Структура.Incoterms = ПолучитьIncotermsИзСтроки_Радиация(Строка);
			
		ИначеЕсли СтрНайти(Строка, "FREIGHT CHARGE") Тогда
			
			// Freight
			Структура.Фрахт = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
						
		ИначеЕсли СтрНайти(Строка, "PACKING COST") Тогда
			
			// Handling
			Структура.Упаковка = ВытащитьЧислоСтрокойИзКонцаСтроки(Строка);
						
		КонецЕсли;
						
	КонецЦикла;
	   	     		
	Если НЕ ЗначениеЗаполнено(Структура.Incoterms) Тогда
		Сообщить("Failed to find Incoterms!");
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ПолучитьIncotermsИзСтроки_Радиация(Знач Строка)
	
	ПозицияTOTAL = СтрНайти(Строка, "TOTAL ");
	Если ПозицияTOTAL = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строка = Сред(Строка, ПозицияTOTAL + СтрДлина("TOTAL "));
	ПозицияДвоеточия = СтрНайти(Строка, " ");
	Если ПозицияДвоеточия = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СокрЛП(Лев(Строка, ПозицияДвоеточия-1));
			
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьНовыйИнвойсИзСтруктуры_Радиация(СтруктураШапки, Знач ТаблицаСтрок, ПолныйПутьКФайлуPDF, УниверсальноеВремяИзменения, АдресФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстКритическихОшибок", "");
	СтруктураВозврата.Вставить("БылиНедочеты", Ложь);
	СтруктураВозврата.Вставить("Invoice", Документы.Инвойс.ПустаяСсылка());
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выборка = ПолучитьВыборкуИнвойсов(СтруктураШапки.Номер);
	Если Выборка.Следующий() Тогда
		
		ОтменитьТранзакцию();
		СтруктураВозврата.ТекстКритическихОшибок = "Invoice " + СтруктураШапки.Номер + " is already in the system!";
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	НовИнв = Документы.Инвойс.СоздатьДокумент();

	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНИМ ШАПКУ ДОКУМЕНТА
	
	// Specialist
	НовИнв.Specialist = ПараметрыСеанса.ТекущийПользователь;
	
	// Process level
	SpecialistProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(НовИнв.Specialist, "ProcessLevel");
	Если ЗначениеЗаполнено(SpecialistProcessLevel) Тогда
		НовИнв.ProcessLevel = SpecialistProcessLevel;
	КонецЕсли;
				
	// No.
	НовИнв.Номер = СтруктураШапки.Номер;
	
	// Date
	НовИнв.Дата = ПолучитьДатуИзСтроки(СтруктураШапки.Дата);
	Если НЕ ЗначениеЗаполнено(НовИнв.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Дата + """ to ""Invoice date""!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Incoterms
	НовИнв.УсловияПоставки = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Incoterms", "Код", СтруктураШапки.Incoterms);
	Если НЕ ЗначениеЗаполнено(НовИнв.УсловияПоставки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Incoterms by Code """ + СтруктураШапки.Incoterms + """!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Currency
	НовИнв.Валюта = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Валюты", "Код", "840");
	Если Не ЗначениеЗаполнено(НовИнв.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find currency by Code ""840""!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// DO no.
	НовИнв.НомерЗаявкиНаДоставку = СтруктураШапки.НомерЗаявкиНаДоставку;
	
	// Total ex-works
	TotalExWorks = ПолучитьЧислоИзСтроки(СтруктураШапки.СуммаДокумента);
	Если TotalExWorks = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.СуммаДокумента + """ to ""Total ex-works""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.СуммаДокумента = TotalExWorks;
	КонецЕсли;
	
	// Insurance
	Insurance = ПолучитьЧислоИзСтроки(СтруктураШапки.Страховка);
	Если Insurance = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Страховка + """ to ""Insurance""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Страховка = Insurance;
	КонецЕсли;
	
	// Freight
	Freight = ПолучитьЧислоИзСтроки(СтруктураШапки.Фрахт);
	Если Freight = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Фрахт + """ to ""Freight""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Фрахт = Freight;
	КонецЕсли;
	
	// Handling
	Handling = ПолучитьЧислоИзСтроки(СтруктураШапки.Упаковка);
	Если Handling = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to convert """ + СтруктураШапки.Упаковка + """ to ""Handling""!",
			,,, СтруктураВозврата.БылиНедочеты);
	Иначе
		НовИнв.Упаковка = Handling;
	КонецЕсли;
			
	// SoldTo
	НовИнв.Покупатель = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "SoldTo", "Код", СтруктураШапки.SoldTo);
	Если НЕ ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Sold-to by Name """ + СтруктураШапки.SoldTo + """!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
		
	// Consign-to
	Если СтруктураШапки.Свойство("ConsignTo") Тогда 
		НовИнв.Декларант = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "ConsignTo", "Код", СтруктураШапки.ConsignTo);
		Если НЕ ЗначениеЗаполнено(НовИнв.Декларант) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find Consign-to by Code """ + СтруктураШапки.ConsignTo + """!",
				,,, СтруктураВозврата.БылиНедочеты);
		КонецЕсли;
    КонецЕсли;
         	
	// Seller
	НовИнв.Продавец = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "LegalEntities", "Наименование", СтруктураШапки.SellerName);
	Если НЕ ЗначениеЗаполнено(НовИнв.Продавец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Seller by Name """ + СтруктураШапки.SellerName + """!",
			,,, СтруктураВозврата.БылиНедочеты);
	КонецЕсли;
	
	// Контракт
	Если ЗначениеЗаполнено(НовИнв.Декларант)
		И ЗначениеЗаполнено(НовИнв.Дата)
		И ЗначениеЗаполнено(НовИнв.Продавец)
		И ЗначениеЗаполнено(НовИнв.Покупатель) Тогда
		
		ConsignToDoNotRequireContract = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(НовИнв.Декларант, "DoNotRequireContractInInvoices");
		Если НЕ ConsignToDoNotRequireContract Тогда
										
			МассивContracts = Справочники.Contracts.ПолучитьДляInvoice(НовИнв.Дата, НовИнв.Продавец, НовИнв.Декларант, НовИнв.УсловияПоставки);
			Если МассивContracts.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Contract with
					|Seller """ + СокрЛП(НовИнв.Продавец) + """,
					|Consign-to """ + СокрЛП(НовИнв.Декларант) + """,
					|Incoterms """ + СокрЛП(НовИнв.УсловияПоставки) + """,
					|Date < """ + Формат(НовИнв.Дата, "ДЛФ=D") + """,
					|Expiry date > """ + Формат(НовИнв.Дата, "ДЛФ=D") + """!",
					,,, СтруктураВозврата.БылиНедочеты);
					
			ИначеЕсли МассивContracts.Количество() = 1 Тогда
					
				НовИнв.Contract = МассивContracts[0];	
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Found more than one Contract with
					|Seller """ + СокрЛП(НовИнв.Продавец) + """,
					|Consign-to """ + СокрЛП(НовИнв.Декларант) + """,
					|Incoterms """ + СокрЛП(НовИнв.УсловияПоставки) + """,
					|Date < """ + Формат(НовИнв.Дата, "ДЛФ=D") + """,
					|Expiry date > """ + Формат(НовИнв.Дата, "ДЛФ=D") + """!",
					,,, СтруктураВозврата.БылиНедочеты);
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Deliver-to (этот реквизит уже не нужен, но пока грузим)
	//НовИнв.УДАЛИТЬГрузополучатель = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "УДАЛИТЬDeliverTo", "Address1", СтруктураШапки.ГрузополучательАдрес1);
	
	НовИнв.Записать();	
	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНИМ ТАБЛИЧНУЮ ЧАСТЬ ДОКУМЕНТА
	
	МассивОбъектовInvoiceLine = Новый Массив;
	МассивPOLines = Новый Массив;
	
	ProcessLevelOfUser = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	
	Для каждого Стр из ТаблицаСтрок Цикл
		
		СтрокаИнвойса = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		
		СтрокаИнвойса.Инвойс = НовИнв.Ссылка;
		СтрокаИнвойса.НомерСтрокиИнвойса = ТаблицаСтрок.Индекс(Стр) + 1;
		
		Если ProcessLevelOfUser <> Справочники.ProcessLevels.AZ 
			И ProcessLevelOfUser <> Справочники.ProcessLevels.TM
			И ProcessLevelOfUser <> Справочники.ProcessLevels.UZ Тогда
			СтрокаИнвойса.PermanentTemporary = Перечисления.PermanentTemporary.Permanent;
		КонецЕсли;
		
		СтрокаИнвойса.SoldTo = НовИнв.Покупатель;
				
		СтрокаИнвойса.КодПоИнвойсу = Стр.PartNumber;
		СтрокаИнвойса.СерийныйНомер = Стр.SerialLotNumber;
		СтрокаИнвойса.НаименованиеТовара = СокрЛП(Стр.Description);
		СтрокаИнвойса.ImportReference = Стр.Refer;
		СтрокаИнвойса.МеждународныйКодТНВЭД = Стр.HTCNumber;
		СтрокаИнвойса.СтранаПроисхождения = Стр.CountryOfOrigin;
		СтрокаИнвойса.Manufacturer = Стр.Manufacturer;
				
		Qty = ПолучитьЧислоИзСтроки(Стр.Quantity);
		Если Qty = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.Quantity + """ to ""Qty"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Количество = Qty;
		КонецЕсли;
		
		СтрокаИнвойса.ЕдиницаИзмерения = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "UOMs", "Код", Стр.UM);
		Если Не ЗначениеЗаполнено(СтрокаИнвойса.ЕдиницаИзмерения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Line №" + СтрокаИнвойса.НомерСтрокиИнвойса + ": failed to find UOM by code """ + Стр.UM + """!",
				,,, СтруктураВозврата.БылиНедочеты);
		КонецЕсли;

		Price = ПолучитьЧислоИзСтроки(Стр.UnitPrice);
		Если Price = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.UnitPrice + """ to ""Price"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Цена = Price;
		КонецЕсли;
		
		СтрокаИнвойса.Currency = НовИнв.Валюта;
		
		TotalPrice = ПолучитьЧислоИзСтроки(Стр.TotalPrice);
		Если TotalPrice = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + Стр.TotalPrice + """ to ""Total price"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
				,,, СтруктураВозврата.БылиНедочеты);
		Иначе
			СтрокаИнвойса.Сумма = TotalPrice;
		КонецЕсли;
		
		// Net weight
		Если ЗначениеЗаполнено(Стр.NetWeight) Тогда
			
			NetWeight = ПолучитьЧислоИзСтроки(Стр.NetWeight);
			Если NetWeight = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to convert """ + Стр.NetWeight + """ to ""Net weight"" of Item #" + СтрокаИнвойса.НомерСтрокиИнвойса + "!",
					,,, СтруктураВозврата.БылиНедочеты);
			Иначе
				СтрокаИнвойса.NetWeight = NetWeight;
			КонецЕсли;		
			
		КонецЕсли;
		
		// Weight UOM
		Если ЗначениеЗаполнено(Стр.WeightUOM) Тогда
			
			СтрокаИнвойса.WeightUOM = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "UOMs", "Код", Стр.WeightUOM);
			Если Не ЗначениеЗаполнено(СтрокаИнвойса.WeightUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Line №" + СтрокаИнвойса.НомерСтрокиИнвойса + ": failed to find UOM by code """ + Стр.WeightUOM + """!",
					,,, СтруктураВозврата.БылиНедочеты);
			КонецЕсли;
			
		КонецЕсли;
		
		// Реквизиты, определяемые из строк PO
		СтрокаИнвойса.НомерЗаявкиНаЗакупку = СокрЛП(Стр.OrderNumber);
		
		КоличествоНайденныхPOLines = Справочники.СтрокиИнвойса.ЗаполнитьPOLineВInvoiceLine(СтрокаИнвойса);	
		Если КоличествоНайденныхPOLines = 0 Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find PO line for ""Invoice line #" + СтрокаИнвойса.НомерСтрокиИнвойса + """!
				|Try to select PO line manually.",
				НовИнв.Ссылка, "ТЗСтрокИнвойса[" + (СтрокаИнвойса.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, СтруктураВозврата.БылиНедочеты);
			
		ИначеЕсли КоличествоНайденныхPOLines > 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Found several PO lines for ""Invoice line #" + СтрокаИнвойса.НомерСтрокиИнвойса + """!
				|Try to select PO line manually.",
				НовИнв.Ссылка, "ТЗСтрокИнвойса[" + (СтрокаИнвойса.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, СтруктураВозврата.БылиНедочеты);
			
		КонецЕсли;
		
		// УДАЛИТЬ ЗАКОММЕНТИРОВАННЫЕ СТРОЧКИ. ЕСЛИ СТРОКА ИНВОЙСА НЕ ЗАПИСЫВАЕТСЯ - ЭТО СКОРЕЕ НАШ КОСЯК
		//Попытка
			СтрокаИнвойса.Записать();
		//Исключение
		//	ОтменитьТранзакцию();
		//	СтруктураВозврата.ТекстКритическихОшибок = "Failed to save Item '" + СтрокаИнвойса + "'.
		//		|See errors on the right pane.
		//		|" + ОписаниеОшибки();
		//	Возврат СтруктураВозврата;
		//КонецПопытки;	
 
	КонецЦикла;
	
	
	//НовИнв.Записать(РежимЗаписиДокумента.Проведение);
	        	
	ЗафиксироватьТранзакцию();
	СтруктураВозврата.Invoice = НовИнв.Ссылка;
	
	// Если не было недочетов - попробуем провести документ
	Если НЕ СтруктураВозврата.БылиНедочеты Тогда
		
		// Final
		НовИнв.Проверен = Истина;
		
		// { RGS AGorlenko 31.05.2017 15:49:58 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
		НовИнв.ТаблицаСтрокИнвойса = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(НовИнв.Ссылка);
		// } RGS AGorlenko 31.05.2017 15:50:39 - определим таблицу строк, чтобы отработала синхронизация данных с БД при проведении
		
		Попытка
			НовИнв.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to post '" + НовИнв + "'.
				|See errors above.
				|" + ОписаниеОшибки(),
				НовИнв.Ссылка,,, СтруктураВозврата.БылиНедочеты);
		КонецПопытки;
			
	КонецЕсли;
		
	// Прикрепим файл	
	Файл = Новый Файл(ПолныйПутьКФайлуPDF);
	Попытка
		ПрисоединенныеФайлы.ДобавитьФайл(
			НовИнв.Ссылка,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ТекущаяДата(),
			УниверсальноеВремяИзменения,
			АдресФайла,
			,,,
			"radiation");		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to attach .pdf file to Import invoice #" + СокрЛП(НовИнв.Номер) + ".
			|You should do it manually!
			|" + ОписаниеОшибки(),
			НовИнв.Ссылка,,, СтруктураВозврата.БылиНедочеты);
	КонецПопытки;
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.InvoiceЗагрузкаПредварительного, НовИнв.Ссылка);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТаблицуДанныхДляСтрокИнвойса_Радиация(Отказ, ТекстовыйДокумент)
	
	// Подготовим таблицу строк инвойсов
	ТаблицаДанныхСтрок.Очистить();
		
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();      
	ОбластьСтрок = Ложь;
	ЭтоНоваяСтрока = Неопределено;
	ОбластьОписанияТовара = Ложь;
	ПотенциальныйКонецСтроки = Ложь;
	
	Для ы = 1 По КоличествоСтрок Цикл
		
		ДанныеСтроки = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(ы));
		
		// Проверим, не закончились ли строки инвойса
		Если СтрНайти(ДанныеСтроки, "-------------------------------------------------") Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрНайти(ВРег(ДанныеСтроки), "REFERENCE INTIME JAF:") Тогда 
			// Import Reference
			ПозицияRef = СтрНайти(ВРег(ДанныеСтроки), "REFERENCE INTIME JAF:");
			СтрДлинаБлокаRef = СтрДлина("REFERENCE INTIME JAF:");	
			ImportReference = СокрЛП(Сред(ДанныеСтроки, ПозицияRef+СтрДлинаБлокаRef+1));
		КонецЕсли;

		Если СтрНайти(ДанныеСтроки, "PO#:") Тогда 
			// PO number
			ПозицияPO = СтрНайти(ДанныеСтроки, "PO#:");
			СтрДлинаБлокаPO = СтрДлина("PO#:");	
			ПозицияSLOwner = СтрНайти(ДанныеСтроки, "SL Owner");
			PONumber = СокрЛП(Сред(ДанныеСтроки, ПозицияPO+СтрДлинаБлокаPO+1, ПозицияSLOwner-ПозицияPO-СтрДлинаБлокаPO-1));
		КонецЕсли;
	
		Если СтрНайти(ДанныеСтроки, "These commodities, technology or software were exported from the United States in accordance with the Export Administration Regulations.") Тогда 
			ОбластьСтрок = Истина;
			Сч = 1;
		КонецЕсли;
		
		Если СокрЛП(ДанныеСтроки) = "" ИЛИ СокрЛП(ДанныеСтроки) = "DUPLICATE" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьСтрок Тогда 
			
			Если Лев(ДанныеСтроки, 2) = (СокрЛП(Сч) + " ") Тогда 
				ЭтоНоваяСтрока = Истина;
				Сч = Сч + 1;
			КонецЕсли;
			
			Если ЭтоНоваяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			// Если новая строка еще не начата
			Если ЭтоНоваяСтрока Тогда
				
				НоваяСтрока = ТаблицаДанныхСтрок.Добавить();
				НоваяСтрока.OrderNumber = PONumber;
				НоваяСтрока.Refer = ImportReference;
				
				РазобратьНачалоНовойСтроки_Радиация(Отказ, ДанныеСтроки, НоваяСтрока, Сч);
				
				ЭтоНоваяСтрока = Ложь;
				
			Иначе // Если идет продолжение данных текущей строки
				
				Если СтрНайти(ДанныеСтроки, "Lot/Serial:") Тогда
					
					РазобратьБлок(Отказ, "Lot/Serial:", ДанныеСтроки, НоваяСтрока.SerialLotNumber);
					
				ИначеЕсли СтрНайти(ДанныеСтроки, "HTC:") Тогда
					
					РазобратьБлокHTC_COO_Радиация(Отказ, "HTC:", ДанныеСтроки, НоваяСтрока);				
					
				Иначе
					
					НоваяСтрока.Description = НоваяСтрока.Description + " " + СокрЛП(ДанныеСтроки);
					
				КонецЕсли;
				
			КонецЕсли; // Начало или продолжение текущей строки
			
		КонецЕсли; // Область строк или нет
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазобратьБлокHTC_COO_Радиация(Отказ, ИмяБлока, Знач ДанныеСтроки, НоваяСтрока)
	
	ПозицияCOO = СтрНайти(ДанныеСтроки, "Country of Origin:"); 
	СтрДлинаБлокаHTC = СтрДлина(ИмяБлока);
	
	Если ПозицияCOO <> 0 Тогда
		
		НоваяСтрока.HTCNumber = СокрЛП(Сред(ДанныеСтроки, СтрДлинаБлокаHTC+1, ПозицияCOO-СтрДлинаБлокаHTC-1));
		
		СтрДлинаБлокаCOO = СтрДлина("Country of Origin:");		
		НоваяСтрока.CountryOfOrigin = СокрЛП(Сред(ДанныеСтроки, ПозицияCOO+СтрДлинаБлокаCOO+1));
		
	иначе
		
		НоваяСтрока.HTCNumber = СокрЛП(Сред(ДанныеСтроки, СтрДлинаБлокаHTC+1));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьНачалоНовойСтроки_Радиация(Отказ, Знач ДанныеСтроки, НоваяСтрока, Сч)
	
	//уберем номерПП строки
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(Сч)+1));
	
	//PartNumber
	ПозицияПробелов = СтрНайти(ДанныеСтроки, "   ");
	НоваяСтрока.PartNumber = Сред(ДанныеСтроки, 1, ПозицияПробелов);
	НоваяСтрока.PartNumber = СокрЛП(НоваяСтрока.PartNumber);
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(НоваяСтрока.PartNumber)+1));
	
	//Description
	ПозицияПробелов = СтрНайти(ДанныеСтроки, "   ");
	НоваяСтрока.Description = Сред(ДанныеСтроки, 1, ПозицияПробелов);
	НоваяСтрока.Description = СокрЛП(НоваяСтрока.Description);
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(НоваяСтрока.Description)+1));
	
	//Quantity
	ПозицияПробелов = СтрНайти(ДанныеСтроки, " ");
	НоваяСтрока.Quantity = Сред(ДанныеСтроки, 1, ПозицияПробелов);
	НоваяСтрока.Quantity = СокрЛП(НоваяСтрока.Quantity);
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(НоваяСтрока.Quantity)+1));
	
	//UM
	ПозицияПробелов = СтрНайти(ДанныеСтроки, "   ");
	НоваяСтрока.UM = Сред(ДанныеСтроки, 1, ПозицияПробелов);
	НоваяСтрока.UM = СокрЛП(НоваяСтрока.UM);
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(НоваяСтрока.UM)+1));
	
	//UnitPrice
	ПозицияПробелов = СтрНайти(ДанныеСтроки, "   ");
	НоваяСтрока.UnitPrice = Сред(ДанныеСтроки, 1, ПозицияПробелов);
	НоваяСтрока.UnitPrice = СокрЛП(НоваяСтрока.UnitPrice);
	ДанныеСтроки = СокрЛП(Сред(ДанныеСтроки, СтрДлина(НоваяСтрока.UnitPrice)+1));

	//TotalPrice
	НоваяСтрока.TotalPrice = СокрЛП(ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуИзСтроки(Знач ДатаСтрока) 
	   	
	ДатаСтрока = СокрЛП(ДатаСтрока);
	
	ПозицияПробела = СтрНайти(ДатаСтрока, " ");
	Если ПозицияПробела = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МесяцСтрока = Лев(ДатаСтрока, ПозицияПробела);
	Месяц = ПолучитьНомерМесяцаИзСтроковогоПредставления(МесяцСтрока);
	Если Месяц = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОставшаясяСтрока = СокрЛ(Сред(ДатаСтрока, ПозицияПробела+1));
	
	ПозицияПробела = СтрНайти(ОставшаясяСтрока, " ");
	Если ПозицияПробела = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеньСтрока = Лев(ОставшаясяСтрока, ПозицияПробела - 1);	
	Попытка
		День = Число(ДеньСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ОставшаясяСтрока = СокрЛ(Сред(ОставшаясяСтрока, ПозицияПробела+1));
	ГодСтрока = Лев(ОставшаясяСтрока, 4);
	
	Попытка
		Год = Число(ГодСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
		     		
	Попытка
		ИтоговаяДата = Дата(Год, Месяц, День);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат ИтоговаяДата;
			
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерМесяцаИзСтроковогоПредставления(Знач СтрокаМесяц)
	
	// Получение номера месяца из строки: Jan, Feb, ..., Oct...
	
	СтрокаМесяц = СокрЛП(ВРег(СтрокаМесяц));
	
	Если СтрокаМесяц = "JAN" ИЛИ СтрокаМесяц = "JANUARY" Тогда
		Возврат 1;
	ИначеЕсли СтрокаМесяц = "FEB" ИЛИ СтрокаМесяц = "FEBRUARY" Тогда
		Возврат 2;
	ИначеЕсли СтрокаМесяц = "MAR" ИЛИ СтрокаМесяц = "MARCH" Тогда
		Возврат 3;
	ИначеЕсли СтрокаМесяц = "APR" ИЛИ СтрокаМесяц = "APRIL" Тогда
		Возврат 4;
	ИначеЕсли СтрокаМесяц = "MAY" ИЛИ СтрокаМесяц = "MAY" Тогда
		Возврат 5;
	ИначеЕсли СтрокаМесяц = "JUN" ИЛИ СтрокаМесяц = "JUNE" Тогда
		Возврат 6;
	ИначеЕсли СтрокаМесяц = "JUL" ИЛИ СтрокаМесяц = "JULY" Тогда
		Возврат 7;
	ИначеЕсли СтрокаМесяц = "AUG" ИЛИ СтрокаМесяц = "AUGUST" Тогда
		Возврат 8;
	ИначеЕсли СтрокаМесяц = "SEP" ИЛИ СтрокаМесяц = "SEPTEMBER" Тогда
		Возврат 9;
	ИначеЕсли СтрокаМесяц = "OCT" ИЛИ СтрокаМесяц = "OCTOBER" Тогда
		Возврат 10;
	ИначеЕсли СтрокаМесяц = "NOV" ИЛИ СтрокаМесяц = "NOVEMBER" Тогда
		Возврат 11;
	ИначеЕсли СтрокаМесяц = "DEC" ИЛИ СтрокаМесяц = "DECEMBER" Тогда
		Возврат 12;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции






