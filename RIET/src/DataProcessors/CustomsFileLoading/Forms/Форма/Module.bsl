
//////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыбратьФайл();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ВЫБОР ФАЙЛА

&НаКлиенте
Процедура FullPathНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "XML files|*.xml";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		FullPath = ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

&НаКлиенте
Процедура Load(Команда)
	
	Если НЕ ЗначениеЗаполнено(FullPath) Тогда
		
		ВыбратьФайл();
		
		Если НЕ ЗначениеЗаполнено(FullPath) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"No file selected!",
				, "Объект", "FullPath");
				Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние("Loading file, please wait...");
	
	ЗагрузитьCCDИзФайла();		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьCCDИзФайла() Экспорт
	
	// Проверим существование файла и все такое
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(FullPath) Тогда
		Возврат;
	КонецЕсли;
	
	// Поместим файл во временное хранилище
	АдресФайла = Неопределено;
	ПоместитьФайл(АдресФайла, FullPath,, Ложь, УникальныйИдентификатор);
	
	// Выцепим краткое имя файла, оно может понадобится для определения номера ДТ
	Файл = Новый Файл(FullPath);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	// Разберем файл на сервере и создадим объекты базы
	БылиКритическиеОшибки = Ложь;
	БылиНедочеты = Ложь;
	DT = ЗагрузитьCCDИзФайлаНаСервере(БылиКритическиеОшибки, БылиНедочеты, АдресФайла, ИмяБезРасширения);
	
	// Выведем результаты загрузки
	Если БылиКритическиеОшибки Тогда
		
		Предупреждение(
			"DT was not loaded!
			|See errors on the right side of the loading window.",
			60);
		
	ИначеЕсли БылиНедочеты Тогда
		
		Предупреждение(
			"DT was loaded with errors!
			|See errors on the right side of the loading window.",
			60);
		
	Иначе
		
		ПоказатьОповещениеПользователя(, , "DT was successfully loaded");
		
	КонецЕсли;
	
	// Откроем ДТ, если она загрузилась
	Если ЗначениеЗаполнено(DT) Тогда
		ПоказатьЗначение(,DT);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьCCDИзФайлаНаСервере(БылиКритическиеОшибки, БылиНедочеты, АдресФайла, ИмяБезРасширения)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	// Сохраним переданные данные во временный файл
	// ПолноеИмяВременногоФайла = КаталогВременныхФайлов() + КраткоеИмяФайла;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ПолноеИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save .xml file on server:
				|" + ОписаниеОшибки(),
			,,, БылиКритическиеОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Разберем файл и создадим объекты базы
	DT = РазобратьXMLИСоздатьДТ(БылиКритическиеОшибки, БылиНедочеты, ПолноеИмяВременногоФайла, ИмяБезРасширения);
	
	// Удалим временный файл
	Попытка
		УдалитьФайлы(ПолноеИмяВременногоФайла);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to delete temporary .xml file from server:
				|" + ОписаниеОшибки(),
			,,, БылиНедочеты);
	КонецПопытки;
	
	//Если НЕ БылиКритическиеОшибки Тогда
		//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.CCDЗагрузка, DT);
	//КонецЕсли;
	
	Возврат DT;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьXMLИСоздатьДТ(БылиКритическиеОшибки, БылиНедочеты, ПолноеИмяФайла, ИмяБезРасширения) Экспорт
	
	СтруктураДанных = ПолучитьСтруктуруДанныхИзXML(ПолноеИмяФайла);
	
	Если СтруктураДанных.Свойство("ESADout") Тогда
		
		// Иногда в XML союза нет блока с номером ДТ
		// В этом случае попытаемся выцепить эти данные из имени файла
		Если НЕ СтруктураДанных.Свойство("GTDNumber") Тогда
			
			СтруктураGTDNumber = ПолучитьСтруктуруДанныхGTDNumberИзИмениФайла(ИмяБезРасширения);   			
			Если СтруктураGTDNumber = Неопределено Тогда 
				БылиКритическиеОшибки = Истина;
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураДанных.Вставить("GTDNumber", СтруктураGTDNumber);
			
		КонецЕсли;
		
		Возврат СоздатьДТСоюзаИзСтруктурыДанныхXML(БылиКритическиеОшибки, БылиНедочеты, СтруктураДанных);
		
	ИначеЕсли СтруктураДанных.Свойство("Declaration") Тогда
		
		Возврат СоздатьДТТуркменистанаИзСтруктурыДанныхXML(БылиКритическиеОшибки, БылиНедочеты, СтруктураДанных);
		
	Иначе
		
		Сообщить("Unknown XML format!");
		БылиКритическиеОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхИзXML(ПолноеИмяФайла)
	
	СтруктураДанных = Новый Структура;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПолноеИмяФайла);
		
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Пропустить();
		КонецЕсли;
		
		// МОЖЕТ БЫТЬ МОЖНО ЭФФЕКТИВНЕЕ ДОЙТИ ДО ESADout?
		Если Чтение.Имя = "ESADout" ИЛИ Чтение.Имя = "ESADout_CU" Тогда
			
			СтруктураДанных.Вставить("ESADout", ПолучитьСтруктуруДанныхУзла(Чтение));
			  			
		ИначеЕсли Чтение.Имя = "CCD" Тогда
			
			// Перейдем к первому вложенному узлу
			Чтение.Прочитать();
			
			// Добавим структуру данных все элементы узла CCD кроме schema
			Пока НЕ (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "CCD") Цикл
				
				Если Чтение.Имя = "xsd:schema" Тогда
					
					Чтение.Пропустить();
					
				Иначе
					
					// Если в структуре данных такого элемента еще нет - создадим его
					Если НЕ СтруктураДанных.Свойство(Чтение.Имя) Тогда
						СтруктураДанных.Вставить(Чтение.Имя, Новый Массив);
					КонецЕсли;
					
					// Добавим данные в структуру данных
					СтруктураДанныхУзла = ПолучитьСтруктуруДанныхУзла(Чтение);
					СтруктураДанных[Чтение.Имя].Добавить(СтруктураДанныхУзла);
					
					// Перейдем к следующему элементу
					Чтение.Прочитать();
					
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
				
		ИначеЕсли Чтение.Имя = "Inventory" Тогда
			
			Чтение.Прочитать();
			
			// Перейдем к первому вложенному узлу		
			Пока НЕ (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Inventory") Цикл
				
				Если Чтение.Имя = "GTDNumber" Тогда
					СтруктураДанных.Вставить("GTDNumber", ПолучитьСтруктуруДанныхУзла(Чтение));
					Прервать;
				Иначе
					Чтение.Пропустить();
				КонецЕсли;
							
			КонецЦикла;
			
			Прервать;
			
		ИначеЕсли Чтение.Имя = "DTSout_CU" Тогда
			
			Чтение.Прочитать();
			
			// Перейдем к первому вложенному узлу		
			Пока НЕ (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "DTSout_CU") Цикл
				
				Если Чтение.Имя = "GTDNumber" Тогда
					СтруктураДанных.Вставить("GTDNumber", ПолучитьСтруктуруДанныхУзла(Чтение));
					Прервать;
				Иначе
					Чтение.Пропустить();
				КонецЕсли;
							
			КонецЦикла;
			
			Прервать;

		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	// загрузка кривой xml от SIGMA-SOFT
	СтруктураДанных.Вставить("CustomsPostNumber", "");
	ТекстовыйДок = Новый ТекстовыйДокумент;
	ТекстовыйДок.Прочитать(ПолноеИмяФайла);
	Текст = ТекстовыйДок.ПолучитьТекст();
	НачалоСтрокиGA = СтрНайти(Текст, "SIGMA-SOFT.ESAD.GA");
	НачалоСтрокиGN = СтрНайти(Текст, "SIGMA-SOFT.ESAD.GN");
	Если НачалоСтрокиGA > 0 
		И НачалоСтрокиGN > 0 Тогда
		
		СтрокаСНомером = Сред(Текст, (НачалоСтрокиGA + СтрДлина("SIGMA-SOFT.ESAD.GA")), (НачалоСтрокиGN - НачалоСтрокиGA)); 
		CustomsPostNumber = "";
		символ = "";
		сч = 1;
		Для сч = 1 по СтрДлина(СтрокаСНомером) Цикл 
			
			символ = Сред(СтрокаСНомером, сч, 1);
			
			Если символ = "/" Тогда 
				Прервать;
			КонецЕсли;
			 			
			Попытка
				символ = Число(символ);
				CustomsPostNumber = CustomsPostNumber + символ;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		       		
		СтруктураДанных.CustomsPostNumber = CustomsPostNumber;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхУзла(Чтение)
	
	ВозвращаемоеЗначение = Новый Структура;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ВозвращаемоеЗначение = СокрЛП(Чтение.Значение);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			СтруктураПодчиненногоУзла = ПолучитьСтруктуруДанныхУзла(Чтение);
			МассивЗначений = Неопределено;
			Если НЕ ВозвращаемоеЗначение.Свойство(Чтение.ЛокальноеИмя, МассивЗначений) Тогда
				МассивЗначений = Новый Массив;	
				ВозвращаемоеЗначение.Вставить(Чтение.ЛокальноеИмя, МассивЗначений);
			КонецЕсли;
			МассивЗначений.Добавить(СтруктураПодчиненногоУзла);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Прервать;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// ДОДЕЛАТЬ
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхGTDNumberИзИмениФайла(Знач ИмяБезРасширения)
	
	// СДЕЛАТЬ, ЧТОБЫ В КАЗАХСТАНСКИХ ГТДШКАХ ЧИТАЛАТЬ ДАТА
	
	СтруктураВозврата = Новый Структура;
	
	ИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, "_", "-");
	ИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, "Container-", "");

	ПервоеВхождение = СтрНайти(ИмяБезРасширения, "-");
	Если ПервоеВхождение Тогда 

		ЛеваяЧасть = Сред(ИмяБезРасширения, 1, ПервоеВхождение-1);	
		КодПоста = СокрЛП(ЛеваяЧасть);
		СтруктураВозврата.Вставить("CustomsCode", Новый Массив);
		СтруктураВозврата.CustomsCode.Добавить(КодПоста);

		ИмяБезРасширения = Сред(ИмяБезРасширения, ПервоеВхождение+1);
		
		ВтороеВхождение = СтрНайти(ИмяБезРасширения, "-");
		Если ВтороеВхождение Тогда
			
			СредняяЧасть = Сред(ИмяБезРасширения, 1, ВтороеВхождение-1);
			Если СтрДлина(СредняяЧасть) = 6 Тогда
				
				День = Сред(СредняяЧасть, 1, 2);
				Месяц = Сред(СредняяЧасть, 3, 2);
				Год = "20" + Сред(СредняяЧасть, 5, 2);
				ДатаГТД = Год + "-" + Месяц + "-" + День;	
				
				СтруктураВозврата.Вставить("RegistrationDate", Новый Массив);
				СтруктураВозврата.RegistrationDate.Добавить(ДатаГТД);		
					
			КонецЕсли;
			
			ИмяБезРасширения = Сред(ИмяБезРасширения, ВтороеВхождение+1);
			
			Если СтрДлина(ИмяБезРасширения) > 0 Тогда
				
				SequenceNo = СокрЛП(ИмяБезРасширения);
				СтруктураВозврата.Вставить("GTDNumber", Новый Массив);
				СтруктураВозврата.GTDNumber.Добавить(SequenceNo);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Если Не СтруктураВозврата.Свойство("CustomsCode") ИЛИ Не СтруктураВозврата.Свойство("RegistrationDate") 
		ИЛИ Не СтруктураВозврата.Свойство("GTDNumber") Тогда 
		Сообщить("Xml-file name should be corrected: ""Customs post""-""DDMMYY (Registration date)""-""Sequence No.""!");
		
		Возврат Неопределено;
		
	КонецЕсли;  	
	
	Возврат СтруктураВозврата;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
// РАЗБОР ДАННЫХ ДТШКИ СОЮЗА

&НаСервереБезКонтекста
Функция СоздатьДТСоюзаИзСтруктурыДанныхXML(Отказ, БылиНедочеты, СтруктураДанных)
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Документ = НайтиИлиСоздатьCCD(СтруктураДанных.GTDNumber, СтруктураДанных.CustomsPostNumber, БылиНедочеты);
	Если Документ = Неопределено Тогда
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента = Документ.Метаданные();
	Если Документ.ЭтоНовый() Тогда
		Документ.УстановитьСсылкуНового(Документы.ГТД.ПолучитьСсылку());
	КонецЕсли;
	
	// Customs regime
	ЗаполнитьРеквизитыCustomsRegime(СтруктураДанных.ESADout, Документ, БылиНедочеты);
	
	// Узел GoodsShipment
	СтруктураДанныхGoodsShipment = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных.ESADout, "ESADout_CUGoodsShipment");
	Если СтруктураДанныхGoodsShipment = Неопределено Тогда
		СтруктураДанныхGoodsShipment = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных.ESADout, "ESADoutGoodsShipment");
	КонецЕсли;
	Если СтруктураДанныхGoodsShipment = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Неизвестный формат xml: не удалось найти узел GoodsShipment!",
			,,, Отказ);
	Иначе
		ЗаполнитьДанныеИзУзлаGoodsShipment(Документ, МетаданныеДокумента, СтруктураДанныхGoodsShipment, Отказ);
	КонецЕсли;	
		
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РежимЗаписи = ?(Документ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	Попытка
		Документ.Записать(РежимЗаписи);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save """ + Документ + """:
			|" + ОписаниеОшибки(),
			Документ,,, Отказ);
	КонецПопытки;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
						
	Возврат Документ.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИлиСоздатьCCD(СтруктураУзлаGTDNumber, CustomsPostNumber, БылиНедочеты)
	
	CustomsPost = Неопределено;
	CustomsPostNo = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGTDNumber, "CustomsCode");	
	Если ЗначениеЗаполнено(CustomsPostNo) Тогда
		
		CustomsPost = ПолучитьCustomsPostПоКоду(CustomsPostNo, CustomsPostNumber);
		Если НЕ ЗначениеЗаполнено(CustomsPost) Тогда
			БылиНедочеты = Истина;
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to retrieve Customs post no.!",
			,,, БылиНедочеты);
		
	КонецЕсли;
	
	Date = Неопределено;
	TextDate = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGTDNumber, "RegistrationDate");
	Если ЗначениеЗаполнено(TextDate) Тогда
		
		Попытка
			Date = Дата(СтрЗаменить(TextDate, "-", ""));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to convert """ + TextDate + """ to Date of Customs file!",
				,,, БылиНедочеты);
		КонецПопытки;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to retrieve Date of Customs file!",
			,,, БылиНедочеты);
		
	КонецЕсли;
	
	SequenceNo = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGTDNumber, "GTDNumber");
	Если НЕ ЗначениеЗаполнено(SequenceNo) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to retrieve Sequence no. of Customs file!",
			,,, БылиНедочеты);
		
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	Если ЗначениеЗаполнено(CustomsPost)
		И ЗначениеЗаполнено(Date)
		И ЗначениеЗаполнено(SequenceNo) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("CustomsPost", CustomsPost);
		Запрос.УстановитьПараметр("Дата", Date);
		Запрос.УстановитьПараметр("SequenceNo", SequenceNo);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументГТД.Ссылка,
			|	ДокументГТД.Проведен
			|ИЗ
			|	Документ.ГТД КАК ДокументГТД
			|ГДЕ
			|	ДокументГТД.CustomsPost = &CustomsPost
			|	И ДокументГТД.Дата = &Дата
			|	И ДокументГТД.SequenceNo = &SequenceNo
			|	И (НЕ ДокументГТД.ПометкаУдаления)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			Если Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"There is already posted """ + Выборка.Ссылка + """!",
					,,, БылиНедочеты);
				Возврат Неопределено;
			Иначе
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
		ИначеЕсли Выборка.Количество() > 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Found more than one Customs file with
				|Customs post """ + СокрЛП(CustomsPost) + """
				|Date " + Формат(Date,"ДЛФ=D") + "
				|Seq. no. """ + SequenceNo + """!",
				,,, БылиНедочеты);
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		ДокументОбъект = Документы.ГТД.СоздатьДокумент();
		ДокументОбъект.CustomsPost = CustomsPost;
		ДокументОбъект.Дата = Date;
		ДокументОбъект.SequenceNo = SequenceNo;
		ДокументОбъект.Заполнить(Неопределено);
		
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьCustomsPostПоКоду(Код, CustomsPostNumber) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Код", Код);
	СтруктураПоиска.Вставить("ПометкаУдаления", Ложь);
	Выборка = РГСофтСерверПовтИспСеанс.ПолучитьВыборку("Справочник", "CustomsPosts", "Ссылка", СтруктураПоиска, Истина);
	
	Если Выборка.Количество() = 0 И CustomsPostNumber <> "" Тогда
		СтруктураПоиска.Код = CustomsPostNumber;
		Выборка = РГСофтСерверПовтИспСеанс.ПолучитьВыборку("Справочник", "CustomsPosts", "Ссылка", СтруктураПоиска, Истина);
		Если Выборка.Количество() = 0  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find Customs post by code in SIGMA-SOFT.ESAD.GA """ + CustomsPostNumber + """!");
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.Количество() = 0  Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Customs post by code """ + Код + """!");
		ОбновитьПовторноИспользуемыеЗначения();
		
	ИначеЕсли Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Found more than one Customs post by code """ + Код + """!");
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

// ДОДЕЛАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаGoodsShipment(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.СтранаПроисхождения = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OriginCountryName"); 
		
	КолвоТоваровТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TotalGoodsNumber");
	Если КолвоТоваровТекст <> Неопределено Тогда
		Документ.КолвоТоваров = ПреобразоватьСтрокуВЧисло(КолвоТоваровТекст, МетаданныеДокумента, "КолвоТоваров");
	КонецЕсли;
	
	КолвоМестТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TotalPackageNumber");
	Если КолвоМестТекст <> Неопределено Тогда
		Документ.КолвоМест = ПреобразоватьСтрокуВЧисло(КолвоМестТекст, МетаданныеДокумента, "КолвоМест");
	КонецЕсли;
	
	КоличествоСтраницТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TotalSheetNumber");
	Если КоличествоСтраницТекст <> Неопределено Тогда
		Документ.КоличествоСтраниц = ПреобразоватьСтрокуВЧисло(КоличествоСтраницТекст, МетаданныеДокумента, "КоличествоСтраниц");
	КонецЕсли;
	
	// Нет в версии 5?
	ОбщаяТамСтоимостьТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TotalCustCost");
	Если ОбщаяТамСтоимостьТекст <> Неопределено Тогда
		Документ.ОбщаяТамСтоимость = ПреобразоватьСтрокуВЧисло(ОбщаяТамСтоимостьТекст, МетаданныеДокумента, "ОбщаяТамСтоимость");
	КонецЕсли;
	
	// Нет в версии 5?
	КодВалютыТамСтоимостиТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CustCostCurrencyCode");
	Если КодВалютыТамСтоимостиТекст <> Неопределено Тогда
		
		Если КодВалютыТамСтоимостиТекст = "643" ИЛИ КодВалютыТамСтоимостиТекст = "RUB" ИЛИ КодВалютыТамСтоимостиТекст = "RUR" Тогда
			КодВалютыТамСтоимостиТекст = "RUB";
		КонецЕсли;	
		Документ.КодВалютыТамСтоимости = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Валюты", "Наименование", КодВалютыТамСтоимостиТекст);
		Если НЕ ЗначениеЗаполнено(Документ.КодВалютыТамСтоимости) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find Currency by Code """ + КодВалютыТамСтоимостиТекст + """!");
			// НУЖНО ЧТОБЫ РЕГИСТРИРОВАЛСЯ НЕДОЧЕТ
		КонецЕсли;
		
	КонецЕсли;
	
	// Узел consignor
	СтруктураДанныхConsignor = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUConsignor");
	Если СтруктураДанныхConsignor = Неопределено Тогда
		СтруктураДанныхConsignor = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutConsignor");
	КонецЕсли;
	Если СтруктураДанныхConsignor <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаConsignor(Документ, СтруктураДанныхConsignor, Отказ);
	КонецЕсли;
	
	// Узел consignee
	СтруктураДанныхConsignee = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUConsignee");
	Если СтруктураДанныхConsignee = Неопределено Тогда
		СтруктураДанныхConsignee = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutConsignee");
	КонецЕсли;
	Если СтруктураДанныхConsignee <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаConsigee(Документ, СтруктураДанныхConsignee, Отказ);
	КонецЕсли;
	
	// Узел FinancialAdjustingResponsiblePerson
	СтруктураДанныхFinancialAdjustingResponsiblePerson = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUFinancialAdjustingResponsiblePerson");
	Если СтруктураДанныхFinancialAdjustingResponsiblePerson = Неопределено Тогда
		СтруктураДанныхFinancialAdjustingResponsiblePerson = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutFinancialAdjustingResponsiblePerson");
	КонецЕсли;
	Если СтруктураДанныхFinancialAdjustingResponsiblePerson <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаFinancialAdjustingResponsiblePerson(Документ, МетаданныеДокумента, СтруктураДанныхFinancialAdjustingResponsiblePerson, Отказ);
	КонецЕсли;
	
	// Узел Declarant
	СтруктураДанныхDeclarant = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUDeclarant");
	Если СтруктураДанныхDeclarant = Неопределено Тогда
		СтруктураДанныхDeclarant = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutDeclarant");
	КонецЕсли;
	Если СтруктураДанныхDeclarant <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаDeclarant(Документ, МетаданныеДокумента, СтруктураДанныхDeclarant, Отказ);
	КонецЕсли;
	
	// Узел FilledPerson
	СтруктураДанныхFilledPerson = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUFilledPerson");
	Если СтруктураДанныхFilledPerson <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаFilledPerson(Документ, МетаданныеДокумента, СтруктураДанныхFilledPerson, Отказ);
	КонецЕсли;
	
	// Узел Goods location
	СтруктураДанныхGoodLocation = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUGoodsLocation");
	Если СтруктураДанныхGoodLocation = Неопределено Тогда
		СтруктураДанныхGoodLocation = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutGoodsLocation");
	КонецЕсли;
	Если СтруктураДанныхGoodLocation <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаGoodsLocation(Документ, МетаданныеДокумента, СтруктураДанныхGoodLocation, Отказ);
	КонецЕсли;
	
	СтруктураДанныхConsigment = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUConsigment");
	Если СтруктураДанныхConsigment = Неопределено Тогда
		СтруктураДанныхConsigment = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutConsigment");
	КонецЕсли;
	Если СтруктураДанныхConsigment <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаConsigment(Документ, МетаданныеДокумента, СтруктураДанныхConsigment, Отказ);
	КонецЕсли;
	
	СтруктураДанныхContractTerms = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUMainContractTerms");
	Если СтруктураДанныхContractTerms = Неопределено Тогда
		СтруктураДанныхContractTerms = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutMainContractTerms");
	КонецЕсли;
	Если СтруктураДанныхContractTerms <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаContractTerms(Документ, МетаданныеДокумента, СтруктураДанныхContractTerms, Отказ);
	КонецЕсли;
	
	МассивСтруктурGoods = Неопределено;
	Если НЕ СтруктураДанных.Свойство("ESADout_CUGoods", МассивСтруктурGoods) Тогда
		СтруктураДанных.Свойство("ESADoutGoods", МассивСтруктурGoods);
	КонецЕсли;
	Если МассивСтруктурGoods = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Неизвестный формат xml: не удалось найти узел Goods!",
			,,, Отказ);
	Иначе	
		
		ЗаполнитьДанныеИзУзловGoods(Документ, МетаданныеДокумента, МассивСтруктурGoods, Отказ);
		
		// УДАЛИТЬ
		//Для Каждого СтруктураДанныхGoods Из МассивСтруктурGoods Цикл
		//	ЗаполнитьДанныеИзУзлаGoods(Документ, МетаданныеДокумента, СтруктураДанныхGoods, Отказ);
		//КонецЦикла;
		
	КонецЕсли;
		
	СтруктураДанныхPayments = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUPayments");
	Если СтруктураДанныхPayments = Неопределено Тогда
		СтруктураДанныхPayments = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutPayments");
	КонецЕсли;
	Если СтруктураДанныхPayments <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаPayments(Документ, МетаданныеДокумента, СтруктураДанныхPayments, Отказ);
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаConsignor(Документ, СтруктураДанных, Отказ)
	
	Документ.Отправитель = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OrganizationName");
	
	СтруктураДанныхДляПоискаИННКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RFOrganizationFeatures"); 
	Если СтруктураДанныхДляПоискаИННКПП = Неопределено Тогда
		СтруктураДанныхДляПоискаИННКПП = СтруктураДанных;
	КонецЕсли;
	Документ.ОтправительИНН = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "INN"); 
	Документ.ОтправительКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "KPP"); 
			
	СтруктураДанныхAddress = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Address");
	Если СтруктураДанныхAddress <> Неопределено Тогда
		
		Документ.ОтправительАдрес = ПолучитьСтрокуАдресаИзСтруктуры(СтруктураДанныхAddress);
		Документ.СтранаОтправления = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхAddress, "CountryCode");
		Документ.СтранаОтправленияКод = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхAddress, "CounryName");
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаConsigee(Документ, СтруктураДанных, Отказ)
	
	Документ.Получатель = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OrganizationName");
		
	СтруктураДанныхДляПоискаИННКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RFOrganizationFeatures"); 
	Если СтруктураДанныхДляПоискаИННКПП = Неопределено Тогда
		СтруктураДанныхДляПоискаИННКПП = СтруктураДанных;
	КонецЕсли;
	Документ.ПолучательИНН = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "INN"); 
	Документ.ПолучательКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "KPP");
	
	СтруктураДанныхAddress = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Address");
	Если СтруктураДанныхAddress <> Неопределено Тогда
		
		Документ.ПолучательАдрес = ПолучитьСтрокуАдресаИзСтруктуры(СтруктураДанныхAddress);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаFinancialAdjustingResponsiblePerson(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.ОтветственноеЛицо = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OrganizationName");
		
	СтруктураДанныхДляПоискаИННКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RFOrganizationFeatures"); 
	Если СтруктураДанныхДляПоискаИННКПП = Неопределено Тогда
		СтруктураДанныхДляПоискаИННКПП = СтруктураДанных;
	КонецЕсли;
	Документ.ОтветственноеЛицоИНН = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "INN"); 
	Документ.ОтветственноеЛицоКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "KPP");
	
	СтруктураДанныхAddress = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Address");
	Если СтруктураДанныхAddress <> Неопределено Тогда
		
		Документ.ОтветственноеЛицоАдрес = ПолучитьСтрокуАдресаИзСтруктуры(СтруктураДанныхAddress);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаDeclarant(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.Декларант = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OrganizationName");
		
	СтруктураДанныхДляПоискаИННКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RFOrganizationFeatures"); 
	Если СтруктураДанныхДляПоискаИННКПП = Неопределено Тогда
		СтруктураДанныхДляПоискаИННКПП = СтруктураДанных;
	КонецЕсли;
	Документ.ДекларантИНН = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "INN"); 
	Документ.ДекларантКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхДляПоискаИННКПП, "KPP");
	
	СтруктураДанныхAddress = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Address");
	Если СтруктураДанныхAddress <> Неопределено Тогда
		
		Документ.ДекларантАдрес = ПолучитьСтрокуАдресаИзСтруктуры(СтруктураДанныхAddress);
		
	КонецЕсли;
		
	СтруктураДанныхFilledPerson = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutFilledPerson");
	Если СтруктураДанныхFilledPerson <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаFilledPerson(Документ, МетаданныеДокумента, СтруктураДанныхFilledPerson, Отказ); 
	КонецЕсли;
			
	СтруктураДанныхCustomsBrokerContract = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CustomsBrokerContract");
	Если СтруктураДанныхCustomsBrokerContract <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаCustomsBrokerContract(Документ, МетаданныеДокумента, СтруктураДанныхCustomsBrokerContract, Отказ);
	КонецЕсли;
							
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаCustomsBrokerContract(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.СвидетельствоНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CertificateNumber");		
	
	СвидетельствоДатаВыдачиТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IssueCertificateDate");
	Если ЗначениеЗаполнено(СвидетельствоДатаВыдачиТекст) Тогда
		Документ.СвидетельствоДатаВыдачи = ПреобразоватьСтрокуВДату(СвидетельствоДатаВыдачиТекст, МетаданныеДокумента, "СвидетельствоДатаВыдачи"); 
	КонецЕсли;
	
	Документ.ДоговорНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "AgreementNumber");
		
	ДоговорДатаЗаключенияТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ConclusionAgreementDate");
	Если ЗначениеЗаполнено(ДоговорДатаЗаключенияТекст) Тогда
		Документ.ДоговорДатаЗаключения = ПреобразоватьСтрокуВДату(ДоговорДатаЗаключенияТекст, МетаданныеДокумента, "ДоговорДатаЗаключения"); 
	КонецЕсли;
	
	Документ.БрокерИНН = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "INNID");
	
	Если ЗначениеЗаполнено(Документ.БрокерИНН) Тогда
		
		Документ.CCA = CustomsСерверПовтИсп.ПолучитьAgentПоИНН(Документ.БрокерИНН);
		Если НЕ ЗначениеЗаполнено(Документ.CCA) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find CCA by ИНН """ + Документ.БрокерИНН + """!");
		КонецЕсли;
		
	КонецЕсли;
	
	Документ.БрокерКПП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "KPPCode"); 
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаFilledPerson(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.БрокерФИО = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PersonSurname");
	Если НЕ ЗначениеЗаполнено(Документ.БрокерФИО) Тогда
		Документ.БрокерФИО = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PersonName");
	КонецЕсли;

	Документ.БрокерДолжность = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PersonPost"); 
	Документ.БрокерТелефон = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ContactPhone"); 
	
	СтруктураДанныхAuthoritesDocument = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "AuthoritesDocument");
	Если СтруктураДанныхAuthoritesDocument <> Неопределено Тогда
		ЗаполнитьДанныеИзУзлаAuthoritesDocument(Документ, МетаданныеДокумента, СтруктураДанныхAuthoritesDocument, Отказ);
	КонецЕсли;
	
	СтруктураДанныхIdentityCard = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IdentityCard");
	Если СтруктураДанныхIdentityCard <> Неопределено Тогда	
		ЗаполнитьДанныеИзУзлаIdentityCard(Документ, МетаданныеДокумента, СтруктураДанныхIdentityCard, Отказ);			
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаAuthoritesDocument(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.БрокерДокумент = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentName"); 
	Документ.БрокерДокументНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentNumber"); 
	
	БрокерДокументДатаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentDate");
	Если ЗначениеЗаполнено(БрокерДокументДатаТекст) Тогда
		Документ.БрокерДокументДата = ПреобразоватьСтрокуВДату(БрокерДокументДатаТекст, МетаданныеДокумента, "БрокерДокументДата");
	КонецЕсли;
	
	БрокерДокументДатаОкончанияТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ComplationAuthorityDate");
	Если ЗначениеЗаполнено(БрокерДокументДатаОкончанияТекст) Тогда
		Документ.БрокерДокументДатаОкончания = ПреобразоватьСтрокуВДату(БрокерДокументДатаОкончанияТекст, МетаданныеДокумента, "БрокерДокументДатаОкончания");
	КонецЕсли;
										
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаIdentityCard(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	Документ.БрокерДокументЛичность = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IdentityCardName");
	Документ.БрокерДокументЛичностьСерия = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IdentityCardSeries"); 
	Документ.БрокерДокументЛичностьНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IdentityCardNumber"); 			
	Документ.БрокерДокументЛичностьОргВыдачи = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OrganizationName");
	
	БрокерДокументЛичностьДатаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "IdentityCardDate"); 						
	Если ЗначениеЗаполнено(БрокерДокументЛичностьДатаТекст) Тогда
		Документ.БрокерДокументЛичностьДата = ПреобразоватьСтрокуВДату(БрокерДокументЛичностьДатаТекст, МетаданныеДокумента, "БрокерДокументЛичностьДата"); 	
	КонецЕсли;
	
КонецПроцедуры

// ДУМАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаGoodsLocation(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	СтруктураДанныхGoodsLocationPlace = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "GoodsLocationPlace");
	Если СтруктураДанныхGoodsLocationPlace <> Неопределено Тогда
		
		// НЕ ВИДЕЛ ТАКОГО УЗЛА
		СтруктураДанныхAddress = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Address");
		Если СтруктураДанныхAddress <> Неопределено Тогда
			Документ.МестонахождениеТоваров = ПолучитьСтрокуАдресаИзСтруктуры(СтруктураДанныхAddress);	
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

// ДУМАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаConsigment(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	КонтейнерПризнакТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ContainerIndicator"); 						
	Если КонтейнерПризнакТекст = "true" или КонтейнерПризнакТекст = "1" Тогда
		Документ.КонтейнерПризнак = "1";
	Иначе
		Документ.КонтейнерПризнак = "0";
	КонецЕсли;
		
	//СТРАНА ОТПРАВЛЕНИЯ КОД ЗАГРУЖАЕТСЯ ВТОРОЙ РАЗ
	СтранаОтправленияКод = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "DispatchCountryCode");
	Если ЗначениеЗаполнено(СтранаОтправленияКод) Тогда
		Документ.СтранаОтправленияКод = СтранаОтправленияКод;
	КонецЕсли;
	
	//СТРАНА ОТПРАВЛЕНИЯ ЗАГРУЖАЕТСЯ ВТОРОЙ РАЗ
	СтранаОтправления = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "DispatchCountryName"); 
	Если ЗначениеЗаполнено(СтранаОтправления) Тогда
		Документ.СтранаОтправления = СтранаОтправления;
	КонецЕсли;
	
	Документ.СтранаНазначенияКод = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "DestinationCountryCode");
	Документ.СтранаНазначения = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "DestinationCountryName"); 
							
	СтруктураДанныхBorderTransport = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADout_CUBorderTransport");
	Если СтруктураДанныхBorderTransport = Неопределено Тогда
		СтруктураДанныхBorderTransport = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutBorderTransport");
	КонецЕсли;
	Если СтруктураДанныхBorderTransport <> Неопределено Тогда
		
		Документ.ТСНаГраницеВид = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхBorderTransport, "TransportModeCode");
		Документ.ТСНаГраницеСтранаРег = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхBorderTransport, "TransportNationalityCode");
		
		СтруктураДанныхTransportMeans = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхBorderTransport, "TransportMeans");
		Если СтруктураДанныхTransportMeans <> Неопределено Тогда
			
			Документ.ТСНаГраницеНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхTransportMeans, "TransportIdentifier");
			Документ.ТСНаГранице = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхTransportMeans, "TransportTraditionalName");	
						
		КонецЕсли;
						
	КонецЕсли;
	
	// НЕ ВИДЕЛ ТАКОГО УЗЛА
	СтруктураДанныхDepartureArrivalTransport = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutDepartureArrivalTransport");
	Если СтруктураДанныхDepartureArrivalTransport <> Неопределено Тогда
		
		Документ.ТСПриОтправленииКод = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDepartureArrivalTransport, "TransportModeCode");
		Документ.ТСПриОтправленииСтранаРег = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDepartureArrivalTransport, "TransportNationalityCode");
		
		СтруктураДанныхTransportMeans = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDepartureArrivalTransport, "TransportMeans");
		Если СтруктураДанныхTransportMeans <> Неопределено Тогда
			
			Документ.ТСПриОтправленииНомер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхTransportMeans, "TransportIdentifier");
			Документ.ТСПриОтправлении = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхTransportMeans, "TransportTraditionalName");	
						
		КонецЕсли;		
							
	КонецЕсли;
	
	// НЕТ В ВЕРСИИ 5
	СтруктураДанныхLoadingPlace = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADoutLoadingPlace");
	Если СтруктураДанныхLoadingPlace <> Неопределено Тогда
		
		// НЕ ВИДЕЛ ТАКОГО УЗЛА
		Документ.МестоПогрузки = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхLoadingPlace, "GoodsLoadingPlaceDesc");
					
		// НЕ ВИДЕЛ ТАКОГО УЗЛА
		МестоПогрузки2 = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхLoadingPlace, "CustomsOfficeID");
		Если МестоПогрузки2 <> Неопределено Тогда
			Документ.МестоПогрузки = Документ.МестоПогрузки + " " + МестоПогрузки2;
		КонецЕсли;
				
	КонецЕсли;
						
КонецПроцедуры

// ДУМАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаContractTerms(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	ContractCurrencyТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ContractCurrencyCode");
	Если ContractCurrencyТекст <> Неопределено Тогда
		
		Если ContractCurrencyТекст = "RUB" ИЛИ ContractCurrencyТекст = "RUR" Тогда
			ContractCurrencyТекст = "RUB";
		КонецЕсли;
		
		Документ.ContractCurrency = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию(ContractCurrencyТекст);
		Если Документ.ContractCurrency.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не найдена валюта по значению """ + ContractCurrencyТекст + """!");
		КонецЕсли;
			
	КонецЕсли;
	
	ContractCurrencyRateТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ContractCurrencyRate");
	Если ЗначениеЗаполнено(ContractCurrencyRateТекст) Тогда
		Документ.ContractCurrencyRate = ПреобразоватьСтрокуВЧисло(ContractCurrencyRateТекст, МетаданныеДокумента, "ContractCurrencyRate");
	КонецЕсли;
	
	TotalInvoiceAmountТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TotalInvoiceAmount");
	Если ЗначениеЗаполнено(TotalInvoiceAmountТекст) Тогда
		Документ.TotalInvoiceAmount = ПреобразоватьСтрокуВЧисло(TotalInvoiceAmountТекст, МетаданныеДокумента, "TotalInvoiceAmount");
	КонецЕсли;
	
	Документ.ТоргСтрана = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TradeCountryCode");
	
	СтруктураДанныхDeliveryTerms = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CUESADDeliveryTerms");
	Если СтруктураДанныхDeliveryTerms = Неопределено Тогда
		СтруктураДанныхDeliveryTerms = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ESADDeliveryTerms");
	КонецЕсли;
	Если СтруктураДанныхDeliveryTerms <> Неопределено Тогда
		
		Документ.ПунктПоставкиТовара = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDeliveryTerms, "DeliveryPlace");
		Документ.УсловияПоставки = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDeliveryTerms, "DeliveryTermsStringCode");
		
	КонецЕсли;
	
	// НЕ НАШЕЛ ТАКОГО УЗЛА В ВЕРСИИ 5
	СтруктураДанныхDealFeatures = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "DealFeatures");
	Если СтруктураДанныхDealFeatures <> Неопределено Тогда
		
		// А ЕСЛИ ПОРЯДОК НЕ ТАКОЙ?
		Документ.БанковскиеСведения = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "PaymentFormCode");
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "DealFeatureCode");
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "DealNatureCode"); 
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "PaymentFeature");	
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "FirstPaymentDate"); 
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "LastPaymentDate");
		Документ.БанковскиеСведения = Документ.БанковскиеСведения + " / " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхDealFeatures, "AgreementCurrencyCode");	
		
	КонецЕсли;	
	
КонецПроцедуры

// ДУМАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзловGoods(Документ, МетаданныеДокумента, МассивУзловGoods, Отказ)
		
	ПродолжаетсяПредыдущаяСтрока = Ложь;
	
	Для Каждого СтруктураУзлаGoods Из МассивУзловGoods Цикл
		
		// Текущая строка может являться обычной строкой ДТ, в которой лежат товары (есть узел GoodsGroupDescription)
		// Это может быть объединяющая строка ДТ, товары которой перечислены далее отдельными строками ДТ (нет ни узла GoodsGroupDescription ни узла GoodsAutomobile)
		// Это может быть как раз товар, который входит в предыдущую объединяющую строку (есть узел GoodsGroupDescription или узел GoodsAutomobile)
		// Последний такой товар определяется по "иссяканию" таможенной стоимости: таможенная стоимость объединяющей строки должна совпадать с суммой таможенных стоимостей товаров
		// Все остальное (есть оба узла) будем считать ошибкой
		
		Если НЕ ПродолжаетсяПредыдущаяСтрока Тогда
			
			// Номер строки ГТД
			НомерСтрокиГТДТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "GoodsNumeric");
			Если ЗначениеЗаполнено(НомерСтрокиГТДТекст) Тогда
				Попытка
					НомерСтрокиГТД = Число(НомерСтрокиГТДТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to convert """ + НомерСтрокиГТДТекст + """ to DT line no.!",
						,,, Отказ);
					Возврат;
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"DT line no. is not specified!",
					,,, Отказ);
					Возврат;
			КонецЕсли;
			
			// Найдем DT line в базе
			СтрокаГТДОбъект = НайтиИлиСоздатьCCDLine(Документ.Ссылка, НомерСтрокиГТД);
			Если СтрокаГТДОбъект = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			// ХОРОШО БЫ ИЗБАВИТЬСЯ ОТ МЕТАДАННЫХ!
			МетаданныеСтрокиГТД = СтрокаГТДОбъект.Метаданные();
			
			СтрокаГТДОбъект.ГТД = ?(Документ.ЭтоНовый(), Документ.ПолучитьСсылкуНового(), Документ.Ссылка);
			Если СтрокаГТДОбъект.ЭтоНовый() Тогда
				СтрокаГТДОбъект.УстановитьСсылкуНового(Справочники.СтрокиГТД.ПолучитьСсылку());
			КонецЕсли;
			
			// DT line no.
			СтрокаГТДОбъект.НомерСтрокиГТД = НомерСтрокиГТД;
			
			// DT line description
			СтрокаГТДОбъект.ОписаниеТовара = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "GoodsDescription");
			
			// Gross weight
			ВесБруттоТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "GrossWeightQuantity");
			Если ЗначениеЗаполнено(ВесБруттоТекст) Тогда
				Попытка
					СтрокаГТДОбъект.ВесБрутто = Число(ВесБруттоТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to convert """ + ВесБруттоТекст + """ to Gross weight of DT line #" + НомерСтрокиГТД);
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Gross weight is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// Net weight
			ВесНеттоТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "NetWeightQuantity");
			Если ЗначениеЗаполнено(ВесНеттоТекст) Тогда
				Попытка
					СтрокаГТДОбъект.ВесНетто = Число(ВесНеттоТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to convert """ + ВесНеттоТекст + """ to Net weight of DT line #" + НомерСтрокиГТД);
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Net weight is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// Customs cost
			ТаможеннаяСтоимостьТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "CustomsCost");
			Если ЗначениеЗаполнено(ТаможеннаяСтоимостьТекст) Тогда
				Попытка
					СтрокаГТДОбъект.ТаможеннаяСтоимость = Число(ТаможеннаяСтоимостьТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to convert """ + ТаможеннаяСтоимостьТекст + """ to Customs cost of DT line #" + НомерСтрокиГТД);
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Customs cost is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// Statistical cost
			СтатистическаяСтоимостьТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "StatisticalCost");
			Если ЗначениеЗаполнено(СтатистическаяСтоимостьТекст) Тогда
				Попытка
					СтрокаГТДОбъект.СтатистическаяСтоимость = Число(СтатистическаяСтоимостьТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to convert """ + СтатистическаяСтоимостьТекст + """ to Statistical cost of DT line #" + НомерСтрокиГТД);
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Statistical cost is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// TN VED	
			СтрокаГТДОбъект.КодТНВЭД = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "GoodsTNVEDCode");
			Если ЗначениеЗаполнено(СтрокаГТДОбъект.КодТНВЭД) Тогда				
				СтрокаГТДОбъект.ТНВЭД = CustomsСерверПовтИсп.ПолучитьТНВЭДПоКоду(СтрокаГТДОбъект.КодТНВЭД);
				Если НЕ ЗначениеЗаполнено(СтрокаГТДОбъект.ТНВЭД) Тогда
					// { RGS AArsentev 27.07.2016 15:45:41 S-I-0001771
					попытка
						ТНВЭД = Справочники.TNVEDCodes.СоздатьЭлемент();
						ТНВЭД.Код = СтрокаГТДОбъект.КодТНВЭД; 
						ТНВЭД.ShortDescription = СтрокаГТДОбъект.КодТНВЭД;  
						ТНВЭД.Записать();
						СтрокаГТДОбъект.ТНВЭД = ТНВЭД.Ссылка;
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Failed to find TN VED by code " + СтрокаГТДОбъект.КодТНВЭД);
					КонецПопытки
					// } RGS AArsentev 27.07.2016 15:45:41 S-I-0001771
				КонецЕсли;					
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"TN VED code is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// Origin country
			СтрокаГТДОбъект.КодСтраныПроисхождения = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "OriginCountryCode");
			Если НЕ ЗначениеЗаполнено(СтрокаГТДОбъект.КодСтраныПроисхождения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Origin country is not specified for DT line #" + НомерСтрокиГТД);
			КонецЕсли;
			
			// Supplementary goods quantity
			СтруктураДанныхSupplementaryGoodsQuantity = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "SupplementaryGoodsQuantity");
			Если СтруктураДанныхSupplementaryGoodsQuantity <> Неопределено Тогда
				
				// Goods qty
				КоличествоДополнительноеТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхSupplementaryGoodsQuantity, "GoodsQuantity");
				Если ЗначениеЗаполнено(КоличествоДополнительноеТекст) Тогда
					Попытка
						СтрокаГТДОбъект.КоличествоДополнительное = Число(КоличествоДополнительноеТекст);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							"Failed to convert """ + КоличествоДополнительноеТекст + """ to Supplementary goods qty of DT line #" + НомерСтрокиГТД);
					КонецПопытки;
				КонецЕсли;
				
				// Measure unit qualifier name
				СтрокаГТДОбъект.НазваниеЕдиницыИзмеренияДополнительное = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхSupplementaryGoodsQuantity, "MeasureUnitQualifierName");
				
				// Measure unit qualifier code
				КодЕдиницыИзмеренияДополнительныйТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхSupplementaryGoodsQuantity, "MeasureUnitQualifierCode");
				Если ЗначениеЗаполнено(КодЕдиницыИзмеренияДополнительныйТекст) Тогда
					Попытка
						СтрокаГТДОбъект.КодЕдиницыИзмеренияДополнительный = Число(КодЕдиницыИзмеренияДополнительныйТекст);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							"Failed to convert """ + КодЕдиницыИзмеренияДополнительныйТекст + """ to Measure unit qualifier code of DT line #" + НомерСтрокиГТД);
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			// Temporary import date and Presented documents
			МассивСтруктурPresentedDocument = Неопределено;
			Если НЕ СтруктураУзлаGoods.Свойство("ESADout_CUPresentedDocument", МассивСтруктурPresentedDocument) Тогда
				СтруктураУзлаGoods.Свойство("ESADoutPresentedDocument", МассивСтруктурPresentedDocument);
			КонецЕсли;
			Если МассивСтруктурPresentedDocument <> Неопределено Тогда
				
				TemporaryImportDateText = "";
				СтрокаГТДОбъект.ПредоставленныеДокументы.Очистить();
				
				Для Каждого СтруктураДанныхPresentedDocument Из МассивСтруктурPresentedDocument Цикл
					
					// Попробуем выцепить очередной значение Temporary import date
					NewTemporaryImportDateText = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхPresentedDocument, "TemporaryImportDate");
					Если ЗначениеЗаполнено(NewTemporaryImportDateText) Тогда
						
						Если ЗначениеЗаполнено(TemporaryImportDateText) Тогда
							
							Если TemporaryImportDateText <> NewTemporaryImportDateText Тогда
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									"Found different temporary import dates in line #" + НомерСтрокиГТД + "!");
									
								TemporaryImportDateText = Неопределено;
								
							КонецЕсли;
							
						ИначеЕсли TemporaryImportDateText = "" Тогда
							
							TemporaryImportDateText = NewTemporaryImportDateText;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Добавим Presented document
					ЗаполнитьДанныеИзУзлаPresentedDocument(СтрокаГТДОбъект, СтруктураДанныхPresentedDocument, Отказ);
							
				КонецЦикла;
				
				// Сконвертируем Temporary import date text в дату
				Если ЗначениеЗаполнено(TemporaryImportDateText) Тогда
					
					TemporaryImportDateText = СтрЗаменить(TemporaryImportDateText, "-", "");
					Попытка
						СтрокаГТДОбъект.TemporaryImportDate = Дата(TemporaryImportDateText);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							"Failed to convert """ + TemporaryImportDateText + """ to Temporary import date of line #" + НомерСтрокиГТД + "!");	
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Presented documents are not specified for DT line #" + НомерСтрокиГТД + "!");	
			КонецЕсли;
			
			// Payment calculation
			МассивСтруктурCustomsPaymentCalculation = Неопределено;
			Если НЕ СтруктураУзлаGoods.Свойство("ESADout_CUCustomsPaymentCalculation", МассивСтруктурCustomsPaymentCalculation) Тогда
				СтруктураУзлаGoods.Свойство("ESADoutCustomsPaymentCalculation", МассивСтруктурCustomsPaymentCalculation)
			КонецЕсли;
			Если МассивСтруктурCustomsPaymentCalculation <> Неопределено Тогда
				
				СтрокаГТДОбъект.ИсчислениеПлатежей.Очистить();
				Для Каждого СтруктураДанныхCustomsPaymentCalculation ИЗ МассивСтруктурCustomsPaymentCalculation Цикл
					ЗаполнитьДанныеИзУзлаCustomsPaymentCalculation(СтрокаГТДОбъект, МетаданныеСтрокиГТД, СтруктураДанныхCustomsPaymentCalculation, Отказ);
				КонецЦикла;
				
			Иначе	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Payment calculation is not specified for DT line #" + НомерСтрокиГТД + "!");	
			КонецЕсли;
			
		КонецЕсли;
		
		// Customs cost
		ТаможеннаяСтоимостьТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураУзлаGoods, "CustomsCost");
		Если ЗначениеЗаполнено(ТаможеннаяСтоимостьТекст) Тогда
			Попытка
				CustomsCost = Число(ТаможеннаяСтоимостьТекст);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to convert """ + ТаможеннаяСтоимостьТекст + """ to Customs cost of DT line #" + НомерСтрокиГТД);
			КонецПопытки;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Customs cost is not specified for DT line #" + НомерСтрокиГТД);
		КонецЕсли;
		
		МассивСтруктурGoodsGroupDescription = Неопределено;
		СтруктураУзлаGoods.Свойство("GoodsGroupDescription", МассивСтруктурGoodsGroupDescription);
		МассивСтруктурGoodsAutomobile = Неопределено;
		СтруктураУзлаGoods.Свойство("GoodsAutomobile", МассивСтруктурGoodsAutomobile);
		
		// Если есть оба узла - это ошибка. Но иногда такое встречается, так что приходится брать описание из GoodsGroupDescription.
		//Если МассивСтруктурGoodsGroupDescription <> Неопределено И МассивСтруктурGoodsAutomobile <> Неопределено Тогда
		//	
		//	Сообщить("Unknown XML format!
		//		|There is node GoodsGroupDescription and node GoodsAutomobile in Customs file line #" + НомерСтрокиГТД);
		//	Отказ = Истина;
		//	Возврат;
		//	
		//КонецЕсли;
		
		// Если есть узел GoodsGroupDescription или GoodsAutomobile - это нормальная строка или товар из предыдущей объединяющей строки
		Если МассивСтруктурGoodsGroupDescription <> Неопределено ИЛИ МассивСтруктурGoodsAutomobile <> Неопределено Тогда
			
			// Если это не продолжение предыдущей DT line - обнулим счетчик товаров и начнем нумерацию заново
			Если НЕ ПродолжаетсяПредыдущаяСтрока Тогда
				НомерТовараСтрокиГТД = 0;
				СтрокаГТДОбъект.ТаможеннаяСтоимость = CustomsCost;
			КонецЕсли;
			
			// Добавим товары в Customs file line из узла GoodsDescription или узла GoodsAutomobile
			Если МассивСтруктурGoodsGroupDescription <> Неопределено Тогда
				
				Для Каждого СтруктураДанныхGoodsGroupDescription Из МассивСтруктурGoodsGroupDescription Цикл
					НомерТовараСтрокиГТД = НомерТовараСтрокиГТД + 1;
					ЗаполнитьДанныеИзУзлаGoodsGroupDescription(СтрокаГТДОбъект, СтруктураДанныхGoodsGroupDescription, НомерТовараСтрокиГТД, Отказ);
				КонецЦикла;
				
			ИначеЕсли МассивСтруктурGoodsAutomobile <> Неопределено Тогда
				
				Для Каждого СтруктураДанныхGoodsAutomobile Из МассивСтруктурGoodsAutomobile Цикл
					НомерТовараСтрокиГТД = НомерТовараСтрокиГТД + 1;
					ЗаполнитьДанныеИзУзлаGoodsAutomobile(СтрокаГТДОбъект, СтруктураДанныхGoodsAutomobile, НомерТовараСтрокиГТД, Отказ);
				КонецЦикла;
				
			КонецЕсли;

			// Если это продолжение предыдущей DT line - проверим Customs cost.
			// Если накопили в сумме сколько нужно - это конец строки
			// Если накопили больше - это косяк
			// Если меньше - значит строка еще будет продолжаться
			Если ПродолжаетсяПредыдущаяСтрока Тогда
				
				Если ЗначениеЗаполнено(CustomsCost) Тогда
					
					GainedCustomsCost = GainedCustomsCost + CustomsCost;
					Если GainedCustomsCost = СтрокаГТДОбъект.ТаможеннаяСтоимость Тогда
						ПродолжаетсяПредыдущаяСтрока = Ложь;
					ИначеЕсли GainedCustomsCost > СтрокаГТДОбъект.ТаможеннаяСтоимость Тогда
						Сообщить("Customs cost cost of DT line #" + НомерСтрокиГТД + " is less than customs cost of included items!");
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				Иначе
					Отказ = Истина; // Ошибка уже писалась выше при определении CustomsCost
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Отказ И НЕ ПродолжаетсяПредыдущаяСтрока Тогда
				ПопытатьсяЗаписатьОбъект(СтрокаГТДОбъект, Отказ, "строку гтд");
			КонецЕсли;
			
		// Если этих узлов нет - это объединяющая строка, за которой последуют строки-товары
		Иначе
			
			СтрокаГТДОбъект.ТаможеннаяСтоимость = CustomsCost;
			Если НЕ ЗначениеЗаполнено(СтрокаГТДОбъект.ТаможеннаяСтоимость) Тогда
				Сообщить("Failed to find GoodsGroupDescription, GoodsAutomobile or CustomsCost nodes in Customs file line #" + НомерСтрокиГТДТекст + "!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			GainedCustomsCost = 0;
			НомерТовараСтрокиГТД = 0;
			ПродолжаетсяПредыдущаяСтрока = Истина;		
			
		КонецЕсли;	
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИлиСоздатьCCDLine(CCD, CCDLineNo)
	
	Если НЕ ЗначениеЗаполнено(CCD) Тогда
		Возврат Справочники.СтрокиГТД.СоздатьЭлемент();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CCD", CCD);
	Запрос.УстановитьПараметр("CCDLineNo", CCDLineNo);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиГТД.Ссылка
		|ИЗ
		|	Справочник.СтрокиГТД КАК СтрокиГТД
		|ГДЕ
		|	СтрокиГТД.ГТД = &CCD
		|	И СтрокиГТД.НомерСтрокиГТД = &CCDLineNo
		|	И (НЕ СтрокиГТД.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Ссылка.ПолучитьОбъект();
		
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Найдено несколько CCD lines с номером " + CCDLineNo + " для """ + CCD + """!");
		Возврат Неопределено;
		
	Иначе
		
		Возврат Справочники.СтрокиГТД.СоздатьЭлемент();
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаGoodsGroupDescription(СтрокаГТДОбъект, СтруктураДанных, НомерТовараСтрокиГТД, Отказ)
	
	ТоварСтрокиГТДОбъект = НайтиИлиСоздатьCCDLineGood(СтрокаГТДОбъект.Ссылка, НомерТовараСтрокиГТД);
	Если ТоварСтрокиГТДОбъект = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МетаданныеТовараСтрокиГТД = ТоварСтрокиГТДОбъект.Метаданные();
	ТоварСтрокиГТДОбъект.Владелец = ?(СтрокаГТДОбъект.ЭтоНовый(), СтрокаГТДОбъект.ПолучитьСсылкуНового(), СтрокаГТДОбъект.Ссылка);
	ТоварСтрокиГТДОбъект.Код = НомерТовараСтрокиГТД;
	
	ТоварСтрокиГТДОбъект.Характеристика = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "GoodsDescription");
	
	СтруктураДанныхGoodsGroupInformation = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "GoodsGroupInformation");
	Если СтруктураДанныхGoodsGroupInformation <> Неопределено Тогда
		
		ТоварСтрокиГТДОбъект.Производитель = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupInformation, "Manufacturer");
		ТоварСтрокиГТДОбъект.ТорговаяМарка = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupInformation, "TradeMark");
		ТоварСтрокиГТДОбъект.МаркаТовара = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupInformation, "GoodsMark");
		ТоварСтрокиГТДОбъект.МаркировкаТовара = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupInformation, "GoodsMarking");
		
		СтруктураДанныхGoodsGroupQuantity = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupInformation, "GoodsGroupQuantity");
		Если СтруктураДанныхGoodsGroupQuantity <> Неопределено Тогда
			
			КоличествоТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupQuantity, "GoodsQuantity");
			Если ЗначениеЗаполнено(КоличествоТекст) Тогда
				ТоварСтрокиГТДОбъект.Количество = ПреобразоватьСтрокуВЧисло(КоличествоТекст, МетаданныеТовараСтрокиГТД, "Количество");
			КонецЕсли;
			
			ТоварСтрокиГТДОбъект.НазваниеЕдиницыИзмерения = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupQuantity, "MeasureUnitQualifierName");
			
			КодЕдиницыИзмеренияТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанныхGoodsGroupQuantity, "MeasureUnitQualifierCode");
			Если ЗначениеЗаполнено(КодЕдиницыИзмеренияТекст) Тогда
				ТоварСтрокиГТДОбъект.КодЕдиницыИзмерения = ПреобразоватьСтрокуВЧисло(КодЕдиницыИзмеренияТекст, МетаданныеТовараСтрокиГТД, "КодЕдиницыИзмерения");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
								
	Если НЕ Отказ Тогда
		ПопытатьсяЗаписатьОбъект(ТоварСтрокиГТДОбъект, Отказ, "товар строки гтд");
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаGoodsAutomobile(СтрокаГТДОбъект, СтруктураДанных, НомерТовараСтрокиГТД, Отказ)
	
	ТоварСтрокиГТДОбъект = НайтиИлиСоздатьCCDLineGood(СтрокаГТДОбъект.Ссылка, НомерТовараСтрокиГТД);
	Если ТоварСтрокиГТДОбъект = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТоварСтрокиГТДОбъект.Владелец = ?(СтрокаГТДОбъект.ЭтоНовый(), СтрокаГТДОбъект.ПолучитьСсылкуНового(), СтрокаГТДОбъект.Ссылка);
	ТоварСтрокиГТДОбъект.Код = НомерТовараСтрокиГТД;
	
	ТоварСтрокиГТДОбъект.Характеристика = "Model: " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Model")
		+ ", offtake year: " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "OfftakeYear")
		+ ", body ID: " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "BodyID")
		+ ", engine ID: " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "EngineID")
		+ ", chasis ID: " + ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "ChassisID");
	
	ТоварСтрокиГТДОбъект.МаркировкаТовара = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Model");
	
	ТоварСтрокиГТДОбъект.Количество = 1;
								
	Если НЕ Отказ Тогда
		ПопытатьсяЗаписатьОбъект(ТоварСтрокиГТДОбъект, Отказ, "товар строки гтд");
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИлиСоздатьCCDLineGood(CCDLine, CCDLineGoodNo)
	
	Если НЕ ЗначениеЗаполнено(CCDLine) Тогда
		Возврат Справочники.ТоварыСтрокГТД.СоздатьЭлемент();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CCDLine", CCDLine);
	Запрос.УстановитьПараметр("CCDLineGoodNo", CCDLineGoodNo);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CCDLineGoods.Ссылка
		|ИЗ
		|	Справочник.ТоварыСтрокГТД КАК CCDLineGoods
		|ГДЕ
		|	CCDLineGoods.Владелец = &CCDLine
		|	И CCDLineGoods.Код = &CCDLineGoodNo
		|	И (НЕ CCDLineGoods.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Ссылка.ПолучитьОбъект();
		
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Найдено несколько CCD line goods с номером " + CCDLineGoodNo + " для CCD line """ + CCDLine + """!");
		Возврат Неопределено;
		
	Иначе
		
		Возврат Справочники.ТоварыСтрокГТД.СоздатьЭлемент();
		
	КонецЕсли;
	
КонецФункции

// ДУМАТЬ
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаPayments(Документ, МетаданныеДокумента, СтруктураДанных, Отказ)
	
	МассивСтруктурCustomsPayment = Неопределено;
	Если НЕ СтруктураДанных.Свойство("ESADout_CUCustomsPayment", МассивСтруктурCustomsPayment) Тогда
		СтруктураДанных.Свойство("ESADoutCustomsPayment", МассивСтруктурCustomsPayment);
	КонецЕсли;
	Если МассивСтруктурCustomsPayment = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Неизвестный формат xml: не удалось найти узел CustomsPayment!",
			,,, Отказ);
	Иначе
		
		Документ.ПодробностиПодсчета.Очистить();
		Для Каждого СтруктураCustomsPayment Из МассивСтруктурCustomsPayment Цикл
			
			СтрокаПодробностиПодсчета = Документ.ПодробностиПодсчета.Добавить();
			СтрокаПодробностиПодсчета.КодВидаПлатежа = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураCustomsPayment, "PaymentModeCode");
			
			СуммаПлатежаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураCustomsPayment, "PaymentAmount");
			Если СуммаПлатежаТекст <> Неопределено Тогда
				Попытка
					СтрокаПодробностиПодсчета.СуммаПлатежа = Число(СуммаПлатежаТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Не удалось преобразовать в число значение """ + СуммаПлатежаТекст + """ для поля ""Сумма платежа"" табличной части ""Платежи""!");
				КонецПопытки;
			КонецЕсли;
			
			//КодВалютыПлатежаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураCustomsPayment, "PaymentCurrencyCode");
			//Если КодВалютыПлатежаТекст <> Неопределено Тогда
			//	Если КодВалютыПлатежаТекст = "643" Тогда
			//		КодВалютыПлатежаТекст = "643";
			//	КонецЕсли;
			//	СтрокаПодробностиПодсчета.ВалютаПлатежаПошлин = Справочники.Валюты.НайтиПоКоду(КодВалютыПлатежаТекст);
			//КонецЕсли;
			
			// НЕ ВИДЕЛ ТАКОГО УЗЛА
			КурсВалютыПлатежаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураCustomsPayment, "RateCurrencyCode");
			Если КурсВалютыПлатежаТекст <> Неопределено Тогда
				Попытка
					СтрокаПодробностиПодсчета.КурсВалютыПлатежа = Число(КурсВалютыПлатежаТекст);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Не удалось преобразовать в число значение """ + КурсВалютыПлатежаТекст + """ для поля ""Курс валюты платежа"" табличной части ""Платежи""!");
				КонецПопытки;
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаPresentedDocument(СтрокаГТДОбъект, СтруктураДанных, Отказ)
	
	МассивСтруктурBasicPresentedDocument = Неопределено;
	Если СтруктураДанных.Свойство("ESADoutBasicPresentedDocument", МассивСтруктурBasicPresentedDocument) Тогда
		
		Для Каждого СтруктураДанныхBasicPresentedDocument Из МассивСтруктурBasicPresentedDocument Цикл
			ЗаполнитьДанныеИзУзлаPresentedDocument(СтрокаГТДОбъект, СтруктураДанныхBasicPresentedDocument, Отказ);
		КонецЦикла;
		
	Иначе
		
		СтрокаПредоставленныеДокументы = СтрокаГТДОбъект.ПредоставленныеДокументы.Добавить();
		СтрокаПредоставленныеДокументы.Наименование = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentName");
		СтрокаПредоставленныеДокументы.Номер = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentNumber");
		СтрокаПредоставленныеДокументы.Дата = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PrDocumentDate"); 
		СтрокаПредоставленныеДокументы.КодВидаДокумента = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PresentedDocumentModeCode");
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИзУзлаCustomsPaymentCalculation(СтрокаГТДОбъект, МетаданныеСтрокиГТД, СтруктураДанных, Отказ)
	
	СтрокаИсчислениеПлатежей = СтрокаГТДОбъект.ИсчислениеПлатежей.Добавить();
	ПостфиксОшибки = " в строке №" + СтрокаИсчислениеПлатежей.НомерСтроки + " табличной части ""Исчисление платежей"" строки ГТД №" + СтрокаГТДОбъект.НомерСтрокиГТД;
	
	СтрокаИсчислениеПлатежей.КодВидаПлатежа = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PaymentModeCode");
	Если ЗначениеЗаполнено(СтрокаИсчислениеПлатежей.КодВидаПлатежа) Тогда
		
		СтрокаИсчислениеПлатежей.ВидПлатежа = CustomsСерверПовтИсп.ПолучитьВидТаможенногоПлатежаПоКоду(Лев(СтрокаИсчислениеПлатежей.КодВидаПлатежа, 2));
		Если НЕ ЗначениеЗаполнено(СтрокаИсчислениеПлатежей.ВидПлатежа) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить вид платежа по коду """ + Лев(СтрокаИсчислениеПлатежей.КодВидаПлатежа, 2) + """" + ПостфиксОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаПлатежаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PaymentAmount");
	Если ЗначениеЗаполнено(СуммаПлатежаТекст) Тогда
		Попытка
			СтрокаИсчислениеПлатежей.СуммаПлатежа = Число(СуммаПлатежаТекст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось преобразовать в число сумму платежа """ + СуммаПлатежаТекст + """" + ПостфиксОшибки);
		КонецПопытки;
	КонецЕсли;
	
	КодВалютыПлатежаТекст = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PaymentCurrencyCode");
	Если ЗначениеЗаполнено(КодВалютыПлатежаТекст) Тогда
		Попытка
			СтрокаИсчислениеПлатежей.КодВалютыПлатежа = Число(КодВалютыПлатежаТекст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось преобразовать в число код валюты платежа """ + КодВалютыПлатежаТекст + """" + ПостфиксОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаИсчислениеПлатежей.ОсноваНачисления = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TaxBase");
	СтрокаИсчислениеПлатежей.КодВалютыОсновыНачисления = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "TaxBaseCurrencyCode");
	СтрокаИсчислениеПлатежей.Ставка = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "Rate");
	СтрокаИсчислениеПлатежей.КодТипаСтавки = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RateTypeCode");
	СтрокаИсчислениеПлатежей.ДатаКурса = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CurrencyUseDate");
	СтрокаИсчислениеПлатежей.ДатаСтавки = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "RateUseDate");
	СтрокаИсчислениеПлатежей.СП = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "PaymentCode");
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуАдресаИзСтруктуры(СтруктураАдреса)
	
	Индекс = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураАдреса, "PostalCode");
	Регион = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураАдреса, "Region");
	Город = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураАдреса, "City");
	УлицаДом = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураАдреса, "StreetHouse");
	
	Возврат ?(Индекс = Неопределено, "", Индекс) +
		", " + ?(Регион = Неопределено, "", Регион) + " " + ?(Город = Неопределено, "", Город) +
		", " + ?(УлицаДом = Неопределено, "", УлицаДом);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыCustomsRegime(СтруктураДанных, ДокументОбъект, БылиНедочеты)
	
	// Customs procedure
	CustomsProcedure = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CustomsProcedure");
	Если ЗначениеЗаполнено(CustomsProcedure) Тогда
		ДокументОбъект.ProcedureCode = CustomsProcedure;
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Customs procedure"" is empty!",
			,,, БылиНедочеты);	
	КонецЕсли;
	
	// Customs mode code
	CustomsModeCode = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураДанных, "CustomsModeCode");	
	Если ЗначениеЗаполнено(CustomsModeCode) Тогда
		ДокументОбъект.ModeCode = CustomsModeCode;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Customs mode code"" is empty!",
			,,, БылиНедочеты);
	КонецЕсли;
	
	// Customs regime
	
	// Режим определяется по Procedure и Mode code, и если хотя бы один из этих реквизитов не заполнен - значит мы не найдем режим
	Если НЕ ЗначениеЗаполнено(CustomsProcedure)
		ИЛИ НЕ ЗначениеЗаполнено(CustomsModeCode) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим выборку подоходящих режимов
	СтруктураПоискаCustomsRegime = Новый Структура;
	СтруктураПоискаCustomsRegime.Вставить("ProcedureCode", CustomsProcedure);
	СтруктураПоискаCustomsRegime.Вставить("ModeCode", CustomsModeCode);
	СтруктураПоискаCustomsRegime.Вставить("ПометкаУдаления", Ложь);
	ВыборкаCustomsRegimes = РГСофтСерверПовтИспСеанс.ПолучитьВыборку("Справочник", "CustomsRegimes", "Ссылка", СтруктураПоискаCustomsRegime, Истина);
	
	// Обработаем полученну выборку
	КоличествоНайденныхCustomsRegimes = ВыборкаCustomsRegimes.Количество();
	Если КоличествоНайденныхCustomsRegimes = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to find Customs regime by Procedure code """ + CustomsProcedure + """ and Mode code """ + CustomsModeCode + """!",
			,,, БылиНедочеты);
		
	ИначеЕсли КоличествоНайденныхCustomsRegimes = 1 Тогда
		
		ВыборкаCustomsRegimes.Следующий();
		ДокументОбъект.Regime = ВыборкаCustomsRegimes.Ссылка;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Found more than one Customs regime by Procedure code """ + CustomsProcedure + """ and Mode code """ + CustomsModeCode + """!",
			,,, БылиНедочеты);
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// РАЗБОР ДАННЫХ ДТШКИ ТУРКМЕНИСТАНА

&НаСервереБезКонтекста
Функция СоздатьДТТуркменистанаИзСтруктурыДанныхXML(БылиКритическиеОшибки, БылиНедочеты, СтруктураДанных)
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ДТОбъект = Документы.ГТД.СоздатьДокумент();
	ДТОбъект.УстановитьСсылкуНового(Документы.ГТД.ПолучитьСсылку());
	
	Если НЕ СтруктураДанных.Свойство("Declaration")
		ИЛИ СтруктураДанных.Declaration.Количество() = 0 Тогда
		
		Сообщить("Unknown XML format!
			|Failed to find section Declaration!");
		БылиКритическиеОшибки = Истина;
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	ИначеЕсли СтруктураДанных.Declaration.Количество() > 1 Тогда
		
		Сообщить("Unknown XML format!
			|Found several sections Declaration!");
		БылиКритическиеОшибки = Истина;
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецЕсли;
	
	УзелDeclaration = СтруктураДанных.Declaration[0];
	
	// Customs post
	CustomsPostТекст = ПервоеЗначениеУзлаИзСтруктурыXML(УзелDeclaration, "fa001");
	Если ПроверитьЗначениеИзСтруктурыXML(CustomsPostТекст, "fa001", "Customs post no.", БылиНедочеты) Тогда
		
		ДТОбъект.CustomsPost = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "CustomsPosts", "Код", CustomsPostТекст);
		Если НЕ ЗначениеЗаполнено(ДТОбъект.CustomsPost) Тогда
			
			Сообщить("Failed to find Customs post by code " + CustomsPostТекст + "!");
			БылиНедочеты = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Date
	DateТекст = ПервоеЗначениеУзлаИзСтруктурыXML(УзелDeclaration, "fa002");
	Если ПроверитьЗначениеИзСтруктурыXML(DateТекст, "fa002", "DT date", БылиНедочеты) Тогда
		
		DateТекст = СтрЗаменить(DateТекст, "-", "");
		Попытка
			ДТОбъект.Дата = Дата(DateТекст);
		Исключение
			Сообщить("Failed to convert " + DateТекст + " to DT date!");
			БылиНедочеты = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	// Sequence no.
	// Этого поля в XML нет :-(
	
	// Procedure code (буквы режима)
	ДТОбъект.ProcedureCode = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0101", БылиНедочеты, "Procedure code");
	
	// Mode code (цифры режима)
	ДТОбъект.ModeCode = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0102", БылиНедочеты, "Mode code");
	
	// Regime
	// Найдем режим по буквам и цифрам режима
	Если ЗначениеЗаполнено(ДТОбъект.ProcedureCode) И ЗначениеЗаполнено(ДТОбъект.ModeCode) Тогда
		
		// Сформируем структуру отборов
		
		// Подменим IM на ИМ
		Если ДТОбъект.ProcedureCode = "IM" Тогда
			ProcedureCodeТекст = "ИМ";
		Иначе
			ProcedureCodeТекст = ДТОбъект.ProcedureCode;
		КонецЕсли;
		
		СтруктураПоискаCustomsRegime = Новый Структура;
		СтруктураПоискаCustomsRegime.Вставить("ProcedureCode", ProcedureCodeТекст);
		СтруктураПоискаCustomsRegime.Вставить("ModeCode", ДТОбъект.ModeCode);
		СтруктураПоискаCustomsRegime.Вставить("ПометкаУдаления", Ложь);
		
		// Обратимся к СУБД
		ВыборкаCustomsRegimes = РГСофтСерверПовтИспСеанс.ПолучитьВыборку("Справочник", "CustomsRegimes", "Ссылка", СтруктураПоискаCustomsRegime, Истина);
		
		// Обработаем полученну выборку
		КоличествоНайденныхCustomsRegimes = ВыборкаCustomsRegimes.Количество();
		Если КоличествоНайденныхCustomsRegimes = 0 Тогда
			
			Сообщить("Failed to find Customs regime by Procedure code """ + ProcedureCodeТекст + """ and Mode code """ + ДТОбъект.ModeCode + """!");
			БылиНедочеты = Истина;
			
		ИначеЕсли КоличествоНайденныхCustomsRegimes = 1 Тогда
			
			ВыборкаCustomsRegimes.Следующий();
			ДТОбъект.Regime = ВыборкаCustomsRegimes.Ссылка;
			
		Иначе
			
			Сообщить("Found several Customs regimes by Procedure code """ + ProcedureCodeТекст + """ and Mode code """ + ДТОбъект.ModeCode + """!");
			БылиНедочеты = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отправитель
	ДТОбъект.Отправитель = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0201", БылиНедочеты, "Отправитель");
	
	// Отправитель адрес
	ДТОбъект.ОтправительАдрес = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0202", БылиНедочеты, "Адрес отправителя");
	
	// Получатель
	ДТОбъект.Получатель = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0801", БылиНедочеты, "Получатель");
	
	// Получатель адрес
	ДТОбъект.ПолучательАдрес = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0802", БылиНедочеты, "Адрес получателя");
	
	// Ответственное лицо
	ДТОбъект.ОтветственноеЛицо = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0907", БылиНедочеты, "Ответственное лицо");
	
	// Ответственное лицо адрес
	ДТОбъект.ОтправительАдрес = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f0908", БылиНедочеты, "Адрес ответственного лица");
	
	// Общая таможенная стоимость
	ОбщаяТаможеннаяСтоимостьТекст = ПервоеЗначениеУзлаИзСтруктурыXML(УзелDeclaration, "f1201");
	Если ПроверитьЗначениеИзСтруктурыXML(ОбщаяТаможеннаяСтоимостьТекст, "f1201", "Total customs cost", БылиНедочеты) Тогда
		Попытка
			ДТОбъект.ОбщаяТамСтоимость = Число(ОбщаяТаможеннаяСтоимостьТекст);
		Исключение
			Сообщить("Failed to convert " + ОбщаяТаможеннаяСтоимостьТекст + " to Total customs cost!");
			БылиНедочеты = Истина;
		КонецПопытки;
	КонецЕсли;
	
	// Декларант
	ДТОбъект.Декларант = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f1407", БылиНедочеты, "Декларант");
	
	// Декларант адрес
	ДТОбъект.ДекларантАдрес = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f1408", БылиНедочеты, "Адрес декларанта");
	
	// Код страны отправления
	ДТОбъект.СтранаОтправленияКод = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f1501", БылиНедочеты, "Код страны отправления");
	
	// Условия поставки
	ДТОбъект.УсловияПоставки = ПолучитьИПроверитьПервоеЗначениеУзла(УзелDeclaration, "f2001", БылиНедочеты, "Условия поставки");
	
	// Contract currency
	ContractCurrencyТекст = ПервоеЗначениеУзлаИзСтруктурыXML(УзелDeclaration, "f2201");
	Если ПроверитьЗначениеИзСтруктурыXML(ContractCurrencyТекст, "f2201", "Contract currency", БылиНедочеты) Тогда
		
		ДТОбъект.ContractCurrency = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "Валюты", "Наименование", ContractCurrencyТекст);
		Если НЕ ЗначениеЗаполнено(ДТОбъект.ContractCurrency) Тогда
			
			Сообщить("Failed to find Contract currency by name " + ContractCurrencyТекст + "!");
			БылиНедочеты = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Total invoice amount f2202
	TotalInvoiceAmountТекст = ПервоеЗначениеУзлаИзСтруктурыXML(УзелDeclaration, "f2202");
	Если ПроверитьЗначениеИзСтруктурыXML(TotalInvoiceAmountТекст, "f2202", "Total invoice amount") Тогда
		
	КонецЕсли;
	
	// Contract currency rate f2301
	
	
	
	// Сумма инвойса
	
	// Товары
	Если НЕ СтруктураДанных.Свойство("Goods")
		ИЛИ СтруктураДанных.Declaration.Количество() = 0 Тогда
		
		Сообщить("Unknown XML format!
			|Failed to find section Goods!");
		БылиКритическиеОшибки = Истина;
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецЕсли;
	
	
	
	// ЗАПОЛНИТЬ СТРОКИ ДТ
	
	// Попробуем записать ДТ
	Попытка
		ДТОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save """ + ДТОбъект + """:
			|" + ОписаниеОшибки(),
			,,, БылиКритическиеОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
						
	Возврат ДТОбъект.Ссылка;
	
КонецФункции


//////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураXML, НазваниеУзла)
	
	МассивЗначений = Неопределено;
	Если СтруктураXML.Свойство(НазваниеУзла, МассивЗначений) Тогда
		Возврат МассивЗначений[0];
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗначениеИзСтруктурыXML(Значение, ИмяПоля, Описание, Отказ = Ложь)
	
	Если Значение = Неопределено Тогда
		
		Сообщить("Failed to find field " + ИмяПоля + ", containing " + Описание + "!");
		Отказ = Истина;
		Возврат Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		
		Сообщить("Field " + ИмяПоля + ", containing " + Описание + ", is empty!");
		Отказ = Истина;
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИПроверитьПервоеЗначениеУзла(СтруктураXML, ИмяУзла, БылиНедочеты, ОписаниеРеквизита)
	
	Значение = ПервоеЗначениеУзлаИзСтруктурыXML(СтруктураXML, ИмяУзла);
	Если ПроверитьЗначениеИзСтруктурыXML(Значение, ИмяУзла, ОписаниеРеквизита) Тогда
		Возврат Значение;
	Иначе
		БылиНедочеты = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПопытатьсяЗаписатьОбъект(Объект, Отказ=Неопределено, НазваниеОбъекта = "")
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать " + НазваниеОбъекта + " """ + Объект + """: " + ОписаниеОшибки(),
			Объект,,, Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВЧисло(стрЗначение, МетаданныеОбъекта, ИмяРеквизита)
	
	Попытка
		Значение = Число(стрЗначение);
	Исключение
		Значение = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось преобразовать в число значение """ + стрЗначение + """ для поля """
			+ МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Синоним + """!");
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(стрЗначение, МетаданныеОбъекта, ИмяРеквизита)
	
	Попытка
		Значение = Дата(СтрЗаменить(стрЗначение, "-", ""));
	Исключение
		Значение = '00010101';
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось преобразовать в дату значение """ + стрЗначение + """ для поля """
			+ МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Синоним + """!");
	КонецПопытки;
	
	Возврат Значение;
		
КонецФункции

