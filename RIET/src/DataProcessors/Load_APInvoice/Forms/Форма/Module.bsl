
&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если ЗначениеЗаполнено(Объект.Company) Тогда
		
		МассивДляУдаления = Новый Массив;
		
		Для Каждого Элемент Из Объект.Колизии Цикл
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Отбор = Новый Структура;  
				Отбор.Вставить(Элемент.Type, Элемент.Параметр);
				НайденыеСтроки = Объект.ДанныеДляЗагрузки.НайтиСтроки(Отбор);
				Если НайденыеСтроки.Количество() > 0 Тогда
					Для Каждого Строка Из НайденыеСтроки Цикл
						Строка[Элемент.Type] = Элемент.Значение;	 
					КонецЦикла;
				КонецЕсли;
				МассивДляУдаления.Добавить(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка из МассивДляУдаления Цикл
			Объект.Колизии.Удалить(Строка);
		КонецЦикла;
		
		Если Объект.Колизии.Количество() = 0 Тогда //Начнем загрузку
			НачнемЗагрузку();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите пожалуйста вручную значения для оставшихся элементов");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана компания");
	КонецЕсли;
	
	//НастройкиДиалога = Новый Структура;
	//НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
	//НастройкиДиалога.Вставить("AP", ЭтотОбъект);
	//
	//Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
	//ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура LoadFile(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, AP)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, AP);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, AP)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		Если ЛистЭксель <> "'list for 1S support$'" Тогда
			Продолжить
		КонецЕсли;		
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры = "Trip,Type,ServiceProvider,LegalEntity,InvoiceNumber,FiscalNo,FiscalDate,Received,Sum_wo_VAT,Sum_with_VAT,Booked";
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;  
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции


&НаСервере
Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли; 
		
		
		
		Если ТекстЯчейки = "Trip" Тогда
			СтруктураКолонокИИндексов.Trip = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Type" Тогда
			СтруктураКолонокИИндексов.Type = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Service provider" Тогда
			СтруктураКолонокИИндексов.ServiceProvider = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Legal entity" Тогда
			СтруктураКолонокИИндексов.LegalEntity = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Invoice number" Тогда
			СтруктураКолонокИИндексов.InvoiceNumber = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Fiscal no." Тогда
			СтруктураКолонокИИндексов.FiscalNo = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Fiscal date" Тогда
			СтруктураКолонокИИндексов.FiscalDate = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Received" Тогда
			СтруктураКолонокИИндексов.Received = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Sum w/o VAT" Тогда
			СтруктураКолонокИИндексов.Sum_wo_VAT = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Sum with VAT" Тогда
			СтруктураКолонокИИндексов.Sum_with_VAT = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Booked to ERP date" Тогда
			СтруктураКолонокИИндексов.Booked = НомерКолонки;
		КонецЕсли;   
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции


&НаСервере	
Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP) 
	
	ЗаполнитьДокументДанными(ТаблицаExcel, AP); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументДанными(ТаблицаExcel, AP)
	
	Объект.Колизии.Очистить();
	Объект.ДанныеДляЗагрузки.Очистить();
	
	
	МассивДляПроверки_LE = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "LegalEntity");
	МассивДляПроверки_ServiceProvider = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "ServiceProvider");
	МассивДляПроверки_Trip = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаExcel, "Trip"); 	
	
	ЗапросLE = Новый Запрос;
	ЗапросLE.Текст = "ВЫБРАТЬ
	|	LegalEntities.Ссылка,
	|	LegalEntities.Наименование
	|ИЗ
	|	Справочник.LegalEntities КАК LegalEntities
	|ГДЕ
	|	LegalEntities.Наименование В(&МассивДляПроверки_LE)";
	ЗапросLE.УстановитьПараметр("МассивДляПроверки_LE", МассивДляПроверки_LE);
	РезультатLE = ЗапросLE.Выполнить().Выгрузить();
	
	ЗапросSP = Новый Запрос;
	ЗапросSP.Текст = "ВЫБРАТЬ
	|	ServiceProviders.Ссылка,
	|	ServiceProviders.Наименование
	|ИЗ
	|	Справочник.ServiceProviders КАК ServiceProviders
	|ГДЕ
	|	ServiceProviders.Наименование В(&МассивДляПроверки_ServiceProvider)";
	ЗапросSP.УстановитьПараметр("МассивДляПроверки_ServiceProvider", МассивДляПроверки_ServiceProvider);
	РезультатSP = ЗапросSP.Выполнить().Выгрузить();
	
	ЗапросTrip = Новый Запрос;
	ЗапросTrip.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompanies.Ссылка,
	|	TripNonLawsonCompanies.Номер
	|ИЗ
	|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
	|ГДЕ
	|	TripNonLawsonCompanies.Номер В(&МассивДляПроверки_Trip)";
	ЗапросTrip.УстановитьПараметр("МассивДляПроверки_Trip", МассивДляПроверки_Trip);
	РезультатTrip = ЗапросTrip.Выполнить().Выгрузить();
	
	Для Каждого Строка Из МассивДляПроверки_LE Цикл
		
		НайденнаяСтрока = РезультатLE.Найти(Строка, "Наименование");
		Если НайденнаяСтрока = Неопределено Тогда
			Коллизия = Объект.Колизии.Добавить();
			Коллизия.Параметр = Строка;
			Коллизия.Type = "LegalEntity";		
			Коллизия.Значение = Справочники.LegalEntities.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивДляПроверки_ServiceProvider Цикл
		
		НайденнаяСтрока = РезультатSP.Найти(Строка, "Наименование");
		Если НайденнаяСтрока = Неопределено Тогда
			Коллизия = Объект.Колизии.Добавить();
			Коллизия.Параметр = Строка;
			Коллизия.Type = "ServiceProvider";
			Коллизия.Значение = Справочники.ServiceProviders.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивДляПроверки_Trip Цикл
		
		НайденнаяСтрока = РезультатTrip.Найти(Строка, "Номер");
		Если НайденнаяСтрока = Неопределено Тогда
			Коллизия = Объект.Колизии.Добавить();
			Коллизия.Параметр = Строка;
			Коллизия.Type = "Trip";
			Коллизия.Значение = Документы.TripNonLawsonCompanies.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого Элемент Из ТаблицаExcel Цикл
		
		СтрокаExcel = Объект.ДанныеДляЗагрузки.Добавить();
		Если Элемент.Type = "AP invoice" Тогда
			СтрокаExcel.Type = Перечисления.TransportationRegisterType.AP_Invoice;
		ИначеЕсли Элемент.Type = "SWPS PO" Тогда
			СтрокаExcel.Type = Перечисления.TransportationRegisterType.SWPS_PO;
		КонецЕсли;
		СтрокаExcel.InvoiceNumber = Элемент.InvoiceNumber;
		СтрокаExcel.FiscalNo = Элемент.FiscalNo;
		СтрокаExcel.FiscalDate = Дата(Элемент.FiscalDate + " 00:00:00");
		СтрокаExcel.Received = Дата(Элемент.Received + " 00:00:00");
		Если Элемент.Sum_wo_VAT = Неопределено ИЛИ Элемент.Sum_wo_VAT = "" Тогда
			СтрокаExcel.Sum_wo_VAT = 0 
		Иначе
			СтрокаExcel.Sum_wo_VAT = Число(Элемент.Sum_wo_VAT);
		КонецЕсли;
		Если Элемент.Sum_with_VAT = Неопределено ИЛИ Элемент.Sum_with_VAT = "" Тогда
			СтрокаExcel.Sum_with_VAT = 0
		Иначе
			СтрокаExcel.Sum_with_VAT = Число(Элемент.Sum_with_VAT);
		КонецЕсли;
		СтрокаExcel.Booked = Дата(Элемент.Booked + " 00:00:00");
		НайденнаяСтрокаLE = РезультатLE.Найти(Элемент.LegalEntity, "Наименование");
		Если НайденнаяСтрокаLE <> Неопределено Тогда
			СтрокаExcel.LegalEntity = НайденнаяСтрокаLE.Ссылка;
		Иначе
			СтрокаExcel.LegalEntity = Элемент.LegalEntity;
		КонецЕсли;
		НайденнаяСтрокаSP = РезультатSP.Найти(Элемент.ServiceProvider, "Наименование"); 
		Если НайденнаяСтрокаSP <> Неопределено Тогда
			СтрокаExcel.ServiceProvider = НайденнаяСтрокаSP.Ссылка;
		Иначе
			СтрокаExcel.ServiceProvider = Элемент.ServiceProvider;
		КонецЕсли;
		НайденнаяСтрокаTrip = РезультатTrip.Найти(Элемент.Trip, "Номер"); 
		Если НайденнаяСтрокаTrip <> Неопределено Тогда
			СтрокаExcel.Trip = НайденнаяСтрокаTrip.Ссылка;
		Иначе
			СтрокаExcel.Trip = Элемент.Trip;
		КонецЕсли;
		
	КонецЦикла;
	Если Объект.Колизии.Количество() <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите пожалуйста вручную значения для оставшихся элементов");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
	НастройкиДиалога.Вставить("AP", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура НачнемЗагрузку()
	//НачатьТранзакцию();       
	ТаблицаСоответствий = Объект.ДанныеДляЗагрузки.Выгрузить();
	ТаблицаСоответствий.Свернуть("ServiceProvider, LegalEntity, Type, InvoiceNumber, FiscalNo, FiscalDate, Received, Booked",);
	
	Для Каждого ДанныеШапки Из ТаблицаСоответствий Цикл
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ServiceProvider", ДанныеШапки.ServiceProvider);
		ПараметрыЗаполнения.Вставить("LegalEntity", ДанныеШапки.LegalEntity);
		ПараметрыЗаполнения.Вставить("Type", ДанныеШапки.Type);
		ПараметрыЗаполнения.Вставить("InvoiceNumber", ДанныеШапки.InvoiceNumber);
		ПараметрыЗаполнения.Вставить("FiscalNo", ДанныеШапки.FiscalNo);
		ПараметрыЗаполнения.Вставить("FiscalDate", ДанныеШапки.FiscalDate);
		ПараметрыЗаполнения.Вставить("Received", ДанныеШапки.Received);
		ПараметрыЗаполнения.Вставить("Booked", ДанныеШапки.Booked);
		
		НайденыеСтроки = Объект.ДанныеДляЗагрузки.НайтиСтроки(ПараметрыЗаполнения);
		Если НайденыеСтроки.Количество() > 0 Тогда
			ДокAP = Документы.APInvoice.СоздатьДокумент();
			ДокAP.Дата = ТекущаяДата();
			ЗаполнитьЗначенияСвойств(ДокAP, ДанныеШапки);
			ДокAP.Company = Объект.Company;
			ДокAP.BookedToERP_date = ДанныеШапки.Booked;
			ДокAP.FiscalInvoiceNo = ДанныеШапки.FiscalNo;
			ДокAP.FiscalInvoiceDate = ДанныеШапки.FiscalDate;
			ДокAP.TransportationRegisterType = ДанныеШапки.Type;
			Sum_wo_VAT = 0;
			Sum_with_VAT = 0;
			Для Каждого Строка Из НайденыеСтроки Цикл
				СтрокТЧ = ДокAP.Trips.Добавить();
				СтрокТЧ.Trip = Строка.Trip;
				СтрокТЧ.Sum = Строка.Sum_wo_VAT;
				Sum_wo_VAT = Sum_wo_VAT + Строка.Sum_wo_VAT;
				Sum_with_VAT = Sum_with_VAT + Строка.Sum_with_VAT;
			КонецЦикла;
			ДокAP.SumWithVAT = Sum_with_VAT;
			ДокAP.SumVAT = Sum_wo_VAT;
			ДокAP.VAT = Sum_with_VAT - Sum_wo_VAT;
			ДокAP.Comments = "Загружено с помощью обработки 'Загрузка данных AP invoice'";
			//Попытка
				//ДокAP.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			ДокAP.Записать();
			//КонецПопытки
		КонецЕсли;
	КонецЦикла;
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

