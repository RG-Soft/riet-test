&НаКлиенте
Процедура Загрузить(Команда)
	
	ЗагрузитьНаСервере();
	РасчитатьИтогиПодвала(); 
	
КонецПроцедуры

 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КодыОрганизаций = "7054;7053";  
	ЯзыкДокумента  	= "RU";  
	СписокНомеровЗагрузки.Добавить("1180579");
	СписокНомеровЗагрузки.Добавить("1522859");
	Элементы.РТиУТЧ.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено); 
	Элементы.Тикеты.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено);
	СтавкаВТикетахБезНДС = Ложь;
	ВычитатьИзСуммыУслугиНДС = Истина;
	РазделятьТоварыИУслуги = Истина;
	ПроставлятьВСтрокахРТиУСтавкуНДС = Истина;
	
КонецПроцедуры
     
&НаСервере
Процедура ЗагрузитьНаСервере()
	
	// Подключение
	DataBaseConnection = ПолучитьПодключение();
	Если DataBaseConnection = Неопределено Тогда
		Сообщить("Ошибка подключения к базе Oracle!");
		Возврат;
	КонецЕсли; 	
	
	Объект.РТиУШапка.Очистить();
	Объект.РТиУТЧ.Очистить();
	Объект.Тикеты.Очистить();
	
	массКодыОрганизации 			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыОрганизаций, ";");  
	
	СчетчикСтрок = 1;

	Для каждого КодОрганизации из массКодыОрганизации Цикл  		

		Сообщить("Ищем по коду организации: " + КодОрганизации); 
		
		УжеЕстьДокументов = Объект.РТиУШапка.Количество();
		
		//Считывание 
		Для каждого НомерЗагрузки из СписокНомеровЗагрузки Цикл
			
			НомерДокументаДляПоиска  = НомерЗагрузки.Значение;
			ДанныеДокумента = ПолучитьДанныеДокумента(КодОрганизации, НомерДокументаДляПоиска, ЯзыкДокумента, DataBaseConnection);
			
			//ВывестиМассивТаблиц(ДанныеДокумента,"ТЧ",1); //TODO
			
			Если ДанныеДокумента[0] <> Неопределено И ДанныеДокумента[0].Количество() Тогда // 1-й элемент - ТЗ шапки докумкента
				
				// ШАПКА   			
				
				ДанныеШапки 					= ДанныеДокумента[0][0];   			
				СтрокаШапкиТЗ 					= Объект.РТиУШапка.Добавить(); 			
				СтрокаШапкиТЗ.ДатаДокумента		= ДанныеШапки.INVOICE_DT_Text;
				СтрокаШапкиТЗ.НомерДокумента	= ДанныеШапки.INVOICE_NBR_Text;			
				//Контрагент
				МассКонтрагенты					= ПолучитьКонтрагента(ДанныеШапки);
				Если МассКонтрагенты.Количество() = 1 Тогда
					СтрокаШапкиТЗ.Контрагент = МассКонтрагенты[0];  	
				Иначе
					//Сообщить("По документу с номером " + НомерДокументаДляПоиска + " не найден в соответствие один контрагент");	
				КонецЕсли;
				СтрокаШапкиТЗ.ИННКПП 			= ДанныеШапки.CUST_VAT_REG_NBR_Text; 
				//Договор Контрагента
				МассДоговоры = ПолучитьДоговорКонтрагента(СтрокаШапкиТЗ.Контрагент, ДанныеШапки);
				Если МассДоговоры.Количество() = 1 Тогда
					СтрокаШапкиТЗ.ДоговорКонтрагента = МассДоговоры[0];  	
				Иначе
					//Сообщить("По документу с номером " + НомерДокументаДляПоиска + " не найден в соответствие договор контрагента");	
				КонецЕсли;
				СтрокаШапкиТЗ.НомерPO			= ДанныеШапки.CUSTOMER_PO_NBR_Text;
				СтрокаШапкиТЗ.НомерДоговора 	= ДанныеШапки.CONTRACT_REF_NBR_Text;
				
				//Налоговая регистрация
				МассПодразделение = ПолучитьНалоговуюРегистрацию(ДанныеШапки);
				Если МассДоговоры.Количество() = 1 Тогда
					СтрокаШапкиТЗ.НалоговаяРегистрация = МассПодразделение[0];  	
				Иначе
					//Сообщить("По документу с номером " + НомерДокументаДляПоиска + " не найдена в соответствие налоговая регистрация");	
				КонецЕсли; 
				СтрокаШапкиТЗ.ИННКППНР			= ДанныеШапки.DIST_VAT_REG_NBR_Text; 
				//Валюта
				Валюта = ПолучитьВалюту(ДанныеШапки,ЯзыкДокумента);
				Если ЗначениеЗаполнено(Валюта) Тогда
					СтрокаШапкиТЗ.Валюта = Валюта;	
				Иначе
					//Сообщить("По документу с номером " + НомерДокументаДляПоиска + " не найдена валюта");	
				КонецЕсли;   
				
				СтрокаШапкиТЗ.СуммаВсего 		= ДанныеШапки.GRAND_TOTAL_Text;
				
				СтрокаШапкиТЗ.id_Строки 		= СчетчикСтрок;  			
				
				//ТАБЛИЧНАЯ ЧАСТЬ
				ТекСтавкаНДС = Неопределено;
				ТекСуммаНДС  = 0;
				Если ДанныеДокумента[1] <> Неопределено И ДанныеДокумента[1].Количество() Тогда // 2-й элемент - ТЗ ТЧ документа
					ДанныеТЧ = ДанныеДокумента[1]; 
					Для каждого СтрокаТЧ из ДанныеТЧ Цикл
						СтрокаТЧТЗ 					= Объект.РТиУТЧ.Добавить();
						СтрокаТЧТЗ.Цена 			= СтрокаТЧ.INVOICE_LINE_AMT_Text;
						СтрокаТЧТЗ.Сумма 			= СтрокаТЧ.INV_LINE_AMT_INV_PAID_CURR_Text;
						СтрокаТЧТЗ.СуммаНДС 		= СтрокаТЧ.TAX_AMT_INV_PAID_CURR_Text;
						СтрокаТЧТЗ.ИтоговаяСумма    = СтрокаТЧТЗ.Сумма + СтрокаТЧТЗ.СуммаНДС; 
						СтрокаТЧТЗ.Описание 		= СтрокаТЧ.INVOICE_DTL_DSC_Text;  	
						СтрокаТЧТЗ.СтавкаНДС        = ?(СтрокаТЧТЗ.СуммаНДС = 0, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
						ТекСтавкаНДС			    = СтрокаТЧТЗ.СтавкаНДС;
						ТекСуммаНДС					= ТекСуммаНДС + СтрокаТЧТЗ.СуммаНДС;
						// Единица измерения    
						СтрокаТЧТЗ.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СтрокаТЧ,ЯзыкДокумента);
						
						СтрокаТЧТЗ.Услуга           = ?(СокрЛП(СтрокаТЧ.REVENUE_TYPE_CD_Text) = "SAL", Ложь, Истина);
						//Добавила Федотова Л., РГ-Софт, 20.10.15, вопрос SLI-0005890 ->
						НоменклатураНаименование    = СтрокаТЧ.INVOICE_DTL_DSC_Text;
						Номенклатура                = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураНаименование);
						Если Номенклатура.Пустая() Тогда
							НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
							НоменклатураОбъект.Наименование = НоменклатураНаименование; 
							НоменклатураОбъект.НаименованиеПолное = НоменклатураНаименование;
							НоменклатураОбъект.Услуга = СтрокаТЧТЗ.Услуга;
							НоменклатураОбъект.БазоваяЕдиницаИзмерения = СтрокаТЧТЗ.ЕдиницаИзмерения;
							НоменклатураОбъект.ЕдиницаИзмерения = СтрокаТЧТЗ.ЕдиницаИзмерения;
							НоменклатураОбъект.СтавкаНДС = СтрокаТЧТЗ.СтавкаНДС;
							Запрос = Новый Запрос;
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	Номенклатура.Ссылка
							|ИЗ
							|	Справочник.Номенклатура КАК Номенклатура
							|ГДЕ
							|	Номенклатура.ЭтоГруппа
							|	И Номенклатура.Наименование = ""Товар""";
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Родитель = ВыборкаДетальныеЗаписи.Ссылка;
							КонецЦикла;
							
							Если СтрокаТЧТЗ.Услуга Тогда
								Запрос.Текст = 
								"ВЫБРАТЬ
								|	Номенклатура.Ссылка
								|ИЗ
								|	Справочник.Номенклатура КАК Номенклатура
								|ГДЕ
								|	Номенклатура.ЭтоГруппа
								|	И Номенклатура.Наименование = ""Услуги""";
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									НоменклатураОбъект.Родитель = ВыборкаДетальныеЗаписи.Ссылка;
								КонецЦикла;
							Иначе	
								Запрос.Текст = 
								"ВЫБРАТЬ
								|	Номенклатура.Ссылка
								|ИЗ
								|	Справочник.Номенклатура КАК Номенклатура
								|ГДЕ
								|	Номенклатура.ЭтоГруппа
								|	И Номенклатура.Наименование = ""Товары""";
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									НоменклатураОбъект.Родитель = ВыборкаДетальныеЗаписи.Ссылка;
								КонецЦикла;
							КонецЕсли; 
							НоменклатураОбъект.Записать();
							Номенклатура = НоменклатураОбъект.Ссылка;
						КонецЕсли; 
						СтрокаТЧТЗ.Номенклатура = Номенклатура;
						//<-
						СтрокаТЧТЗ.id_Строки 		= СчетчикСтрок;
						
					КонецЦикла;
				Иначе       
					//Сообщить("По документу с номером " + НомерДокументаДляПоиска + " отсутствуют данные табличной части");	
				КонецЕсли; 	
				
				//ТИКЕТЫ
				СтрокаТикета 							= Объект.Тикеты.Добавить();
				СтрокаТикета.id_Строки					= СтрокаШапкиТЗ.id_Строки;
				СтрокаТикета.Статус 					= Перечисления.TicketsStatuses.Oracle;
				СтрокаТикета.TicketNumber 				= СтрокаШапкиТЗ.НомерPO;
				СтрокаТикета.Сумма 						= СтрокаШапкиТЗ.СуммаВсего;
				//-> RG-Soft VIvanov 2015/02/18
				//СтрокаТикета.AccountingUnit 			= Справочники.КостЦентры.НайтиПоКоду("8001002");
				СтрокаТикета.AccountingUnit 			= РГСофт.НайтиAU(СтрокаШапкиТЗ.ДатаДокумента, "8001002");
				//<- RG-Soft VIvanov
				СтрокаТикета.ProductLine 				= СтрокаТикета.AccountingUnit.Родитель;
				//СтрокаТикета.GeoMarket 				= ;  // нет его в AU
				СтрокаТикета.Контрагент 				= СтрокаШапкиТЗ.Контрагент;
				СтрокаТикета.ДоговорКонтрагента 		= СтрокаШапкиТЗ.ДоговорКонтрагента;
				СтрокаТикета.ПодразделениеОрганизации 	= СтрокаШапкиТЗ.НалоговаяРегистрация;    				
				СтрокаТикета.Валюта 					= СтрокаШапкиТЗ.Валюта;
				СтрокаТикета.СтавкаНДС 					= ?(ЗначениеЗаполнено(ТекСтавкаНДС),ТекСтавкаНДС,Перечисления.СтавкиНДС.ПустаяСсылка());
				СтрокаТикета.Тип 						= ?(СтрокаТикета.Сумма >= 0, Перечисления.ТипыТикетов.Инвойс, Перечисления.ТипыТикетов.КредитНота);
				СтрокаТикета.Дата						= СтрокаШапкиТЗ.ДатаДокумента;
				СтрокаТикета.Ответственный 				= ПараметрыСеанса.ТекущийПользователь; 								
				Если СтавкаВТикетахБезНДС Тогда				
					СтрокаТикета.СтавкаНДС 	= Перечисления.СтавкиНДС.БезНДС;  			
				КонецЕсли;
				Если ВычитатьИзСуммыУслугиНДС Тогда				
					СтрокаТикета.Сумма      = СтрокаШапкиТЗ.СуммаВсего - ТекСуммаНДС;				
				КонецЕсли;   

				//<-     			
				
				СчетчикСтрок = СчетчикСтрок + 1;
				
			Иначе
				
				Сообщить("По документу с номером " + НомерДокументаДляПоиска + " данных не найдено (" + КодОрганизации + ")"); 
				
			КонецЕсли; 	
			
		КонецЦикла;  
		
		Сообщить("По коду организации: " + КодОрганизации + " найдено " + Строка(Объект.РТиУШапка.Количество() - УжеЕстьДокументов) + " документов"); 
		
	КонецЦикла;	
		
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Номера", Объект.РТиУШапка.Выгрузить().ВыгрузитьКолонку("НомерДокумента"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК РТиУ,
	               |	РеализацияТоваровУслуг.Номер
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Номер В(&Номера)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(РеализацияТоваровУслугУслуги.Ticket) КАК Ticket,
	               |	РеализацияТоваровУслугУслуги.Ссылка КАК РТиУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка.Номер В(&Номера)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугУслуги.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(РеализацияТоваровУслугТовары.Ticket),
	               |	РеализацияТоваровУслугТовары.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка.Номер В(&Номера)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугТовары.Ссылка";
	
				   
	Результат = Запрос.ВыполнитьПакет();
	СуществующиеРТиУ 	= Результат[0].Выгрузить(); 
	СуществующиеТикеты 	= Результат[1].Выгрузить(); 
	
	Для каждого Строка из СуществующиеРТиУ Цикл
	
		СтрокиСуществущих = Объект.РТиУШапка.НайтиСтроки(Новый Структура("НомерДокумента", СокрЛП(Строка.Номер)));
		Если СтрокиСуществущих.Количество() Тогда
			Для каждого СтрокаСущ из СтрокиСуществущих Цикл
				СтрокаСущ.РТиУ = Строка.РТиУ;
				
				//Проставим найденный тикет 21/04/2014
				СтрокиСуществующихТикетов = СуществующиеТикеты.НайтиСтроки(Новый Структура("РТиУ",СтрокаСущ.РТиУ));  
				Если СтрокиСуществующихТикетов.Количество() Тогда					  					
					НайденныеСтрокиУслуг = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки",СтрокаСущ.id_Строки)); 
					Если НайденныеСтрокиУслуг.Количество() Тогда 
						Для каждого СтрокаНайд из НайденныеСтрокиУслуг Цикл 				
							СтрокаНайд.Ticket = СтрокиСуществующихТикетов[0].Ticket;  					
						КонецЦикла; 
					КонецЕсли;   							
					НайденныеСтрокиТикетов = Объект.Тикеты.НайтиСтроки(Новый Структура("id_Строки",СтрокаСущ.id_Строки)); 
					Если НайденныеСтрокиТикетов.Количество() Тогда 
						Для каждого СтрокаНайд из НайденныеСтрокиТикетов Цикл 				
							СтрокаНайд.Ticket = СтрокиСуществующихТикетов[0].Ticket;  					
						КонецЦикла; 
					КонецЕсли;  								
				КонецЕсли;
				//<-				
				
			КонецЦикла;
		КонецЕсли;  
		
	КонецЦикла;
	
	Элементы.РТиУТЧ.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено); 
	Элементы.Тикеты.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено);
	
	УстановитьВозможностьЗагрузкиРТиУ();
	
	//Проверка дублей	
	ТЧДублей = Объект.РТиУШапка.Выгрузить().Скопировать(,"НомерДокумента");
	ТЧДублей.Колонки.Добавить("Колво", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	Для каждого Строка из ТЧДублей Цикл
		Строка.Колво = 1;	
	КонецЦикла;
	ТЧДублей.Свернуть("НомерДокумента", "Колво");
	Для каждого Строка из ТЧДублей Цикл
		Если Строка.Колво > 1 Тогда
			Сообщить("ВНИМАНИЕ, номер документа " + Строка.НомерДокумента + " задублирован!");	
		КонецЕсли;
	КонецЦикла;    	
	//<-   
	
	//Подставляемые номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Услуга
		|	И НЕ Номенклатура.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.Услуга
		|	И НЕ Номенклатура.ПометкаУдаления";    
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	НоменклатураУслуги = РезультатЗапроса[0].Выгрузить()[0].Ссылка;
	НоменклатураТовара = РезультатЗапроса[1].Выгрузить()[0].Ссылка;
	//<-
	
КонецПроцедуры  

&НаСервереБезКонтекста 
Функция ПолучитьКонтрагента(ДанныеШапки) 	
	
	ИННиКПП				      = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сокрлп(ДанныеШапки.CUST_VAT_REG_NBR_Text),"/", Символы.ПС), Символы.ПС); 							
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИННиКПП[0]);
	Если ИннИкпп.количество()>1 Тогда
		Запрос.УстановитьПараметр("КПП", ИННиКПП[1]); 
	ИНаче
		Запрос.УстановитьПараметр("КПП", ""); 
	КонецЕсли; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП"; 	
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");    	
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьДоговорКонтрагента(Контрагент, ДанныеШапки) 	
						
	МассивТегаCUSTOMER_PO_NBR_Text  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сокрлп(ДанныеШапки.CUSTOMER_PO_NBR_Text)," ", Символы.ПС), Символы.ПС, Истина);
	МассивТегаCONTRACT_REF_NBR_Text = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сокрлп(ДанныеШапки.CONTRACT_REF_NBR_Text)," ", Символы.ПС), Символы.ПС, Истина);
	ТЗНомера = Новый ТаблицаЗначений;
	ТЗНомера.Колонки.Добавить("НомерДоговора", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	Для каждого Элемент из МассивТегаCUSTOMER_PO_NBR_Text Цикл
		НовстрокаТЗНомеров 					= ТЗНомера.Добавить();
		НовстрокаТЗНомеров.НомерДоговора 	= Элемент;
	КонецЦикла;
	Для каждого Элемент из МассивТегаCONTRACT_REF_NBR_Text Цикл
		НовстрокаТЗНомеров 					= ТЗНомера.Добавить();
		НовстрокаТЗНомеров.НомерДоговора 	= Элемент;
	КонецЦикла; 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	Запрос.УстановитьПараметр("ТЗНомераДоговора", 	ТЗНомера);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗНомераДоговора.НомерДоговора
	|ПОМЕСТИТЬ ТЗНомера
	|ИЗ
	|	&ТЗНомераДоговора КАК ТЗНомераДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗНомера КАК ТЗНомера
	|		ПО (ДоговорыКонтрагентов.Наименование ПОДОБНО ""%"" + ТЗНомера.НомерДоговора + ""%"")
	|			И (ДоговорыКонтрагентов.Владелец = &Контрагент)";         		
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьНалоговуюРегистрацию(ДанныеШапки)
	
	ИННиКПП				      = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сокрлп(ДанныеШапки.DIST_VAT_REG_NBR_Text),"/", Символы.ПС), Символы.ПС); 							
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИННиКПП[0]);
	Запрос.УстановитьПараметр("КПП", ИННиКПП[1]); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК НалоговаяРегистрация
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ИНН = &ИНН
		|	И ПодразделенияОрганизаций.КПП = &КПП"; 
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НалоговаяРегистрация"); 	
		
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьВалюту(ДанныеШапки,ЯзыкДокумента) 	

	СтруктураОтбораВалюты = Новый Структура;
	СтруктураОтбораВалюты.Вставить("Language", 	ЯзыкДокумента);
	СтруктураОтбораВалюты.Вставить("Word", 		СокрЛП(ДанныеШапки.CURRENCY_CD_Text));
	СтруктураОтбораВалюты.Вставить("Label", 	"Сurrency");
	КодВалюты			  = РегистрыСведений.Translation.Получить(СтруктураОтбораВалюты).Code;
	ВалютаДокумента 	  = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат ВалютаДокумента;
	Иначе
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;   	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмерения(СтрокаТЧ, ЯзыкДокумента)
	
	СтруктураОтбораЕдИзм = Новый Структура;
	СтруктураОтбораЕдИзм.Вставить("Language", 	ЯзыкДокумента);
	СтруктураОтбораЕдИзм.Вставить("Word", 		СокрЛП(СтрокаТЧ.UOM_CD_Text));
	СтруктураОтбораЕдИзм.Вставить("Label", 		"UOM");
	КодЕдИзм			= РегистрыСведений.Translation.Получить(СтруктураОтбораЕдИзм).Code;
	ЕдИзм 	 			= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодЕдИзм);
	Возврат ЕдИзм;   
	
КонецФункции

&НаСервере 
Функция ПолучитьПодключение()  
	
	ConnectionString =
	"Provider=MSDASQL.1;Password=" + "2t#iyaNqDvXMe0Km" +
	";Persist Security Info=True; User ID=" + 
	"fms_russia_1c" + ";Data Source=" + "EPAB" + ";FWC=T";
	
	DataBaseConnection = Новый COMObject("ADODB.Connection");
	DataBaseConnection.ConnectionString = ConnectionString;
	Попытка 
		DataBaseConnection.Open();
		Возврат  DataBaseConnection;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();  
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции    

&НаСервере 
Функция ПолучитьДанныеДокумента(текКодОрганизации, текКодДокумента, текЯзыкДокумента, текDataBaseConnection)  
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить(ПолучитьТаблицу("FMS_WEB_REPORT.get_invoice_header("+текКодОрганизации+","+текКодДокумента+",'"+текЯзыкДокумента+"')", текDataBaseConnection));	
	МассивТаблиц.Добавить(ПолучитьТаблицу("FMS_WEB_REPORT.get_invoice_detail_charge("+текКодОрганизации+","+текКодДокумента+")", текDataBaseConnection));    	
	
	Возврат МассивТаблиц;
	
КонецФункции    

&НаСервере
Функция ПолучитьТаблицу(ТекстЗапросаОракл, DataBaseConnection) 
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = DataBaseConnection;
	Command.CommandType = 4; // (вызов хранимой процедуры);
	Command.CommandText = ТекстЗапросаОракл;
	Попытка
		Command.Execute();
		RecordSet.Open(Command);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	
	Для НомерСтолбца = 0 По RecordSet.Fields.Count-1 Цикл   //Создание и добавление колонок в таблицу
		ИмяСтолбца =RecordSet.Fields.Item(НомерСтолбца).Name; 
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ".", "_");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ",", "_");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, "'", "");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ")", "");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, "(", "");
		Если ТаблицаВозврата.Колонки.Найти(ИмяСтолбца+"_Text")<> Неопределено Тогда 
			ИмяСтолбца = ИмяСтолбца+"__";
		КонецЕсли;	
		ТаблицаВозврата.Колонки.Добавить(ИмяСтолбца+"_Text");
	КонецЦикла;
	
	Попытка
		Пока НЕ RecordSet.EOF Цикл        // Заполнение созданной таблицы
			НоваяСтрока =  ТаблицаВозврата.Добавить();
			Для НомерСтолбца = 0 По RecordSet.Fields.Count-1 Цикл
				ЗначениеСтроки = RecordSet.Fields(НомерСтолбца).Value;
				Если ТипЗнч(ЗначениеСтроки) = Тип("Строка") Тогда
					ЗначениеСтроки = СтрЗаменить(ЗначениеСтроки, Символы.ПС, " ");
				КонецЕсли; 
				НоваяСтрока.Установить(НомерСтолбца,ЗначениеСтроки);
			КонецЦикла;
			RecordSet.MoveNext();
		КонецЦикла;
		
		RecordSet.Close();
	
	Исключение
		
	КонецПопытки; 
	
	Возврат ТаблицаВозврата;
		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПеревода(DataBaseConnection, ЯзыкДокумента, ТипДокумента) 
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = DataBaseConnection;        
	
	//Command.CommandText = "Select DATA_COLUMN, TRANSLATION FROM FMS_FORM_TRNSLN_LABEL_ALL " +
	//"WHERE FORM_ID = '" + ПовтИсп.ПолучитьФормИД(ТипДокумента) + "'" + " AND LANG_CD = '" + ЯзыкДокумента + "'";
	Command.CommandText = "Select DATA_COLUMN, TRANSLATION FROM FMS_FORM_TRNSLN_LABEL_ALL " +
	"WHERE FORM_PGM_NM = '" + ТипДокумента + "'" + " AND LANG_CD = '" + ЯзыкДокумента + "'";

	Попытка
		Command.Execute();
		RecordSet.Open(Command);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	
	Для НомерСтолбца = 0 По RecordSet.Fields.Count-1 Цикл   //Создание и добавление колонок в таблицу
		ИмяСтолбца =RecordSet.Fields.Item(НомерСтолбца).Name; 
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ".", "_");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ",", "_");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, "'", "");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, ")", "");
		ИмяСтолбца = СтрЗаменить(ИмяСтолбца, "(", "");
		Если ТаблицаВозврата.Колонки.Найти(ИмяСтолбца)<> Неопределено Тогда 
			ИмяСтолбца = ИмяСтолбца+"__";
		КонецЕсли;	
		ТаблицаВозврата.Колонки.Добавить(ИмяСтолбца);
	КонецЦикла;
	
	Попытка
		Пока НЕ RecordSet.EOF Цикл        // Заполнение созданной таблицы
			НоваяСтрока =  ТаблицаВозврата.Добавить();
			Для НомерСтолбца = 0 По RecordSet.Fields.Count-1 Цикл
				ЗначениеСтроки = RecordSet.Fields(НомерСтолбца).Value; 
				НоваяСтрока.Установить(НомерСтолбца,ЗначениеСтроки);
			КонецЦикла;
			RecordSet.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
		
	RecordSet.Close();
		
	Возврат ТаблицаВозврата;
	
КонецФункции	    

&НаКлиенте
Процедура ВыгрузитьРегистрПеревода(Команда)
	ВыгрузитьРегистрПереводаСервер();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРегистрПереводаСервер()
	
	Сообщить("Начало " + ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистр.Language,
	|	Регистр.Word,
	|	Регистр.Label,
	|	Регистр.Translation,
	|	Регистр.Code
	|ИЗ
	|	РегистрСведений.Translation КАК Регистр";
	
	Результат = Запрос.Выполнить().Выгрузить();  	
	
	Если НЕ Результат.Количество() Тогда
		Сообщить("Нет элементов регистра");
		Возврат;
	КонецЕсли;
	
	Сообщить("Записываем в XML " + ТекущаяДата());  	
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл("D:\1C\theTranslation.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Элементы");	
	
	Для каждого Строка из Результат Цикл 	
		
		ЗаписатьXML(ЗаписьXML, СокрЛП(Строка.Language), 	"Language",				НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, СокрЛП(Строка.Word), 		"Word",					НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, СокрЛП(Строка.Label), 		"Label",				НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, СокрЛП(Строка.Translation), 	"Translation",			НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, СокрЛП(Строка.Code), 		"Code",					НазначениеТипаXML.Явное);
		         
	КонецЦикла;      	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Сообщить("Конец " + ТекущаяДата());	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРегистрПеревода(Команда)
	ЗагрузитьРегистрПереводаСервер();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРегистрПереводаСервер()
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл("D:\1C\theTranslation.xml");
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	КоличествоЭлементов = 0;
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл    
		
		//Состояние("Обработано: " + КоличествоЭлементов + " записей");
		
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
        Запись = РегистрыСведений.Translation.СоздатьМенеджерЗаписи();
		Запись.Language			= ПрочитатьXML(ЧтениеXML);
		Запись.Word				= ПрочитатьXML(ЧтениеXML);
		Запись.Label			= ПрочитатьXML(ЧтениеXML);
		Запись.Translation		= ПрочитатьXML(ЧтениеXML);
		Запись.Code				= ПрочитатьXML(ЧтениеXML);
		
		Запись.Записать();    		
			
	КонецЦикла;    
	
	ЧтениеXML.Закрыть();	
	
	Сообщить("Всего записано-перезаписано: " + КоличествоЭлементов);  	
	
КонецПроцедуры

&НаКлиенте
Процедура СервисныйФункционалПриИзменении(Элемент)
	
	Элементы.ВыгрузитьРегистрПеревода.Видимость = СервисныйФункционал;
	Элементы.ЗагрузитьРегистрПеревода.Видимость = СервисныйФункционал;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМассивТаблиц(МассивТаблиц,Имя, ЭлементМассива)
	
	Попытка
		
		Сообщить("ВЫводим " + Имя);
		ПервыйРаз = Истина;
		
		Для каждого Строка из МассивТаблиц[ЭлементМассива] Цикл
			
			Строказапись = "";
			Для каждого Колонка из МассивТаблиц[ЭлементМассива].Колонки Цикл         			
				Строказапись = Строказапись + " | " + Строка[Колонка.Имя] + "(" + КОлонка.Имя + ")";		
			КонецЦикла;   			
			
			Заголовок = "";
			Если ПервыйРаз Тогда
				Для каждого Колонка из МассивТаблиц[ЭлементМассива].Колонки Цикл         			
					Заголовок = Заголовок + " | " + Колонка.Имя;	
				КонецЦикла;
				//Сообщить(Заголовок);
				ПервыйРаз = Ложь;
			КОнецЕсли;              	
			
			
			СОобщить(Строказапись);  		
			
		КонецЦикла; 	
		
	Исключение
		Сообщить("Не получилось вывести");
	КонецПопытки;
	
КонецПроцедуры
  
&НаКлиенте
Процедура РТиУШапкаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РТиУШапка.ТекущиеДанные <> Неопределено Тогда
		Элементы.РТиУТЧ.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Элементы.РТиУШапка.ТекущиеДанные.id_Строки);
		Элементы.Тикеты.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Элементы.РТиУШапка.ТекущиеДанные.id_Строки);
	Иначе
		Элементы.РТиУТЧ.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено); 
		Элементы.Тикеты.ОтборСтрок = Новый ФиксированнаяСтруктура("id_Строки", Неопределено); 
	КонецЕсли; 
	
	РасчитатьИтогиПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры

Процедура УстановитьСнятьФлажки(СостояниеФлажка)
		
	Для Каждого Строка из Объект.РТиУШапка Цикл
		Строка.Загружать = СостояниеФлажка;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьЗагрузкиРТиУ()  	
	
	Для каждого Строка из Объект.РТиУШапка Цикл
		
		//Не заполнены поля шапки
		ЗагрузкаЗапрещена = Ложь;
		СуммаИлиДатаДокументаИзменилась = ЗначениеЗаполнено(Строка.РТиУ) И (Строка.РТиУ.СуммаДокумента <> Строка.СуммаВсего ИЛИ НачалоДня(Строка.РТиУ.Дата) <> НачалоДня(Строка.ДатаДокумента)); 
		
		Если (ЗначениеЗаполнено(Строка.РТиУ) И НЕ СуммаИлиДатаДокументаИзменилась) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.Контрагент) 			ИЛИ 
		     НЕ ЗначениеЗаполнено(Строка.НалоговаяРегистрация)	ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента)	ИЛИ 
			 НЕ ЗначениеЗаполнено(Строка.Валюта) Тогда 	
			 
			ЗагрузкаЗапрещена = Истина;  
			
		КонецЕсли;    
		
		Если СуммаИлиДатаДокументаИзменилась Тогда
			Если Строка.РТиУ.СуммаДокумента <> Строка.СуммаВсего Тогда
				Сообщить("В строке №" + Строка.НомерСтроки + " сумма отлична от Oracle! " + Строка.РТиУ.СуммаДокумента + " в 1С, " + Строка.СуммаВсего + " в Oracle");
			КонецЕсли;      
			Если НачалоДня(Строка.РТиУ.Дата) <> НачалоДня(Строка.ДатаДокумента) Тогда
				Сообщить("В строке №" + Строка.НомерСтроки + " дата отлична от Oracle! " + Строка.РТиУ.Дата + " в 1С, " + Строка.ДатаДокумента + " в Oracle");
			КонецЕсли;
		КонецЕсли;
		
		// Табличная часть
		НайденныеСтрокиТЧ = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки));  		
		ИтогСуммы = 0;  		
		Для каждого СтрокаТЧ из НайденныеСтрокиТЧ Цикл 				
			ИтогСуммы = ИтогСуммы + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;    			
		КонецЦикла;
		
		//ТИКЕТЫ
		НайденныеСтрокиТикетов = Объект.Тикеты.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки)); 
		Для каждого СтрокаТЧ из НайденныеСтрокиТикетов Цикл 				
			Если  СтрокаТЧ.Контрагент <> Строка.Контрагент Тогда 
				СтрокаТЧ.Контрагент = Строка.Контрагент;
			КонецЕсли;
			Если  СтрокаТЧ.ПодразделениеОрганизации <> Строка.НалоговаяРегистрация Тогда 
				СтрокаТЧ.ПодразделениеОрганизации = Строка.НалоговаяРегистрация;
			КонецЕсли;
			Если  СтрокаТЧ.ДоговорКонтрагента <> Строка.ДоговорКонтрагента Тогда 
				СтрокаТЧ.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
			КонецЕсли;
			Если  СтрокаТЧ.Валюта <> Строка.Валюта Тогда 
				СтрокаТЧ.Валюта = Строка.Валюта;
			КонецЕсли;
		КонецЦикла; 		
		//<-

	    Строка.Корректно = НЕ (ЗагрузкаЗапрещена ИЛИ ИтогСуммы <> Строка.СуммаВсего);   
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РТиУШапкаПриИзменении(Элемент)
	
	УстановитьВозможностьЗагрузкиРТиУ();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыСервер();
	
КонецПроцедуры

Процедура СоздатьДокументыСервер()

	ВсегоСоздано = 0;
	ВсегоОбновлено = 0;
	
	Для каждого Строка из Объект.РТиУШапка Цикл
		
		Если НЕ (Строка.Загружать и Строка.Корректно) Тогда
			Продолжить;
		КонецЕсли;  		
		
		ЭтоСоздание = Ложь;
		
		Если  ЗначениеЗаполнено(Строка.РТиУ) Тогда 
			РТиУОб = Строка.РТиУ.ПолучитьОбъект();
			ЭтоСоздание = Ложь;
		Иначе
			РТиУОб = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ЭтоСоздание = Истина;
		КонецЕсли;
		
		РТиУОб.Дата				  		= Строка.ДатаДокумента;
		РТиУОб.ДатаПроведения	  		= Строка.ДатаДокумента;
		РТиУОб.НалоговыйПериод	  		= Строка.ДатаДокумента;
		РТиУОб.Номер			 		= Строка.НомерДокумента;
		РТиУОб.ВидОперации		  		= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		РТиУОб.Организация 		  		= Справочники.Организации.НайтиПоКоду("00001");
		РТиУОб.Контрагент 		  		= Строка.Контрагент;  	
		РТиУОб.ДоговорКонтрагента 		= Строка.ДоговорКонтрагента;  	
		РТиУОб.ПодразделениеОрганизации = Строка.НалоговаяРегистрация;  	
		РТиУОб.ВалютаДокумента 			= Строка.Валюта; 
		РТиУОб.СуммаДокумента			= Строка.СуммаВсего;
		РТиУОб.ИнвойсинговыйЦентр	    = Справочники.ИнвойсинговыеЦентры.НайтиПоНаименованию("Smith");
		РТиУОб.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		РТиУОб.УчитыватьНДС				= Истина;

				
		Если РТиУОб.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда 
			РТиУОб.КурсВзаиморасчетов             = 1;
			РТиУОб.КратностьВзаиморасчетов        = 1;   
		Иначе			
			СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(РТиУОб.ВалютаДокумента, РТиУОб.Дата);
			РТиУОб.КурсВзаиморасчетов             = СтруктураКурсаВзаиморасчетов.Курс;
			РТиУОб.КратностьВзаиморасчетов        = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
		
		//	РТиУОб.СпособЗачетаАвансов  		  = Строка.СпособЗачетаАвансов;
		//	РТиУОб.КурсВзаиморасчетов             = Строка.КурсВзаиморасчетов;
		//	РТиУОб.КратностьВзаиморасчетов        = Строка.КратностьВзаиморасчетов;   
		//	РТиУОб.СуммаВключаетНДС				  = Строка.СуммаВключаетНДС;  
		
		РТиУОб.Услуги.Очистить();
		РТиУОб.Товары.Очистить();
		
		НайденныеСтрокиТЧ = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки));  	
		
		Для каждого СтрокаТЧ из НайденныеСтрокиТЧ Цикл   
			
			Если РазделятьТоварыИУслуги Тогда
				Если СтрокаТЧ.Услуга Тогда
					НовСтрока 					= РТиУОб.Услуги.Добавить();
				Иначе
					НовСтрока 					= РТиУОб.Товары.Добавить();	
				КонецЕсли;
			Иначе
				НовСтрока 					= РТиУОб.Услуги.Добавить();
			КонецЕсли;
			
			НовСтрока.Цена  	 		= СтрокаТЧ.Цена;
			НовСтрока.Сумма 			= СтрокаТЧ.Сумма;		
			НовСтрока.СуммаНДС 	 		= СтрокаТЧ.СуммаНДС;
			Если ПроставлятьВСтрокахРТиУСтавкуНДС Тогда
				НовСтрока.СтавкаНДС	 		= СтрокаТЧ.СтавкаНДС; 
			КонецЕсли;
			
			Если СтрокаТЧ.Услуга ИЛИ НЕ РазделятьТоварыИУслуги Тогда
				НовСтрока.Содержание 		= СтрокаТЧ.Описание;
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.Услуга И РазделятьТоварыИУслуги Тогда
				НовСтрока.Количество 	= 1;
			КонецЕсли;   			
				
			НовСтрока.ЕдиницаИзмерения 	= СтрокаТЧ.ЕдиницаИзмерения; 
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				НовСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			Иначе
				Если РазделятьТоварыИУслуги Тогда					
					Если СтрокаТЧ.Услуга Тогда
						НовСтрока.Номенклатура = НоменклатураУслуги;	
					Иначе
						НовСтрока.Номенклатура = НоменклатураТовара;	
					КонецЕсли;					
				Иначе					
					НовСтрока.Номенклатура = НоменклатураУслуги;						
				КонецЕсли;				
			КонецЕсли;		
			
			//-> RG-Soft VIvanov 2015/02/18
			//НовСтрока.КостЦентр			= Справочники.КостЦентры.НайтиПоКоду("8001002");    
			НовСтрока.КостЦентр			= РГСофт.НайтиAU(Строка.ДатаДокумента, "8001002");
			//<- RG-Soft VIvanov
			
		КонецЦикла; 
		
		//	Подвал
		РТиУОб.Комментарий 		= "Загружено из оракла " + Формат(ТекущаяДата(),"ДФ=dd.MM.yy");  	
		
		//ТИКЕТЫ
		НайденныеСтрокиТикета = Объект.Тикеты.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки)); 
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТикета[0].Ticket) Тогда
			ДокТикет = НайденныеСтрокиТикета[0].Ticket.ПолучитьОбъект();
		Иначе
			ДокТикет = Документы.Tickets.СоздатьДокумент();
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ДокТикет,НайденныеСтрокиТикета[0]); 		
		ДокТикет.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		//<-
		
		ПОпытка
			НачатьТранзакцию();
			//ТИКЕТЫ
			Попытка
				ДокТикет.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			Для каждого СтрокаТЧ из РТиУОб.Услуги Цикл    
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из РТиУОб.Товары Цикл    
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из НайденныеСтрокиТЧ Цикл
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из НайденныеСтрокиТикета Цикл
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			//<-			
			//Если РТИуОб.ПометкаУдаления Тогда
			//	РТИуОб.ПометкаУдаления = Ложь;				
			//КонецЕсли;
			РТиУОб.Записать(РежимЗаписиДокумента.Запись);		
			Строка.РТиУ = РТиУОб.Ссылка; 
			Если НЕ ЭтоСоздание Тогда
				ВсегоОбновлено = ВсегоОбновлено + 1;
			Иначе
				ВсегоСоздано = ВсегоСоздано + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 	
		
	КонецЦикла; 	
	
	Сообщить("Создано " + ВсегоСоздано + " РТиУ");
	Сообщить("Обновлено " + ВсегоОбновлено + " РТиУ");
	
	УстановитьВозможностьЗагрузкиРТиУ();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстИзБуфераОбмена() 
	
    ОбъектHtml = Новый COMОбъект("htmlfile");
    Возврат ОбъектHtml.ParentWindow.ClipboardData.Getdata("Text");
	
КонецФункции

&НаКлиенте
Процедура ВставитьИзБуфераОбмена(Команда)
	
	СписокНомеровЗагрузки.Очистить();
	
	Текст = ПолучитьТекстИзБуфераОбмена();
	
	Если ТипЗнч(Текст) = Тип("Строка") и СокрЛП(Текст) <> "" Тогда
		НомераДокументовЗагрузки = СтрЗаменить(СтрЗаменить(СокрЛП(Текст),Символы.ПС,";"),Символы.ВК,"");
		СписокНомеровЗагрузки.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомераДокументовЗагрузки, ";",Истина));  
	Иначе
		Сообщить("Буфер обмена пуст или имеет некорректные данные");
	КонецЕсли;      	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьИтогиПодвала()
	
	ТекСуммаПодвала    		= 0;
	ТекСуммаНДСПодвала 		= 0;
	ТекИтоговаяСуммаПодвала = 0;
	Строка 				= Элементы.РТиУШапка.ТекущиеДанные;
	
	Если Элементы.РТиУШапка.ТекущиеДанные <> Неопределено Тогда	 	
		НайденныеСтрокиТЧ = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки", Строка.id_Строки));  		
		Для каждого СтрокаТЧ из НайденныеСтрокиТЧ Цикл 				
			ТекСуммаПодвала 		= ТекСуммаПодвала 			+ СтрокаТЧ.Сумма;    	
			ТекСуммаНДСПодвала   	= ТекСуммаНДСПодвала   		+ СтрокаТЧ.СуммаНДС; 
			ТекИтоговаяСуммаПодвала = ТекИтоговаяСуммаПодвала	+ СтрокаТЧ.ИтоговаяСумма;
		КонецЦикла;        		
	КонецЕсли;
	
КонецПроцедуры
              
&НаКлиенте
Процедура СвернутьСтрокиТЧ(Команда)
	
	ТекДанные = Элементы.РТиУШапка.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда   		
		
		Если СтрНайти(ЭтаФорма.ИмяФормы,"Внешняя") = 1 Тогда
			ПутьКФормеСвертки = "ВнешняяОбработка.ЗагрузкаРеализацийИзОракла.Форма.ФормаСверткиТЧ";
		Иначе
			ПутьКФормеСвертки = "Обработка.ЗагрузкаРеализацийИзОракла.Форма.ФормаСверткиТЧ";
		Конецесли;
		
		Ответ = ОткрытьФормуМодально(ПутьКФормеСвертки);
		
		Если ЗначениеЗаполнено(Ответ) Тогда
			
			СвернутьСтрокиТЧСервер(Ответ, ТекДанные.id_Строки);
			
		КонецЕсли;       
		
	Иначе 
		Сообщить("Нет строк для сворачивания");
	КонецЕсли;
	
		
КонецПроцедуры

&НаСервере
Процедура СвернутьСтрокиТЧСервер(СтруктураИтоговыхПолей, ИдентификаторСтроки)

	НайденныеСтрокиТЧ = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки",ИдентификаторСтроки));
	ПорцияСтрокТЗ = Объект.РТиУТЧ.Выгрузить(НайденныеСтрокиТЧ);
	ПорцияСтрокТЗ.Свернуть("id_Строки","Сумма,СуммаНДС,ИтоговаяСумма");
	
	НовСтрока = Объект.РТиУТЧ.Добавить();	
	ЗаполнитьЗначенияСвойств(НовСтрока,ПорцияСтрокТЗ[0]);
	
	НовСтрока.Описание 			= СтруктураИтоговыхПолей.Описание;
	НовСтрока.ЕдиницаИзмерения 	= СтруктураИтоговыхПолей.ЕдиницаИзмерения;
	НовСтрока.Цена 				= НовСтрока.Сумма;     
	НовСтрока.СтавкаНДС         = ?(НовСтрока.СуммаНДС = 0, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18); 
	
	Для каждого СтрокаУдаления из НайденныеСтрокиТЧ Цикл
		Объект.РТиУТЧ.Удалить(СтрокаУдаления);	
	КонецЦикла;     
	 
КонецПроцедуры

&НаКлиенте
Процедура ТикетыПриИзменении(Элемент)
	
	УстановитьВозможностьЗагрузкиРТиУ();

КонецПроцедуры

&НаКлиенте
Процедура ПринудительноПроверитьКорректностьДанных(Команда)
	
	УстановитьВозможностьЗагрузкиРТиУ();
	
КонецПроцедуры

&НаКлиенте
Процедура РТиУТЧПриИзменении(Элемент)
	
	Если Элементы.РТиУТЧ.ТекущиеДанные <> Неопределено Тогда
		Элементы.РТиУТЧ.ТекущиеДанные.ИтоговаяСумма = Элементы.РТиУТЧ.ТекущиеДанные.Сумма + Элементы.РТиУТЧ.ТекущиеДанные.СуммаНДС;
	КонецЕсли;
	
	УстановитьВозможностьЗагрузкиРТиУ();
	РасчитатьИтогиПодвала(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОбновитьТикеты(Команда)
	
	ТолькоОбновитьТикетыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТолькоОбновитьТикетыСервер()
	
	ВсегоСоздано = 0;
	ВсегоОбновлено = 0;
	
	Для каждого Строка из Объект.РТиУШапка Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.РТиУ) Тогда
			Продолжить;
		КонецЕсли;  
		
		Если НЕ Строка.Загружать Тогда
			Продолжить;
		КонецЕсли; 
		
		Сообщить("Обновление тикета для строки шапки №" + Строка.НомерСтроки);
		
		РТиУОб = Строка.РТиУ.ПолучитьОбъект();		
			
		НайденныеСтрокиТЧ = Объект.РТиУТЧ.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки));  		
		
		//	Подвал
		РТиУОб.Комментарий 		= "Загружено из оракла (обновление тикета) " + Формат(ТекущаяДата(),"ДФ=dd.MM.yy");  	
		
		//ТИКЕТЫ
		НайденныеСтрокиТикета = Объект.Тикеты.НайтиСтроки(Новый Структура("id_Строки",Строка.id_Строки)); 
		
		ЭтоСоздание = Ложь;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТикета[0].Ticket) Тогда
			ДокТикет = НайденныеСтрокиТикета[0].Ticket.ПолучитьОбъект();
			ЭтоСоздание = Ложь;
		Иначе
			ДокТикет = Документы.Tickets.СоздатьДокумент();
			ЭтоСоздание = Истина;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ДокТикет,НайденныеСтрокиТикета[0]); 		
		ДокТикет.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		//<-
		
		ПОпытка
			НачатьТранзакцию();
			//ТИКЕТЫ
			Попытка
				ДокТикет.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			Для каждого СтрокаТЧ из РТиУОб.Услуги Цикл    
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из РТиУОб.Товары Цикл    
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из НайденныеСтрокиТЧ Цикл
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			Для каждого СтрокаТЧ из НайденныеСтрокиТикета Цикл
				СтрокаТЧ.Ticket = ДокТикет.Ссылка;	
			КонецЦикла;
			//<-			
			
			РТиУОб.Записать(РежимЗаписиДокумента.Запись);				
	
			Если НЕ ЭтоСоздание Тогда
				ВсегоОбновлено = ВсегоОбновлено + 1;
			Иначе
				ВсегоСоздано = ВсегоСоздано + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 	
		
	КонецЦикла; 	
	
	Сообщить("Создано " + ВсегоСоздано + " тикетов");
	Сообщить("Обновлено " + ВсегоОбновлено + " тикетов");
	
	УстановитьВозможностьЗагрузкиРТиУ();
	
КонецПроцедуры
