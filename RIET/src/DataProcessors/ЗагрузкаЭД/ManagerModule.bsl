
Функция ПолучитьТаблицу(ТаблицаСтрокой)
	Возврат ЗначениеИзСтрокиВнутр(ТаблицаСтрокой);	
КонецФункции	   

Функция Загрузить(Структура) Экспорт
	МассивКВозрату = Новый Массив;
	Табл = Новый ТаблицаЗначений;
	Если Структура.ЭД.Количество() Тогда
		Для Каждого Строка Из Структура.ЭД Цикл
			ПредставлениеДок = Строка.XMLПредставление;	
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.УстановитьТекст(ПредставлениеДок);
			ТекстДок.Записать(ИмяФайла, "windows-1251");
			
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьФайл(ИмяФайла);
			
			ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			ОбъектXML.Закрыть();
			УдалитьФайлы(ИмяФайла);
			Попытка
				ТаблицаСтрокой = ДанныеXDTO.Документ.СвТНО.СоотвСВнешДок;
				Табл = ПолучитьТаблицу(ТаблицаСтрокой);
			Исключение
				Табл = Новый ТаблицаЗначений;
			КонецПопытки;
			Отказ = Ложь;
			
			Файл = Неопределено;
			АдресВХранилище = Неопределено;
			УникИдентификатор = Новый УникальныйИдентификатор;
			
			Договор = Строка.ПрисоединенныйФайлОписание;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СсылкаНаДокумент", Неопределено);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникИдентификатор);
			ДополнительныеПараметры.Вставить("ВыбранноеИмяФайла", Строка.НаименованиеФайла);
			ДополнительныеПараметры.Вставить("Соответствие", Табл);
			ДополнительныеПараметры.Вставить("ДвоичныеДанные", Строка.ХранимыйФайл.Получить());
			ДополнительныеПараметры.Вставить("Гуид", Строка.УникальныйИдентификатор);
			ДополнительныеПараметры.Вставить("Табл", Табл);
			ДополнительныеПараметры.Вставить("Договор", Договор);
			//{RGS AFokin 05.04.2017 15:15:15
			Если Табл.Количество() <> 0 Тогда
				ВнешниеДокументы = Истина; 				
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ТипВходящегоДокумента", Строка.ТипВходящегоДокумента);
			ДополнительныеПараметры.Вставить("БазаВходящегоДокумента", Строка.БазаВходящегоДокумента);
			//}RGS AFokin 05.04.2017 15:15:15
			Если СтрНачинаетсяС(Строка.НаименованиеФайла,"ТабличнаяЧастьСтрокой") Тогда
				ОбработатьТабличнуюЧасть(ДополнительныеПараметры);
			Иначе
				Расширение = ?(Найти(Строка.НаименованиеФайла, "SFAKT") = 0, ".xml", ".zip");
				СКПЗаполнен = ОбработатьРезультатПомещенияФайла(Ложь, АдресВХранилище, Строка.НаименованиеФайла + Расширение, ДополнительныеПараметры);
				Если СКПЗаполнен Тогда
					МассивКВозрату.Добавить(Строка.Номер);
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		ЗаполнитьДокументыОснования();
		ВыравниваниеСуммСКП();
	КонецЕсли;
	Возврат МассивКВозрату;
КонецФункции

Процедура ОбработатьТабличнуюЧасть(ДополнительныеПараметры)
	
	 ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
	 ДополнительныеПараметры.ДвоичныеДанные.Записать(ИмяФайла);
	 Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
	 Стр = Текст.ПрочитатьСтроку();
	 ТаблСтрокой = "";
	 Пока Стр <> Неопределено Цикл
		 ТаблСтрокой = ТаблСтрокой + Стр;
		 Стр = Текст.ПрочитатьСтроку();
	 КонецЦикла; 
	 Текст.Закрыть();
	 Таблица = ЗначениеИзСтрокиВнутр(ТаблСтрокой);
	 ПТИУ = Документы.ПоступлениеТоваровУслуг.НайтиПоРеквизиту("ИдентификаторДокумента", ДополнительныеПараметры.Гуид);
	 Если Таблица.Количество() И НЕ ПТИУ.Пустая() Тогда
		Док = ПТИУ.ПолучитьОбъект();
		Для Каждого СтрТЧ Из Таблица Цикл
			Если СтрТЧ.Type = 1 Тогда
				Док.Товары[СтрТЧ.NoStr - 1].НомерPO = СтрТЧ.NoPO;
		    ИначеЕсли СтрТЧ.Type = 2 Тогда
				Док.Услуги[СтрТЧ.NoStr - 1].НомерPO = СтрТЧ.NoPO;
			КонецЕсли;	
		КонецЦикла;	
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать();
	КонецЕсли;	 
	 УдалитьФайлы(ИмяФайла);
 КонецПроцедуры

Процедура ЗаполнитьДокументыОснования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Поступление
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО СчетФактураПолученный.НомерВходящегоДокумента = ПоступлениеТоваровУслуг.Номер
	|			И (НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ))
	|ГДЕ
	|	(СчетФактураПолученный.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетФактураПолученный.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Док = РезультатЗапроса.Выбрать();
	
	Пока Док.Следующий() Цикл
		СФ = Док.Ссылка.ПОлучитьОбъект();
		СФ.ДокументОснование = Док.Поступление;
		СтрокаТЧ = СФ.ДокументыОснования.Добавить();
		СтрокаТЧ.ДокументОснование = Док.Поступление; 
		СФ.Записать();		
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	ВыбранноеИмяФайла = ДополнительныеПараметры.ВыбранноеИмяФайла;
	
	СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресВХранилище, СсылкаНаДокумент, ИмяФайла, ФайлАрхива, ДвоичныеДанные",
	ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникИдентификатор, АдресФайла,
	СсылкаНаДокумент, ВыбранноеИмяФайла, ВРег(Расширение) = Врег("zip"), ДополнительныеПараметры.ДвоичныеДанные);
	
	АдресСтруктурыРазбораЭД = ВыполнитьПросмотрЭДСервер(СтруктураОбмена, Ложь);
	
	//{RGS AFokin 05.04.2017 15:15:15 
	//Возврат СоздатьДокумент(Неопределено, АдресСтруктурыРазбораЭД, ДополнительныеПараметры.Гуид, ДополнительныеПараметры.Табл, ДополнительныеПараметры.Договор);
	Возврат СоздатьДокумент(Неопределено, АдресСтруктурыРазбораЭД, ДополнительныеПараметры.Гуид, ДополнительныеПараметры.Табл, ДополнительныеПараметры.Договор,
		ДополнительныеПараметры.ТипВходящегоДокумента, ДополнительныеПараметры.БазаВходящегоДокумента);
	//}RGS AFokin 05.04.2017 15:15:15 
	
КонецФункции

Функция ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ)
	
	Перем ПерезаполняемыйДокумент, ДеревоРазбора, СтрокаОбъекта;
	УникальныйИдентификатор = СтруктураЭД.УникальныйИдентификатор;
	ФайлПросмотра = Неопределено;
	ИмяФайлаКартинок = Неопределено;
	ЗагрузкаЭД = Истина;
	
	Если ЗагрузкаЭД Тогда
		
		//ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресВХранилище);
		ДвоичныеДанные = СтруктураЭД.ДвоичныеДанные;
		Если СтруктураЭД.ФайлАрхива Тогда
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", СтруктураЭД.УникальныйИдентификатор);
			ИмяФайлаАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанные.Записать(ИмяФайлаАрхива);
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*");
			
			ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
			Попытка
				ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВернутьСтр("ru = 'Распаковка архива ЭД'"),
				ТекстОшибки, ТекстСообщения);
				
				УдалитьФайлы(ИмяФайлаАрхива);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат Ложь;
			КонецПопытки;
			
			УдалитьФайлы(ИмяФайлаАрхива);
			
			МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, "*.xml", Истина);
			Если МассивФайловИсточник.Количество() > 0 Тогда
				
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
				КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
				
			КонецЕсли;
			
			ДопДанные = Неопределено;
			
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			ДвоичныеДанные.Записать(ИмяФайла);
		КонецЕсли;		
		
		СтруктураЭД.Свойство("СсылкаНаДокумент", ПерезаполняемыйДокумент);
	Иначе
		ИмяФайла = СтруктураЭД.ПолноеИмяФайла;
	КонецЕсли;
	
	СтруктураРазбора = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла,
	Перечисления.НаправленияЭД.Входящий,
	,
	ИмяФайлаКартинок);
	ДанныеЭД = Неопределено;
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура") Тогда
		
		АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат АдресСтруктурыРазбораЭД;
	
КонецФункции

Функция СоздатьОбъектыИБ(АдресВременногоХранилища, ОшибкаЗаписи)
	
	Перем ДеревоРазбора;
	ОшибкаЗаписи = ЛОжь;
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора) Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ЭлектронныеДокументыВнутренний.ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		Для Каждого СтрТипа Из ДеревоРазбора.Строки Цикл
			Если СтрТипа.ТипОбъекта = "НоменклатураПоставщиков" Тогда
				Для Каждого СтрОбъекта Из СтрТипа.Строки Цикл
					Если ЗначениеЗаполнено(СтрОбъекта.СсылкаНаОбъект) Тогда
						НомПоставщика = СтрОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
						Для Каждого СтрХарактеристики Из СтрОбъекта.Строки Цикл
							Если СтрХарактеристики.Реквизит = "ТоварКод" Тогда
								НомПоставщика.Артикул = СтрХарактеристики.ЗначениеРеквизита;
							ИначеЕсли СтрХарактеристики.Реквизит =  "Идентификатор" Тогда
								НомПоставщика.Идентификатор = СтрХарактеристики.ЗначениеРеквизита;
							КонецЕсли;
						КонецЦикла;
						НомПоставщика.ОбменДанными.Загрузка = Истина;
						НомПоставщика.Записать();		
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

Функция ИмяСправочника(ИмяСправочника)
	
	ИмяСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
	Возврат ИмяСправочника;
	
КонецФункции

Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Функция СформироватьДокументИБ(ТекстСообщения, Записывать = Ложь, GUID, АдресСтруктурыРазбораЭД, Табл, Договор)
Функция СформироватьДокументИБ(ТекстСообщения, Записывать = Ложь, GUID, АдресСтруктурыРазбораЭД, Табл, Договор, ТипВходящегоДокумента, БазаВходящегоДокумента)
		
	Перем СтрокаОбъекта, ДеревоРазбора;
	
	//{RGS AFokin 05.04.2017 15:15:15
	//Контрагент = Справочники.Контрагенты.НайтиПоКоду("USAB221");
	Если БазаВходящегоДокумента = "TCS" Тогда
		ПрефиксБазы = "Т"; 
		Контрагент = Справочники.Контрагенты.НайтиПоКоду("USAB221");
	ИначеЕсли БазаВходящегоДокумента = "SVS" Тогда
		ПрефиксБазы = "В";
		Контрагент = Справочники.Контрагенты.НайтиПоКоду("консалтинг01463");
	КонецЕсли;	
	//}RGS AFokin 05.04.2017 15:15:15 

	ДокументИБСформирован = Ложь;
	НайденныйОбъект = Неопределено;
	СоздатьСФ = Ложь;
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресСтруктурыРазбораЭД);
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
		И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
		// Если на форме указан контрагент, не совпадающий с контрагентом в дереве разбора (найденный по реквизитам из ЭД),
		// то заменим контрагента в дереве на контрагента с формы.
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
		Если СтрокаДерева <> Неопределено И СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
		КонецЕсли;
		Попытка
			Для Каждого Строка Из СтрокаОбъекта.Строки Цикл
				Если Строка.Реквизит = "Номер" Тогда
					Номер = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "Дата" Тогда
					Дата = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "НомерДокументаОснования" Тогда
					НомерДокументаОснования = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "ДатаДокументаОснования" Тогда
					ДатаДокументаОснования = Строка.ЗначениеРеквизита;	
				ИначеЕсли Строка.Реквизит = "ВалютаКод" Тогда
					КодВалюты = Строка.ЗначениеРеквизита;
				КонецЕсли;	
			КонецЦикла;
			ПТИУ = Документы.ПоступлениеТоваровУслуг.НайтиПоРеквизиту("ИдентификаторДокумента", GUID);
			Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				НайденныйОбъект = ПТИУ;
				
			ИначеЕсли (СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура) Тогда
				Если НЕ ПТИУ.Пустая() Тогда
					НайденныйОбъект = УчетНДС.НайтиПодчиненныйСчетФактуру(ПТИУ, "СчетФактураПолученный");
				КонецЕсли;
				Если НайденныйОбъект = Неопределено ИЛИ НайденныйОбъект.Пустая() Тогда
					НайденныйОбъект = Документы.СчетФактураПолученный.НайтиПоНомеру(Номер, Дата);
				КонецЕсли;	
				
			КонецЕсли;
			ДокументСсылка = ?(НайденныйОбъект.Пустая(), Неопределено, НайденныйОбъект);
			
			//{RGS AFokin 05.04.2017 15:15:15
			ДокументЕстьВБазе = ?(ДокументСсылка = Неопределено, Ложь, Истина);
			//}RGS AFokin 05.04.2017 15:15:15 
			
			Ссылка = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
			ДеревоРазбора,
			ДокументСсылка,
			Записывать);
			
			ДокЗагрузка = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный"), Ссылка.ПолучитьОбъект(), Ссылка);
			
			//{RGS AFokin 05.04.2017 15:15:15
			//ДокЗагрузка.Номер = Номер;
			Если ТипВходящегоДокумента = "Документ.РеализацияТоваровУслуг" Тогда
				ПрефиксДокумента = ПрефиксБазы + "РТ-";
			ИначеЕсли ТипВходящегоДокумента = "Документ.АктОбОказанииПроизводственныхУслуг" Тогда
				ПрефиксДокумента = ПрефиксБазы + "ПУ-";
			ИначеЕсли ТипВходящегоДокумента = "Документ.ПередачаОС" Тогда
				ПрефиксДокумента = ПрефиксБазы + "ПО-";
			КонецЕсли;
			//ДокЗагрузка.ТипВходящегоДокумента = ТипВходящегоДокумента;
			Если НЕ ДокументЕстьВБазе Тогда
				ДокЗагрузка.УстановитьНовыйНомер(ПрефиксДокумента);
			КонецЕсли;		
			//}RGS AFokin 05.04.2017 15:15:15 
			ДокЗагрузка.Дата = Дата;
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				
				ДокЗагрузка.ИдентификаторДокумента = GUID;
				ДокЗагрузка.НомерВходящегоДокумента = Номер;
				ДокЗагрузка.ДатаВходящегоДокумента = Дата;
				
			Иначе
				ДокЗагрузка.ИдентификаторДокумента = GUID;
				ДокЗагрузка.НомерВходящегоДокумента = Номер;
				ДокЗагрузка.ДатаВходящегоДокумента = Дата;
				Если НЕ ЗначениеЗаполнено(ДокЗагрузка.ВалютаДокумента) Тогда
					ДокЗагрузка.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(КодВалюты);
				КонецЕсли;
				НомерСФ = СтрНайти(Договор, "НомерСФ");
				Если НомерСФ = 0 Тогда
					НомерСФСтр = "";
				Иначе
					// { RGS NMinaeva 16.01.2017 9:09:38 
					//ТретьяСторонаВСтр = СтрНайти(Договор, "ТретьяСторона");
					//Если ТретьяСторонаВСтр = 0 Тогда						
					//	НомерСФСтр = Сред(Договор, НомерСФ + 7);						
					//Иначе                                       					
					//	НомерСФСтр = Сред(Договор, НомерСФ + 7, ТретьяСторонаВСтр - НомерСФ - 7);					
					//КонецЕсли; 
					// } RGS NMinaeva 16.01.2017 9:09:38 
					НомерСФСтр = Сред(Договор, НомерСФ + 7);		
				КонецЕсли;
				// { RGS NMinaeva 12.01.2017 16:02:40 
				//ТретьяСторонаСФ = НайтиСоздатьКонтрагента(Сред(Договор,СтрНайти(Договор, "ТретьяСторонаИНН"),СтрНайти(Договор, "ТретьяСторонаКПП") - СтрНайти(Договор, "ТретьяСторонаИНН")-16),Сред(Договор,СтрНайти(Договор, "ТретьяСторонаКПП"),СтрНайти(Договор, "ТретьяСторонаНаименование")-СтрНайти(Договор, "ТретьяСторонаКПП")-16),Сред(Договор,СтрНайти(Договор, "ТретьяСторонаНаименование")));
				// } RGS NMinaeva 12.01.2017 16:02:40 
				Если НомерСФСтр <> "" Тогда
					СоздатьСФ = Истина;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ДокЗагрузка.ДоговорКонтрагента) Тогда
					Договор = ?(НомерСФ = 0, Договор, Сред(Договор, 1, НомерСФ-1));
					Разделитель = СтрНайти(Договор, "РазделительНомерДата");
					Если Разделитель <> 0 И СтрДлина(Договор) <> 20 Тогда
						НомерДоговора = Лев(Договор, Разделитель-1);
						ДатаДоговора = ПривестиКДате(Сред(Договор, Разделитель + 20, 10));
					Иначе
						НомерДоговора = "";
						ДатаДоговора = Дата('00010101');
					КонецЕсли;	
					ДоговорКонтрагента = НайтиСоздатьДоговор(НомерДоговора, ДатаДоговора, Контрагент);
					ДокЗагрузка.ДоговорКонтрагента = ДоговорКонтрагента;
				КонецЕсли;	
				ДокЗагрузка.Счетчик = ДокЗагрузка.Счетчик + 1;
			КонецЕсли;	
			ДокЗагрузка.Записать();
			Попытка 
				ДокЗагрузка.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;	
			Если СоздатьСФ Тогда
				СФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокЗагрузка.Ссылка, "СчетФактураПолученный");
				СчетФактура = Неопределено;
				Если СФ <> Неопределено И СокрЛП(НомерСФСтр) <> СокрЛП(СФ.НомерВходящегоДокумента) Тогда
					СчетФактура = СФ.ПолучитьОбъект();
					СчетФактура.НомерВходящегоДокумента = НомерСФСтр;
					// { RGS NMinaeva 12.01.2017 16:17:46 
					//СчетФактура.Продавцы.Очистить();
					//ИсхПродавец = СчетФактура.Продавцы.Добавить();
					//ИсхПродавец.Продавец = ТретьяСторонаСФ;
					// } RGS NMinaeva 12.01.2017 16:17:46  
				ИначеЕсли  СФ = Неопределено Тогда
					СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
					СчетФактура.Заполнить(ДокЗагрузка.Ссылка);					
					СчетФактура.НомерВходящегоДокумента = НомерСФСтр;
					СчетФактура.ДатаВходящегоДокумента = ДокЗагрузка.Дата;
					СчетФактура.Дата = ДокЗагрузка.Дата;
					// { RGS NMinaeva 12.01.2017 16:17:46 
					//СчетФактура.Продавцы.Очистить();
					//ИсхПродавец = СчетФактура.Продавцы.Добавить();
					//ИсхПродавец.Продавец = ТретьяСторонаСФ;
					// } RGS NMinaeva 12.01.2017 16:17:46 
				КонецЕсли;
				Если СчетФактура <> Неопределено Тогда
					СчетФактура.Записать();
					Попытка 
						СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки;
				КонецЕсли;	
			КонецЕсли;	
			Если ТипЗнч(ДокЗагрузка) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") И ДокЗагрузка.ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия Тогда
				//{RGS AFokin 05.04.2017 15:15:15
				//Признак = ПривязатьКСКПНаСервере(Табл);
				Признак = ПривязатьКСКПНаСервере(Табл, ДокЗагрузка);
				//}RGS AFokin 05.04.2017 15:15:15
				Если НЕ Признак И ДокЗагрузка.Счетчик > 1000 И УправлениеВнеоборотнымиАктивами.РазностьДат(ДокЗагрузка.Дата, ТекущаяДата()) > 3 Тогда
					Возврат Истина;
				КонецЕсли;	
				Возврат Признак;
			Иначе
				Возврат Ложь;
			КонецЕсли;	
			
		Исключение
			а = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;	
	
КонецФункции

//Функция СоздатьДокумент(Команда, АдресСтруктурыРазбораЭД, Гуид, Табл, Договор)
Функция СоздатьДокумент(Команда, АдресСтруктурыРазбораЭД, Гуид, Табл, Договор, ТипВходящегоДокумента, БазаВходящегоДокумента)
	
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Ложь);
	//{RGS AFokin 05.04.2017 15:15:15 
	//Возврат СформироватьДокументИБ("", Ложь, Гуид, АдресСтруктурыРазбораЭД, Табл, Договор);
	Возврат СформироватьДокументИБ("", Ложь, Гуид, АдресСтруктурыРазбораЭД, Табл, Договор, ТипВходящегоДокумента, БазаВходящегоДокумента);
	//}RGS AFokin 05.04.2017 15:15:15
	
КонецФункции

&НаСервере
Функция ПривязатьКСКПНаСервере(Табл, ДокЗагрузка)
	
	//{RGS AFokin 05.04.2017 15:15:15 - привязываем ПТУ к СКП по номеру и дате входящего документа
	// для Востока и ТКШ(передача ос, оказание производственных услуг)
	Если Табл.Количество() = 0 Тогда
		ЗапросДляСКП = Новый Запрос;
		ЗапросДляСКП.Текст = 
		"ВЫБРАТЬ
		|	СчетКнигиПокупок.Ссылка КАК СКП,
		|	ПоступлениеТоваровУслуг.Ссылка КАК ПТиУ
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
		|		ПО &НомерВхДокумента = СчетКнигиПокупок.НомерВходящегоДокумента
		|			И &ДатаВхДокумента = СчетКнигиПокупок.ДатаВходящегоДокумента
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ПТУ";
		
		ЗапросДляСКП.УстановитьПараметр("ПТУ", ДокЗагрузка.Ссылка);
		ЗапросДляСКП.УстановитьПараметр("НомерВхДокумента", СокрЛП(ДокЗагрузка.Ссылка.НомерВходящегоДокумента));
		ЗапросДляСКП.УстановитьПараметр("ДатаВхДокумента", НачалоДня(ДокЗагрузка.Ссылка.ДатаВходящегоДокумента));
		
		
		РезультатЗапроса = ЗапросДляСКП.Выполнить();
		Записан = Ложь;
		Если РезультатЗапроса.Пустой() Тогда
			// записать в ЖР информацию о ненайденном СКП
			Записан = Ложь;
			Возврат Записан;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();		
			ДокСКП = Выборка.СКП.ПолучитьОбъект();
			//Суммы = ДокСКП.Суммы.Выгрузить();
			Для каждого СтрокаСуммы Из ДокСКП.Суммы Цикл
				СтрокаСуммы.ПоступлениеТоваровИУслуг = Выборка.ПТиУ; 	
			КонецЦикла;
			Попытка
				ДокСКП.ОбменДанными.Загрузка = Истина;
				ДокСКП.Записать();
				Записан = Истина;
			Исключение
				Записан = Ложь;
			КонецПопытки;
			Возврат Записан;	
		КонецЕсли;	
	КонецЕсли;
	//}RGS AFokin 05.04.2017 15:15:15 - привязываем ПТУ к СКП по номеру и дате входящего документа
	
	Для Каждого НомерИнвойса Из Табл Цикл
		Если Лев(НомерИнвойса.ВнешнийДокумент, 2) = "I0" Тогда
			СтрокаКопия = Табл.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКопия, НомерИнвойса);
			СтрокаКопия.ВнешнийДокумент = "FMT I0 " + Сред(НомерИнвойса.ВнешнийДокумент, 3);
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.ВнешнийДокумент КАК ВходящийДокумент,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.СуммаВключаетНДС,
	|	ТаблицаДокументов.Сумма
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетКнигиПокупок.Ссылка КАК СКП,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПТиУ,
	|	Соответствие.Сумма,
	|	Соответствие.СуммаВключаетНДС,
	|	Соответствие.Дата
	|ИЗ
	|	Соответствие КАК Соответствие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|		ПО Соответствие.Номер = ПоступлениеТоваровУслуг.Номер
	|		ПО Соответствие.Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	|			И (ВЫБОР
	|				КОГДА ПОДСТРОКА(Соответствие.ВходящийДокумент, 1, 3) = ""FMT""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(Соответствие.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ)
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	|		ПО Соответствие.ВходящийДокумент = СчетКнигиПокупок.НомерВходящегоДокумента
	|ИТОГИ ПО
	|	СКП";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", Табл);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСКП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Записан = Ложь;
	Пока ВыборкаСКП.Следующий() Цикл
		Док = ВыборкаСКП.СКП.ПОлучитьОбъект();
		Выборка = ВыборкаСКП.Выбрать();
		Суммы = Док.Суммы.Выгрузить();
		Суммы.Свернуть("СтавкаНДС", "СуммаСНДС, СуммаБезНДС, СуммаНДС");
		Док.Суммы.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Стр = Док.Суммы.Добавить();
			Стр.ПоступлениеТоваровИУслуг = Выборка.ПТиУ;
			Стр.СуммаНДСРуб = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Выборка.Сумма, Выборка.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Суммы[0].СтавкаНДС));
			Стр.СуммаСНДСРуб = ?(Выборка.СуммаВключаетНДС, Выборка.Сумма, Выборка.Сумма + Стр.СуммаНДСРуб);		 
			Стр.СуммаБезНДСРуб = Стр.СуммаСНДСРуб - Стр.СуммаНДСРуб;
			Стр.Период = Выборка.Дата;
			Стр.СтавкаНДС = Суммы[0].СтавкаНДС;
		КонецЦикла;	
		КолонкаСумм = Док.Суммы.ВыгрузитьКолонку("СуммаСНДСРуб");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаСНДС, Док.Суммы, "СуммаСНДС");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаБезНДС, Док.Суммы, "СуммаБезНДС");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаНДС, Док.Суммы, "СуммаНДС");
		Попытка
			Док.Записать();
		Исключение
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать();
		КонецПопытки;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Записан = Истина;
		Исключение
			Записан = Ложь;
			Прервать;
		КонецПопытки;	
	КонецЦикла;
	Возврат Записан;
	
КонецФункции

Процедура ВыравниваниеСуммСКП()
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетКнигиПокупокСуммы.Ссылка) КАК КолвоИнвойсов,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ПтиуИИнвойсы
	|ИЗ
	|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
	|				СУММА(ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|				ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПоступлениеТоваровУслугТовары.Ссылка
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				СУММА(ПоступлениеТоваровУслугУслуги.Сумма),
	|				СУММА(ПоступлениеТоваровУслугУслуги.СуммаНДС),
	|				ПоступлениеТоваровУслугУслуги.Ссылка
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПоступлениеТоваровУслугУслуги.Ссылка) КАК ВложенныйЗапрос
	|			ПО ПоступлениеТоваровУслуг.Ссылка = ВложенныйЗапрос.Ссылка
	|		ПО СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Дата >= &Дата
	|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетКнигиПокупокСуммы.Ссылка,
	|	СчетКнигиПокупокСуммы.СуммаНДСРуб КАК СуммаНДССКП,
	|	ПтиуИИнвойсы.Ссылка КАК Птиу,
	|	ПтиуИИнвойсы.СуммаНДС КАК СуммаНДСПтиу,
	|	ПтиуИИнвойсы.Сумма КАК СуммаПтиу
	|ИЗ
	|	ПтиуИИнвойсы КАК ПтиуИИнвойсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	|		ПО ПтиуИИнвойсы.Ссылка = СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг
	|			И ПтиуИИнвойсы.СуммаНДС <> СчетКнигиПокупокСуммы.СуммаНДСРуб
	|ГДЕ
	|	ПтиуИИнвойсы.КолвоИнвойсов = 1";
	
	Запрос.УстановитьПараметр("Дата", Дата('20150101'));
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоКоду("USAB221"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Разница = Выборка.СуммаНДСПтиу - Выборка.СуммаНДССКП;
		Разница = ?(Разница<0, - Разница, Разница);
		Если Разница <=  Выборка.СуммаНДССКП/100 Тогда
			Док = Выборка.Ссылка.ПолучитьОбъект();
			СтрокиТЧ = Док.Суммы.НайтиСТроки(Новый Структура("ПоступлениеТоваровИУслуг", Выборка.Птиу));
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				СтрокаТЧ.СуммаБезНДСРуб = Выборка.СуммаПтиу;
				СтрокаТЧ.СуммаНДСРуб = Выборка.СуммаНДСПтиу;
				СтрокаТЧ.СуммаСНДСРуб = Выборка.СуммаПтиу + Выборка.СуммаНДСПтиу; 
			КонецЦикла;	
			Док.Записать();
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;	  
		КонецЕсли;	 
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПтиуИИнвойсы.Ссылка,
	|	ПтиуИИнвойсы.Сумма,
	|	ПтиуИИнвойсы.СуммаНДС,
	|	СУММА(СчетКнигиПокупокСуммы.СуммаБезНДСРуб) КАК СуммаБезНДСРуб,
	|	СУММА(СчетКнигиПокупокСуммы.СуммаНДСРуб) КАК СуммаНДСРуб
	|ПОМЕСТИТЬ ПтиуСРазницей
	|ИЗ
	|	ПтиуИИнвойсы КАК ПтиуИИнвойсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	|		ПО ПтиуИИнвойсы.Ссылка = СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг
	|ГДЕ
	|	ПтиуИИнвойсы.КолвоИнвойсов <> 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ПтиуИИнвойсы.Ссылка,
	|	ПтиуИИнвойсы.Сумма,
	|	ПтиуИИнвойсы.СуммаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(СчетКнигиПокупокСуммы.СуммаНДСРуб) <> ПтиуИИнвойсы.СуммаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПтиуСРазницей.Ссылка КАК Птиу,
	|	ПтиуСРазницей.Сумма - ПтиуСРазницей.СуммаБезНДСРуб КАК РазницаБезНДС,
	|	ПтиуСРазницей.СуммаНДС - ПтиуСРазницей.СуммаНДСРуб КАК РазницаНДС,
	|	СчетКнигиПокупокСуммы.Ссылка КАК СКП,
	|	СчетКнигиПокупокСуммы.СуммаНДСРуб КАК СуммаНДСРуб
	|ИЗ
	|	ПтиуСРазницей КАК ПтиуСРазницей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	|		ПО ПтиуСРазницей.Ссылка = СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ПтиуСРазницей.Ссылка,
	|	СчетКнигиПокупокСуммы.Ссылка,
	|	ПтиуСРазницей.СуммаНДС - ПтиуСРазницей.СуммаНДСРуб,
	|	ПтиуСРазницей.Сумма - ПтиуСРазницей.СуммаБезНДСРуб,
	|	СчетКнигиПокупокСуммы.СуммаНДСРуб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Птиу,
	|	СуммаНДСРуб УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(РазницаНДС),
	|	МАКСИМУМ(СуммаНДСРуб)
	|ПО
	|	Птиу";
	
	Результат = Запрос.Выполнить();
	ВыборкаПтиу = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПтиу.Следующий() Цикл
		РазницаНДС = ?(ВыборкаПтиу.РазницаНДС<0, -ВыборкаПтиу.РазницаНДС, ВыборкаПтиу.РазницаНДС);
		Если РазницаНДС<=ВыборкаПтиу.СуммаНДСРуб/100 Тогда
			Выборка = ВыборкаПтиу.Выбрать();
			Выборка.Следующий();
			Док = Выборка.СКП.ПолучитьОбъект();
			СтрокиТЧ = Док.Суммы.НайтиСТроки(Новый Структура("ПоступлениеТоваровИУслуг", Выборка.Птиу));
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				СтрокаТЧ.СуммаБезНДСРуб = СтрокаТЧ.СуммаБезНДСРуб + Выборка.РазницаБезНДС;
				СтрокаТЧ.СуммаНДСРуб = СтрокаТЧ.СуммаНДСРуб + Выборка.РазницаНДС;
				СтрокаТЧ.СуммаСНДСРуб = СтрокаТЧ.СуммаБезНДСРуб + СтрокаТЧ.СуммаСНДСРуб; 
			КонецЦикла;	
			Док.Записать();
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;	
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

Функция ПривестиКДате(ПрДаты)
	Если НЕ ЗначениеЗаполнено(ПрДаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// если значение уже дата, то ничего не делаем
	Если ТипЗнч(ПрДаты) = Тип("Дата") Тогда
		Возврат ПрДаты;
	КонецЕсли;
	
	УкороченныйТекст = Лев(ПрДаты, 10);
	
	Попытка
		Возврат Дата(Прав(УкороченныйТекст, 4), Сред(УкороченныйТекст, 4, 2) , Лев(УкороченныйТекст, 2) );		
	Исключение
	КонецПопытки;
	RegExp 								= Новый COMОбъект("VBScript.RegExp");
	Результат = Неопределено;
	// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
	Попытка
		RegExp.IgnoreCase 	= Ложь; 	//Игнорировать регистр
		RegExp.Global 		= Истина; 	//Поиск всех вхождений шаблона
		RegExp.MultiLine 	= Ложь; 	//Многострочный режим
		
		RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.((?:19|20)\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
		Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
		ЧислоВхождений  = Matches.Count();
		
		Если ЧислоВхождений>0 Тогда 
			
			Match = Matches.Item(0);
			//Сообщить(Match.Value); // оставлено для образца. Здесь хранится дата в виде строки
			
			SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
			ЧислоПодвыражений = SubMatches.Count();
			Если ЧислоПодвыражений >= 3 Тогда
				// 1 - день, 2 - месяц, 3 - год
				Результат = Дата(SubMatches.Item(2), SubMatches.Item(1), SubMatches.Item(0));
				Возврат Результат; // незачем проверять остальные ветки
			КонецЕсли;	
		КонецЕсли;
		
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	// проверим дату на формат дд.мм.гггг
	Если Результат = Неопределено Тогда
		// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
		Попытка
			RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.(\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
			Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
			ЧислоВхождений  = Matches.Count();
			
			Если ЧислоВхождений>0 Тогда 
				
				Match = Matches.Item(0);
				
				SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
				ЧислоПодвыражений = SubMatches.Count();
				Если ЧислоПодвыражений >= 3 Тогда
					// 1 - день, 2 - месяц, 3 - год
					Результат = Дата("20"+SubMatches.Item(2), SubMatches.Item(1), SubMatches.Item(0));
					Возврат Результат; // незачем проверять остальные ветки
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	// наконец проверим на дату формата 01 февраля 2012
	Если Результат = Неопределено Тогда
		
		СоответствиеМесяцев = Новый Соответствие;
		СоответствиеМесяцев.Вставить("ян", "01");
		СоответствиеМесяцев.Вставить("фе", "02");
		СоответствиеМесяцев.Вставить("ма", "03");
		СоответствиеМесяцев.Вставить("ап", "04");
		СоответствиеМесяцев.Вставить("ма", "05");
		СоответствиеМесяцев.Вставить("июн", "06");
		СоответствиеМесяцев.Вставить("июл", "07");
		СоответствиеМесяцев.Вставить("ав", "08");
		СоответствиеМесяцев.Вставить("се", "09");
		СоответствиеМесяцев.Вставить("ок", "10");
		СоответствиеМесяцев.Вставить("но", "11");
		СоответствиеМесяцев.Вставить("де", "12");
		
		
		// Если не удалось получить дату, то пробуем найти с помощью регулярных выражений
		Попытка
			RegExp.Pattern 	= "(0[1-9]|[12][0-9]|3[01])\ ((янв|февр|мар|апр|ма|июн|июл|авг|сент|окт|ноя|дек)[а-я]+)\ ((?:19|20)\d\d)"; //Шаблон, который соответствует дате в виде dd.mm.yyyy
			Matches			= RegExp.Execute(ПрДаты); // ищем по всей исходной строке
			ЧислоВхождений  = Matches.Count();
			
			Если ЧислоВхождений>0 Тогда 
				
				Match = Matches.Item(0);
				
				SubMatches = Match.SubMatches; // а здесь, дата хранится в частях
				ЧислоПодвыражений = SubMatches.Count();
				Если ЧислоПодвыражений >= 4 Тогда
					
					МесяцСтрокой = SubMatches.Item(1);
					МесяцЧислом  = СоответствиеМесяцев.Получить(Лев(МесяцСтрокой, 2));
					Если МесяцЧислом = Неопределено Тогда
						МесяцЧислом  = СоответствиеМесяцев.Получить(Лев(МесяцСтрокой, 3)); // случай, для июня и июля
					КонецЕсли;
					
					// 1 - день, 2 - месяц, 3 - год
					Результат = Дата(Строка(SubMatches.Item(3)), МесяцЧислом, SubMatches.Item(0));
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСоздатьДоговор(НомерДоговора, ДатаДоговора, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Дата", ДатаДоговора);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номер", НомерДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Наименование = "№" + НомерДоговора + " от " + Строка(ДатаДоговора);
		НовыйДоговор.Владелец = Контрагент;
		НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		НовыйДоговор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
		НовыйДоговор.Организация = Справочники.Организации.НайтиПоКоду("00001");
		НовыйДоговор.Номер = НомерДоговора;
		НовыйДоговор.Дата = ДатаДоговора;
		НовыйДоговор.ОбменДанными.Загрузка = Истина;
		НовыйДоговор.Записать();
		Возврат НовыйДоговор.Ссылка;
	КонецЕсли;
	
КонецФункции	

// { RGS NMinaeva 12.01.2017 16:07:25 
Функция НайтиСоздатьКонтрагента(ИНН, КПП, Наименование)
	
	Если ИНН = "" Тогда
	
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	
	КонецЕсли; 
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	Контрагенты.Ссылка
	                 |ИЗ
	                 |	Справочник.Контрагенты КАК Контрагенты
	                 |ГДЕ
	                 |	Контрагенты.ИНН = &ИНН
	                 |	И Контрагенты.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе	
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ИНН = ИНН;
		НовыйКонтрагент.КПП = КПП;
		НовыйКонтрагент.Наименование = Наименование;
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		НовыйКонтрагент.Записать();
		Возврат НовыйКонтрагент.Ссылка;
	
	КонецЕсли; 
	
КонецФункции
// } RGS NMinaeva 12.01.2017 16:07:25 