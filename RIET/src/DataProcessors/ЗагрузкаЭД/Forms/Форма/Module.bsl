
&НаСервере
Процедура ЗагрузитьНаСервере()
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьТаблицу(ТаблицаСтрокой)
	ТаблицаСоответствий.Загрузить(ЗначениеИзСтрокиВнутр(ТаблицаСтрокой));	
КонецПроцедуры	
&НаКлиенте
Процедура Загрузить(Команда)
	
	МассивФайлов = НайтиФайлы(Каталог, "*.zip",Истина);
	пФайлИмя = "\Соответствие документов.xml";
	XML = Новый ЧтениеXML;
	XML.ОткрытьФайл(Каталог+пФайлИмя);
	Пока XML.Прочитать() Цикл
		Если XML.ТипУзла = ТипУзлаXML.Текст Тогда
			ТаблицаСтрокой = XML.Значение;
		КонецЕсли;
	КонецЦикла;	
	ПолучитьТаблицу(ТаблицаСтрокой);
	Для Каждого Эл Из МассивФайлов Цикл
		Отказ = Ложь;

		//Файл = Неопределено;
		//АдресВХранилище = Неопределено;
		//УникИдентификатор = Новый УникальныйИдентификатор;
		//
		//ВыбранноеИмяФайла = Файл;
		//АдресФайла = ПоместитьВоВременноеХранилище(Файл, УникИдентификатор);
		//
		//ДополнительныеПараметры = Новый Структура;
		//ДополнительныеПараметры.Вставить("СсылкаНаДокумент", Неопределено);
		//ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникИдентификатор);
		//
		//СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресВХранилище, СсылкаНаДокумент, ИмяФайла, ФайлАрхива",
		//ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникИдентификатор, АдресФайла,
		//Неопределено, ВыбранноеИмяФайла, Истина);
		//
		//ВыполнитьПросмотрЭДСервер(СтруктураОбмена, Ложь);
		//СоздатьДокумент(Неопределено);
		Файл = Неопределено;
		АдресВХранилище = Неопределено;
		УникИдентификатор = Новый УникальныйИдентификатор;
		
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СсылкаНаДокумент", Неопределено);
		ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникИдентификатор);
		ДополнительныеПараметры.Вставить("ВыбранноеИмяФайла", Эл.ПолноеИмя);
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, Эл.ПолноеИмя, Ложь, УникИдентификатор);
		
	КонецЦикла;
	ЗаполнитьДокументыОснования();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОснования()
	Для Каждого Док Из ПоступленияИСФ Цикл
		Поступление = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(Док.НомерВходящего, Док.ДатаВходящего);
		СФ = Док.СФ.ПОлучитьОбъект();
		СФ.ДокументОснование = Поступление;
		СтрокаТЧ = СФ.ДокументыОснования.Добавить();
		СтрокаТЧ.ДокументОснование = Поступление; 
		СФ.Записать();
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	ВыбранноеИмяФайла = ДополнительныеПараметры.ВыбранноеИмяФайла;
	
	СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресВХранилище, СсылкаНаДокумент, ИмяФайла, ФайлАрхива",
	ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникИдентификатор, АдресФайла,
	СсылкаНаДокумент, ВыбранноеИмяФайла, ВРег(Расширение) = Врег("zip"));
	
	ВыполнитьПросмотрЭДСервер(СтруктураОбмена, Ложь);
	СоздатьДокумент(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//создание диалога выбора файла
	Режим = РежимДиалогаВыбораФайла.Открытие;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.ПолноеИмяФайла = "";
	Фильтр = "Файл ZIP(*.zip)|*.zip";
	Диалог.Фильтр = Фильтр;
	Диалог.МножественныйВыбор = Истина;
	Диалог.Заголовок = "Выберите файлы с данными ";
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Массив.ЗагрузитьЗначения(Диалог.ВыбранныеФайлы);
		Для каждого Файл  Из Массив Цикл
			ВыбФайл = Файл;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	Файл = ВыбФайл;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ)
	
	Перем ПерезаполняемыйДокумент, ДеревоРазбора, СтрокаОбъекта;
	
	ФайлПросмотра = Неопределено;
	ИмяФайлаКартинок = Неопределено;
	ЗагрузкаЭД = Истина;
	Если ЗагрузкаЭД Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресВХранилище);
		
		Если СтруктураЭД.ФайлАрхива Тогда
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext", СтруктураЭД.УникальныйИдентификатор);
			ИмяФайлаАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанные.Записать(ИмяФайлаАрхива);
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*");
			
			ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
			Попытка
				ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
				МассивЗип = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
				Если МассивЗип.Количество() Тогда
					Для Каждого Зип Из МассивЗип Цикл
						ЧТениеЗипВнутри = Новый ЧтениеZipФайла(Зип.ПолноеИмя);
						ЧТениеЗипВнутри.ИзвлечьВсе(ПапкаДляРаспаковки);
						УдалитьФайлы(ПапкаДляРаспаковки, Зип.ПолноеИмя);
					КонецЦикла;	
				КонецЕсли;	
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВернутьСтр("ru = 'Распаковка архива ЭД'"),
				ТекстОшибки, ТекстСообщения);
				
				УдалитьФайлы(ИмяФайлаАрхива);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат ;
			КонецПопытки;
			
			// скопируем файл просмотра
			МассивФайловПросмотра = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf", Истина);
			Если МассивФайловПросмотра.Количество() > 0 Тогда
				ФайлПросмотра = МассивФайловПросмотра[0];
			КонецЕсли;
			
			// Расшифровать файл с данными
			МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
			Если МассивФайлИнформации.Количество() > 0 Тогда
				ФайлИнформации = МассивФайлИнформации[0];
			КонецЕсли;
			
			МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
			Если МассивФайлКарточки.Количество() > 0 Тогда
				ФайлКарточки = МассивФайлКарточки[0];
			КонецЕсли;
			
			// скопируем файл просмотра
			МассивФайловКартинок = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
			Если МассивФайловКартинок.Количество() > 0 Тогда
				ФайлКартинок = МассивФайловКартинок[0];
				ИмяФайлаКартинок = ФайлКартинок.ПолноеИмя;
			КонецЕсли;
			
			Если ФайлКарточки = Неопределено Или ФайлИнформации = Неопределено Тогда
				
				ШаблонСообщения = ВернутьСтр("ru = 'Возникла ошибка при чтении данных из файла ""%1№"" (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
				
				ШаблонСообщения = ВернутьСтр("ru = 'Файл ""%1"" не содержит электронных документов.'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВернутьСтр("ru = 'Чтение ЭД.'"),
				ПредставлениеОшибки,
				ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			СоответствиеФайлПараметры = ЭлектронныеДокументыВнутренний.ПолучитьСоответствиеФайлПараметры(ФайлИнформации, ФайлКарточки);
			
			Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
				ЗаменаРасширения = СтрЗаменить(ЭлементСоответствия.Ключ, ".zip", ".xml");
				
				МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЗаменаРасширения, Истина);
				Если МассивФайловИсточник.Количество() > 0 Тогда
					ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
					
					
					ИмяФайлаХМЛ = МассивФайловИсточник[0].Имя;
					КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			ДвоичныеДанные.Записать(ИмяФайла);
		КонецЕсли;
		
		СтруктураЭД.Свойство("СсылкаНаДокумент", ПерезаполняемыйДокумент);
	Иначе
		ИмяФайла = СтруктураЭД.ПолноеИмяФайла;
	КонецЕсли;
	
	СтруктураРазбора = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла,
	Перечисления.НаправленияЭД.Входящий,
	,
	ИмяФайлаКартинок);
	ДанныеЭД = Неопределено;
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура") Тогда
		
		АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УникальныйИдентификатор);
		//ДанныеЭД = ЭлектронныеДокументыВнутренний.ПечатнаяФормаЭД(
		//СтруктураРазбора, СтруктураЭД.НаправлениеЭД, СтруктураЭД.УникальныйИдентификатор, , ВидЭД);
	КонецЕсли;
	ИмяОбъектаМетаданных = "Документ.ПоступлениеТоваровУслуг";
	//Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
	//	
	//	Если ЗагрузкаЭД Тогда
	//		Если (НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ СпособЗагрузкиДокумента = 0) И СтруктураРазбора <> Неопределено
	//				И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
	//				И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
	//			ОшибкаЗаписи = Ложь;
	//			СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
	//			Если СтрокаДерева <> Неопределено Тогда
	//				Контрагент = СтрокаДерева.СсылкаНаОбъект;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ЭлектронныеДокументыПереопределяемый.СписокТиповДокументовПоВидуЭД(ВидЭД, СписокТипов);
	//		Для Каждого ТекЗначение Из СписокТипов Цикл
	//			ТекЭлемент = Элементы.ТипОбъекта.СписокВыбора.Добавить();
	//			ТекЭлемент.Значение = ТекЗначение.Представление;
	//			
	//			// Если реквизит ДокументИБ еще не заполнен и зачитано первое по списку значение, то заполним имеющимися данными:
	//			Если НЕ ЗначениеЗаполнено(ДокументИБ) И СписокТипов.Индекс(ТекЗначение) = 0 Тогда
	//				ТипОбъекта = ТекЗначение.Представление;
	//				ДокументИБ = ТекЗначение.Значение;
	//				ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
	//			КонецЕсли;
	//			// Если в структуре параметров есть ссылка на (перезаполняемый) документ ИБ и его тип совпал с типом одного из значений
	//			// списка типов, то заполним этими данными соответствующие реквизиты формы.
	//			// Данное условие необходимо для корректной обработки ситуации, когда в качестве перезаполняемого документа, выбран
	//			// документ с типом не совпадающим ни с одним из доступных в списке или не совпадает с типом первого элемента списка.
	//			Если ЗначениеЗаполнено(ПерезаполняемыйДокумент) И ТипЗнч(ПерезаполняемыйДокумент) = ТипЗнч(ТекЗначение.Значение) Тогда
	//				ТипОбъекта = ТекЗначение.Представление;
	//				ДокументИБ = ПерезаполняемыйДокумент;
	//				ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ПерезаполняемыйДокумент) Тогда
	//		
	//		ИмяСправочникаКонтрагенты = ИмяСправочника("Контрагенты");
	//		
	//		Если Не ЗначениеЗаполнено(ИмяСправочникаКонтрагенты) Тогда
	//			ИмяСправочникаКонтрагенты = "Контрагенты";
	//		КонецЕсли;
	//		
	//		Если ТипЗнч(ПерезаполняемыйДокумент) = Тип("СправочникСсылка."+ ИмяСправочникаКонтрагенты) Тогда
	//			Контрагент = ПерезаполняемыйДокумент;
	//		Иначе
	//			Контрагент = ПерезаполняемыйДокумент.Контрагент;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	ТабличныйДокументФормы = ДанныеЭД;
	//	Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
	//	
	//Иначе
	//	
	//	Если Не ФайлПросмотра = Неопределено Тогда
	//		
	//		
	//		ПутьКФайлу = ФайлПросмотра.ПолноеИмя;
	//		РасширениеФайла = СтрЗаменить(ФайлПросмотра.Расширение, ".", "");
	//		
	//		ДДФайла = Новый ДвоичныеДанные(ПутьКФайлу);
	//		
	//		// Передадим на клиента двоичные данные файла для просмотра:
	//		АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(ДДФайла, УникальныйИдентификатор);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъектыИБ(АдресВременногоХранилища, ОшибкаЗаписи)
	
	Перем ДеревоРазбора;
	ОшибкаЗаписи = ЛОжь;
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора) Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ЭлектронныеДокументыВнутренний.ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИмяСправочника(ИмяСправочника)
	
	ИмяСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
	Возврат ИмяСправочника;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДокументВИБ(СопоставлятьНоменклатуруПередЗаполнениемДокумента, Отказ)
	
	Попытка
		
		ФормаДокумента = ПолучитьФорму(ИмяОбъектаМетаданных + ".ФормаОбъекта");
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
			ДанныеФормы = ФормаДокумента.Объект;
		Иначе
			ДанныеФормы = Неопределено;
		КонецЕсли;
		
		Если Не СформироватьДокументИБ(ДанныеФормы, ТекстСообщения) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			
			//Если Не СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
			//	
			//	ДополниительныеПараметры = Новый Структура;
			//	ДополниительныеПараметры.Вставить("ДанныеФормы", ДанныеФормы);
			//	ДополниительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
			//	
			//	ОбработчикПослеЗаполненияДокумента = Новый ОписаниеОповещения("СопоставитьПослеЗаполненияОповещение", ЭтотОбъект, ДополниительныеПараметры);
			//	
			//	СопоставитьНоменклатуру(ОбработчикПослеЗаполненияДокумента);
			//	
			//КонецЕсли;
			
			//ЗаполнитьДокументДаннымиФормы(ФормаДокумента, ДанныеФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция СформироватьДокументИБ(ДанныеФормы, ТекстСообщения, Записывать = Ложь)
	
	Перем СтрокаОбъекта, ДеревоРазбора;
	
	ДокументИБСформирован = Ложь;
	
	Если ЗначениеЗаполнено(АдресСтруктурыРазбораЭД) И ЭтоАдресВременногоХранилища(АдресСтруктурыРазбораЭД) Тогда
		СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресСтруктурыРазбораЭД);
	Иначе
		СтруктураРазбора = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла,
		Перечисления.НаправленияЭД.Входящий);
	КонецЕсли;
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
		И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
		// Если на форме указан контрагент, не совпадающий с контрагентом в дереве разбора (найденный по реквизитам из ЭД),
		// то заменим контрагента в дереве на контрагента с формы.
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
		КонецЕсли;
		//ДокументСсылка = ?(СпособЗагрузкиДокумента = 1, ДокументИБ, Неопределено);
		Попытка
			Для Каждого Строка Из СтрокаОбъекта.Строки Цикл
				Если Строка.Реквизит = "Номер" Тогда
					Номер = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "Дата" Тогда
					Дата = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "НомерДокументаОснования" Тогда
					НомерДокументаОснования = Строка.ЗначениеРеквизита;
				ИначеЕсли Строка.Реквизит = "ДатаДокументаОснования" Тогда
					ДатаДокументаОснования = Строка.ЗначениеРеквизита;	
				ИначеЕсли Строка.Реквизит = "ВалютаКод" Тогда
                    КодВалюты = Строка.ЗначениеРеквизита;
				КонецЕсли;	
			КонецЦикла;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номер", ?(СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура, НомерДокументаОснования, Номер));
			СтруктураПоиска.Вставить("Дата", ?(СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура, ДатаДокументаОснования, Лев(Строка(Дата), 10)));
			НайденныеСтроки = ТаблицаСоответствий.НайтиСтроки(СтруктураПоиска);
			СтрокаТаблицы = НайденныеСтроки[0];
				
			Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				НайденныйОбъект = Документы.ПоступлениеТоваровУслуг.НайтиПоРеквизиту("ИдентификаторДокумента", СтрокаТаблицы.GUID);
				
			ИначеЕсли (СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура) Тогда
				НайденныйОбъект = Документы.СчетФактураПолученный.НайтиПоРеквизиту("ИдентификаторДокумента", СтрокаТаблицы.GUIDСФ);
			КонецЕсли;
			ДокументСсылка = ?(НайденныйОбъект.Пустая(), Неопределено, НайденныйОбъект);
			КонтрагентСсылка = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
				ДеревоРазбора,
				ДокументСсылка,
				Записывать);
				
				Если ДанныеФормы <> Неопределено Тогда
					КонтрагентОбъект = ?(ТипЗнч(КонтрагентСсылка) = Тип("ДокументСсылка.СчетФактураПолученный"), КонтрагентСсылка.ПолучитьОбъект(), КонтрагентСсылка);
					КонтрагентОбъект.Номер = Номер;
					КонтрагентОбъект.Дата = Дата;
					Если ТипЗнч(КонтрагентСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
						Соответствие = ПоступленияИСФ.Добавить();
						Соответствие.НомерВходящего = НомерДокументаОснования;
						Соответствие.ДатаВходящего = Дата;
						Соответствие.СФ = КонтрагентСсылка;

						КонтрагентОбъект.ИдентификаторДокумента = СтрокаТаблицы.GUIDСФ;
						КонтрагентОбъект.НомерВходящегоДокумента = НомерДокументаОснования;
						КонтрагентОбъект.ДатаВходящегоДокумента = ДатаДокументаОснования;

					Иначе
						КонтрагентОбъект.ИдентификаторДокумента = СтрокаТаблицы.GUID;
						КонтрагентОбъект.НомерВходящегоДокумента = Номер;
						КонтрагентОбъект.ДатаВходящегоДокумента = Дата;
						Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.ВалютаДокумента) Тогда
							КонтрагентОбъект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(КодВалюты);
						КонецЕсли;	
					КонецЕсли;	
					КонтрагентОбъект.Записать();
				Иначе
					
					Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
						
						ДанныеФормы = КонтрагентСсылка;
						
					Иначе
						
						ДанныеФормы = КонтрагентОбъект;
						
					КонецЕсли;
				КонецЕсли;
				
			ДокументИБСформирован = Истина;
			
		Исключение
			
			ШаблонСообщения = ВернутьСтр("ru = '%1.
			|%2 '");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДокументИБСформирован;

	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументДаннымиФормы(ФормаДокумента, ДанныеФормы)
	
	Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
	Иначе
		ФормаДокумента.ДокументОбъект = ДанныеФормы;
	КонецЕсли;
	
	МассивОповещения = Новый Массив;
	МассивОповещения.Добавить(ДокументИБ);
	//Оповестить("ОбновитьДокументИБПослеЗаполненияИзФайла", МассивОповещения);
	//
	ФормаДокумента.Открыть();
	ФормаДокумента.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Ложь);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ЗагрузитьДокументВИБ(СопоставлятьНоменклатуруПередЗаполнениемДокумента, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//создание диалога выбора файла
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Фильтр =  "*.xml|*.zip";
	Диалог.Заголовок = "Выберите каталог с данными для загрузки ";
	Диалог.Показать(Новый ОписаниеОповещения("КаталогНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Каталог = Диалог.Каталог;	
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьКСКПНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.ВнешнийДокумент КАК ВходящийДокумент,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.СуммаВключаетНДС,
	|	ТаблицаДокументов.Сумма
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетКнигиПокупок.Ссылка КАК СКП,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПТиУ,
	|	Соответствие.Сумма,
	|	Соответствие.СуммаВключаетНДС,
	|	Соответствие.Дата
	|ИЗ
	|	Соответствие КАК Соответствие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО Соответствие.Номер = ПоступлениеТоваровУслуг.Номер
	|			И НачалоПЕриода(Соответствие.Дата, День) = НачалоПЕриода(ПоступлениеТоваровУслуг.Дата, День)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	|		ПО Соответствие.ВходящийДокумент = СчетКнигиПокупок.НомерВходящегоДокумента
	|ИТОГИ ПО
	|	СКП";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ЗначениеИзСтрокиВнутр(ТаблицаСтрокой));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСКП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСКП.Следующий() Цикл
		Док = ВыборкаСКП.СКП.ПОлучитьОбъект();
		Выборка = ВыборкаСКП.Выбрать();
		Суммы = Док.Суммы.Выгрузить();
		Суммы.Свернуть("СтавкаНДС", "СуммаСНДС, СуммаБезНДС, СуммаНДС");
		Док.Суммы.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Стр = Док.Суммы.Добавить();
			Стр.ПоступлениеТоваровИУслуг = Выборка.ПТиУ;
			Стр.СуммаНДСРуб = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Выборка.Сумма, Выборка.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Суммы[0].СтавкаНДС));
			Стр.СуммаСНДСРуб = ?(Выборка.СуммаВключаетНДС, Выборка.Сумма, Выборка.Сумма + Стр.СуммаНДСРуб);		 
			Стр.СуммаБезНДСРуб = Стр.СуммаСНДСРуб - Стр.СуммаНДСРуб;
			Стр.Период = Выборка.Дата;
			Стр.СтавкаНДС = Суммы[0].СтавкаНДС;
		КонецЦикла;	
		КолонкаСумм = Док.Суммы.ВыгрузитьКолонку("СуммаСНДСРуб");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаСНДС, Док.Суммы, "СуммаСНДС");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаБезНДС, Док.Суммы, "СуммаБезНДС");
		УчетНДС.РаспределитьСуммуПоСтолбцу(КолонкаСумм, Суммы[0].СуммаНДС, Док.Суммы, "СуммаНДС");
		Попытка
			Док.Записать();
		Исключение
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать();
		КонецПопытки;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Проведен документ " + Док);
		Исключение
			Сообщить("Не удалось провести документ " + Док);
		КонецПопытки;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКСКП(Команда)
ПривязатьКСКПНаСервере();
КонецПроцедуры
