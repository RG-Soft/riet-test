
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ДатаЛокации) Тогда
		ДатаЛокации = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ВремяЛокации = Объект.ВремяМестоположения;
	ДатаСтрокой = Объект.ВремяМестоположения;
	
	НовоеМестоположение = "";
	Элементы.History.Видимость = Ложь;
	
	Stops.Загрузить(Объект.Trip.Stops.Выгрузить());
	
	TripParcels.Загрузить(Объект.Trip.Parcels.Выгрузить());
	
	Equipment = Объект.Trip.Equipment;
	EquipmentNo = Объект.Trip.EquipmentNo;
	RoundTrip = Объект.Trip.RoundTrip;
	Driver = Объект.Trip.Driver;
	
	Элементы.ГруппаМестоположение.ТолькоПросмотр = НЕ ПроверитьДаты(Объект.Trip);
	
	NotificationList.Параметры.УстановитьЗначениеПараметра("Trip", Объект.Trip);
	
КонецПроцедуры

&НаКлиенте
Процедура LocationHistory(Команда)
	
	Если Элементы.History.Видимость = Истина Тогда
		Элементы.History.Видимость = Ложь;
	Иначе
		Элементы.History.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура StopsПриИзменении(Элемент)
	
	ЕстьИзмененияВСтопах = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЕстьИзмененияВСтопах ИЛИ ЕстьИзмененияВПарселях ИЛИ Equipment <> Объект.Trip.Equipment ИЛИ EquipmentNo <> Объект.Trip.EquipmentNo
		ИЛИ RoundTrip <> Объект.Trip.RoundTrip ИЛИ Driver <> Объект.Trip.Driver Тогда
		
		Трип = Объект.Trip.ПолучитьОбъект();
		Если ЕстьИзмененияВСтопах Тогда
			Трип.Stops.Загрузить(Stops.Выгрузить());
			// { RGS vchaplygin 24.04.2018 17:28:46 - Дополняем Локал Время UTM
			Для Каждого ТекущаяСтрока Из Трип.Stops Цикл
				
				ТекущаяСтрока.MaximumReadyToShipUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.MaximumReadyToShipLocalTime, ТекущаяСтрока.Location);
					
				ТекущаяСтрока.MinimumRequiredDeliveryUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.MinimumRequiredDeliveryLocalTime, ТекущаяСтрока.Location);
					
				ТекущаяСтрока.PlannedArrivalUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.PlannedArrivalLocalTime, ТекущаяСтрока.Location);
					
				ТекущаяСтрока.ActualArrivalUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.ActualArrivalLocalTime, ТекущаяСтрока.Location);
				
				ТекущаяСтрока.PlannedDepartureUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.PlannedDepartureLocalTime, ТекущаяСтрока.Location);
				
				ТекущаяСтрока.ActualDepartureUniversalTime = LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(
					ТекущаяСтрока.ActualDepartureLocalTime, ТекущаяСтрока.Location);
				
			КонецЦикла;
			// } RGS vchaplygin 24.04.2018 17:29:24 - Дополняем Локал Время UTM
		КонецЕсли;
		Если ЕстьИзмененияВПарселях Тогда
			Трип.Parcels.Загрузить(TripParcels.Выгрузить());
		КонецЕсли;
		Трип.ДополнительныеСвойства.Вставить("FS",Истина);
		Если ЗначениеЗаполнено(Equipment) И Equipment <> Трип.Equipment Тогда
			Трип.Equipment = Equipment;
		КонецЕсли;
		Если ЗначениеЗаполнено(EquipmentNo) И EquipmentNo <> Трип.EquipmentNo Тогда
			Трип.EquipmentNo = EquipmentNo;
		КонецЕсли;
		Если ЗначениеЗаполнено(RoundTrip) И RoundTrip <> Трип.RoundTrip Тогда
			Трип.RoundTrip = RoundTrip;
		КонецЕсли;
		Если ЗначениеЗаполнено(Driver) И Driver <> Трип.Driver Тогда
			Трип.Driver = Driver;
		КонецЕсли;
		
		Попытка
			Если Трип.Проведен Тогда
				Трип.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Трип.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ВремяСтрокой = Формат(ВремяЛокации, "ДФ=HHmm");
	ДатаСтрокой = Формат(ДатаЛокации, "ДФ='yyyyMMdd'");
	Объект.ВремяМестоположения = ДатаСтрокой + ВремяСтрокой;
	Объект.Местоположение = НовоеМестоположение;
	
	НовоеМестоположение = Неопределено;
	ДатаЛокации = ТекущаяДата();
	ВремяЛокации = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДаты(Трип)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.ActualArrivalLocalTime,
	|	TripNonLawsonCompaniesStops.ActualDepartureLocalTime
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|ГДЕ
	|	TripNonLawsonCompaniesStops.Ссылка = &Трип
	|	И TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Source)";
	Запрос.УстановитьПараметр("Трип",Трип);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат Ложь
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ActualArrivalLocalTime) Тогда
			Возврат Истина
		Иначе
			Возврат Ложь
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ГруппаМестоположение.ТолькоПросмотр = НЕ ПроверитьДаты(Объект.Trip);
	
КонецПроцедуры

&НаКлиенте
Процедура Файлы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Trip);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтаФорма,
	             Ложь,
	             Неопределено);
	
	
КонецПроцедуры

&НаКлиенте
Процедура TripParcelsПриИзменении(Элемент)
	
	ЕстьИзмененияВПарселях = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура TripParcelsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "TripParcelsNumOfParcels" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.TripParcels.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
		ПоказатьЗначение(,ТекДанные.Parcel);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЛокацииПриИзменении(Элемент)
	
	ВремяСтрокой = Формат(ВремяЛокации, "ДФ=HHmm");
	ДатаСтрокой = Формат(ДатаЛокации, "ДФ='yyyyMMdd'");		
	Объект.ВремяМестоположения = ДатаСтрокой + ВремяСтрокой;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателей(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура NotificationListВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекTR = Элементы.NotificationList.ТекущиеДанные.TransportRequest;
	
	Если ЗначениеЗаполнено(ТекTR) Тогда
	
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработкаПолучателей", ЭтотОбъект, ТекTR), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекTR, "NotificationRecipients"), "Please fill notification recipients / Форма заполнения получателей уведомлений", 
				300, Истина);
		
	КонецЕсли;
			
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолучателей(NotificationRecipients, допПараметр) Экспорт
	
	МассивСтруктур = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(NotificationRecipients);
	Отказ = Ложь;
	
	МассивNotificationRecipients = Новый Массив;
	Для Каждого Структура из МассивСтруктур Цикл 
		
		Если ЗначениеЗаполнено(Структура.ОписаниеОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"E-mail '" + Структура.Псевдоним + "': " + Структура.ОписаниеОшибки,
			, , , Отказ);
			
		Иначе 
			МассивNotificationRecipients.Добавить(Структура.Адрес);
		КонецЕсли;
		
	КонецЦикла;

	Если Не Отказ Тогда 
		МассивNotificationRecipients = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивNotificationRecipients);
		NotificationRecipientsFinal = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивNotificationRecipients, ";");
		
		ДобавитьПолучателейНаСервере(допПараметр, NotificationRecipientsFinal);
		Оповестить("ОбновилсяСписокНотификации");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателейНаСервере(TRСсылка, NotificationRecipients)
	УстановитьПривилегированныйРежим(Истина);
	
	TRОбъект = TRСсылка.ПолучитьОбъект();
	TRОбъект.ОбменДанными.Загрузка = Истина;
	TRОбъект.NotificationRecipients = NotificationRecipients;
	TRОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновилсяСписокНотификации" Тогда 
		Элементы.NotificationList.Обновить();
	КонецЕсли;
	
КонецПроцедуры




